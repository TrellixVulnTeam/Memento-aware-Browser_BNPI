// This file is generated by TypeBuilder_cpp.template.

// Copyright (c) 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "chrome/browser/devtools/protocol/security.h"

#include "chrome/browser/devtools/protocol/protocol.h"

#include "third_party/inspector_protocol/crdtp/cbor.h"
#include "third_party/inspector_protocol/crdtp/find_by_first.h"
#include "third_party/inspector_protocol/crdtp/serializer_traits.h"
#include "third_party/inspector_protocol/crdtp/span.h"

namespace protocol {
namespace Security {

// ------------- Enum values from types.

const char Metainfo::domainName[] = "Security";
const char Metainfo::commandPrefix[] = "Security.";
const char Metainfo::version[] = "1.3";

namespace SecurityStateEnum {
const char Unknown[] = "unknown";
const char Neutral[] = "neutral";
const char Insecure[] = "insecure";
const char Secure[] = "secure";
const char Info[] = "info";
const char InsecureBroken[] = "insecure-broken";
} // namespace SecurityStateEnum

std::unique_ptr<CertificateSecurityState> CertificateSecurityState::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<CertificateSecurityState> result(new CertificateSecurityState());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* protocolValue = object->get("protocol");
    errors->SetName("protocol");
    result->m_protocol = ValueConversions<String>::fromValue(protocolValue, errors);
    protocol::Value* keyExchangeValue = object->get("keyExchange");
    errors->SetName("keyExchange");
    result->m_keyExchange = ValueConversions<String>::fromValue(keyExchangeValue, errors);
    protocol::Value* keyExchangeGroupValue = object->get("keyExchangeGroup");
    if (keyExchangeGroupValue) {
        errors->SetName("keyExchangeGroup");
        result->m_keyExchangeGroup = ValueConversions<String>::fromValue(keyExchangeGroupValue, errors);
    }
    protocol::Value* cipherValue = object->get("cipher");
    errors->SetName("cipher");
    result->m_cipher = ValueConversions<String>::fromValue(cipherValue, errors);
    protocol::Value* macValue = object->get("mac");
    if (macValue) {
        errors->SetName("mac");
        result->m_mac = ValueConversions<String>::fromValue(macValue, errors);
    }
    protocol::Value* certificateValue = object->get("certificate");
    errors->SetName("certificate");
    result->m_certificate = ValueConversions<protocol::Array<String>>::fromValue(certificateValue, errors);
    protocol::Value* subjectNameValue = object->get("subjectName");
    errors->SetName("subjectName");
    result->m_subjectName = ValueConversions<String>::fromValue(subjectNameValue, errors);
    protocol::Value* issuerValue = object->get("issuer");
    errors->SetName("issuer");
    result->m_issuer = ValueConversions<String>::fromValue(issuerValue, errors);
    protocol::Value* validFromValue = object->get("validFrom");
    errors->SetName("validFrom");
    result->m_validFrom = ValueConversions<double>::fromValue(validFromValue, errors);
    protocol::Value* validToValue = object->get("validTo");
    errors->SetName("validTo");
    result->m_validTo = ValueConversions<double>::fromValue(validToValue, errors);
    protocol::Value* certificateNetworkErrorValue = object->get("certificateNetworkError");
    if (certificateNetworkErrorValue) {
        errors->SetName("certificateNetworkError");
        result->m_certificateNetworkError = ValueConversions<String>::fromValue(certificateNetworkErrorValue, errors);
    }
    protocol::Value* certificateHasWeakSignatureValue = object->get("certificateHasWeakSignature");
    errors->SetName("certificateHasWeakSignature");
    result->m_certificateHasWeakSignature = ValueConversions<bool>::fromValue(certificateHasWeakSignatureValue, errors);
    protocol::Value* certificateHasSha1SignatureValue = object->get("certificateHasSha1Signature");
    errors->SetName("certificateHasSha1Signature");
    result->m_certificateHasSha1Signature = ValueConversions<bool>::fromValue(certificateHasSha1SignatureValue, errors);
    protocol::Value* modernSSLValue = object->get("modernSSL");
    errors->SetName("modernSSL");
    result->m_modernSSL = ValueConversions<bool>::fromValue(modernSSLValue, errors);
    protocol::Value* obsoleteSslProtocolValue = object->get("obsoleteSslProtocol");
    errors->SetName("obsoleteSslProtocol");
    result->m_obsoleteSslProtocol = ValueConversions<bool>::fromValue(obsoleteSslProtocolValue, errors);
    protocol::Value* obsoleteSslKeyExchangeValue = object->get("obsoleteSslKeyExchange");
    errors->SetName("obsoleteSslKeyExchange");
    result->m_obsoleteSslKeyExchange = ValueConversions<bool>::fromValue(obsoleteSslKeyExchangeValue, errors);
    protocol::Value* obsoleteSslCipherValue = object->get("obsoleteSslCipher");
    errors->SetName("obsoleteSslCipher");
    result->m_obsoleteSslCipher = ValueConversions<bool>::fromValue(obsoleteSslCipherValue, errors);
    protocol::Value* obsoleteSslSignatureValue = object->get("obsoleteSslSignature");
    errors->SetName("obsoleteSslSignature");
    result->m_obsoleteSslSignature = ValueConversions<bool>::fromValue(obsoleteSslSignatureValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> CertificateSecurityState::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("protocol", ValueConversions<String>::toValue(m_protocol));
    result->setValue("keyExchange", ValueConversions<String>::toValue(m_keyExchange));
    if (m_keyExchangeGroup.isJust())
        result->setValue("keyExchangeGroup", ValueConversions<String>::toValue(m_keyExchangeGroup.fromJust()));
    result->setValue("cipher", ValueConversions<String>::toValue(m_cipher));
    if (m_mac.isJust())
        result->setValue("mac", ValueConversions<String>::toValue(m_mac.fromJust()));
    result->setValue("certificate", ValueConversions<protocol::Array<String>>::toValue(m_certificate.get()));
    result->setValue("subjectName", ValueConversions<String>::toValue(m_subjectName));
    result->setValue("issuer", ValueConversions<String>::toValue(m_issuer));
    result->setValue("validFrom", ValueConversions<double>::toValue(m_validFrom));
    result->setValue("validTo", ValueConversions<double>::toValue(m_validTo));
    if (m_certificateNetworkError.isJust())
        result->setValue("certificateNetworkError", ValueConversions<String>::toValue(m_certificateNetworkError.fromJust()));
    result->setValue("certificateHasWeakSignature", ValueConversions<bool>::toValue(m_certificateHasWeakSignature));
    result->setValue("certificateHasSha1Signature", ValueConversions<bool>::toValue(m_certificateHasSha1Signature));
    result->setValue("modernSSL", ValueConversions<bool>::toValue(m_modernSSL));
    result->setValue("obsoleteSslProtocol", ValueConversions<bool>::toValue(m_obsoleteSslProtocol));
    result->setValue("obsoleteSslKeyExchange", ValueConversions<bool>::toValue(m_obsoleteSslKeyExchange));
    result->setValue("obsoleteSslCipher", ValueConversions<bool>::toValue(m_obsoleteSslCipher));
    result->setValue("obsoleteSslSignature", ValueConversions<bool>::toValue(m_obsoleteSslSignature));
    return result;
}

void CertificateSecurityState::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("protocol"), m_protocol, out);
      crdtp::SerializeField(crdtp::SpanFrom("keyExchange"), m_keyExchange, out);
      crdtp::SerializeField(crdtp::SpanFrom("keyExchangeGroup"), m_keyExchangeGroup, out);
      crdtp::SerializeField(crdtp::SpanFrom("cipher"), m_cipher, out);
      crdtp::SerializeField(crdtp::SpanFrom("mac"), m_mac, out);
      crdtp::SerializeField(crdtp::SpanFrom("certificate"), m_certificate, out);
      crdtp::SerializeField(crdtp::SpanFrom("subjectName"), m_subjectName, out);
      crdtp::SerializeField(crdtp::SpanFrom("issuer"), m_issuer, out);
      crdtp::SerializeField(crdtp::SpanFrom("validFrom"), m_validFrom, out);
      crdtp::SerializeField(crdtp::SpanFrom("validTo"), m_validTo, out);
      crdtp::SerializeField(crdtp::SpanFrom("certificateNetworkError"), m_certificateNetworkError, out);
      crdtp::SerializeField(crdtp::SpanFrom("certificateHasWeakSignature"), m_certificateHasWeakSignature, out);
      crdtp::SerializeField(crdtp::SpanFrom("certificateHasSha1Signature"), m_certificateHasSha1Signature, out);
      crdtp::SerializeField(crdtp::SpanFrom("modernSSL"), m_modernSSL, out);
      crdtp::SerializeField(crdtp::SpanFrom("obsoleteSslProtocol"), m_obsoleteSslProtocol, out);
      crdtp::SerializeField(crdtp::SpanFrom("obsoleteSslKeyExchange"), m_obsoleteSslKeyExchange, out);
      crdtp::SerializeField(crdtp::SpanFrom("obsoleteSslCipher"), m_obsoleteSslCipher, out);
      crdtp::SerializeField(crdtp::SpanFrom("obsoleteSslSignature"), m_obsoleteSslSignature, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<CertificateSecurityState> CertificateSecurityState::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

namespace SafetyTipStatusEnum {
const char BadReputation[] = "badReputation";
const char Lookalike[] = "lookalike";
} // namespace SafetyTipStatusEnum

std::unique_ptr<SafetyTipInfo> SafetyTipInfo::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<SafetyTipInfo> result(new SafetyTipInfo());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* safetyTipStatusValue = object->get("safetyTipStatus");
    errors->SetName("safetyTipStatus");
    result->m_safetyTipStatus = ValueConversions<String>::fromValue(safetyTipStatusValue, errors);
    protocol::Value* safeUrlValue = object->get("safeUrl");
    if (safeUrlValue) {
        errors->SetName("safeUrl");
        result->m_safeUrl = ValueConversions<String>::fromValue(safeUrlValue, errors);
    }
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> SafetyTipInfo::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("safetyTipStatus", ValueConversions<String>::toValue(m_safetyTipStatus));
    if (m_safeUrl.isJust())
        result->setValue("safeUrl", ValueConversions<String>::toValue(m_safeUrl.fromJust()));
    return result;
}

void SafetyTipInfo::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("safetyTipStatus"), m_safetyTipStatus, out);
      crdtp::SerializeField(crdtp::SpanFrom("safeUrl"), m_safeUrl, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<SafetyTipInfo> SafetyTipInfo::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<VisibleSecurityState> VisibleSecurityState::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<VisibleSecurityState> result(new VisibleSecurityState());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* securityStateValue = object->get("securityState");
    errors->SetName("securityState");
    result->m_securityState = ValueConversions<String>::fromValue(securityStateValue, errors);
    protocol::Value* certificateSecurityStateValue = object->get("certificateSecurityState");
    if (certificateSecurityStateValue) {
        errors->SetName("certificateSecurityState");
        result->m_certificateSecurityState = ValueConversions<protocol::Security::CertificateSecurityState>::fromValue(certificateSecurityStateValue, errors);
    }
    protocol::Value* safetyTipInfoValue = object->get("safetyTipInfo");
    if (safetyTipInfoValue) {
        errors->SetName("safetyTipInfo");
        result->m_safetyTipInfo = ValueConversions<protocol::Security::SafetyTipInfo>::fromValue(safetyTipInfoValue, errors);
    }
    protocol::Value* securityStateIssueIdsValue = object->get("securityStateIssueIds");
    errors->SetName("securityStateIssueIds");
    result->m_securityStateIssueIds = ValueConversions<protocol::Array<String>>::fromValue(securityStateIssueIdsValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> VisibleSecurityState::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("securityState", ValueConversions<String>::toValue(m_securityState));
    if (m_certificateSecurityState.isJust())
        result->setValue("certificateSecurityState", ValueConversions<protocol::Security::CertificateSecurityState>::toValue(m_certificateSecurityState.fromJust()));
    if (m_safetyTipInfo.isJust())
        result->setValue("safetyTipInfo", ValueConversions<protocol::Security::SafetyTipInfo>::toValue(m_safetyTipInfo.fromJust()));
    result->setValue("securityStateIssueIds", ValueConversions<protocol::Array<String>>::toValue(m_securityStateIssueIds.get()));
    return result;
}

void VisibleSecurityState::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("securityState"), m_securityState, out);
      crdtp::SerializeField(crdtp::SpanFrom("certificateSecurityState"), m_certificateSecurityState, out);
      crdtp::SerializeField(crdtp::SpanFrom("safetyTipInfo"), m_safetyTipInfo, out);
      crdtp::SerializeField(crdtp::SpanFrom("securityStateIssueIds"), m_securityStateIssueIds, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<VisibleSecurityState> VisibleSecurityState::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<VisibleSecurityStateChangedNotification> VisibleSecurityStateChangedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<VisibleSecurityStateChangedNotification> result(new VisibleSecurityStateChangedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* visibleSecurityStateValue = object->get("visibleSecurityState");
    errors->SetName("visibleSecurityState");
    result->m_visibleSecurityState = ValueConversions<protocol::Security::VisibleSecurityState>::fromValue(visibleSecurityStateValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> VisibleSecurityStateChangedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("visibleSecurityState", ValueConversions<protocol::Security::VisibleSecurityState>::toValue(m_visibleSecurityState.get()));
    return result;
}

void VisibleSecurityStateChangedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("visibleSecurityState"), m_visibleSecurityState, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<VisibleSecurityStateChangedNotification> VisibleSecurityStateChangedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

// ------------- Enum values from params.


// ------------- Frontend notifications.

void Frontend::VisibleSecurityStateChanged(std::unique_ptr<protocol::Security::VisibleSecurityState> visibleSecurityState)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<VisibleSecurityStateChangedNotification> messageData = VisibleSecurityStateChangedNotification::Create()
        .SetVisibleSecurityState(std::move(visibleSecurityState))
        .Build();
    frontend_channel_->SendProtocolNotification(crdtp::CreateNotification("Security.visibleSecurityStateChanged", std::move(messageData)));
}

void Frontend::flush()
{
    frontend_channel_->FlushProtocolNotifications();
}

void Frontend::sendRawNotification(std::unique_ptr<Serializable> notification)
{
    frontend_channel_->SendProtocolNotification(std::move(notification));
}

// --------------------- Dispatcher.

class DomainDispatcherImpl : public protocol::DomainDispatcher {
public:
    DomainDispatcherImpl(FrontendChannel* frontendChannel, Backend* backend)
        : DomainDispatcher(frontendChannel)
        , m_backend(backend) {}
    ~DomainDispatcherImpl() override { }

    using CallHandler = void (DomainDispatcherImpl::*)(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);

    std::function<void(const crdtp::Dispatchable&)> Dispatch(crdtp::span<uint8_t> command_name) override;

    void disable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void enable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
 protected:
    Backend* m_backend;
};

namespace {
// This helper method with a static map of command methods (instance methods
// of DomainDispatcherImpl declared just above) by their name is used immediately below,
// in the DomainDispatcherImpl::Dispatch method.
DomainDispatcherImpl::CallHandler CommandByName(crdtp::span<uint8_t> command_name) {
  static auto* commands = [](){
    auto* commands = new std::vector<std::pair<crdtp::span<uint8_t>,
                              DomainDispatcherImpl::CallHandler>>{
    {
          crdtp::SpanFrom("disable"),
          &DomainDispatcherImpl::disable
    },
    {
          crdtp::SpanFrom("enable"),
          &DomainDispatcherImpl::enable
    },
    };
    return commands;
  }();
  return crdtp::FindByFirst<DomainDispatcherImpl::CallHandler>(*commands, command_name, nullptr);
}
}  // namespace

std::function<void(const crdtp::Dispatchable&)> DomainDispatcherImpl::Dispatch(crdtp::span<uint8_t> command_name) {
  CallHandler handler = CommandByName(command_name);
  if (!handler) return nullptr;
  return [this, handler](const crdtp::Dispatchable& dispatchable){
    std::unique_ptr<DictionaryValue> params =
        DictionaryValue::cast(protocol::Value::parseBinary(dispatchable.Params().data(),
        dispatchable.Params().size()));
    ErrorSupport errors;
    errors.Push();
    (this->*handler)(dispatchable, params.get(), &errors);
  };
}


void DomainDispatcherImpl::disable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->Disable();
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Security.disable"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::enable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->Enable();
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Security.enable"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

namespace {
// This helper method (with a static map of redirects) is used from Dispatcher::wire
// immediately below.
const std::vector<std::pair<crdtp::span<uint8_t>, crdtp::span<uint8_t>>>& SortedRedirects() {
  static auto* redirects = [](){
    auto* redirects = new std::vector<std::pair<crdtp::span<uint8_t>, crdtp::span<uint8_t>>>{
    };
    return redirects;
  }();
  return *redirects;
}
}  // namespace

// static
void Dispatcher::wire(UberDispatcher* uber, Backend* backend)
{
    auto dispatcher = std::make_unique<DomainDispatcherImpl>(uber->channel(), backend);
    uber->WireBackend(crdtp::SpanFrom("Security"), SortedRedirects(), std::move(dispatcher));
}

} // Security
} // namespace protocol

// This file is generated by TypeBuilder_h.template.

// Copyright (c) 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef protocol_Cast_h
#define protocol_Cast_h

#include "chrome/browser/devtools/protocol/protocol.h"
// For each imported domain we generate a ValueConversions struct instead of a full domain definition
// and include Domain::API version from there.

namespace protocol {
namespace Cast {

// ------------- Forward and enum declarations.
class Sink;
class SinksUpdatedNotification;
class IssueUpdatedNotification;

// ------------- Type and builder declarations.

class  Sink : public Serializable{
    PROTOCOL_DISALLOW_COPY(Sink);
public:
    static std::unique_ptr<Sink> fromValue(protocol::Value* value, ErrorSupport* errors);

    ~Sink() override { }

    String GetName() { return m_name; }
    void SetName(const String& value) { m_name = value; }

    String GetId() { return m_id; }
    void SetId(const String& value) { m_id = value; }

    bool HasSession() { return m_session.isJust(); }
    String GetSession(const String& defaultValue) { return m_session.isJust() ? m_session.fromJust() : defaultValue; }
    void SetSession(const String& value) { m_session = value; }

    std::unique_ptr<protocol::DictionaryValue> toValue() const;
    void AppendSerialized(std::vector<uint8_t>* out) const override;
    std::unique_ptr<Sink> clone() const;

    template<int STATE>
    class SinkBuilder {
    public:
        enum {
            NoFieldsSet = 0,
            NameSet = 1 << 1,
            IdSet = 1 << 2,
            AllFieldsSet = (NameSet | IdSet | 0)};


        SinkBuilder<STATE | NameSet>& SetName(const String& value)
        {
            static_assert(!(STATE & NameSet), "property name should not be set yet");
            m_result->SetName(value);
            return castState<NameSet>();
        }

        SinkBuilder<STATE | IdSet>& SetId(const String& value)
        {
            static_assert(!(STATE & IdSet), "property id should not be set yet");
            m_result->SetId(value);
            return castState<IdSet>();
        }

        SinkBuilder<STATE>& SetSession(const String& value)
        {
            m_result->SetSession(value);
            return *this;
        }

        std::unique_ptr<Sink> Build()
        {
            static_assert(STATE == AllFieldsSet, "state should be AllFieldsSet");
            return std::move(m_result);
        }

    private:
        friend class Sink;
        SinkBuilder() : m_result(new Sink()) { }

        template<int STEP> SinkBuilder<STATE | STEP>& castState()
        {
            return *reinterpret_cast<SinkBuilder<STATE | STEP>*>(this);
        }

        std::unique_ptr<protocol::Cast::Sink> m_result;
    };

    static SinkBuilder<0> Create()
    {
        return SinkBuilder<0>();
    }

private:
    Sink()
    {
    }

    String m_name;
    String m_id;
    Maybe<String> m_session;
};


class  SinksUpdatedNotification : public Serializable{
    PROTOCOL_DISALLOW_COPY(SinksUpdatedNotification);
public:
    static std::unique_ptr<SinksUpdatedNotification> fromValue(protocol::Value* value, ErrorSupport* errors);

    ~SinksUpdatedNotification() override { }

    protocol::Array<protocol::Cast::Sink>* GetSinks() { return m_sinks.get(); }
    void SetSinks(std::unique_ptr<protocol::Array<protocol::Cast::Sink>> value) { m_sinks = std::move(value); }

    std::unique_ptr<protocol::DictionaryValue> toValue() const;
    void AppendSerialized(std::vector<uint8_t>* out) const override;
    std::unique_ptr<SinksUpdatedNotification> clone() const;

    template<int STATE>
    class SinksUpdatedNotificationBuilder {
    public:
        enum {
            NoFieldsSet = 0,
            SinksSet = 1 << 1,
            AllFieldsSet = (SinksSet | 0)};


        SinksUpdatedNotificationBuilder<STATE | SinksSet>& SetSinks(std::unique_ptr<protocol::Array<protocol::Cast::Sink>> value)
        {
            static_assert(!(STATE & SinksSet), "property sinks should not be set yet");
            m_result->SetSinks(std::move(value));
            return castState<SinksSet>();
        }

        std::unique_ptr<SinksUpdatedNotification> Build()
        {
            static_assert(STATE == AllFieldsSet, "state should be AllFieldsSet");
            return std::move(m_result);
        }

    private:
        friend class SinksUpdatedNotification;
        SinksUpdatedNotificationBuilder() : m_result(new SinksUpdatedNotification()) { }

        template<int STEP> SinksUpdatedNotificationBuilder<STATE | STEP>& castState()
        {
            return *reinterpret_cast<SinksUpdatedNotificationBuilder<STATE | STEP>*>(this);
        }

        std::unique_ptr<protocol::Cast::SinksUpdatedNotification> m_result;
    };

    static SinksUpdatedNotificationBuilder<0> Create()
    {
        return SinksUpdatedNotificationBuilder<0>();
    }

private:
    SinksUpdatedNotification()
    {
    }

    std::unique_ptr<protocol::Array<protocol::Cast::Sink>> m_sinks;
};


class  IssueUpdatedNotification : public Serializable{
    PROTOCOL_DISALLOW_COPY(IssueUpdatedNotification);
public:
    static std::unique_ptr<IssueUpdatedNotification> fromValue(protocol::Value* value, ErrorSupport* errors);

    ~IssueUpdatedNotification() override { }

    String GetIssueMessage() { return m_issueMessage; }
    void SetIssueMessage(const String& value) { m_issueMessage = value; }

    std::unique_ptr<protocol::DictionaryValue> toValue() const;
    void AppendSerialized(std::vector<uint8_t>* out) const override;
    std::unique_ptr<IssueUpdatedNotification> clone() const;

    template<int STATE>
    class IssueUpdatedNotificationBuilder {
    public:
        enum {
            NoFieldsSet = 0,
            IssueMessageSet = 1 << 1,
            AllFieldsSet = (IssueMessageSet | 0)};


        IssueUpdatedNotificationBuilder<STATE | IssueMessageSet>& SetIssueMessage(const String& value)
        {
            static_assert(!(STATE & IssueMessageSet), "property issueMessage should not be set yet");
            m_result->SetIssueMessage(value);
            return castState<IssueMessageSet>();
        }

        std::unique_ptr<IssueUpdatedNotification> Build()
        {
            static_assert(STATE == AllFieldsSet, "state should be AllFieldsSet");
            return std::move(m_result);
        }

    private:
        friend class IssueUpdatedNotification;
        IssueUpdatedNotificationBuilder() : m_result(new IssueUpdatedNotification()) { }

        template<int STEP> IssueUpdatedNotificationBuilder<STATE | STEP>& castState()
        {
            return *reinterpret_cast<IssueUpdatedNotificationBuilder<STATE | STEP>*>(this);
        }

        std::unique_ptr<protocol::Cast::IssueUpdatedNotification> m_result;
    };

    static IssueUpdatedNotificationBuilder<0> Create()
    {
        return IssueUpdatedNotificationBuilder<0>();
    }

private:
    IssueUpdatedNotification()
    {
    }

    String m_issueMessage;
};


// ------------- Backend interface.

class  Backend {
public:
    virtual ~Backend() { }

    virtual DispatchResponse Enable(Maybe<String> in_presentationUrl) = 0;
    virtual DispatchResponse Disable() = 0;
    virtual DispatchResponse SetSinkToUse(const String& in_sinkName) = 0;
    class  StartTabMirroringCallback {
    public:
        virtual void sendSuccess() = 0;
        virtual void sendFailure(const DispatchResponse&) = 0;
        virtual void fallThrough() = 0;
        virtual ~StartTabMirroringCallback() { }
    };
    virtual void StartTabMirroring(const String& in_sinkName, std::unique_ptr<StartTabMirroringCallback> callback) = 0;
    virtual DispatchResponse StopCasting(const String& in_sinkName) = 0;

};

// ------------- Frontend interface.

class  Frontend {
public:
  explicit Frontend(FrontendChannel* frontend_channel) : frontend_channel_(frontend_channel) {}
    void SinksUpdated(std::unique_ptr<protocol::Array<protocol::Cast::Sink>> sinks);
    void IssueUpdated(const String& issueMessage);

  void flush();
  void sendRawNotification(std::unique_ptr<Serializable>);
 private:
  FrontendChannel* frontend_channel_;
};

// ------------- Dispatcher.

class  Dispatcher {
public:
    static void wire(UberDispatcher*, Backend*);

private:
    Dispatcher() { }
};

// ------------- Metainfo.

class  Metainfo {
public:
    using BackendClass = Backend;
    using FrontendClass = Frontend;
    using DispatcherClass = Dispatcher;
    static const char domainName[];
    static const char commandPrefix[];
    static const char version[];
};

} // namespace Cast
} // namespace protocol

#endif // !defined(protocol_Cast_h)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tab_metrics_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tab_5fmetrics_5fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tab_5fmetrics_5fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tab_5fmetrics_5fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tab_5fmetrics_5fevent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace metrics {
class TabMetricsEvent;
class TabMetricsEventDefaultTypeInternal;
extern TabMetricsEventDefaultTypeInternal _TabMetricsEvent_default_instance_;
class WindowMetricsEvent;
class WindowMetricsEventDefaultTypeInternal;
extern WindowMetricsEventDefaultTypeInternal _WindowMetricsEvent_default_instance_;
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> ::metrics::TabMetricsEvent* Arena::CreateMaybeMessage<::metrics::TabMetricsEvent>(Arena*);
template<> ::metrics::WindowMetricsEvent* Arena::CreateMaybeMessage<::metrics::WindowMetricsEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace metrics {

enum TabMetricsEvent_ContentType : int {
  TabMetricsEvent_ContentType_CONTENT_TYPE_UNKNOWN = 0,
  TabMetricsEvent_ContentType_CONTENT_TYPE_OTHER = 1,
  TabMetricsEvent_ContentType_CONTENT_TYPE_APPLICATION = 2,
  TabMetricsEvent_ContentType_CONTENT_TYPE_AUDIO = 3,
  TabMetricsEvent_ContentType_CONTENT_TYPE_IMAGE = 4,
  TabMetricsEvent_ContentType_CONTENT_TYPE_TEXT = 5,
  TabMetricsEvent_ContentType_CONTENT_TYPE_TEXT_HTML = 6,
  TabMetricsEvent_ContentType_CONTENT_TYPE_VIDEO = 7
};
bool TabMetricsEvent_ContentType_IsValid(int value);
constexpr TabMetricsEvent_ContentType TabMetricsEvent_ContentType_ContentType_MIN = TabMetricsEvent_ContentType_CONTENT_TYPE_UNKNOWN;
constexpr TabMetricsEvent_ContentType TabMetricsEvent_ContentType_ContentType_MAX = TabMetricsEvent_ContentType_CONTENT_TYPE_VIDEO;
constexpr int TabMetricsEvent_ContentType_ContentType_ARRAYSIZE = TabMetricsEvent_ContentType_ContentType_MAX + 1;

const std::string& TabMetricsEvent_ContentType_Name(TabMetricsEvent_ContentType value);
template<typename T>
inline const std::string& TabMetricsEvent_ContentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TabMetricsEvent_ContentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TabMetricsEvent_ContentType_Name.");
  return TabMetricsEvent_ContentType_Name(static_cast<TabMetricsEvent_ContentType>(enum_t_value));
}
bool TabMetricsEvent_ContentType_Parse(
    const std::string& name, TabMetricsEvent_ContentType* value);
enum WindowMetricsEvent_Type : int {
  WindowMetricsEvent_Type_TYPE_UNKNOWN = 0,
  WindowMetricsEvent_Type_TYPE_TABBED = 1,
  WindowMetricsEvent_Type_TYPE_POPUP = 2,
  WindowMetricsEvent_Type_TYPE_EXTENSION = 3,
  WindowMetricsEvent_Type_TYPE_APP = 4
};
bool WindowMetricsEvent_Type_IsValid(int value);
constexpr WindowMetricsEvent_Type WindowMetricsEvent_Type_Type_MIN = WindowMetricsEvent_Type_TYPE_UNKNOWN;
constexpr WindowMetricsEvent_Type WindowMetricsEvent_Type_Type_MAX = WindowMetricsEvent_Type_TYPE_APP;
constexpr int WindowMetricsEvent_Type_Type_ARRAYSIZE = WindowMetricsEvent_Type_Type_MAX + 1;

const std::string& WindowMetricsEvent_Type_Name(WindowMetricsEvent_Type value);
template<typename T>
inline const std::string& WindowMetricsEvent_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WindowMetricsEvent_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WindowMetricsEvent_Type_Name.");
  return WindowMetricsEvent_Type_Name(static_cast<WindowMetricsEvent_Type>(enum_t_value));
}
bool WindowMetricsEvent_Type_Parse(
    const std::string& name, WindowMetricsEvent_Type* value);
enum WindowMetricsEvent_ShowState : int {
  WindowMetricsEvent_ShowState_SHOW_STATE_UNKNOWN = 0,
  WindowMetricsEvent_ShowState_SHOW_STATE_NORMAL = 1,
  WindowMetricsEvent_ShowState_SHOW_STATE_MINIMIZED = 2,
  WindowMetricsEvent_ShowState_SHOW_STATE_MAXIMIZED = 3,
  WindowMetricsEvent_ShowState_SHOW_STATE_FULLSCREEN = 4
};
bool WindowMetricsEvent_ShowState_IsValid(int value);
constexpr WindowMetricsEvent_ShowState WindowMetricsEvent_ShowState_ShowState_MIN = WindowMetricsEvent_ShowState_SHOW_STATE_UNKNOWN;
constexpr WindowMetricsEvent_ShowState WindowMetricsEvent_ShowState_ShowState_MAX = WindowMetricsEvent_ShowState_SHOW_STATE_FULLSCREEN;
constexpr int WindowMetricsEvent_ShowState_ShowState_ARRAYSIZE = WindowMetricsEvent_ShowState_ShowState_MAX + 1;

const std::string& WindowMetricsEvent_ShowState_Name(WindowMetricsEvent_ShowState value);
template<typename T>
inline const std::string& WindowMetricsEvent_ShowState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WindowMetricsEvent_ShowState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WindowMetricsEvent_ShowState_Name.");
  return WindowMetricsEvent_ShowState_Name(static_cast<WindowMetricsEvent_ShowState>(enum_t_value));
}
bool WindowMetricsEvent_ShowState_Parse(
    const std::string& name, WindowMetricsEvent_ShowState* value);
// ===================================================================

class TabMetricsEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.TabMetricsEvent) */ {
 public:
  TabMetricsEvent();
  virtual ~TabMetricsEvent();

  TabMetricsEvent(const TabMetricsEvent& from);
  TabMetricsEvent(TabMetricsEvent&& from) noexcept
    : TabMetricsEvent() {
    *this = ::std::move(from);
  }

  inline TabMetricsEvent& operator=(const TabMetricsEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TabMetricsEvent& operator=(TabMetricsEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TabMetricsEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TabMetricsEvent* internal_default_instance() {
    return reinterpret_cast<const TabMetricsEvent*>(
               &_TabMetricsEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TabMetricsEvent& a, TabMetricsEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TabMetricsEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TabMetricsEvent* New() const final {
    return CreateMaybeMessage<TabMetricsEvent>(nullptr);
  }

  TabMetricsEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TabMetricsEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TabMetricsEvent& from);
  void MergeFrom(const TabMetricsEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TabMetricsEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.TabMetricsEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TabMetricsEvent_ContentType ContentType;
  static constexpr ContentType CONTENT_TYPE_UNKNOWN =
    TabMetricsEvent_ContentType_CONTENT_TYPE_UNKNOWN;
  static constexpr ContentType CONTENT_TYPE_OTHER =
    TabMetricsEvent_ContentType_CONTENT_TYPE_OTHER;
  static constexpr ContentType CONTENT_TYPE_APPLICATION =
    TabMetricsEvent_ContentType_CONTENT_TYPE_APPLICATION;
  static constexpr ContentType CONTENT_TYPE_AUDIO =
    TabMetricsEvent_ContentType_CONTENT_TYPE_AUDIO;
  static constexpr ContentType CONTENT_TYPE_IMAGE =
    TabMetricsEvent_ContentType_CONTENT_TYPE_IMAGE;
  static constexpr ContentType CONTENT_TYPE_TEXT =
    TabMetricsEvent_ContentType_CONTENT_TYPE_TEXT;
  static constexpr ContentType CONTENT_TYPE_TEXT_HTML =
    TabMetricsEvent_ContentType_CONTENT_TYPE_TEXT_HTML;
  static constexpr ContentType CONTENT_TYPE_VIDEO =
    TabMetricsEvent_ContentType_CONTENT_TYPE_VIDEO;
  static inline bool ContentType_IsValid(int value) {
    return TabMetricsEvent_ContentType_IsValid(value);
  }
  static constexpr ContentType ContentType_MIN =
    TabMetricsEvent_ContentType_ContentType_MIN;
  static constexpr ContentType ContentType_MAX =
    TabMetricsEvent_ContentType_ContentType_MAX;
  static constexpr int ContentType_ARRAYSIZE =
    TabMetricsEvent_ContentType_ContentType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ContentType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ContentType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ContentType_Name.");
    return TabMetricsEvent_ContentType_Name(enum_t_value);
  }
  static inline bool ContentType_Parse(const std::string& name,
      ContentType* value) {
    return TabMetricsEvent_ContentType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kContentTypeFieldNumber = 1,
  };
  // optional .metrics.TabMetricsEvent.ContentType content_type = 1;
  bool has_content_type() const;
  void clear_content_type();
  ::metrics::TabMetricsEvent_ContentType content_type() const;
  void set_content_type(::metrics::TabMetricsEvent_ContentType value);

  // @@protoc_insertion_point(class_scope:metrics.TabMetricsEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int content_type_;
  friend struct ::TableStruct_tab_5fmetrics_5fevent_2eproto;
};
// -------------------------------------------------------------------

class WindowMetricsEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.WindowMetricsEvent) */ {
 public:
  WindowMetricsEvent();
  virtual ~WindowMetricsEvent();

  WindowMetricsEvent(const WindowMetricsEvent& from);
  WindowMetricsEvent(WindowMetricsEvent&& from) noexcept
    : WindowMetricsEvent() {
    *this = ::std::move(from);
  }

  inline WindowMetricsEvent& operator=(const WindowMetricsEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline WindowMetricsEvent& operator=(WindowMetricsEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const WindowMetricsEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WindowMetricsEvent* internal_default_instance() {
    return reinterpret_cast<const WindowMetricsEvent*>(
               &_WindowMetricsEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WindowMetricsEvent& a, WindowMetricsEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(WindowMetricsEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WindowMetricsEvent* New() const final {
    return CreateMaybeMessage<WindowMetricsEvent>(nullptr);
  }

  WindowMetricsEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WindowMetricsEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const WindowMetricsEvent& from);
  void MergeFrom(const WindowMetricsEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WindowMetricsEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.WindowMetricsEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef WindowMetricsEvent_Type Type;
  static constexpr Type TYPE_UNKNOWN =
    WindowMetricsEvent_Type_TYPE_UNKNOWN;
  static constexpr Type TYPE_TABBED =
    WindowMetricsEvent_Type_TYPE_TABBED;
  static constexpr Type TYPE_POPUP =
    WindowMetricsEvent_Type_TYPE_POPUP;
  static constexpr Type TYPE_EXTENSION =
    WindowMetricsEvent_Type_TYPE_EXTENSION;
  static constexpr Type TYPE_APP =
    WindowMetricsEvent_Type_TYPE_APP;
  static inline bool Type_IsValid(int value) {
    return WindowMetricsEvent_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    WindowMetricsEvent_Type_Type_MIN;
  static constexpr Type Type_MAX =
    WindowMetricsEvent_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    WindowMetricsEvent_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return WindowMetricsEvent_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return WindowMetricsEvent_Type_Parse(name, value);
  }

  typedef WindowMetricsEvent_ShowState ShowState;
  static constexpr ShowState SHOW_STATE_UNKNOWN =
    WindowMetricsEvent_ShowState_SHOW_STATE_UNKNOWN;
  static constexpr ShowState SHOW_STATE_NORMAL =
    WindowMetricsEvent_ShowState_SHOW_STATE_NORMAL;
  static constexpr ShowState SHOW_STATE_MINIMIZED =
    WindowMetricsEvent_ShowState_SHOW_STATE_MINIMIZED;
  static constexpr ShowState SHOW_STATE_MAXIMIZED =
    WindowMetricsEvent_ShowState_SHOW_STATE_MAXIMIZED;
  static constexpr ShowState SHOW_STATE_FULLSCREEN =
    WindowMetricsEvent_ShowState_SHOW_STATE_FULLSCREEN;
  static inline bool ShowState_IsValid(int value) {
    return WindowMetricsEvent_ShowState_IsValid(value);
  }
  static constexpr ShowState ShowState_MIN =
    WindowMetricsEvent_ShowState_ShowState_MIN;
  static constexpr ShowState ShowState_MAX =
    WindowMetricsEvent_ShowState_ShowState_MAX;
  static constexpr int ShowState_ARRAYSIZE =
    WindowMetricsEvent_ShowState_ShowState_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ShowState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ShowState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ShowState_Name.");
    return WindowMetricsEvent_ShowState_Name(enum_t_value);
  }
  static inline bool ShowState_Parse(const std::string& name,
      ShowState* value) {
    return WindowMetricsEvent_ShowState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kShowStateFieldNumber = 2,
  };
  // optional .metrics.WindowMetricsEvent.Type type = 1;
  bool has_type() const;
  void clear_type();
  ::metrics::WindowMetricsEvent_Type type() const;
  void set_type(::metrics::WindowMetricsEvent_Type value);

  // optional .metrics.WindowMetricsEvent.ShowState show_state = 2;
  bool has_show_state() const;
  void clear_show_state();
  ::metrics::WindowMetricsEvent_ShowState show_state() const;
  void set_show_state(::metrics::WindowMetricsEvent_ShowState value);

  // @@protoc_insertion_point(class_scope:metrics.WindowMetricsEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int type_;
  int show_state_;
  friend struct ::TableStruct_tab_5fmetrics_5fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TabMetricsEvent

// optional .metrics.TabMetricsEvent.ContentType content_type = 1;
inline bool TabMetricsEvent::has_content_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TabMetricsEvent::clear_content_type() {
  content_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::metrics::TabMetricsEvent_ContentType TabMetricsEvent::content_type() const {
  // @@protoc_insertion_point(field_get:metrics.TabMetricsEvent.content_type)
  return static_cast< ::metrics::TabMetricsEvent_ContentType >(content_type_);
}
inline void TabMetricsEvent::set_content_type(::metrics::TabMetricsEvent_ContentType value) {
  assert(::metrics::TabMetricsEvent_ContentType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  content_type_ = value;
  // @@protoc_insertion_point(field_set:metrics.TabMetricsEvent.content_type)
}

// -------------------------------------------------------------------

// WindowMetricsEvent

// optional .metrics.WindowMetricsEvent.Type type = 1;
inline bool WindowMetricsEvent::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WindowMetricsEvent::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::metrics::WindowMetricsEvent_Type WindowMetricsEvent::type() const {
  // @@protoc_insertion_point(field_get:metrics.WindowMetricsEvent.type)
  return static_cast< ::metrics::WindowMetricsEvent_Type >(type_);
}
inline void WindowMetricsEvent::set_type(::metrics::WindowMetricsEvent_Type value) {
  assert(::metrics::WindowMetricsEvent_Type_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
  // @@protoc_insertion_point(field_set:metrics.WindowMetricsEvent.type)
}

// optional .metrics.WindowMetricsEvent.ShowState show_state = 2;
inline bool WindowMetricsEvent::has_show_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WindowMetricsEvent::clear_show_state() {
  show_state_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::metrics::WindowMetricsEvent_ShowState WindowMetricsEvent::show_state() const {
  // @@protoc_insertion_point(field_get:metrics.WindowMetricsEvent.show_state)
  return static_cast< ::metrics::WindowMetricsEvent_ShowState >(show_state_);
}
inline void WindowMetricsEvent::set_show_state(::metrics::WindowMetricsEvent_ShowState value) {
  assert(::metrics::WindowMetricsEvent_ShowState_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  show_state_ = value;
  // @@protoc_insertion_point(field_set:metrics.WindowMetricsEvent.show_state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::metrics::TabMetricsEvent_ContentType> : ::std::true_type {};
template <> struct is_proto_enum< ::metrics::WindowMetricsEvent_Type> : ::std::true_type {};
template <> struct is_proto_enum< ::metrics::WindowMetricsEvent_ShowState> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tab_5fmetrics_5fevent_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: intervention_policy_database.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_intervention_5fpolicy_5fdatabase_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_intervention_5fpolicy_5fdatabase_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_intervention_5fpolicy_5fdatabase_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_intervention_5fpolicy_5fdatabase_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
class OriginInterventions;
class OriginInterventionsDefaultTypeInternal;
extern OriginInterventionsDefaultTypeInternal _OriginInterventions_default_instance_;
class OriginInterventionsDatabase;
class OriginInterventionsDatabaseDefaultTypeInternal;
extern OriginInterventionsDatabaseDefaultTypeInternal _OriginInterventionsDatabase_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::OriginInterventions* Arena::CreateMaybeMessage<::OriginInterventions>(Arena*);
template<> ::OriginInterventionsDatabase* Arena::CreateMaybeMessage<::OriginInterventionsDatabase>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum OriginInterventions_InterventionPolicy : int {
  OriginInterventions_InterventionPolicy_OPT_IN = 0,
  OriginInterventions_InterventionPolicy_OPT_OUT = 1,
  OriginInterventions_InterventionPolicy_DEFAULT = 2
};
bool OriginInterventions_InterventionPolicy_IsValid(int value);
constexpr OriginInterventions_InterventionPolicy OriginInterventions_InterventionPolicy_InterventionPolicy_MIN = OriginInterventions_InterventionPolicy_OPT_IN;
constexpr OriginInterventions_InterventionPolicy OriginInterventions_InterventionPolicy_InterventionPolicy_MAX = OriginInterventions_InterventionPolicy_DEFAULT;
constexpr int OriginInterventions_InterventionPolicy_InterventionPolicy_ARRAYSIZE = OriginInterventions_InterventionPolicy_InterventionPolicy_MAX + 1;

const std::string& OriginInterventions_InterventionPolicy_Name(OriginInterventions_InterventionPolicy value);
template<typename T>
inline const std::string& OriginInterventions_InterventionPolicy_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OriginInterventions_InterventionPolicy>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OriginInterventions_InterventionPolicy_Name.");
  return OriginInterventions_InterventionPolicy_Name(static_cast<OriginInterventions_InterventionPolicy>(enum_t_value));
}
bool OriginInterventions_InterventionPolicy_Parse(
    const std::string& name, OriginInterventions_InterventionPolicy* value);
// ===================================================================

class OriginInterventions :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:OriginInterventions) */ {
 public:
  OriginInterventions();
  virtual ~OriginInterventions();

  OriginInterventions(const OriginInterventions& from);
  OriginInterventions(OriginInterventions&& from) noexcept
    : OriginInterventions() {
    *this = ::std::move(from);
  }

  inline OriginInterventions& operator=(const OriginInterventions& from) {
    CopyFrom(from);
    return *this;
  }
  inline OriginInterventions& operator=(OriginInterventions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const OriginInterventions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OriginInterventions* internal_default_instance() {
    return reinterpret_cast<const OriginInterventions*>(
               &_OriginInterventions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OriginInterventions& a, OriginInterventions& b) {
    a.Swap(&b);
  }
  inline void Swap(OriginInterventions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OriginInterventions* New() const final {
    return CreateMaybeMessage<OriginInterventions>(nullptr);
  }

  OriginInterventions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OriginInterventions>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const OriginInterventions& from);
  void MergeFrom(const OriginInterventions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OriginInterventions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OriginInterventions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef OriginInterventions_InterventionPolicy InterventionPolicy;
  static constexpr InterventionPolicy OPT_IN =
    OriginInterventions_InterventionPolicy_OPT_IN;
  static constexpr InterventionPolicy OPT_OUT =
    OriginInterventions_InterventionPolicy_OPT_OUT;
  static constexpr InterventionPolicy DEFAULT =
    OriginInterventions_InterventionPolicy_DEFAULT;
  static inline bool InterventionPolicy_IsValid(int value) {
    return OriginInterventions_InterventionPolicy_IsValid(value);
  }
  static constexpr InterventionPolicy InterventionPolicy_MIN =
    OriginInterventions_InterventionPolicy_InterventionPolicy_MIN;
  static constexpr InterventionPolicy InterventionPolicy_MAX =
    OriginInterventions_InterventionPolicy_InterventionPolicy_MAX;
  static constexpr int InterventionPolicy_ARRAYSIZE =
    OriginInterventions_InterventionPolicy_InterventionPolicy_ARRAYSIZE;
  template<typename T>
  static inline const std::string& InterventionPolicy_Name(T enum_t_value) {
    static_assert(::std::is_same<T, InterventionPolicy>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function InterventionPolicy_Name.");
    return OriginInterventions_InterventionPolicy_Name(enum_t_value);
  }
  static inline bool InterventionPolicy_Parse(const std::string& name,
      InterventionPolicy* value) {
    return OriginInterventions_InterventionPolicy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHostHashFieldNumber = 1,
    kDiscardingPolicyFieldNumber = 2,
    kFreezingPolicyFieldNumber = 3,
  };
  // required string host_hash = 1;
  bool has_host_hash() const;
  void clear_host_hash();
  const std::string& host_hash() const;
  void set_host_hash(const std::string& value);
  void set_host_hash(std::string&& value);
  void set_host_hash(const char* value);
  void set_host_hash(const char* value, size_t size);
  std::string* mutable_host_hash();
  std::string* release_host_hash();
  void set_allocated_host_hash(std::string* host_hash);

  // required .OriginInterventions.InterventionPolicy discarding_policy = 2;
  bool has_discarding_policy() const;
  void clear_discarding_policy();
  ::OriginInterventions_InterventionPolicy discarding_policy() const;
  void set_discarding_policy(::OriginInterventions_InterventionPolicy value);

  // required .OriginInterventions.InterventionPolicy freezing_policy = 3;
  bool has_freezing_policy() const;
  void clear_freezing_policy();
  ::OriginInterventions_InterventionPolicy freezing_policy() const;
  void set_freezing_policy(::OriginInterventions_InterventionPolicy value);

  // @@protoc_insertion_point(class_scope:OriginInterventions)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_hash_;
  int discarding_policy_;
  int freezing_policy_;
  friend struct ::TableStruct_intervention_5fpolicy_5fdatabase_2eproto;
};
// -------------------------------------------------------------------

class OriginInterventionsDatabase :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:OriginInterventionsDatabase) */ {
 public:
  OriginInterventionsDatabase();
  virtual ~OriginInterventionsDatabase();

  OriginInterventionsDatabase(const OriginInterventionsDatabase& from);
  OriginInterventionsDatabase(OriginInterventionsDatabase&& from) noexcept
    : OriginInterventionsDatabase() {
    *this = ::std::move(from);
  }

  inline OriginInterventionsDatabase& operator=(const OriginInterventionsDatabase& from) {
    CopyFrom(from);
    return *this;
  }
  inline OriginInterventionsDatabase& operator=(OriginInterventionsDatabase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const OriginInterventionsDatabase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OriginInterventionsDatabase* internal_default_instance() {
    return reinterpret_cast<const OriginInterventionsDatabase*>(
               &_OriginInterventionsDatabase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OriginInterventionsDatabase& a, OriginInterventionsDatabase& b) {
    a.Swap(&b);
  }
  inline void Swap(OriginInterventionsDatabase* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OriginInterventionsDatabase* New() const final {
    return CreateMaybeMessage<OriginInterventionsDatabase>(nullptr);
  }

  OriginInterventionsDatabase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OriginInterventionsDatabase>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const OriginInterventionsDatabase& from);
  void MergeFrom(const OriginInterventionsDatabase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OriginInterventionsDatabase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "OriginInterventionsDatabase";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginInterventionsFieldNumber = 1,
  };
  // repeated .OriginInterventions origin_interventions = 1;
  int origin_interventions_size() const;
  void clear_origin_interventions();
  ::OriginInterventions* mutable_origin_interventions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OriginInterventions >*
      mutable_origin_interventions();
  const ::OriginInterventions& origin_interventions(int index) const;
  ::OriginInterventions* add_origin_interventions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OriginInterventions >&
      origin_interventions() const;

  // @@protoc_insertion_point(class_scope:OriginInterventionsDatabase)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OriginInterventions > origin_interventions_;
  friend struct ::TableStruct_intervention_5fpolicy_5fdatabase_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OriginInterventions

// required string host_hash = 1;
inline bool OriginInterventions::has_host_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OriginInterventions::clear_host_hash() {
  host_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OriginInterventions::host_hash() const {
  // @@protoc_insertion_point(field_get:OriginInterventions.host_hash)
  return host_hash_.GetNoArena();
}
inline void OriginInterventions::set_host_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  host_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:OriginInterventions.host_hash)
}
inline void OriginInterventions::set_host_hash(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  host_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:OriginInterventions.host_hash)
}
inline void OriginInterventions::set_host_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  host_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:OriginInterventions.host_hash)
}
inline void OriginInterventions::set_host_hash(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  host_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:OriginInterventions.host_hash)
}
inline std::string* OriginInterventions::mutable_host_hash() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:OriginInterventions.host_hash)
  return host_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OriginInterventions::release_host_hash() {
  // @@protoc_insertion_point(field_release:OriginInterventions.host_hash)
  if (!has_host_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return host_hash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OriginInterventions::set_allocated_host_hash(std::string* host_hash) {
  if (host_hash != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  host_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host_hash);
  // @@protoc_insertion_point(field_set_allocated:OriginInterventions.host_hash)
}

// required .OriginInterventions.InterventionPolicy discarding_policy = 2;
inline bool OriginInterventions::has_discarding_policy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OriginInterventions::clear_discarding_policy() {
  discarding_policy_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::OriginInterventions_InterventionPolicy OriginInterventions::discarding_policy() const {
  // @@protoc_insertion_point(field_get:OriginInterventions.discarding_policy)
  return static_cast< ::OriginInterventions_InterventionPolicy >(discarding_policy_);
}
inline void OriginInterventions::set_discarding_policy(::OriginInterventions_InterventionPolicy value) {
  assert(::OriginInterventions_InterventionPolicy_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  discarding_policy_ = value;
  // @@protoc_insertion_point(field_set:OriginInterventions.discarding_policy)
}

// required .OriginInterventions.InterventionPolicy freezing_policy = 3;
inline bool OriginInterventions::has_freezing_policy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OriginInterventions::clear_freezing_policy() {
  freezing_policy_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::OriginInterventions_InterventionPolicy OriginInterventions::freezing_policy() const {
  // @@protoc_insertion_point(field_get:OriginInterventions.freezing_policy)
  return static_cast< ::OriginInterventions_InterventionPolicy >(freezing_policy_);
}
inline void OriginInterventions::set_freezing_policy(::OriginInterventions_InterventionPolicy value) {
  assert(::OriginInterventions_InterventionPolicy_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  freezing_policy_ = value;
  // @@protoc_insertion_point(field_set:OriginInterventions.freezing_policy)
}

// -------------------------------------------------------------------

// OriginInterventionsDatabase

// repeated .OriginInterventions origin_interventions = 1;
inline int OriginInterventionsDatabase::origin_interventions_size() const {
  return origin_interventions_.size();
}
inline void OriginInterventionsDatabase::clear_origin_interventions() {
  origin_interventions_.Clear();
}
inline ::OriginInterventions* OriginInterventionsDatabase::mutable_origin_interventions(int index) {
  // @@protoc_insertion_point(field_mutable:OriginInterventionsDatabase.origin_interventions)
  return origin_interventions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OriginInterventions >*
OriginInterventionsDatabase::mutable_origin_interventions() {
  // @@protoc_insertion_point(field_mutable_list:OriginInterventionsDatabase.origin_interventions)
  return &origin_interventions_;
}
inline const ::OriginInterventions& OriginInterventionsDatabase::origin_interventions(int index) const {
  // @@protoc_insertion_point(field_get:OriginInterventionsDatabase.origin_interventions)
  return origin_interventions_.Get(index);
}
inline ::OriginInterventions* OriginInterventionsDatabase::add_origin_interventions() {
  // @@protoc_insertion_point(field_add:OriginInterventionsDatabase.origin_interventions)
  return origin_interventions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::OriginInterventions >&
OriginInterventionsDatabase::origin_interventions() const {
  // @@protoc_insertion_point(field_list:OriginInterventionsDatabase.origin_interventions)
  return origin_interventions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::OriginInterventions_InterventionPolicy> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_intervention_5fpolicy_5fdatabase_2eproto

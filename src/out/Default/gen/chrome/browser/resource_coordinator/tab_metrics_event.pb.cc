// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tab_metrics_event.proto

#include "tab_metrics_event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace metrics {
class TabMetricsEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TabMetricsEvent> _instance;
} _TabMetricsEvent_default_instance_;
class WindowMetricsEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WindowMetricsEvent> _instance;
} _WindowMetricsEvent_default_instance_;
}  // namespace metrics
static void InitDefaultsscc_info_TabMetricsEvent_tab_5fmetrics_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_TabMetricsEvent_default_instance_;
    new (ptr) ::metrics::TabMetricsEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::TabMetricsEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TabMetricsEvent_tab_5fmetrics_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TabMetricsEvent_tab_5fmetrics_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_WindowMetricsEvent_tab_5fmetrics_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_WindowMetricsEvent_default_instance_;
    new (ptr) ::metrics::WindowMetricsEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::WindowMetricsEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WindowMetricsEvent_tab_5fmetrics_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WindowMetricsEvent_tab_5fmetrics_5fevent_2eproto}, {}};

namespace metrics {
bool TabMetricsEvent_ContentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TabMetricsEvent_ContentType_strings[8] = {};

static const char TabMetricsEvent_ContentType_names[] =
  "CONTENT_TYPE_APPLICATION"
  "CONTENT_TYPE_AUDIO"
  "CONTENT_TYPE_IMAGE"
  "CONTENT_TYPE_OTHER"
  "CONTENT_TYPE_TEXT"
  "CONTENT_TYPE_TEXT_HTML"
  "CONTENT_TYPE_UNKNOWN"
  "CONTENT_TYPE_VIDEO";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TabMetricsEvent_ContentType_entries[] = {
  { {TabMetricsEvent_ContentType_names + 0, 24}, 2 },
  { {TabMetricsEvent_ContentType_names + 24, 18}, 3 },
  { {TabMetricsEvent_ContentType_names + 42, 18}, 4 },
  { {TabMetricsEvent_ContentType_names + 60, 18}, 1 },
  { {TabMetricsEvent_ContentType_names + 78, 17}, 5 },
  { {TabMetricsEvent_ContentType_names + 95, 22}, 6 },
  { {TabMetricsEvent_ContentType_names + 117, 20}, 0 },
  { {TabMetricsEvent_ContentType_names + 137, 18}, 7 },
};

static const int TabMetricsEvent_ContentType_entries_by_number[] = {
  6, // 0 -> CONTENT_TYPE_UNKNOWN
  3, // 1 -> CONTENT_TYPE_OTHER
  0, // 2 -> CONTENT_TYPE_APPLICATION
  1, // 3 -> CONTENT_TYPE_AUDIO
  2, // 4 -> CONTENT_TYPE_IMAGE
  4, // 5 -> CONTENT_TYPE_TEXT
  5, // 6 -> CONTENT_TYPE_TEXT_HTML
  7, // 7 -> CONTENT_TYPE_VIDEO
};

const std::string& TabMetricsEvent_ContentType_Name(
    TabMetricsEvent_ContentType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TabMetricsEvent_ContentType_entries,
          TabMetricsEvent_ContentType_entries_by_number,
          8, TabMetricsEvent_ContentType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TabMetricsEvent_ContentType_entries,
      TabMetricsEvent_ContentType_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TabMetricsEvent_ContentType_strings[idx].get();
}
bool TabMetricsEvent_ContentType_Parse(
    const std::string& name, TabMetricsEvent_ContentType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TabMetricsEvent_ContentType_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<TabMetricsEvent_ContentType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TabMetricsEvent_ContentType TabMetricsEvent::CONTENT_TYPE_UNKNOWN;
constexpr TabMetricsEvent_ContentType TabMetricsEvent::CONTENT_TYPE_OTHER;
constexpr TabMetricsEvent_ContentType TabMetricsEvent::CONTENT_TYPE_APPLICATION;
constexpr TabMetricsEvent_ContentType TabMetricsEvent::CONTENT_TYPE_AUDIO;
constexpr TabMetricsEvent_ContentType TabMetricsEvent::CONTENT_TYPE_IMAGE;
constexpr TabMetricsEvent_ContentType TabMetricsEvent::CONTENT_TYPE_TEXT;
constexpr TabMetricsEvent_ContentType TabMetricsEvent::CONTENT_TYPE_TEXT_HTML;
constexpr TabMetricsEvent_ContentType TabMetricsEvent::CONTENT_TYPE_VIDEO;
constexpr TabMetricsEvent_ContentType TabMetricsEvent::ContentType_MIN;
constexpr TabMetricsEvent_ContentType TabMetricsEvent::ContentType_MAX;
constexpr int TabMetricsEvent::ContentType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool WindowMetricsEvent_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WindowMetricsEvent_Type_strings[5] = {};

static const char WindowMetricsEvent_Type_names[] =
  "TYPE_APP"
  "TYPE_EXTENSION"
  "TYPE_POPUP"
  "TYPE_TABBED"
  "TYPE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WindowMetricsEvent_Type_entries[] = {
  { {WindowMetricsEvent_Type_names + 0, 8}, 4 },
  { {WindowMetricsEvent_Type_names + 8, 14}, 3 },
  { {WindowMetricsEvent_Type_names + 22, 10}, 2 },
  { {WindowMetricsEvent_Type_names + 32, 11}, 1 },
  { {WindowMetricsEvent_Type_names + 43, 12}, 0 },
};

static const int WindowMetricsEvent_Type_entries_by_number[] = {
  4, // 0 -> TYPE_UNKNOWN
  3, // 1 -> TYPE_TABBED
  2, // 2 -> TYPE_POPUP
  1, // 3 -> TYPE_EXTENSION
  0, // 4 -> TYPE_APP
};

const std::string& WindowMetricsEvent_Type_Name(
    WindowMetricsEvent_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WindowMetricsEvent_Type_entries,
          WindowMetricsEvent_Type_entries_by_number,
          5, WindowMetricsEvent_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WindowMetricsEvent_Type_entries,
      WindowMetricsEvent_Type_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WindowMetricsEvent_Type_strings[idx].get();
}
bool WindowMetricsEvent_Type_Parse(
    const std::string& name, WindowMetricsEvent_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WindowMetricsEvent_Type_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<WindowMetricsEvent_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WindowMetricsEvent_Type WindowMetricsEvent::TYPE_UNKNOWN;
constexpr WindowMetricsEvent_Type WindowMetricsEvent::TYPE_TABBED;
constexpr WindowMetricsEvent_Type WindowMetricsEvent::TYPE_POPUP;
constexpr WindowMetricsEvent_Type WindowMetricsEvent::TYPE_EXTENSION;
constexpr WindowMetricsEvent_Type WindowMetricsEvent::TYPE_APP;
constexpr WindowMetricsEvent_Type WindowMetricsEvent::Type_MIN;
constexpr WindowMetricsEvent_Type WindowMetricsEvent::Type_MAX;
constexpr int WindowMetricsEvent::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool WindowMetricsEvent_ShowState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WindowMetricsEvent_ShowState_strings[5] = {};

static const char WindowMetricsEvent_ShowState_names[] =
  "SHOW_STATE_FULLSCREEN"
  "SHOW_STATE_MAXIMIZED"
  "SHOW_STATE_MINIMIZED"
  "SHOW_STATE_NORMAL"
  "SHOW_STATE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WindowMetricsEvent_ShowState_entries[] = {
  { {WindowMetricsEvent_ShowState_names + 0, 21}, 4 },
  { {WindowMetricsEvent_ShowState_names + 21, 20}, 3 },
  { {WindowMetricsEvent_ShowState_names + 41, 20}, 2 },
  { {WindowMetricsEvent_ShowState_names + 61, 17}, 1 },
  { {WindowMetricsEvent_ShowState_names + 78, 18}, 0 },
};

static const int WindowMetricsEvent_ShowState_entries_by_number[] = {
  4, // 0 -> SHOW_STATE_UNKNOWN
  3, // 1 -> SHOW_STATE_NORMAL
  2, // 2 -> SHOW_STATE_MINIMIZED
  1, // 3 -> SHOW_STATE_MAXIMIZED
  0, // 4 -> SHOW_STATE_FULLSCREEN
};

const std::string& WindowMetricsEvent_ShowState_Name(
    WindowMetricsEvent_ShowState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WindowMetricsEvent_ShowState_entries,
          WindowMetricsEvent_ShowState_entries_by_number,
          5, WindowMetricsEvent_ShowState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WindowMetricsEvent_ShowState_entries,
      WindowMetricsEvent_ShowState_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WindowMetricsEvent_ShowState_strings[idx].get();
}
bool WindowMetricsEvent_ShowState_Parse(
    const std::string& name, WindowMetricsEvent_ShowState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WindowMetricsEvent_ShowState_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<WindowMetricsEvent_ShowState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WindowMetricsEvent_ShowState WindowMetricsEvent::SHOW_STATE_UNKNOWN;
constexpr WindowMetricsEvent_ShowState WindowMetricsEvent::SHOW_STATE_NORMAL;
constexpr WindowMetricsEvent_ShowState WindowMetricsEvent::SHOW_STATE_MINIMIZED;
constexpr WindowMetricsEvent_ShowState WindowMetricsEvent::SHOW_STATE_MAXIMIZED;
constexpr WindowMetricsEvent_ShowState WindowMetricsEvent::SHOW_STATE_FULLSCREEN;
constexpr WindowMetricsEvent_ShowState WindowMetricsEvent::ShowState_MIN;
constexpr WindowMetricsEvent_ShowState WindowMetricsEvent::ShowState_MAX;
constexpr int WindowMetricsEvent::ShowState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void TabMetricsEvent::InitAsDefaultInstance() {
}
class TabMetricsEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<TabMetricsEvent>()._has_bits_);
  static void set_has_content_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TabMetricsEvent::TabMetricsEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.TabMetricsEvent)
}
TabMetricsEvent::TabMetricsEvent(const TabMetricsEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_type_ = from.content_type_;
  // @@protoc_insertion_point(copy_constructor:metrics.TabMetricsEvent)
}

void TabMetricsEvent::SharedCtor() {
  content_type_ = 0;
}

TabMetricsEvent::~TabMetricsEvent() {
  // @@protoc_insertion_point(destructor:metrics.TabMetricsEvent)
  SharedDtor();
}

void TabMetricsEvent::SharedDtor() {
}

void TabMetricsEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TabMetricsEvent& TabMetricsEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TabMetricsEvent_tab_5fmetrics_5fevent_2eproto.base);
  return *internal_default_instance();
}


void TabMetricsEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.TabMetricsEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TabMetricsEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .metrics.TabMetricsEvent.ContentType content_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::TabMetricsEvent_ContentType_IsValid(val))) {
            set_content_type(static_cast<::metrics::TabMetricsEvent_ContentType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TabMetricsEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.TabMetricsEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metrics.TabMetricsEvent.ContentType content_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::TabMetricsEvent_ContentType_IsValid(value)) {
            set_content_type(static_cast< ::metrics::TabMetricsEvent_ContentType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.TabMetricsEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.TabMetricsEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TabMetricsEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.TabMetricsEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.TabMetricsEvent.ContentType content_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->content_type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.TabMetricsEvent)
}

size_t TabMetricsEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.TabMetricsEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .metrics.TabMetricsEvent.ContentType content_type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->content_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TabMetricsEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TabMetricsEvent*>(
      &from));
}

void TabMetricsEvent::MergeFrom(const TabMetricsEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.TabMetricsEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_content_type()) {
    set_content_type(from.content_type());
  }
}

void TabMetricsEvent::CopyFrom(const TabMetricsEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.TabMetricsEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TabMetricsEvent::IsInitialized() const {
  return true;
}

void TabMetricsEvent::InternalSwap(TabMetricsEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(content_type_, other->content_type_);
}

std::string TabMetricsEvent::GetTypeName() const {
  return "metrics.TabMetricsEvent";
}


// ===================================================================

void WindowMetricsEvent::InitAsDefaultInstance() {
}
class WindowMetricsEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<WindowMetricsEvent>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_show_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

WindowMetricsEvent::WindowMetricsEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.WindowMetricsEvent)
}
WindowMetricsEvent::WindowMetricsEvent(const WindowMetricsEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_state_) -
    reinterpret_cast<char*>(&type_)) + sizeof(show_state_));
  // @@protoc_insertion_point(copy_constructor:metrics.WindowMetricsEvent)
}

void WindowMetricsEvent::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&show_state_) -
      reinterpret_cast<char*>(&type_)) + sizeof(show_state_));
}

WindowMetricsEvent::~WindowMetricsEvent() {
  // @@protoc_insertion_point(destructor:metrics.WindowMetricsEvent)
  SharedDtor();
}

void WindowMetricsEvent::SharedDtor() {
}

void WindowMetricsEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WindowMetricsEvent& WindowMetricsEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WindowMetricsEvent_tab_5fmetrics_5fevent_2eproto.base);
  return *internal_default_instance();
}


void WindowMetricsEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.WindowMetricsEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&show_state_) -
        reinterpret_cast<char*>(&type_)) + sizeof(show_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WindowMetricsEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .metrics.WindowMetricsEvent.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::WindowMetricsEvent_Type_IsValid(val))) {
            set_type(static_cast<::metrics::WindowMetricsEvent_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .metrics.WindowMetricsEvent.ShowState show_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::metrics::WindowMetricsEvent_ShowState_IsValid(val))) {
            set_show_state(static_cast<::metrics::WindowMetricsEvent_ShowState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WindowMetricsEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.WindowMetricsEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .metrics.WindowMetricsEvent.Type type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::WindowMetricsEvent_Type_IsValid(value)) {
            set_type(static_cast< ::metrics::WindowMetricsEvent_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .metrics.WindowMetricsEvent.ShowState show_state = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::metrics::WindowMetricsEvent_ShowState_IsValid(value)) {
            set_show_state(static_cast< ::metrics::WindowMetricsEvent_ShowState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.WindowMetricsEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.WindowMetricsEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WindowMetricsEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.WindowMetricsEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .metrics.WindowMetricsEvent.Type type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .metrics.WindowMetricsEvent.ShowState show_state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->show_state(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.WindowMetricsEvent)
}

size_t WindowMetricsEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.WindowMetricsEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .metrics.WindowMetricsEvent.Type type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .metrics.WindowMetricsEvent.ShowState show_state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->show_state());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WindowMetricsEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const WindowMetricsEvent*>(
      &from));
}

void WindowMetricsEvent::MergeFrom(const WindowMetricsEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.WindowMetricsEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      show_state_ = from.show_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WindowMetricsEvent::CopyFrom(const WindowMetricsEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.WindowMetricsEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WindowMetricsEvent::IsInitialized() const {
  return true;
}

void WindowMetricsEvent::InternalSwap(WindowMetricsEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
  swap(show_state_, other->show_state_);
}

std::string WindowMetricsEvent::GetTypeName() const {
  return "metrics.WindowMetricsEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::metrics::TabMetricsEvent* Arena::CreateMaybeMessage< ::metrics::TabMetricsEvent >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::TabMetricsEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::WindowMetricsEvent* Arena::CreateMaybeMessage< ::metrics::WindowMetricsEvent >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::WindowMetricsEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: safety_tips.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_safety_5ftips_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_safety_5ftips_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_safety_5ftips_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_safety_5ftips_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace chrome_browser_safety_tips {
class FlaggedPage;
class FlaggedPageDefaultTypeInternal;
extern FlaggedPageDefaultTypeInternal _FlaggedPage_default_instance_;
class HostPattern;
class HostPatternDefaultTypeInternal;
extern HostPatternDefaultTypeInternal _HostPattern_default_instance_;
class SafetyTipsConfig;
class SafetyTipsConfigDefaultTypeInternal;
extern SafetyTipsConfigDefaultTypeInternal _SafetyTipsConfig_default_instance_;
class UrlPattern;
class UrlPatternDefaultTypeInternal;
extern UrlPatternDefaultTypeInternal _UrlPattern_default_instance_;
}  // namespace chrome_browser_safety_tips
PROTOBUF_NAMESPACE_OPEN
template<> ::chrome_browser_safety_tips::FlaggedPage* Arena::CreateMaybeMessage<::chrome_browser_safety_tips::FlaggedPage>(Arena*);
template<> ::chrome_browser_safety_tips::HostPattern* Arena::CreateMaybeMessage<::chrome_browser_safety_tips::HostPattern>(Arena*);
template<> ::chrome_browser_safety_tips::SafetyTipsConfig* Arena::CreateMaybeMessage<::chrome_browser_safety_tips::SafetyTipsConfig>(Arena*);
template<> ::chrome_browser_safety_tips::UrlPattern* Arena::CreateMaybeMessage<::chrome_browser_safety_tips::UrlPattern>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chrome_browser_safety_tips {

enum FlaggedPage_FlagType : int {
  FlaggedPage_FlagType_UNKNOWN = 0,
  FlaggedPage_FlagType_BAD_REP = 1,
  FlaggedPage_FlagType_YOUNG_DOMAIN = 2
};
bool FlaggedPage_FlagType_IsValid(int value);
constexpr FlaggedPage_FlagType FlaggedPage_FlagType_FlagType_MIN = FlaggedPage_FlagType_UNKNOWN;
constexpr FlaggedPage_FlagType FlaggedPage_FlagType_FlagType_MAX = FlaggedPage_FlagType_YOUNG_DOMAIN;
constexpr int FlaggedPage_FlagType_FlagType_ARRAYSIZE = FlaggedPage_FlagType_FlagType_MAX + 1;

const std::string& FlaggedPage_FlagType_Name(FlaggedPage_FlagType value);
template<typename T>
inline const std::string& FlaggedPage_FlagType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FlaggedPage_FlagType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FlaggedPage_FlagType_Name.");
  return FlaggedPage_FlagType_Name(static_cast<FlaggedPage_FlagType>(enum_t_value));
}
bool FlaggedPage_FlagType_Parse(
    const std::string& name, FlaggedPage_FlagType* value);
// ===================================================================

class FlaggedPage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_safety_tips.FlaggedPage) */ {
 public:
  FlaggedPage();
  virtual ~FlaggedPage();

  FlaggedPage(const FlaggedPage& from);
  FlaggedPage(FlaggedPage&& from) noexcept
    : FlaggedPage() {
    *this = ::std::move(from);
  }

  inline FlaggedPage& operator=(const FlaggedPage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlaggedPage& operator=(FlaggedPage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FlaggedPage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlaggedPage* internal_default_instance() {
    return reinterpret_cast<const FlaggedPage*>(
               &_FlaggedPage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FlaggedPage& a, FlaggedPage& b) {
    a.Swap(&b);
  }
  inline void Swap(FlaggedPage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlaggedPage* New() const final {
    return CreateMaybeMessage<FlaggedPage>(nullptr);
  }

  FlaggedPage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlaggedPage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FlaggedPage& from);
  void MergeFrom(const FlaggedPage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FlaggedPage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_safety_tips.FlaggedPage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef FlaggedPage_FlagType FlagType;
  static constexpr FlagType UNKNOWN =
    FlaggedPage_FlagType_UNKNOWN;
  static constexpr FlagType BAD_REP =
    FlaggedPage_FlagType_BAD_REP;
  static constexpr FlagType YOUNG_DOMAIN =
    FlaggedPage_FlagType_YOUNG_DOMAIN;
  static inline bool FlagType_IsValid(int value) {
    return FlaggedPage_FlagType_IsValid(value);
  }
  static constexpr FlagType FlagType_MIN =
    FlaggedPage_FlagType_FlagType_MIN;
  static constexpr FlagType FlagType_MAX =
    FlaggedPage_FlagType_FlagType_MAX;
  static constexpr int FlagType_ARRAYSIZE =
    FlaggedPage_FlagType_FlagType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& FlagType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FlagType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FlagType_Name.");
    return FlaggedPage_FlagType_Name(enum_t_value);
  }
  static inline bool FlagType_Parse(const std::string& name,
      FlagType* value) {
    return FlaggedPage_FlagType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPatternFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // optional string pattern = 1;
  bool has_pattern() const;
  void clear_pattern();
  const std::string& pattern() const;
  void set_pattern(const std::string& value);
  void set_pattern(std::string&& value);
  void set_pattern(const char* value);
  void set_pattern(const char* value, size_t size);
  std::string* mutable_pattern();
  std::string* release_pattern();
  void set_allocated_pattern(std::string* pattern);

  // optional .chrome_browser_safety_tips.FlaggedPage.FlagType type = 2;
  bool has_type() const;
  void clear_type();
  ::chrome_browser_safety_tips::FlaggedPage_FlagType type() const;
  void set_type(::chrome_browser_safety_tips::FlaggedPage_FlagType value);

  // @@protoc_insertion_point(class_scope:chrome_browser_safety_tips.FlaggedPage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pattern_;
  int type_;
  friend struct ::TableStruct_safety_5ftips_2eproto;
};
// -------------------------------------------------------------------

class UrlPattern :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_safety_tips.UrlPattern) */ {
 public:
  UrlPattern();
  virtual ~UrlPattern();

  UrlPattern(const UrlPattern& from);
  UrlPattern(UrlPattern&& from) noexcept
    : UrlPattern() {
    *this = ::std::move(from);
  }

  inline UrlPattern& operator=(const UrlPattern& from) {
    CopyFrom(from);
    return *this;
  }
  inline UrlPattern& operator=(UrlPattern&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const UrlPattern& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UrlPattern* internal_default_instance() {
    return reinterpret_cast<const UrlPattern*>(
               &_UrlPattern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UrlPattern& a, UrlPattern& b) {
    a.Swap(&b);
  }
  inline void Swap(UrlPattern* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UrlPattern* New() const final {
    return CreateMaybeMessage<UrlPattern>(nullptr);
  }

  UrlPattern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UrlPattern>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UrlPattern& from);
  void MergeFrom(const UrlPattern& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UrlPattern* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_safety_tips.UrlPattern";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPatternFieldNumber = 1,
  };
  // optional string pattern = 1;
  bool has_pattern() const;
  void clear_pattern();
  const std::string& pattern() const;
  void set_pattern(const std::string& value);
  void set_pattern(std::string&& value);
  void set_pattern(const char* value);
  void set_pattern(const char* value, size_t size);
  std::string* mutable_pattern();
  std::string* release_pattern();
  void set_allocated_pattern(std::string* pattern);

  // @@protoc_insertion_point(class_scope:chrome_browser_safety_tips.UrlPattern)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pattern_;
  friend struct ::TableStruct_safety_5ftips_2eproto;
};
// -------------------------------------------------------------------

class HostPattern :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_safety_tips.HostPattern) */ {
 public:
  HostPattern();
  virtual ~HostPattern();

  HostPattern(const HostPattern& from);
  HostPattern(HostPattern&& from) noexcept
    : HostPattern() {
    *this = ::std::move(from);
  }

  inline HostPattern& operator=(const HostPattern& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostPattern& operator=(HostPattern&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const HostPattern& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostPattern* internal_default_instance() {
    return reinterpret_cast<const HostPattern*>(
               &_HostPattern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HostPattern& a, HostPattern& b) {
    a.Swap(&b);
  }
  inline void Swap(HostPattern* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostPattern* New() const final {
    return CreateMaybeMessage<HostPattern>(nullptr);
  }

  HostPattern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostPattern>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const HostPattern& from);
  void MergeFrom(const HostPattern& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HostPattern* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_safety_tips.HostPattern";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegexFieldNumber = 1,
  };
  // optional string regex = 1;
  bool has_regex() const;
  void clear_regex();
  const std::string& regex() const;
  void set_regex(const std::string& value);
  void set_regex(std::string&& value);
  void set_regex(const char* value);
  void set_regex(const char* value, size_t size);
  std::string* mutable_regex();
  std::string* release_regex();
  void set_allocated_regex(std::string* regex);

  // @@protoc_insertion_point(class_scope:chrome_browser_safety_tips.HostPattern)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr regex_;
  friend struct ::TableStruct_safety_5ftips_2eproto;
};
// -------------------------------------------------------------------

class SafetyTipsConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_safety_tips.SafetyTipsConfig) */ {
 public:
  SafetyTipsConfig();
  virtual ~SafetyTipsConfig();

  SafetyTipsConfig(const SafetyTipsConfig& from);
  SafetyTipsConfig(SafetyTipsConfig&& from) noexcept
    : SafetyTipsConfig() {
    *this = ::std::move(from);
  }

  inline SafetyTipsConfig& operator=(const SafetyTipsConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SafetyTipsConfig& operator=(SafetyTipsConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SafetyTipsConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SafetyTipsConfig* internal_default_instance() {
    return reinterpret_cast<const SafetyTipsConfig*>(
               &_SafetyTipsConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SafetyTipsConfig& a, SafetyTipsConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SafetyTipsConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SafetyTipsConfig* New() const final {
    return CreateMaybeMessage<SafetyTipsConfig>(nullptr);
  }

  SafetyTipsConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SafetyTipsConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SafetyTipsConfig& from);
  void MergeFrom(const SafetyTipsConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SafetyTipsConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_safety_tips.SafetyTipsConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlaggedPageFieldNumber = 2,
    kAllowedPatternFieldNumber = 3,
    kAllowedTargetPatternFieldNumber = 4,
    kVersionIdFieldNumber = 1,
  };
  // repeated .chrome_browser_safety_tips.FlaggedPage flagged_page = 2;
  int flagged_page_size() const;
  void clear_flagged_page();
  ::chrome_browser_safety_tips::FlaggedPage* mutable_flagged_page(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_safety_tips::FlaggedPage >*
      mutable_flagged_page();
  const ::chrome_browser_safety_tips::FlaggedPage& flagged_page(int index) const;
  ::chrome_browser_safety_tips::FlaggedPage* add_flagged_page();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_safety_tips::FlaggedPage >&
      flagged_page() const;

  // repeated .chrome_browser_safety_tips.UrlPattern allowed_pattern = 3;
  int allowed_pattern_size() const;
  void clear_allowed_pattern();
  ::chrome_browser_safety_tips::UrlPattern* mutable_allowed_pattern(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_safety_tips::UrlPattern >*
      mutable_allowed_pattern();
  const ::chrome_browser_safety_tips::UrlPattern& allowed_pattern(int index) const;
  ::chrome_browser_safety_tips::UrlPattern* add_allowed_pattern();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_safety_tips::UrlPattern >&
      allowed_pattern() const;

  // repeated .chrome_browser_safety_tips.HostPattern allowed_target_pattern = 4;
  int allowed_target_pattern_size() const;
  void clear_allowed_target_pattern();
  ::chrome_browser_safety_tips::HostPattern* mutable_allowed_target_pattern(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_safety_tips::HostPattern >*
      mutable_allowed_target_pattern();
  const ::chrome_browser_safety_tips::HostPattern& allowed_target_pattern(int index) const;
  ::chrome_browser_safety_tips::HostPattern* add_allowed_target_pattern();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_safety_tips::HostPattern >&
      allowed_target_pattern() const;

  // optional uint32 version_id = 1;
  bool has_version_id() const;
  void clear_version_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 version_id() const;
  void set_version_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:chrome_browser_safety_tips.SafetyTipsConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_safety_tips::FlaggedPage > flagged_page_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_safety_tips::UrlPattern > allowed_pattern_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_safety_tips::HostPattern > allowed_target_pattern_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_id_;
  friend struct ::TableStruct_safety_5ftips_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FlaggedPage

// optional string pattern = 1;
inline bool FlaggedPage::has_pattern() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlaggedPage::clear_pattern() {
  pattern_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FlaggedPage::pattern() const {
  // @@protoc_insertion_point(field_get:chrome_browser_safety_tips.FlaggedPage.pattern)
  return pattern_.GetNoArena();
}
inline void FlaggedPage::set_pattern(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pattern_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_safety_tips.FlaggedPage.pattern)
}
inline void FlaggedPage::set_pattern(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  pattern_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_safety_tips.FlaggedPage.pattern)
}
inline void FlaggedPage::set_pattern(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  pattern_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_safety_tips.FlaggedPage.pattern)
}
inline void FlaggedPage::set_pattern(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  pattern_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_safety_tips.FlaggedPage.pattern)
}
inline std::string* FlaggedPage::mutable_pattern() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:chrome_browser_safety_tips.FlaggedPage.pattern)
  return pattern_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FlaggedPage::release_pattern() {
  // @@protoc_insertion_point(field_release:chrome_browser_safety_tips.FlaggedPage.pattern)
  if (!has_pattern()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return pattern_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FlaggedPage::set_allocated_pattern(std::string* pattern) {
  if (pattern != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pattern_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pattern);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_safety_tips.FlaggedPage.pattern)
}

// optional .chrome_browser_safety_tips.FlaggedPage.FlagType type = 2;
inline bool FlaggedPage::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlaggedPage::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::chrome_browser_safety_tips::FlaggedPage_FlagType FlaggedPage::type() const {
  // @@protoc_insertion_point(field_get:chrome_browser_safety_tips.FlaggedPage.type)
  return static_cast< ::chrome_browser_safety_tips::FlaggedPage_FlagType >(type_);
}
inline void FlaggedPage::set_type(::chrome_browser_safety_tips::FlaggedPage_FlagType value) {
  assert(::chrome_browser_safety_tips::FlaggedPage_FlagType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_safety_tips.FlaggedPage.type)
}

// -------------------------------------------------------------------

// UrlPattern

// optional string pattern = 1;
inline bool UrlPattern::has_pattern() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UrlPattern::clear_pattern() {
  pattern_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UrlPattern::pattern() const {
  // @@protoc_insertion_point(field_get:chrome_browser_safety_tips.UrlPattern.pattern)
  return pattern_.GetNoArena();
}
inline void UrlPattern::set_pattern(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pattern_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_safety_tips.UrlPattern.pattern)
}
inline void UrlPattern::set_pattern(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  pattern_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_safety_tips.UrlPattern.pattern)
}
inline void UrlPattern::set_pattern(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  pattern_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_safety_tips.UrlPattern.pattern)
}
inline void UrlPattern::set_pattern(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  pattern_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_safety_tips.UrlPattern.pattern)
}
inline std::string* UrlPattern::mutable_pattern() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:chrome_browser_safety_tips.UrlPattern.pattern)
  return pattern_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UrlPattern::release_pattern() {
  // @@protoc_insertion_point(field_release:chrome_browser_safety_tips.UrlPattern.pattern)
  if (!has_pattern()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return pattern_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UrlPattern::set_allocated_pattern(std::string* pattern) {
  if (pattern != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pattern_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pattern);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_safety_tips.UrlPattern.pattern)
}

// -------------------------------------------------------------------

// HostPattern

// optional string regex = 1;
inline bool HostPattern::has_regex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HostPattern::clear_regex() {
  regex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HostPattern::regex() const {
  // @@protoc_insertion_point(field_get:chrome_browser_safety_tips.HostPattern.regex)
  return regex_.GetNoArena();
}
inline void HostPattern::set_regex(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_safety_tips.HostPattern.regex)
}
inline void HostPattern::set_regex(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  regex_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_safety_tips.HostPattern.regex)
}
inline void HostPattern::set_regex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_safety_tips.HostPattern.regex)
}
inline void HostPattern::set_regex(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_safety_tips.HostPattern.regex)
}
inline std::string* HostPattern::mutable_regex() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:chrome_browser_safety_tips.HostPattern.regex)
  return regex_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HostPattern::release_regex() {
  // @@protoc_insertion_point(field_release:chrome_browser_safety_tips.HostPattern.regex)
  if (!has_regex()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return regex_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HostPattern::set_allocated_regex(std::string* regex) {
  if (regex != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  regex_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), regex);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_safety_tips.HostPattern.regex)
}

// -------------------------------------------------------------------

// SafetyTipsConfig

// optional uint32 version_id = 1;
inline bool SafetyTipsConfig::has_version_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SafetyTipsConfig::clear_version_id() {
  version_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SafetyTipsConfig::version_id() const {
  // @@protoc_insertion_point(field_get:chrome_browser_safety_tips.SafetyTipsConfig.version_id)
  return version_id_;
}
inline void SafetyTipsConfig::set_version_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  version_id_ = value;
  // @@protoc_insertion_point(field_set:chrome_browser_safety_tips.SafetyTipsConfig.version_id)
}

// repeated .chrome_browser_safety_tips.FlaggedPage flagged_page = 2;
inline int SafetyTipsConfig::flagged_page_size() const {
  return flagged_page_.size();
}
inline void SafetyTipsConfig::clear_flagged_page() {
  flagged_page_.Clear();
}
inline ::chrome_browser_safety_tips::FlaggedPage* SafetyTipsConfig::mutable_flagged_page(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_browser_safety_tips.SafetyTipsConfig.flagged_page)
  return flagged_page_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_safety_tips::FlaggedPage >*
SafetyTipsConfig::mutable_flagged_page() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_safety_tips.SafetyTipsConfig.flagged_page)
  return &flagged_page_;
}
inline const ::chrome_browser_safety_tips::FlaggedPage& SafetyTipsConfig::flagged_page(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_safety_tips.SafetyTipsConfig.flagged_page)
  return flagged_page_.Get(index);
}
inline ::chrome_browser_safety_tips::FlaggedPage* SafetyTipsConfig::add_flagged_page() {
  // @@protoc_insertion_point(field_add:chrome_browser_safety_tips.SafetyTipsConfig.flagged_page)
  return flagged_page_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_safety_tips::FlaggedPage >&
SafetyTipsConfig::flagged_page() const {
  // @@protoc_insertion_point(field_list:chrome_browser_safety_tips.SafetyTipsConfig.flagged_page)
  return flagged_page_;
}

// repeated .chrome_browser_safety_tips.UrlPattern allowed_pattern = 3;
inline int SafetyTipsConfig::allowed_pattern_size() const {
  return allowed_pattern_.size();
}
inline void SafetyTipsConfig::clear_allowed_pattern() {
  allowed_pattern_.Clear();
}
inline ::chrome_browser_safety_tips::UrlPattern* SafetyTipsConfig::mutable_allowed_pattern(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_browser_safety_tips.SafetyTipsConfig.allowed_pattern)
  return allowed_pattern_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_safety_tips::UrlPattern >*
SafetyTipsConfig::mutable_allowed_pattern() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_safety_tips.SafetyTipsConfig.allowed_pattern)
  return &allowed_pattern_;
}
inline const ::chrome_browser_safety_tips::UrlPattern& SafetyTipsConfig::allowed_pattern(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_safety_tips.SafetyTipsConfig.allowed_pattern)
  return allowed_pattern_.Get(index);
}
inline ::chrome_browser_safety_tips::UrlPattern* SafetyTipsConfig::add_allowed_pattern() {
  // @@protoc_insertion_point(field_add:chrome_browser_safety_tips.SafetyTipsConfig.allowed_pattern)
  return allowed_pattern_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_safety_tips::UrlPattern >&
SafetyTipsConfig::allowed_pattern() const {
  // @@protoc_insertion_point(field_list:chrome_browser_safety_tips.SafetyTipsConfig.allowed_pattern)
  return allowed_pattern_;
}

// repeated .chrome_browser_safety_tips.HostPattern allowed_target_pattern = 4;
inline int SafetyTipsConfig::allowed_target_pattern_size() const {
  return allowed_target_pattern_.size();
}
inline void SafetyTipsConfig::clear_allowed_target_pattern() {
  allowed_target_pattern_.Clear();
}
inline ::chrome_browser_safety_tips::HostPattern* SafetyTipsConfig::mutable_allowed_target_pattern(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_browser_safety_tips.SafetyTipsConfig.allowed_target_pattern)
  return allowed_target_pattern_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_safety_tips::HostPattern >*
SafetyTipsConfig::mutable_allowed_target_pattern() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_safety_tips.SafetyTipsConfig.allowed_target_pattern)
  return &allowed_target_pattern_;
}
inline const ::chrome_browser_safety_tips::HostPattern& SafetyTipsConfig::allowed_target_pattern(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_safety_tips.SafetyTipsConfig.allowed_target_pattern)
  return allowed_target_pattern_.Get(index);
}
inline ::chrome_browser_safety_tips::HostPattern* SafetyTipsConfig::add_allowed_target_pattern() {
  // @@protoc_insertion_point(field_add:chrome_browser_safety_tips.SafetyTipsConfig.allowed_target_pattern)
  return allowed_target_pattern_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_safety_tips::HostPattern >&
SafetyTipsConfig::allowed_target_pattern() const {
  // @@protoc_insertion_point(field_list:chrome_browser_safety_tips.SafetyTipsConfig.allowed_target_pattern)
  return allowed_target_pattern_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chrome_browser_safety_tips

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::chrome_browser_safety_tips::FlaggedPage_FlagType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_safety_5ftips_2eproto

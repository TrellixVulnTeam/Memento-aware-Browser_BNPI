// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: impression.proto

#include "impression.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_notification_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CustomData_notification_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_impression_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Impression_ImpressionMapping_impression_2eproto;
namespace notifications {
namespace proto {
class Impression_ImpressionMappingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Impression_ImpressionMapping> _instance;
} _Impression_ImpressionMapping_default_instance_;
class ImpressionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Impression> _instance;
} _Impression_default_instance_;
}  // namespace proto
}  // namespace notifications
static void InitDefaultsscc_info_Impression_impression_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::notifications::proto::_Impression_default_instance_;
    new (ptr) ::notifications::proto::Impression();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::notifications::proto::Impression::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Impression_impression_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Impression_impression_2eproto}, {
      &scc_info_Impression_ImpressionMapping_impression_2eproto.base,
      &scc_info_CustomData_notification_5fdata_2eproto.base,}};

static void InitDefaultsscc_info_Impression_ImpressionMapping_impression_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::notifications::proto::_Impression_ImpressionMapping_default_instance_;
    new (ptr) ::notifications::proto::Impression_ImpressionMapping();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::notifications::proto::Impression_ImpressionMapping::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Impression_ImpressionMapping_impression_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Impression_ImpressionMapping_impression_2eproto}, {}};

namespace notifications {
namespace proto {
bool Impression_UserFeedback_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Impression_UserFeedback_strings[6] = {};

static const char Impression_UserFeedback_names[] =
  "CLICK"
  "DISMISS"
  "HELPFUL"
  "IGNORE"
  "NOT_HELPFUL"
  "NO_FEEDBACK";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Impression_UserFeedback_entries[] = {
  { {Impression_UserFeedback_names + 0, 5}, 3 },
  { {Impression_UserFeedback_names + 5, 7}, 4 },
  { {Impression_UserFeedback_names + 12, 7}, 1 },
  { {Impression_UserFeedback_names + 19, 6}, 5 },
  { {Impression_UserFeedback_names + 25, 11}, 2 },
  { {Impression_UserFeedback_names + 36, 11}, 0 },
};

static const int Impression_UserFeedback_entries_by_number[] = {
  5, // 0 -> NO_FEEDBACK
  2, // 1 -> HELPFUL
  4, // 2 -> NOT_HELPFUL
  0, // 3 -> CLICK
  1, // 4 -> DISMISS
  3, // 5 -> IGNORE
};

const std::string& Impression_UserFeedback_Name(
    Impression_UserFeedback value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Impression_UserFeedback_entries,
          Impression_UserFeedback_entries_by_number,
          6, Impression_UserFeedback_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Impression_UserFeedback_entries,
      Impression_UserFeedback_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Impression_UserFeedback_strings[idx].get();
}
bool Impression_UserFeedback_Parse(
    const std::string& name, Impression_UserFeedback* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Impression_UserFeedback_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<Impression_UserFeedback>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Impression_UserFeedback Impression::NO_FEEDBACK;
constexpr Impression_UserFeedback Impression::HELPFUL;
constexpr Impression_UserFeedback Impression::NOT_HELPFUL;
constexpr Impression_UserFeedback Impression::CLICK;
constexpr Impression_UserFeedback Impression::DISMISS;
constexpr Impression_UserFeedback Impression::IGNORE;
constexpr Impression_UserFeedback Impression::UserFeedback_MIN;
constexpr Impression_UserFeedback Impression::UserFeedback_MAX;
constexpr int Impression::UserFeedback_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool Impression_ImpressionResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Impression_ImpressionResult_strings[4] = {};

static const char Impression_ImpressionResult_names[] =
  "INVALID"
  "NEGATIVE"
  "NEUTRAL"
  "POSITIVE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Impression_ImpressionResult_entries[] = {
  { {Impression_ImpressionResult_names + 0, 7}, 0 },
  { {Impression_ImpressionResult_names + 7, 8}, 2 },
  { {Impression_ImpressionResult_names + 15, 7}, 3 },
  { {Impression_ImpressionResult_names + 22, 8}, 1 },
};

static const int Impression_ImpressionResult_entries_by_number[] = {
  0, // 0 -> INVALID
  3, // 1 -> POSITIVE
  1, // 2 -> NEGATIVE
  2, // 3 -> NEUTRAL
};

const std::string& Impression_ImpressionResult_Name(
    Impression_ImpressionResult value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Impression_ImpressionResult_entries,
          Impression_ImpressionResult_entries_by_number,
          4, Impression_ImpressionResult_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Impression_ImpressionResult_entries,
      Impression_ImpressionResult_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Impression_ImpressionResult_strings[idx].get();
}
bool Impression_ImpressionResult_Parse(
    const std::string& name, Impression_ImpressionResult* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Impression_ImpressionResult_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<Impression_ImpressionResult>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Impression_ImpressionResult Impression::INVALID;
constexpr Impression_ImpressionResult Impression::POSITIVE;
constexpr Impression_ImpressionResult Impression::NEGATIVE;
constexpr Impression_ImpressionResult Impression::NEUTRAL;
constexpr Impression_ImpressionResult Impression::ImpressionResult_MIN;
constexpr Impression_ImpressionResult Impression::ImpressionResult_MAX;
constexpr int Impression::ImpressionResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Impression_ImpressionMapping::InitAsDefaultInstance() {
}
class Impression_ImpressionMapping::_Internal {
 public:
  using HasBits = decltype(std::declval<Impression_ImpressionMapping>()._has_bits_);
  static void set_has_user_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_impression_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Impression_ImpressionMapping::Impression_ImpressionMapping()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:notifications.proto.Impression.ImpressionMapping)
}
Impression_ImpressionMapping::Impression_ImpressionMapping(const Impression_ImpressionMapping& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&user_feedback_, &from.user_feedback_,
    static_cast<size_t>(reinterpret_cast<char*>(&impression_result_) -
    reinterpret_cast<char*>(&user_feedback_)) + sizeof(impression_result_));
  // @@protoc_insertion_point(copy_constructor:notifications.proto.Impression.ImpressionMapping)
}

void Impression_ImpressionMapping::SharedCtor() {
  ::memset(&user_feedback_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&impression_result_) -
      reinterpret_cast<char*>(&user_feedback_)) + sizeof(impression_result_));
}

Impression_ImpressionMapping::~Impression_ImpressionMapping() {
  // @@protoc_insertion_point(destructor:notifications.proto.Impression.ImpressionMapping)
  SharedDtor();
}

void Impression_ImpressionMapping::SharedDtor() {
}

void Impression_ImpressionMapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Impression_ImpressionMapping& Impression_ImpressionMapping::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Impression_ImpressionMapping_impression_2eproto.base);
  return *internal_default_instance();
}


void Impression_ImpressionMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:notifications.proto.Impression.ImpressionMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&user_feedback_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&impression_result_) -
        reinterpret_cast<char*>(&user_feedback_)) + sizeof(impression_result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Impression_ImpressionMapping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .notifications.proto.Impression.UserFeedback user_feedback = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::notifications::proto::Impression_UserFeedback_IsValid(val))) {
            set_user_feedback(static_cast<::notifications::proto::Impression_UserFeedback>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .notifications.proto.Impression.ImpressionResult impression_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::notifications::proto::Impression_ImpressionResult_IsValid(val))) {
            set_impression_result(static_cast<::notifications::proto::Impression_ImpressionResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Impression_ImpressionMapping::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:notifications.proto.Impression.ImpressionMapping)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .notifications.proto.Impression.UserFeedback user_feedback = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::notifications::proto::Impression_UserFeedback_IsValid(value)) {
            set_user_feedback(static_cast< ::notifications::proto::Impression_UserFeedback >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .notifications.proto.Impression.ImpressionResult impression_result = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::notifications::proto::Impression_ImpressionResult_IsValid(value)) {
            set_impression_result(static_cast< ::notifications::proto::Impression_ImpressionResult >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:notifications.proto.Impression.ImpressionMapping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:notifications.proto.Impression.ImpressionMapping)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Impression_ImpressionMapping::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:notifications.proto.Impression.ImpressionMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .notifications.proto.Impression.UserFeedback user_feedback = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->user_feedback(), output);
  }

  // optional .notifications.proto.Impression.ImpressionResult impression_result = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->impression_result(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:notifications.proto.Impression.ImpressionMapping)
}

size_t Impression_ImpressionMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:notifications.proto.Impression.ImpressionMapping)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .notifications.proto.Impression.UserFeedback user_feedback = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->user_feedback());
    }

    // optional .notifications.proto.Impression.ImpressionResult impression_result = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->impression_result());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Impression_ImpressionMapping::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Impression_ImpressionMapping*>(
      &from));
}

void Impression_ImpressionMapping::MergeFrom(const Impression_ImpressionMapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:notifications.proto.Impression.ImpressionMapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      user_feedback_ = from.user_feedback_;
    }
    if (cached_has_bits & 0x00000002u) {
      impression_result_ = from.impression_result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Impression_ImpressionMapping::CopyFrom(const Impression_ImpressionMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:notifications.proto.Impression.ImpressionMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Impression_ImpressionMapping::IsInitialized() const {
  return true;
}

void Impression_ImpressionMapping::InternalSwap(Impression_ImpressionMapping* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(user_feedback_, other->user_feedback_);
  swap(impression_result_, other->impression_result_);
}

std::string Impression_ImpressionMapping::GetTypeName() const {
  return "notifications.proto.Impression.ImpressionMapping";
}


// ===================================================================

void Impression::InitAsDefaultInstance() {
}
class Impression::_Internal {
 public:
  using HasBits = decltype(std::declval<Impression>()._has_bits_);
  static void set_has_create_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_impression(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_integrated(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ignore_timeout_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

void Impression::clear_custom_data() {
  custom_data_.Clear();
}
Impression::Impression()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:notifications.proto.Impression)
}
Impression::Impression(const Impression& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      impression_mapping_(from.impression_mapping_),
      custom_data_(from.custom_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_guid()) {
    guid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guid_);
  }
  ::memcpy(&create_time_, &from.create_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&integrated_) -
    reinterpret_cast<char*>(&create_time_)) + sizeof(integrated_));
  // @@protoc_insertion_point(copy_constructor:notifications.proto.Impression)
}

void Impression::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Impression_impression_2eproto.base);
  guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&create_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&integrated_) -
      reinterpret_cast<char*>(&create_time_)) + sizeof(integrated_));
}

Impression::~Impression() {
  // @@protoc_insertion_point(destructor:notifications.proto.Impression)
  SharedDtor();
}

void Impression::SharedDtor() {
  guid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Impression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Impression& Impression::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Impression_impression_2eproto.base);
  return *internal_default_instance();
}


void Impression::Clear() {
// @@protoc_insertion_point(message_clear_start:notifications.proto.Impression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  impression_mapping_.Clear();
  custom_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    guid_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&create_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&integrated_) -
        reinterpret_cast<char*>(&create_time_)) + sizeof(integrated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Impression::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 create_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_create_time(&has_bits);
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .notifications.proto.Impression.UserFeedback feedback = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::notifications::proto::Impression_UserFeedback_IsValid(val))) {
            set_feedback(static_cast<::notifications::proto::Impression_UserFeedback>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .notifications.proto.Impression.ImpressionResult impression = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::notifications::proto::Impression_ImpressionResult_IsValid(val))) {
            set_impression(static_cast<::notifications::proto::Impression_ImpressionResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool integrated = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_integrated(&has_bits);
          integrated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string guid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_guid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .notifications.proto.Impression.ImpressionMapping impression_mapping = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_impression_mapping(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // repeated .notifications.proto.CustomData custom_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_custom_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // optional int64 ignore_timeout_duration = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_ignore_timeout_duration(&has_bits);
          ignore_timeout_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Impression::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:notifications.proto.Impression)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 create_time = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_create_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .notifications.proto.Impression.UserFeedback feedback = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::notifications::proto::Impression_UserFeedback_IsValid(value)) {
            set_feedback(static_cast< ::notifications::proto::Impression_UserFeedback >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .notifications.proto.Impression.ImpressionResult impression = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::notifications::proto::Impression_ImpressionResult_IsValid(value)) {
            set_impression(static_cast< ::notifications::proto::Impression_ImpressionResult >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool integrated = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_integrated(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &integrated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string guid = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .notifications.proto.Impression.ImpressionMapping impression_mapping = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_impression_mapping()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .notifications.proto.CustomData custom_data = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_custom_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ignore_timeout_duration = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_ignore_timeout_duration(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &ignore_timeout_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:notifications.proto.Impression)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:notifications.proto.Impression)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Impression::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:notifications.proto.Impression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 create_time = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->create_time(), output);
  }

  // optional .notifications.proto.Impression.UserFeedback feedback = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->feedback(), output);
  }

  // optional .notifications.proto.Impression.ImpressionResult impression = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->impression(), output);
  }

  // optional bool integrated = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->integrated(), output);
  }

  // optional string guid = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->guid(), output);
  }

  // repeated .notifications.proto.Impression.ImpressionMapping impression_mapping = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->impression_mapping_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6,
      this->impression_mapping(static_cast<int>(i)),
      output);
  }

  // repeated .notifications.proto.CustomData custom_data = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->custom_data_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7,
      this->custom_data(static_cast<int>(i)),
      output);
  }

  // optional int64 ignore_timeout_duration = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->ignore_timeout_duration(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:notifications.proto.Impression)
}

size_t Impression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:notifications.proto.Impression)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .notifications.proto.Impression.ImpressionMapping impression_mapping = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->impression_mapping_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->impression_mapping(static_cast<int>(i)));
    }
  }

  // repeated .notifications.proto.CustomData custom_data = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->custom_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->custom_data(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string guid = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional int64 create_time = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->create_time());
    }

    // optional .notifications.proto.Impression.UserFeedback feedback = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->feedback());
    }

    // optional .notifications.proto.Impression.ImpressionResult impression = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->impression());
    }

    // optional int64 ignore_timeout_duration = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->ignore_timeout_duration());
    }

    // optional bool integrated = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Impression::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Impression*>(
      &from));
}

void Impression::MergeFrom(const Impression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:notifications.proto.Impression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  impression_mapping_.MergeFrom(from.impression_mapping_);
  custom_data_.MergeFrom(from.custom_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      guid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guid_);
    }
    if (cached_has_bits & 0x00000002u) {
      create_time_ = from.create_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      feedback_ = from.feedback_;
    }
    if (cached_has_bits & 0x00000008u) {
      impression_ = from.impression_;
    }
    if (cached_has_bits & 0x00000010u) {
      ignore_timeout_duration_ = from.ignore_timeout_duration_;
    }
    if (cached_has_bits & 0x00000020u) {
      integrated_ = from.integrated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Impression::CopyFrom(const Impression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:notifications.proto.Impression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Impression::IsInitialized() const {
  return true;
}

void Impression::InternalSwap(Impression* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&impression_mapping_)->InternalSwap(CastToBase(&other->impression_mapping_));
  CastToBase(&custom_data_)->InternalSwap(CastToBase(&other->custom_data_));
  guid_.Swap(&other->guid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(create_time_, other->create_time_);
  swap(feedback_, other->feedback_);
  swap(impression_, other->impression_);
  swap(ignore_timeout_duration_, other->ignore_timeout_duration_);
  swap(integrated_, other->integrated_);
}

std::string Impression::GetTypeName() const {
  return "notifications.proto.Impression";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace notifications
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::notifications::proto::Impression_ImpressionMapping* Arena::CreateMaybeMessage< ::notifications::proto::Impression_ImpressionMapping >(Arena* arena) {
  return Arena::CreateInternal< ::notifications::proto::Impression_ImpressionMapping >(arena);
}
template<> PROTOBUF_NOINLINE ::notifications::proto::Impression* Arena::CreateMaybeMessage< ::notifications::proto::Impression >(Arena* arena) {
  return Arena::CreateInternal< ::notifications::proto::Impression >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

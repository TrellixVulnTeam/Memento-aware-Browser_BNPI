// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notification_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_notification_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_notification_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_notification_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_notification_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace notifications {
namespace proto {
class CustomData;
class CustomDataDefaultTypeInternal;
extern CustomDataDefaultTypeInternal _CustomData_default_instance_;
class NotificationData;
class NotificationDataDefaultTypeInternal;
extern NotificationDataDefaultTypeInternal _NotificationData_default_instance_;
class NotificationData_Button;
class NotificationData_ButtonDefaultTypeInternal;
extern NotificationData_ButtonDefaultTypeInternal _NotificationData_Button_default_instance_;
class NotificationData_IconUuidBundle;
class NotificationData_IconUuidBundleDefaultTypeInternal;
extern NotificationData_IconUuidBundleDefaultTypeInternal _NotificationData_IconUuidBundle_default_instance_;
}  // namespace proto
}  // namespace notifications
PROTOBUF_NAMESPACE_OPEN
template<> ::notifications::proto::CustomData* Arena::CreateMaybeMessage<::notifications::proto::CustomData>(Arena*);
template<> ::notifications::proto::NotificationData* Arena::CreateMaybeMessage<::notifications::proto::NotificationData>(Arena*);
template<> ::notifications::proto::NotificationData_Button* Arena::CreateMaybeMessage<::notifications::proto::NotificationData_Button>(Arena*);
template<> ::notifications::proto::NotificationData_IconUuidBundle* Arena::CreateMaybeMessage<::notifications::proto::NotificationData_IconUuidBundle>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace notifications {
namespace proto {

enum ActionButtonType : int {
  UNKNOWN_ACTION = 0,
  HELPFUL = 1,
  UNHELPFUL = 2
};
bool ActionButtonType_IsValid(int value);
constexpr ActionButtonType ActionButtonType_MIN = UNKNOWN_ACTION;
constexpr ActionButtonType ActionButtonType_MAX = UNHELPFUL;
constexpr int ActionButtonType_ARRAYSIZE = ActionButtonType_MAX + 1;

const std::string& ActionButtonType_Name(ActionButtonType value);
template<typename T>
inline const std::string& ActionButtonType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActionButtonType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActionButtonType_Name.");
  return ActionButtonType_Name(static_cast<ActionButtonType>(enum_t_value));
}
bool ActionButtonType_Parse(
    const std::string& name, ActionButtonType* value);
enum IconType : int {
  UNKNOWN_ICON_TYPE = 0,
  SMALL_ICON = 1,
  LARGE_ICON = 2
};
bool IconType_IsValid(int value);
constexpr IconType IconType_MIN = UNKNOWN_ICON_TYPE;
constexpr IconType IconType_MAX = LARGE_ICON;
constexpr int IconType_ARRAYSIZE = IconType_MAX + 1;

const std::string& IconType_Name(IconType value);
template<typename T>
inline const std::string& IconType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IconType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IconType_Name.");
  return IconType_Name(static_cast<IconType>(enum_t_value));
}
bool IconType_Parse(
    const std::string& name, IconType* value);
// ===================================================================

class CustomData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:notifications.proto.CustomData) */ {
 public:
  CustomData();
  virtual ~CustomData();

  CustomData(const CustomData& from);
  CustomData(CustomData&& from) noexcept
    : CustomData() {
    *this = ::std::move(from);
  }

  inline CustomData& operator=(const CustomData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomData& operator=(CustomData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CustomData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CustomData* internal_default_instance() {
    return reinterpret_cast<const CustomData*>(
               &_CustomData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CustomData& a, CustomData& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CustomData* New() const final {
    return CreateMaybeMessage<CustomData>(nullptr);
  }

  CustomData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CustomData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CustomData& from);
  void MergeFrom(const CustomData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CustomData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "notifications.proto.CustomData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string key = 1;
  bool has_key() const;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // optional bytes value = 2;
  bool has_value() const;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // @@protoc_insertion_point(class_scope:notifications.proto.CustomData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_notification_5fdata_2eproto;
};
// -------------------------------------------------------------------

class NotificationData_Button :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:notifications.proto.NotificationData.Button) */ {
 public:
  NotificationData_Button();
  virtual ~NotificationData_Button();

  NotificationData_Button(const NotificationData_Button& from);
  NotificationData_Button(NotificationData_Button&& from) noexcept
    : NotificationData_Button() {
    *this = ::std::move(from);
  }

  inline NotificationData_Button& operator=(const NotificationData_Button& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationData_Button& operator=(NotificationData_Button&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const NotificationData_Button& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotificationData_Button* internal_default_instance() {
    return reinterpret_cast<const NotificationData_Button*>(
               &_NotificationData_Button_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NotificationData_Button& a, NotificationData_Button& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationData_Button* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotificationData_Button* New() const final {
    return CreateMaybeMessage<NotificationData_Button>(nullptr);
  }

  NotificationData_Button* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotificationData_Button>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NotificationData_Button& from);
  void MergeFrom(const NotificationData_Button& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NotificationData_Button* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "notifications.proto.NotificationData.Button";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kIdFieldNumber = 3,
    kButtonTypeFieldNumber = 2,
  };
  // optional string text = 1;
  bool has_text() const;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);

  // optional string id = 3;
  bool has_id() const;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // optional .notifications.proto.ActionButtonType button_type = 2;
  bool has_button_type() const;
  void clear_button_type();
  ::notifications::proto::ActionButtonType button_type() const;
  void set_button_type(::notifications::proto::ActionButtonType value);

  // @@protoc_insertion_point(class_scope:notifications.proto.NotificationData.Button)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  int button_type_;
  friend struct ::TableStruct_notification_5fdata_2eproto;
};
// -------------------------------------------------------------------

class NotificationData_IconUuidBundle :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:notifications.proto.NotificationData.IconUuidBundle) */ {
 public:
  NotificationData_IconUuidBundle();
  virtual ~NotificationData_IconUuidBundle();

  NotificationData_IconUuidBundle(const NotificationData_IconUuidBundle& from);
  NotificationData_IconUuidBundle(NotificationData_IconUuidBundle&& from) noexcept
    : NotificationData_IconUuidBundle() {
    *this = ::std::move(from);
  }

  inline NotificationData_IconUuidBundle& operator=(const NotificationData_IconUuidBundle& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationData_IconUuidBundle& operator=(NotificationData_IconUuidBundle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const NotificationData_IconUuidBundle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotificationData_IconUuidBundle* internal_default_instance() {
    return reinterpret_cast<const NotificationData_IconUuidBundle*>(
               &_NotificationData_IconUuidBundle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NotificationData_IconUuidBundle& a, NotificationData_IconUuidBundle& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationData_IconUuidBundle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotificationData_IconUuidBundle* New() const final {
    return CreateMaybeMessage<NotificationData_IconUuidBundle>(nullptr);
  }

  NotificationData_IconUuidBundle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotificationData_IconUuidBundle>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NotificationData_IconUuidBundle& from);
  void MergeFrom(const NotificationData_IconUuidBundle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NotificationData_IconUuidBundle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "notifications.proto.NotificationData.IconUuidBundle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // optional string uuid = 2;
  bool has_uuid() const;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);

  // optional .notifications.proto.IconType type = 1;
  bool has_type() const;
  void clear_type();
  ::notifications::proto::IconType type() const;
  void set_type(::notifications::proto::IconType value);

  // @@protoc_insertion_point(class_scope:notifications.proto.NotificationData.IconUuidBundle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  int type_;
  friend struct ::TableStruct_notification_5fdata_2eproto;
};
// -------------------------------------------------------------------

class NotificationData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:notifications.proto.NotificationData) */ {
 public:
  NotificationData();
  virtual ~NotificationData();

  NotificationData(const NotificationData& from);
  NotificationData(NotificationData&& from) noexcept
    : NotificationData() {
    *this = ::std::move(from);
  }

  inline NotificationData& operator=(const NotificationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationData& operator=(NotificationData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const NotificationData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotificationData* internal_default_instance() {
    return reinterpret_cast<const NotificationData*>(
               &_NotificationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NotificationData& a, NotificationData& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotificationData* New() const final {
    return CreateMaybeMessage<NotificationData>(nullptr);
  }

  NotificationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotificationData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NotificationData& from);
  void MergeFrom(const NotificationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NotificationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "notifications.proto.NotificationData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef NotificationData_Button Button;
  typedef NotificationData_IconUuidBundle IconUuidBundle;

  // accessors -------------------------------------------------------

  enum : int {
    kCustomDataFieldNumber = 3,
    kButtonsFieldNumber = 4,
    kIconsUuidFieldNumber = 5,
    kTitleFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // repeated .notifications.proto.CustomData custom_data = 3;
  int custom_data_size() const;
  void clear_custom_data();
  ::notifications::proto::CustomData* mutable_custom_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::CustomData >*
      mutable_custom_data();
  const ::notifications::proto::CustomData& custom_data(int index) const;
  ::notifications::proto::CustomData* add_custom_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::CustomData >&
      custom_data() const;

  // repeated .notifications.proto.NotificationData.Button buttons = 4;
  int buttons_size() const;
  void clear_buttons();
  ::notifications::proto::NotificationData_Button* mutable_buttons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::NotificationData_Button >*
      mutable_buttons();
  const ::notifications::proto::NotificationData_Button& buttons(int index) const;
  ::notifications::proto::NotificationData_Button* add_buttons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::NotificationData_Button >&
      buttons() const;

  // repeated .notifications.proto.NotificationData.IconUuidBundle icons_uuid = 5;
  int icons_uuid_size() const;
  void clear_icons_uuid();
  ::notifications::proto::NotificationData_IconUuidBundle* mutable_icons_uuid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::NotificationData_IconUuidBundle >*
      mutable_icons_uuid();
  const ::notifications::proto::NotificationData_IconUuidBundle& icons_uuid(int index) const;
  ::notifications::proto::NotificationData_IconUuidBundle* add_icons_uuid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::NotificationData_IconUuidBundle >&
      icons_uuid() const;

  // optional string title = 1;
  bool has_title() const;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);

  // optional string message = 2;
  bool has_message() const;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);

  // @@protoc_insertion_point(class_scope:notifications.proto.NotificationData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::CustomData > custom_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::NotificationData_Button > buttons_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::NotificationData_IconUuidBundle > icons_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  friend struct ::TableStruct_notification_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CustomData

// optional string key = 1;
inline bool CustomData::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CustomData::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CustomData::key() const {
  // @@protoc_insertion_point(field_get:notifications.proto.CustomData.key)
  return key_.GetNoArena();
}
inline void CustomData::set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:notifications.proto.CustomData.key)
}
inline void CustomData::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:notifications.proto.CustomData.key)
}
inline void CustomData::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:notifications.proto.CustomData.key)
}
inline void CustomData::set_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:notifications.proto.CustomData.key)
}
inline std::string* CustomData::mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:notifications.proto.CustomData.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CustomData::release_key() {
  // @@protoc_insertion_point(field_release:notifications.proto.CustomData.key)
  if (!has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CustomData::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:notifications.proto.CustomData.key)
}

// optional bytes value = 2;
inline bool CustomData::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CustomData::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CustomData::value() const {
  // @@protoc_insertion_point(field_get:notifications.proto.CustomData.value)
  return value_.GetNoArena();
}
inline void CustomData::set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:notifications.proto.CustomData.value)
}
inline void CustomData::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:notifications.proto.CustomData.value)
}
inline void CustomData::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:notifications.proto.CustomData.value)
}
inline void CustomData::set_value(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:notifications.proto.CustomData.value)
}
inline std::string* CustomData::mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:notifications.proto.CustomData.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CustomData::release_value() {
  // @@protoc_insertion_point(field_release:notifications.proto.CustomData.value)
  if (!has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CustomData::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:notifications.proto.CustomData.value)
}

// -------------------------------------------------------------------

// NotificationData_Button

// optional string text = 1;
inline bool NotificationData_Button::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotificationData_Button::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NotificationData_Button::text() const {
  // @@protoc_insertion_point(field_get:notifications.proto.NotificationData.Button.text)
  return text_.GetNoArena();
}
inline void NotificationData_Button::set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:notifications.proto.NotificationData.Button.text)
}
inline void NotificationData_Button::set_text(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:notifications.proto.NotificationData.Button.text)
}
inline void NotificationData_Button::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:notifications.proto.NotificationData.Button.text)
}
inline void NotificationData_Button::set_text(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:notifications.proto.NotificationData.Button.text)
}
inline std::string* NotificationData_Button::mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:notifications.proto.NotificationData.Button.text)
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationData_Button::release_text() {
  // @@protoc_insertion_point(field_release:notifications.proto.NotificationData.Button.text)
  if (!has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationData_Button::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:notifications.proto.NotificationData.Button.text)
}

// optional .notifications.proto.ActionButtonType button_type = 2;
inline bool NotificationData_Button::has_button_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NotificationData_Button::clear_button_type() {
  button_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::notifications::proto::ActionButtonType NotificationData_Button::button_type() const {
  // @@protoc_insertion_point(field_get:notifications.proto.NotificationData.Button.button_type)
  return static_cast< ::notifications::proto::ActionButtonType >(button_type_);
}
inline void NotificationData_Button::set_button_type(::notifications::proto::ActionButtonType value) {
  assert(::notifications::proto::ActionButtonType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  button_type_ = value;
  // @@protoc_insertion_point(field_set:notifications.proto.NotificationData.Button.button_type)
}

// optional string id = 3;
inline bool NotificationData_Button::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotificationData_Button::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NotificationData_Button::id() const {
  // @@protoc_insertion_point(field_get:notifications.proto.NotificationData.Button.id)
  return id_.GetNoArena();
}
inline void NotificationData_Button::set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:notifications.proto.NotificationData.Button.id)
}
inline void NotificationData_Button::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:notifications.proto.NotificationData.Button.id)
}
inline void NotificationData_Button::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:notifications.proto.NotificationData.Button.id)
}
inline void NotificationData_Button::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:notifications.proto.NotificationData.Button.id)
}
inline std::string* NotificationData_Button::mutable_id() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:notifications.proto.NotificationData.Button.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationData_Button::release_id() {
  // @@protoc_insertion_point(field_release:notifications.proto.NotificationData.Button.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationData_Button::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:notifications.proto.NotificationData.Button.id)
}

// -------------------------------------------------------------------

// NotificationData_IconUuidBundle

// optional .notifications.proto.IconType type = 1;
inline bool NotificationData_IconUuidBundle::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotificationData_IconUuidBundle::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::notifications::proto::IconType NotificationData_IconUuidBundle::type() const {
  // @@protoc_insertion_point(field_get:notifications.proto.NotificationData.IconUuidBundle.type)
  return static_cast< ::notifications::proto::IconType >(type_);
}
inline void NotificationData_IconUuidBundle::set_type(::notifications::proto::IconType value) {
  assert(::notifications::proto::IconType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
  // @@protoc_insertion_point(field_set:notifications.proto.NotificationData.IconUuidBundle.type)
}

// optional string uuid = 2;
inline bool NotificationData_IconUuidBundle::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotificationData_IconUuidBundle::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NotificationData_IconUuidBundle::uuid() const {
  // @@protoc_insertion_point(field_get:notifications.proto.NotificationData.IconUuidBundle.uuid)
  return uuid_.GetNoArena();
}
inline void NotificationData_IconUuidBundle::set_uuid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:notifications.proto.NotificationData.IconUuidBundle.uuid)
}
inline void NotificationData_IconUuidBundle::set_uuid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:notifications.proto.NotificationData.IconUuidBundle.uuid)
}
inline void NotificationData_IconUuidBundle::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:notifications.proto.NotificationData.IconUuidBundle.uuid)
}
inline void NotificationData_IconUuidBundle::set_uuid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:notifications.proto.NotificationData.IconUuidBundle.uuid)
}
inline std::string* NotificationData_IconUuidBundle::mutable_uuid() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:notifications.proto.NotificationData.IconUuidBundle.uuid)
  return uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationData_IconUuidBundle::release_uuid() {
  // @@protoc_insertion_point(field_release:notifications.proto.NotificationData.IconUuidBundle.uuid)
  if (!has_uuid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return uuid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationData_IconUuidBundle::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:notifications.proto.NotificationData.IconUuidBundle.uuid)
}

// -------------------------------------------------------------------

// NotificationData

// optional string title = 1;
inline bool NotificationData::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotificationData::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NotificationData::title() const {
  // @@protoc_insertion_point(field_get:notifications.proto.NotificationData.title)
  return title_.GetNoArena();
}
inline void NotificationData::set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:notifications.proto.NotificationData.title)
}
inline void NotificationData::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:notifications.proto.NotificationData.title)
}
inline void NotificationData::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:notifications.proto.NotificationData.title)
}
inline void NotificationData::set_title(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:notifications.proto.NotificationData.title)
}
inline std::string* NotificationData::mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:notifications.proto.NotificationData.title)
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationData::release_title() {
  // @@protoc_insertion_point(field_release:notifications.proto.NotificationData.title)
  if (!has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return title_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationData::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:notifications.proto.NotificationData.title)
}

// optional string message = 2;
inline bool NotificationData::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotificationData::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NotificationData::message() const {
  // @@protoc_insertion_point(field_get:notifications.proto.NotificationData.message)
  return message_.GetNoArena();
}
inline void NotificationData::set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:notifications.proto.NotificationData.message)
}
inline void NotificationData::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:notifications.proto.NotificationData.message)
}
inline void NotificationData::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:notifications.proto.NotificationData.message)
}
inline void NotificationData::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:notifications.proto.NotificationData.message)
}
inline std::string* NotificationData::mutable_message() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:notifications.proto.NotificationData.message)
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationData::release_message() {
  // @@protoc_insertion_point(field_release:notifications.proto.NotificationData.message)
  if (!has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationData::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:notifications.proto.NotificationData.message)
}

// repeated .notifications.proto.CustomData custom_data = 3;
inline int NotificationData::custom_data_size() const {
  return custom_data_.size();
}
inline void NotificationData::clear_custom_data() {
  custom_data_.Clear();
}
inline ::notifications::proto::CustomData* NotificationData::mutable_custom_data(int index) {
  // @@protoc_insertion_point(field_mutable:notifications.proto.NotificationData.custom_data)
  return custom_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::CustomData >*
NotificationData::mutable_custom_data() {
  // @@protoc_insertion_point(field_mutable_list:notifications.proto.NotificationData.custom_data)
  return &custom_data_;
}
inline const ::notifications::proto::CustomData& NotificationData::custom_data(int index) const {
  // @@protoc_insertion_point(field_get:notifications.proto.NotificationData.custom_data)
  return custom_data_.Get(index);
}
inline ::notifications::proto::CustomData* NotificationData::add_custom_data() {
  // @@protoc_insertion_point(field_add:notifications.proto.NotificationData.custom_data)
  return custom_data_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::CustomData >&
NotificationData::custom_data() const {
  // @@protoc_insertion_point(field_list:notifications.proto.NotificationData.custom_data)
  return custom_data_;
}

// repeated .notifications.proto.NotificationData.Button buttons = 4;
inline int NotificationData::buttons_size() const {
  return buttons_.size();
}
inline void NotificationData::clear_buttons() {
  buttons_.Clear();
}
inline ::notifications::proto::NotificationData_Button* NotificationData::mutable_buttons(int index) {
  // @@protoc_insertion_point(field_mutable:notifications.proto.NotificationData.buttons)
  return buttons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::NotificationData_Button >*
NotificationData::mutable_buttons() {
  // @@protoc_insertion_point(field_mutable_list:notifications.proto.NotificationData.buttons)
  return &buttons_;
}
inline const ::notifications::proto::NotificationData_Button& NotificationData::buttons(int index) const {
  // @@protoc_insertion_point(field_get:notifications.proto.NotificationData.buttons)
  return buttons_.Get(index);
}
inline ::notifications::proto::NotificationData_Button* NotificationData::add_buttons() {
  // @@protoc_insertion_point(field_add:notifications.proto.NotificationData.buttons)
  return buttons_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::NotificationData_Button >&
NotificationData::buttons() const {
  // @@protoc_insertion_point(field_list:notifications.proto.NotificationData.buttons)
  return buttons_;
}

// repeated .notifications.proto.NotificationData.IconUuidBundle icons_uuid = 5;
inline int NotificationData::icons_uuid_size() const {
  return icons_uuid_.size();
}
inline void NotificationData::clear_icons_uuid() {
  icons_uuid_.Clear();
}
inline ::notifications::proto::NotificationData_IconUuidBundle* NotificationData::mutable_icons_uuid(int index) {
  // @@protoc_insertion_point(field_mutable:notifications.proto.NotificationData.icons_uuid)
  return icons_uuid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::NotificationData_IconUuidBundle >*
NotificationData::mutable_icons_uuid() {
  // @@protoc_insertion_point(field_mutable_list:notifications.proto.NotificationData.icons_uuid)
  return &icons_uuid_;
}
inline const ::notifications::proto::NotificationData_IconUuidBundle& NotificationData::icons_uuid(int index) const {
  // @@protoc_insertion_point(field_get:notifications.proto.NotificationData.icons_uuid)
  return icons_uuid_.Get(index);
}
inline ::notifications::proto::NotificationData_IconUuidBundle* NotificationData::add_icons_uuid() {
  // @@protoc_insertion_point(field_add:notifications.proto.NotificationData.icons_uuid)
  return icons_uuid_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::NotificationData_IconUuidBundle >&
NotificationData::icons_uuid() const {
  // @@protoc_insertion_point(field_list:notifications.proto.NotificationData.icons_uuid)
  return icons_uuid_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace notifications

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::notifications::proto::ActionButtonType> : ::std::true_type {};
template <> struct is_proto_enum< ::notifications::proto::IconType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_notification_5fdata_2eproto

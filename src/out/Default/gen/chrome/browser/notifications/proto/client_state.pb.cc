// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_state.proto

#include "client_state.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_impression_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Impression_impression_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_client_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SuppressionInfo_client_5fstate_2eproto;
namespace notifications {
namespace proto {
class SuppressionInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SuppressionInfo> _instance;
} _SuppressionInfo_default_instance_;
class ClientStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientState> _instance;
} _ClientState_default_instance_;
}  // namespace proto
}  // namespace notifications
static void InitDefaultsscc_info_ClientState_client_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::notifications::proto::_ClientState_default_instance_;
    new (ptr) ::notifications::proto::ClientState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::notifications::proto::ClientState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ClientState_client_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ClientState_client_5fstate_2eproto}, {
      &scc_info_Impression_impression_2eproto.base,
      &scc_info_SuppressionInfo_client_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_SuppressionInfo_client_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::notifications::proto::_SuppressionInfo_default_instance_;
    new (ptr) ::notifications::proto::SuppressionInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::notifications::proto::SuppressionInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SuppressionInfo_client_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SuppressionInfo_client_5fstate_2eproto}, {}};

namespace notifications {
namespace proto {
bool SchedulerClientType_IsValid(int value) {
  switch (value) {
    case -3:
    case -2:
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SchedulerClientType_strings[7] = {};

static const char SchedulerClientType_names[] =
  "CHROME_UPDATE"
  "PREFETCH"
  "TEST_1"
  "TEST_2"
  "TEST_3"
  "UNKNOWN"
  "WEBUI";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SchedulerClientType_entries[] = {
  { {SchedulerClientType_names + 0, 13}, 2 },
  { {SchedulerClientType_names + 13, 8}, 3 },
  { {SchedulerClientType_names + 21, 6}, -1 },
  { {SchedulerClientType_names + 27, 6}, -2 },
  { {SchedulerClientType_names + 33, 6}, -3 },
  { {SchedulerClientType_names + 39, 7}, 0 },
  { {SchedulerClientType_names + 46, 5}, 1 },
};

static const int SchedulerClientType_entries_by_number[] = {
  4, // -3 -> TEST_3
  3, // -2 -> TEST_2
  2, // -1 -> TEST_1
  5, // 0 -> UNKNOWN
  6, // 1 -> WEBUI
  0, // 2 -> CHROME_UPDATE
  1, // 3 -> PREFETCH
};

const std::string& SchedulerClientType_Name(
    SchedulerClientType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SchedulerClientType_entries,
          SchedulerClientType_entries_by_number,
          7, SchedulerClientType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SchedulerClientType_entries,
      SchedulerClientType_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SchedulerClientType_strings[idx].get();
}
bool SchedulerClientType_Parse(
    const std::string& name, SchedulerClientType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SchedulerClientType_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<SchedulerClientType>(int_value);
  }
  return success;
}

// ===================================================================

void SuppressionInfo::InitAsDefaultInstance() {
}
class SuppressionInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SuppressionInfo>()._has_bits_);
  static void set_has_last_trigger_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_recover_goal(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SuppressionInfo::SuppressionInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:notifications.proto.SuppressionInfo)
}
SuppressionInfo::SuppressionInfo(const SuppressionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&last_trigger_time_, &from.last_trigger_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&recover_goal_) -
    reinterpret_cast<char*>(&last_trigger_time_)) + sizeof(recover_goal_));
  // @@protoc_insertion_point(copy_constructor:notifications.proto.SuppressionInfo)
}

void SuppressionInfo::SharedCtor() {
  ::memset(&last_trigger_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recover_goal_) -
      reinterpret_cast<char*>(&last_trigger_time_)) + sizeof(recover_goal_));
}

SuppressionInfo::~SuppressionInfo() {
  // @@protoc_insertion_point(destructor:notifications.proto.SuppressionInfo)
  SharedDtor();
}

void SuppressionInfo::SharedDtor() {
}

void SuppressionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SuppressionInfo& SuppressionInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SuppressionInfo_client_5fstate_2eproto.base);
  return *internal_default_instance();
}


void SuppressionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:notifications.proto.SuppressionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&last_trigger_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&recover_goal_) -
        reinterpret_cast<char*>(&last_trigger_time_)) + sizeof(recover_goal_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SuppressionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 last_trigger_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_last_trigger_time(&has_bits);
          last_trigger_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 duration_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 recover_goal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_recover_goal(&has_bits);
          recover_goal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SuppressionInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:notifications.proto.SuppressionInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 last_trigger_time = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_last_trigger_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_trigger_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 duration_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_duration_ms(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 recover_goal = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_recover_goal(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &recover_goal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:notifications.proto.SuppressionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:notifications.proto.SuppressionInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SuppressionInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:notifications.proto.SuppressionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 last_trigger_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->last_trigger_time(), output);
  }

  // optional int64 duration_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->duration_ms(), output);
  }

  // optional int32 recover_goal = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->recover_goal(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:notifications.proto.SuppressionInfo)
}

size_t SuppressionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:notifications.proto.SuppressionInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 last_trigger_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_trigger_time());
    }

    // optional int64 duration_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->duration_ms());
    }

    // optional int32 recover_goal = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->recover_goal());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SuppressionInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SuppressionInfo*>(
      &from));
}

void SuppressionInfo::MergeFrom(const SuppressionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:notifications.proto.SuppressionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      last_trigger_time_ = from.last_trigger_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ms_ = from.duration_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      recover_goal_ = from.recover_goal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SuppressionInfo::CopyFrom(const SuppressionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:notifications.proto.SuppressionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuppressionInfo::IsInitialized() const {
  return true;
}

void SuppressionInfo::InternalSwap(SuppressionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(last_trigger_time_, other->last_trigger_time_);
  swap(duration_ms_, other->duration_ms_);
  swap(recover_goal_, other->recover_goal_);
}

std::string SuppressionInfo::GetTypeName() const {
  return "notifications.proto.SuppressionInfo";
}


// ===================================================================

void ClientState::InitAsDefaultInstance() {
  ::notifications::proto::_ClientState_default_instance_._instance.get_mutable()->suppression_info_ = const_cast< ::notifications::proto::SuppressionInfo*>(
      ::notifications::proto::SuppressionInfo::internal_default_instance());
}
class ClientState::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientState>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_current_max_daily_show(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::notifications::proto::SuppressionInfo& suppression_info(const ClientState* msg);
  static void set_has_suppression_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_negative_events_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_negative_event_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_last_shown_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::notifications::proto::SuppressionInfo&
ClientState::_Internal::suppression_info(const ClientState* msg) {
  return *msg->suppression_info_;
}
void ClientState::clear_impressions() {
  impressions_.Clear();
}
ClientState::ClientState()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:notifications.proto.ClientState)
}
ClientState::ClientState(const ClientState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      impressions_(from.impressions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_suppression_info()) {
    suppression_info_ = new ::notifications::proto::SuppressionInfo(*from.suppression_info_);
  } else {
    suppression_info_ = nullptr;
  }
  ::memcpy(&current_max_daily_show_, &from.current_max_daily_show_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&current_max_daily_show_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:notifications.proto.ClientState)
}

void ClientState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientState_client_5fstate_2eproto.base);
  ::memset(&suppression_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_shown_ts_) -
      reinterpret_cast<char*>(&suppression_info_)) + sizeof(last_shown_ts_));
  type_ = -1;
}

ClientState::~ClientState() {
  // @@protoc_insertion_point(destructor:notifications.proto.ClientState)
  SharedDtor();
}

void ClientState::SharedDtor() {
  if (this != internal_default_instance()) delete suppression_info_;
}

void ClientState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientState& ClientState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientState_client_5fstate_2eproto.base);
  return *internal_default_instance();
}


void ClientState::Clear() {
// @@protoc_insertion_point(message_clear_start:notifications.proto.ClientState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  impressions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(suppression_info_ != nullptr);
    suppression_info_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&current_max_daily_show_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_shown_ts_) -
        reinterpret_cast<char*>(&current_max_daily_show_)) + sizeof(last_shown_ts_));
    type_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .notifications.proto.SchedulerClientType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::notifications::proto::SchedulerClientType_IsValid(val))) {
            set_type(static_cast<::notifications::proto::SchedulerClientType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 current_max_daily_show = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_current_max_daily_show(&has_bits);
          current_max_daily_show_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .notifications.proto.Impression impressions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_impressions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // optional .notifications.proto.SuppressionInfo suppression_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_suppression_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 negative_events_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_negative_events_count(&has_bits);
          negative_events_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_negative_event_ts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_last_negative_event_ts(&has_bits);
          last_negative_event_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_shown_ts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_last_shown_ts(&has_bits);
          last_shown_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:notifications.proto.ClientState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .notifications.proto.SchedulerClientType type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::notifications::proto::SchedulerClientType_IsValid(value)) {
            set_type(static_cast< ::notifications::proto::SchedulerClientType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 current_max_daily_show = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_current_max_daily_show(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_max_daily_show_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .notifications.proto.Impression impressions = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_impressions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .notifications.proto.SuppressionInfo suppression_info = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_suppression_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 negative_events_count = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_negative_events_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &negative_events_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_negative_event_ts = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_last_negative_event_ts(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_negative_event_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_shown_ts = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_last_shown_ts(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_shown_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:notifications.proto.ClientState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:notifications.proto.ClientState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:notifications.proto.ClientState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .notifications.proto.SchedulerClientType type = 1;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 current_max_daily_show = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->current_max_daily_show(), output);
  }

  // repeated .notifications.proto.Impression impressions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->impressions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->impressions(static_cast<int>(i)),
      output);
  }

  // optional .notifications.proto.SuppressionInfo suppression_info = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::suppression_info(this), output);
  }

  // optional int32 negative_events_count = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->negative_events_count(), output);
  }

  // optional int64 last_negative_event_ts = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->last_negative_event_ts(), output);
  }

  // optional int64 last_shown_ts = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->last_shown_ts(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:notifications.proto.ClientState)
}

size_t ClientState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:notifications.proto.ClientState)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .notifications.proto.Impression impressions = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->impressions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->impressions(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .notifications.proto.SuppressionInfo suppression_info = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *suppression_info_);
    }

    // optional int32 current_max_daily_show = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->current_max_daily_show());
    }

    // optional int32 negative_events_count = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->negative_events_count());
    }

    // optional int64 last_negative_event_ts = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_negative_event_ts());
    }

    // optional int64 last_shown_ts = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_shown_ts());
    }

    // optional .notifications.proto.SchedulerClientType type = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ClientState*>(
      &from));
}

void ClientState::MergeFrom(const ClientState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:notifications.proto.ClientState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  impressions_.MergeFrom(from.impressions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_suppression_info()->::notifications::proto::SuppressionInfo::MergeFrom(from.suppression_info());
    }
    if (cached_has_bits & 0x00000002u) {
      current_max_daily_show_ = from.current_max_daily_show_;
    }
    if (cached_has_bits & 0x00000004u) {
      negative_events_count_ = from.negative_events_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_negative_event_ts_ = from.last_negative_event_ts_;
    }
    if (cached_has_bits & 0x00000010u) {
      last_shown_ts_ = from.last_shown_ts_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClientState::CopyFrom(const ClientState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:notifications.proto.ClientState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientState::IsInitialized() const {
  return true;
}

void ClientState::InternalSwap(ClientState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&impressions_)->InternalSwap(CastToBase(&other->impressions_));
  swap(suppression_info_, other->suppression_info_);
  swap(current_max_daily_show_, other->current_max_daily_show_);
  swap(negative_events_count_, other->negative_events_count_);
  swap(last_negative_event_ts_, other->last_negative_event_ts_);
  swap(last_shown_ts_, other->last_shown_ts_);
  swap(type_, other->type_);
}

std::string ClientState::GetTypeName() const {
  return "notifications.proto.ClientState";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace notifications
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::notifications::proto::SuppressionInfo* Arena::CreateMaybeMessage< ::notifications::proto::SuppressionInfo >(Arena* arena) {
  return Arena::CreateInternal< ::notifications::proto::SuppressionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::notifications::proto::ClientState* Arena::CreateMaybeMessage< ::notifications::proto::ClientState >(Arena* arena) {
  return Arena::CreateInternal< ::notifications::proto::ClientState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

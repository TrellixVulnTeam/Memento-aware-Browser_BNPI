// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notification_entry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_notification_5fentry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_notification_5fentry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "client_state.pb.h"
#include "impression.pb.h"
#include "notification_data.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_notification_5fentry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_notification_5fentry_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace notifications {
namespace proto {
class NotificationEntry;
class NotificationEntryDefaultTypeInternal;
extern NotificationEntryDefaultTypeInternal _NotificationEntry_default_instance_;
class ScheduleParams;
class ScheduleParamsDefaultTypeInternal;
extern ScheduleParamsDefaultTypeInternal _ScheduleParams_default_instance_;
}  // namespace proto
}  // namespace notifications
PROTOBUF_NAMESPACE_OPEN
template<> ::notifications::proto::NotificationEntry* Arena::CreateMaybeMessage<::notifications::proto::NotificationEntry>(Arena*);
template<> ::notifications::proto::ScheduleParams* Arena::CreateMaybeMessage<::notifications::proto::ScheduleParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace notifications {
namespace proto {

enum ScheduleParams_Priority : int {
  ScheduleParams_Priority_LOW = 0,
  ScheduleParams_Priority_NO_THROTTLE = 1
};
bool ScheduleParams_Priority_IsValid(int value);
constexpr ScheduleParams_Priority ScheduleParams_Priority_Priority_MIN = ScheduleParams_Priority_LOW;
constexpr ScheduleParams_Priority ScheduleParams_Priority_Priority_MAX = ScheduleParams_Priority_NO_THROTTLE;
constexpr int ScheduleParams_Priority_Priority_ARRAYSIZE = ScheduleParams_Priority_Priority_MAX + 1;

const std::string& ScheduleParams_Priority_Name(ScheduleParams_Priority value);
template<typename T>
inline const std::string& ScheduleParams_Priority_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ScheduleParams_Priority>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ScheduleParams_Priority_Name.");
  return ScheduleParams_Priority_Name(static_cast<ScheduleParams_Priority>(enum_t_value));
}
bool ScheduleParams_Priority_Parse(
    const std::string& name, ScheduleParams_Priority* value);
// ===================================================================

class ScheduleParams :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:notifications.proto.ScheduleParams) */ {
 public:
  ScheduleParams();
  virtual ~ScheduleParams();

  ScheduleParams(const ScheduleParams& from);
  ScheduleParams(ScheduleParams&& from) noexcept
    : ScheduleParams() {
    *this = ::std::move(from);
  }

  inline ScheduleParams& operator=(const ScheduleParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScheduleParams& operator=(ScheduleParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ScheduleParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScheduleParams* internal_default_instance() {
    return reinterpret_cast<const ScheduleParams*>(
               &_ScheduleParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ScheduleParams& a, ScheduleParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ScheduleParams* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScheduleParams* New() const final {
    return CreateMaybeMessage<ScheduleParams>(nullptr);
  }

  ScheduleParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScheduleParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ScheduleParams& from);
  void MergeFrom(const ScheduleParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ScheduleParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "notifications.proto.ScheduleParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ScheduleParams_Priority Priority;
  static constexpr Priority LOW =
    ScheduleParams_Priority_LOW;
  static constexpr Priority NO_THROTTLE =
    ScheduleParams_Priority_NO_THROTTLE;
  static inline bool Priority_IsValid(int value) {
    return ScheduleParams_Priority_IsValid(value);
  }
  static constexpr Priority Priority_MIN =
    ScheduleParams_Priority_Priority_MIN;
  static constexpr Priority Priority_MAX =
    ScheduleParams_Priority_Priority_MAX;
  static constexpr int Priority_ARRAYSIZE =
    ScheduleParams_Priority_Priority_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Priority_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Priority>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Priority_Name.");
    return ScheduleParams_Priority_Name(enum_t_value);
  }
  static inline bool Priority_Parse(const std::string& name,
      Priority* value) {
    return ScheduleParams_Priority_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kImpressionMappingFieldNumber = 2,
    kDeliverTimeStartFieldNumber = 3,
    kDeliverTimeEndFieldNumber = 4,
    kIgnoreTimeoutDurationFieldNumber = 5,
    kPriorityFieldNumber = 1,
  };
  // repeated .notifications.proto.Impression.ImpressionMapping impression_mapping = 2;
  int impression_mapping_size() const;
  void clear_impression_mapping();
  ::notifications::proto::Impression_ImpressionMapping* mutable_impression_mapping(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::Impression_ImpressionMapping >*
      mutable_impression_mapping();
  const ::notifications::proto::Impression_ImpressionMapping& impression_mapping(int index) const;
  ::notifications::proto::Impression_ImpressionMapping* add_impression_mapping();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::Impression_ImpressionMapping >&
      impression_mapping() const;

  // optional int64 deliver_time_start = 3;
  bool has_deliver_time_start() const;
  void clear_deliver_time_start();
  ::PROTOBUF_NAMESPACE_ID::int64 deliver_time_start() const;
  void set_deliver_time_start(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 deliver_time_end = 4;
  bool has_deliver_time_end() const;
  void clear_deliver_time_end();
  ::PROTOBUF_NAMESPACE_ID::int64 deliver_time_end() const;
  void set_deliver_time_end(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 ignore_timeout_duration = 5;
  bool has_ignore_timeout_duration() const;
  void clear_ignore_timeout_duration();
  ::PROTOBUF_NAMESPACE_ID::int64 ignore_timeout_duration() const;
  void set_ignore_timeout_duration(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .notifications.proto.ScheduleParams.Priority priority = 1;
  bool has_priority() const;
  void clear_priority();
  ::notifications::proto::ScheduleParams_Priority priority() const;
  void set_priority(::notifications::proto::ScheduleParams_Priority value);

  // @@protoc_insertion_point(class_scope:notifications.proto.ScheduleParams)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::Impression_ImpressionMapping > impression_mapping_;
  ::PROTOBUF_NAMESPACE_ID::int64 deliver_time_start_;
  ::PROTOBUF_NAMESPACE_ID::int64 deliver_time_end_;
  ::PROTOBUF_NAMESPACE_ID::int64 ignore_timeout_duration_;
  int priority_;
  friend struct ::TableStruct_notification_5fentry_2eproto;
};
// -------------------------------------------------------------------

class NotificationEntry :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:notifications.proto.NotificationEntry) */ {
 public:
  NotificationEntry();
  virtual ~NotificationEntry();

  NotificationEntry(const NotificationEntry& from);
  NotificationEntry(NotificationEntry&& from) noexcept
    : NotificationEntry() {
    *this = ::std::move(from);
  }

  inline NotificationEntry& operator=(const NotificationEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationEntry& operator=(NotificationEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const NotificationEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotificationEntry* internal_default_instance() {
    return reinterpret_cast<const NotificationEntry*>(
               &_NotificationEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NotificationEntry& a, NotificationEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotificationEntry* New() const final {
    return CreateMaybeMessage<NotificationEntry>(nullptr);
  }

  NotificationEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotificationEntry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NotificationEntry& from);
  void MergeFrom(const NotificationEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NotificationEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "notifications.proto.NotificationEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuidFieldNumber = 2,
    kNotificationDataFieldNumber = 4,
    kScheduleParamsFieldNumber = 5,
    kCreateTimeFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // optional string guid = 2;
  bool has_guid() const;
  void clear_guid();
  const std::string& guid() const;
  void set_guid(const std::string& value);
  void set_guid(std::string&& value);
  void set_guid(const char* value);
  void set_guid(const char* value, size_t size);
  std::string* mutable_guid();
  std::string* release_guid();
  void set_allocated_guid(std::string* guid);

  // optional .notifications.proto.NotificationData notification_data = 4;
  bool has_notification_data() const;
  void clear_notification_data();
  const ::notifications::proto::NotificationData& notification_data() const;
  ::notifications::proto::NotificationData* release_notification_data();
  ::notifications::proto::NotificationData* mutable_notification_data();
  void set_allocated_notification_data(::notifications::proto::NotificationData* notification_data);

  // optional .notifications.proto.ScheduleParams schedule_params = 5;
  bool has_schedule_params() const;
  void clear_schedule_params();
  const ::notifications::proto::ScheduleParams& schedule_params() const;
  ::notifications::proto::ScheduleParams* release_schedule_params();
  ::notifications::proto::ScheduleParams* mutable_schedule_params();
  void set_allocated_schedule_params(::notifications::proto::ScheduleParams* schedule_params);

  // optional int64 create_time = 3;
  bool has_create_time() const;
  void clear_create_time();
  ::PROTOBUF_NAMESPACE_ID::int64 create_time() const;
  void set_create_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .notifications.proto.SchedulerClientType type = 1;
  bool has_type() const;
  void clear_type();
  ::notifications::proto::SchedulerClientType type() const;
  void set_type(::notifications::proto::SchedulerClientType value);

  // @@protoc_insertion_point(class_scope:notifications.proto.NotificationEntry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guid_;
  ::notifications::proto::NotificationData* notification_data_;
  ::notifications::proto::ScheduleParams* schedule_params_;
  ::PROTOBUF_NAMESPACE_ID::int64 create_time_;
  int type_;
  friend struct ::TableStruct_notification_5fentry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ScheduleParams

// optional .notifications.proto.ScheduleParams.Priority priority = 1;
inline bool ScheduleParams::has_priority() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScheduleParams::clear_priority() {
  priority_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::notifications::proto::ScheduleParams_Priority ScheduleParams::priority() const {
  // @@protoc_insertion_point(field_get:notifications.proto.ScheduleParams.priority)
  return static_cast< ::notifications::proto::ScheduleParams_Priority >(priority_);
}
inline void ScheduleParams::set_priority(::notifications::proto::ScheduleParams_Priority value) {
  assert(::notifications::proto::ScheduleParams_Priority_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  priority_ = value;
  // @@protoc_insertion_point(field_set:notifications.proto.ScheduleParams.priority)
}

// repeated .notifications.proto.Impression.ImpressionMapping impression_mapping = 2;
inline int ScheduleParams::impression_mapping_size() const {
  return impression_mapping_.size();
}
inline ::notifications::proto::Impression_ImpressionMapping* ScheduleParams::mutable_impression_mapping(int index) {
  // @@protoc_insertion_point(field_mutable:notifications.proto.ScheduleParams.impression_mapping)
  return impression_mapping_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::Impression_ImpressionMapping >*
ScheduleParams::mutable_impression_mapping() {
  // @@protoc_insertion_point(field_mutable_list:notifications.proto.ScheduleParams.impression_mapping)
  return &impression_mapping_;
}
inline const ::notifications::proto::Impression_ImpressionMapping& ScheduleParams::impression_mapping(int index) const {
  // @@protoc_insertion_point(field_get:notifications.proto.ScheduleParams.impression_mapping)
  return impression_mapping_.Get(index);
}
inline ::notifications::proto::Impression_ImpressionMapping* ScheduleParams::add_impression_mapping() {
  // @@protoc_insertion_point(field_add:notifications.proto.ScheduleParams.impression_mapping)
  return impression_mapping_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::Impression_ImpressionMapping >&
ScheduleParams::impression_mapping() const {
  // @@protoc_insertion_point(field_list:notifications.proto.ScheduleParams.impression_mapping)
  return impression_mapping_;
}

// optional int64 deliver_time_start = 3;
inline bool ScheduleParams::has_deliver_time_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScheduleParams::clear_deliver_time_start() {
  deliver_time_start_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ScheduleParams::deliver_time_start() const {
  // @@protoc_insertion_point(field_get:notifications.proto.ScheduleParams.deliver_time_start)
  return deliver_time_start_;
}
inline void ScheduleParams::set_deliver_time_start(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  deliver_time_start_ = value;
  // @@protoc_insertion_point(field_set:notifications.proto.ScheduleParams.deliver_time_start)
}

// optional int64 deliver_time_end = 4;
inline bool ScheduleParams::has_deliver_time_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScheduleParams::clear_deliver_time_end() {
  deliver_time_end_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ScheduleParams::deliver_time_end() const {
  // @@protoc_insertion_point(field_get:notifications.proto.ScheduleParams.deliver_time_end)
  return deliver_time_end_;
}
inline void ScheduleParams::set_deliver_time_end(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  deliver_time_end_ = value;
  // @@protoc_insertion_point(field_set:notifications.proto.ScheduleParams.deliver_time_end)
}

// optional int64 ignore_timeout_duration = 5;
inline bool ScheduleParams::has_ignore_timeout_duration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScheduleParams::clear_ignore_timeout_duration() {
  ignore_timeout_duration_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ScheduleParams::ignore_timeout_duration() const {
  // @@protoc_insertion_point(field_get:notifications.proto.ScheduleParams.ignore_timeout_duration)
  return ignore_timeout_duration_;
}
inline void ScheduleParams::set_ignore_timeout_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  ignore_timeout_duration_ = value;
  // @@protoc_insertion_point(field_set:notifications.proto.ScheduleParams.ignore_timeout_duration)
}

// -------------------------------------------------------------------

// NotificationEntry

// optional .notifications.proto.SchedulerClientType type = 1;
inline bool NotificationEntry::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NotificationEntry::clear_type() {
  type_ = -1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::notifications::proto::SchedulerClientType NotificationEntry::type() const {
  // @@protoc_insertion_point(field_get:notifications.proto.NotificationEntry.type)
  return static_cast< ::notifications::proto::SchedulerClientType >(type_);
}
inline void NotificationEntry::set_type(::notifications::proto::SchedulerClientType value) {
  assert(::notifications::proto::SchedulerClientType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
  // @@protoc_insertion_point(field_set:notifications.proto.NotificationEntry.type)
}

// optional string guid = 2;
inline bool NotificationEntry::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotificationEntry::clear_guid() {
  guid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NotificationEntry::guid() const {
  // @@protoc_insertion_point(field_get:notifications.proto.NotificationEntry.guid)
  return guid_.GetNoArena();
}
inline void NotificationEntry::set_guid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:notifications.proto.NotificationEntry.guid)
}
inline void NotificationEntry::set_guid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  guid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:notifications.proto.NotificationEntry.guid)
}
inline void NotificationEntry::set_guid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:notifications.proto.NotificationEntry.guid)
}
inline void NotificationEntry::set_guid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:notifications.proto.NotificationEntry.guid)
}
inline std::string* NotificationEntry::mutable_guid() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:notifications.proto.NotificationEntry.guid)
  return guid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotificationEntry::release_guid() {
  // @@protoc_insertion_point(field_release:notifications.proto.NotificationEntry.guid)
  if (!has_guid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return guid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotificationEntry::set_allocated_guid(std::string* guid) {
  if (guid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  guid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guid);
  // @@protoc_insertion_point(field_set_allocated:notifications.proto.NotificationEntry.guid)
}

// optional int64 create_time = 3;
inline bool NotificationEntry::has_create_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NotificationEntry::clear_create_time() {
  create_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NotificationEntry::create_time() const {
  // @@protoc_insertion_point(field_get:notifications.proto.NotificationEntry.create_time)
  return create_time_;
}
inline void NotificationEntry::set_create_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  create_time_ = value;
  // @@protoc_insertion_point(field_set:notifications.proto.NotificationEntry.create_time)
}

// optional .notifications.proto.NotificationData notification_data = 4;
inline bool NotificationEntry::has_notification_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::notifications::proto::NotificationData& NotificationEntry::notification_data() const {
  const ::notifications::proto::NotificationData* p = notification_data_;
  // @@protoc_insertion_point(field_get:notifications.proto.NotificationEntry.notification_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::notifications::proto::NotificationData*>(
      &::notifications::proto::_NotificationData_default_instance_);
}
inline ::notifications::proto::NotificationData* NotificationEntry::release_notification_data() {
  // @@protoc_insertion_point(field_release:notifications.proto.NotificationEntry.notification_data)
  _has_bits_[0] &= ~0x00000002u;
  ::notifications::proto::NotificationData* temp = notification_data_;
  notification_data_ = nullptr;
  return temp;
}
inline ::notifications::proto::NotificationData* NotificationEntry::mutable_notification_data() {
  _has_bits_[0] |= 0x00000002u;
  if (notification_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::notifications::proto::NotificationData>(GetArenaNoVirtual());
    notification_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:notifications.proto.NotificationEntry.notification_data)
  return notification_data_;
}
inline void NotificationEntry::set_allocated_notification_data(::notifications::proto::NotificationData* notification_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(notification_data_);
  }
  if (notification_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      notification_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notification_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  notification_data_ = notification_data;
  // @@protoc_insertion_point(field_set_allocated:notifications.proto.NotificationEntry.notification_data)
}

// optional .notifications.proto.ScheduleParams schedule_params = 5;
inline bool NotificationEntry::has_schedule_params() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NotificationEntry::clear_schedule_params() {
  if (schedule_params_ != nullptr) schedule_params_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::notifications::proto::ScheduleParams& NotificationEntry::schedule_params() const {
  const ::notifications::proto::ScheduleParams* p = schedule_params_;
  // @@protoc_insertion_point(field_get:notifications.proto.NotificationEntry.schedule_params)
  return p != nullptr ? *p : *reinterpret_cast<const ::notifications::proto::ScheduleParams*>(
      &::notifications::proto::_ScheduleParams_default_instance_);
}
inline ::notifications::proto::ScheduleParams* NotificationEntry::release_schedule_params() {
  // @@protoc_insertion_point(field_release:notifications.proto.NotificationEntry.schedule_params)
  _has_bits_[0] &= ~0x00000004u;
  ::notifications::proto::ScheduleParams* temp = schedule_params_;
  schedule_params_ = nullptr;
  return temp;
}
inline ::notifications::proto::ScheduleParams* NotificationEntry::mutable_schedule_params() {
  _has_bits_[0] |= 0x00000004u;
  if (schedule_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::notifications::proto::ScheduleParams>(GetArenaNoVirtual());
    schedule_params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:notifications.proto.NotificationEntry.schedule_params)
  return schedule_params_;
}
inline void NotificationEntry::set_allocated_schedule_params(::notifications::proto::ScheduleParams* schedule_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete schedule_params_;
  }
  if (schedule_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      schedule_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schedule_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  schedule_params_ = schedule_params;
  // @@protoc_insertion_point(field_set_allocated:notifications.proto.NotificationEntry.schedule_params)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace notifications

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::notifications::proto::ScheduleParams_Priority> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_notification_5fentry_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notification_entry.proto

#include "notification_entry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_impression_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Impression_ImpressionMapping_impression_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_notification_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_NotificationData_notification_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_notification_5fentry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScheduleParams_notification_5fentry_2eproto;
namespace notifications {
namespace proto {
class ScheduleParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScheduleParams> _instance;
} _ScheduleParams_default_instance_;
class NotificationEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NotificationEntry> _instance;
} _NotificationEntry_default_instance_;
}  // namespace proto
}  // namespace notifications
static void InitDefaultsscc_info_NotificationEntry_notification_5fentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::notifications::proto::_NotificationEntry_default_instance_;
    new (ptr) ::notifications::proto::NotificationEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::notifications::proto::NotificationEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NotificationEntry_notification_5fentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_NotificationEntry_notification_5fentry_2eproto}, {
      &scc_info_NotificationData_notification_5fdata_2eproto.base,
      &scc_info_ScheduleParams_notification_5fentry_2eproto.base,}};

static void InitDefaultsscc_info_ScheduleParams_notification_5fentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::notifications::proto::_ScheduleParams_default_instance_;
    new (ptr) ::notifications::proto::ScheduleParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::notifications::proto::ScheduleParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ScheduleParams_notification_5fentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ScheduleParams_notification_5fentry_2eproto}, {
      &scc_info_Impression_ImpressionMapping_impression_2eproto.base,}};

namespace notifications {
namespace proto {
bool ScheduleParams_Priority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ScheduleParams_Priority_strings[2] = {};

static const char ScheduleParams_Priority_names[] =
  "LOW"
  "NO_THROTTLE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ScheduleParams_Priority_entries[] = {
  { {ScheduleParams_Priority_names + 0, 3}, 0 },
  { {ScheduleParams_Priority_names + 3, 11}, 1 },
};

static const int ScheduleParams_Priority_entries_by_number[] = {
  0, // 0 -> LOW
  1, // 1 -> NO_THROTTLE
};

const std::string& ScheduleParams_Priority_Name(
    ScheduleParams_Priority value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ScheduleParams_Priority_entries,
          ScheduleParams_Priority_entries_by_number,
          2, ScheduleParams_Priority_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ScheduleParams_Priority_entries,
      ScheduleParams_Priority_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ScheduleParams_Priority_strings[idx].get();
}
bool ScheduleParams_Priority_Parse(
    const std::string& name, ScheduleParams_Priority* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ScheduleParams_Priority_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<ScheduleParams_Priority>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ScheduleParams_Priority ScheduleParams::LOW;
constexpr ScheduleParams_Priority ScheduleParams::NO_THROTTLE;
constexpr ScheduleParams_Priority ScheduleParams::Priority_MIN;
constexpr ScheduleParams_Priority ScheduleParams::Priority_MAX;
constexpr int ScheduleParams::Priority_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ScheduleParams::InitAsDefaultInstance() {
}
class ScheduleParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ScheduleParams>()._has_bits_);
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_deliver_time_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_deliver_time_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ignore_timeout_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

void ScheduleParams::clear_impression_mapping() {
  impression_mapping_.Clear();
}
ScheduleParams::ScheduleParams()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:notifications.proto.ScheduleParams)
}
ScheduleParams::ScheduleParams(const ScheduleParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      impression_mapping_(from.impression_mapping_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&deliver_time_start_, &from.deliver_time_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&deliver_time_start_)) + sizeof(priority_));
  // @@protoc_insertion_point(copy_constructor:notifications.proto.ScheduleParams)
}

void ScheduleParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScheduleParams_notification_5fentry_2eproto.base);
  ::memset(&deliver_time_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&deliver_time_start_)) + sizeof(priority_));
}

ScheduleParams::~ScheduleParams() {
  // @@protoc_insertion_point(destructor:notifications.proto.ScheduleParams)
  SharedDtor();
}

void ScheduleParams::SharedDtor() {
}

void ScheduleParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScheduleParams& ScheduleParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScheduleParams_notification_5fentry_2eproto.base);
  return *internal_default_instance();
}


void ScheduleParams::Clear() {
// @@protoc_insertion_point(message_clear_start:notifications.proto.ScheduleParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  impression_mapping_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&deliver_time_start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&priority_) -
        reinterpret_cast<char*>(&deliver_time_start_)) + sizeof(priority_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ScheduleParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .notifications.proto.ScheduleParams.Priority priority = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::notifications::proto::ScheduleParams_Priority_IsValid(val))) {
            set_priority(static_cast<::notifications::proto::ScheduleParams_Priority>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .notifications.proto.Impression.ImpressionMapping impression_mapping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_impression_mapping(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional int64 deliver_time_start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_deliver_time_start(&has_bits);
          deliver_time_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 deliver_time_end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_deliver_time_end(&has_bits);
          deliver_time_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 ignore_timeout_duration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ignore_timeout_duration(&has_bits);
          ignore_timeout_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ScheduleParams::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:notifications.proto.ScheduleParams)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .notifications.proto.ScheduleParams.Priority priority = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::notifications::proto::ScheduleParams_Priority_IsValid(value)) {
            set_priority(static_cast< ::notifications::proto::ScheduleParams_Priority >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .notifications.proto.Impression.ImpressionMapping impression_mapping = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_impression_mapping()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 deliver_time_start = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_deliver_time_start(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &deliver_time_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 deliver_time_end = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_deliver_time_end(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &deliver_time_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 ignore_timeout_duration = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_ignore_timeout_duration(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &ignore_timeout_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:notifications.proto.ScheduleParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:notifications.proto.ScheduleParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ScheduleParams::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:notifications.proto.ScheduleParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .notifications.proto.ScheduleParams.Priority priority = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->priority(), output);
  }

  // repeated .notifications.proto.Impression.ImpressionMapping impression_mapping = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->impression_mapping_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->impression_mapping(static_cast<int>(i)),
      output);
  }

  // optional int64 deliver_time_start = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->deliver_time_start(), output);
  }

  // optional int64 deliver_time_end = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->deliver_time_end(), output);
  }

  // optional int64 ignore_timeout_duration = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->ignore_timeout_duration(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:notifications.proto.ScheduleParams)
}

size_t ScheduleParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:notifications.proto.ScheduleParams)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .notifications.proto.Impression.ImpressionMapping impression_mapping = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->impression_mapping_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->impression_mapping(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 deliver_time_start = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->deliver_time_start());
    }

    // optional int64 deliver_time_end = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->deliver_time_end());
    }

    // optional int64 ignore_timeout_duration = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->ignore_timeout_duration());
    }

    // optional .notifications.proto.ScheduleParams.Priority priority = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->priority());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScheduleParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ScheduleParams*>(
      &from));
}

void ScheduleParams::MergeFrom(const ScheduleParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:notifications.proto.ScheduleParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  impression_mapping_.MergeFrom(from.impression_mapping_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      deliver_time_start_ = from.deliver_time_start_;
    }
    if (cached_has_bits & 0x00000002u) {
      deliver_time_end_ = from.deliver_time_end_;
    }
    if (cached_has_bits & 0x00000004u) {
      ignore_timeout_duration_ = from.ignore_timeout_duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      priority_ = from.priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScheduleParams::CopyFrom(const ScheduleParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:notifications.proto.ScheduleParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScheduleParams::IsInitialized() const {
  return true;
}

void ScheduleParams::InternalSwap(ScheduleParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&impression_mapping_)->InternalSwap(CastToBase(&other->impression_mapping_));
  swap(deliver_time_start_, other->deliver_time_start_);
  swap(deliver_time_end_, other->deliver_time_end_);
  swap(ignore_timeout_duration_, other->ignore_timeout_duration_);
  swap(priority_, other->priority_);
}

std::string ScheduleParams::GetTypeName() const {
  return "notifications.proto.ScheduleParams";
}


// ===================================================================

void NotificationEntry::InitAsDefaultInstance() {
  ::notifications::proto::_NotificationEntry_default_instance_._instance.get_mutable()->notification_data_ = const_cast< ::notifications::proto::NotificationData*>(
      ::notifications::proto::NotificationData::internal_default_instance());
  ::notifications::proto::_NotificationEntry_default_instance_._instance.get_mutable()->schedule_params_ = const_cast< ::notifications::proto::ScheduleParams*>(
      ::notifications::proto::ScheduleParams::internal_default_instance());
}
class NotificationEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<NotificationEntry>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_create_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::notifications::proto::NotificationData& notification_data(const NotificationEntry* msg);
  static void set_has_notification_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::notifications::proto::ScheduleParams& schedule_params(const NotificationEntry* msg);
  static void set_has_schedule_params(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::notifications::proto::NotificationData&
NotificationEntry::_Internal::notification_data(const NotificationEntry* msg) {
  return *msg->notification_data_;
}
const ::notifications::proto::ScheduleParams&
NotificationEntry::_Internal::schedule_params(const NotificationEntry* msg) {
  return *msg->schedule_params_;
}
void NotificationEntry::clear_notification_data() {
  if (notification_data_ != nullptr) notification_data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
NotificationEntry::NotificationEntry()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:notifications.proto.NotificationEntry)
}
NotificationEntry::NotificationEntry(const NotificationEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_guid()) {
    guid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guid_);
  }
  if (from.has_notification_data()) {
    notification_data_ = new ::notifications::proto::NotificationData(*from.notification_data_);
  } else {
    notification_data_ = nullptr;
  }
  if (from.has_schedule_params()) {
    schedule_params_ = new ::notifications::proto::ScheduleParams(*from.schedule_params_);
  } else {
    schedule_params_ = nullptr;
  }
  ::memcpy(&create_time_, &from.create_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&create_time_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:notifications.proto.NotificationEntry)
}

void NotificationEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NotificationEntry_notification_5fentry_2eproto.base);
  guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&notification_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&create_time_) -
      reinterpret_cast<char*>(&notification_data_)) + sizeof(create_time_));
  type_ = -1;
}

NotificationEntry::~NotificationEntry() {
  // @@protoc_insertion_point(destructor:notifications.proto.NotificationEntry)
  SharedDtor();
}

void NotificationEntry::SharedDtor() {
  guid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete notification_data_;
  if (this != internal_default_instance()) delete schedule_params_;
}

void NotificationEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NotificationEntry& NotificationEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NotificationEntry_notification_5fentry_2eproto.base);
  return *internal_default_instance();
}


void NotificationEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:notifications.proto.NotificationEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      guid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(notification_data_ != nullptr);
      notification_data_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(schedule_params_ != nullptr);
      schedule_params_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    create_time_ = PROTOBUF_LONGLONG(0);
    type_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NotificationEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .notifications.proto.SchedulerClientType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::notifications::proto::SchedulerClientType_IsValid(val))) {
            set_type(static_cast<::notifications::proto::SchedulerClientType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string guid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_guid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 create_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_create_time(&has_bits);
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .notifications.proto.NotificationData notification_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_notification_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .notifications.proto.ScheduleParams schedule_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_schedule_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NotificationEntry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:notifications.proto.NotificationEntry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .notifications.proto.SchedulerClientType type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::notifications::proto::SchedulerClientType_IsValid(value)) {
            set_type(static_cast< ::notifications::proto::SchedulerClientType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string guid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 create_time = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_create_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .notifications.proto.NotificationData notification_data = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_notification_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .notifications.proto.ScheduleParams schedule_params = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_schedule_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:notifications.proto.NotificationEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:notifications.proto.NotificationEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NotificationEntry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:notifications.proto.NotificationEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .notifications.proto.SchedulerClientType type = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string guid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->guid(), output);
  }

  // optional int64 create_time = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->create_time(), output);
  }

  // optional .notifications.proto.NotificationData notification_data = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::notification_data(this), output);
  }

  // optional .notifications.proto.ScheduleParams schedule_params = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::schedule_params(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:notifications.proto.NotificationEntry)
}

size_t NotificationEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:notifications.proto.NotificationEntry)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string guid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional .notifications.proto.NotificationData notification_data = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *notification_data_);
    }

    // optional .notifications.proto.ScheduleParams schedule_params = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *schedule_params_);
    }

    // optional int64 create_time = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->create_time());
    }

    // optional .notifications.proto.SchedulerClientType type = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotificationEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NotificationEntry*>(
      &from));
}

void NotificationEntry::MergeFrom(const NotificationEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:notifications.proto.NotificationEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      guid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_notification_data()->::notifications::proto::NotificationData::MergeFrom(from.notification_data());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_schedule_params()->::notifications::proto::ScheduleParams::MergeFrom(from.schedule_params());
    }
    if (cached_has_bits & 0x00000008u) {
      create_time_ = from.create_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NotificationEntry::CopyFrom(const NotificationEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:notifications.proto.NotificationEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationEntry::IsInitialized() const {
  return true;
}

void NotificationEntry::InternalSwap(NotificationEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  guid_.Swap(&other->guid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(notification_data_, other->notification_data_);
  swap(schedule_params_, other->schedule_params_);
  swap(create_time_, other->create_time_);
  swap(type_, other->type_);
}

std::string NotificationEntry::GetTypeName() const {
  return "notifications.proto.NotificationEntry";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace notifications
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::notifications::proto::ScheduleParams* Arena::CreateMaybeMessage< ::notifications::proto::ScheduleParams >(Arena* arena) {
  return Arena::CreateInternal< ::notifications::proto::ScheduleParams >(arena);
}
template<> PROTOBUF_NOINLINE ::notifications::proto::NotificationEntry* Arena::CreateMaybeMessage< ::notifications::proto::NotificationEntry >(Arena* arena) {
  return Arena::CreateInternal< ::notifications::proto::NotificationEntry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crowd_deny.proto

#include "crowd_deny.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_crowd_5fdeny_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SiteReputation_crowd_5fdeny_2eproto;
namespace chrome_browser_crowd_deny {
class SiteReputationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SiteReputation> _instance;
} _SiteReputation_default_instance_;
class PreloadDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PreloadData> _instance;
} _PreloadData_default_instance_;
}  // namespace chrome_browser_crowd_deny
static void InitDefaultsscc_info_PreloadData_crowd_5fdeny_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chrome_browser_crowd_deny::_PreloadData_default_instance_;
    new (ptr) ::chrome_browser_crowd_deny::PreloadData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chrome_browser_crowd_deny::PreloadData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PreloadData_crowd_5fdeny_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PreloadData_crowd_5fdeny_2eproto}, {
      &scc_info_SiteReputation_crowd_5fdeny_2eproto.base,}};

static void InitDefaultsscc_info_SiteReputation_crowd_5fdeny_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chrome_browser_crowd_deny::_SiteReputation_default_instance_;
    new (ptr) ::chrome_browser_crowd_deny::SiteReputation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chrome_browser_crowd_deny::SiteReputation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SiteReputation_crowd_5fdeny_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SiteReputation_crowd_5fdeny_2eproto}, {}};

namespace chrome_browser_crowd_deny {
bool SiteReputation_NotificationUserExperienceQuality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SiteReputation_NotificationUserExperienceQuality_strings[4] = {};

static const char SiteReputation_NotificationUserExperienceQuality_names[] =
  "ABUSIVE_PROMPTS"
  "ACCEPTABLE"
  "UNKNOWN"
  "UNSOLICITED_PROMPTS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SiteReputation_NotificationUserExperienceQuality_entries[] = {
  { {SiteReputation_NotificationUserExperienceQuality_names + 0, 15}, 3 },
  { {SiteReputation_NotificationUserExperienceQuality_names + 15, 10}, 1 },
  { {SiteReputation_NotificationUserExperienceQuality_names + 25, 7}, 0 },
  { {SiteReputation_NotificationUserExperienceQuality_names + 32, 19}, 2 },
};

static const int SiteReputation_NotificationUserExperienceQuality_entries_by_number[] = {
  2, // 0 -> UNKNOWN
  1, // 1 -> ACCEPTABLE
  3, // 2 -> UNSOLICITED_PROMPTS
  0, // 3 -> ABUSIVE_PROMPTS
};

const std::string& SiteReputation_NotificationUserExperienceQuality_Name(
    SiteReputation_NotificationUserExperienceQuality value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SiteReputation_NotificationUserExperienceQuality_entries,
          SiteReputation_NotificationUserExperienceQuality_entries_by_number,
          4, SiteReputation_NotificationUserExperienceQuality_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SiteReputation_NotificationUserExperienceQuality_entries,
      SiteReputation_NotificationUserExperienceQuality_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SiteReputation_NotificationUserExperienceQuality_strings[idx].get();
}
bool SiteReputation_NotificationUserExperienceQuality_Parse(
    const std::string& name, SiteReputation_NotificationUserExperienceQuality* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SiteReputation_NotificationUserExperienceQuality_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<SiteReputation_NotificationUserExperienceQuality>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SiteReputation_NotificationUserExperienceQuality SiteReputation::UNKNOWN;
constexpr SiteReputation_NotificationUserExperienceQuality SiteReputation::ACCEPTABLE;
constexpr SiteReputation_NotificationUserExperienceQuality SiteReputation::UNSOLICITED_PROMPTS;
constexpr SiteReputation_NotificationUserExperienceQuality SiteReputation::ABUSIVE_PROMPTS;
constexpr SiteReputation_NotificationUserExperienceQuality SiteReputation::NotificationUserExperienceQuality_MIN;
constexpr SiteReputation_NotificationUserExperienceQuality SiteReputation::NotificationUserExperienceQuality_MAX;
constexpr int SiteReputation::NotificationUserExperienceQuality_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SiteReputation::InitAsDefaultInstance() {
}
class SiteReputation::_Internal {
 public:
  using HasBits = decltype(std::declval<SiteReputation>()._has_bits_);
  static void set_has_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_notification_ux_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_include_subdomains(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_warning_only(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SiteReputation::SiteReputation()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_crowd_deny.SiteReputation)
}
SiteReputation::SiteReputation(const SiteReputation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_domain()) {
    domain_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  ::memcpy(&notification_ux_quality_, &from.notification_ux_quality_,
    static_cast<size_t>(reinterpret_cast<char*>(&warning_only_) -
    reinterpret_cast<char*>(&notification_ux_quality_)) + sizeof(warning_only_));
  // @@protoc_insertion_point(copy_constructor:chrome_browser_crowd_deny.SiteReputation)
}

void SiteReputation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SiteReputation_crowd_5fdeny_2eproto.base);
  domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&notification_ux_quality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&warning_only_) -
      reinterpret_cast<char*>(&notification_ux_quality_)) + sizeof(warning_only_));
}

SiteReputation::~SiteReputation() {
  // @@protoc_insertion_point(destructor:chrome_browser_crowd_deny.SiteReputation)
  SharedDtor();
}

void SiteReputation::SharedDtor() {
  domain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SiteReputation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiteReputation& SiteReputation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SiteReputation_crowd_5fdeny_2eproto.base);
  return *internal_default_instance();
}


void SiteReputation::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_crowd_deny.SiteReputation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    domain_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&notification_ux_quality_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&warning_only_) -
        reinterpret_cast<char*>(&notification_ux_quality_)) + sizeof(warning_only_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SiteReputation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string domain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_domain(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .chrome_browser_crowd_deny.SiteReputation.NotificationUserExperienceQuality notification_ux_quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::chrome_browser_crowd_deny::SiteReputation_NotificationUserExperienceQuality_IsValid(val))) {
            set_notification_ux_quality(static_cast<::chrome_browser_crowd_deny::SiteReputation_NotificationUserExperienceQuality>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool include_subdomains = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_include_subdomains(&has_bits);
          include_subdomains_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool warning_only = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_warning_only(&has_bits);
          warning_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SiteReputation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_crowd_deny.SiteReputation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string domain = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chrome_browser_crowd_deny.SiteReputation.NotificationUserExperienceQuality notification_ux_quality = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::chrome_browser_crowd_deny::SiteReputation_NotificationUserExperienceQuality_IsValid(value)) {
            set_notification_ux_quality(static_cast< ::chrome_browser_crowd_deny::SiteReputation_NotificationUserExperienceQuality >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_subdomains = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_include_subdomains(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_subdomains_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool warning_only = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_warning_only(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &warning_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_crowd_deny.SiteReputation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_crowd_deny.SiteReputation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SiteReputation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_crowd_deny.SiteReputation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string domain = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->domain(), output);
  }

  // optional .chrome_browser_crowd_deny.SiteReputation.NotificationUserExperienceQuality notification_ux_quality = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->notification_ux_quality(), output);
  }

  // optional bool include_subdomains = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->include_subdomains(), output);
  }

  // optional bool warning_only = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->warning_only(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_crowd_deny.SiteReputation)
}

size_t SiteReputation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_crowd_deny.SiteReputation)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string domain = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // optional .chrome_browser_crowd_deny.SiteReputation.NotificationUserExperienceQuality notification_ux_quality = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->notification_ux_quality());
    }

    // optional bool include_subdomains = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool warning_only = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteReputation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SiteReputation*>(
      &from));
}

void SiteReputation::MergeFrom(const SiteReputation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_crowd_deny.SiteReputation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      domain_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.domain_);
    }
    if (cached_has_bits & 0x00000002u) {
      notification_ux_quality_ = from.notification_ux_quality_;
    }
    if (cached_has_bits & 0x00000004u) {
      include_subdomains_ = from.include_subdomains_;
    }
    if (cached_has_bits & 0x00000008u) {
      warning_only_ = from.warning_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SiteReputation::CopyFrom(const SiteReputation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_crowd_deny.SiteReputation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteReputation::IsInitialized() const {
  return true;
}

void SiteReputation::InternalSwap(SiteReputation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  domain_.Swap(&other->domain_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(notification_ux_quality_, other->notification_ux_quality_);
  swap(include_subdomains_, other->include_subdomains_);
  swap(warning_only_, other->warning_only_);
}

std::string SiteReputation::GetTypeName() const {
  return "chrome_browser_crowd_deny.SiteReputation";
}


// ===================================================================

void PreloadData::InitAsDefaultInstance() {
}
class PreloadData::_Internal {
 public:
  using HasBits = decltype(std::declval<PreloadData>()._has_bits_);
};

PreloadData::PreloadData()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_crowd_deny.PreloadData)
}
PreloadData::PreloadData(const PreloadData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      site_reputations_(from.site_reputations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chrome_browser_crowd_deny.PreloadData)
}

void PreloadData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PreloadData_crowd_5fdeny_2eproto.base);
}

PreloadData::~PreloadData() {
  // @@protoc_insertion_point(destructor:chrome_browser_crowd_deny.PreloadData)
  SharedDtor();
}

void PreloadData::SharedDtor() {
}

void PreloadData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PreloadData& PreloadData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PreloadData_crowd_5fdeny_2eproto.base);
  return *internal_default_instance();
}


void PreloadData::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_crowd_deny.PreloadData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  site_reputations_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PreloadData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .chrome_browser_crowd_deny.SiteReputation site_reputations = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_site_reputations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PreloadData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_crowd_deny.PreloadData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .chrome_browser_crowd_deny.SiteReputation site_reputations = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_site_reputations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_crowd_deny.PreloadData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_crowd_deny.PreloadData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PreloadData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_crowd_deny.PreloadData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chrome_browser_crowd_deny.SiteReputation site_reputations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->site_reputations_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->site_reputations(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_crowd_deny.PreloadData)
}

size_t PreloadData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_crowd_deny.PreloadData)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .chrome_browser_crowd_deny.SiteReputation site_reputations = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->site_reputations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->site_reputations(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PreloadData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PreloadData*>(
      &from));
}

void PreloadData::MergeFrom(const PreloadData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_crowd_deny.PreloadData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  site_reputations_.MergeFrom(from.site_reputations_);
}

void PreloadData::CopyFrom(const PreloadData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_crowd_deny.PreloadData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreloadData::IsInitialized() const {
  return true;
}

void PreloadData::InternalSwap(PreloadData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&site_reputations_)->InternalSwap(CastToBase(&other->site_reputations_));
}

std::string PreloadData::GetTypeName() const {
  return "chrome_browser_crowd_deny.PreloadData";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chrome_browser_crowd_deny
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::chrome_browser_crowd_deny::SiteReputation* Arena::CreateMaybeMessage< ::chrome_browser_crowd_deny::SiteReputation >(Arena* arena) {
  return Arena::CreateInternal< ::chrome_browser_crowd_deny::SiteReputation >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_crowd_deny::PreloadData* Arena::CreateMaybeMessage< ::chrome_browser_crowd_deny::PreloadData >(Arena* arena) {
  return Arena::CreateInternal< ::chrome_browser_crowd_deny::PreloadData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

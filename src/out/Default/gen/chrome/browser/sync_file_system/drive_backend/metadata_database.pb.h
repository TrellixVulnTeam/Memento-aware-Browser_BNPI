// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metadata_database.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_metadata_5fdatabase_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_metadata_5fdatabase_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_metadata_5fdatabase_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_metadata_5fdatabase_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace sync_file_system {
namespace drive_backend {
class FileDetails;
class FileDetailsDefaultTypeInternal;
extern FileDetailsDefaultTypeInternal _FileDetails_default_instance_;
class FileMetadata;
class FileMetadataDefaultTypeInternal;
extern FileMetadataDefaultTypeInternal _FileMetadata_default_instance_;
class FileTracker;
class FileTrackerDefaultTypeInternal;
extern FileTrackerDefaultTypeInternal _FileTracker_default_instance_;
class ServiceMetadata;
class ServiceMetadataDefaultTypeInternal;
extern ServiceMetadataDefaultTypeInternal _ServiceMetadata_default_instance_;
}  // namespace drive_backend
}  // namespace sync_file_system
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_file_system::drive_backend::FileDetails* Arena::CreateMaybeMessage<::sync_file_system::drive_backend::FileDetails>(Arena*);
template<> ::sync_file_system::drive_backend::FileMetadata* Arena::CreateMaybeMessage<::sync_file_system::drive_backend::FileMetadata>(Arena*);
template<> ::sync_file_system::drive_backend::FileTracker* Arena::CreateMaybeMessage<::sync_file_system::drive_backend::FileTracker>(Arena*);
template<> ::sync_file_system::drive_backend::ServiceMetadata* Arena::CreateMaybeMessage<::sync_file_system::drive_backend::ServiceMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_file_system {
namespace drive_backend {

enum FileKind : int {
  FILE_KIND_UNSUPPORTED = 0,
  FILE_KIND_FILE = 1,
  FILE_KIND_FOLDER = 2
};
bool FileKind_IsValid(int value);
constexpr FileKind FileKind_MIN = FILE_KIND_UNSUPPORTED;
constexpr FileKind FileKind_MAX = FILE_KIND_FOLDER;
constexpr int FileKind_ARRAYSIZE = FileKind_MAX + 1;

const std::string& FileKind_Name(FileKind value);
template<typename T>
inline const std::string& FileKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FileKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FileKind_Name.");
  return FileKind_Name(static_cast<FileKind>(enum_t_value));
}
bool FileKind_Parse(
    const std::string& name, FileKind* value);
enum TrackerKind : int {
  TRACKER_KIND_REGULAR = 0,
  TRACKER_KIND_APP_ROOT = 1,
  TRACKER_KIND_DISABLED_APP_ROOT = 2
};
bool TrackerKind_IsValid(int value);
constexpr TrackerKind TrackerKind_MIN = TRACKER_KIND_REGULAR;
constexpr TrackerKind TrackerKind_MAX = TRACKER_KIND_DISABLED_APP_ROOT;
constexpr int TrackerKind_ARRAYSIZE = TrackerKind_MAX + 1;

const std::string& TrackerKind_Name(TrackerKind value);
template<typename T>
inline const std::string& TrackerKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrackerKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrackerKind_Name.");
  return TrackerKind_Name(static_cast<TrackerKind>(enum_t_value));
}
bool TrackerKind_Parse(
    const std::string& name, TrackerKind* value);
// ===================================================================

class ServiceMetadata :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_file_system.drive_backend.ServiceMetadata) */ {
 public:
  ServiceMetadata();
  virtual ~ServiceMetadata();

  ServiceMetadata(const ServiceMetadata& from);
  ServiceMetadata(ServiceMetadata&& from) noexcept
    : ServiceMetadata() {
    *this = ::std::move(from);
  }

  inline ServiceMetadata& operator=(const ServiceMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceMetadata& operator=(ServiceMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ServiceMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceMetadata* internal_default_instance() {
    return reinterpret_cast<const ServiceMetadata*>(
               &_ServiceMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServiceMetadata& a, ServiceMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceMetadata* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceMetadata* New() const final {
    return CreateMaybeMessage<ServiceMetadata>(nullptr);
  }

  ServiceMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServiceMetadata& from);
  void MergeFrom(const ServiceMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_file_system.drive_backend.ServiceMetadata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLargestChangeIdFieldNumber = 1,
    kSyncRootTrackerIdFieldNumber = 2,
    kNextTrackerIdFieldNumber = 3,
    kSyncRootRevalidatedFieldNumber = 4,
  };
  // optional int64 largest_change_id = 1;
  bool has_largest_change_id() const;
  void clear_largest_change_id();
  ::PROTOBUF_NAMESPACE_ID::int64 largest_change_id() const;
  void set_largest_change_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 sync_root_tracker_id = 2;
  bool has_sync_root_tracker_id() const;
  void clear_sync_root_tracker_id();
  ::PROTOBUF_NAMESPACE_ID::int64 sync_root_tracker_id() const;
  void set_sync_root_tracker_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 next_tracker_id = 3;
  bool has_next_tracker_id() const;
  void clear_next_tracker_id();
  ::PROTOBUF_NAMESPACE_ID::int64 next_tracker_id() const;
  void set_next_tracker_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional bool sync_root_revalidated = 4;
  bool has_sync_root_revalidated() const;
  void clear_sync_root_revalidated();
  bool sync_root_revalidated() const;
  void set_sync_root_revalidated(bool value);

  // @@protoc_insertion_point(class_scope:sync_file_system.drive_backend.ServiceMetadata)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 largest_change_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 sync_root_tracker_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 next_tracker_id_;
  bool sync_root_revalidated_;
  friend struct ::TableStruct_metadata_5fdatabase_2eproto;
};
// -------------------------------------------------------------------

class FileDetails :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_file_system.drive_backend.FileDetails) */ {
 public:
  FileDetails();
  virtual ~FileDetails();

  FileDetails(const FileDetails& from);
  FileDetails(FileDetails&& from) noexcept
    : FileDetails() {
    *this = ::std::move(from);
  }

  inline FileDetails& operator=(const FileDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileDetails& operator=(FileDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FileDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileDetails* internal_default_instance() {
    return reinterpret_cast<const FileDetails*>(
               &_FileDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FileDetails& a, FileDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(FileDetails* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileDetails* New() const final {
    return CreateMaybeMessage<FileDetails>(nullptr);
  }

  FileDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileDetails>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FileDetails& from);
  void MergeFrom(const FileDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_file_system.drive_backend.FileDetails";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFolderIdsFieldNumber = 1,
    kTitleFieldNumber = 2,
    kMd5FieldNumber = 4,
    kEtagFieldNumber = 5,
    kFileKindFieldNumber = 3,
    kMissingFieldNumber = 8,
    kCreationTimeFieldNumber = 6,
    kModificationTimeFieldNumber = 7,
    kChangeIdFieldNumber = 9,
  };
  // repeated string parent_folder_ids = 1;
  int parent_folder_ids_size() const;
  void clear_parent_folder_ids();
  const std::string& parent_folder_ids(int index) const;
  std::string* mutable_parent_folder_ids(int index);
  void set_parent_folder_ids(int index, const std::string& value);
  void set_parent_folder_ids(int index, std::string&& value);
  void set_parent_folder_ids(int index, const char* value);
  void set_parent_folder_ids(int index, const char* value, size_t size);
  std::string* add_parent_folder_ids();
  void add_parent_folder_ids(const std::string& value);
  void add_parent_folder_ids(std::string&& value);
  void add_parent_folder_ids(const char* value);
  void add_parent_folder_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& parent_folder_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_parent_folder_ids();

  // optional string title = 2;
  bool has_title() const;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);

  // optional string md5 = 4;
  bool has_md5() const;
  void clear_md5();
  const std::string& md5() const;
  void set_md5(const std::string& value);
  void set_md5(std::string&& value);
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  std::string* mutable_md5();
  std::string* release_md5();
  void set_allocated_md5(std::string* md5);

  // optional string etag = 5;
  bool has_etag() const;
  void clear_etag();
  const std::string& etag() const;
  void set_etag(const std::string& value);
  void set_etag(std::string&& value);
  void set_etag(const char* value);
  void set_etag(const char* value, size_t size);
  std::string* mutable_etag();
  std::string* release_etag();
  void set_allocated_etag(std::string* etag);

  // optional .sync_file_system.drive_backend.FileKind file_kind = 3;
  bool has_file_kind() const;
  void clear_file_kind();
  ::sync_file_system::drive_backend::FileKind file_kind() const;
  void set_file_kind(::sync_file_system::drive_backend::FileKind value);

  // optional bool missing = 8;
  bool has_missing() const;
  void clear_missing();
  bool missing() const;
  void set_missing(bool value);

  // optional int64 creation_time = 6;
  bool has_creation_time() const;
  void clear_creation_time();
  ::PROTOBUF_NAMESPACE_ID::int64 creation_time() const;
  void set_creation_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 modification_time = 7;
  bool has_modification_time() const;
  void clear_modification_time();
  ::PROTOBUF_NAMESPACE_ID::int64 modification_time() const;
  void set_modification_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 change_id = 9;
  bool has_change_id() const;
  void clear_change_id();
  ::PROTOBUF_NAMESPACE_ID::int64 change_id() const;
  void set_change_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:sync_file_system.drive_backend.FileDetails)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> parent_folder_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr etag_;
  int file_kind_;
  bool missing_;
  ::PROTOBUF_NAMESPACE_ID::int64 creation_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 modification_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 change_id_;
  friend struct ::TableStruct_metadata_5fdatabase_2eproto;
};
// -------------------------------------------------------------------

class FileMetadata :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_file_system.drive_backend.FileMetadata) */ {
 public:
  FileMetadata();
  virtual ~FileMetadata();

  FileMetadata(const FileMetadata& from);
  FileMetadata(FileMetadata&& from) noexcept
    : FileMetadata() {
    *this = ::std::move(from);
  }

  inline FileMetadata& operator=(const FileMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileMetadata& operator=(FileMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FileMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileMetadata* internal_default_instance() {
    return reinterpret_cast<const FileMetadata*>(
               &_FileMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FileMetadata& a, FileMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(FileMetadata* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileMetadata* New() const final {
    return CreateMaybeMessage<FileMetadata>(nullptr);
  }

  FileMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FileMetadata& from);
  void MergeFrom(const FileMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_file_system.drive_backend.FileMetadata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileIdFieldNumber = 1,
    kDetailsFieldNumber = 2,
  };
  // required string file_id = 1;
  bool has_file_id() const;
  void clear_file_id();
  const std::string& file_id() const;
  void set_file_id(const std::string& value);
  void set_file_id(std::string&& value);
  void set_file_id(const char* value);
  void set_file_id(const char* value, size_t size);
  std::string* mutable_file_id();
  std::string* release_file_id();
  void set_allocated_file_id(std::string* file_id);

  // optional .sync_file_system.drive_backend.FileDetails details = 2;
  bool has_details() const;
  void clear_details();
  const ::sync_file_system::drive_backend::FileDetails& details() const;
  ::sync_file_system::drive_backend::FileDetails* release_details();
  ::sync_file_system::drive_backend::FileDetails* mutable_details();
  void set_allocated_details(::sync_file_system::drive_backend::FileDetails* details);

  // @@protoc_insertion_point(class_scope:sync_file_system.drive_backend.FileMetadata)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_id_;
  ::sync_file_system::drive_backend::FileDetails* details_;
  friend struct ::TableStruct_metadata_5fdatabase_2eproto;
};
// -------------------------------------------------------------------

class FileTracker :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_file_system.drive_backend.FileTracker) */ {
 public:
  FileTracker();
  virtual ~FileTracker();

  FileTracker(const FileTracker& from);
  FileTracker(FileTracker&& from) noexcept
    : FileTracker() {
    *this = ::std::move(from);
  }

  inline FileTracker& operator=(const FileTracker& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileTracker& operator=(FileTracker&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FileTracker& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileTracker* internal_default_instance() {
    return reinterpret_cast<const FileTracker*>(
               &_FileTracker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FileTracker& a, FileTracker& b) {
    a.Swap(&b);
  }
  inline void Swap(FileTracker* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileTracker* New() const final {
    return CreateMaybeMessage<FileTracker>(nullptr);
  }

  FileTracker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileTracker>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FileTracker& from);
  void MergeFrom(const FileTracker& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileTracker* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_file_system.drive_backend.FileTracker";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileIdFieldNumber = 3,
    kAppIdFieldNumber = 4,
    kSyncedDetailsFieldNumber = 6,
    kTrackerIdFieldNumber = 1,
    kParentTrackerIdFieldNumber = 2,
    kTrackerKindFieldNumber = 5,
    kDirtyFieldNumber = 7,
    kActiveFieldNumber = 8,
    kNeedsFolderListingFieldNumber = 9,
  };
  // required string file_id = 3;
  bool has_file_id() const;
  void clear_file_id();
  const std::string& file_id() const;
  void set_file_id(const std::string& value);
  void set_file_id(std::string&& value);
  void set_file_id(const char* value);
  void set_file_id(const char* value, size_t size);
  std::string* mutable_file_id();
  std::string* release_file_id();
  void set_allocated_file_id(std::string* file_id);

  // optional string app_id = 4;
  bool has_app_id() const;
  void clear_app_id();
  const std::string& app_id() const;
  void set_app_id(const std::string& value);
  void set_app_id(std::string&& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  std::string* mutable_app_id();
  std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);

  // optional .sync_file_system.drive_backend.FileDetails synced_details = 6;
  bool has_synced_details() const;
  void clear_synced_details();
  const ::sync_file_system::drive_backend::FileDetails& synced_details() const;
  ::sync_file_system::drive_backend::FileDetails* release_synced_details();
  ::sync_file_system::drive_backend::FileDetails* mutable_synced_details();
  void set_allocated_synced_details(::sync_file_system::drive_backend::FileDetails* synced_details);

  // required int64 tracker_id = 1;
  bool has_tracker_id() const;
  void clear_tracker_id();
  ::PROTOBUF_NAMESPACE_ID::int64 tracker_id() const;
  void set_tracker_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int64 parent_tracker_id = 2;
  bool has_parent_tracker_id() const;
  void clear_parent_tracker_id();
  ::PROTOBUF_NAMESPACE_ID::int64 parent_tracker_id() const;
  void set_parent_tracker_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .sync_file_system.drive_backend.TrackerKind tracker_kind = 5;
  bool has_tracker_kind() const;
  void clear_tracker_kind();
  ::sync_file_system::drive_backend::TrackerKind tracker_kind() const;
  void set_tracker_kind(::sync_file_system::drive_backend::TrackerKind value);

  // optional bool dirty = 7;
  bool has_dirty() const;
  void clear_dirty();
  bool dirty() const;
  void set_dirty(bool value);

  // optional bool active = 8;
  bool has_active() const;
  void clear_active();
  bool active() const;
  void set_active(bool value);

  // optional bool needs_folder_listing = 9;
  bool has_needs_folder_listing() const;
  void clear_needs_folder_listing();
  bool needs_folder_listing() const;
  void set_needs_folder_listing(bool value);

  // @@protoc_insertion_point(class_scope:sync_file_system.drive_backend.FileTracker)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::sync_file_system::drive_backend::FileDetails* synced_details_;
  ::PROTOBUF_NAMESPACE_ID::int64 tracker_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 parent_tracker_id_;
  int tracker_kind_;
  bool dirty_;
  bool active_;
  bool needs_folder_listing_;
  friend struct ::TableStruct_metadata_5fdatabase_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServiceMetadata

// optional int64 largest_change_id = 1;
inline bool ServiceMetadata::has_largest_change_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServiceMetadata::clear_largest_change_id() {
  largest_change_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceMetadata::largest_change_id() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.ServiceMetadata.largest_change_id)
  return largest_change_id_;
}
inline void ServiceMetadata::set_largest_change_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  largest_change_id_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.ServiceMetadata.largest_change_id)
}

// optional int64 sync_root_tracker_id = 2;
inline bool ServiceMetadata::has_sync_root_tracker_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServiceMetadata::clear_sync_root_tracker_id() {
  sync_root_tracker_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceMetadata::sync_root_tracker_id() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.ServiceMetadata.sync_root_tracker_id)
  return sync_root_tracker_id_;
}
inline void ServiceMetadata::set_sync_root_tracker_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  sync_root_tracker_id_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.ServiceMetadata.sync_root_tracker_id)
}

// optional int64 next_tracker_id = 3;
inline bool ServiceMetadata::has_next_tracker_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServiceMetadata::clear_next_tracker_id() {
  next_tracker_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServiceMetadata::next_tracker_id() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.ServiceMetadata.next_tracker_id)
  return next_tracker_id_;
}
inline void ServiceMetadata::set_next_tracker_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  next_tracker_id_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.ServiceMetadata.next_tracker_id)
}

// optional bool sync_root_revalidated = 4;
inline bool ServiceMetadata::has_sync_root_revalidated() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServiceMetadata::clear_sync_root_revalidated() {
  sync_root_revalidated_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ServiceMetadata::sync_root_revalidated() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.ServiceMetadata.sync_root_revalidated)
  return sync_root_revalidated_;
}
inline void ServiceMetadata::set_sync_root_revalidated(bool value) {
  _has_bits_[0] |= 0x00000008u;
  sync_root_revalidated_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.ServiceMetadata.sync_root_revalidated)
}

// -------------------------------------------------------------------

// FileDetails

// repeated string parent_folder_ids = 1;
inline int FileDetails::parent_folder_ids_size() const {
  return parent_folder_ids_.size();
}
inline void FileDetails::clear_parent_folder_ids() {
  parent_folder_ids_.Clear();
}
inline const std::string& FileDetails::parent_folder_ids(int index) const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
  return parent_folder_ids_.Get(index);
}
inline std::string* FileDetails::mutable_parent_folder_ids(int index) {
  // @@protoc_insertion_point(field_mutable:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
  return parent_folder_ids_.Mutable(index);
}
inline void FileDetails::set_parent_folder_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
  parent_folder_ids_.Mutable(index)->assign(value);
}
inline void FileDetails::set_parent_folder_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
  parent_folder_ids_.Mutable(index)->assign(std::move(value));
}
inline void FileDetails::set_parent_folder_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  parent_folder_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
}
inline void FileDetails::set_parent_folder_ids(int index, const char* value, size_t size) {
  parent_folder_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
}
inline std::string* FileDetails::add_parent_folder_ids() {
  // @@protoc_insertion_point(field_add_mutable:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
  return parent_folder_ids_.Add();
}
inline void FileDetails::add_parent_folder_ids(const std::string& value) {
  parent_folder_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
}
inline void FileDetails::add_parent_folder_ids(std::string&& value) {
  parent_folder_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
}
inline void FileDetails::add_parent_folder_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  parent_folder_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
}
inline void FileDetails::add_parent_folder_ids(const char* value, size_t size) {
  parent_folder_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FileDetails::parent_folder_ids() const {
  // @@protoc_insertion_point(field_list:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
  return parent_folder_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FileDetails::mutable_parent_folder_ids() {
  // @@protoc_insertion_point(field_mutable_list:sync_file_system.drive_backend.FileDetails.parent_folder_ids)
  return &parent_folder_ids_;
}

// optional string title = 2;
inline bool FileDetails::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileDetails::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileDetails::title() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileDetails.title)
  return title_.GetNoArena();
}
inline void FileDetails::set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileDetails.title)
}
inline void FileDetails::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_file_system.drive_backend.FileDetails.title)
}
inline void FileDetails::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_file_system.drive_backend.FileDetails.title)
}
inline void FileDetails::set_title(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_file_system.drive_backend.FileDetails.title)
}
inline std::string* FileDetails::mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_file_system.drive_backend.FileDetails.title)
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileDetails::release_title() {
  // @@protoc_insertion_point(field_release:sync_file_system.drive_backend.FileDetails.title)
  if (!has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return title_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileDetails::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:sync_file_system.drive_backend.FileDetails.title)
}

// optional .sync_file_system.drive_backend.FileKind file_kind = 3;
inline bool FileDetails::has_file_kind() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FileDetails::clear_file_kind() {
  file_kind_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::sync_file_system::drive_backend::FileKind FileDetails::file_kind() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileDetails.file_kind)
  return static_cast< ::sync_file_system::drive_backend::FileKind >(file_kind_);
}
inline void FileDetails::set_file_kind(::sync_file_system::drive_backend::FileKind value) {
  assert(::sync_file_system::drive_backend::FileKind_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  file_kind_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileDetails.file_kind)
}

// optional string md5 = 4;
inline bool FileDetails::has_md5() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileDetails::clear_md5() {
  md5_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FileDetails::md5() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileDetails.md5)
  return md5_.GetNoArena();
}
inline void FileDetails::set_md5(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  md5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileDetails.md5)
}
inline void FileDetails::set_md5(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  md5_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_file_system.drive_backend.FileDetails.md5)
}
inline void FileDetails::set_md5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  md5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_file_system.drive_backend.FileDetails.md5)
}
inline void FileDetails::set_md5(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  md5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_file_system.drive_backend.FileDetails.md5)
}
inline std::string* FileDetails::mutable_md5() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_file_system.drive_backend.FileDetails.md5)
  return md5_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileDetails::release_md5() {
  // @@protoc_insertion_point(field_release:sync_file_system.drive_backend.FileDetails.md5)
  if (!has_md5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return md5_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileDetails::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  md5_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:sync_file_system.drive_backend.FileDetails.md5)
}

// optional string etag = 5;
inline bool FileDetails::has_etag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileDetails::clear_etag() {
  etag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FileDetails::etag() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileDetails.etag)
  return etag_.GetNoArena();
}
inline void FileDetails::set_etag(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  etag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileDetails.etag)
}
inline void FileDetails::set_etag(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  etag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_file_system.drive_backend.FileDetails.etag)
}
inline void FileDetails::set_etag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  etag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_file_system.drive_backend.FileDetails.etag)
}
inline void FileDetails::set_etag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  etag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_file_system.drive_backend.FileDetails.etag)
}
inline std::string* FileDetails::mutable_etag() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:sync_file_system.drive_backend.FileDetails.etag)
  return etag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileDetails::release_etag() {
  // @@protoc_insertion_point(field_release:sync_file_system.drive_backend.FileDetails.etag)
  if (!has_etag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return etag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileDetails::set_allocated_etag(std::string* etag) {
  if (etag != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  etag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), etag);
  // @@protoc_insertion_point(field_set_allocated:sync_file_system.drive_backend.FileDetails.etag)
}

// optional int64 creation_time = 6;
inline bool FileDetails::has_creation_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FileDetails::clear_creation_time() {
  creation_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FileDetails::creation_time() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileDetails.creation_time)
  return creation_time_;
}
inline void FileDetails::set_creation_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  creation_time_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileDetails.creation_time)
}

// optional int64 modification_time = 7;
inline bool FileDetails::has_modification_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FileDetails::clear_modification_time() {
  modification_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FileDetails::modification_time() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileDetails.modification_time)
  return modification_time_;
}
inline void FileDetails::set_modification_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  modification_time_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileDetails.modification_time)
}

// optional bool missing = 8;
inline bool FileDetails::has_missing() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FileDetails::clear_missing() {
  missing_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool FileDetails::missing() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileDetails.missing)
  return missing_;
}
inline void FileDetails::set_missing(bool value) {
  _has_bits_[0] |= 0x00000010u;
  missing_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileDetails.missing)
}

// optional int64 change_id = 9;
inline bool FileDetails::has_change_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FileDetails::clear_change_id() {
  change_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FileDetails::change_id() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileDetails.change_id)
  return change_id_;
}
inline void FileDetails::set_change_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  change_id_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileDetails.change_id)
}

// -------------------------------------------------------------------

// FileMetadata

// required string file_id = 1;
inline bool FileMetadata::has_file_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileMetadata::clear_file_id() {
  file_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileMetadata::file_id() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileMetadata.file_id)
  return file_id_.GetNoArena();
}
inline void FileMetadata::set_file_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileMetadata.file_id)
}
inline void FileMetadata::set_file_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  file_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_file_system.drive_backend.FileMetadata.file_id)
}
inline void FileMetadata::set_file_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  file_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_file_system.drive_backend.FileMetadata.file_id)
}
inline void FileMetadata::set_file_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  file_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_file_system.drive_backend.FileMetadata.file_id)
}
inline std::string* FileMetadata::mutable_file_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_file_system.drive_backend.FileMetadata.file_id)
  return file_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileMetadata::release_file_id() {
  // @@protoc_insertion_point(field_release:sync_file_system.drive_backend.FileMetadata.file_id)
  if (!has_file_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return file_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileMetadata::set_allocated_file_id(std::string* file_id) {
  if (file_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_id);
  // @@protoc_insertion_point(field_set_allocated:sync_file_system.drive_backend.FileMetadata.file_id)
}

// optional .sync_file_system.drive_backend.FileDetails details = 2;
inline bool FileMetadata::has_details() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileMetadata::clear_details() {
  if (details_ != nullptr) details_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::sync_file_system::drive_backend::FileDetails& FileMetadata::details() const {
  const ::sync_file_system::drive_backend::FileDetails* p = details_;
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileMetadata.details)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_file_system::drive_backend::FileDetails*>(
      &::sync_file_system::drive_backend::_FileDetails_default_instance_);
}
inline ::sync_file_system::drive_backend::FileDetails* FileMetadata::release_details() {
  // @@protoc_insertion_point(field_release:sync_file_system.drive_backend.FileMetadata.details)
  _has_bits_[0] &= ~0x00000002u;
  ::sync_file_system::drive_backend::FileDetails* temp = details_;
  details_ = nullptr;
  return temp;
}
inline ::sync_file_system::drive_backend::FileDetails* FileMetadata::mutable_details() {
  _has_bits_[0] |= 0x00000002u;
  if (details_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_file_system::drive_backend::FileDetails>(GetArenaNoVirtual());
    details_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_file_system.drive_backend.FileMetadata.details)
  return details_;
}
inline void FileMetadata::set_allocated_details(::sync_file_system::drive_backend::FileDetails* details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete details_;
  }
  if (details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, details, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  details_ = details;
  // @@protoc_insertion_point(field_set_allocated:sync_file_system.drive_backend.FileMetadata.details)
}

// -------------------------------------------------------------------

// FileTracker

// required int64 tracker_id = 1;
inline bool FileTracker::has_tracker_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FileTracker::clear_tracker_id() {
  tracker_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FileTracker::tracker_id() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileTracker.tracker_id)
  return tracker_id_;
}
inline void FileTracker::set_tracker_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  tracker_id_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileTracker.tracker_id)
}

// required int64 parent_tracker_id = 2;
inline bool FileTracker::has_parent_tracker_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FileTracker::clear_parent_tracker_id() {
  parent_tracker_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FileTracker::parent_tracker_id() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileTracker.parent_tracker_id)
  return parent_tracker_id_;
}
inline void FileTracker::set_parent_tracker_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  parent_tracker_id_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileTracker.parent_tracker_id)
}

// required string file_id = 3;
inline bool FileTracker::has_file_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileTracker::clear_file_id() {
  file_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileTracker::file_id() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileTracker.file_id)
  return file_id_.GetNoArena();
}
inline void FileTracker::set_file_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileTracker.file_id)
}
inline void FileTracker::set_file_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  file_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_file_system.drive_backend.FileTracker.file_id)
}
inline void FileTracker::set_file_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  file_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_file_system.drive_backend.FileTracker.file_id)
}
inline void FileTracker::set_file_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  file_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_file_system.drive_backend.FileTracker.file_id)
}
inline std::string* FileTracker::mutable_file_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_file_system.drive_backend.FileTracker.file_id)
  return file_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileTracker::release_file_id() {
  // @@protoc_insertion_point(field_release:sync_file_system.drive_backend.FileTracker.file_id)
  if (!has_file_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return file_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileTracker::set_allocated_file_id(std::string* file_id) {
  if (file_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_id);
  // @@protoc_insertion_point(field_set_allocated:sync_file_system.drive_backend.FileTracker.file_id)
}

// optional string app_id = 4;
inline bool FileTracker::has_app_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileTracker::clear_app_id() {
  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FileTracker::app_id() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileTracker.app_id)
  return app_id_.GetNoArena();
}
inline void FileTracker::set_app_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileTracker.app_id)
}
inline void FileTracker::set_app_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  app_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_file_system.drive_backend.FileTracker.app_id)
}
inline void FileTracker::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_file_system.drive_backend.FileTracker.app_id)
}
inline void FileTracker::set_app_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_file_system.drive_backend.FileTracker.app_id)
}
inline std::string* FileTracker::mutable_app_id() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_file_system.drive_backend.FileTracker.app_id)
  return app_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileTracker::release_app_id() {
  // @@protoc_insertion_point(field_release:sync_file_system.drive_backend.FileTracker.app_id)
  if (!has_app_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return app_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileTracker::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  app_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id);
  // @@protoc_insertion_point(field_set_allocated:sync_file_system.drive_backend.FileTracker.app_id)
}

// optional .sync_file_system.drive_backend.TrackerKind tracker_kind = 5;
inline bool FileTracker::has_tracker_kind() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FileTracker::clear_tracker_kind() {
  tracker_kind_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::sync_file_system::drive_backend::TrackerKind FileTracker::tracker_kind() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileTracker.tracker_kind)
  return static_cast< ::sync_file_system::drive_backend::TrackerKind >(tracker_kind_);
}
inline void FileTracker::set_tracker_kind(::sync_file_system::drive_backend::TrackerKind value) {
  assert(::sync_file_system::drive_backend::TrackerKind_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  tracker_kind_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileTracker.tracker_kind)
}

// optional .sync_file_system.drive_backend.FileDetails synced_details = 6;
inline bool FileTracker::has_synced_details() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileTracker::clear_synced_details() {
  if (synced_details_ != nullptr) synced_details_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::sync_file_system::drive_backend::FileDetails& FileTracker::synced_details() const {
  const ::sync_file_system::drive_backend::FileDetails* p = synced_details_;
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileTracker.synced_details)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_file_system::drive_backend::FileDetails*>(
      &::sync_file_system::drive_backend::_FileDetails_default_instance_);
}
inline ::sync_file_system::drive_backend::FileDetails* FileTracker::release_synced_details() {
  // @@protoc_insertion_point(field_release:sync_file_system.drive_backend.FileTracker.synced_details)
  _has_bits_[0] &= ~0x00000004u;
  ::sync_file_system::drive_backend::FileDetails* temp = synced_details_;
  synced_details_ = nullptr;
  return temp;
}
inline ::sync_file_system::drive_backend::FileDetails* FileTracker::mutable_synced_details() {
  _has_bits_[0] |= 0x00000004u;
  if (synced_details_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_file_system::drive_backend::FileDetails>(GetArenaNoVirtual());
    synced_details_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_file_system.drive_backend.FileTracker.synced_details)
  return synced_details_;
}
inline void FileTracker::set_allocated_synced_details(::sync_file_system::drive_backend::FileDetails* synced_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete synced_details_;
  }
  if (synced_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      synced_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, synced_details, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  synced_details_ = synced_details;
  // @@protoc_insertion_point(field_set_allocated:sync_file_system.drive_backend.FileTracker.synced_details)
}

// optional bool dirty = 7;
inline bool FileTracker::has_dirty() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FileTracker::clear_dirty() {
  dirty_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool FileTracker::dirty() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileTracker.dirty)
  return dirty_;
}
inline void FileTracker::set_dirty(bool value) {
  _has_bits_[0] |= 0x00000040u;
  dirty_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileTracker.dirty)
}

// optional bool active = 8;
inline bool FileTracker::has_active() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FileTracker::clear_active() {
  active_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool FileTracker::active() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileTracker.active)
  return active_;
}
inline void FileTracker::set_active(bool value) {
  _has_bits_[0] |= 0x00000080u;
  active_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileTracker.active)
}

// optional bool needs_folder_listing = 9;
inline bool FileTracker::has_needs_folder_listing() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FileTracker::clear_needs_folder_listing() {
  needs_folder_listing_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool FileTracker::needs_folder_listing() const {
  // @@protoc_insertion_point(field_get:sync_file_system.drive_backend.FileTracker.needs_folder_listing)
  return needs_folder_listing_;
}
inline void FileTracker::set_needs_folder_listing(bool value) {
  _has_bits_[0] |= 0x00000100u;
  needs_folder_listing_ = value;
  // @@protoc_insertion_point(field_set:sync_file_system.drive_backend.FileTracker.needs_folder_listing)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace drive_backend
}  // namespace sync_file_system

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sync_file_system::drive_backend::FileKind> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_file_system::drive_backend::TrackerKind> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_metadata_5fdatabase_2eproto

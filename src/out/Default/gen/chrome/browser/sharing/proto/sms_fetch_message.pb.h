// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sms_fetch_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sms_5ffetch_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sms_5ffetch_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sms_5ffetch_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sms_5ffetch_5fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace chrome_browser_sharing {
class SmsFetchRequest;
class SmsFetchRequestDefaultTypeInternal;
extern SmsFetchRequestDefaultTypeInternal _SmsFetchRequest_default_instance_;
class SmsFetchResponse;
class SmsFetchResponseDefaultTypeInternal;
extern SmsFetchResponseDefaultTypeInternal _SmsFetchResponse_default_instance_;
}  // namespace chrome_browser_sharing
PROTOBUF_NAMESPACE_OPEN
template<> ::chrome_browser_sharing::SmsFetchRequest* Arena::CreateMaybeMessage<::chrome_browser_sharing::SmsFetchRequest>(Arena*);
template<> ::chrome_browser_sharing::SmsFetchResponse* Arena::CreateMaybeMessage<::chrome_browser_sharing::SmsFetchResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chrome_browser_sharing {

// ===================================================================

class SmsFetchRequest :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_sharing.SmsFetchRequest) */ {
 public:
  SmsFetchRequest();
  virtual ~SmsFetchRequest();

  SmsFetchRequest(const SmsFetchRequest& from);
  SmsFetchRequest(SmsFetchRequest&& from) noexcept
    : SmsFetchRequest() {
    *this = ::std::move(from);
  }

  inline SmsFetchRequest& operator=(const SmsFetchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmsFetchRequest& operator=(SmsFetchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SmsFetchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SmsFetchRequest* internal_default_instance() {
    return reinterpret_cast<const SmsFetchRequest*>(
               &_SmsFetchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SmsFetchRequest& a, SmsFetchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SmsFetchRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SmsFetchRequest* New() const final {
    return CreateMaybeMessage<SmsFetchRequest>(nullptr);
  }

  SmsFetchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SmsFetchRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SmsFetchRequest& from);
  void MergeFrom(const SmsFetchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SmsFetchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_sharing.SmsFetchRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginFieldNumber = 1,
  };
  // string origin = 1;
  void clear_origin();
  const std::string& origin() const;
  void set_origin(const std::string& value);
  void set_origin(std::string&& value);
  void set_origin(const char* value);
  void set_origin(const char* value, size_t size);
  std::string* mutable_origin();
  std::string* release_origin();
  void set_allocated_origin(std::string* origin);

  // @@protoc_insertion_point(class_scope:chrome_browser_sharing.SmsFetchRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sms_5ffetch_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class SmsFetchResponse :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_sharing.SmsFetchResponse) */ {
 public:
  SmsFetchResponse();
  virtual ~SmsFetchResponse();

  SmsFetchResponse(const SmsFetchResponse& from);
  SmsFetchResponse(SmsFetchResponse&& from) noexcept
    : SmsFetchResponse() {
    *this = ::std::move(from);
  }

  inline SmsFetchResponse& operator=(const SmsFetchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmsFetchResponse& operator=(SmsFetchResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SmsFetchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SmsFetchResponse* internal_default_instance() {
    return reinterpret_cast<const SmsFetchResponse*>(
               &_SmsFetchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SmsFetchResponse& a, SmsFetchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SmsFetchResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SmsFetchResponse* New() const final {
    return CreateMaybeMessage<SmsFetchResponse>(nullptr);
  }

  SmsFetchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SmsFetchResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SmsFetchResponse& from);
  void MergeFrom(const SmsFetchResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SmsFetchResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_sharing.SmsFetchResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSmsFieldNumber = 1,
    kOneTimeCodeFieldNumber = 2,
  };
  // string sms = 1;
  void clear_sms();
  const std::string& sms() const;
  void set_sms(const std::string& value);
  void set_sms(std::string&& value);
  void set_sms(const char* value);
  void set_sms(const char* value, size_t size);
  std::string* mutable_sms();
  std::string* release_sms();
  void set_allocated_sms(std::string* sms);

  // string one_time_code = 2;
  void clear_one_time_code();
  const std::string& one_time_code() const;
  void set_one_time_code(const std::string& value);
  void set_one_time_code(std::string&& value);
  void set_one_time_code(const char* value);
  void set_one_time_code(const char* value, size_t size);
  std::string* mutable_one_time_code();
  std::string* release_one_time_code();
  void set_allocated_one_time_code(std::string* one_time_code);

  // @@protoc_insertion_point(class_scope:chrome_browser_sharing.SmsFetchResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sms_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr one_time_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sms_5ffetch_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SmsFetchRequest

// string origin = 1;
inline void SmsFetchRequest::clear_origin() {
  origin_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SmsFetchRequest::origin() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.SmsFetchRequest.origin)
  return origin_.GetNoArena();
}
inline void SmsFetchRequest::set_origin(const std::string& value) {
  
  origin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_sharing.SmsFetchRequest.origin)
}
inline void SmsFetchRequest::set_origin(std::string&& value) {
  
  origin_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_sharing.SmsFetchRequest.origin)
}
inline void SmsFetchRequest::set_origin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  origin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_sharing.SmsFetchRequest.origin)
}
inline void SmsFetchRequest::set_origin(const char* value, size_t size) {
  
  origin_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_sharing.SmsFetchRequest.origin)
}
inline std::string* SmsFetchRequest::mutable_origin() {
  
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.SmsFetchRequest.origin)
  return origin_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SmsFetchRequest::release_origin() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.SmsFetchRequest.origin)
  
  return origin_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SmsFetchRequest::set_allocated_origin(std::string* origin) {
  if (origin != nullptr) {
    
  } else {
    
  }
  origin_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), origin);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.SmsFetchRequest.origin)
}

// -------------------------------------------------------------------

// SmsFetchResponse

// string sms = 1;
inline void SmsFetchResponse::clear_sms() {
  sms_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SmsFetchResponse::sms() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.SmsFetchResponse.sms)
  return sms_.GetNoArena();
}
inline void SmsFetchResponse::set_sms(const std::string& value) {
  
  sms_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_sharing.SmsFetchResponse.sms)
}
inline void SmsFetchResponse::set_sms(std::string&& value) {
  
  sms_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_sharing.SmsFetchResponse.sms)
}
inline void SmsFetchResponse::set_sms(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sms_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_sharing.SmsFetchResponse.sms)
}
inline void SmsFetchResponse::set_sms(const char* value, size_t size) {
  
  sms_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_sharing.SmsFetchResponse.sms)
}
inline std::string* SmsFetchResponse::mutable_sms() {
  
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.SmsFetchResponse.sms)
  return sms_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SmsFetchResponse::release_sms() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.SmsFetchResponse.sms)
  
  return sms_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SmsFetchResponse::set_allocated_sms(std::string* sms) {
  if (sms != nullptr) {
    
  } else {
    
  }
  sms_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sms);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.SmsFetchResponse.sms)
}

// string one_time_code = 2;
inline void SmsFetchResponse::clear_one_time_code() {
  one_time_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SmsFetchResponse::one_time_code() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.SmsFetchResponse.one_time_code)
  return one_time_code_.GetNoArena();
}
inline void SmsFetchResponse::set_one_time_code(const std::string& value) {
  
  one_time_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_sharing.SmsFetchResponse.one_time_code)
}
inline void SmsFetchResponse::set_one_time_code(std::string&& value) {
  
  one_time_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_sharing.SmsFetchResponse.one_time_code)
}
inline void SmsFetchResponse::set_one_time_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  one_time_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_sharing.SmsFetchResponse.one_time_code)
}
inline void SmsFetchResponse::set_one_time_code(const char* value, size_t size) {
  
  one_time_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_sharing.SmsFetchResponse.one_time_code)
}
inline std::string* SmsFetchResponse::mutable_one_time_code() {
  
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.SmsFetchResponse.one_time_code)
  return one_time_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SmsFetchResponse::release_one_time_code() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.SmsFetchResponse.one_time_code)
  
  return one_time_code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SmsFetchResponse::set_allocated_one_time_code(std::string* one_time_code) {
  if (one_time_code != nullptr) {
    
  } else {
    
  }
  one_time_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), one_time_code);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.SmsFetchResponse.one_time_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chrome_browser_sharing

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sms_5ffetch_5fmessage_2eproto

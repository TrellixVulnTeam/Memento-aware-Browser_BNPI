// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sharing_message.proto

#include "sharing_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_sharing_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AckMessage_sharing_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_click_5fto_5fcall_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClickToCallMessage_click_5fto_5fcall_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sharing_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiscoveryRequest_sharing_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sharing_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiscoveryResponse_sharing_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sharing_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FCMChannelConfiguration_sharing_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_peer_5fconnection_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerConnectionAnswerMessage_peer_5fconnection_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_peer_5fconnection_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PeerConnectionIceCandidatesMessage_peer_5fconnection_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_peer_5fconnection_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerConnectionOfferMessage_peer_5fconnection_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sharing_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PingMessage_sharing_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_remote_5fcopy_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteCopyMessage_remote_5fcopy_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sharing_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ResponseMessage_sharing_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sharing_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerChannelConfiguration_sharing_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_shared_5fclipboard_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SharedClipboardMessage_shared_5fclipboard_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sharing_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<12> scc_info_SharingMessage_sharing_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sms_5ffetch_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SmsFetchRequest_sms_5ffetch_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sms_5ffetch_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SmsFetchResponse_sms_5ffetch_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sharing_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WebRtcSignalingMessage_sharing_5fmessage_2eproto;
namespace chrome_browser_sharing {
class SharingMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SharingMessage> _instance;
  const ::chrome_browser_sharing::PingMessage* ping_message_;
  const ::chrome_browser_sharing::AckMessage* ack_message_;
  const ::chrome_browser_sharing::ClickToCallMessage* click_to_call_message_;
  const ::chrome_browser_sharing::SharedClipboardMessage* shared_clipboard_message_;
  const ::chrome_browser_sharing::SmsFetchRequest* sms_fetch_request_;
  const ::chrome_browser_sharing::RemoteCopyMessage* remote_copy_message_;
  const ::chrome_browser_sharing::PeerConnectionOfferMessage* peer_connection_offer_message_;
  const ::chrome_browser_sharing::PeerConnectionIceCandidatesMessage* peer_connection_ice_candidates_message_;
  const ::chrome_browser_sharing::DiscoveryRequest* discovery_request_;
  const ::chrome_browser_sharing::WebRtcSignalingMessage* web_rtc_signaling_frame_;
  const ::chrome_browser_sharing::FCMChannelConfiguration* fcm_channel_configuration_;
  const ::chrome_browser_sharing::ServerChannelConfiguration* server_channel_configuration_;
} _SharingMessage_default_instance_;
class PingMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PingMessage> _instance;
} _PingMessage_default_instance_;
class AckMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AckMessage> _instance;
} _AckMessage_default_instance_;
class ResponseMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResponseMessage> _instance;
  const ::chrome_browser_sharing::SmsFetchResponse* sms_fetch_response_;
  const ::chrome_browser_sharing::PeerConnectionAnswerMessage* peer_connection_answer_message_response_;
  const ::chrome_browser_sharing::DiscoveryResponse* discovery_response_;
} _ResponseMessage_default_instance_;
class FCMChannelConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FCMChannelConfiguration> _instance;
} _FCMChannelConfiguration_default_instance_;
class ServerChannelConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerChannelConfiguration> _instance;
} _ServerChannelConfiguration_default_instance_;
class DiscoveryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiscoveryRequest> _instance;
} _DiscoveryRequest_default_instance_;
class DiscoveryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DiscoveryResponse> _instance;
} _DiscoveryResponse_default_instance_;
class WebRtcSignalingMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WebRtcSignalingMessage> _instance;
} _WebRtcSignalingMessage_default_instance_;
class WebRtcMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WebRtcMessage> _instance;
} _WebRtcMessage_default_instance_;
}  // namespace chrome_browser_sharing
static void InitDefaultsscc_info_AckMessage_sharing_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chrome_browser_sharing::_AckMessage_default_instance_;
    new (ptr) ::chrome_browser_sharing::AckMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chrome_browser_sharing::AckMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AckMessage_sharing_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AckMessage_sharing_5fmessage_2eproto}, {
      &scc_info_ResponseMessage_sharing_5fmessage_2eproto.base,}};

static void InitDefaultsscc_info_DiscoveryRequest_sharing_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chrome_browser_sharing::_DiscoveryRequest_default_instance_;
    new (ptr) ::chrome_browser_sharing::DiscoveryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chrome_browser_sharing::DiscoveryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiscoveryRequest_sharing_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DiscoveryRequest_sharing_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_DiscoveryResponse_sharing_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chrome_browser_sharing::_DiscoveryResponse_default_instance_;
    new (ptr) ::chrome_browser_sharing::DiscoveryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chrome_browser_sharing::DiscoveryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DiscoveryResponse_sharing_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DiscoveryResponse_sharing_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_FCMChannelConfiguration_sharing_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chrome_browser_sharing::_FCMChannelConfiguration_default_instance_;
    new (ptr) ::chrome_browser_sharing::FCMChannelConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chrome_browser_sharing::FCMChannelConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FCMChannelConfiguration_sharing_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FCMChannelConfiguration_sharing_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_PingMessage_sharing_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chrome_browser_sharing::_PingMessage_default_instance_;
    new (ptr) ::chrome_browser_sharing::PingMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chrome_browser_sharing::PingMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PingMessage_sharing_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PingMessage_sharing_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_ResponseMessage_sharing_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chrome_browser_sharing::_ResponseMessage_default_instance_;
    new (ptr) ::chrome_browser_sharing::ResponseMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chrome_browser_sharing::ResponseMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ResponseMessage_sharing_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_ResponseMessage_sharing_5fmessage_2eproto}, {
      &scc_info_SmsFetchResponse_sms_5ffetch_5fmessage_2eproto.base,
      &scc_info_PeerConnectionAnswerMessage_peer_5fconnection_5fmessages_2eproto.base,
      &scc_info_DiscoveryResponse_sharing_5fmessage_2eproto.base,}};

static void InitDefaultsscc_info_ServerChannelConfiguration_sharing_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chrome_browser_sharing::_ServerChannelConfiguration_default_instance_;
    new (ptr) ::chrome_browser_sharing::ServerChannelConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chrome_browser_sharing::ServerChannelConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerChannelConfiguration_sharing_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ServerChannelConfiguration_sharing_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_SharingMessage_sharing_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chrome_browser_sharing::_SharingMessage_default_instance_;
    new (ptr) ::chrome_browser_sharing::SharingMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chrome_browser_sharing::SharingMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<12> scc_info_SharingMessage_sharing_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 12, InitDefaultsscc_info_SharingMessage_sharing_5fmessage_2eproto}, {
      &scc_info_PingMessage_sharing_5fmessage_2eproto.base,
      &scc_info_AckMessage_sharing_5fmessage_2eproto.base,
      &scc_info_ClickToCallMessage_click_5fto_5fcall_5fmessage_2eproto.base,
      &scc_info_SharedClipboardMessage_shared_5fclipboard_5fmessage_2eproto.base,
      &scc_info_SmsFetchRequest_sms_5ffetch_5fmessage_2eproto.base,
      &scc_info_RemoteCopyMessage_remote_5fcopy_5fmessage_2eproto.base,
      &scc_info_PeerConnectionOfferMessage_peer_5fconnection_5fmessages_2eproto.base,
      &scc_info_PeerConnectionIceCandidatesMessage_peer_5fconnection_5fmessages_2eproto.base,
      &scc_info_DiscoveryRequest_sharing_5fmessage_2eproto.base,
      &scc_info_WebRtcSignalingMessage_sharing_5fmessage_2eproto.base,
      &scc_info_FCMChannelConfiguration_sharing_5fmessage_2eproto.base,
      &scc_info_ServerChannelConfiguration_sharing_5fmessage_2eproto.base,}};

static void InitDefaultsscc_info_WebRtcMessage_sharing_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chrome_browser_sharing::_WebRtcMessage_default_instance_;
    new (ptr) ::chrome_browser_sharing::WebRtcMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chrome_browser_sharing::WebRtcMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WebRtcMessage_sharing_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_WebRtcMessage_sharing_5fmessage_2eproto}, {
      &scc_info_SharingMessage_sharing_5fmessage_2eproto.base,}};

static void InitDefaultsscc_info_WebRtcSignalingMessage_sharing_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chrome_browser_sharing::_WebRtcSignalingMessage_default_instance_;
    new (ptr) ::chrome_browser_sharing::WebRtcSignalingMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chrome_browser_sharing::WebRtcSignalingMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WebRtcSignalingMessage_sharing_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WebRtcSignalingMessage_sharing_5fmessage_2eproto}, {}};

namespace chrome_browser_sharing {
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> MessageType_strings[11] = {};

static const char MessageType_names[] =
  "ACK_MESSAGE"
  "CLICK_TO_CALL_MESSAGE"
  "DISCOVERY_REQUEST"
  "PEER_CONNECTION_ICE_CANDIDATES_MESSAGE"
  "PEER_CONNECTION_OFFER_MESSAGE"
  "PING_MESSAGE"
  "REMOTE_COPY_MESSAGE"
  "SHARED_CLIPBOARD_MESSAGE"
  "SMS_FETCH_REQUEST"
  "UNKNOWN_MESSAGE"
  "WEB_RTC_SIGNALING_FRAME";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry MessageType_entries[] = {
  { {MessageType_names + 0, 11}, 2 },
  { {MessageType_names + 11, 21}, 3 },
  { {MessageType_names + 32, 17}, 9 },
  { {MessageType_names + 49, 38}, 8 },
  { {MessageType_names + 87, 29}, 7 },
  { {MessageType_names + 116, 12}, 1 },
  { {MessageType_names + 128, 19}, 6 },
  { {MessageType_names + 147, 24}, 4 },
  { {MessageType_names + 171, 17}, 5 },
  { {MessageType_names + 188, 15}, 0 },
  { {MessageType_names + 203, 23}, 10 },
};

static const int MessageType_entries_by_number[] = {
  9, // 0 -> UNKNOWN_MESSAGE
  5, // 1 -> PING_MESSAGE
  0, // 2 -> ACK_MESSAGE
  1, // 3 -> CLICK_TO_CALL_MESSAGE
  7, // 4 -> SHARED_CLIPBOARD_MESSAGE
  8, // 5 -> SMS_FETCH_REQUEST
  6, // 6 -> REMOTE_COPY_MESSAGE
  4, // 7 -> PEER_CONNECTION_OFFER_MESSAGE
  3, // 8 -> PEER_CONNECTION_ICE_CANDIDATES_MESSAGE
  2, // 9 -> DISCOVERY_REQUEST
  10, // 10 -> WEB_RTC_SIGNALING_FRAME
};

const std::string& MessageType_Name(
    MessageType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          MessageType_entries,
          MessageType_entries_by_number,
          11, MessageType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      MessageType_entries,
      MessageType_entries_by_number,
      11, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     MessageType_strings[idx].get();
}
bool MessageType_Parse(
    const std::string& name, MessageType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      MessageType_entries, 11, name, &int_value);
  if (success) {
    *value = static_cast<MessageType>(int_value);
  }
  return success;
}

// ===================================================================

void SharingMessage::InitAsDefaultInstance() {
}
class SharingMessage::_Internal {
 public:
  static const ::chrome_browser_sharing::PingMessage& ping_message(const SharingMessage* msg);
  static const ::chrome_browser_sharing::AckMessage& ack_message(const SharingMessage* msg);
  static const ::chrome_browser_sharing::ClickToCallMessage& click_to_call_message(const SharingMessage* msg);
  static const ::chrome_browser_sharing::SharedClipboardMessage& shared_clipboard_message(const SharingMessage* msg);
  static const ::chrome_browser_sharing::SmsFetchRequest& sms_fetch_request(const SharingMessage* msg);
  static const ::chrome_browser_sharing::RemoteCopyMessage& remote_copy_message(const SharingMessage* msg);
  static const ::chrome_browser_sharing::PeerConnectionOfferMessage& peer_connection_offer_message(const SharingMessage* msg);
  static const ::chrome_browser_sharing::PeerConnectionIceCandidatesMessage& peer_connection_ice_candidates_message(const SharingMessage* msg);
  static const ::chrome_browser_sharing::DiscoveryRequest& discovery_request(const SharingMessage* msg);
  static const ::chrome_browser_sharing::WebRtcSignalingMessage& web_rtc_signaling_frame(const SharingMessage* msg);
  static const ::chrome_browser_sharing::FCMChannelConfiguration& fcm_channel_configuration(const SharingMessage* msg);
  static const ::chrome_browser_sharing::ServerChannelConfiguration& server_channel_configuration(const SharingMessage* msg);
};

const ::chrome_browser_sharing::PingMessage&
SharingMessage::_Internal::ping_message(const SharingMessage* msg) {
  return *msg->payload_.ping_message_;
}
const ::chrome_browser_sharing::AckMessage&
SharingMessage::_Internal::ack_message(const SharingMessage* msg) {
  return *msg->payload_.ack_message_;
}
const ::chrome_browser_sharing::ClickToCallMessage&
SharingMessage::_Internal::click_to_call_message(const SharingMessage* msg) {
  return *msg->payload_.click_to_call_message_;
}
const ::chrome_browser_sharing::SharedClipboardMessage&
SharingMessage::_Internal::shared_clipboard_message(const SharingMessage* msg) {
  return *msg->payload_.shared_clipboard_message_;
}
const ::chrome_browser_sharing::SmsFetchRequest&
SharingMessage::_Internal::sms_fetch_request(const SharingMessage* msg) {
  return *msg->payload_.sms_fetch_request_;
}
const ::chrome_browser_sharing::RemoteCopyMessage&
SharingMessage::_Internal::remote_copy_message(const SharingMessage* msg) {
  return *msg->payload_.remote_copy_message_;
}
const ::chrome_browser_sharing::PeerConnectionOfferMessage&
SharingMessage::_Internal::peer_connection_offer_message(const SharingMessage* msg) {
  return *msg->payload_.peer_connection_offer_message_;
}
const ::chrome_browser_sharing::PeerConnectionIceCandidatesMessage&
SharingMessage::_Internal::peer_connection_ice_candidates_message(const SharingMessage* msg) {
  return *msg->payload_.peer_connection_ice_candidates_message_;
}
const ::chrome_browser_sharing::DiscoveryRequest&
SharingMessage::_Internal::discovery_request(const SharingMessage* msg) {
  return *msg->payload_.discovery_request_;
}
const ::chrome_browser_sharing::WebRtcSignalingMessage&
SharingMessage::_Internal::web_rtc_signaling_frame(const SharingMessage* msg) {
  return *msg->payload_.web_rtc_signaling_frame_;
}
const ::chrome_browser_sharing::FCMChannelConfiguration&
SharingMessage::_Internal::fcm_channel_configuration(const SharingMessage* msg) {
  return *msg->ack_channel_configuration_.fcm_channel_configuration_;
}
const ::chrome_browser_sharing::ServerChannelConfiguration&
SharingMessage::_Internal::server_channel_configuration(const SharingMessage* msg) {
  return *msg->ack_channel_configuration_.server_channel_configuration_;
}
void SharingMessage::set_allocated_ping_message(::chrome_browser_sharing::PingMessage* ping_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (ping_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ping_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping_message, submessage_arena);
    }
    set_has_ping_message();
    payload_.ping_message_ = ping_message;
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.SharingMessage.ping_message)
}
void SharingMessage::set_allocated_ack_message(::chrome_browser_sharing::AckMessage* ack_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (ack_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ack_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ack_message, submessage_arena);
    }
    set_has_ack_message();
    payload_.ack_message_ = ack_message;
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.SharingMessage.ack_message)
}
void SharingMessage::set_allocated_click_to_call_message(::chrome_browser_sharing::ClickToCallMessage* click_to_call_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (click_to_call_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      click_to_call_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, click_to_call_message, submessage_arena);
    }
    set_has_click_to_call_message();
    payload_.click_to_call_message_ = click_to_call_message;
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.SharingMessage.click_to_call_message)
}
void SharingMessage::clear_click_to_call_message() {
  if (has_click_to_call_message()) {
    delete payload_.click_to_call_message_;
    clear_has_payload();
  }
}
void SharingMessage::set_allocated_shared_clipboard_message(::chrome_browser_sharing::SharedClipboardMessage* shared_clipboard_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (shared_clipboard_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      shared_clipboard_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shared_clipboard_message, submessage_arena);
    }
    set_has_shared_clipboard_message();
    payload_.shared_clipboard_message_ = shared_clipboard_message;
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.SharingMessage.shared_clipboard_message)
}
void SharingMessage::clear_shared_clipboard_message() {
  if (has_shared_clipboard_message()) {
    delete payload_.shared_clipboard_message_;
    clear_has_payload();
  }
}
void SharingMessage::set_allocated_sms_fetch_request(::chrome_browser_sharing::SmsFetchRequest* sms_fetch_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (sms_fetch_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sms_fetch_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sms_fetch_request, submessage_arena);
    }
    set_has_sms_fetch_request();
    payload_.sms_fetch_request_ = sms_fetch_request;
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.SharingMessage.sms_fetch_request)
}
void SharingMessage::clear_sms_fetch_request() {
  if (has_sms_fetch_request()) {
    delete payload_.sms_fetch_request_;
    clear_has_payload();
  }
}
void SharingMessage::set_allocated_remote_copy_message(::chrome_browser_sharing::RemoteCopyMessage* remote_copy_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (remote_copy_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      remote_copy_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remote_copy_message, submessage_arena);
    }
    set_has_remote_copy_message();
    payload_.remote_copy_message_ = remote_copy_message;
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.SharingMessage.remote_copy_message)
}
void SharingMessage::clear_remote_copy_message() {
  if (has_remote_copy_message()) {
    delete payload_.remote_copy_message_;
    clear_has_payload();
  }
}
void SharingMessage::set_allocated_peer_connection_offer_message(::chrome_browser_sharing::PeerConnectionOfferMessage* peer_connection_offer_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (peer_connection_offer_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      peer_connection_offer_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer_connection_offer_message, submessage_arena);
    }
    set_has_peer_connection_offer_message();
    payload_.peer_connection_offer_message_ = peer_connection_offer_message;
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.SharingMessage.peer_connection_offer_message)
}
void SharingMessage::clear_peer_connection_offer_message() {
  if (has_peer_connection_offer_message()) {
    delete payload_.peer_connection_offer_message_;
    clear_has_payload();
  }
}
void SharingMessage::set_allocated_peer_connection_ice_candidates_message(::chrome_browser_sharing::PeerConnectionIceCandidatesMessage* peer_connection_ice_candidates_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (peer_connection_ice_candidates_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      peer_connection_ice_candidates_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer_connection_ice_candidates_message, submessage_arena);
    }
    set_has_peer_connection_ice_candidates_message();
    payload_.peer_connection_ice_candidates_message_ = peer_connection_ice_candidates_message;
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.SharingMessage.peer_connection_ice_candidates_message)
}
void SharingMessage::clear_peer_connection_ice_candidates_message() {
  if (has_peer_connection_ice_candidates_message()) {
    delete payload_.peer_connection_ice_candidates_message_;
    clear_has_payload();
  }
}
void SharingMessage::set_allocated_discovery_request(::chrome_browser_sharing::DiscoveryRequest* discovery_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (discovery_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      discovery_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, discovery_request, submessage_arena);
    }
    set_has_discovery_request();
    payload_.discovery_request_ = discovery_request;
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.SharingMessage.discovery_request)
}
void SharingMessage::set_allocated_web_rtc_signaling_frame(::chrome_browser_sharing::WebRtcSignalingMessage* web_rtc_signaling_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (web_rtc_signaling_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      web_rtc_signaling_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, web_rtc_signaling_frame, submessage_arena);
    }
    set_has_web_rtc_signaling_frame();
    payload_.web_rtc_signaling_frame_ = web_rtc_signaling_frame;
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.SharingMessage.web_rtc_signaling_frame)
}
void SharingMessage::set_allocated_fcm_channel_configuration(::chrome_browser_sharing::FCMChannelConfiguration* fcm_channel_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_ack_channel_configuration();
  if (fcm_channel_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fcm_channel_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fcm_channel_configuration, submessage_arena);
    }
    set_has_fcm_channel_configuration();
    ack_channel_configuration_.fcm_channel_configuration_ = fcm_channel_configuration;
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.SharingMessage.fcm_channel_configuration)
}
void SharingMessage::set_allocated_server_channel_configuration(::chrome_browser_sharing::ServerChannelConfiguration* server_channel_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_ack_channel_configuration();
  if (server_channel_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      server_channel_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_channel_configuration, submessage_arena);
    }
    set_has_server_channel_configuration();
    ack_channel_configuration_.server_channel_configuration_ = server_channel_configuration;
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.SharingMessage.server_channel_configuration)
}
SharingMessage::SharingMessage()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_sharing.SharingMessage)
}
SharingMessage::SharingMessage(const SharingMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sender_guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sender_guid().empty()) {
    sender_guid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_guid_);
  }
  sender_device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sender_device_name().empty()) {
    sender_device_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_device_name_);
  }
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.message_id().empty()) {
    message_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_id_);
  }
  clear_has_payload();
  switch (from.payload_case()) {
    case kPingMessage: {
      mutable_ping_message()->::chrome_browser_sharing::PingMessage::MergeFrom(from.ping_message());
      break;
    }
    case kAckMessage: {
      mutable_ack_message()->::chrome_browser_sharing::AckMessage::MergeFrom(from.ack_message());
      break;
    }
    case kClickToCallMessage: {
      mutable_click_to_call_message()->::chrome_browser_sharing::ClickToCallMessage::MergeFrom(from.click_to_call_message());
      break;
    }
    case kSharedClipboardMessage: {
      mutable_shared_clipboard_message()->::chrome_browser_sharing::SharedClipboardMessage::MergeFrom(from.shared_clipboard_message());
      break;
    }
    case kSmsFetchRequest: {
      mutable_sms_fetch_request()->::chrome_browser_sharing::SmsFetchRequest::MergeFrom(from.sms_fetch_request());
      break;
    }
    case kRemoteCopyMessage: {
      mutable_remote_copy_message()->::chrome_browser_sharing::RemoteCopyMessage::MergeFrom(from.remote_copy_message());
      break;
    }
    case kPeerConnectionOfferMessage: {
      mutable_peer_connection_offer_message()->::chrome_browser_sharing::PeerConnectionOfferMessage::MergeFrom(from.peer_connection_offer_message());
      break;
    }
    case kPeerConnectionIceCandidatesMessage: {
      mutable_peer_connection_ice_candidates_message()->::chrome_browser_sharing::PeerConnectionIceCandidatesMessage::MergeFrom(from.peer_connection_ice_candidates_message());
      break;
    }
    case kDiscoveryRequest: {
      mutable_discovery_request()->::chrome_browser_sharing::DiscoveryRequest::MergeFrom(from.discovery_request());
      break;
    }
    case kWebRtcSignalingFrame: {
      mutable_web_rtc_signaling_frame()->::chrome_browser_sharing::WebRtcSignalingMessage::MergeFrom(from.web_rtc_signaling_frame());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  clear_has_ack_channel_configuration();
  switch (from.ack_channel_configuration_case()) {
    case kFcmChannelConfiguration: {
      mutable_fcm_channel_configuration()->::chrome_browser_sharing::FCMChannelConfiguration::MergeFrom(from.fcm_channel_configuration());
      break;
    }
    case kServerChannelConfiguration: {
      mutable_server_channel_configuration()->::chrome_browser_sharing::ServerChannelConfiguration::MergeFrom(from.server_channel_configuration());
      break;
    }
    case ACK_CHANNEL_CONFIGURATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:chrome_browser_sharing.SharingMessage)
}

void SharingMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SharingMessage_sharing_5fmessage_2eproto.base);
  sender_guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_device_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_payload();
  clear_has_ack_channel_configuration();
}

SharingMessage::~SharingMessage() {
  // @@protoc_insertion_point(destructor:chrome_browser_sharing.SharingMessage)
  SharedDtor();
}

void SharingMessage::SharedDtor() {
  sender_guid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_device_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_payload()) {
    clear_payload();
  }
  if (has_ack_channel_configuration()) {
    clear_ack_channel_configuration();
  }
}

void SharingMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SharingMessage& SharingMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SharingMessage_sharing_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void SharingMessage::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:chrome_browser_sharing.SharingMessage)
  switch (payload_case()) {
    case kPingMessage: {
      delete payload_.ping_message_;
      break;
    }
    case kAckMessage: {
      delete payload_.ack_message_;
      break;
    }
    case kClickToCallMessage: {
      delete payload_.click_to_call_message_;
      break;
    }
    case kSharedClipboardMessage: {
      delete payload_.shared_clipboard_message_;
      break;
    }
    case kSmsFetchRequest: {
      delete payload_.sms_fetch_request_;
      break;
    }
    case kRemoteCopyMessage: {
      delete payload_.remote_copy_message_;
      break;
    }
    case kPeerConnectionOfferMessage: {
      delete payload_.peer_connection_offer_message_;
      break;
    }
    case kPeerConnectionIceCandidatesMessage: {
      delete payload_.peer_connection_ice_candidates_message_;
      break;
    }
    case kDiscoveryRequest: {
      delete payload_.discovery_request_;
      break;
    }
    case kWebRtcSignalingFrame: {
      delete payload_.web_rtc_signaling_frame_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}

void SharingMessage::clear_ack_channel_configuration() {
// @@protoc_insertion_point(one_of_clear_start:chrome_browser_sharing.SharingMessage)
  switch (ack_channel_configuration_case()) {
    case kFcmChannelConfiguration: {
      delete ack_channel_configuration_.fcm_channel_configuration_;
      break;
    }
    case kServerChannelConfiguration: {
      delete ack_channel_configuration_.server_channel_configuration_;
      break;
    }
    case ACK_CHANNEL_CONFIGURATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = ACK_CHANNEL_CONFIGURATION_NOT_SET;
}


void SharingMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_sharing.SharingMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sender_guid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_device_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_payload();
  clear_ack_channel_configuration();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SharingMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sender_guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sender_guid(), ptr, ctx, nullptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chrome_browser_sharing.PingMessage ping_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_ping_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chrome_browser_sharing.AckMessage ack_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_ack_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chrome_browser_sharing.ClickToCallMessage click_to_call_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_click_to_call_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chrome_browser_sharing.SharedClipboardMessage shared_clipboard_message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_shared_clipboard_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chrome_browser_sharing.FCMChannelConfiguration fcm_channel_configuration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_fcm_channel_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sender_device_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sender_device_name(), ptr, ctx, nullptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chrome_browser_sharing.SmsFetchRequest sms_fetch_request = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_sms_fetch_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chrome_browser_sharing.RemoteCopyMessage remote_copy_message = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_remote_copy_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chrome_browser_sharing.PeerConnectionOfferMessage peer_connection_offer_message = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_peer_connection_offer_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chrome_browser_sharing.PeerConnectionIceCandidatesMessage peer_connection_ice_candidates_message = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_peer_connection_ice_candidates_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chrome_browser_sharing.ServerChannelConfiguration server_channel_configuration = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_server_channel_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chrome_browser_sharing.DiscoveryRequest discovery_request = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_discovery_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chrome_browser_sharing.WebRtcSignalingMessage web_rtc_signaling_frame = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_web_rtc_signaling_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_message_id(), ptr, ctx, nullptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SharingMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_sharing.SharingMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sender_guid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_guid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sender_guid().data(), static_cast<int>(this->sender_guid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "chrome_browser_sharing.SharingMessage.sender_guid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chrome_browser_sharing.PingMessage ping_message = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ping_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chrome_browser_sharing.AckMessage ack_message = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ack_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chrome_browser_sharing.ClickToCallMessage click_to_call_message = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_click_to_call_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chrome_browser_sharing.SharedClipboardMessage shared_clipboard_message = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_shared_clipboard_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chrome_browser_sharing.FCMChannelConfiguration fcm_channel_configuration = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fcm_channel_configuration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sender_device_name = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_device_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sender_device_name().data(), static_cast<int>(this->sender_device_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "chrome_browser_sharing.SharingMessage.sender_device_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chrome_browser_sharing.SmsFetchRequest sms_fetch_request = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sms_fetch_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chrome_browser_sharing.RemoteCopyMessage remote_copy_message = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_remote_copy_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chrome_browser_sharing.PeerConnectionOfferMessage peer_connection_offer_message = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_peer_connection_offer_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chrome_browser_sharing.PeerConnectionIceCandidatesMessage peer_connection_ice_candidates_message = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_peer_connection_ice_candidates_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chrome_browser_sharing.ServerChannelConfiguration server_channel_configuration = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_server_channel_configuration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chrome_browser_sharing.DiscoveryRequest discovery_request = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_discovery_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chrome_browser_sharing.WebRtcSignalingMessage web_rtc_signaling_frame = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_web_rtc_signaling_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message_id = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_message_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->message_id().data(), static_cast<int>(this->message_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "chrome_browser_sharing.SharingMessage.message_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_sharing.SharingMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_sharing.SharingMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SharingMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_sharing.SharingMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender_guid = 1;
  if (this->sender_guid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sender_guid().data(), static_cast<int>(this->sender_guid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_sharing.SharingMessage.sender_guid");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sender_guid(), output);
  }

  // .chrome_browser_sharing.PingMessage ping_message = 2;
  if (has_ping_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::ping_message(this), output);
  }

  // .chrome_browser_sharing.AckMessage ack_message = 3;
  if (has_ack_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::ack_message(this), output);
  }

  // .chrome_browser_sharing.ClickToCallMessage click_to_call_message = 4;
  if (has_click_to_call_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::click_to_call_message(this), output);
  }

  // .chrome_browser_sharing.SharedClipboardMessage shared_clipboard_message = 5;
  if (has_shared_clipboard_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::shared_clipboard_message(this), output);
  }

  // .chrome_browser_sharing.FCMChannelConfiguration fcm_channel_configuration = 6;
  if (has_fcm_channel_configuration()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::fcm_channel_configuration(this), output);
  }

  // string sender_device_name = 7;
  if (this->sender_device_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sender_device_name().data(), static_cast<int>(this->sender_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_sharing.SharingMessage.sender_device_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sender_device_name(), output);
  }

  // .chrome_browser_sharing.SmsFetchRequest sms_fetch_request = 8;
  if (has_sms_fetch_request()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::sms_fetch_request(this), output);
  }

  // .chrome_browser_sharing.RemoteCopyMessage remote_copy_message = 9;
  if (has_remote_copy_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::remote_copy_message(this), output);
  }

  // .chrome_browser_sharing.PeerConnectionOfferMessage peer_connection_offer_message = 10;
  if (has_peer_connection_offer_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10, _Internal::peer_connection_offer_message(this), output);
  }

  // .chrome_browser_sharing.PeerConnectionIceCandidatesMessage peer_connection_ice_candidates_message = 11;
  if (has_peer_connection_ice_candidates_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::peer_connection_ice_candidates_message(this), output);
  }

  // .chrome_browser_sharing.ServerChannelConfiguration server_channel_configuration = 12;
  if (has_server_channel_configuration()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      12, _Internal::server_channel_configuration(this), output);
  }

  // .chrome_browser_sharing.DiscoveryRequest discovery_request = 13;
  if (has_discovery_request()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      13, _Internal::discovery_request(this), output);
  }

  // .chrome_browser_sharing.WebRtcSignalingMessage web_rtc_signaling_frame = 14;
  if (has_web_rtc_signaling_frame()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      14, _Internal::web_rtc_signaling_frame(this), output);
  }

  // string message_id = 15;
  if (this->message_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->message_id().data(), static_cast<int>(this->message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_sharing.SharingMessage.message_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->message_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_sharing.SharingMessage)
}

size_t SharingMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_sharing.SharingMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender_guid = 1;
  if (this->sender_guid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sender_guid());
  }

  // string sender_device_name = 7;
  if (this->sender_device_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sender_device_name());
  }

  // string message_id = 15;
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->message_id());
  }

  switch (payload_case()) {
    // .chrome_browser_sharing.PingMessage ping_message = 2;
    case kPingMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.ping_message_);
      break;
    }
    // .chrome_browser_sharing.AckMessage ack_message = 3;
    case kAckMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.ack_message_);
      break;
    }
    // .chrome_browser_sharing.ClickToCallMessage click_to_call_message = 4;
    case kClickToCallMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.click_to_call_message_);
      break;
    }
    // .chrome_browser_sharing.SharedClipboardMessage shared_clipboard_message = 5;
    case kSharedClipboardMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.shared_clipboard_message_);
      break;
    }
    // .chrome_browser_sharing.SmsFetchRequest sms_fetch_request = 8;
    case kSmsFetchRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.sms_fetch_request_);
      break;
    }
    // .chrome_browser_sharing.RemoteCopyMessage remote_copy_message = 9;
    case kRemoteCopyMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.remote_copy_message_);
      break;
    }
    // .chrome_browser_sharing.PeerConnectionOfferMessage peer_connection_offer_message = 10;
    case kPeerConnectionOfferMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.peer_connection_offer_message_);
      break;
    }
    // .chrome_browser_sharing.PeerConnectionIceCandidatesMessage peer_connection_ice_candidates_message = 11;
    case kPeerConnectionIceCandidatesMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.peer_connection_ice_candidates_message_);
      break;
    }
    // .chrome_browser_sharing.DiscoveryRequest discovery_request = 13;
    case kDiscoveryRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.discovery_request_);
      break;
    }
    // .chrome_browser_sharing.WebRtcSignalingMessage web_rtc_signaling_frame = 14;
    case kWebRtcSignalingFrame: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.web_rtc_signaling_frame_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  switch (ack_channel_configuration_case()) {
    // .chrome_browser_sharing.FCMChannelConfiguration fcm_channel_configuration = 6;
    case kFcmChannelConfiguration: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ack_channel_configuration_.fcm_channel_configuration_);
      break;
    }
    // .chrome_browser_sharing.ServerChannelConfiguration server_channel_configuration = 12;
    case kServerChannelConfiguration: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ack_channel_configuration_.server_channel_configuration_);
      break;
    }
    case ACK_CHANNEL_CONFIGURATION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SharingMessage*>(
      &from));
}

void SharingMessage::MergeFrom(const SharingMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_sharing.SharingMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sender_guid().size() > 0) {

    sender_guid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_guid_);
  }
  if (from.sender_device_name().size() > 0) {

    sender_device_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_device_name_);
  }
  if (from.message_id().size() > 0) {

    message_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_id_);
  }
  switch (from.payload_case()) {
    case kPingMessage: {
      mutable_ping_message()->::chrome_browser_sharing::PingMessage::MergeFrom(from.ping_message());
      break;
    }
    case kAckMessage: {
      mutable_ack_message()->::chrome_browser_sharing::AckMessage::MergeFrom(from.ack_message());
      break;
    }
    case kClickToCallMessage: {
      mutable_click_to_call_message()->::chrome_browser_sharing::ClickToCallMessage::MergeFrom(from.click_to_call_message());
      break;
    }
    case kSharedClipboardMessage: {
      mutable_shared_clipboard_message()->::chrome_browser_sharing::SharedClipboardMessage::MergeFrom(from.shared_clipboard_message());
      break;
    }
    case kSmsFetchRequest: {
      mutable_sms_fetch_request()->::chrome_browser_sharing::SmsFetchRequest::MergeFrom(from.sms_fetch_request());
      break;
    }
    case kRemoteCopyMessage: {
      mutable_remote_copy_message()->::chrome_browser_sharing::RemoteCopyMessage::MergeFrom(from.remote_copy_message());
      break;
    }
    case kPeerConnectionOfferMessage: {
      mutable_peer_connection_offer_message()->::chrome_browser_sharing::PeerConnectionOfferMessage::MergeFrom(from.peer_connection_offer_message());
      break;
    }
    case kPeerConnectionIceCandidatesMessage: {
      mutable_peer_connection_ice_candidates_message()->::chrome_browser_sharing::PeerConnectionIceCandidatesMessage::MergeFrom(from.peer_connection_ice_candidates_message());
      break;
    }
    case kDiscoveryRequest: {
      mutable_discovery_request()->::chrome_browser_sharing::DiscoveryRequest::MergeFrom(from.discovery_request());
      break;
    }
    case kWebRtcSignalingFrame: {
      mutable_web_rtc_signaling_frame()->::chrome_browser_sharing::WebRtcSignalingMessage::MergeFrom(from.web_rtc_signaling_frame());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  switch (from.ack_channel_configuration_case()) {
    case kFcmChannelConfiguration: {
      mutable_fcm_channel_configuration()->::chrome_browser_sharing::FCMChannelConfiguration::MergeFrom(from.fcm_channel_configuration());
      break;
    }
    case kServerChannelConfiguration: {
      mutable_server_channel_configuration()->::chrome_browser_sharing::ServerChannelConfiguration::MergeFrom(from.server_channel_configuration());
      break;
    }
    case ACK_CHANNEL_CONFIGURATION_NOT_SET: {
      break;
    }
  }
}

void SharingMessage::CopyFrom(const SharingMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_sharing.SharingMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingMessage::IsInitialized() const {
  return true;
}

void SharingMessage::InternalSwap(SharingMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sender_guid_.Swap(&other->sender_guid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sender_device_name_.Swap(&other->sender_device_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_id_.Swap(&other->message_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(payload_, other->payload_);
  swap(ack_channel_configuration_, other->ack_channel_configuration_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

std::string SharingMessage::GetTypeName() const {
  return "chrome_browser_sharing.SharingMessage";
}


// ===================================================================

void PingMessage::InitAsDefaultInstance() {
}
class PingMessage::_Internal {
 public:
};

PingMessage::PingMessage()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_sharing.PingMessage)
}
PingMessage::PingMessage(const PingMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chrome_browser_sharing.PingMessage)
}

void PingMessage::SharedCtor() {
}

PingMessage::~PingMessage() {
  // @@protoc_insertion_point(destructor:chrome_browser_sharing.PingMessage)
  SharedDtor();
}

void PingMessage::SharedDtor() {
}

void PingMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PingMessage& PingMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PingMessage_sharing_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void PingMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_sharing.PingMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PingMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PingMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_sharing.PingMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_sharing.PingMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_sharing.PingMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PingMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_sharing.PingMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_sharing.PingMessage)
}

size_t PingMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_sharing.PingMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PingMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PingMessage*>(
      &from));
}

void PingMessage::MergeFrom(const PingMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_sharing.PingMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PingMessage::CopyFrom(const PingMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_sharing.PingMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingMessage::IsInitialized() const {
  return true;
}

void PingMessage::InternalSwap(PingMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

std::string PingMessage::GetTypeName() const {
  return "chrome_browser_sharing.PingMessage";
}


// ===================================================================

void AckMessage::InitAsDefaultInstance() {
  ::chrome_browser_sharing::_AckMessage_default_instance_._instance.get_mutable()->response_message_ = const_cast< ::chrome_browser_sharing::ResponseMessage*>(
      ::chrome_browser_sharing::ResponseMessage::internal_default_instance());
}
class AckMessage::_Internal {
 public:
  static const ::chrome_browser_sharing::ResponseMessage& response_message(const AckMessage* msg);
};

const ::chrome_browser_sharing::ResponseMessage&
AckMessage::_Internal::response_message(const AckMessage* msg) {
  return *msg->response_message_;
}
AckMessage::AckMessage()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_sharing.AckMessage)
}
AckMessage::AckMessage(const AckMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  original_message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.original_message_id().empty()) {
    original_message_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.original_message_id_);
  }
  if (from.has_response_message()) {
    response_message_ = new ::chrome_browser_sharing::ResponseMessage(*from.response_message_);
  } else {
    response_message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:chrome_browser_sharing.AckMessage)
}

void AckMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AckMessage_sharing_5fmessage_2eproto.base);
  original_message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  response_message_ = nullptr;
}

AckMessage::~AckMessage() {
  // @@protoc_insertion_point(destructor:chrome_browser_sharing.AckMessage)
  SharedDtor();
}

void AckMessage::SharedDtor() {
  original_message_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete response_message_;
}

void AckMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AckMessage& AckMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AckMessage_sharing_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void AckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_sharing.AckMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  original_message_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && response_message_ != nullptr) {
    delete response_message_;
  }
  response_message_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AckMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string original_message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_original_message_id(), ptr, ctx, nullptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chrome_browser_sharing.ResponseMessage response_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_response_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AckMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_sharing.AckMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string original_message_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_original_message_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->original_message_id().data(), static_cast<int>(this->original_message_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "chrome_browser_sharing.AckMessage.original_message_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chrome_browser_sharing.ResponseMessage response_message = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_response_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_sharing.AckMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_sharing.AckMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AckMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_sharing.AckMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string original_message_id = 1;
  if (this->original_message_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->original_message_id().data(), static_cast<int>(this->original_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_sharing.AckMessage.original_message_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->original_message_id(), output);
  }

  // .chrome_browser_sharing.ResponseMessage response_message = 3;
  if (this->has_response_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::response_message(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_sharing.AckMessage)
}

size_t AckMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_sharing.AckMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string original_message_id = 1;
  if (this->original_message_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->original_message_id());
  }

  // .chrome_browser_sharing.ResponseMessage response_message = 3;
  if (this->has_response_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_message_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AckMessage*>(
      &from));
}

void AckMessage::MergeFrom(const AckMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_sharing.AckMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.original_message_id().size() > 0) {

    original_message_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.original_message_id_);
  }
  if (from.has_response_message()) {
    mutable_response_message()->::chrome_browser_sharing::ResponseMessage::MergeFrom(from.response_message());
  }
}

void AckMessage::CopyFrom(const AckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_sharing.AckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckMessage::IsInitialized() const {
  return true;
}

void AckMessage::InternalSwap(AckMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  original_message_id_.Swap(&other->original_message_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(response_message_, other->response_message_);
}

std::string AckMessage::GetTypeName() const {
  return "chrome_browser_sharing.AckMessage";
}


// ===================================================================

void ResponseMessage::InitAsDefaultInstance() {
}
class ResponseMessage::_Internal {
 public:
  static const ::chrome_browser_sharing::SmsFetchResponse& sms_fetch_response(const ResponseMessage* msg);
  static const ::chrome_browser_sharing::PeerConnectionAnswerMessage& peer_connection_answer_message_response(const ResponseMessage* msg);
  static const ::chrome_browser_sharing::DiscoveryResponse& discovery_response(const ResponseMessage* msg);
};

const ::chrome_browser_sharing::SmsFetchResponse&
ResponseMessage::_Internal::sms_fetch_response(const ResponseMessage* msg) {
  return *msg->payload_.sms_fetch_response_;
}
const ::chrome_browser_sharing::PeerConnectionAnswerMessage&
ResponseMessage::_Internal::peer_connection_answer_message_response(const ResponseMessage* msg) {
  return *msg->payload_.peer_connection_answer_message_response_;
}
const ::chrome_browser_sharing::DiscoveryResponse&
ResponseMessage::_Internal::discovery_response(const ResponseMessage* msg) {
  return *msg->payload_.discovery_response_;
}
void ResponseMessage::set_allocated_sms_fetch_response(::chrome_browser_sharing::SmsFetchResponse* sms_fetch_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (sms_fetch_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sms_fetch_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sms_fetch_response, submessage_arena);
    }
    set_has_sms_fetch_response();
    payload_.sms_fetch_response_ = sms_fetch_response;
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.ResponseMessage.sms_fetch_response)
}
void ResponseMessage::clear_sms_fetch_response() {
  if (has_sms_fetch_response()) {
    delete payload_.sms_fetch_response_;
    clear_has_payload();
  }
}
void ResponseMessage::set_allocated_peer_connection_answer_message_response(::chrome_browser_sharing::PeerConnectionAnswerMessage* peer_connection_answer_message_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (peer_connection_answer_message_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      peer_connection_answer_message_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer_connection_answer_message_response, submessage_arena);
    }
    set_has_peer_connection_answer_message_response();
    payload_.peer_connection_answer_message_response_ = peer_connection_answer_message_response;
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.ResponseMessage.peer_connection_answer_message_response)
}
void ResponseMessage::clear_peer_connection_answer_message_response() {
  if (has_peer_connection_answer_message_response()) {
    delete payload_.peer_connection_answer_message_response_;
    clear_has_payload();
  }
}
void ResponseMessage::set_allocated_discovery_response(::chrome_browser_sharing::DiscoveryResponse* discovery_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (discovery_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      discovery_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, discovery_response, submessage_arena);
    }
    set_has_discovery_response();
    payload_.discovery_response_ = discovery_response;
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.ResponseMessage.discovery_response)
}
ResponseMessage::ResponseMessage()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_sharing.ResponseMessage)
}
ResponseMessage::ResponseMessage(const ResponseMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kSmsFetchResponse: {
      mutable_sms_fetch_response()->::chrome_browser_sharing::SmsFetchResponse::MergeFrom(from.sms_fetch_response());
      break;
    }
    case kPeerConnectionAnswerMessageResponse: {
      mutable_peer_connection_answer_message_response()->::chrome_browser_sharing::PeerConnectionAnswerMessage::MergeFrom(from.peer_connection_answer_message_response());
      break;
    }
    case kDiscoveryResponse: {
      mutable_discovery_response()->::chrome_browser_sharing::DiscoveryResponse::MergeFrom(from.discovery_response());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:chrome_browser_sharing.ResponseMessage)
}

void ResponseMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResponseMessage_sharing_5fmessage_2eproto.base);
  clear_has_payload();
}

ResponseMessage::~ResponseMessage() {
  // @@protoc_insertion_point(destructor:chrome_browser_sharing.ResponseMessage)
  SharedDtor();
}

void ResponseMessage::SharedDtor() {
  if (has_payload()) {
    clear_payload();
  }
}

void ResponseMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResponseMessage& ResponseMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResponseMessage_sharing_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void ResponseMessage::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:chrome_browser_sharing.ResponseMessage)
  switch (payload_case()) {
    case kSmsFetchResponse: {
      delete payload_.sms_fetch_response_;
      break;
    }
    case kPeerConnectionAnswerMessageResponse: {
      delete payload_.peer_connection_answer_message_response_;
      break;
    }
    case kDiscoveryResponse: {
      delete payload_.discovery_response_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void ResponseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_sharing.ResponseMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResponseMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .chrome_browser_sharing.SmsFetchResponse sms_fetch_response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_sms_fetch_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chrome_browser_sharing.PeerConnectionAnswerMessage peer_connection_answer_message_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_peer_connection_answer_message_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chrome_browser_sharing.DiscoveryResponse discovery_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_discovery_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResponseMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_sharing.ResponseMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .chrome_browser_sharing.SmsFetchResponse sms_fetch_response = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sms_fetch_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chrome_browser_sharing.PeerConnectionAnswerMessage peer_connection_answer_message_response = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_peer_connection_answer_message_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chrome_browser_sharing.DiscoveryResponse discovery_response = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_discovery_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_sharing.ResponseMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_sharing.ResponseMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResponseMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_sharing.ResponseMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .chrome_browser_sharing.SmsFetchResponse sms_fetch_response = 1;
  if (has_sms_fetch_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::sms_fetch_response(this), output);
  }

  // .chrome_browser_sharing.PeerConnectionAnswerMessage peer_connection_answer_message_response = 2;
  if (has_peer_connection_answer_message_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::peer_connection_answer_message_response(this), output);
  }

  // .chrome_browser_sharing.DiscoveryResponse discovery_response = 3;
  if (has_discovery_response()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::discovery_response(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_sharing.ResponseMessage)
}

size_t ResponseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_sharing.ResponseMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .chrome_browser_sharing.SmsFetchResponse sms_fetch_response = 1;
    case kSmsFetchResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.sms_fetch_response_);
      break;
    }
    // .chrome_browser_sharing.PeerConnectionAnswerMessage peer_connection_answer_message_response = 2;
    case kPeerConnectionAnswerMessageResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.peer_connection_answer_message_response_);
      break;
    }
    // .chrome_browser_sharing.DiscoveryResponse discovery_response = 3;
    case kDiscoveryResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.discovery_response_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ResponseMessage*>(
      &from));
}

void ResponseMessage::MergeFrom(const ResponseMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_sharing.ResponseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kSmsFetchResponse: {
      mutable_sms_fetch_response()->::chrome_browser_sharing::SmsFetchResponse::MergeFrom(from.sms_fetch_response());
      break;
    }
    case kPeerConnectionAnswerMessageResponse: {
      mutable_peer_connection_answer_message_response()->::chrome_browser_sharing::PeerConnectionAnswerMessage::MergeFrom(from.peer_connection_answer_message_response());
      break;
    }
    case kDiscoveryResponse: {
      mutable_discovery_response()->::chrome_browser_sharing::DiscoveryResponse::MergeFrom(from.discovery_response());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void ResponseMessage::CopyFrom(const ResponseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_sharing.ResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseMessage::IsInitialized() const {
  return true;
}

void ResponseMessage::InternalSwap(ResponseMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string ResponseMessage::GetTypeName() const {
  return "chrome_browser_sharing.ResponseMessage";
}


// ===================================================================

void FCMChannelConfiguration::InitAsDefaultInstance() {
}
class FCMChannelConfiguration::_Internal {
 public:
};

FCMChannelConfiguration::FCMChannelConfiguration()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_sharing.FCMChannelConfiguration)
}
FCMChannelConfiguration::FCMChannelConfiguration(const FCMChannelConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vapid_fcm_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.vapid_fcm_token().empty()) {
    vapid_fcm_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vapid_fcm_token_);
  }
  vapid_p256dh_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.vapid_p256dh().empty()) {
    vapid_p256dh_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vapid_p256dh_);
  }
  vapid_auth_secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.vapid_auth_secret().empty()) {
    vapid_auth_secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vapid_auth_secret_);
  }
  sender_id_fcm_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sender_id_fcm_token().empty()) {
    sender_id_fcm_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_id_fcm_token_);
  }
  sender_id_p256dh_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sender_id_p256dh().empty()) {
    sender_id_p256dh_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_id_p256dh_);
  }
  sender_id_auth_secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sender_id_auth_secret().empty()) {
    sender_id_auth_secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_id_auth_secret_);
  }
  // @@protoc_insertion_point(copy_constructor:chrome_browser_sharing.FCMChannelConfiguration)
}

void FCMChannelConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FCMChannelConfiguration_sharing_5fmessage_2eproto.base);
  vapid_fcm_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vapid_p256dh_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vapid_auth_secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_id_fcm_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_id_p256dh_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_id_auth_secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FCMChannelConfiguration::~FCMChannelConfiguration() {
  // @@protoc_insertion_point(destructor:chrome_browser_sharing.FCMChannelConfiguration)
  SharedDtor();
}

void FCMChannelConfiguration::SharedDtor() {
  vapid_fcm_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vapid_p256dh_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vapid_auth_secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_id_fcm_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_id_p256dh_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_id_auth_secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FCMChannelConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FCMChannelConfiguration& FCMChannelConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FCMChannelConfiguration_sharing_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void FCMChannelConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_sharing.FCMChannelConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vapid_fcm_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vapid_p256dh_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vapid_auth_secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_id_fcm_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_id_p256dh_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sender_id_auth_secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FCMChannelConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string vapid_fcm_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_vapid_fcm_token(), ptr, ctx, nullptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes vapid_p256dh = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_vapid_p256dh(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes vapid_auth_secret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_vapid_auth_secret(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sender_id_fcm_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sender_id_fcm_token(), ptr, ctx, nullptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sender_id_p256dh = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_sender_id_p256dh(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sender_id_auth_secret = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_sender_id_auth_secret(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FCMChannelConfiguration::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_sharing.FCMChannelConfiguration)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string vapid_fcm_token = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_vapid_fcm_token()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->vapid_fcm_token().data(), static_cast<int>(this->vapid_fcm_token().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "chrome_browser_sharing.FCMChannelConfiguration.vapid_fcm_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes vapid_p256dh = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vapid_p256dh()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes vapid_auth_secret = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vapid_auth_secret()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sender_id_fcm_token = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_id_fcm_token()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sender_id_fcm_token().data(), static_cast<int>(this->sender_id_fcm_token().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "chrome_browser_sharing.FCMChannelConfiguration.sender_id_fcm_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes sender_id_p256dh = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sender_id_p256dh()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes sender_id_auth_secret = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sender_id_auth_secret()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_sharing.FCMChannelConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_sharing.FCMChannelConfiguration)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FCMChannelConfiguration::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_sharing.FCMChannelConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string vapid_fcm_token = 1;
  if (this->vapid_fcm_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->vapid_fcm_token().data(), static_cast<int>(this->vapid_fcm_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_sharing.FCMChannelConfiguration.vapid_fcm_token");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vapid_fcm_token(), output);
  }

  // bytes vapid_p256dh = 2;
  if (this->vapid_p256dh().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->vapid_p256dh(), output);
  }

  // bytes vapid_auth_secret = 3;
  if (this->vapid_auth_secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->vapid_auth_secret(), output);
  }

  // string sender_id_fcm_token = 4;
  if (this->sender_id_fcm_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sender_id_fcm_token().data(), static_cast<int>(this->sender_id_fcm_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_sharing.FCMChannelConfiguration.sender_id_fcm_token");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sender_id_fcm_token(), output);
  }

  // bytes sender_id_p256dh = 5;
  if (this->sender_id_p256dh().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->sender_id_p256dh(), output);
  }

  // bytes sender_id_auth_secret = 6;
  if (this->sender_id_auth_secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->sender_id_auth_secret(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_sharing.FCMChannelConfiguration)
}

size_t FCMChannelConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_sharing.FCMChannelConfiguration)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vapid_fcm_token = 1;
  if (this->vapid_fcm_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->vapid_fcm_token());
  }

  // bytes vapid_p256dh = 2;
  if (this->vapid_p256dh().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->vapid_p256dh());
  }

  // bytes vapid_auth_secret = 3;
  if (this->vapid_auth_secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->vapid_auth_secret());
  }

  // string sender_id_fcm_token = 4;
  if (this->sender_id_fcm_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sender_id_fcm_token());
  }

  // bytes sender_id_p256dh = 5;
  if (this->sender_id_p256dh().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->sender_id_p256dh());
  }

  // bytes sender_id_auth_secret = 6;
  if (this->sender_id_auth_secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->sender_id_auth_secret());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FCMChannelConfiguration::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FCMChannelConfiguration*>(
      &from));
}

void FCMChannelConfiguration::MergeFrom(const FCMChannelConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_sharing.FCMChannelConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vapid_fcm_token().size() > 0) {

    vapid_fcm_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vapid_fcm_token_);
  }
  if (from.vapid_p256dh().size() > 0) {

    vapid_p256dh_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vapid_p256dh_);
  }
  if (from.vapid_auth_secret().size() > 0) {

    vapid_auth_secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vapid_auth_secret_);
  }
  if (from.sender_id_fcm_token().size() > 0) {

    sender_id_fcm_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_id_fcm_token_);
  }
  if (from.sender_id_p256dh().size() > 0) {

    sender_id_p256dh_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_id_p256dh_);
  }
  if (from.sender_id_auth_secret().size() > 0) {

    sender_id_auth_secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sender_id_auth_secret_);
  }
}

void FCMChannelConfiguration::CopyFrom(const FCMChannelConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_sharing.FCMChannelConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FCMChannelConfiguration::IsInitialized() const {
  return true;
}

void FCMChannelConfiguration::InternalSwap(FCMChannelConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vapid_fcm_token_.Swap(&other->vapid_fcm_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  vapid_p256dh_.Swap(&other->vapid_p256dh_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  vapid_auth_secret_.Swap(&other->vapid_auth_secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sender_id_fcm_token_.Swap(&other->sender_id_fcm_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sender_id_p256dh_.Swap(&other->sender_id_p256dh_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sender_id_auth_secret_.Swap(&other->sender_id_auth_secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string FCMChannelConfiguration::GetTypeName() const {
  return "chrome_browser_sharing.FCMChannelConfiguration";
}


// ===================================================================

void ServerChannelConfiguration::InitAsDefaultInstance() {
}
class ServerChannelConfiguration::_Internal {
 public:
};

ServerChannelConfiguration::ServerChannelConfiguration()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_sharing.ServerChannelConfiguration)
}
ServerChannelConfiguration::ServerChannelConfiguration(const ServerChannelConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  configuration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.configuration().empty()) {
    configuration_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.configuration_);
  }
  p256dh_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.p256dh().empty()) {
    p256dh_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.p256dh_);
  }
  auth_secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.auth_secret().empty()) {
    auth_secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_secret_);
  }
  // @@protoc_insertion_point(copy_constructor:chrome_browser_sharing.ServerChannelConfiguration)
}

void ServerChannelConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerChannelConfiguration_sharing_5fmessage_2eproto.base);
  configuration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  p256dh_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ServerChannelConfiguration::~ServerChannelConfiguration() {
  // @@protoc_insertion_point(destructor:chrome_browser_sharing.ServerChannelConfiguration)
  SharedDtor();
}

void ServerChannelConfiguration::SharedDtor() {
  configuration_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  p256dh_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServerChannelConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerChannelConfiguration& ServerChannelConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerChannelConfiguration_sharing_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void ServerChannelConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_sharing.ServerChannelConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  configuration_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  p256dh_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ServerChannelConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes configuration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_configuration(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes p256dh = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_p256dh(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes auth_secret = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_auth_secret(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ServerChannelConfiguration::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_sharing.ServerChannelConfiguration)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes configuration = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_configuration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes p256dh = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_p256dh()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes auth_secret = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_auth_secret()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_sharing.ServerChannelConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_sharing.ServerChannelConfiguration)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ServerChannelConfiguration::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_sharing.ServerChannelConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes configuration = 3;
  if (this->configuration().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->configuration(), output);
  }

  // bytes p256dh = 4;
  if (this->p256dh().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->p256dh(), output);
  }

  // bytes auth_secret = 5;
  if (this->auth_secret().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->auth_secret(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_sharing.ServerChannelConfiguration)
}

size_t ServerChannelConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_sharing.ServerChannelConfiguration)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes configuration = 3;
  if (this->configuration().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->configuration());
  }

  // bytes p256dh = 4;
  if (this->p256dh().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->p256dh());
  }

  // bytes auth_secret = 5;
  if (this->auth_secret().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->auth_secret());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerChannelConfiguration::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ServerChannelConfiguration*>(
      &from));
}

void ServerChannelConfiguration::MergeFrom(const ServerChannelConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_sharing.ServerChannelConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.configuration().size() > 0) {

    configuration_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.configuration_);
  }
  if (from.p256dh().size() > 0) {

    p256dh_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.p256dh_);
  }
  if (from.auth_secret().size() > 0) {

    auth_secret_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.auth_secret_);
  }
}

void ServerChannelConfiguration::CopyFrom(const ServerChannelConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_sharing.ServerChannelConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerChannelConfiguration::IsInitialized() const {
  return true;
}

void ServerChannelConfiguration::InternalSwap(ServerChannelConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  configuration_.Swap(&other->configuration_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  p256dh_.Swap(&other->p256dh_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  auth_secret_.Swap(&other->auth_secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string ServerChannelConfiguration::GetTypeName() const {
  return "chrome_browser_sharing.ServerChannelConfiguration";
}


// ===================================================================

void DiscoveryRequest::InitAsDefaultInstance() {
}
class DiscoveryRequest::_Internal {
 public:
};

DiscoveryRequest::DiscoveryRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_sharing.DiscoveryRequest)
}
DiscoveryRequest::DiscoveryRequest(const DiscoveryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.service_id().empty()) {
    service_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_id_);
  }
  // @@protoc_insertion_point(copy_constructor:chrome_browser_sharing.DiscoveryRequest)
}

void DiscoveryRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiscoveryRequest_sharing_5fmessage_2eproto.base);
  service_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DiscoveryRequest::~DiscoveryRequest() {
  // @@protoc_insertion_point(destructor:chrome_browser_sharing.DiscoveryRequest)
  SharedDtor();
}

void DiscoveryRequest::SharedDtor() {
  service_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiscoveryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiscoveryRequest& DiscoveryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiscoveryRequest_sharing_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void DiscoveryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_sharing.DiscoveryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DiscoveryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string service_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_service_id(), ptr, ctx, nullptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DiscoveryRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_sharing.DiscoveryRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string service_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_service_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->service_id().data(), static_cast<int>(this->service_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "chrome_browser_sharing.DiscoveryRequest.service_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_sharing.DiscoveryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_sharing.DiscoveryRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DiscoveryRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_sharing.DiscoveryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_id = 1;
  if (this->service_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->service_id().data(), static_cast<int>(this->service_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_sharing.DiscoveryRequest.service_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_sharing.DiscoveryRequest)
}

size_t DiscoveryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_sharing.DiscoveryRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_id = 1;
  if (this->service_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->service_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiscoveryRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DiscoveryRequest*>(
      &from));
}

void DiscoveryRequest::MergeFrom(const DiscoveryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_sharing.DiscoveryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_id().size() > 0) {

    service_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_id_);
  }
}

void DiscoveryRequest::CopyFrom(const DiscoveryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_sharing.DiscoveryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscoveryRequest::IsInitialized() const {
  return true;
}

void DiscoveryRequest::InternalSwap(DiscoveryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  service_id_.Swap(&other->service_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string DiscoveryRequest::GetTypeName() const {
  return "chrome_browser_sharing.DiscoveryRequest";
}


// ===================================================================

void DiscoveryResponse::InitAsDefaultInstance() {
}
class DiscoveryResponse::_Internal {
 public:
};

DiscoveryResponse::DiscoveryResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_sharing.DiscoveryResponse)
}
DiscoveryResponse::DiscoveryResponse(const DiscoveryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.service_id().empty()) {
    service_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_id_);
  }
  endpoint_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.endpoint_id().empty()) {
    endpoint_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.endpoint_id_);
  }
  endpoint_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.endpoint_info().empty()) {
    endpoint_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.endpoint_info_);
  }
  // @@protoc_insertion_point(copy_constructor:chrome_browser_sharing.DiscoveryResponse)
}

void DiscoveryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DiscoveryResponse_sharing_5fmessage_2eproto.base);
  service_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endpoint_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endpoint_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DiscoveryResponse::~DiscoveryResponse() {
  // @@protoc_insertion_point(destructor:chrome_browser_sharing.DiscoveryResponse)
  SharedDtor();
}

void DiscoveryResponse::SharedDtor() {
  service_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endpoint_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endpoint_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiscoveryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DiscoveryResponse& DiscoveryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DiscoveryResponse_sharing_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void DiscoveryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_sharing.DiscoveryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endpoint_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endpoint_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DiscoveryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string service_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_service_id(), ptr, ctx, nullptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string endpoint_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_endpoint_id(), ptr, ctx, nullptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes endpoint_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_endpoint_info(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DiscoveryResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_sharing.DiscoveryResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string service_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_service_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->service_id().data(), static_cast<int>(this->service_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "chrome_browser_sharing.DiscoveryResponse.service_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string endpoint_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_endpoint_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->endpoint_id().data(), static_cast<int>(this->endpoint_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "chrome_browser_sharing.DiscoveryResponse.endpoint_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes endpoint_info = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_endpoint_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_sharing.DiscoveryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_sharing.DiscoveryResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DiscoveryResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_sharing.DiscoveryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_id = 1;
  if (this->service_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->service_id().data(), static_cast<int>(this->service_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_sharing.DiscoveryResponse.service_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_id(), output);
  }

  // string endpoint_id = 2;
  if (this->endpoint_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->endpoint_id().data(), static_cast<int>(this->endpoint_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_sharing.DiscoveryResponse.endpoint_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->endpoint_id(), output);
  }

  // bytes endpoint_info = 3;
  if (this->endpoint_info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->endpoint_info(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_sharing.DiscoveryResponse)
}

size_t DiscoveryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_sharing.DiscoveryResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_id = 1;
  if (this->service_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->service_id());
  }

  // string endpoint_id = 2;
  if (this->endpoint_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->endpoint_id());
  }

  // bytes endpoint_info = 3;
  if (this->endpoint_info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->endpoint_info());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiscoveryResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DiscoveryResponse*>(
      &from));
}

void DiscoveryResponse::MergeFrom(const DiscoveryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_sharing.DiscoveryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_id().size() > 0) {

    service_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_id_);
  }
  if (from.endpoint_id().size() > 0) {

    endpoint_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.endpoint_id_);
  }
  if (from.endpoint_info().size() > 0) {

    endpoint_info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.endpoint_info_);
  }
}

void DiscoveryResponse::CopyFrom(const DiscoveryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_sharing.DiscoveryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscoveryResponse::IsInitialized() const {
  return true;
}

void DiscoveryResponse::InternalSwap(DiscoveryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  service_id_.Swap(&other->service_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  endpoint_id_.Swap(&other->endpoint_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  endpoint_info_.Swap(&other->endpoint_info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string DiscoveryResponse::GetTypeName() const {
  return "chrome_browser_sharing.DiscoveryResponse";
}


// ===================================================================

void WebRtcSignalingMessage::InitAsDefaultInstance() {
}
class WebRtcSignalingMessage::_Internal {
 public:
};

WebRtcSignalingMessage::WebRtcSignalingMessage()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_sharing.WebRtcSignalingMessage)
}
WebRtcSignalingMessage::WebRtcSignalingMessage(const WebRtcSignalingMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  web_rtc_signaling_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.web_rtc_signaling_frame().empty()) {
    web_rtc_signaling_frame_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.web_rtc_signaling_frame_);
  }
  // @@protoc_insertion_point(copy_constructor:chrome_browser_sharing.WebRtcSignalingMessage)
}

void WebRtcSignalingMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WebRtcSignalingMessage_sharing_5fmessage_2eproto.base);
  web_rtc_signaling_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WebRtcSignalingMessage::~WebRtcSignalingMessage() {
  // @@protoc_insertion_point(destructor:chrome_browser_sharing.WebRtcSignalingMessage)
  SharedDtor();
}

void WebRtcSignalingMessage::SharedDtor() {
  web_rtc_signaling_frame_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WebRtcSignalingMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WebRtcSignalingMessage& WebRtcSignalingMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WebRtcSignalingMessage_sharing_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void WebRtcSignalingMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_sharing.WebRtcSignalingMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  web_rtc_signaling_frame_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WebRtcSignalingMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes web_rtc_signaling_frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_web_rtc_signaling_frame(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WebRtcSignalingMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_sharing.WebRtcSignalingMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes web_rtc_signaling_frame = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_web_rtc_signaling_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_sharing.WebRtcSignalingMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_sharing.WebRtcSignalingMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WebRtcSignalingMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_sharing.WebRtcSignalingMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes web_rtc_signaling_frame = 1;
  if (this->web_rtc_signaling_frame().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->web_rtc_signaling_frame(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_sharing.WebRtcSignalingMessage)
}

size_t WebRtcSignalingMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_sharing.WebRtcSignalingMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes web_rtc_signaling_frame = 1;
  if (this->web_rtc_signaling_frame().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->web_rtc_signaling_frame());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WebRtcSignalingMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const WebRtcSignalingMessage*>(
      &from));
}

void WebRtcSignalingMessage::MergeFrom(const WebRtcSignalingMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_sharing.WebRtcSignalingMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.web_rtc_signaling_frame().size() > 0) {

    web_rtc_signaling_frame_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.web_rtc_signaling_frame_);
  }
}

void WebRtcSignalingMessage::CopyFrom(const WebRtcSignalingMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_sharing.WebRtcSignalingMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebRtcSignalingMessage::IsInitialized() const {
  return true;
}

void WebRtcSignalingMessage::InternalSwap(WebRtcSignalingMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  web_rtc_signaling_frame_.Swap(&other->web_rtc_signaling_frame_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string WebRtcSignalingMessage::GetTypeName() const {
  return "chrome_browser_sharing.WebRtcSignalingMessage";
}


// ===================================================================

void WebRtcMessage::InitAsDefaultInstance() {
  ::chrome_browser_sharing::_WebRtcMessage_default_instance_._instance.get_mutable()->message_ = const_cast< ::chrome_browser_sharing::SharingMessage*>(
      ::chrome_browser_sharing::SharingMessage::internal_default_instance());
}
class WebRtcMessage::_Internal {
 public:
  static const ::chrome_browser_sharing::SharingMessage& message(const WebRtcMessage* msg);
};

const ::chrome_browser_sharing::SharingMessage&
WebRtcMessage::_Internal::message(const WebRtcMessage* msg) {
  return *msg->message_;
}
WebRtcMessage::WebRtcMessage()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_sharing.WebRtcMessage)
}
WebRtcMessage::WebRtcMessage(const WebRtcMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.message_guid().empty()) {
    message_guid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_guid_);
  }
  if (from.has_message()) {
    message_ = new ::chrome_browser_sharing::SharingMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:chrome_browser_sharing.WebRtcMessage)
}

void WebRtcMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WebRtcMessage_sharing_5fmessage_2eproto.base);
  message_guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_ = nullptr;
}

WebRtcMessage::~WebRtcMessage() {
  // @@protoc_insertion_point(destructor:chrome_browser_sharing.WebRtcMessage)
  SharedDtor();
}

void WebRtcMessage::SharedDtor() {
  message_guid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete message_;
}

void WebRtcMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WebRtcMessage& WebRtcMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WebRtcMessage_sharing_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void WebRtcMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_sharing.WebRtcMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_guid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WebRtcMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message_guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_message_guid(), ptr, ctx, nullptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .chrome_browser_sharing.SharingMessage message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WebRtcMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_sharing.WebRtcMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string message_guid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_message_guid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->message_guid().data(), static_cast<int>(this->message_guid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "chrome_browser_sharing.WebRtcMessage.message_guid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chrome_browser_sharing.SharingMessage message = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_sharing.WebRtcMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_sharing.WebRtcMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WebRtcMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_sharing.WebRtcMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_guid = 1;
  if (this->message_guid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->message_guid().data(), static_cast<int>(this->message_guid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_sharing.WebRtcMessage.message_guid");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message_guid(), output);
  }

  // .chrome_browser_sharing.SharingMessage message = 2;
  if (this->has_message()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::message(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_sharing.WebRtcMessage)
}

size_t WebRtcMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_sharing.WebRtcMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message_guid = 1;
  if (this->message_guid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->message_guid());
  }

  // .chrome_browser_sharing.SharingMessage message = 2;
  if (this->has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WebRtcMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const WebRtcMessage*>(
      &from));
}

void WebRtcMessage::MergeFrom(const WebRtcMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_sharing.WebRtcMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message_guid().size() > 0) {

    message_guid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_guid_);
  }
  if (from.has_message()) {
    mutable_message()->::chrome_browser_sharing::SharingMessage::MergeFrom(from.message());
  }
}

void WebRtcMessage::CopyFrom(const WebRtcMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_sharing.WebRtcMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebRtcMessage::IsInitialized() const {
  return true;
}

void WebRtcMessage::InternalSwap(WebRtcMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_guid_.Swap(&other->message_guid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(message_, other->message_);
}

std::string WebRtcMessage::GetTypeName() const {
  return "chrome_browser_sharing.WebRtcMessage";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chrome_browser_sharing
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::chrome_browser_sharing::SharingMessage* Arena::CreateMaybeMessage< ::chrome_browser_sharing::SharingMessage >(Arena* arena) {
  return Arena::CreateInternal< ::chrome_browser_sharing::SharingMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_sharing::PingMessage* Arena::CreateMaybeMessage< ::chrome_browser_sharing::PingMessage >(Arena* arena) {
  return Arena::CreateInternal< ::chrome_browser_sharing::PingMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_sharing::AckMessage* Arena::CreateMaybeMessage< ::chrome_browser_sharing::AckMessage >(Arena* arena) {
  return Arena::CreateInternal< ::chrome_browser_sharing::AckMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_sharing::ResponseMessage* Arena::CreateMaybeMessage< ::chrome_browser_sharing::ResponseMessage >(Arena* arena) {
  return Arena::CreateInternal< ::chrome_browser_sharing::ResponseMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_sharing::FCMChannelConfiguration* Arena::CreateMaybeMessage< ::chrome_browser_sharing::FCMChannelConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::chrome_browser_sharing::FCMChannelConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_sharing::ServerChannelConfiguration* Arena::CreateMaybeMessage< ::chrome_browser_sharing::ServerChannelConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::chrome_browser_sharing::ServerChannelConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_sharing::DiscoveryRequest* Arena::CreateMaybeMessage< ::chrome_browser_sharing::DiscoveryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::chrome_browser_sharing::DiscoveryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_sharing::DiscoveryResponse* Arena::CreateMaybeMessage< ::chrome_browser_sharing::DiscoveryResponse >(Arena* arena) {
  return Arena::CreateInternal< ::chrome_browser_sharing::DiscoveryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_sharing::WebRtcSignalingMessage* Arena::CreateMaybeMessage< ::chrome_browser_sharing::WebRtcSignalingMessage >(Arena* arena) {
  return Arena::CreateInternal< ::chrome_browser_sharing::WebRtcSignalingMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_sharing::WebRtcMessage* Arena::CreateMaybeMessage< ::chrome_browser_sharing::WebRtcMessage >(Arena* arena) {
  return Arena::CreateInternal< ::chrome_browser_sharing::WebRtcMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sharing_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sharing_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sharing_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "click_to_call_message.pb.h"
#include "peer_connection_messages.pb.h"
#include "remote_copy_message.pb.h"
#include "shared_clipboard_message.pb.h"
#include "sms_fetch_message.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sharing_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sharing_5fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace chrome_browser_sharing {
class AckMessage;
class AckMessageDefaultTypeInternal;
extern AckMessageDefaultTypeInternal _AckMessage_default_instance_;
class DiscoveryRequest;
class DiscoveryRequestDefaultTypeInternal;
extern DiscoveryRequestDefaultTypeInternal _DiscoveryRequest_default_instance_;
class DiscoveryResponse;
class DiscoveryResponseDefaultTypeInternal;
extern DiscoveryResponseDefaultTypeInternal _DiscoveryResponse_default_instance_;
class FCMChannelConfiguration;
class FCMChannelConfigurationDefaultTypeInternal;
extern FCMChannelConfigurationDefaultTypeInternal _FCMChannelConfiguration_default_instance_;
class PingMessage;
class PingMessageDefaultTypeInternal;
extern PingMessageDefaultTypeInternal _PingMessage_default_instance_;
class ResponseMessage;
class ResponseMessageDefaultTypeInternal;
extern ResponseMessageDefaultTypeInternal _ResponseMessage_default_instance_;
class ServerChannelConfiguration;
class ServerChannelConfigurationDefaultTypeInternal;
extern ServerChannelConfigurationDefaultTypeInternal _ServerChannelConfiguration_default_instance_;
class SharingMessage;
class SharingMessageDefaultTypeInternal;
extern SharingMessageDefaultTypeInternal _SharingMessage_default_instance_;
class WebRtcMessage;
class WebRtcMessageDefaultTypeInternal;
extern WebRtcMessageDefaultTypeInternal _WebRtcMessage_default_instance_;
class WebRtcSignalingMessage;
class WebRtcSignalingMessageDefaultTypeInternal;
extern WebRtcSignalingMessageDefaultTypeInternal _WebRtcSignalingMessage_default_instance_;
}  // namespace chrome_browser_sharing
PROTOBUF_NAMESPACE_OPEN
template<> ::chrome_browser_sharing::AckMessage* Arena::CreateMaybeMessage<::chrome_browser_sharing::AckMessage>(Arena*);
template<> ::chrome_browser_sharing::DiscoveryRequest* Arena::CreateMaybeMessage<::chrome_browser_sharing::DiscoveryRequest>(Arena*);
template<> ::chrome_browser_sharing::DiscoveryResponse* Arena::CreateMaybeMessage<::chrome_browser_sharing::DiscoveryResponse>(Arena*);
template<> ::chrome_browser_sharing::FCMChannelConfiguration* Arena::CreateMaybeMessage<::chrome_browser_sharing::FCMChannelConfiguration>(Arena*);
template<> ::chrome_browser_sharing::PingMessage* Arena::CreateMaybeMessage<::chrome_browser_sharing::PingMessage>(Arena*);
template<> ::chrome_browser_sharing::ResponseMessage* Arena::CreateMaybeMessage<::chrome_browser_sharing::ResponseMessage>(Arena*);
template<> ::chrome_browser_sharing::ServerChannelConfiguration* Arena::CreateMaybeMessage<::chrome_browser_sharing::ServerChannelConfiguration>(Arena*);
template<> ::chrome_browser_sharing::SharingMessage* Arena::CreateMaybeMessage<::chrome_browser_sharing::SharingMessage>(Arena*);
template<> ::chrome_browser_sharing::WebRtcMessage* Arena::CreateMaybeMessage<::chrome_browser_sharing::WebRtcMessage>(Arena*);
template<> ::chrome_browser_sharing::WebRtcSignalingMessage* Arena::CreateMaybeMessage<::chrome_browser_sharing::WebRtcSignalingMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chrome_browser_sharing {

enum MessageType : int {
  UNKNOWN_MESSAGE = 0,
  PING_MESSAGE = 1,
  ACK_MESSAGE = 2,
  CLICK_TO_CALL_MESSAGE = 3,
  SHARED_CLIPBOARD_MESSAGE = 4,
  SMS_FETCH_REQUEST = 5,
  REMOTE_COPY_MESSAGE = 6,
  PEER_CONNECTION_OFFER_MESSAGE = 7,
  PEER_CONNECTION_ICE_CANDIDATES_MESSAGE = 8,
  DISCOVERY_REQUEST = 9,
  WEB_RTC_SIGNALING_FRAME = 10,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = UNKNOWN_MESSAGE;
constexpr MessageType MessageType_MAX = WEB_RTC_SIGNALING_FRAME;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const std::string& MessageType_Name(MessageType value);
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return MessageType_Name(static_cast<MessageType>(enum_t_value));
}
bool MessageType_Parse(
    const std::string& name, MessageType* value);
// ===================================================================

class SharingMessage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_sharing.SharingMessage) */ {
 public:
  SharingMessage();
  virtual ~SharingMessage();

  SharingMessage(const SharingMessage& from);
  SharingMessage(SharingMessage&& from) noexcept
    : SharingMessage() {
    *this = ::std::move(from);
  }

  inline SharingMessage& operator=(const SharingMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SharingMessage& operator=(SharingMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SharingMessage& default_instance();

  enum PayloadCase {
    kPingMessage = 2,
    kAckMessage = 3,
    kClickToCallMessage = 4,
    kSharedClipboardMessage = 5,
    kSmsFetchRequest = 8,
    kRemoteCopyMessage = 9,
    kPeerConnectionOfferMessage = 10,
    kPeerConnectionIceCandidatesMessage = 11,
    kDiscoveryRequest = 13,
    kWebRtcSignalingFrame = 14,
    PAYLOAD_NOT_SET = 0,
  };

  enum AckChannelConfigurationCase {
    kFcmChannelConfiguration = 6,
    kServerChannelConfiguration = 12,
    ACK_CHANNEL_CONFIGURATION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SharingMessage* internal_default_instance() {
    return reinterpret_cast<const SharingMessage*>(
               &_SharingMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SharingMessage& a, SharingMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SharingMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SharingMessage* New() const final {
    return CreateMaybeMessage<SharingMessage>(nullptr);
  }

  SharingMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SharingMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SharingMessage& from);
  void MergeFrom(const SharingMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SharingMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_sharing.SharingMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderGuidFieldNumber = 1,
    kSenderDeviceNameFieldNumber = 7,
    kMessageIdFieldNumber = 15,
    kPingMessageFieldNumber = 2,
    kAckMessageFieldNumber = 3,
    kClickToCallMessageFieldNumber = 4,
    kSharedClipboardMessageFieldNumber = 5,
    kSmsFetchRequestFieldNumber = 8,
    kRemoteCopyMessageFieldNumber = 9,
    kPeerConnectionOfferMessageFieldNumber = 10,
    kPeerConnectionIceCandidatesMessageFieldNumber = 11,
    kDiscoveryRequestFieldNumber = 13,
    kWebRtcSignalingFrameFieldNumber = 14,
    kFcmChannelConfigurationFieldNumber = 6,
    kServerChannelConfigurationFieldNumber = 12,
  };
  // string sender_guid = 1;
  void clear_sender_guid();
  const std::string& sender_guid() const;
  void set_sender_guid(const std::string& value);
  void set_sender_guid(std::string&& value);
  void set_sender_guid(const char* value);
  void set_sender_guid(const char* value, size_t size);
  std::string* mutable_sender_guid();
  std::string* release_sender_guid();
  void set_allocated_sender_guid(std::string* sender_guid);

  // string sender_device_name = 7;
  void clear_sender_device_name();
  const std::string& sender_device_name() const;
  void set_sender_device_name(const std::string& value);
  void set_sender_device_name(std::string&& value);
  void set_sender_device_name(const char* value);
  void set_sender_device_name(const char* value, size_t size);
  std::string* mutable_sender_device_name();
  std::string* release_sender_device_name();
  void set_allocated_sender_device_name(std::string* sender_device_name);

  // string message_id = 15;
  void clear_message_id();
  const std::string& message_id() const;
  void set_message_id(const std::string& value);
  void set_message_id(std::string&& value);
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  std::string* mutable_message_id();
  std::string* release_message_id();
  void set_allocated_message_id(std::string* message_id);

  // .chrome_browser_sharing.PingMessage ping_message = 2;
  bool has_ping_message() const;
  void clear_ping_message();
  const ::chrome_browser_sharing::PingMessage& ping_message() const;
  ::chrome_browser_sharing::PingMessage* release_ping_message();
  ::chrome_browser_sharing::PingMessage* mutable_ping_message();
  void set_allocated_ping_message(::chrome_browser_sharing::PingMessage* ping_message);

  // .chrome_browser_sharing.AckMessage ack_message = 3;
  bool has_ack_message() const;
  void clear_ack_message();
  const ::chrome_browser_sharing::AckMessage& ack_message() const;
  ::chrome_browser_sharing::AckMessage* release_ack_message();
  ::chrome_browser_sharing::AckMessage* mutable_ack_message();
  void set_allocated_ack_message(::chrome_browser_sharing::AckMessage* ack_message);

  // .chrome_browser_sharing.ClickToCallMessage click_to_call_message = 4;
  bool has_click_to_call_message() const;
  void clear_click_to_call_message();
  const ::chrome_browser_sharing::ClickToCallMessage& click_to_call_message() const;
  ::chrome_browser_sharing::ClickToCallMessage* release_click_to_call_message();
  ::chrome_browser_sharing::ClickToCallMessage* mutable_click_to_call_message();
  void set_allocated_click_to_call_message(::chrome_browser_sharing::ClickToCallMessage* click_to_call_message);

  // .chrome_browser_sharing.SharedClipboardMessage shared_clipboard_message = 5;
  bool has_shared_clipboard_message() const;
  void clear_shared_clipboard_message();
  const ::chrome_browser_sharing::SharedClipboardMessage& shared_clipboard_message() const;
  ::chrome_browser_sharing::SharedClipboardMessage* release_shared_clipboard_message();
  ::chrome_browser_sharing::SharedClipboardMessage* mutable_shared_clipboard_message();
  void set_allocated_shared_clipboard_message(::chrome_browser_sharing::SharedClipboardMessage* shared_clipboard_message);

  // .chrome_browser_sharing.SmsFetchRequest sms_fetch_request = 8;
  bool has_sms_fetch_request() const;
  void clear_sms_fetch_request();
  const ::chrome_browser_sharing::SmsFetchRequest& sms_fetch_request() const;
  ::chrome_browser_sharing::SmsFetchRequest* release_sms_fetch_request();
  ::chrome_browser_sharing::SmsFetchRequest* mutable_sms_fetch_request();
  void set_allocated_sms_fetch_request(::chrome_browser_sharing::SmsFetchRequest* sms_fetch_request);

  // .chrome_browser_sharing.RemoteCopyMessage remote_copy_message = 9;
  bool has_remote_copy_message() const;
  void clear_remote_copy_message();
  const ::chrome_browser_sharing::RemoteCopyMessage& remote_copy_message() const;
  ::chrome_browser_sharing::RemoteCopyMessage* release_remote_copy_message();
  ::chrome_browser_sharing::RemoteCopyMessage* mutable_remote_copy_message();
  void set_allocated_remote_copy_message(::chrome_browser_sharing::RemoteCopyMessage* remote_copy_message);

  // .chrome_browser_sharing.PeerConnectionOfferMessage peer_connection_offer_message = 10;
  bool has_peer_connection_offer_message() const;
  void clear_peer_connection_offer_message();
  const ::chrome_browser_sharing::PeerConnectionOfferMessage& peer_connection_offer_message() const;
  ::chrome_browser_sharing::PeerConnectionOfferMessage* release_peer_connection_offer_message();
  ::chrome_browser_sharing::PeerConnectionOfferMessage* mutable_peer_connection_offer_message();
  void set_allocated_peer_connection_offer_message(::chrome_browser_sharing::PeerConnectionOfferMessage* peer_connection_offer_message);

  // .chrome_browser_sharing.PeerConnectionIceCandidatesMessage peer_connection_ice_candidates_message = 11;
  bool has_peer_connection_ice_candidates_message() const;
  void clear_peer_connection_ice_candidates_message();
  const ::chrome_browser_sharing::PeerConnectionIceCandidatesMessage& peer_connection_ice_candidates_message() const;
  ::chrome_browser_sharing::PeerConnectionIceCandidatesMessage* release_peer_connection_ice_candidates_message();
  ::chrome_browser_sharing::PeerConnectionIceCandidatesMessage* mutable_peer_connection_ice_candidates_message();
  void set_allocated_peer_connection_ice_candidates_message(::chrome_browser_sharing::PeerConnectionIceCandidatesMessage* peer_connection_ice_candidates_message);

  // .chrome_browser_sharing.DiscoveryRequest discovery_request = 13;
  bool has_discovery_request() const;
  void clear_discovery_request();
  const ::chrome_browser_sharing::DiscoveryRequest& discovery_request() const;
  ::chrome_browser_sharing::DiscoveryRequest* release_discovery_request();
  ::chrome_browser_sharing::DiscoveryRequest* mutable_discovery_request();
  void set_allocated_discovery_request(::chrome_browser_sharing::DiscoveryRequest* discovery_request);

  // .chrome_browser_sharing.WebRtcSignalingMessage web_rtc_signaling_frame = 14;
  bool has_web_rtc_signaling_frame() const;
  void clear_web_rtc_signaling_frame();
  const ::chrome_browser_sharing::WebRtcSignalingMessage& web_rtc_signaling_frame() const;
  ::chrome_browser_sharing::WebRtcSignalingMessage* release_web_rtc_signaling_frame();
  ::chrome_browser_sharing::WebRtcSignalingMessage* mutable_web_rtc_signaling_frame();
  void set_allocated_web_rtc_signaling_frame(::chrome_browser_sharing::WebRtcSignalingMessage* web_rtc_signaling_frame);

  // .chrome_browser_sharing.FCMChannelConfiguration fcm_channel_configuration = 6;
  bool has_fcm_channel_configuration() const;
  void clear_fcm_channel_configuration();
  const ::chrome_browser_sharing::FCMChannelConfiguration& fcm_channel_configuration() const;
  ::chrome_browser_sharing::FCMChannelConfiguration* release_fcm_channel_configuration();
  ::chrome_browser_sharing::FCMChannelConfiguration* mutable_fcm_channel_configuration();
  void set_allocated_fcm_channel_configuration(::chrome_browser_sharing::FCMChannelConfiguration* fcm_channel_configuration);

  // .chrome_browser_sharing.ServerChannelConfiguration server_channel_configuration = 12;
  bool has_server_channel_configuration() const;
  void clear_server_channel_configuration();
  const ::chrome_browser_sharing::ServerChannelConfiguration& server_channel_configuration() const;
  ::chrome_browser_sharing::ServerChannelConfiguration* release_server_channel_configuration();
  ::chrome_browser_sharing::ServerChannelConfiguration* mutable_server_channel_configuration();
  void set_allocated_server_channel_configuration(::chrome_browser_sharing::ServerChannelConfiguration* server_channel_configuration);

  void clear_payload();
  PayloadCase payload_case() const;
  void clear_ack_channel_configuration();
  AckChannelConfigurationCase ack_channel_configuration_case() const;
  // @@protoc_insertion_point(class_scope:chrome_browser_sharing.SharingMessage)
 private:
  class _Internal;
  void set_has_ping_message();
  void set_has_ack_message();
  void set_has_click_to_call_message();
  void set_has_shared_clipboard_message();
  void set_has_sms_fetch_request();
  void set_has_remote_copy_message();
  void set_has_peer_connection_offer_message();
  void set_has_peer_connection_ice_candidates_message();
  void set_has_discovery_request();
  void set_has_web_rtc_signaling_frame();
  void set_has_fcm_channel_configuration();
  void set_has_server_channel_configuration();

  inline bool has_payload() const;
  inline void clear_has_payload();

  inline bool has_ack_channel_configuration() const;
  inline void clear_has_ack_channel_configuration();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_guid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_device_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_id_;
  union PayloadUnion {
    PayloadUnion() {}
    ::chrome_browser_sharing::PingMessage* ping_message_;
    ::chrome_browser_sharing::AckMessage* ack_message_;
    ::chrome_browser_sharing::ClickToCallMessage* click_to_call_message_;
    ::chrome_browser_sharing::SharedClipboardMessage* shared_clipboard_message_;
    ::chrome_browser_sharing::SmsFetchRequest* sms_fetch_request_;
    ::chrome_browser_sharing::RemoteCopyMessage* remote_copy_message_;
    ::chrome_browser_sharing::PeerConnectionOfferMessage* peer_connection_offer_message_;
    ::chrome_browser_sharing::PeerConnectionIceCandidatesMessage* peer_connection_ice_candidates_message_;
    ::chrome_browser_sharing::DiscoveryRequest* discovery_request_;
    ::chrome_browser_sharing::WebRtcSignalingMessage* web_rtc_signaling_frame_;
  } payload_;
  union AckChannelConfigurationUnion {
    AckChannelConfigurationUnion() {}
    ::chrome_browser_sharing::FCMChannelConfiguration* fcm_channel_configuration_;
    ::chrome_browser_sharing::ServerChannelConfiguration* server_channel_configuration_;
  } ack_channel_configuration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_sharing_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class PingMessage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_sharing.PingMessage) */ {
 public:
  PingMessage();
  virtual ~PingMessage();

  PingMessage(const PingMessage& from);
  PingMessage(PingMessage&& from) noexcept
    : PingMessage() {
    *this = ::std::move(from);
  }

  inline PingMessage& operator=(const PingMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingMessage& operator=(PingMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PingMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PingMessage* internal_default_instance() {
    return reinterpret_cast<const PingMessage*>(
               &_PingMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PingMessage& a, PingMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PingMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PingMessage* New() const final {
    return CreateMaybeMessage<PingMessage>(nullptr);
  }

  PingMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PingMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PingMessage& from);
  void MergeFrom(const PingMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PingMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_sharing.PingMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:chrome_browser_sharing.PingMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class AckMessage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_sharing.AckMessage) */ {
 public:
  AckMessage();
  virtual ~AckMessage();

  AckMessage(const AckMessage& from);
  AckMessage(AckMessage&& from) noexcept
    : AckMessage() {
    *this = ::std::move(from);
  }

  inline AckMessage& operator=(const AckMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckMessage& operator=(AckMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const AckMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckMessage* internal_default_instance() {
    return reinterpret_cast<const AckMessage*>(
               &_AckMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AckMessage& a, AckMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AckMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckMessage* New() const final {
    return CreateMaybeMessage<AckMessage>(nullptr);
  }

  AckMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AckMessage& from);
  void MergeFrom(const AckMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AckMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_sharing.AckMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginalMessageIdFieldNumber = 1,
    kResponseMessageFieldNumber = 3,
  };
  // string original_message_id = 1;
  void clear_original_message_id();
  const std::string& original_message_id() const;
  void set_original_message_id(const std::string& value);
  void set_original_message_id(std::string&& value);
  void set_original_message_id(const char* value);
  void set_original_message_id(const char* value, size_t size);
  std::string* mutable_original_message_id();
  std::string* release_original_message_id();
  void set_allocated_original_message_id(std::string* original_message_id);

  // .chrome_browser_sharing.ResponseMessage response_message = 3;
  bool has_response_message() const;
  void clear_response_message();
  const ::chrome_browser_sharing::ResponseMessage& response_message() const;
  ::chrome_browser_sharing::ResponseMessage* release_response_message();
  ::chrome_browser_sharing::ResponseMessage* mutable_response_message();
  void set_allocated_response_message(::chrome_browser_sharing::ResponseMessage* response_message);

  // @@protoc_insertion_point(class_scope:chrome_browser_sharing.AckMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr original_message_id_;
  ::chrome_browser_sharing::ResponseMessage* response_message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class ResponseMessage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_sharing.ResponseMessage) */ {
 public:
  ResponseMessage();
  virtual ~ResponseMessage();

  ResponseMessage(const ResponseMessage& from);
  ResponseMessage(ResponseMessage&& from) noexcept
    : ResponseMessage() {
    *this = ::std::move(from);
  }

  inline ResponseMessage& operator=(const ResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseMessage& operator=(ResponseMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ResponseMessage& default_instance();

  enum PayloadCase {
    kSmsFetchResponse = 1,
    kPeerConnectionAnswerMessageResponse = 2,
    kDiscoveryResponse = 3,
    PAYLOAD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseMessage* internal_default_instance() {
    return reinterpret_cast<const ResponseMessage*>(
               &_ResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResponseMessage& a, ResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseMessage* New() const final {
    return CreateMaybeMessage<ResponseMessage>(nullptr);
  }

  ResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ResponseMessage& from);
  void MergeFrom(const ResponseMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponseMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_sharing.ResponseMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSmsFetchResponseFieldNumber = 1,
    kPeerConnectionAnswerMessageResponseFieldNumber = 2,
    kDiscoveryResponseFieldNumber = 3,
  };
  // .chrome_browser_sharing.SmsFetchResponse sms_fetch_response = 1;
  bool has_sms_fetch_response() const;
  void clear_sms_fetch_response();
  const ::chrome_browser_sharing::SmsFetchResponse& sms_fetch_response() const;
  ::chrome_browser_sharing::SmsFetchResponse* release_sms_fetch_response();
  ::chrome_browser_sharing::SmsFetchResponse* mutable_sms_fetch_response();
  void set_allocated_sms_fetch_response(::chrome_browser_sharing::SmsFetchResponse* sms_fetch_response);

  // .chrome_browser_sharing.PeerConnectionAnswerMessage peer_connection_answer_message_response = 2;
  bool has_peer_connection_answer_message_response() const;
  void clear_peer_connection_answer_message_response();
  const ::chrome_browser_sharing::PeerConnectionAnswerMessage& peer_connection_answer_message_response() const;
  ::chrome_browser_sharing::PeerConnectionAnswerMessage* release_peer_connection_answer_message_response();
  ::chrome_browser_sharing::PeerConnectionAnswerMessage* mutable_peer_connection_answer_message_response();
  void set_allocated_peer_connection_answer_message_response(::chrome_browser_sharing::PeerConnectionAnswerMessage* peer_connection_answer_message_response);

  // .chrome_browser_sharing.DiscoveryResponse discovery_response = 3;
  bool has_discovery_response() const;
  void clear_discovery_response();
  const ::chrome_browser_sharing::DiscoveryResponse& discovery_response() const;
  ::chrome_browser_sharing::DiscoveryResponse* release_discovery_response();
  ::chrome_browser_sharing::DiscoveryResponse* mutable_discovery_response();
  void set_allocated_discovery_response(::chrome_browser_sharing::DiscoveryResponse* discovery_response);

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:chrome_browser_sharing.ResponseMessage)
 private:
  class _Internal;
  void set_has_sms_fetch_response();
  void set_has_peer_connection_answer_message_response();
  void set_has_discovery_response();

  inline bool has_payload() const;
  inline void clear_has_payload();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  union PayloadUnion {
    PayloadUnion() {}
    ::chrome_browser_sharing::SmsFetchResponse* sms_fetch_response_;
    ::chrome_browser_sharing::PeerConnectionAnswerMessage* peer_connection_answer_message_response_;
    ::chrome_browser_sharing::DiscoveryResponse* discovery_response_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_sharing_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class FCMChannelConfiguration :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_sharing.FCMChannelConfiguration) */ {
 public:
  FCMChannelConfiguration();
  virtual ~FCMChannelConfiguration();

  FCMChannelConfiguration(const FCMChannelConfiguration& from);
  FCMChannelConfiguration(FCMChannelConfiguration&& from) noexcept
    : FCMChannelConfiguration() {
    *this = ::std::move(from);
  }

  inline FCMChannelConfiguration& operator=(const FCMChannelConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline FCMChannelConfiguration& operator=(FCMChannelConfiguration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const FCMChannelConfiguration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FCMChannelConfiguration* internal_default_instance() {
    return reinterpret_cast<const FCMChannelConfiguration*>(
               &_FCMChannelConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FCMChannelConfiguration& a, FCMChannelConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(FCMChannelConfiguration* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FCMChannelConfiguration* New() const final {
    return CreateMaybeMessage<FCMChannelConfiguration>(nullptr);
  }

  FCMChannelConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FCMChannelConfiguration>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FCMChannelConfiguration& from);
  void MergeFrom(const FCMChannelConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FCMChannelConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_sharing.FCMChannelConfiguration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVapidFcmTokenFieldNumber = 1,
    kVapidP256DhFieldNumber = 2,
    kVapidAuthSecretFieldNumber = 3,
    kSenderIdFcmTokenFieldNumber = 4,
    kSenderIdP256DhFieldNumber = 5,
    kSenderIdAuthSecretFieldNumber = 6,
  };
  // string vapid_fcm_token = 1;
  void clear_vapid_fcm_token();
  const std::string& vapid_fcm_token() const;
  void set_vapid_fcm_token(const std::string& value);
  void set_vapid_fcm_token(std::string&& value);
  void set_vapid_fcm_token(const char* value);
  void set_vapid_fcm_token(const char* value, size_t size);
  std::string* mutable_vapid_fcm_token();
  std::string* release_vapid_fcm_token();
  void set_allocated_vapid_fcm_token(std::string* vapid_fcm_token);

  // bytes vapid_p256dh = 2;
  void clear_vapid_p256dh();
  const std::string& vapid_p256dh() const;
  void set_vapid_p256dh(const std::string& value);
  void set_vapid_p256dh(std::string&& value);
  void set_vapid_p256dh(const char* value);
  void set_vapid_p256dh(const void* value, size_t size);
  std::string* mutable_vapid_p256dh();
  std::string* release_vapid_p256dh();
  void set_allocated_vapid_p256dh(std::string* vapid_p256dh);

  // bytes vapid_auth_secret = 3;
  void clear_vapid_auth_secret();
  const std::string& vapid_auth_secret() const;
  void set_vapid_auth_secret(const std::string& value);
  void set_vapid_auth_secret(std::string&& value);
  void set_vapid_auth_secret(const char* value);
  void set_vapid_auth_secret(const void* value, size_t size);
  std::string* mutable_vapid_auth_secret();
  std::string* release_vapid_auth_secret();
  void set_allocated_vapid_auth_secret(std::string* vapid_auth_secret);

  // string sender_id_fcm_token = 4;
  void clear_sender_id_fcm_token();
  const std::string& sender_id_fcm_token() const;
  void set_sender_id_fcm_token(const std::string& value);
  void set_sender_id_fcm_token(std::string&& value);
  void set_sender_id_fcm_token(const char* value);
  void set_sender_id_fcm_token(const char* value, size_t size);
  std::string* mutable_sender_id_fcm_token();
  std::string* release_sender_id_fcm_token();
  void set_allocated_sender_id_fcm_token(std::string* sender_id_fcm_token);

  // bytes sender_id_p256dh = 5;
  void clear_sender_id_p256dh();
  const std::string& sender_id_p256dh() const;
  void set_sender_id_p256dh(const std::string& value);
  void set_sender_id_p256dh(std::string&& value);
  void set_sender_id_p256dh(const char* value);
  void set_sender_id_p256dh(const void* value, size_t size);
  std::string* mutable_sender_id_p256dh();
  std::string* release_sender_id_p256dh();
  void set_allocated_sender_id_p256dh(std::string* sender_id_p256dh);

  // bytes sender_id_auth_secret = 6;
  void clear_sender_id_auth_secret();
  const std::string& sender_id_auth_secret() const;
  void set_sender_id_auth_secret(const std::string& value);
  void set_sender_id_auth_secret(std::string&& value);
  void set_sender_id_auth_secret(const char* value);
  void set_sender_id_auth_secret(const void* value, size_t size);
  std::string* mutable_sender_id_auth_secret();
  std::string* release_sender_id_auth_secret();
  void set_allocated_sender_id_auth_secret(std::string* sender_id_auth_secret);

  // @@protoc_insertion_point(class_scope:chrome_browser_sharing.FCMChannelConfiguration)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vapid_fcm_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vapid_p256dh_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vapid_auth_secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_id_fcm_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_id_p256dh_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_id_auth_secret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class ServerChannelConfiguration :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_sharing.ServerChannelConfiguration) */ {
 public:
  ServerChannelConfiguration();
  virtual ~ServerChannelConfiguration();

  ServerChannelConfiguration(const ServerChannelConfiguration& from);
  ServerChannelConfiguration(ServerChannelConfiguration&& from) noexcept
    : ServerChannelConfiguration() {
    *this = ::std::move(from);
  }

  inline ServerChannelConfiguration& operator=(const ServerChannelConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerChannelConfiguration& operator=(ServerChannelConfiguration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ServerChannelConfiguration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerChannelConfiguration* internal_default_instance() {
    return reinterpret_cast<const ServerChannelConfiguration*>(
               &_ServerChannelConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ServerChannelConfiguration& a, ServerChannelConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerChannelConfiguration* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerChannelConfiguration* New() const final {
    return CreateMaybeMessage<ServerChannelConfiguration>(nullptr);
  }

  ServerChannelConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerChannelConfiguration>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServerChannelConfiguration& from);
  void MergeFrom(const ServerChannelConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerChannelConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_sharing.ServerChannelConfiguration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigurationFieldNumber = 3,
    kP256DhFieldNumber = 4,
    kAuthSecretFieldNumber = 5,
  };
  // bytes configuration = 3;
  void clear_configuration();
  const std::string& configuration() const;
  void set_configuration(const std::string& value);
  void set_configuration(std::string&& value);
  void set_configuration(const char* value);
  void set_configuration(const void* value, size_t size);
  std::string* mutable_configuration();
  std::string* release_configuration();
  void set_allocated_configuration(std::string* configuration);

  // bytes p256dh = 4;
  void clear_p256dh();
  const std::string& p256dh() const;
  void set_p256dh(const std::string& value);
  void set_p256dh(std::string&& value);
  void set_p256dh(const char* value);
  void set_p256dh(const void* value, size_t size);
  std::string* mutable_p256dh();
  std::string* release_p256dh();
  void set_allocated_p256dh(std::string* p256dh);

  // bytes auth_secret = 5;
  void clear_auth_secret();
  const std::string& auth_secret() const;
  void set_auth_secret(const std::string& value);
  void set_auth_secret(std::string&& value);
  void set_auth_secret(const char* value);
  void set_auth_secret(const void* value, size_t size);
  std::string* mutable_auth_secret();
  std::string* release_auth_secret();
  void set_allocated_auth_secret(std::string* auth_secret);

  // @@protoc_insertion_point(class_scope:chrome_browser_sharing.ServerChannelConfiguration)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr configuration_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr p256dh_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_secret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class DiscoveryRequest :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_sharing.DiscoveryRequest) */ {
 public:
  DiscoveryRequest();
  virtual ~DiscoveryRequest();

  DiscoveryRequest(const DiscoveryRequest& from);
  DiscoveryRequest(DiscoveryRequest&& from) noexcept
    : DiscoveryRequest() {
    *this = ::std::move(from);
  }

  inline DiscoveryRequest& operator=(const DiscoveryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscoveryRequest& operator=(DiscoveryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DiscoveryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiscoveryRequest* internal_default_instance() {
    return reinterpret_cast<const DiscoveryRequest*>(
               &_DiscoveryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DiscoveryRequest& a, DiscoveryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscoveryRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiscoveryRequest* New() const final {
    return CreateMaybeMessage<DiscoveryRequest>(nullptr);
  }

  DiscoveryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiscoveryRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DiscoveryRequest& from);
  void MergeFrom(const DiscoveryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DiscoveryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_sharing.DiscoveryRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceIdFieldNumber = 1,
  };
  // string service_id = 1;
  void clear_service_id();
  const std::string& service_id() const;
  void set_service_id(const std::string& value);
  void set_service_id(std::string&& value);
  void set_service_id(const char* value);
  void set_service_id(const char* value, size_t size);
  std::string* mutable_service_id();
  std::string* release_service_id();
  void set_allocated_service_id(std::string* service_id);

  // @@protoc_insertion_point(class_scope:chrome_browser_sharing.DiscoveryRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class DiscoveryResponse :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_sharing.DiscoveryResponse) */ {
 public:
  DiscoveryResponse();
  virtual ~DiscoveryResponse();

  DiscoveryResponse(const DiscoveryResponse& from);
  DiscoveryResponse(DiscoveryResponse&& from) noexcept
    : DiscoveryResponse() {
    *this = ::std::move(from);
  }

  inline DiscoveryResponse& operator=(const DiscoveryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscoveryResponse& operator=(DiscoveryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DiscoveryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DiscoveryResponse* internal_default_instance() {
    return reinterpret_cast<const DiscoveryResponse*>(
               &_DiscoveryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DiscoveryResponse& a, DiscoveryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscoveryResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiscoveryResponse* New() const final {
    return CreateMaybeMessage<DiscoveryResponse>(nullptr);
  }

  DiscoveryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiscoveryResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DiscoveryResponse& from);
  void MergeFrom(const DiscoveryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DiscoveryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_sharing.DiscoveryResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceIdFieldNumber = 1,
    kEndpointIdFieldNumber = 2,
    kEndpointInfoFieldNumber = 3,
  };
  // string service_id = 1;
  void clear_service_id();
  const std::string& service_id() const;
  void set_service_id(const std::string& value);
  void set_service_id(std::string&& value);
  void set_service_id(const char* value);
  void set_service_id(const char* value, size_t size);
  std::string* mutable_service_id();
  std::string* release_service_id();
  void set_allocated_service_id(std::string* service_id);

  // string endpoint_id = 2;
  void clear_endpoint_id();
  const std::string& endpoint_id() const;
  void set_endpoint_id(const std::string& value);
  void set_endpoint_id(std::string&& value);
  void set_endpoint_id(const char* value);
  void set_endpoint_id(const char* value, size_t size);
  std::string* mutable_endpoint_id();
  std::string* release_endpoint_id();
  void set_allocated_endpoint_id(std::string* endpoint_id);

  // bytes endpoint_info = 3;
  void clear_endpoint_info();
  const std::string& endpoint_info() const;
  void set_endpoint_info(const std::string& value);
  void set_endpoint_info(std::string&& value);
  void set_endpoint_info(const char* value);
  void set_endpoint_info(const void* value, size_t size);
  std::string* mutable_endpoint_info();
  std::string* release_endpoint_info();
  void set_allocated_endpoint_info(std::string* endpoint_info);

  // @@protoc_insertion_point(class_scope:chrome_browser_sharing.DiscoveryResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpoint_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpoint_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class WebRtcSignalingMessage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_sharing.WebRtcSignalingMessage) */ {
 public:
  WebRtcSignalingMessage();
  virtual ~WebRtcSignalingMessage();

  WebRtcSignalingMessage(const WebRtcSignalingMessage& from);
  WebRtcSignalingMessage(WebRtcSignalingMessage&& from) noexcept
    : WebRtcSignalingMessage() {
    *this = ::std::move(from);
  }

  inline WebRtcSignalingMessage& operator=(const WebRtcSignalingMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline WebRtcSignalingMessage& operator=(WebRtcSignalingMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const WebRtcSignalingMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WebRtcSignalingMessage* internal_default_instance() {
    return reinterpret_cast<const WebRtcSignalingMessage*>(
               &_WebRtcSignalingMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(WebRtcSignalingMessage& a, WebRtcSignalingMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(WebRtcSignalingMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WebRtcSignalingMessage* New() const final {
    return CreateMaybeMessage<WebRtcSignalingMessage>(nullptr);
  }

  WebRtcSignalingMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WebRtcSignalingMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const WebRtcSignalingMessage& from);
  void MergeFrom(const WebRtcSignalingMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WebRtcSignalingMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_sharing.WebRtcSignalingMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWebRtcSignalingFrameFieldNumber = 1,
  };
  // bytes web_rtc_signaling_frame = 1;
  void clear_web_rtc_signaling_frame();
  const std::string& web_rtc_signaling_frame() const;
  void set_web_rtc_signaling_frame(const std::string& value);
  void set_web_rtc_signaling_frame(std::string&& value);
  void set_web_rtc_signaling_frame(const char* value);
  void set_web_rtc_signaling_frame(const void* value, size_t size);
  std::string* mutable_web_rtc_signaling_frame();
  std::string* release_web_rtc_signaling_frame();
  void set_allocated_web_rtc_signaling_frame(std::string* web_rtc_signaling_frame);

  // @@protoc_insertion_point(class_scope:chrome_browser_sharing.WebRtcSignalingMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr web_rtc_signaling_frame_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class WebRtcMessage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_sharing.WebRtcMessage) */ {
 public:
  WebRtcMessage();
  virtual ~WebRtcMessage();

  WebRtcMessage(const WebRtcMessage& from);
  WebRtcMessage(WebRtcMessage&& from) noexcept
    : WebRtcMessage() {
    *this = ::std::move(from);
  }

  inline WebRtcMessage& operator=(const WebRtcMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline WebRtcMessage& operator=(WebRtcMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const WebRtcMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WebRtcMessage* internal_default_instance() {
    return reinterpret_cast<const WebRtcMessage*>(
               &_WebRtcMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(WebRtcMessage& a, WebRtcMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(WebRtcMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WebRtcMessage* New() const final {
    return CreateMaybeMessage<WebRtcMessage>(nullptr);
  }

  WebRtcMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WebRtcMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const WebRtcMessage& from);
  void MergeFrom(const WebRtcMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WebRtcMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_sharing.WebRtcMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageGuidFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string message_guid = 1;
  void clear_message_guid();
  const std::string& message_guid() const;
  void set_message_guid(const std::string& value);
  void set_message_guid(std::string&& value);
  void set_message_guid(const char* value);
  void set_message_guid(const char* value, size_t size);
  std::string* mutable_message_guid();
  std::string* release_message_guid();
  void set_allocated_message_guid(std::string* message_guid);

  // .chrome_browser_sharing.SharingMessage message = 2;
  bool has_message() const;
  void clear_message();
  const ::chrome_browser_sharing::SharingMessage& message() const;
  ::chrome_browser_sharing::SharingMessage* release_message();
  ::chrome_browser_sharing::SharingMessage* mutable_message();
  void set_allocated_message(::chrome_browser_sharing::SharingMessage* message);

  // @@protoc_insertion_point(class_scope:chrome_browser_sharing.WebRtcMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_guid_;
  ::chrome_browser_sharing::SharingMessage* message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sharing_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SharingMessage

// string sender_guid = 1;
inline void SharingMessage::clear_sender_guid() {
  sender_guid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SharingMessage::sender_guid() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.SharingMessage.sender_guid)
  return sender_guid_.GetNoArena();
}
inline void SharingMessage::set_sender_guid(const std::string& value) {
  
  sender_guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_sharing.SharingMessage.sender_guid)
}
inline void SharingMessage::set_sender_guid(std::string&& value) {
  
  sender_guid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_sharing.SharingMessage.sender_guid)
}
inline void SharingMessage::set_sender_guid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_sharing.SharingMessage.sender_guid)
}
inline void SharingMessage::set_sender_guid(const char* value, size_t size) {
  
  sender_guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_sharing.SharingMessage.sender_guid)
}
inline std::string* SharingMessage::mutable_sender_guid() {
  
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.SharingMessage.sender_guid)
  return sender_guid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SharingMessage::release_sender_guid() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.SharingMessage.sender_guid)
  
  return sender_guid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SharingMessage::set_allocated_sender_guid(std::string* sender_guid) {
  if (sender_guid != nullptr) {
    
  } else {
    
  }
  sender_guid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_guid);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.SharingMessage.sender_guid)
}

// .chrome_browser_sharing.PingMessage ping_message = 2;
inline bool SharingMessage::has_ping_message() const {
  return payload_case() == kPingMessage;
}
inline void SharingMessage::set_has_ping_message() {
  _oneof_case_[0] = kPingMessage;
}
inline void SharingMessage::clear_ping_message() {
  if (has_ping_message()) {
    delete payload_.ping_message_;
    clear_has_payload();
  }
}
inline ::chrome_browser_sharing::PingMessage* SharingMessage::release_ping_message() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.SharingMessage.ping_message)
  if (has_ping_message()) {
    clear_has_payload();
      ::chrome_browser_sharing::PingMessage* temp = payload_.ping_message_;
    payload_.ping_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chrome_browser_sharing::PingMessage& SharingMessage::ping_message() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.SharingMessage.ping_message)
  return has_ping_message()
      ? *payload_.ping_message_
      : *reinterpret_cast< ::chrome_browser_sharing::PingMessage*>(&::chrome_browser_sharing::_PingMessage_default_instance_);
}
inline ::chrome_browser_sharing::PingMessage* SharingMessage::mutable_ping_message() {
  if (!has_ping_message()) {
    clear_payload();
    set_has_ping_message();
    payload_.ping_message_ = CreateMaybeMessage< ::chrome_browser_sharing::PingMessage >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.SharingMessage.ping_message)
  return payload_.ping_message_;
}

// .chrome_browser_sharing.AckMessage ack_message = 3;
inline bool SharingMessage::has_ack_message() const {
  return payload_case() == kAckMessage;
}
inline void SharingMessage::set_has_ack_message() {
  _oneof_case_[0] = kAckMessage;
}
inline void SharingMessage::clear_ack_message() {
  if (has_ack_message()) {
    delete payload_.ack_message_;
    clear_has_payload();
  }
}
inline ::chrome_browser_sharing::AckMessage* SharingMessage::release_ack_message() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.SharingMessage.ack_message)
  if (has_ack_message()) {
    clear_has_payload();
      ::chrome_browser_sharing::AckMessage* temp = payload_.ack_message_;
    payload_.ack_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chrome_browser_sharing::AckMessage& SharingMessage::ack_message() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.SharingMessage.ack_message)
  return has_ack_message()
      ? *payload_.ack_message_
      : *reinterpret_cast< ::chrome_browser_sharing::AckMessage*>(&::chrome_browser_sharing::_AckMessage_default_instance_);
}
inline ::chrome_browser_sharing::AckMessage* SharingMessage::mutable_ack_message() {
  if (!has_ack_message()) {
    clear_payload();
    set_has_ack_message();
    payload_.ack_message_ = CreateMaybeMessage< ::chrome_browser_sharing::AckMessage >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.SharingMessage.ack_message)
  return payload_.ack_message_;
}

// .chrome_browser_sharing.ClickToCallMessage click_to_call_message = 4;
inline bool SharingMessage::has_click_to_call_message() const {
  return payload_case() == kClickToCallMessage;
}
inline void SharingMessage::set_has_click_to_call_message() {
  _oneof_case_[0] = kClickToCallMessage;
}
inline ::chrome_browser_sharing::ClickToCallMessage* SharingMessage::release_click_to_call_message() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.SharingMessage.click_to_call_message)
  if (has_click_to_call_message()) {
    clear_has_payload();
      ::chrome_browser_sharing::ClickToCallMessage* temp = payload_.click_to_call_message_;
    payload_.click_to_call_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chrome_browser_sharing::ClickToCallMessage& SharingMessage::click_to_call_message() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.SharingMessage.click_to_call_message)
  return has_click_to_call_message()
      ? *payload_.click_to_call_message_
      : *reinterpret_cast< ::chrome_browser_sharing::ClickToCallMessage*>(&::chrome_browser_sharing::_ClickToCallMessage_default_instance_);
}
inline ::chrome_browser_sharing::ClickToCallMessage* SharingMessage::mutable_click_to_call_message() {
  if (!has_click_to_call_message()) {
    clear_payload();
    set_has_click_to_call_message();
    payload_.click_to_call_message_ = CreateMaybeMessage< ::chrome_browser_sharing::ClickToCallMessage >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.SharingMessage.click_to_call_message)
  return payload_.click_to_call_message_;
}

// .chrome_browser_sharing.SharedClipboardMessage shared_clipboard_message = 5;
inline bool SharingMessage::has_shared_clipboard_message() const {
  return payload_case() == kSharedClipboardMessage;
}
inline void SharingMessage::set_has_shared_clipboard_message() {
  _oneof_case_[0] = kSharedClipboardMessage;
}
inline ::chrome_browser_sharing::SharedClipboardMessage* SharingMessage::release_shared_clipboard_message() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.SharingMessage.shared_clipboard_message)
  if (has_shared_clipboard_message()) {
    clear_has_payload();
      ::chrome_browser_sharing::SharedClipboardMessage* temp = payload_.shared_clipboard_message_;
    payload_.shared_clipboard_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chrome_browser_sharing::SharedClipboardMessage& SharingMessage::shared_clipboard_message() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.SharingMessage.shared_clipboard_message)
  return has_shared_clipboard_message()
      ? *payload_.shared_clipboard_message_
      : *reinterpret_cast< ::chrome_browser_sharing::SharedClipboardMessage*>(&::chrome_browser_sharing::_SharedClipboardMessage_default_instance_);
}
inline ::chrome_browser_sharing::SharedClipboardMessage* SharingMessage::mutable_shared_clipboard_message() {
  if (!has_shared_clipboard_message()) {
    clear_payload();
    set_has_shared_clipboard_message();
    payload_.shared_clipboard_message_ = CreateMaybeMessage< ::chrome_browser_sharing::SharedClipboardMessage >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.SharingMessage.shared_clipboard_message)
  return payload_.shared_clipboard_message_;
}

// .chrome_browser_sharing.SmsFetchRequest sms_fetch_request = 8;
inline bool SharingMessage::has_sms_fetch_request() const {
  return payload_case() == kSmsFetchRequest;
}
inline void SharingMessage::set_has_sms_fetch_request() {
  _oneof_case_[0] = kSmsFetchRequest;
}
inline ::chrome_browser_sharing::SmsFetchRequest* SharingMessage::release_sms_fetch_request() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.SharingMessage.sms_fetch_request)
  if (has_sms_fetch_request()) {
    clear_has_payload();
      ::chrome_browser_sharing::SmsFetchRequest* temp = payload_.sms_fetch_request_;
    payload_.sms_fetch_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chrome_browser_sharing::SmsFetchRequest& SharingMessage::sms_fetch_request() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.SharingMessage.sms_fetch_request)
  return has_sms_fetch_request()
      ? *payload_.sms_fetch_request_
      : *reinterpret_cast< ::chrome_browser_sharing::SmsFetchRequest*>(&::chrome_browser_sharing::_SmsFetchRequest_default_instance_);
}
inline ::chrome_browser_sharing::SmsFetchRequest* SharingMessage::mutable_sms_fetch_request() {
  if (!has_sms_fetch_request()) {
    clear_payload();
    set_has_sms_fetch_request();
    payload_.sms_fetch_request_ = CreateMaybeMessage< ::chrome_browser_sharing::SmsFetchRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.SharingMessage.sms_fetch_request)
  return payload_.sms_fetch_request_;
}

// .chrome_browser_sharing.RemoteCopyMessage remote_copy_message = 9;
inline bool SharingMessage::has_remote_copy_message() const {
  return payload_case() == kRemoteCopyMessage;
}
inline void SharingMessage::set_has_remote_copy_message() {
  _oneof_case_[0] = kRemoteCopyMessage;
}
inline ::chrome_browser_sharing::RemoteCopyMessage* SharingMessage::release_remote_copy_message() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.SharingMessage.remote_copy_message)
  if (has_remote_copy_message()) {
    clear_has_payload();
      ::chrome_browser_sharing::RemoteCopyMessage* temp = payload_.remote_copy_message_;
    payload_.remote_copy_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chrome_browser_sharing::RemoteCopyMessage& SharingMessage::remote_copy_message() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.SharingMessage.remote_copy_message)
  return has_remote_copy_message()
      ? *payload_.remote_copy_message_
      : *reinterpret_cast< ::chrome_browser_sharing::RemoteCopyMessage*>(&::chrome_browser_sharing::_RemoteCopyMessage_default_instance_);
}
inline ::chrome_browser_sharing::RemoteCopyMessage* SharingMessage::mutable_remote_copy_message() {
  if (!has_remote_copy_message()) {
    clear_payload();
    set_has_remote_copy_message();
    payload_.remote_copy_message_ = CreateMaybeMessage< ::chrome_browser_sharing::RemoteCopyMessage >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.SharingMessage.remote_copy_message)
  return payload_.remote_copy_message_;
}

// .chrome_browser_sharing.PeerConnectionOfferMessage peer_connection_offer_message = 10;
inline bool SharingMessage::has_peer_connection_offer_message() const {
  return payload_case() == kPeerConnectionOfferMessage;
}
inline void SharingMessage::set_has_peer_connection_offer_message() {
  _oneof_case_[0] = kPeerConnectionOfferMessage;
}
inline ::chrome_browser_sharing::PeerConnectionOfferMessage* SharingMessage::release_peer_connection_offer_message() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.SharingMessage.peer_connection_offer_message)
  if (has_peer_connection_offer_message()) {
    clear_has_payload();
      ::chrome_browser_sharing::PeerConnectionOfferMessage* temp = payload_.peer_connection_offer_message_;
    payload_.peer_connection_offer_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chrome_browser_sharing::PeerConnectionOfferMessage& SharingMessage::peer_connection_offer_message() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.SharingMessage.peer_connection_offer_message)
  return has_peer_connection_offer_message()
      ? *payload_.peer_connection_offer_message_
      : *reinterpret_cast< ::chrome_browser_sharing::PeerConnectionOfferMessage*>(&::chrome_browser_sharing::_PeerConnectionOfferMessage_default_instance_);
}
inline ::chrome_browser_sharing::PeerConnectionOfferMessage* SharingMessage::mutable_peer_connection_offer_message() {
  if (!has_peer_connection_offer_message()) {
    clear_payload();
    set_has_peer_connection_offer_message();
    payload_.peer_connection_offer_message_ = CreateMaybeMessage< ::chrome_browser_sharing::PeerConnectionOfferMessage >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.SharingMessage.peer_connection_offer_message)
  return payload_.peer_connection_offer_message_;
}

// .chrome_browser_sharing.PeerConnectionIceCandidatesMessage peer_connection_ice_candidates_message = 11;
inline bool SharingMessage::has_peer_connection_ice_candidates_message() const {
  return payload_case() == kPeerConnectionIceCandidatesMessage;
}
inline void SharingMessage::set_has_peer_connection_ice_candidates_message() {
  _oneof_case_[0] = kPeerConnectionIceCandidatesMessage;
}
inline ::chrome_browser_sharing::PeerConnectionIceCandidatesMessage* SharingMessage::release_peer_connection_ice_candidates_message() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.SharingMessage.peer_connection_ice_candidates_message)
  if (has_peer_connection_ice_candidates_message()) {
    clear_has_payload();
      ::chrome_browser_sharing::PeerConnectionIceCandidatesMessage* temp = payload_.peer_connection_ice_candidates_message_;
    payload_.peer_connection_ice_candidates_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chrome_browser_sharing::PeerConnectionIceCandidatesMessage& SharingMessage::peer_connection_ice_candidates_message() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.SharingMessage.peer_connection_ice_candidates_message)
  return has_peer_connection_ice_candidates_message()
      ? *payload_.peer_connection_ice_candidates_message_
      : *reinterpret_cast< ::chrome_browser_sharing::PeerConnectionIceCandidatesMessage*>(&::chrome_browser_sharing::_PeerConnectionIceCandidatesMessage_default_instance_);
}
inline ::chrome_browser_sharing::PeerConnectionIceCandidatesMessage* SharingMessage::mutable_peer_connection_ice_candidates_message() {
  if (!has_peer_connection_ice_candidates_message()) {
    clear_payload();
    set_has_peer_connection_ice_candidates_message();
    payload_.peer_connection_ice_candidates_message_ = CreateMaybeMessage< ::chrome_browser_sharing::PeerConnectionIceCandidatesMessage >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.SharingMessage.peer_connection_ice_candidates_message)
  return payload_.peer_connection_ice_candidates_message_;
}

// .chrome_browser_sharing.DiscoveryRequest discovery_request = 13;
inline bool SharingMessage::has_discovery_request() const {
  return payload_case() == kDiscoveryRequest;
}
inline void SharingMessage::set_has_discovery_request() {
  _oneof_case_[0] = kDiscoveryRequest;
}
inline void SharingMessage::clear_discovery_request() {
  if (has_discovery_request()) {
    delete payload_.discovery_request_;
    clear_has_payload();
  }
}
inline ::chrome_browser_sharing::DiscoveryRequest* SharingMessage::release_discovery_request() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.SharingMessage.discovery_request)
  if (has_discovery_request()) {
    clear_has_payload();
      ::chrome_browser_sharing::DiscoveryRequest* temp = payload_.discovery_request_;
    payload_.discovery_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chrome_browser_sharing::DiscoveryRequest& SharingMessage::discovery_request() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.SharingMessage.discovery_request)
  return has_discovery_request()
      ? *payload_.discovery_request_
      : *reinterpret_cast< ::chrome_browser_sharing::DiscoveryRequest*>(&::chrome_browser_sharing::_DiscoveryRequest_default_instance_);
}
inline ::chrome_browser_sharing::DiscoveryRequest* SharingMessage::mutable_discovery_request() {
  if (!has_discovery_request()) {
    clear_payload();
    set_has_discovery_request();
    payload_.discovery_request_ = CreateMaybeMessage< ::chrome_browser_sharing::DiscoveryRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.SharingMessage.discovery_request)
  return payload_.discovery_request_;
}

// .chrome_browser_sharing.WebRtcSignalingMessage web_rtc_signaling_frame = 14;
inline bool SharingMessage::has_web_rtc_signaling_frame() const {
  return payload_case() == kWebRtcSignalingFrame;
}
inline void SharingMessage::set_has_web_rtc_signaling_frame() {
  _oneof_case_[0] = kWebRtcSignalingFrame;
}
inline void SharingMessage::clear_web_rtc_signaling_frame() {
  if (has_web_rtc_signaling_frame()) {
    delete payload_.web_rtc_signaling_frame_;
    clear_has_payload();
  }
}
inline ::chrome_browser_sharing::WebRtcSignalingMessage* SharingMessage::release_web_rtc_signaling_frame() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.SharingMessage.web_rtc_signaling_frame)
  if (has_web_rtc_signaling_frame()) {
    clear_has_payload();
      ::chrome_browser_sharing::WebRtcSignalingMessage* temp = payload_.web_rtc_signaling_frame_;
    payload_.web_rtc_signaling_frame_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chrome_browser_sharing::WebRtcSignalingMessage& SharingMessage::web_rtc_signaling_frame() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.SharingMessage.web_rtc_signaling_frame)
  return has_web_rtc_signaling_frame()
      ? *payload_.web_rtc_signaling_frame_
      : *reinterpret_cast< ::chrome_browser_sharing::WebRtcSignalingMessage*>(&::chrome_browser_sharing::_WebRtcSignalingMessage_default_instance_);
}
inline ::chrome_browser_sharing::WebRtcSignalingMessage* SharingMessage::mutable_web_rtc_signaling_frame() {
  if (!has_web_rtc_signaling_frame()) {
    clear_payload();
    set_has_web_rtc_signaling_frame();
    payload_.web_rtc_signaling_frame_ = CreateMaybeMessage< ::chrome_browser_sharing::WebRtcSignalingMessage >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.SharingMessage.web_rtc_signaling_frame)
  return payload_.web_rtc_signaling_frame_;
}

// .chrome_browser_sharing.FCMChannelConfiguration fcm_channel_configuration = 6;
inline bool SharingMessage::has_fcm_channel_configuration() const {
  return ack_channel_configuration_case() == kFcmChannelConfiguration;
}
inline void SharingMessage::set_has_fcm_channel_configuration() {
  _oneof_case_[1] = kFcmChannelConfiguration;
}
inline void SharingMessage::clear_fcm_channel_configuration() {
  if (has_fcm_channel_configuration()) {
    delete ack_channel_configuration_.fcm_channel_configuration_;
    clear_has_ack_channel_configuration();
  }
}
inline ::chrome_browser_sharing::FCMChannelConfiguration* SharingMessage::release_fcm_channel_configuration() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.SharingMessage.fcm_channel_configuration)
  if (has_fcm_channel_configuration()) {
    clear_has_ack_channel_configuration();
      ::chrome_browser_sharing::FCMChannelConfiguration* temp = ack_channel_configuration_.fcm_channel_configuration_;
    ack_channel_configuration_.fcm_channel_configuration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chrome_browser_sharing::FCMChannelConfiguration& SharingMessage::fcm_channel_configuration() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.SharingMessage.fcm_channel_configuration)
  return has_fcm_channel_configuration()
      ? *ack_channel_configuration_.fcm_channel_configuration_
      : *reinterpret_cast< ::chrome_browser_sharing::FCMChannelConfiguration*>(&::chrome_browser_sharing::_FCMChannelConfiguration_default_instance_);
}
inline ::chrome_browser_sharing::FCMChannelConfiguration* SharingMessage::mutable_fcm_channel_configuration() {
  if (!has_fcm_channel_configuration()) {
    clear_ack_channel_configuration();
    set_has_fcm_channel_configuration();
    ack_channel_configuration_.fcm_channel_configuration_ = CreateMaybeMessage< ::chrome_browser_sharing::FCMChannelConfiguration >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.SharingMessage.fcm_channel_configuration)
  return ack_channel_configuration_.fcm_channel_configuration_;
}

// .chrome_browser_sharing.ServerChannelConfiguration server_channel_configuration = 12;
inline bool SharingMessage::has_server_channel_configuration() const {
  return ack_channel_configuration_case() == kServerChannelConfiguration;
}
inline void SharingMessage::set_has_server_channel_configuration() {
  _oneof_case_[1] = kServerChannelConfiguration;
}
inline void SharingMessage::clear_server_channel_configuration() {
  if (has_server_channel_configuration()) {
    delete ack_channel_configuration_.server_channel_configuration_;
    clear_has_ack_channel_configuration();
  }
}
inline ::chrome_browser_sharing::ServerChannelConfiguration* SharingMessage::release_server_channel_configuration() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.SharingMessage.server_channel_configuration)
  if (has_server_channel_configuration()) {
    clear_has_ack_channel_configuration();
      ::chrome_browser_sharing::ServerChannelConfiguration* temp = ack_channel_configuration_.server_channel_configuration_;
    ack_channel_configuration_.server_channel_configuration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chrome_browser_sharing::ServerChannelConfiguration& SharingMessage::server_channel_configuration() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.SharingMessage.server_channel_configuration)
  return has_server_channel_configuration()
      ? *ack_channel_configuration_.server_channel_configuration_
      : *reinterpret_cast< ::chrome_browser_sharing::ServerChannelConfiguration*>(&::chrome_browser_sharing::_ServerChannelConfiguration_default_instance_);
}
inline ::chrome_browser_sharing::ServerChannelConfiguration* SharingMessage::mutable_server_channel_configuration() {
  if (!has_server_channel_configuration()) {
    clear_ack_channel_configuration();
    set_has_server_channel_configuration();
    ack_channel_configuration_.server_channel_configuration_ = CreateMaybeMessage< ::chrome_browser_sharing::ServerChannelConfiguration >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.SharingMessage.server_channel_configuration)
  return ack_channel_configuration_.server_channel_configuration_;
}

// string sender_device_name = 7;
inline void SharingMessage::clear_sender_device_name() {
  sender_device_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SharingMessage::sender_device_name() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.SharingMessage.sender_device_name)
  return sender_device_name_.GetNoArena();
}
inline void SharingMessage::set_sender_device_name(const std::string& value) {
  
  sender_device_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_sharing.SharingMessage.sender_device_name)
}
inline void SharingMessage::set_sender_device_name(std::string&& value) {
  
  sender_device_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_sharing.SharingMessage.sender_device_name)
}
inline void SharingMessage::set_sender_device_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_device_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_sharing.SharingMessage.sender_device_name)
}
inline void SharingMessage::set_sender_device_name(const char* value, size_t size) {
  
  sender_device_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_sharing.SharingMessage.sender_device_name)
}
inline std::string* SharingMessage::mutable_sender_device_name() {
  
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.SharingMessage.sender_device_name)
  return sender_device_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SharingMessage::release_sender_device_name() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.SharingMessage.sender_device_name)
  
  return sender_device_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SharingMessage::set_allocated_sender_device_name(std::string* sender_device_name) {
  if (sender_device_name != nullptr) {
    
  } else {
    
  }
  sender_device_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_device_name);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.SharingMessage.sender_device_name)
}

// string message_id = 15;
inline void SharingMessage::clear_message_id() {
  message_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SharingMessage::message_id() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.SharingMessage.message_id)
  return message_id_.GetNoArena();
}
inline void SharingMessage::set_message_id(const std::string& value) {
  
  message_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_sharing.SharingMessage.message_id)
}
inline void SharingMessage::set_message_id(std::string&& value) {
  
  message_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_sharing.SharingMessage.message_id)
}
inline void SharingMessage::set_message_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_sharing.SharingMessage.message_id)
}
inline void SharingMessage::set_message_id(const char* value, size_t size) {
  
  message_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_sharing.SharingMessage.message_id)
}
inline std::string* SharingMessage::mutable_message_id() {
  
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.SharingMessage.message_id)
  return message_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SharingMessage::release_message_id() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.SharingMessage.message_id)
  
  return message_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SharingMessage::set_allocated_message_id(std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  message_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_id);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.SharingMessage.message_id)
}

inline bool SharingMessage::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void SharingMessage::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline bool SharingMessage::has_ack_channel_configuration() const {
  return ack_channel_configuration_case() != ACK_CHANNEL_CONFIGURATION_NOT_SET;
}
inline void SharingMessage::clear_has_ack_channel_configuration() {
  _oneof_case_[1] = ACK_CHANNEL_CONFIGURATION_NOT_SET;
}
inline SharingMessage::PayloadCase SharingMessage::payload_case() const {
  return SharingMessage::PayloadCase(_oneof_case_[0]);
}
inline SharingMessage::AckChannelConfigurationCase SharingMessage::ack_channel_configuration_case() const {
  return SharingMessage::AckChannelConfigurationCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// PingMessage

// -------------------------------------------------------------------

// AckMessage

// string original_message_id = 1;
inline void AckMessage::clear_original_message_id() {
  original_message_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AckMessage::original_message_id() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.AckMessage.original_message_id)
  return original_message_id_.GetNoArena();
}
inline void AckMessage::set_original_message_id(const std::string& value) {
  
  original_message_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_sharing.AckMessage.original_message_id)
}
inline void AckMessage::set_original_message_id(std::string&& value) {
  
  original_message_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_sharing.AckMessage.original_message_id)
}
inline void AckMessage::set_original_message_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  original_message_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_sharing.AckMessage.original_message_id)
}
inline void AckMessage::set_original_message_id(const char* value, size_t size) {
  
  original_message_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_sharing.AckMessage.original_message_id)
}
inline std::string* AckMessage::mutable_original_message_id() {
  
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.AckMessage.original_message_id)
  return original_message_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AckMessage::release_original_message_id() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.AckMessage.original_message_id)
  
  return original_message_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AckMessage::set_allocated_original_message_id(std::string* original_message_id) {
  if (original_message_id != nullptr) {
    
  } else {
    
  }
  original_message_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), original_message_id);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.AckMessage.original_message_id)
}

// .chrome_browser_sharing.ResponseMessage response_message = 3;
inline bool AckMessage::has_response_message() const {
  return this != internal_default_instance() && response_message_ != nullptr;
}
inline void AckMessage::clear_response_message() {
  if (GetArenaNoVirtual() == nullptr && response_message_ != nullptr) {
    delete response_message_;
  }
  response_message_ = nullptr;
}
inline const ::chrome_browser_sharing::ResponseMessage& AckMessage::response_message() const {
  const ::chrome_browser_sharing::ResponseMessage* p = response_message_;
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.AckMessage.response_message)
  return p != nullptr ? *p : *reinterpret_cast<const ::chrome_browser_sharing::ResponseMessage*>(
      &::chrome_browser_sharing::_ResponseMessage_default_instance_);
}
inline ::chrome_browser_sharing::ResponseMessage* AckMessage::release_response_message() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.AckMessage.response_message)
  
  ::chrome_browser_sharing::ResponseMessage* temp = response_message_;
  response_message_ = nullptr;
  return temp;
}
inline ::chrome_browser_sharing::ResponseMessage* AckMessage::mutable_response_message() {
  
  if (response_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::chrome_browser_sharing::ResponseMessage>(GetArenaNoVirtual());
    response_message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.AckMessage.response_message)
  return response_message_;
}
inline void AckMessage::set_allocated_response_message(::chrome_browser_sharing::ResponseMessage* response_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete response_message_;
  }
  if (response_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response_message, submessage_arena);
    }
    
  } else {
    
  }
  response_message_ = response_message;
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.AckMessage.response_message)
}

// -------------------------------------------------------------------

// ResponseMessage

// .chrome_browser_sharing.SmsFetchResponse sms_fetch_response = 1;
inline bool ResponseMessage::has_sms_fetch_response() const {
  return payload_case() == kSmsFetchResponse;
}
inline void ResponseMessage::set_has_sms_fetch_response() {
  _oneof_case_[0] = kSmsFetchResponse;
}
inline ::chrome_browser_sharing::SmsFetchResponse* ResponseMessage::release_sms_fetch_response() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.ResponseMessage.sms_fetch_response)
  if (has_sms_fetch_response()) {
    clear_has_payload();
      ::chrome_browser_sharing::SmsFetchResponse* temp = payload_.sms_fetch_response_;
    payload_.sms_fetch_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chrome_browser_sharing::SmsFetchResponse& ResponseMessage::sms_fetch_response() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.ResponseMessage.sms_fetch_response)
  return has_sms_fetch_response()
      ? *payload_.sms_fetch_response_
      : *reinterpret_cast< ::chrome_browser_sharing::SmsFetchResponse*>(&::chrome_browser_sharing::_SmsFetchResponse_default_instance_);
}
inline ::chrome_browser_sharing::SmsFetchResponse* ResponseMessage::mutable_sms_fetch_response() {
  if (!has_sms_fetch_response()) {
    clear_payload();
    set_has_sms_fetch_response();
    payload_.sms_fetch_response_ = CreateMaybeMessage< ::chrome_browser_sharing::SmsFetchResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.ResponseMessage.sms_fetch_response)
  return payload_.sms_fetch_response_;
}

// .chrome_browser_sharing.PeerConnectionAnswerMessage peer_connection_answer_message_response = 2;
inline bool ResponseMessage::has_peer_connection_answer_message_response() const {
  return payload_case() == kPeerConnectionAnswerMessageResponse;
}
inline void ResponseMessage::set_has_peer_connection_answer_message_response() {
  _oneof_case_[0] = kPeerConnectionAnswerMessageResponse;
}
inline ::chrome_browser_sharing::PeerConnectionAnswerMessage* ResponseMessage::release_peer_connection_answer_message_response() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.ResponseMessage.peer_connection_answer_message_response)
  if (has_peer_connection_answer_message_response()) {
    clear_has_payload();
      ::chrome_browser_sharing::PeerConnectionAnswerMessage* temp = payload_.peer_connection_answer_message_response_;
    payload_.peer_connection_answer_message_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chrome_browser_sharing::PeerConnectionAnswerMessage& ResponseMessage::peer_connection_answer_message_response() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.ResponseMessage.peer_connection_answer_message_response)
  return has_peer_connection_answer_message_response()
      ? *payload_.peer_connection_answer_message_response_
      : *reinterpret_cast< ::chrome_browser_sharing::PeerConnectionAnswerMessage*>(&::chrome_browser_sharing::_PeerConnectionAnswerMessage_default_instance_);
}
inline ::chrome_browser_sharing::PeerConnectionAnswerMessage* ResponseMessage::mutable_peer_connection_answer_message_response() {
  if (!has_peer_connection_answer_message_response()) {
    clear_payload();
    set_has_peer_connection_answer_message_response();
    payload_.peer_connection_answer_message_response_ = CreateMaybeMessage< ::chrome_browser_sharing::PeerConnectionAnswerMessage >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.ResponseMessage.peer_connection_answer_message_response)
  return payload_.peer_connection_answer_message_response_;
}

// .chrome_browser_sharing.DiscoveryResponse discovery_response = 3;
inline bool ResponseMessage::has_discovery_response() const {
  return payload_case() == kDiscoveryResponse;
}
inline void ResponseMessage::set_has_discovery_response() {
  _oneof_case_[0] = kDiscoveryResponse;
}
inline void ResponseMessage::clear_discovery_response() {
  if (has_discovery_response()) {
    delete payload_.discovery_response_;
    clear_has_payload();
  }
}
inline ::chrome_browser_sharing::DiscoveryResponse* ResponseMessage::release_discovery_response() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.ResponseMessage.discovery_response)
  if (has_discovery_response()) {
    clear_has_payload();
      ::chrome_browser_sharing::DiscoveryResponse* temp = payload_.discovery_response_;
    payload_.discovery_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::chrome_browser_sharing::DiscoveryResponse& ResponseMessage::discovery_response() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.ResponseMessage.discovery_response)
  return has_discovery_response()
      ? *payload_.discovery_response_
      : *reinterpret_cast< ::chrome_browser_sharing::DiscoveryResponse*>(&::chrome_browser_sharing::_DiscoveryResponse_default_instance_);
}
inline ::chrome_browser_sharing::DiscoveryResponse* ResponseMessage::mutable_discovery_response() {
  if (!has_discovery_response()) {
    clear_payload();
    set_has_discovery_response();
    payload_.discovery_response_ = CreateMaybeMessage< ::chrome_browser_sharing::DiscoveryResponse >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.ResponseMessage.discovery_response)
  return payload_.discovery_response_;
}

inline bool ResponseMessage::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void ResponseMessage::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline ResponseMessage::PayloadCase ResponseMessage::payload_case() const {
  return ResponseMessage::PayloadCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FCMChannelConfiguration

// string vapid_fcm_token = 1;
inline void FCMChannelConfiguration::clear_vapid_fcm_token() {
  vapid_fcm_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FCMChannelConfiguration::vapid_fcm_token() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.FCMChannelConfiguration.vapid_fcm_token)
  return vapid_fcm_token_.GetNoArena();
}
inline void FCMChannelConfiguration::set_vapid_fcm_token(const std::string& value) {
  
  vapid_fcm_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_sharing.FCMChannelConfiguration.vapid_fcm_token)
}
inline void FCMChannelConfiguration::set_vapid_fcm_token(std::string&& value) {
  
  vapid_fcm_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_sharing.FCMChannelConfiguration.vapid_fcm_token)
}
inline void FCMChannelConfiguration::set_vapid_fcm_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vapid_fcm_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_sharing.FCMChannelConfiguration.vapid_fcm_token)
}
inline void FCMChannelConfiguration::set_vapid_fcm_token(const char* value, size_t size) {
  
  vapid_fcm_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_sharing.FCMChannelConfiguration.vapid_fcm_token)
}
inline std::string* FCMChannelConfiguration::mutable_vapid_fcm_token() {
  
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.FCMChannelConfiguration.vapid_fcm_token)
  return vapid_fcm_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FCMChannelConfiguration::release_vapid_fcm_token() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.FCMChannelConfiguration.vapid_fcm_token)
  
  return vapid_fcm_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FCMChannelConfiguration::set_allocated_vapid_fcm_token(std::string* vapid_fcm_token) {
  if (vapid_fcm_token != nullptr) {
    
  } else {
    
  }
  vapid_fcm_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vapid_fcm_token);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.FCMChannelConfiguration.vapid_fcm_token)
}

// bytes vapid_p256dh = 2;
inline void FCMChannelConfiguration::clear_vapid_p256dh() {
  vapid_p256dh_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FCMChannelConfiguration::vapid_p256dh() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.FCMChannelConfiguration.vapid_p256dh)
  return vapid_p256dh_.GetNoArena();
}
inline void FCMChannelConfiguration::set_vapid_p256dh(const std::string& value) {
  
  vapid_p256dh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_sharing.FCMChannelConfiguration.vapid_p256dh)
}
inline void FCMChannelConfiguration::set_vapid_p256dh(std::string&& value) {
  
  vapid_p256dh_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_sharing.FCMChannelConfiguration.vapid_p256dh)
}
inline void FCMChannelConfiguration::set_vapid_p256dh(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vapid_p256dh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_sharing.FCMChannelConfiguration.vapid_p256dh)
}
inline void FCMChannelConfiguration::set_vapid_p256dh(const void* value, size_t size) {
  
  vapid_p256dh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_sharing.FCMChannelConfiguration.vapid_p256dh)
}
inline std::string* FCMChannelConfiguration::mutable_vapid_p256dh() {
  
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.FCMChannelConfiguration.vapid_p256dh)
  return vapid_p256dh_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FCMChannelConfiguration::release_vapid_p256dh() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.FCMChannelConfiguration.vapid_p256dh)
  
  return vapid_p256dh_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FCMChannelConfiguration::set_allocated_vapid_p256dh(std::string* vapid_p256dh) {
  if (vapid_p256dh != nullptr) {
    
  } else {
    
  }
  vapid_p256dh_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vapid_p256dh);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.FCMChannelConfiguration.vapid_p256dh)
}

// bytes vapid_auth_secret = 3;
inline void FCMChannelConfiguration::clear_vapid_auth_secret() {
  vapid_auth_secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FCMChannelConfiguration::vapid_auth_secret() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.FCMChannelConfiguration.vapid_auth_secret)
  return vapid_auth_secret_.GetNoArena();
}
inline void FCMChannelConfiguration::set_vapid_auth_secret(const std::string& value) {
  
  vapid_auth_secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_sharing.FCMChannelConfiguration.vapid_auth_secret)
}
inline void FCMChannelConfiguration::set_vapid_auth_secret(std::string&& value) {
  
  vapid_auth_secret_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_sharing.FCMChannelConfiguration.vapid_auth_secret)
}
inline void FCMChannelConfiguration::set_vapid_auth_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vapid_auth_secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_sharing.FCMChannelConfiguration.vapid_auth_secret)
}
inline void FCMChannelConfiguration::set_vapid_auth_secret(const void* value, size_t size) {
  
  vapid_auth_secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_sharing.FCMChannelConfiguration.vapid_auth_secret)
}
inline std::string* FCMChannelConfiguration::mutable_vapid_auth_secret() {
  
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.FCMChannelConfiguration.vapid_auth_secret)
  return vapid_auth_secret_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FCMChannelConfiguration::release_vapid_auth_secret() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.FCMChannelConfiguration.vapid_auth_secret)
  
  return vapid_auth_secret_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FCMChannelConfiguration::set_allocated_vapid_auth_secret(std::string* vapid_auth_secret) {
  if (vapid_auth_secret != nullptr) {
    
  } else {
    
  }
  vapid_auth_secret_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vapid_auth_secret);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.FCMChannelConfiguration.vapid_auth_secret)
}

// string sender_id_fcm_token = 4;
inline void FCMChannelConfiguration::clear_sender_id_fcm_token() {
  sender_id_fcm_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FCMChannelConfiguration::sender_id_fcm_token() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.FCMChannelConfiguration.sender_id_fcm_token)
  return sender_id_fcm_token_.GetNoArena();
}
inline void FCMChannelConfiguration::set_sender_id_fcm_token(const std::string& value) {
  
  sender_id_fcm_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_sharing.FCMChannelConfiguration.sender_id_fcm_token)
}
inline void FCMChannelConfiguration::set_sender_id_fcm_token(std::string&& value) {
  
  sender_id_fcm_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_sharing.FCMChannelConfiguration.sender_id_fcm_token)
}
inline void FCMChannelConfiguration::set_sender_id_fcm_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_id_fcm_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_sharing.FCMChannelConfiguration.sender_id_fcm_token)
}
inline void FCMChannelConfiguration::set_sender_id_fcm_token(const char* value, size_t size) {
  
  sender_id_fcm_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_sharing.FCMChannelConfiguration.sender_id_fcm_token)
}
inline std::string* FCMChannelConfiguration::mutable_sender_id_fcm_token() {
  
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.FCMChannelConfiguration.sender_id_fcm_token)
  return sender_id_fcm_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FCMChannelConfiguration::release_sender_id_fcm_token() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.FCMChannelConfiguration.sender_id_fcm_token)
  
  return sender_id_fcm_token_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FCMChannelConfiguration::set_allocated_sender_id_fcm_token(std::string* sender_id_fcm_token) {
  if (sender_id_fcm_token != nullptr) {
    
  } else {
    
  }
  sender_id_fcm_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_id_fcm_token);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.FCMChannelConfiguration.sender_id_fcm_token)
}

// bytes sender_id_p256dh = 5;
inline void FCMChannelConfiguration::clear_sender_id_p256dh() {
  sender_id_p256dh_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FCMChannelConfiguration::sender_id_p256dh() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.FCMChannelConfiguration.sender_id_p256dh)
  return sender_id_p256dh_.GetNoArena();
}
inline void FCMChannelConfiguration::set_sender_id_p256dh(const std::string& value) {
  
  sender_id_p256dh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_sharing.FCMChannelConfiguration.sender_id_p256dh)
}
inline void FCMChannelConfiguration::set_sender_id_p256dh(std::string&& value) {
  
  sender_id_p256dh_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_sharing.FCMChannelConfiguration.sender_id_p256dh)
}
inline void FCMChannelConfiguration::set_sender_id_p256dh(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_id_p256dh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_sharing.FCMChannelConfiguration.sender_id_p256dh)
}
inline void FCMChannelConfiguration::set_sender_id_p256dh(const void* value, size_t size) {
  
  sender_id_p256dh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_sharing.FCMChannelConfiguration.sender_id_p256dh)
}
inline std::string* FCMChannelConfiguration::mutable_sender_id_p256dh() {
  
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.FCMChannelConfiguration.sender_id_p256dh)
  return sender_id_p256dh_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FCMChannelConfiguration::release_sender_id_p256dh() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.FCMChannelConfiguration.sender_id_p256dh)
  
  return sender_id_p256dh_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FCMChannelConfiguration::set_allocated_sender_id_p256dh(std::string* sender_id_p256dh) {
  if (sender_id_p256dh != nullptr) {
    
  } else {
    
  }
  sender_id_p256dh_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_id_p256dh);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.FCMChannelConfiguration.sender_id_p256dh)
}

// bytes sender_id_auth_secret = 6;
inline void FCMChannelConfiguration::clear_sender_id_auth_secret() {
  sender_id_auth_secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FCMChannelConfiguration::sender_id_auth_secret() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.FCMChannelConfiguration.sender_id_auth_secret)
  return sender_id_auth_secret_.GetNoArena();
}
inline void FCMChannelConfiguration::set_sender_id_auth_secret(const std::string& value) {
  
  sender_id_auth_secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_sharing.FCMChannelConfiguration.sender_id_auth_secret)
}
inline void FCMChannelConfiguration::set_sender_id_auth_secret(std::string&& value) {
  
  sender_id_auth_secret_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_sharing.FCMChannelConfiguration.sender_id_auth_secret)
}
inline void FCMChannelConfiguration::set_sender_id_auth_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sender_id_auth_secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_sharing.FCMChannelConfiguration.sender_id_auth_secret)
}
inline void FCMChannelConfiguration::set_sender_id_auth_secret(const void* value, size_t size) {
  
  sender_id_auth_secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_sharing.FCMChannelConfiguration.sender_id_auth_secret)
}
inline std::string* FCMChannelConfiguration::mutable_sender_id_auth_secret() {
  
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.FCMChannelConfiguration.sender_id_auth_secret)
  return sender_id_auth_secret_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FCMChannelConfiguration::release_sender_id_auth_secret() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.FCMChannelConfiguration.sender_id_auth_secret)
  
  return sender_id_auth_secret_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FCMChannelConfiguration::set_allocated_sender_id_auth_secret(std::string* sender_id_auth_secret) {
  if (sender_id_auth_secret != nullptr) {
    
  } else {
    
  }
  sender_id_auth_secret_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_id_auth_secret);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.FCMChannelConfiguration.sender_id_auth_secret)
}

// -------------------------------------------------------------------

// ServerChannelConfiguration

// bytes configuration = 3;
inline void ServerChannelConfiguration::clear_configuration() {
  configuration_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServerChannelConfiguration::configuration() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.ServerChannelConfiguration.configuration)
  return configuration_.GetNoArena();
}
inline void ServerChannelConfiguration::set_configuration(const std::string& value) {
  
  configuration_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_sharing.ServerChannelConfiguration.configuration)
}
inline void ServerChannelConfiguration::set_configuration(std::string&& value) {
  
  configuration_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_sharing.ServerChannelConfiguration.configuration)
}
inline void ServerChannelConfiguration::set_configuration(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  configuration_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_sharing.ServerChannelConfiguration.configuration)
}
inline void ServerChannelConfiguration::set_configuration(const void* value, size_t size) {
  
  configuration_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_sharing.ServerChannelConfiguration.configuration)
}
inline std::string* ServerChannelConfiguration::mutable_configuration() {
  
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.ServerChannelConfiguration.configuration)
  return configuration_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerChannelConfiguration::release_configuration() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.ServerChannelConfiguration.configuration)
  
  return configuration_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerChannelConfiguration::set_allocated_configuration(std::string* configuration) {
  if (configuration != nullptr) {
    
  } else {
    
  }
  configuration_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), configuration);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.ServerChannelConfiguration.configuration)
}

// bytes p256dh = 4;
inline void ServerChannelConfiguration::clear_p256dh() {
  p256dh_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServerChannelConfiguration::p256dh() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.ServerChannelConfiguration.p256dh)
  return p256dh_.GetNoArena();
}
inline void ServerChannelConfiguration::set_p256dh(const std::string& value) {
  
  p256dh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_sharing.ServerChannelConfiguration.p256dh)
}
inline void ServerChannelConfiguration::set_p256dh(std::string&& value) {
  
  p256dh_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_sharing.ServerChannelConfiguration.p256dh)
}
inline void ServerChannelConfiguration::set_p256dh(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  p256dh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_sharing.ServerChannelConfiguration.p256dh)
}
inline void ServerChannelConfiguration::set_p256dh(const void* value, size_t size) {
  
  p256dh_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_sharing.ServerChannelConfiguration.p256dh)
}
inline std::string* ServerChannelConfiguration::mutable_p256dh() {
  
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.ServerChannelConfiguration.p256dh)
  return p256dh_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerChannelConfiguration::release_p256dh() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.ServerChannelConfiguration.p256dh)
  
  return p256dh_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerChannelConfiguration::set_allocated_p256dh(std::string* p256dh) {
  if (p256dh != nullptr) {
    
  } else {
    
  }
  p256dh_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), p256dh);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.ServerChannelConfiguration.p256dh)
}

// bytes auth_secret = 5;
inline void ServerChannelConfiguration::clear_auth_secret() {
  auth_secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServerChannelConfiguration::auth_secret() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.ServerChannelConfiguration.auth_secret)
  return auth_secret_.GetNoArena();
}
inline void ServerChannelConfiguration::set_auth_secret(const std::string& value) {
  
  auth_secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_sharing.ServerChannelConfiguration.auth_secret)
}
inline void ServerChannelConfiguration::set_auth_secret(std::string&& value) {
  
  auth_secret_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_sharing.ServerChannelConfiguration.auth_secret)
}
inline void ServerChannelConfiguration::set_auth_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auth_secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_sharing.ServerChannelConfiguration.auth_secret)
}
inline void ServerChannelConfiguration::set_auth_secret(const void* value, size_t size) {
  
  auth_secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_sharing.ServerChannelConfiguration.auth_secret)
}
inline std::string* ServerChannelConfiguration::mutable_auth_secret() {
  
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.ServerChannelConfiguration.auth_secret)
  return auth_secret_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerChannelConfiguration::release_auth_secret() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.ServerChannelConfiguration.auth_secret)
  
  return auth_secret_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerChannelConfiguration::set_allocated_auth_secret(std::string* auth_secret) {
  if (auth_secret != nullptr) {
    
  } else {
    
  }
  auth_secret_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth_secret);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.ServerChannelConfiguration.auth_secret)
}

// -------------------------------------------------------------------

// DiscoveryRequest

// string service_id = 1;
inline void DiscoveryRequest::clear_service_id() {
  service_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiscoveryRequest::service_id() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.DiscoveryRequest.service_id)
  return service_id_.GetNoArena();
}
inline void DiscoveryRequest::set_service_id(const std::string& value) {
  
  service_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_sharing.DiscoveryRequest.service_id)
}
inline void DiscoveryRequest::set_service_id(std::string&& value) {
  
  service_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_sharing.DiscoveryRequest.service_id)
}
inline void DiscoveryRequest::set_service_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_sharing.DiscoveryRequest.service_id)
}
inline void DiscoveryRequest::set_service_id(const char* value, size_t size) {
  
  service_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_sharing.DiscoveryRequest.service_id)
}
inline std::string* DiscoveryRequest::mutable_service_id() {
  
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.DiscoveryRequest.service_id)
  return service_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiscoveryRequest::release_service_id() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.DiscoveryRequest.service_id)
  
  return service_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiscoveryRequest::set_allocated_service_id(std::string* service_id) {
  if (service_id != nullptr) {
    
  } else {
    
  }
  service_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_id);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.DiscoveryRequest.service_id)
}

// -------------------------------------------------------------------

// DiscoveryResponse

// string service_id = 1;
inline void DiscoveryResponse::clear_service_id() {
  service_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiscoveryResponse::service_id() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.DiscoveryResponse.service_id)
  return service_id_.GetNoArena();
}
inline void DiscoveryResponse::set_service_id(const std::string& value) {
  
  service_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_sharing.DiscoveryResponse.service_id)
}
inline void DiscoveryResponse::set_service_id(std::string&& value) {
  
  service_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_sharing.DiscoveryResponse.service_id)
}
inline void DiscoveryResponse::set_service_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_sharing.DiscoveryResponse.service_id)
}
inline void DiscoveryResponse::set_service_id(const char* value, size_t size) {
  
  service_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_sharing.DiscoveryResponse.service_id)
}
inline std::string* DiscoveryResponse::mutable_service_id() {
  
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.DiscoveryResponse.service_id)
  return service_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiscoveryResponse::release_service_id() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.DiscoveryResponse.service_id)
  
  return service_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiscoveryResponse::set_allocated_service_id(std::string* service_id) {
  if (service_id != nullptr) {
    
  } else {
    
  }
  service_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_id);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.DiscoveryResponse.service_id)
}

// string endpoint_id = 2;
inline void DiscoveryResponse::clear_endpoint_id() {
  endpoint_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiscoveryResponse::endpoint_id() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.DiscoveryResponse.endpoint_id)
  return endpoint_id_.GetNoArena();
}
inline void DiscoveryResponse::set_endpoint_id(const std::string& value) {
  
  endpoint_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_sharing.DiscoveryResponse.endpoint_id)
}
inline void DiscoveryResponse::set_endpoint_id(std::string&& value) {
  
  endpoint_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_sharing.DiscoveryResponse.endpoint_id)
}
inline void DiscoveryResponse::set_endpoint_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endpoint_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_sharing.DiscoveryResponse.endpoint_id)
}
inline void DiscoveryResponse::set_endpoint_id(const char* value, size_t size) {
  
  endpoint_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_sharing.DiscoveryResponse.endpoint_id)
}
inline std::string* DiscoveryResponse::mutable_endpoint_id() {
  
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.DiscoveryResponse.endpoint_id)
  return endpoint_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiscoveryResponse::release_endpoint_id() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.DiscoveryResponse.endpoint_id)
  
  return endpoint_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiscoveryResponse::set_allocated_endpoint_id(std::string* endpoint_id) {
  if (endpoint_id != nullptr) {
    
  } else {
    
  }
  endpoint_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endpoint_id);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.DiscoveryResponse.endpoint_id)
}

// bytes endpoint_info = 3;
inline void DiscoveryResponse::clear_endpoint_info() {
  endpoint_info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DiscoveryResponse::endpoint_info() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.DiscoveryResponse.endpoint_info)
  return endpoint_info_.GetNoArena();
}
inline void DiscoveryResponse::set_endpoint_info(const std::string& value) {
  
  endpoint_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_sharing.DiscoveryResponse.endpoint_info)
}
inline void DiscoveryResponse::set_endpoint_info(std::string&& value) {
  
  endpoint_info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_sharing.DiscoveryResponse.endpoint_info)
}
inline void DiscoveryResponse::set_endpoint_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endpoint_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_sharing.DiscoveryResponse.endpoint_info)
}
inline void DiscoveryResponse::set_endpoint_info(const void* value, size_t size) {
  
  endpoint_info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_sharing.DiscoveryResponse.endpoint_info)
}
inline std::string* DiscoveryResponse::mutable_endpoint_info() {
  
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.DiscoveryResponse.endpoint_info)
  return endpoint_info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DiscoveryResponse::release_endpoint_info() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.DiscoveryResponse.endpoint_info)
  
  return endpoint_info_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DiscoveryResponse::set_allocated_endpoint_info(std::string* endpoint_info) {
  if (endpoint_info != nullptr) {
    
  } else {
    
  }
  endpoint_info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endpoint_info);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.DiscoveryResponse.endpoint_info)
}

// -------------------------------------------------------------------

// WebRtcSignalingMessage

// bytes web_rtc_signaling_frame = 1;
inline void WebRtcSignalingMessage::clear_web_rtc_signaling_frame() {
  web_rtc_signaling_frame_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WebRtcSignalingMessage::web_rtc_signaling_frame() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.WebRtcSignalingMessage.web_rtc_signaling_frame)
  return web_rtc_signaling_frame_.GetNoArena();
}
inline void WebRtcSignalingMessage::set_web_rtc_signaling_frame(const std::string& value) {
  
  web_rtc_signaling_frame_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_sharing.WebRtcSignalingMessage.web_rtc_signaling_frame)
}
inline void WebRtcSignalingMessage::set_web_rtc_signaling_frame(std::string&& value) {
  
  web_rtc_signaling_frame_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_sharing.WebRtcSignalingMessage.web_rtc_signaling_frame)
}
inline void WebRtcSignalingMessage::set_web_rtc_signaling_frame(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  web_rtc_signaling_frame_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_sharing.WebRtcSignalingMessage.web_rtc_signaling_frame)
}
inline void WebRtcSignalingMessage::set_web_rtc_signaling_frame(const void* value, size_t size) {
  
  web_rtc_signaling_frame_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_sharing.WebRtcSignalingMessage.web_rtc_signaling_frame)
}
inline std::string* WebRtcSignalingMessage::mutable_web_rtc_signaling_frame() {
  
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.WebRtcSignalingMessage.web_rtc_signaling_frame)
  return web_rtc_signaling_frame_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WebRtcSignalingMessage::release_web_rtc_signaling_frame() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.WebRtcSignalingMessage.web_rtc_signaling_frame)
  
  return web_rtc_signaling_frame_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WebRtcSignalingMessage::set_allocated_web_rtc_signaling_frame(std::string* web_rtc_signaling_frame) {
  if (web_rtc_signaling_frame != nullptr) {
    
  } else {
    
  }
  web_rtc_signaling_frame_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), web_rtc_signaling_frame);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.WebRtcSignalingMessage.web_rtc_signaling_frame)
}

// -------------------------------------------------------------------

// WebRtcMessage

// string message_guid = 1;
inline void WebRtcMessage::clear_message_guid() {
  message_guid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WebRtcMessage::message_guid() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.WebRtcMessage.message_guid)
  return message_guid_.GetNoArena();
}
inline void WebRtcMessage::set_message_guid(const std::string& value) {
  
  message_guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_sharing.WebRtcMessage.message_guid)
}
inline void WebRtcMessage::set_message_guid(std::string&& value) {
  
  message_guid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_sharing.WebRtcMessage.message_guid)
}
inline void WebRtcMessage::set_message_guid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_sharing.WebRtcMessage.message_guid)
}
inline void WebRtcMessage::set_message_guid(const char* value, size_t size) {
  
  message_guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_sharing.WebRtcMessage.message_guid)
}
inline std::string* WebRtcMessage::mutable_message_guid() {
  
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.WebRtcMessage.message_guid)
  return message_guid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WebRtcMessage::release_message_guid() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.WebRtcMessage.message_guid)
  
  return message_guid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WebRtcMessage::set_allocated_message_guid(std::string* message_guid) {
  if (message_guid != nullptr) {
    
  } else {
    
  }
  message_guid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_guid);
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.WebRtcMessage.message_guid)
}

// .chrome_browser_sharing.SharingMessage message = 2;
inline bool WebRtcMessage::has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline void WebRtcMessage::clear_message() {
  if (GetArenaNoVirtual() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
inline const ::chrome_browser_sharing::SharingMessage& WebRtcMessage::message() const {
  const ::chrome_browser_sharing::SharingMessage* p = message_;
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.WebRtcMessage.message)
  return p != nullptr ? *p : *reinterpret_cast<const ::chrome_browser_sharing::SharingMessage*>(
      &::chrome_browser_sharing::_SharingMessage_default_instance_);
}
inline ::chrome_browser_sharing::SharingMessage* WebRtcMessage::release_message() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.WebRtcMessage.message)
  
  ::chrome_browser_sharing::SharingMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::chrome_browser_sharing::SharingMessage* WebRtcMessage::mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::chrome_browser_sharing::SharingMessage>(GetArenaNoVirtual());
    message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.WebRtcMessage.message)
  return message_;
}
inline void WebRtcMessage::set_allocated_message(::chrome_browser_sharing::SharingMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.WebRtcMessage.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chrome_browser_sharing

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::chrome_browser_sharing::MessageType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sharing_5fmessage_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remote_copy_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_remote_5fcopy_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_remote_5fcopy_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_remote_5fcopy_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_remote_5fcopy_5fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace chrome_browser_sharing {
class RemoteCopyMessage;
class RemoteCopyMessageDefaultTypeInternal;
extern RemoteCopyMessageDefaultTypeInternal _RemoteCopyMessage_default_instance_;
}  // namespace chrome_browser_sharing
PROTOBUF_NAMESPACE_OPEN
template<> ::chrome_browser_sharing::RemoteCopyMessage* Arena::CreateMaybeMessage<::chrome_browser_sharing::RemoteCopyMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chrome_browser_sharing {

// ===================================================================

class RemoteCopyMessage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_sharing.RemoteCopyMessage) */ {
 public:
  RemoteCopyMessage();
  virtual ~RemoteCopyMessage();

  RemoteCopyMessage(const RemoteCopyMessage& from);
  RemoteCopyMessage(RemoteCopyMessage&& from) noexcept
    : RemoteCopyMessage() {
    *this = ::std::move(from);
  }

  inline RemoteCopyMessage& operator=(const RemoteCopyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteCopyMessage& operator=(RemoteCopyMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const RemoteCopyMessage& default_instance();

  enum ContentCase {
    kText = 1,
    kImageUrl = 2,
    CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoteCopyMessage* internal_default_instance() {
    return reinterpret_cast<const RemoteCopyMessage*>(
               &_RemoteCopyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RemoteCopyMessage& a, RemoteCopyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteCopyMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoteCopyMessage* New() const final {
    return CreateMaybeMessage<RemoteCopyMessage>(nullptr);
  }

  RemoteCopyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoteCopyMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const RemoteCopyMessage& from);
  void MergeFrom(const RemoteCopyMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RemoteCopyMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_sharing.RemoteCopyMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kImageUrlFieldNumber = 2,
  };
  // string text = 1;
  private:
  bool has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);

  // string image_url = 2;
  private:
  bool has_image_url() const;
  public:
  void clear_image_url();
  const std::string& image_url() const;
  void set_image_url(const std::string& value);
  void set_image_url(std::string&& value);
  void set_image_url(const char* value);
  void set_image_url(const char* value, size_t size);
  std::string* mutable_image_url();
  std::string* release_image_url();
  void set_allocated_image_url(std::string* image_url);

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:chrome_browser_sharing.RemoteCopyMessage)
 private:
  class _Internal;
  void set_has_text();
  void set_has_image_url();

  inline bool has_content() const;
  inline void clear_has_content();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  union ContentUnion {
    ContentUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_url_;
  } content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_remote_5fcopy_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RemoteCopyMessage

// string text = 1;
inline bool RemoteCopyMessage::has_text() const {
  return content_case() == kText;
}
inline void RemoteCopyMessage::set_has_text() {
  _oneof_case_[0] = kText;
}
inline void RemoteCopyMessage::clear_text() {
  if (has_text()) {
    content_.text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_content();
  }
}
inline const std::string& RemoteCopyMessage::text() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.RemoteCopyMessage.text)
  if (has_text()) {
    return content_.text_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RemoteCopyMessage::set_text(const std::string& value) {
  // @@protoc_insertion_point(field_set:chrome_browser_sharing.RemoteCopyMessage.text)
  if (!has_text()) {
    clear_content();
    set_has_text();
    content_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  content_.text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_sharing.RemoteCopyMessage.text)
}
inline void RemoteCopyMessage::set_text(std::string&& value) {
  // @@protoc_insertion_point(field_set:chrome_browser_sharing.RemoteCopyMessage.text)
  if (!has_text()) {
    clear_content();
    set_has_text();
    content_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  content_.text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_sharing.RemoteCopyMessage.text)
}
inline void RemoteCopyMessage::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_text()) {
    clear_content();
    set_has_text();
    content_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  content_.text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_sharing.RemoteCopyMessage.text)
}
inline void RemoteCopyMessage::set_text(const char* value, size_t size) {
  if (!has_text()) {
    clear_content();
    set_has_text();
    content_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  content_.text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_sharing.RemoteCopyMessage.text)
}
inline std::string* RemoteCopyMessage::mutable_text() {
  if (!has_text()) {
    clear_content();
    set_has_text();
    content_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.RemoteCopyMessage.text)
  return content_.text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemoteCopyMessage::release_text() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.RemoteCopyMessage.text)
  if (has_text()) {
    clear_has_content();
    return content_.text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void RemoteCopyMessage::set_allocated_text(std::string* text) {
  if (has_content()) {
    clear_content();
  }
  if (text != nullptr) {
    set_has_text();
    content_.text_.UnsafeSetDefault(text);
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.RemoteCopyMessage.text)
}

// string image_url = 2;
inline bool RemoteCopyMessage::has_image_url() const {
  return content_case() == kImageUrl;
}
inline void RemoteCopyMessage::set_has_image_url() {
  _oneof_case_[0] = kImageUrl;
}
inline void RemoteCopyMessage::clear_image_url() {
  if (has_image_url()) {
    content_.image_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_content();
  }
}
inline const std::string& RemoteCopyMessage::image_url() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.RemoteCopyMessage.image_url)
  if (has_image_url()) {
    return content_.image_url_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RemoteCopyMessage::set_image_url(const std::string& value) {
  // @@protoc_insertion_point(field_set:chrome_browser_sharing.RemoteCopyMessage.image_url)
  if (!has_image_url()) {
    clear_content();
    set_has_image_url();
    content_.image_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  content_.image_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_browser_sharing.RemoteCopyMessage.image_url)
}
inline void RemoteCopyMessage::set_image_url(std::string&& value) {
  // @@protoc_insertion_point(field_set:chrome_browser_sharing.RemoteCopyMessage.image_url)
  if (!has_image_url()) {
    clear_content();
    set_has_image_url();
    content_.image_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  content_.image_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chrome_browser_sharing.RemoteCopyMessage.image_url)
}
inline void RemoteCopyMessage::set_image_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_image_url()) {
    clear_content();
    set_has_image_url();
    content_.image_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  content_.image_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_browser_sharing.RemoteCopyMessage.image_url)
}
inline void RemoteCopyMessage::set_image_url(const char* value, size_t size) {
  if (!has_image_url()) {
    clear_content();
    set_has_image_url();
    content_.image_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  content_.image_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_sharing.RemoteCopyMessage.image_url)
}
inline std::string* RemoteCopyMessage::mutable_image_url() {
  if (!has_image_url()) {
    clear_content();
    set_has_image_url();
    content_.image_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.RemoteCopyMessage.image_url)
  return content_.image_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemoteCopyMessage::release_image_url() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.RemoteCopyMessage.image_url)
  if (has_image_url()) {
    clear_has_content();
    return content_.image_url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void RemoteCopyMessage::set_allocated_image_url(std::string* image_url) {
  if (has_content()) {
    clear_content();
  }
  if (image_url != nullptr) {
    set_has_image_url();
    content_.image_url_.UnsafeSetDefault(image_url);
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.RemoteCopyMessage.image_url)
}

inline bool RemoteCopyMessage::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void RemoteCopyMessage::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline RemoteCopyMessage::ContentCase RemoteCopyMessage::content_case() const {
  return RemoteCopyMessage::ContentCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace chrome_browser_sharing

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_remote_5fcopy_5fmessage_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: peer_connection_messages.proto

#include "peer_connection_messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_peer_5fconnection_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerConnectionIceCandidate_peer_5fconnection_5fmessages_2eproto;
namespace chrome_browser_sharing {
class PeerConnectionOfferMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerConnectionOfferMessage> _instance;
} _PeerConnectionOfferMessage_default_instance_;
class PeerConnectionAnswerMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerConnectionAnswerMessage> _instance;
} _PeerConnectionAnswerMessage_default_instance_;
class PeerConnectionIceCandidateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerConnectionIceCandidate> _instance;
} _PeerConnectionIceCandidate_default_instance_;
class PeerConnectionIceCandidatesMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerConnectionIceCandidatesMessage> _instance;
} _PeerConnectionIceCandidatesMessage_default_instance_;
}  // namespace chrome_browser_sharing
static void InitDefaultsscc_info_PeerConnectionAnswerMessage_peer_5fconnection_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chrome_browser_sharing::_PeerConnectionAnswerMessage_default_instance_;
    new (ptr) ::chrome_browser_sharing::PeerConnectionAnswerMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chrome_browser_sharing::PeerConnectionAnswerMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerConnectionAnswerMessage_peer_5fconnection_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PeerConnectionAnswerMessage_peer_5fconnection_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_PeerConnectionIceCandidate_peer_5fconnection_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chrome_browser_sharing::_PeerConnectionIceCandidate_default_instance_;
    new (ptr) ::chrome_browser_sharing::PeerConnectionIceCandidate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chrome_browser_sharing::PeerConnectionIceCandidate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerConnectionIceCandidate_peer_5fconnection_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PeerConnectionIceCandidate_peer_5fconnection_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_PeerConnectionIceCandidatesMessage_peer_5fconnection_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chrome_browser_sharing::_PeerConnectionIceCandidatesMessage_default_instance_;
    new (ptr) ::chrome_browser_sharing::PeerConnectionIceCandidatesMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chrome_browser_sharing::PeerConnectionIceCandidatesMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PeerConnectionIceCandidatesMessage_peer_5fconnection_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PeerConnectionIceCandidatesMessage_peer_5fconnection_5fmessages_2eproto}, {
      &scc_info_PeerConnectionIceCandidate_peer_5fconnection_5fmessages_2eproto.base,}};

static void InitDefaultsscc_info_PeerConnectionOfferMessage_peer_5fconnection_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chrome_browser_sharing::_PeerConnectionOfferMessage_default_instance_;
    new (ptr) ::chrome_browser_sharing::PeerConnectionOfferMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chrome_browser_sharing::PeerConnectionOfferMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerConnectionOfferMessage_peer_5fconnection_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PeerConnectionOfferMessage_peer_5fconnection_5fmessages_2eproto}, {}};

namespace chrome_browser_sharing {

// ===================================================================

void PeerConnectionOfferMessage::InitAsDefaultInstance() {
}
class PeerConnectionOfferMessage::_Internal {
 public:
};

PeerConnectionOfferMessage::PeerConnectionOfferMessage()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_sharing.PeerConnectionOfferMessage)
}
PeerConnectionOfferMessage::PeerConnectionOfferMessage(const PeerConnectionOfferMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sdp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sdp().empty()) {
    sdp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sdp_);
  }
  // @@protoc_insertion_point(copy_constructor:chrome_browser_sharing.PeerConnectionOfferMessage)
}

void PeerConnectionOfferMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeerConnectionOfferMessage_peer_5fconnection_5fmessages_2eproto.base);
  sdp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PeerConnectionOfferMessage::~PeerConnectionOfferMessage() {
  // @@protoc_insertion_point(destructor:chrome_browser_sharing.PeerConnectionOfferMessage)
  SharedDtor();
}

void PeerConnectionOfferMessage::SharedDtor() {
  sdp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PeerConnectionOfferMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerConnectionOfferMessage& PeerConnectionOfferMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerConnectionOfferMessage_peer_5fconnection_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void PeerConnectionOfferMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_sharing.PeerConnectionOfferMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sdp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PeerConnectionOfferMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sdp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sdp(), ptr, ctx, nullptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PeerConnectionOfferMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_sharing.PeerConnectionOfferMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sdp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sdp()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sdp().data(), static_cast<int>(this->sdp().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "chrome_browser_sharing.PeerConnectionOfferMessage.sdp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_sharing.PeerConnectionOfferMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_sharing.PeerConnectionOfferMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PeerConnectionOfferMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_sharing.PeerConnectionOfferMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sdp = 1;
  if (this->sdp().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sdp().data(), static_cast<int>(this->sdp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_sharing.PeerConnectionOfferMessage.sdp");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sdp(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_sharing.PeerConnectionOfferMessage)
}

size_t PeerConnectionOfferMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_sharing.PeerConnectionOfferMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sdp = 1;
  if (this->sdp().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sdp());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerConnectionOfferMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PeerConnectionOfferMessage*>(
      &from));
}

void PeerConnectionOfferMessage::MergeFrom(const PeerConnectionOfferMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_sharing.PeerConnectionOfferMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sdp().size() > 0) {

    sdp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sdp_);
  }
}

void PeerConnectionOfferMessage::CopyFrom(const PeerConnectionOfferMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_sharing.PeerConnectionOfferMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerConnectionOfferMessage::IsInitialized() const {
  return true;
}

void PeerConnectionOfferMessage::InternalSwap(PeerConnectionOfferMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sdp_.Swap(&other->sdp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string PeerConnectionOfferMessage::GetTypeName() const {
  return "chrome_browser_sharing.PeerConnectionOfferMessage";
}


// ===================================================================

void PeerConnectionAnswerMessage::InitAsDefaultInstance() {
}
class PeerConnectionAnswerMessage::_Internal {
 public:
};

PeerConnectionAnswerMessage::PeerConnectionAnswerMessage()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_sharing.PeerConnectionAnswerMessage)
}
PeerConnectionAnswerMessage::PeerConnectionAnswerMessage(const PeerConnectionAnswerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sdp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sdp().empty()) {
    sdp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sdp_);
  }
  // @@protoc_insertion_point(copy_constructor:chrome_browser_sharing.PeerConnectionAnswerMessage)
}

void PeerConnectionAnswerMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeerConnectionAnswerMessage_peer_5fconnection_5fmessages_2eproto.base);
  sdp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PeerConnectionAnswerMessage::~PeerConnectionAnswerMessage() {
  // @@protoc_insertion_point(destructor:chrome_browser_sharing.PeerConnectionAnswerMessage)
  SharedDtor();
}

void PeerConnectionAnswerMessage::SharedDtor() {
  sdp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PeerConnectionAnswerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerConnectionAnswerMessage& PeerConnectionAnswerMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerConnectionAnswerMessage_peer_5fconnection_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void PeerConnectionAnswerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_sharing.PeerConnectionAnswerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sdp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PeerConnectionAnswerMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sdp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sdp(), ptr, ctx, nullptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PeerConnectionAnswerMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_sharing.PeerConnectionAnswerMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sdp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sdp()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sdp().data(), static_cast<int>(this->sdp().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "chrome_browser_sharing.PeerConnectionAnswerMessage.sdp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_sharing.PeerConnectionAnswerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_sharing.PeerConnectionAnswerMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PeerConnectionAnswerMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_sharing.PeerConnectionAnswerMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sdp = 1;
  if (this->sdp().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sdp().data(), static_cast<int>(this->sdp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_sharing.PeerConnectionAnswerMessage.sdp");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sdp(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_sharing.PeerConnectionAnswerMessage)
}

size_t PeerConnectionAnswerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_sharing.PeerConnectionAnswerMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sdp = 1;
  if (this->sdp().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sdp());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerConnectionAnswerMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PeerConnectionAnswerMessage*>(
      &from));
}

void PeerConnectionAnswerMessage::MergeFrom(const PeerConnectionAnswerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_sharing.PeerConnectionAnswerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sdp().size() > 0) {

    sdp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sdp_);
  }
}

void PeerConnectionAnswerMessage::CopyFrom(const PeerConnectionAnswerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_sharing.PeerConnectionAnswerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerConnectionAnswerMessage::IsInitialized() const {
  return true;
}

void PeerConnectionAnswerMessage::InternalSwap(PeerConnectionAnswerMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sdp_.Swap(&other->sdp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string PeerConnectionAnswerMessage::GetTypeName() const {
  return "chrome_browser_sharing.PeerConnectionAnswerMessage";
}


// ===================================================================

void PeerConnectionIceCandidate::InitAsDefaultInstance() {
}
class PeerConnectionIceCandidate::_Internal {
 public:
};

PeerConnectionIceCandidate::PeerConnectionIceCandidate()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_sharing.PeerConnectionIceCandidate)
}
PeerConnectionIceCandidate::PeerConnectionIceCandidate(const PeerConnectionIceCandidate& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  candidate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.candidate().empty()) {
    candidate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.candidate_);
  }
  sdp_mid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sdp_mid().empty()) {
    sdp_mid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sdp_mid_);
  }
  sdp_mline_index_ = from.sdp_mline_index_;
  // @@protoc_insertion_point(copy_constructor:chrome_browser_sharing.PeerConnectionIceCandidate)
}

void PeerConnectionIceCandidate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeerConnectionIceCandidate_peer_5fconnection_5fmessages_2eproto.base);
  candidate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sdp_mid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sdp_mline_index_ = 0;
}

PeerConnectionIceCandidate::~PeerConnectionIceCandidate() {
  // @@protoc_insertion_point(destructor:chrome_browser_sharing.PeerConnectionIceCandidate)
  SharedDtor();
}

void PeerConnectionIceCandidate::SharedDtor() {
  candidate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sdp_mid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PeerConnectionIceCandidate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerConnectionIceCandidate& PeerConnectionIceCandidate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerConnectionIceCandidate_peer_5fconnection_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void PeerConnectionIceCandidate::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_sharing.PeerConnectionIceCandidate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sdp_mid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sdp_mline_index_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PeerConnectionIceCandidate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string candidate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_candidate(), ptr, ctx, nullptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sdp_mid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sdp_mid(), ptr, ctx, nullptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sdp_mline_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sdp_mline_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PeerConnectionIceCandidate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_sharing.PeerConnectionIceCandidate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string candidate = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_candidate()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->candidate().data(), static_cast<int>(this->candidate().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "chrome_browser_sharing.PeerConnectionIceCandidate.candidate"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sdp_mid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sdp_mid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sdp_mid().data(), static_cast<int>(this->sdp_mid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "chrome_browser_sharing.PeerConnectionIceCandidate.sdp_mid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sdp_mline_index = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sdp_mline_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_sharing.PeerConnectionIceCandidate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_sharing.PeerConnectionIceCandidate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PeerConnectionIceCandidate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_sharing.PeerConnectionIceCandidate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string candidate = 1;
  if (this->candidate().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->candidate().data(), static_cast<int>(this->candidate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_sharing.PeerConnectionIceCandidate.candidate");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->candidate(), output);
  }

  // string sdp_mid = 2;
  if (this->sdp_mid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sdp_mid().data(), static_cast<int>(this->sdp_mid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_sharing.PeerConnectionIceCandidate.sdp_mid");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sdp_mid(), output);
  }

  // int32 sdp_mline_index = 3;
  if (this->sdp_mline_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->sdp_mline_index(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_sharing.PeerConnectionIceCandidate)
}

size_t PeerConnectionIceCandidate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_sharing.PeerConnectionIceCandidate)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string candidate = 1;
  if (this->candidate().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->candidate());
  }

  // string sdp_mid = 2;
  if (this->sdp_mid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sdp_mid());
  }

  // int32 sdp_mline_index = 3;
  if (this->sdp_mline_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->sdp_mline_index());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerConnectionIceCandidate::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PeerConnectionIceCandidate*>(
      &from));
}

void PeerConnectionIceCandidate::MergeFrom(const PeerConnectionIceCandidate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_sharing.PeerConnectionIceCandidate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.candidate().size() > 0) {

    candidate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.candidate_);
  }
  if (from.sdp_mid().size() > 0) {

    sdp_mid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sdp_mid_);
  }
  if (from.sdp_mline_index() != 0) {
    set_sdp_mline_index(from.sdp_mline_index());
  }
}

void PeerConnectionIceCandidate::CopyFrom(const PeerConnectionIceCandidate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_sharing.PeerConnectionIceCandidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerConnectionIceCandidate::IsInitialized() const {
  return true;
}

void PeerConnectionIceCandidate::InternalSwap(PeerConnectionIceCandidate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  candidate_.Swap(&other->candidate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sdp_mid_.Swap(&other->sdp_mid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sdp_mline_index_, other->sdp_mline_index_);
}

std::string PeerConnectionIceCandidate::GetTypeName() const {
  return "chrome_browser_sharing.PeerConnectionIceCandidate";
}


// ===================================================================

void PeerConnectionIceCandidatesMessage::InitAsDefaultInstance() {
}
class PeerConnectionIceCandidatesMessage::_Internal {
 public:
};

PeerConnectionIceCandidatesMessage::PeerConnectionIceCandidatesMessage()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_browser_sharing.PeerConnectionIceCandidatesMessage)
}
PeerConnectionIceCandidatesMessage::PeerConnectionIceCandidatesMessage(const PeerConnectionIceCandidatesMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      ice_candidates_(from.ice_candidates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chrome_browser_sharing.PeerConnectionIceCandidatesMessage)
}

void PeerConnectionIceCandidatesMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeerConnectionIceCandidatesMessage_peer_5fconnection_5fmessages_2eproto.base);
}

PeerConnectionIceCandidatesMessage::~PeerConnectionIceCandidatesMessage() {
  // @@protoc_insertion_point(destructor:chrome_browser_sharing.PeerConnectionIceCandidatesMessage)
  SharedDtor();
}

void PeerConnectionIceCandidatesMessage::SharedDtor() {
}

void PeerConnectionIceCandidatesMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerConnectionIceCandidatesMessage& PeerConnectionIceCandidatesMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerConnectionIceCandidatesMessage_peer_5fconnection_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void PeerConnectionIceCandidatesMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_sharing.PeerConnectionIceCandidatesMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ice_candidates_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PeerConnectionIceCandidatesMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .chrome_browser_sharing.PeerConnectionIceCandidate ice_candidates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_ice_candidates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PeerConnectionIceCandidatesMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:chrome_browser_sharing.PeerConnectionIceCandidatesMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .chrome_browser_sharing.PeerConnectionIceCandidate ice_candidates = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_ice_candidates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_browser_sharing.PeerConnectionIceCandidatesMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_browser_sharing.PeerConnectionIceCandidatesMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PeerConnectionIceCandidatesMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_browser_sharing.PeerConnectionIceCandidatesMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chrome_browser_sharing.PeerConnectionIceCandidate ice_candidates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ice_candidates_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->ice_candidates(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_browser_sharing.PeerConnectionIceCandidatesMessage)
}

size_t PeerConnectionIceCandidatesMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_sharing.PeerConnectionIceCandidatesMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .chrome_browser_sharing.PeerConnectionIceCandidate ice_candidates = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->ice_candidates_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->ice_candidates(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerConnectionIceCandidatesMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PeerConnectionIceCandidatesMessage*>(
      &from));
}

void PeerConnectionIceCandidatesMessage::MergeFrom(const PeerConnectionIceCandidatesMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_sharing.PeerConnectionIceCandidatesMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ice_candidates_.MergeFrom(from.ice_candidates_);
}

void PeerConnectionIceCandidatesMessage::CopyFrom(const PeerConnectionIceCandidatesMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_sharing.PeerConnectionIceCandidatesMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerConnectionIceCandidatesMessage::IsInitialized() const {
  return true;
}

void PeerConnectionIceCandidatesMessage::InternalSwap(PeerConnectionIceCandidatesMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&ice_candidates_)->InternalSwap(CastToBase(&other->ice_candidates_));
}

std::string PeerConnectionIceCandidatesMessage::GetTypeName() const {
  return "chrome_browser_sharing.PeerConnectionIceCandidatesMessage";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chrome_browser_sharing
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::chrome_browser_sharing::PeerConnectionOfferMessage* Arena::CreateMaybeMessage< ::chrome_browser_sharing::PeerConnectionOfferMessage >(Arena* arena) {
  return Arena::CreateInternal< ::chrome_browser_sharing::PeerConnectionOfferMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_sharing::PeerConnectionAnswerMessage* Arena::CreateMaybeMessage< ::chrome_browser_sharing::PeerConnectionAnswerMessage >(Arena* arena) {
  return Arena::CreateInternal< ::chrome_browser_sharing::PeerConnectionAnswerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_sharing::PeerConnectionIceCandidate* Arena::CreateMaybeMessage< ::chrome_browser_sharing::PeerConnectionIceCandidate >(Arena* arena) {
  return Arena::CreateInternal< ::chrome_browser_sharing::PeerConnectionIceCandidate >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_sharing::PeerConnectionIceCandidatesMessage* Arena::CreateMaybeMessage< ::chrome_browser_sharing::PeerConnectionIceCandidatesMessage >(Arena* arena) {
  return Arena::CreateInternal< ::chrome_browser_sharing::PeerConnectionIceCandidatesMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: budget.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_budget_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_budget_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_budget_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_budget_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace budget_service {
class Budget;
class BudgetDefaultTypeInternal;
extern BudgetDefaultTypeInternal _Budget_default_instance_;
class BudgetChunk;
class BudgetChunkDefaultTypeInternal;
extern BudgetChunkDefaultTypeInternal _BudgetChunk_default_instance_;
}  // namespace budget_service
PROTOBUF_NAMESPACE_OPEN
template<> ::budget_service::Budget* Arena::CreateMaybeMessage<::budget_service::Budget>(Arena*);
template<> ::budget_service::BudgetChunk* Arena::CreateMaybeMessage<::budget_service::BudgetChunk>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace budget_service {

// ===================================================================

class Budget :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:budget_service.Budget) */ {
 public:
  Budget();
  virtual ~Budget();

  Budget(const Budget& from);
  Budget(Budget&& from) noexcept
    : Budget() {
    *this = ::std::move(from);
  }

  inline Budget& operator=(const Budget& from) {
    CopyFrom(from);
    return *this;
  }
  inline Budget& operator=(Budget&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Budget& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Budget* internal_default_instance() {
    return reinterpret_cast<const Budget*>(
               &_Budget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Budget& a, Budget& b) {
    a.Swap(&b);
  }
  inline void Swap(Budget* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Budget* New() const final {
    return CreateMaybeMessage<Budget>(nullptr);
  }

  Budget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Budget>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Budget& from);
  void MergeFrom(const Budget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Budget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "budget_service.Budget";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBudgetFieldNumber = 1,
    kEngagementLastUpdatedFieldNumber = 2,
  };
  // repeated .budget_service.BudgetChunk budget = 1;
  int budget_size() const;
  void clear_budget();
  ::budget_service::BudgetChunk* mutable_budget(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::budget_service::BudgetChunk >*
      mutable_budget();
  const ::budget_service::BudgetChunk& budget(int index) const;
  ::budget_service::BudgetChunk* add_budget();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::budget_service::BudgetChunk >&
      budget() const;

  // optional int64 engagement_last_updated = 2;
  bool has_engagement_last_updated() const;
  void clear_engagement_last_updated();
  ::PROTOBUF_NAMESPACE_ID::int64 engagement_last_updated() const;
  void set_engagement_last_updated(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:budget_service.Budget)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::budget_service::BudgetChunk > budget_;
  ::PROTOBUF_NAMESPACE_ID::int64 engagement_last_updated_;
  friend struct ::TableStruct_budget_2eproto;
};
// -------------------------------------------------------------------

class BudgetChunk :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:budget_service.BudgetChunk) */ {
 public:
  BudgetChunk();
  virtual ~BudgetChunk();

  BudgetChunk(const BudgetChunk& from);
  BudgetChunk(BudgetChunk&& from) noexcept
    : BudgetChunk() {
    *this = ::std::move(from);
  }

  inline BudgetChunk& operator=(const BudgetChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline BudgetChunk& operator=(BudgetChunk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BudgetChunk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BudgetChunk* internal_default_instance() {
    return reinterpret_cast<const BudgetChunk*>(
               &_BudgetChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BudgetChunk& a, BudgetChunk& b) {
    a.Swap(&b);
  }
  inline void Swap(BudgetChunk* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BudgetChunk* New() const final {
    return CreateMaybeMessage<BudgetChunk>(nullptr);
  }

  BudgetChunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BudgetChunk>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BudgetChunk& from);
  void MergeFrom(const BudgetChunk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BudgetChunk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "budget_service.BudgetChunk";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 1,
    kExpirationFieldNumber = 2,
  };
  // optional double amount = 1;
  bool has_amount() const;
  void clear_amount();
  double amount() const;
  void set_amount(double value);

  // optional int64 expiration = 2;
  bool has_expiration() const;
  void clear_expiration();
  ::PROTOBUF_NAMESPACE_ID::int64 expiration() const;
  void set_expiration(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:budget_service.BudgetChunk)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double amount_;
  ::PROTOBUF_NAMESPACE_ID::int64 expiration_;
  friend struct ::TableStruct_budget_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Budget

// repeated .budget_service.BudgetChunk budget = 1;
inline int Budget::budget_size() const {
  return budget_.size();
}
inline void Budget::clear_budget() {
  budget_.Clear();
}
inline ::budget_service::BudgetChunk* Budget::mutable_budget(int index) {
  // @@protoc_insertion_point(field_mutable:budget_service.Budget.budget)
  return budget_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::budget_service::BudgetChunk >*
Budget::mutable_budget() {
  // @@protoc_insertion_point(field_mutable_list:budget_service.Budget.budget)
  return &budget_;
}
inline const ::budget_service::BudgetChunk& Budget::budget(int index) const {
  // @@protoc_insertion_point(field_get:budget_service.Budget.budget)
  return budget_.Get(index);
}
inline ::budget_service::BudgetChunk* Budget::add_budget() {
  // @@protoc_insertion_point(field_add:budget_service.Budget.budget)
  return budget_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::budget_service::BudgetChunk >&
Budget::budget() const {
  // @@protoc_insertion_point(field_list:budget_service.Budget.budget)
  return budget_;
}

// optional int64 engagement_last_updated = 2;
inline bool Budget::has_engagement_last_updated() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Budget::clear_engagement_last_updated() {
  engagement_last_updated_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Budget::engagement_last_updated() const {
  // @@protoc_insertion_point(field_get:budget_service.Budget.engagement_last_updated)
  return engagement_last_updated_;
}
inline void Budget::set_engagement_last_updated(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  engagement_last_updated_ = value;
  // @@protoc_insertion_point(field_set:budget_service.Budget.engagement_last_updated)
}

// -------------------------------------------------------------------

// BudgetChunk

// optional double amount = 1;
inline bool BudgetChunk::has_amount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BudgetChunk::clear_amount() {
  amount_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double BudgetChunk::amount() const {
  // @@protoc_insertion_point(field_get:budget_service.BudgetChunk.amount)
  return amount_;
}
inline void BudgetChunk::set_amount(double value) {
  _has_bits_[0] |= 0x00000001u;
  amount_ = value;
  // @@protoc_insertion_point(field_set:budget_service.BudgetChunk.amount)
}

// optional int64 expiration = 2;
inline bool BudgetChunk::has_expiration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BudgetChunk::clear_expiration() {
  expiration_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BudgetChunk::expiration() const {
  // @@protoc_insertion_point(field_get:budget_service.BudgetChunk.expiration)
  return expiration_;
}
inline void BudgetChunk::set_expiration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  expiration_ = value;
  // @@protoc_insertion_point(field_set:budget_service.BudgetChunk.expiration)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace budget_service

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_budget_2eproto

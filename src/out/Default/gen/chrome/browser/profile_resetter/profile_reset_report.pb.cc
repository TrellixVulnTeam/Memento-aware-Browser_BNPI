// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: profile_reset_report.proto

#include "profile_reset_report.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_profile_5freset_5freport_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeResetReport_Extension_profile_5freset_5freport_2eproto;
namespace reset_report {
class ChromeResetReport_ExtensionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChromeResetReport_Extension> _instance;
} _ChromeResetReport_Extension_default_instance_;
class ChromeResetReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChromeResetReport> _instance;
} _ChromeResetReport_default_instance_;
}  // namespace reset_report
static void InitDefaultsscc_info_ChromeResetReport_profile_5freset_5freport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::reset_report::_ChromeResetReport_default_instance_;
    new (ptr) ::reset_report::ChromeResetReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::reset_report::ChromeResetReport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChromeResetReport_profile_5freset_5freport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ChromeResetReport_profile_5freset_5freport_2eproto}, {
      &scc_info_ChromeResetReport_Extension_profile_5freset_5freport_2eproto.base,}};

static void InitDefaultsscc_info_ChromeResetReport_Extension_profile_5freset_5freport_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::reset_report::_ChromeResetReport_Extension_default_instance_;
    new (ptr) ::reset_report::ChromeResetReport_Extension();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::reset_report::ChromeResetReport_Extension::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeResetReport_Extension_profile_5freset_5freport_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ChromeResetReport_Extension_profile_5freset_5freport_2eproto}, {}};

namespace reset_report {
bool ChromeResetReport_SessionStartupType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeResetReport_SessionStartupType_strings[4] = {};

static const char ChromeResetReport_SessionStartupType_names[] =
  "DEFAULT"
  "HOMEPAGE"
  "LAST"
  "URLS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeResetReport_SessionStartupType_entries[] = {
  { {ChromeResetReport_SessionStartupType_names + 0, 7}, 0 },
  { {ChromeResetReport_SessionStartupType_names + 7, 8}, 1 },
  { {ChromeResetReport_SessionStartupType_names + 15, 4}, 2 },
  { {ChromeResetReport_SessionStartupType_names + 19, 4}, 3 },
};

static const int ChromeResetReport_SessionStartupType_entries_by_number[] = {
  0, // 0 -> DEFAULT
  1, // 1 -> HOMEPAGE
  2, // 2 -> LAST
  3, // 3 -> URLS
};

const std::string& ChromeResetReport_SessionStartupType_Name(
    ChromeResetReport_SessionStartupType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeResetReport_SessionStartupType_entries,
          ChromeResetReport_SessionStartupType_entries_by_number,
          4, ChromeResetReport_SessionStartupType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeResetReport_SessionStartupType_entries,
      ChromeResetReport_SessionStartupType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeResetReport_SessionStartupType_strings[idx].get();
}
bool ChromeResetReport_SessionStartupType_Parse(
    const std::string& name, ChromeResetReport_SessionStartupType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeResetReport_SessionStartupType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<ChromeResetReport_SessionStartupType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChromeResetReport_SessionStartupType ChromeResetReport::DEFAULT;
constexpr ChromeResetReport_SessionStartupType ChromeResetReport::HOMEPAGE;
constexpr ChromeResetReport_SessionStartupType ChromeResetReport::LAST;
constexpr ChromeResetReport_SessionStartupType ChromeResetReport::URLS;
constexpr ChromeResetReport_SessionStartupType ChromeResetReport::SessionStartupType_MIN;
constexpr ChromeResetReport_SessionStartupType ChromeResetReport::SessionStartupType_MAX;
constexpr int ChromeResetReport::SessionStartupType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ChromeResetReport_ResetRequestOrigin_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChromeResetReport_ResetRequestOrigin_strings[5] = {};

static const char ChromeResetReport_ResetRequestOrigin_names[] =
  "RESET_REQUEST_ORIGIN_CCT"
  "RESET_REQUEST_ORIGIN_TRIGGERED_RESET"
  "RESET_REQUEST_ORIGIN_UNKNOWN"
  "RESET_REQUEST_ORIGIN_UNSPECIFIED"
  "RESET_REQUEST_ORIGIN_USER_CLICK";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChromeResetReport_ResetRequestOrigin_entries[] = {
  { {ChromeResetReport_ResetRequestOrigin_names + 0, 24}, 3 },
  { {ChromeResetReport_ResetRequestOrigin_names + 24, 36}, 4 },
  { {ChromeResetReport_ResetRequestOrigin_names + 60, 28}, 1 },
  { {ChromeResetReport_ResetRequestOrigin_names + 88, 32}, 0 },
  { {ChromeResetReport_ResetRequestOrigin_names + 120, 31}, 2 },
};

static const int ChromeResetReport_ResetRequestOrigin_entries_by_number[] = {
  3, // 0 -> RESET_REQUEST_ORIGIN_UNSPECIFIED
  2, // 1 -> RESET_REQUEST_ORIGIN_UNKNOWN
  4, // 2 -> RESET_REQUEST_ORIGIN_USER_CLICK
  0, // 3 -> RESET_REQUEST_ORIGIN_CCT
  1, // 4 -> RESET_REQUEST_ORIGIN_TRIGGERED_RESET
};

const std::string& ChromeResetReport_ResetRequestOrigin_Name(
    ChromeResetReport_ResetRequestOrigin value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChromeResetReport_ResetRequestOrigin_entries,
          ChromeResetReport_ResetRequestOrigin_entries_by_number,
          5, ChromeResetReport_ResetRequestOrigin_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChromeResetReport_ResetRequestOrigin_entries,
      ChromeResetReport_ResetRequestOrigin_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChromeResetReport_ResetRequestOrigin_strings[idx].get();
}
bool ChromeResetReport_ResetRequestOrigin_Parse(
    const std::string& name, ChromeResetReport_ResetRequestOrigin* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChromeResetReport_ResetRequestOrigin_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<ChromeResetReport_ResetRequestOrigin>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChromeResetReport_ResetRequestOrigin ChromeResetReport::RESET_REQUEST_ORIGIN_UNSPECIFIED;
constexpr ChromeResetReport_ResetRequestOrigin ChromeResetReport::RESET_REQUEST_ORIGIN_UNKNOWN;
constexpr ChromeResetReport_ResetRequestOrigin ChromeResetReport::RESET_REQUEST_ORIGIN_USER_CLICK;
constexpr ChromeResetReport_ResetRequestOrigin ChromeResetReport::RESET_REQUEST_ORIGIN_CCT;
constexpr ChromeResetReport_ResetRequestOrigin ChromeResetReport::RESET_REQUEST_ORIGIN_TRIGGERED_RESET;
constexpr ChromeResetReport_ResetRequestOrigin ChromeResetReport::ResetRequestOrigin_MIN;
constexpr ChromeResetReport_ResetRequestOrigin ChromeResetReport::ResetRequestOrigin_MAX;
constexpr int ChromeResetReport::ResetRequestOrigin_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ChromeResetReport_Extension::InitAsDefaultInstance() {
}
class ChromeResetReport_Extension::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeResetReport_Extension>()._has_bits_);
  static void set_has_extension_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_extension_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChromeResetReport_Extension::ChromeResetReport_Extension()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:reset_report.ChromeResetReport.Extension)
}
ChromeResetReport_Extension::ChromeResetReport_Extension(const ChromeResetReport_Extension& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extension_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_extension_id()) {
    extension_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extension_id_);
  }
  extension_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_extension_name()) {
    extension_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extension_name_);
  }
  // @@protoc_insertion_point(copy_constructor:reset_report.ChromeResetReport.Extension)
}

void ChromeResetReport_Extension::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChromeResetReport_Extension_profile_5freset_5freport_2eproto.base);
  extension_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extension_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChromeResetReport_Extension::~ChromeResetReport_Extension() {
  // @@protoc_insertion_point(destructor:reset_report.ChromeResetReport.Extension)
  SharedDtor();
}

void ChromeResetReport_Extension::SharedDtor() {
  extension_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extension_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChromeResetReport_Extension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChromeResetReport_Extension& ChromeResetReport_Extension::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChromeResetReport_Extension_profile_5freset_5freport_2eproto.base);
  return *internal_default_instance();
}


void ChromeResetReport_Extension::Clear() {
// @@protoc_insertion_point(message_clear_start:reset_report.ChromeResetReport.Extension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      extension_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      extension_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChromeResetReport_Extension::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string extension_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_extension_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string extension_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_extension_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChromeResetReport_Extension::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:reset_report.ChromeResetReport.Extension)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string extension_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_extension_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string extension_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_extension_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:reset_report.ChromeResetReport.Extension)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:reset_report.ChromeResetReport.Extension)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChromeResetReport_Extension::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:reset_report.ChromeResetReport.Extension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string extension_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->extension_id(), output);
  }

  // optional string extension_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->extension_name(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:reset_report.ChromeResetReport.Extension)
}

size_t ChromeResetReport_Extension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reset_report.ChromeResetReport.Extension)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string extension_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->extension_id());
    }

    // optional string extension_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->extension_name());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeResetReport_Extension::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChromeResetReport_Extension*>(
      &from));
}

void ChromeResetReport_Extension::MergeFrom(const ChromeResetReport_Extension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reset_report.ChromeResetReport.Extension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      extension_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extension_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      extension_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extension_name_);
    }
  }
}

void ChromeResetReport_Extension::CopyFrom(const ChromeResetReport_Extension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reset_report.ChromeResetReport.Extension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeResetReport_Extension::IsInitialized() const {
  return true;
}

void ChromeResetReport_Extension::InternalSwap(ChromeResetReport_Extension* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  extension_id_.Swap(&other->extension_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  extension_name_.Swap(&other->extension_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string ChromeResetReport_Extension::GetTypeName() const {
  return "reset_report.ChromeResetReport.Extension";
}


// ===================================================================

void ChromeResetReport::InitAsDefaultInstance() {
}
class ChromeResetReport::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeResetReport>()._has_bits_);
  static void set_has_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_startup_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_show_home_button(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_homepage_is_new_tab_page(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_homepage_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_default_search_engine_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_reset_request_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ChromeResetReport::ChromeResetReport()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:reset_report.ChromeResetReport)
}
ChromeResetReport::ChromeResetReport(const ChromeResetReport& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      startup_url_path_(from.startup_url_path_),
      enabled_extensions_(from.enabled_extensions_),
      shortcuts_(from.shortcuts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_guid()) {
    guid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guid_);
  }
  homepage_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_homepage_path()) {
    homepage_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.homepage_path_);
  }
  default_search_engine_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_default_search_engine_path()) {
    default_search_engine_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.default_search_engine_path_);
  }
  ::memcpy(&reset_request_origin_, &from.reset_request_origin_,
    static_cast<size_t>(reinterpret_cast<char*>(&homepage_is_new_tab_page_) -
    reinterpret_cast<char*>(&reset_request_origin_)) + sizeof(homepage_is_new_tab_page_));
  // @@protoc_insertion_point(copy_constructor:reset_report.ChromeResetReport)
}

void ChromeResetReport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChromeResetReport_profile_5freset_5freport_2eproto.base);
  guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  homepage_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  default_search_engine_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&reset_request_origin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&homepage_is_new_tab_page_) -
      reinterpret_cast<char*>(&reset_request_origin_)) + sizeof(homepage_is_new_tab_page_));
}

ChromeResetReport::~ChromeResetReport() {
  // @@protoc_insertion_point(destructor:reset_report.ChromeResetReport)
  SharedDtor();
}

void ChromeResetReport::SharedDtor() {
  guid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  homepage_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  default_search_engine_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChromeResetReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChromeResetReport& ChromeResetReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChromeResetReport_profile_5freset_5freport_2eproto.base);
  return *internal_default_instance();
}


void ChromeResetReport::Clear() {
// @@protoc_insertion_point(message_clear_start:reset_report.ChromeResetReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  startup_url_path_.Clear();
  enabled_extensions_.Clear();
  shortcuts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      guid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      homepage_path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      default_search_engine_path_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&reset_request_origin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&homepage_is_new_tab_page_) -
        reinterpret_cast<char*>(&reset_request_origin_)) + sizeof(homepage_is_new_tab_page_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChromeResetReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string guid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_guid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .reset_report.ChromeResetReport.SessionStartupType startup_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::reset_report::ChromeResetReport_SessionStartupType_IsValid(val))) {
            set_startup_type(static_cast<::reset_report::ChromeResetReport_SessionStartupType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated string startup_url_path = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_startup_url_path(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 98);
        } else goto handle_unusual;
        continue;
      // optional bool show_home_button = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_show_home_button(&has_bits);
          show_home_button_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool homepage_is_new_tab_page = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_homepage_is_new_tab_page(&has_bits);
          homepage_is_new_tab_page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string homepage_path = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_homepage_path(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string default_search_engine_path = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_default_search_engine_path(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .reset_report.ChromeResetReport.Extension enabled_extensions = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_enabled_extensions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 394);
        } else goto handle_unusual;
        continue;
      // repeated string shortcuts = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_shortcuts(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 402);
        } else goto handle_unusual;
        continue;
      // optional .reset_report.ChromeResetReport.ResetRequestOrigin reset_request_origin = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::reset_report::ChromeResetReport_ResetRequestOrigin_IsValid(val))) {
            set_reset_request_origin(static_cast<::reset_report::ChromeResetReport_ResetRequestOrigin>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChromeResetReport::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:reset_report.ChromeResetReport)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string guid = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .reset_report.ChromeResetReport.SessionStartupType startup_type = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::reset_report::ChromeResetReport_SessionStartupType_IsValid(value)) {
            set_startup_type(static_cast< ::reset_report::ChromeResetReport_SessionStartupType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(88u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string startup_url_path = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_startup_url_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show_home_button = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          _Internal::set_has_show_home_button(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_home_button_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool homepage_is_new_tab_page = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_homepage_is_new_tab_page(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &homepage_is_new_tab_page_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string homepage_path = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_homepage_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string default_search_engine_path = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_default_search_engine_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .reset_report.ChromeResetReport.Extension enabled_extensions = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_enabled_extensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string shortcuts = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_shortcuts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .reset_report.ChromeResetReport.ResetRequestOrigin reset_request_origin = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::reset_report::ChromeResetReport_ResetRequestOrigin_IsValid(value)) {
            set_reset_request_origin(static_cast< ::reset_report::ChromeResetReport_ResetRequestOrigin >(value));
          } else {
            unknown_fields_stream.WriteVarint32(152u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:reset_report.ChromeResetReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:reset_report.ChromeResetReport)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChromeResetReport::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:reset_report.ChromeResetReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string guid = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->guid(), output);
  }

  // optional .reset_report.ChromeResetReport.SessionStartupType startup_type = 11;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      11, this->startup_type(), output);
  }

  // repeated string startup_url_path = 12;
  for (int i = 0, n = this->startup_url_path_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      12, this->startup_url_path(i), output);
  }

  // optional bool show_home_button = 13;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(13, this->show_home_button(), output);
  }

  // optional bool homepage_is_new_tab_page = 14;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(14, this->homepage_is_new_tab_page(), output);
  }

  // optional string homepage_path = 15;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->homepage_path(), output);
  }

  // optional string default_search_engine_path = 16;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->default_search_engine_path(), output);
  }

  // repeated .reset_report.ChromeResetReport.Extension enabled_extensions = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->enabled_extensions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      17,
      this->enabled_extensions(static_cast<int>(i)),
      output);
  }

  // repeated string shortcuts = 18;
  for (int i = 0, n = this->shortcuts_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      18, this->shortcuts(i), output);
  }

  // optional .reset_report.ChromeResetReport.ResetRequestOrigin reset_request_origin = 19;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      19, this->reset_request_origin(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:reset_report.ChromeResetReport)
}

size_t ChromeResetReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reset_report.ChromeResetReport)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string startup_url_path = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->startup_url_path_size());
  for (int i = 0, n = this->startup_url_path_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->startup_url_path(i));
  }

  // repeated .reset_report.ChromeResetReport.Extension enabled_extensions = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->enabled_extensions_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->enabled_extensions(static_cast<int>(i)));
    }
  }

  // repeated string shortcuts = 18;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->shortcuts_size());
  for (int i = 0, n = this->shortcuts_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->shortcuts(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string guid = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional string homepage_path = 15;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->homepage_path());
    }

    // optional string default_search_engine_path = 16;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->default_search_engine_path());
    }

    // optional .reset_report.ChromeResetReport.ResetRequestOrigin reset_request_origin = 19;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->reset_request_origin());
    }

    // optional .reset_report.ChromeResetReport.SessionStartupType startup_type = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->startup_type());
    }

    // optional bool show_home_button = 13;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool homepage_is_new_tab_page = 14;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeResetReport::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChromeResetReport*>(
      &from));
}

void ChromeResetReport::MergeFrom(const ChromeResetReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reset_report.ChromeResetReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  startup_url_path_.MergeFrom(from.startup_url_path_);
  enabled_extensions_.MergeFrom(from.enabled_extensions_);
  shortcuts_.MergeFrom(from.shortcuts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      guid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      homepage_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.homepage_path_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      default_search_engine_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.default_search_engine_path_);
    }
    if (cached_has_bits & 0x00000008u) {
      reset_request_origin_ = from.reset_request_origin_;
    }
    if (cached_has_bits & 0x00000010u) {
      startup_type_ = from.startup_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      show_home_button_ = from.show_home_button_;
    }
    if (cached_has_bits & 0x00000040u) {
      homepage_is_new_tab_page_ = from.homepage_is_new_tab_page_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChromeResetReport::CopyFrom(const ChromeResetReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reset_report.ChromeResetReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeResetReport::IsInitialized() const {
  return true;
}

void ChromeResetReport::InternalSwap(ChromeResetReport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  startup_url_path_.InternalSwap(CastToBase(&other->startup_url_path_));
  CastToBase(&enabled_extensions_)->InternalSwap(CastToBase(&other->enabled_extensions_));
  shortcuts_.InternalSwap(CastToBase(&other->shortcuts_));
  guid_.Swap(&other->guid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  homepage_path_.Swap(&other->homepage_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  default_search_engine_path_.Swap(&other->default_search_engine_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reset_request_origin_, other->reset_request_origin_);
  swap(startup_type_, other->startup_type_);
  swap(show_home_button_, other->show_home_button_);
  swap(homepage_is_new_tab_page_, other->homepage_is_new_tab_page_);
}

std::string ChromeResetReport::GetTypeName() const {
  return "reset_report.ChromeResetReport";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace reset_report
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::reset_report::ChromeResetReport_Extension* Arena::CreateMaybeMessage< ::reset_report::ChromeResetReport_Extension >(Arena* arena) {
  return Arena::CreateInternal< ::reset_report::ChromeResetReport_Extension >(arena);
}
template<> PROTOBUF_NOINLINE ::reset_report::ChromeResetReport* Arena::CreateMaybeMessage< ::reset_report::ChromeResetReport >(Arena* arena) {
  return Arena::CreateInternal< ::reset_report::ChromeResetReport >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

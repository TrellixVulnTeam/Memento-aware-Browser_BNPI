// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: profile_reset_report.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_profile_5freset_5freport_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_profile_5freset_5freport_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_profile_5freset_5freport_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_profile_5freset_5freport_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace reset_report {
class ChromeResetReport;
class ChromeResetReportDefaultTypeInternal;
extern ChromeResetReportDefaultTypeInternal _ChromeResetReport_default_instance_;
class ChromeResetReport_Extension;
class ChromeResetReport_ExtensionDefaultTypeInternal;
extern ChromeResetReport_ExtensionDefaultTypeInternal _ChromeResetReport_Extension_default_instance_;
}  // namespace reset_report
PROTOBUF_NAMESPACE_OPEN
template<> ::reset_report::ChromeResetReport* Arena::CreateMaybeMessage<::reset_report::ChromeResetReport>(Arena*);
template<> ::reset_report::ChromeResetReport_Extension* Arena::CreateMaybeMessage<::reset_report::ChromeResetReport_Extension>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace reset_report {

enum ChromeResetReport_SessionStartupType : int {
  ChromeResetReport_SessionStartupType_DEFAULT = 0,
  ChromeResetReport_SessionStartupType_HOMEPAGE = 1,
  ChromeResetReport_SessionStartupType_LAST = 2,
  ChromeResetReport_SessionStartupType_URLS = 3
};
bool ChromeResetReport_SessionStartupType_IsValid(int value);
constexpr ChromeResetReport_SessionStartupType ChromeResetReport_SessionStartupType_SessionStartupType_MIN = ChromeResetReport_SessionStartupType_DEFAULT;
constexpr ChromeResetReport_SessionStartupType ChromeResetReport_SessionStartupType_SessionStartupType_MAX = ChromeResetReport_SessionStartupType_URLS;
constexpr int ChromeResetReport_SessionStartupType_SessionStartupType_ARRAYSIZE = ChromeResetReport_SessionStartupType_SessionStartupType_MAX + 1;

const std::string& ChromeResetReport_SessionStartupType_Name(ChromeResetReport_SessionStartupType value);
template<typename T>
inline const std::string& ChromeResetReport_SessionStartupType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChromeResetReport_SessionStartupType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChromeResetReport_SessionStartupType_Name.");
  return ChromeResetReport_SessionStartupType_Name(static_cast<ChromeResetReport_SessionStartupType>(enum_t_value));
}
bool ChromeResetReport_SessionStartupType_Parse(
    const std::string& name, ChromeResetReport_SessionStartupType* value);
enum ChromeResetReport_ResetRequestOrigin : int {
  ChromeResetReport_ResetRequestOrigin_RESET_REQUEST_ORIGIN_UNSPECIFIED = 0,
  ChromeResetReport_ResetRequestOrigin_RESET_REQUEST_ORIGIN_UNKNOWN = 1,
  ChromeResetReport_ResetRequestOrigin_RESET_REQUEST_ORIGIN_USER_CLICK = 2,
  ChromeResetReport_ResetRequestOrigin_RESET_REQUEST_ORIGIN_CCT = 3,
  ChromeResetReport_ResetRequestOrigin_RESET_REQUEST_ORIGIN_TRIGGERED_RESET = 4
};
bool ChromeResetReport_ResetRequestOrigin_IsValid(int value);
constexpr ChromeResetReport_ResetRequestOrigin ChromeResetReport_ResetRequestOrigin_ResetRequestOrigin_MIN = ChromeResetReport_ResetRequestOrigin_RESET_REQUEST_ORIGIN_UNSPECIFIED;
constexpr ChromeResetReport_ResetRequestOrigin ChromeResetReport_ResetRequestOrigin_ResetRequestOrigin_MAX = ChromeResetReport_ResetRequestOrigin_RESET_REQUEST_ORIGIN_TRIGGERED_RESET;
constexpr int ChromeResetReport_ResetRequestOrigin_ResetRequestOrigin_ARRAYSIZE = ChromeResetReport_ResetRequestOrigin_ResetRequestOrigin_MAX + 1;

const std::string& ChromeResetReport_ResetRequestOrigin_Name(ChromeResetReport_ResetRequestOrigin value);
template<typename T>
inline const std::string& ChromeResetReport_ResetRequestOrigin_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChromeResetReport_ResetRequestOrigin>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChromeResetReport_ResetRequestOrigin_Name.");
  return ChromeResetReport_ResetRequestOrigin_Name(static_cast<ChromeResetReport_ResetRequestOrigin>(enum_t_value));
}
bool ChromeResetReport_ResetRequestOrigin_Parse(
    const std::string& name, ChromeResetReport_ResetRequestOrigin* value);
// ===================================================================

class ChromeResetReport_Extension :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:reset_report.ChromeResetReport.Extension) */ {
 public:
  ChromeResetReport_Extension();
  virtual ~ChromeResetReport_Extension();

  ChromeResetReport_Extension(const ChromeResetReport_Extension& from);
  ChromeResetReport_Extension(ChromeResetReport_Extension&& from) noexcept
    : ChromeResetReport_Extension() {
    *this = ::std::move(from);
  }

  inline ChromeResetReport_Extension& operator=(const ChromeResetReport_Extension& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeResetReport_Extension& operator=(ChromeResetReport_Extension&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ChromeResetReport_Extension& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChromeResetReport_Extension* internal_default_instance() {
    return reinterpret_cast<const ChromeResetReport_Extension*>(
               &_ChromeResetReport_Extension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChromeResetReport_Extension& a, ChromeResetReport_Extension& b) {
    a.Swap(&b);
  }
  inline void Swap(ChromeResetReport_Extension* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChromeResetReport_Extension* New() const final {
    return CreateMaybeMessage<ChromeResetReport_Extension>(nullptr);
  }

  ChromeResetReport_Extension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChromeResetReport_Extension>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ChromeResetReport_Extension& from);
  void MergeFrom(const ChromeResetReport_Extension& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeResetReport_Extension* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reset_report.ChromeResetReport.Extension";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtensionIdFieldNumber = 1,
    kExtensionNameFieldNumber = 2,
  };
  // optional string extension_id = 1;
  bool has_extension_id() const;
  void clear_extension_id();
  const std::string& extension_id() const;
  void set_extension_id(const std::string& value);
  void set_extension_id(std::string&& value);
  void set_extension_id(const char* value);
  void set_extension_id(const char* value, size_t size);
  std::string* mutable_extension_id();
  std::string* release_extension_id();
  void set_allocated_extension_id(std::string* extension_id);

  // optional string extension_name = 2;
  bool has_extension_name() const;
  void clear_extension_name();
  const std::string& extension_name() const;
  void set_extension_name(const std::string& value);
  void set_extension_name(std::string&& value);
  void set_extension_name(const char* value);
  void set_extension_name(const char* value, size_t size);
  std::string* mutable_extension_name();
  std::string* release_extension_name();
  void set_allocated_extension_name(std::string* extension_name);

  // @@protoc_insertion_point(class_scope:reset_report.ChromeResetReport.Extension)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extension_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extension_name_;
  friend struct ::TableStruct_profile_5freset_5freport_2eproto;
};
// -------------------------------------------------------------------

class ChromeResetReport :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:reset_report.ChromeResetReport) */ {
 public:
  ChromeResetReport();
  virtual ~ChromeResetReport();

  ChromeResetReport(const ChromeResetReport& from);
  ChromeResetReport(ChromeResetReport&& from) noexcept
    : ChromeResetReport() {
    *this = ::std::move(from);
  }

  inline ChromeResetReport& operator=(const ChromeResetReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeResetReport& operator=(ChromeResetReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ChromeResetReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChromeResetReport* internal_default_instance() {
    return reinterpret_cast<const ChromeResetReport*>(
               &_ChromeResetReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChromeResetReport& a, ChromeResetReport& b) {
    a.Swap(&b);
  }
  inline void Swap(ChromeResetReport* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChromeResetReport* New() const final {
    return CreateMaybeMessage<ChromeResetReport>(nullptr);
  }

  ChromeResetReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChromeResetReport>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ChromeResetReport& from);
  void MergeFrom(const ChromeResetReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeResetReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reset_report.ChromeResetReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ChromeResetReport_Extension Extension;

  typedef ChromeResetReport_SessionStartupType SessionStartupType;
  static constexpr SessionStartupType DEFAULT =
    ChromeResetReport_SessionStartupType_DEFAULT;
  static constexpr SessionStartupType HOMEPAGE =
    ChromeResetReport_SessionStartupType_HOMEPAGE;
  static constexpr SessionStartupType LAST =
    ChromeResetReport_SessionStartupType_LAST;
  static constexpr SessionStartupType URLS =
    ChromeResetReport_SessionStartupType_URLS;
  static inline bool SessionStartupType_IsValid(int value) {
    return ChromeResetReport_SessionStartupType_IsValid(value);
  }
  static constexpr SessionStartupType SessionStartupType_MIN =
    ChromeResetReport_SessionStartupType_SessionStartupType_MIN;
  static constexpr SessionStartupType SessionStartupType_MAX =
    ChromeResetReport_SessionStartupType_SessionStartupType_MAX;
  static constexpr int SessionStartupType_ARRAYSIZE =
    ChromeResetReport_SessionStartupType_SessionStartupType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& SessionStartupType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SessionStartupType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SessionStartupType_Name.");
    return ChromeResetReport_SessionStartupType_Name(enum_t_value);
  }
  static inline bool SessionStartupType_Parse(const std::string& name,
      SessionStartupType* value) {
    return ChromeResetReport_SessionStartupType_Parse(name, value);
  }

  typedef ChromeResetReport_ResetRequestOrigin ResetRequestOrigin;
  static constexpr ResetRequestOrigin RESET_REQUEST_ORIGIN_UNSPECIFIED =
    ChromeResetReport_ResetRequestOrigin_RESET_REQUEST_ORIGIN_UNSPECIFIED;
  static constexpr ResetRequestOrigin RESET_REQUEST_ORIGIN_UNKNOWN =
    ChromeResetReport_ResetRequestOrigin_RESET_REQUEST_ORIGIN_UNKNOWN;
  static constexpr ResetRequestOrigin RESET_REQUEST_ORIGIN_USER_CLICK =
    ChromeResetReport_ResetRequestOrigin_RESET_REQUEST_ORIGIN_USER_CLICK;
  static constexpr ResetRequestOrigin RESET_REQUEST_ORIGIN_CCT =
    ChromeResetReport_ResetRequestOrigin_RESET_REQUEST_ORIGIN_CCT;
  static constexpr ResetRequestOrigin RESET_REQUEST_ORIGIN_TRIGGERED_RESET =
    ChromeResetReport_ResetRequestOrigin_RESET_REQUEST_ORIGIN_TRIGGERED_RESET;
  static inline bool ResetRequestOrigin_IsValid(int value) {
    return ChromeResetReport_ResetRequestOrigin_IsValid(value);
  }
  static constexpr ResetRequestOrigin ResetRequestOrigin_MIN =
    ChromeResetReport_ResetRequestOrigin_ResetRequestOrigin_MIN;
  static constexpr ResetRequestOrigin ResetRequestOrigin_MAX =
    ChromeResetReport_ResetRequestOrigin_ResetRequestOrigin_MAX;
  static constexpr int ResetRequestOrigin_ARRAYSIZE =
    ChromeResetReport_ResetRequestOrigin_ResetRequestOrigin_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ResetRequestOrigin_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ResetRequestOrigin>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ResetRequestOrigin_Name.");
    return ChromeResetReport_ResetRequestOrigin_Name(enum_t_value);
  }
  static inline bool ResetRequestOrigin_Parse(const std::string& name,
      ResetRequestOrigin* value) {
    return ChromeResetReport_ResetRequestOrigin_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStartupUrlPathFieldNumber = 12,
    kEnabledExtensionsFieldNumber = 17,
    kShortcutsFieldNumber = 18,
    kGuidFieldNumber = 10,
    kHomepagePathFieldNumber = 15,
    kDefaultSearchEnginePathFieldNumber = 16,
    kResetRequestOriginFieldNumber = 19,
    kStartupTypeFieldNumber = 11,
    kShowHomeButtonFieldNumber = 13,
    kHomepageIsNewTabPageFieldNumber = 14,
  };
  // repeated string startup_url_path = 12;
  int startup_url_path_size() const;
  void clear_startup_url_path();
  const std::string& startup_url_path(int index) const;
  std::string* mutable_startup_url_path(int index);
  void set_startup_url_path(int index, const std::string& value);
  void set_startup_url_path(int index, std::string&& value);
  void set_startup_url_path(int index, const char* value);
  void set_startup_url_path(int index, const char* value, size_t size);
  std::string* add_startup_url_path();
  void add_startup_url_path(const std::string& value);
  void add_startup_url_path(std::string&& value);
  void add_startup_url_path(const char* value);
  void add_startup_url_path(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& startup_url_path() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_startup_url_path();

  // repeated .reset_report.ChromeResetReport.Extension enabled_extensions = 17;
  int enabled_extensions_size() const;
  void clear_enabled_extensions();
  ::reset_report::ChromeResetReport_Extension* mutable_enabled_extensions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reset_report::ChromeResetReport_Extension >*
      mutable_enabled_extensions();
  const ::reset_report::ChromeResetReport_Extension& enabled_extensions(int index) const;
  ::reset_report::ChromeResetReport_Extension* add_enabled_extensions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reset_report::ChromeResetReport_Extension >&
      enabled_extensions() const;

  // repeated string shortcuts = 18;
  int shortcuts_size() const;
  void clear_shortcuts();
  const std::string& shortcuts(int index) const;
  std::string* mutable_shortcuts(int index);
  void set_shortcuts(int index, const std::string& value);
  void set_shortcuts(int index, std::string&& value);
  void set_shortcuts(int index, const char* value);
  void set_shortcuts(int index, const char* value, size_t size);
  std::string* add_shortcuts();
  void add_shortcuts(const std::string& value);
  void add_shortcuts(std::string&& value);
  void add_shortcuts(const char* value);
  void add_shortcuts(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& shortcuts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_shortcuts();

  // optional string guid = 10;
  bool has_guid() const;
  void clear_guid();
  const std::string& guid() const;
  void set_guid(const std::string& value);
  void set_guid(std::string&& value);
  void set_guid(const char* value);
  void set_guid(const char* value, size_t size);
  std::string* mutable_guid();
  std::string* release_guid();
  void set_allocated_guid(std::string* guid);

  // optional string homepage_path = 15;
  bool has_homepage_path() const;
  void clear_homepage_path();
  const std::string& homepage_path() const;
  void set_homepage_path(const std::string& value);
  void set_homepage_path(std::string&& value);
  void set_homepage_path(const char* value);
  void set_homepage_path(const char* value, size_t size);
  std::string* mutable_homepage_path();
  std::string* release_homepage_path();
  void set_allocated_homepage_path(std::string* homepage_path);

  // optional string default_search_engine_path = 16;
  bool has_default_search_engine_path() const;
  void clear_default_search_engine_path();
  const std::string& default_search_engine_path() const;
  void set_default_search_engine_path(const std::string& value);
  void set_default_search_engine_path(std::string&& value);
  void set_default_search_engine_path(const char* value);
  void set_default_search_engine_path(const char* value, size_t size);
  std::string* mutable_default_search_engine_path();
  std::string* release_default_search_engine_path();
  void set_allocated_default_search_engine_path(std::string* default_search_engine_path);

  // optional .reset_report.ChromeResetReport.ResetRequestOrigin reset_request_origin = 19;
  bool has_reset_request_origin() const;
  void clear_reset_request_origin();
  ::reset_report::ChromeResetReport_ResetRequestOrigin reset_request_origin() const;
  void set_reset_request_origin(::reset_report::ChromeResetReport_ResetRequestOrigin value);

  // optional .reset_report.ChromeResetReport.SessionStartupType startup_type = 11;
  bool has_startup_type() const;
  void clear_startup_type();
  ::reset_report::ChromeResetReport_SessionStartupType startup_type() const;
  void set_startup_type(::reset_report::ChromeResetReport_SessionStartupType value);

  // optional bool show_home_button = 13;
  bool has_show_home_button() const;
  void clear_show_home_button();
  bool show_home_button() const;
  void set_show_home_button(bool value);

  // optional bool homepage_is_new_tab_page = 14;
  bool has_homepage_is_new_tab_page() const;
  void clear_homepage_is_new_tab_page();
  bool homepage_is_new_tab_page() const;
  void set_homepage_is_new_tab_page(bool value);

  // @@protoc_insertion_point(class_scope:reset_report.ChromeResetReport)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> startup_url_path_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reset_report::ChromeResetReport_Extension > enabled_extensions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> shortcuts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr homepage_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_search_engine_path_;
  int reset_request_origin_;
  int startup_type_;
  bool show_home_button_;
  bool homepage_is_new_tab_page_;
  friend struct ::TableStruct_profile_5freset_5freport_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChromeResetReport_Extension

// optional string extension_id = 1;
inline bool ChromeResetReport_Extension::has_extension_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChromeResetReport_Extension::clear_extension_id() {
  extension_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChromeResetReport_Extension::extension_id() const {
  // @@protoc_insertion_point(field_get:reset_report.ChromeResetReport.Extension.extension_id)
  return extension_id_.GetNoArena();
}
inline void ChromeResetReport_Extension::set_extension_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  extension_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:reset_report.ChromeResetReport.Extension.extension_id)
}
inline void ChromeResetReport_Extension::set_extension_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  extension_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:reset_report.ChromeResetReport.Extension.extension_id)
}
inline void ChromeResetReport_Extension::set_extension_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  extension_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:reset_report.ChromeResetReport.Extension.extension_id)
}
inline void ChromeResetReport_Extension::set_extension_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  extension_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:reset_report.ChromeResetReport.Extension.extension_id)
}
inline std::string* ChromeResetReport_Extension::mutable_extension_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:reset_report.ChromeResetReport.Extension.extension_id)
  return extension_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChromeResetReport_Extension::release_extension_id() {
  // @@protoc_insertion_point(field_release:reset_report.ChromeResetReport.Extension.extension_id)
  if (!has_extension_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return extension_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeResetReport_Extension::set_allocated_extension_id(std::string* extension_id) {
  if (extension_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  extension_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extension_id);
  // @@protoc_insertion_point(field_set_allocated:reset_report.ChromeResetReport.Extension.extension_id)
}

// optional string extension_name = 2;
inline bool ChromeResetReport_Extension::has_extension_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChromeResetReport_Extension::clear_extension_name() {
  extension_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChromeResetReport_Extension::extension_name() const {
  // @@protoc_insertion_point(field_get:reset_report.ChromeResetReport.Extension.extension_name)
  return extension_name_.GetNoArena();
}
inline void ChromeResetReport_Extension::set_extension_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  extension_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:reset_report.ChromeResetReport.Extension.extension_name)
}
inline void ChromeResetReport_Extension::set_extension_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  extension_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:reset_report.ChromeResetReport.Extension.extension_name)
}
inline void ChromeResetReport_Extension::set_extension_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  extension_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:reset_report.ChromeResetReport.Extension.extension_name)
}
inline void ChromeResetReport_Extension::set_extension_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  extension_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:reset_report.ChromeResetReport.Extension.extension_name)
}
inline std::string* ChromeResetReport_Extension::mutable_extension_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:reset_report.ChromeResetReport.Extension.extension_name)
  return extension_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChromeResetReport_Extension::release_extension_name() {
  // @@protoc_insertion_point(field_release:reset_report.ChromeResetReport.Extension.extension_name)
  if (!has_extension_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return extension_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeResetReport_Extension::set_allocated_extension_name(std::string* extension_name) {
  if (extension_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  extension_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extension_name);
  // @@protoc_insertion_point(field_set_allocated:reset_report.ChromeResetReport.Extension.extension_name)
}

// -------------------------------------------------------------------

// ChromeResetReport

// optional string guid = 10;
inline bool ChromeResetReport::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChromeResetReport::clear_guid() {
  guid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChromeResetReport::guid() const {
  // @@protoc_insertion_point(field_get:reset_report.ChromeResetReport.guid)
  return guid_.GetNoArena();
}
inline void ChromeResetReport::set_guid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:reset_report.ChromeResetReport.guid)
}
inline void ChromeResetReport::set_guid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  guid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:reset_report.ChromeResetReport.guid)
}
inline void ChromeResetReport::set_guid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:reset_report.ChromeResetReport.guid)
}
inline void ChromeResetReport::set_guid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:reset_report.ChromeResetReport.guid)
}
inline std::string* ChromeResetReport::mutable_guid() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:reset_report.ChromeResetReport.guid)
  return guid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChromeResetReport::release_guid() {
  // @@protoc_insertion_point(field_release:reset_report.ChromeResetReport.guid)
  if (!has_guid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return guid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeResetReport::set_allocated_guid(std::string* guid) {
  if (guid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  guid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guid);
  // @@protoc_insertion_point(field_set_allocated:reset_report.ChromeResetReport.guid)
}

// optional .reset_report.ChromeResetReport.SessionStartupType startup_type = 11;
inline bool ChromeResetReport::has_startup_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChromeResetReport::clear_startup_type() {
  startup_type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::reset_report::ChromeResetReport_SessionStartupType ChromeResetReport::startup_type() const {
  // @@protoc_insertion_point(field_get:reset_report.ChromeResetReport.startup_type)
  return static_cast< ::reset_report::ChromeResetReport_SessionStartupType >(startup_type_);
}
inline void ChromeResetReport::set_startup_type(::reset_report::ChromeResetReport_SessionStartupType value) {
  assert(::reset_report::ChromeResetReport_SessionStartupType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  startup_type_ = value;
  // @@protoc_insertion_point(field_set:reset_report.ChromeResetReport.startup_type)
}

// repeated string startup_url_path = 12;
inline int ChromeResetReport::startup_url_path_size() const {
  return startup_url_path_.size();
}
inline void ChromeResetReport::clear_startup_url_path() {
  startup_url_path_.Clear();
}
inline const std::string& ChromeResetReport::startup_url_path(int index) const {
  // @@protoc_insertion_point(field_get:reset_report.ChromeResetReport.startup_url_path)
  return startup_url_path_.Get(index);
}
inline std::string* ChromeResetReport::mutable_startup_url_path(int index) {
  // @@protoc_insertion_point(field_mutable:reset_report.ChromeResetReport.startup_url_path)
  return startup_url_path_.Mutable(index);
}
inline void ChromeResetReport::set_startup_url_path(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:reset_report.ChromeResetReport.startup_url_path)
  startup_url_path_.Mutable(index)->assign(value);
}
inline void ChromeResetReport::set_startup_url_path(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:reset_report.ChromeResetReport.startup_url_path)
  startup_url_path_.Mutable(index)->assign(std::move(value));
}
inline void ChromeResetReport::set_startup_url_path(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  startup_url_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:reset_report.ChromeResetReport.startup_url_path)
}
inline void ChromeResetReport::set_startup_url_path(int index, const char* value, size_t size) {
  startup_url_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:reset_report.ChromeResetReport.startup_url_path)
}
inline std::string* ChromeResetReport::add_startup_url_path() {
  // @@protoc_insertion_point(field_add_mutable:reset_report.ChromeResetReport.startup_url_path)
  return startup_url_path_.Add();
}
inline void ChromeResetReport::add_startup_url_path(const std::string& value) {
  startup_url_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:reset_report.ChromeResetReport.startup_url_path)
}
inline void ChromeResetReport::add_startup_url_path(std::string&& value) {
  startup_url_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:reset_report.ChromeResetReport.startup_url_path)
}
inline void ChromeResetReport::add_startup_url_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  startup_url_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:reset_report.ChromeResetReport.startup_url_path)
}
inline void ChromeResetReport::add_startup_url_path(const char* value, size_t size) {
  startup_url_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:reset_report.ChromeResetReport.startup_url_path)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChromeResetReport::startup_url_path() const {
  // @@protoc_insertion_point(field_list:reset_report.ChromeResetReport.startup_url_path)
  return startup_url_path_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChromeResetReport::mutable_startup_url_path() {
  // @@protoc_insertion_point(field_mutable_list:reset_report.ChromeResetReport.startup_url_path)
  return &startup_url_path_;
}

// optional bool show_home_button = 13;
inline bool ChromeResetReport::has_show_home_button() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChromeResetReport::clear_show_home_button() {
  show_home_button_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool ChromeResetReport::show_home_button() const {
  // @@protoc_insertion_point(field_get:reset_report.ChromeResetReport.show_home_button)
  return show_home_button_;
}
inline void ChromeResetReport::set_show_home_button(bool value) {
  _has_bits_[0] |= 0x00000020u;
  show_home_button_ = value;
  // @@protoc_insertion_point(field_set:reset_report.ChromeResetReport.show_home_button)
}

// optional bool homepage_is_new_tab_page = 14;
inline bool ChromeResetReport::has_homepage_is_new_tab_page() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChromeResetReport::clear_homepage_is_new_tab_page() {
  homepage_is_new_tab_page_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ChromeResetReport::homepage_is_new_tab_page() const {
  // @@protoc_insertion_point(field_get:reset_report.ChromeResetReport.homepage_is_new_tab_page)
  return homepage_is_new_tab_page_;
}
inline void ChromeResetReport::set_homepage_is_new_tab_page(bool value) {
  _has_bits_[0] |= 0x00000040u;
  homepage_is_new_tab_page_ = value;
  // @@protoc_insertion_point(field_set:reset_report.ChromeResetReport.homepage_is_new_tab_page)
}

// optional string homepage_path = 15;
inline bool ChromeResetReport::has_homepage_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChromeResetReport::clear_homepage_path() {
  homepage_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChromeResetReport::homepage_path() const {
  // @@protoc_insertion_point(field_get:reset_report.ChromeResetReport.homepage_path)
  return homepage_path_.GetNoArena();
}
inline void ChromeResetReport::set_homepage_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  homepage_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:reset_report.ChromeResetReport.homepage_path)
}
inline void ChromeResetReport::set_homepage_path(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  homepage_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:reset_report.ChromeResetReport.homepage_path)
}
inline void ChromeResetReport::set_homepage_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  homepage_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:reset_report.ChromeResetReport.homepage_path)
}
inline void ChromeResetReport::set_homepage_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  homepage_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:reset_report.ChromeResetReport.homepage_path)
}
inline std::string* ChromeResetReport::mutable_homepage_path() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:reset_report.ChromeResetReport.homepage_path)
  return homepage_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChromeResetReport::release_homepage_path() {
  // @@protoc_insertion_point(field_release:reset_report.ChromeResetReport.homepage_path)
  if (!has_homepage_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return homepage_path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeResetReport::set_allocated_homepage_path(std::string* homepage_path) {
  if (homepage_path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  homepage_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), homepage_path);
  // @@protoc_insertion_point(field_set_allocated:reset_report.ChromeResetReport.homepage_path)
}

// optional string default_search_engine_path = 16;
inline bool ChromeResetReport::has_default_search_engine_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChromeResetReport::clear_default_search_engine_path() {
  default_search_engine_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ChromeResetReport::default_search_engine_path() const {
  // @@protoc_insertion_point(field_get:reset_report.ChromeResetReport.default_search_engine_path)
  return default_search_engine_path_.GetNoArena();
}
inline void ChromeResetReport::set_default_search_engine_path(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  default_search_engine_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:reset_report.ChromeResetReport.default_search_engine_path)
}
inline void ChromeResetReport::set_default_search_engine_path(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  default_search_engine_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:reset_report.ChromeResetReport.default_search_engine_path)
}
inline void ChromeResetReport::set_default_search_engine_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  default_search_engine_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:reset_report.ChromeResetReport.default_search_engine_path)
}
inline void ChromeResetReport::set_default_search_engine_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  default_search_engine_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:reset_report.ChromeResetReport.default_search_engine_path)
}
inline std::string* ChromeResetReport::mutable_default_search_engine_path() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:reset_report.ChromeResetReport.default_search_engine_path)
  return default_search_engine_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChromeResetReport::release_default_search_engine_path() {
  // @@protoc_insertion_point(field_release:reset_report.ChromeResetReport.default_search_engine_path)
  if (!has_default_search_engine_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return default_search_engine_path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeResetReport::set_allocated_default_search_engine_path(std::string* default_search_engine_path) {
  if (default_search_engine_path != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  default_search_engine_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), default_search_engine_path);
  // @@protoc_insertion_point(field_set_allocated:reset_report.ChromeResetReport.default_search_engine_path)
}

// repeated .reset_report.ChromeResetReport.Extension enabled_extensions = 17;
inline int ChromeResetReport::enabled_extensions_size() const {
  return enabled_extensions_.size();
}
inline void ChromeResetReport::clear_enabled_extensions() {
  enabled_extensions_.Clear();
}
inline ::reset_report::ChromeResetReport_Extension* ChromeResetReport::mutable_enabled_extensions(int index) {
  // @@protoc_insertion_point(field_mutable:reset_report.ChromeResetReport.enabled_extensions)
  return enabled_extensions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reset_report::ChromeResetReport_Extension >*
ChromeResetReport::mutable_enabled_extensions() {
  // @@protoc_insertion_point(field_mutable_list:reset_report.ChromeResetReport.enabled_extensions)
  return &enabled_extensions_;
}
inline const ::reset_report::ChromeResetReport_Extension& ChromeResetReport::enabled_extensions(int index) const {
  // @@protoc_insertion_point(field_get:reset_report.ChromeResetReport.enabled_extensions)
  return enabled_extensions_.Get(index);
}
inline ::reset_report::ChromeResetReport_Extension* ChromeResetReport::add_enabled_extensions() {
  // @@protoc_insertion_point(field_add:reset_report.ChromeResetReport.enabled_extensions)
  return enabled_extensions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::reset_report::ChromeResetReport_Extension >&
ChromeResetReport::enabled_extensions() const {
  // @@protoc_insertion_point(field_list:reset_report.ChromeResetReport.enabled_extensions)
  return enabled_extensions_;
}

// repeated string shortcuts = 18;
inline int ChromeResetReport::shortcuts_size() const {
  return shortcuts_.size();
}
inline void ChromeResetReport::clear_shortcuts() {
  shortcuts_.Clear();
}
inline const std::string& ChromeResetReport::shortcuts(int index) const {
  // @@protoc_insertion_point(field_get:reset_report.ChromeResetReport.shortcuts)
  return shortcuts_.Get(index);
}
inline std::string* ChromeResetReport::mutable_shortcuts(int index) {
  // @@protoc_insertion_point(field_mutable:reset_report.ChromeResetReport.shortcuts)
  return shortcuts_.Mutable(index);
}
inline void ChromeResetReport::set_shortcuts(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:reset_report.ChromeResetReport.shortcuts)
  shortcuts_.Mutable(index)->assign(value);
}
inline void ChromeResetReport::set_shortcuts(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:reset_report.ChromeResetReport.shortcuts)
  shortcuts_.Mutable(index)->assign(std::move(value));
}
inline void ChromeResetReport::set_shortcuts(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  shortcuts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:reset_report.ChromeResetReport.shortcuts)
}
inline void ChromeResetReport::set_shortcuts(int index, const char* value, size_t size) {
  shortcuts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:reset_report.ChromeResetReport.shortcuts)
}
inline std::string* ChromeResetReport::add_shortcuts() {
  // @@protoc_insertion_point(field_add_mutable:reset_report.ChromeResetReport.shortcuts)
  return shortcuts_.Add();
}
inline void ChromeResetReport::add_shortcuts(const std::string& value) {
  shortcuts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:reset_report.ChromeResetReport.shortcuts)
}
inline void ChromeResetReport::add_shortcuts(std::string&& value) {
  shortcuts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:reset_report.ChromeResetReport.shortcuts)
}
inline void ChromeResetReport::add_shortcuts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  shortcuts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:reset_report.ChromeResetReport.shortcuts)
}
inline void ChromeResetReport::add_shortcuts(const char* value, size_t size) {
  shortcuts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:reset_report.ChromeResetReport.shortcuts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChromeResetReport::shortcuts() const {
  // @@protoc_insertion_point(field_list:reset_report.ChromeResetReport.shortcuts)
  return shortcuts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChromeResetReport::mutable_shortcuts() {
  // @@protoc_insertion_point(field_mutable_list:reset_report.ChromeResetReport.shortcuts)
  return &shortcuts_;
}

// optional .reset_report.ChromeResetReport.ResetRequestOrigin reset_request_origin = 19;
inline bool ChromeResetReport::has_reset_request_origin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChromeResetReport::clear_reset_request_origin() {
  reset_request_origin_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::reset_report::ChromeResetReport_ResetRequestOrigin ChromeResetReport::reset_request_origin() const {
  // @@protoc_insertion_point(field_get:reset_report.ChromeResetReport.reset_request_origin)
  return static_cast< ::reset_report::ChromeResetReport_ResetRequestOrigin >(reset_request_origin_);
}
inline void ChromeResetReport::set_reset_request_origin(::reset_report::ChromeResetReport_ResetRequestOrigin value) {
  assert(::reset_report::ChromeResetReport_ResetRequestOrigin_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  reset_request_origin_ = value;
  // @@protoc_insertion_point(field_set:reset_report.ChromeResetReport.reset_request_origin)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace reset_report

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::reset_report::ChromeResetReport_SessionStartupType> : ::std::true_type {};
template <> struct is_proto_enum< ::reset_report::ChromeResetReport_ResetRequestOrigin> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_profile_5freset_5freport_2eproto

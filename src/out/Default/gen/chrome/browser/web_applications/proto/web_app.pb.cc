// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chrome/browser/web_applications/proto/web_app.proto

#include "chrome/browser/web_applications/proto/web_app.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2fweb_5fapp_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WebAppIconInfo_components_2fsync_2fprotocol_2fweb_5fapp_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2fweb_5fapp_5fspecifics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WebAppSpecifics_components_2fsync_2fprotocol_2fweb_5fapp_5fspecifics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeOSDataProto_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourcesProto_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WebAppFileHandlerAcceptProto_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WebAppFileHandlerProto_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto;
namespace web_app {
class WebAppFileHandlerAcceptProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WebAppFileHandlerAcceptProto> _instance;
} _WebAppFileHandlerAcceptProto_default_instance_;
class WebAppFileHandlerProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WebAppFileHandlerProto> _instance;
} _WebAppFileHandlerProto_default_instance_;
class SourcesProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SourcesProto> _instance;
} _SourcesProto_default_instance_;
class ChromeOSDataProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChromeOSDataProto> _instance;
} _ChromeOSDataProto_default_instance_;
class WebAppProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WebAppProto> _instance;
} _WebAppProto_default_instance_;
}  // namespace web_app
static void InitDefaultsscc_info_ChromeOSDataProto_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::web_app::_ChromeOSDataProto_default_instance_;
    new (ptr) ::web_app::ChromeOSDataProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::web_app::ChromeOSDataProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChromeOSDataProto_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ChromeOSDataProto_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto}, {}};

static void InitDefaultsscc_info_SourcesProto_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::web_app::_SourcesProto_default_instance_;
    new (ptr) ::web_app::SourcesProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::web_app::SourcesProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SourcesProto_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SourcesProto_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto}, {}};

static void InitDefaultsscc_info_WebAppFileHandlerAcceptProto_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::web_app::_WebAppFileHandlerAcceptProto_default_instance_;
    new (ptr) ::web_app::WebAppFileHandlerAcceptProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::web_app::WebAppFileHandlerAcceptProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WebAppFileHandlerAcceptProto_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WebAppFileHandlerAcceptProto_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto}, {}};

static void InitDefaultsscc_info_WebAppFileHandlerProto_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::web_app::_WebAppFileHandlerProto_default_instance_;
    new (ptr) ::web_app::WebAppFileHandlerProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::web_app::WebAppFileHandlerProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WebAppFileHandlerProto_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_WebAppFileHandlerProto_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto}, {
      &scc_info_WebAppFileHandlerAcceptProto_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto.base,}};

static void InitDefaultsscc_info_WebAppProto_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::web_app::_WebAppProto_default_instance_;
    new (ptr) ::web_app::WebAppProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::web_app::WebAppProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_WebAppProto_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_WebAppProto_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto}, {
      &scc_info_WebAppSpecifics_components_2fsync_2fprotocol_2fweb_5fapp_5fspecifics_2eproto.base,
      &scc_info_SourcesProto_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto.base,
      &scc_info_WebAppIconInfo_components_2fsync_2fprotocol_2fweb_5fapp_5fspecifics_2eproto.base,
      &scc_info_WebAppFileHandlerProto_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto.base,
      &scc_info_ChromeOSDataProto_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto.base,}};

namespace web_app {
bool WebAppProto_DisplayMode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WebAppProto_DisplayMode_strings[4] = {};

static const char WebAppProto_DisplayMode_names[] =
  "BROWSER"
  "FULLSCREEN"
  "MINIMAL_UI"
  "STANDALONE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WebAppProto_DisplayMode_entries[] = {
  { {WebAppProto_DisplayMode_names + 0, 7}, 1 },
  { {WebAppProto_DisplayMode_names + 7, 10}, 4 },
  { {WebAppProto_DisplayMode_names + 17, 10}, 2 },
  { {WebAppProto_DisplayMode_names + 27, 10}, 3 },
};

static const int WebAppProto_DisplayMode_entries_by_number[] = {
  0, // 1 -> BROWSER
  2, // 2 -> MINIMAL_UI
  3, // 3 -> STANDALONE
  1, // 4 -> FULLSCREEN
};

const std::string& WebAppProto_DisplayMode_Name(
    WebAppProto_DisplayMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WebAppProto_DisplayMode_entries,
          WebAppProto_DisplayMode_entries_by_number,
          4, WebAppProto_DisplayMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WebAppProto_DisplayMode_entries,
      WebAppProto_DisplayMode_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WebAppProto_DisplayMode_strings[idx].get();
}
bool WebAppProto_DisplayMode_Parse(
    const std::string& name, WebAppProto_DisplayMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WebAppProto_DisplayMode_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<WebAppProto_DisplayMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr WebAppProto_DisplayMode WebAppProto::BROWSER;
constexpr WebAppProto_DisplayMode WebAppProto::MINIMAL_UI;
constexpr WebAppProto_DisplayMode WebAppProto::STANDALONE;
constexpr WebAppProto_DisplayMode WebAppProto::FULLSCREEN;
constexpr WebAppProto_DisplayMode WebAppProto::DisplayMode_MIN;
constexpr WebAppProto_DisplayMode WebAppProto::DisplayMode_MAX;
constexpr int WebAppProto::DisplayMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void WebAppFileHandlerAcceptProto::InitAsDefaultInstance() {
}
class WebAppFileHandlerAcceptProto::_Internal {
 public:
  using HasBits = decltype(std::declval<WebAppFileHandlerAcceptProto>()._has_bits_);
  static void set_has_mimetype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

WebAppFileHandlerAcceptProto::WebAppFileHandlerAcceptProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:web_app.WebAppFileHandlerAcceptProto)
}
WebAppFileHandlerAcceptProto::WebAppFileHandlerAcceptProto(const WebAppFileHandlerAcceptProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      file_extensions_(from.file_extensions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mimetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_mimetype()) {
    mimetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mimetype_);
  }
  // @@protoc_insertion_point(copy_constructor:web_app.WebAppFileHandlerAcceptProto)
}

void WebAppFileHandlerAcceptProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WebAppFileHandlerAcceptProto_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto.base);
  mimetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WebAppFileHandlerAcceptProto::~WebAppFileHandlerAcceptProto() {
  // @@protoc_insertion_point(destructor:web_app.WebAppFileHandlerAcceptProto)
  SharedDtor();
}

void WebAppFileHandlerAcceptProto::SharedDtor() {
  mimetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WebAppFileHandlerAcceptProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WebAppFileHandlerAcceptProto& WebAppFileHandlerAcceptProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WebAppFileHandlerAcceptProto_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto.base);
  return *internal_default_instance();
}


void WebAppFileHandlerAcceptProto::Clear() {
// @@protoc_insertion_point(message_clear_start:web_app.WebAppFileHandlerAcceptProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    mimetype_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WebAppFileHandlerAcceptProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string mimetype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_mimetype(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string file_extensions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_file_extensions(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WebAppFileHandlerAcceptProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:web_app.WebAppFileHandlerAcceptProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mimetype = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_mimetype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string file_extensions = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_file_extensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:web_app.WebAppFileHandlerAcceptProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:web_app.WebAppFileHandlerAcceptProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WebAppFileHandlerAcceptProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:web_app.WebAppFileHandlerAcceptProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string mimetype = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mimetype(), output);
  }

  // repeated string file_extensions = 2;
  for (int i = 0, n = this->file_extensions_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->file_extensions(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:web_app.WebAppFileHandlerAcceptProto)
}

size_t WebAppFileHandlerAcceptProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:web_app.WebAppFileHandlerAcceptProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required string mimetype = 1;
  if (has_mimetype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->mimetype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string file_extensions = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->file_extensions_size());
  for (int i = 0, n = this->file_extensions_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->file_extensions(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WebAppFileHandlerAcceptProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const WebAppFileHandlerAcceptProto*>(
      &from));
}

void WebAppFileHandlerAcceptProto::MergeFrom(const WebAppFileHandlerAcceptProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:web_app.WebAppFileHandlerAcceptProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  file_extensions_.MergeFrom(from.file_extensions_);
  if (from.has_mimetype()) {
    _has_bits_[0] |= 0x00000001u;
    mimetype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mimetype_);
  }
}

void WebAppFileHandlerAcceptProto::CopyFrom(const WebAppFileHandlerAcceptProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:web_app.WebAppFileHandlerAcceptProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebAppFileHandlerAcceptProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void WebAppFileHandlerAcceptProto::InternalSwap(WebAppFileHandlerAcceptProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_extensions_.InternalSwap(CastToBase(&other->file_extensions_));
  mimetype_.Swap(&other->mimetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string WebAppFileHandlerAcceptProto::GetTypeName() const {
  return "web_app.WebAppFileHandlerAcceptProto";
}


// ===================================================================

void WebAppFileHandlerProto::InitAsDefaultInstance() {
}
class WebAppFileHandlerProto::_Internal {
 public:
  using HasBits = decltype(std::declval<WebAppFileHandlerProto>()._has_bits_);
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

WebAppFileHandlerProto::WebAppFileHandlerProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:web_app.WebAppFileHandlerProto)
}
WebAppFileHandlerProto::WebAppFileHandlerProto(const WebAppFileHandlerProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      accept_(from.accept_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_action()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  // @@protoc_insertion_point(copy_constructor:web_app.WebAppFileHandlerProto)
}

void WebAppFileHandlerProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WebAppFileHandlerProto_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto.base);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WebAppFileHandlerProto::~WebAppFileHandlerProto() {
  // @@protoc_insertion_point(destructor:web_app.WebAppFileHandlerProto)
  SharedDtor();
}

void WebAppFileHandlerProto::SharedDtor() {
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WebAppFileHandlerProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WebAppFileHandlerProto& WebAppFileHandlerProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WebAppFileHandlerProto_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto.base);
  return *internal_default_instance();
}


void WebAppFileHandlerProto::Clear() {
// @@protoc_insertion_point(message_clear_start:web_app.WebAppFileHandlerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accept_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    action_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WebAppFileHandlerProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_action(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .web_app.WebAppFileHandlerAcceptProto accept = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_accept(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WebAppFileHandlerProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:web_app.WebAppFileHandlerProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string action = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .web_app.WebAppFileHandlerAcceptProto accept = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_accept()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:web_app.WebAppFileHandlerProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:web_app.WebAppFileHandlerProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WebAppFileHandlerProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:web_app.WebAppFileHandlerProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string action = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->action(), output);
  }

  // repeated .web_app.WebAppFileHandlerAcceptProto accept = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->accept_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->accept(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:web_app.WebAppFileHandlerProto)
}

size_t WebAppFileHandlerProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:web_app.WebAppFileHandlerProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required string action = 1;
  if (has_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->action());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .web_app.WebAppFileHandlerAcceptProto accept = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->accept_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->accept(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WebAppFileHandlerProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const WebAppFileHandlerProto*>(
      &from));
}

void WebAppFileHandlerProto::MergeFrom(const WebAppFileHandlerProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:web_app.WebAppFileHandlerProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accept_.MergeFrom(from.accept_);
  if (from.has_action()) {
    _has_bits_[0] |= 0x00000001u;
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
}

void WebAppFileHandlerProto::CopyFrom(const WebAppFileHandlerProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:web_app.WebAppFileHandlerProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebAppFileHandlerProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->accept())) return false;
  return true;
}

void WebAppFileHandlerProto::InternalSwap(WebAppFileHandlerProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&accept_)->InternalSwap(CastToBase(&other->accept_));
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string WebAppFileHandlerProto::GetTypeName() const {
  return "web_app.WebAppFileHandlerProto";
}


// ===================================================================

void SourcesProto::InitAsDefaultInstance() {
}
class SourcesProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SourcesProto>()._has_bits_);
  static void set_has_system(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_web_app_store(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sync(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_default_(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

SourcesProto::SourcesProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:web_app.SourcesProto)
}
SourcesProto::SourcesProto(const SourcesProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&system_, &from.system_,
    static_cast<size_t>(reinterpret_cast<char*>(&default__) -
    reinterpret_cast<char*>(&system_)) + sizeof(default__));
  // @@protoc_insertion_point(copy_constructor:web_app.SourcesProto)
}

void SourcesProto::SharedCtor() {
  ::memset(&system_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&default__) -
      reinterpret_cast<char*>(&system_)) + sizeof(default__));
}

SourcesProto::~SourcesProto() {
  // @@protoc_insertion_point(destructor:web_app.SourcesProto)
  SharedDtor();
}

void SourcesProto::SharedDtor() {
}

void SourcesProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SourcesProto& SourcesProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SourcesProto_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto.base);
  return *internal_default_instance();
}


void SourcesProto::Clear() {
// @@protoc_insertion_point(message_clear_start:web_app.SourcesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&system_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&default__) -
        reinterpret_cast<char*>(&system_)) + sizeof(default__));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SourcesProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool system = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_system(&has_bits);
          system_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool policy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_policy(&has_bits);
          policy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool web_app_store = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_web_app_store(&has_bits);
          web_app_store_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool sync = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_sync(&has_bits);
          sync_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool default = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_default_(&has_bits);
          default__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SourcesProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:web_app.SourcesProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool system = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_system(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &system_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool policy = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_policy(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &policy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool web_app_store = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_web_app_store(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &web_app_store_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool sync = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_sync(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sync_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool default = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_default_(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &default__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:web_app.SourcesProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:web_app.SourcesProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SourcesProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:web_app.SourcesProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool system = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->system(), output);
  }

  // required bool policy = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->policy(), output);
  }

  // required bool web_app_store = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->web_app_store(), output);
  }

  // required bool sync = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->sync(), output);
  }

  // required bool default = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->default_(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:web_app.SourcesProto)
}

size_t SourcesProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:web_app.SourcesProto)
  size_t total_size = 0;

  if (has_system()) {
    // required bool system = 1;
    total_size += 1 + 1;
  }

  if (has_policy()) {
    // required bool policy = 2;
    total_size += 1 + 1;
  }

  if (has_web_app_store()) {
    // required bool web_app_store = 3;
    total_size += 1 + 1;
  }

  if (has_sync()) {
    // required bool sync = 4;
    total_size += 1 + 1;
  }

  if (has_default_()) {
    // required bool default = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t SourcesProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:web_app.SourcesProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bool system = 1;
    total_size += 1 + 1;

    // required bool policy = 2;
    total_size += 1 + 1;

    // required bool web_app_store = 3;
    total_size += 1 + 1;

    // required bool sync = 4;
    total_size += 1 + 1;

    // required bool default = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SourcesProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SourcesProto*>(
      &from));
}

void SourcesProto::MergeFrom(const SourcesProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:web_app.SourcesProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      system_ = from.system_;
    }
    if (cached_has_bits & 0x00000002u) {
      policy_ = from.policy_;
    }
    if (cached_has_bits & 0x00000004u) {
      web_app_store_ = from.web_app_store_;
    }
    if (cached_has_bits & 0x00000008u) {
      sync_ = from.sync_;
    }
    if (cached_has_bits & 0x00000010u) {
      default__ = from.default__;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SourcesProto::CopyFrom(const SourcesProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:web_app.SourcesProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourcesProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void SourcesProto::InternalSwap(SourcesProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(system_, other->system_);
  swap(policy_, other->policy_);
  swap(web_app_store_, other->web_app_store_);
  swap(sync_, other->sync_);
  swap(default__, other->default__);
}

std::string SourcesProto::GetTypeName() const {
  return "web_app.SourcesProto";
}


// ===================================================================

void ChromeOSDataProto::InitAsDefaultInstance() {
}
class ChromeOSDataProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeOSDataProto>()._has_bits_);
  static void set_has_show_in_launcher(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_show_in_search(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_show_in_management(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ChromeOSDataProto::ChromeOSDataProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:web_app.ChromeOSDataProto)
}
ChromeOSDataProto::ChromeOSDataProto(const ChromeOSDataProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&show_in_launcher_, &from.show_in_launcher_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_disabled_) -
    reinterpret_cast<char*>(&show_in_launcher_)) + sizeof(is_disabled_));
  // @@protoc_insertion_point(copy_constructor:web_app.ChromeOSDataProto)
}

void ChromeOSDataProto::SharedCtor() {
  ::memset(&show_in_launcher_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_disabled_) -
      reinterpret_cast<char*>(&show_in_launcher_)) + sizeof(is_disabled_));
}

ChromeOSDataProto::~ChromeOSDataProto() {
  // @@protoc_insertion_point(destructor:web_app.ChromeOSDataProto)
  SharedDtor();
}

void ChromeOSDataProto::SharedDtor() {
}

void ChromeOSDataProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChromeOSDataProto& ChromeOSDataProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChromeOSDataProto_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto.base);
  return *internal_default_instance();
}


void ChromeOSDataProto::Clear() {
// @@protoc_insertion_point(message_clear_start:web_app.ChromeOSDataProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&show_in_launcher_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_disabled_) -
      reinterpret_cast<char*>(&show_in_launcher_)) + sizeof(is_disabled_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChromeOSDataProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool show_in_launcher = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_show_in_launcher(&has_bits);
          show_in_launcher_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool show_in_search = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_show_in_search(&has_bits);
          show_in_search_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool show_in_management = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_show_in_management(&has_bits);
          show_in_management_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool is_disabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_disabled(&has_bits);
          is_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChromeOSDataProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:web_app.ChromeOSDataProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool show_in_launcher = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_show_in_launcher(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_in_launcher_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool show_in_search = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_show_in_search(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_in_search_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool show_in_management = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_show_in_management(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_in_management_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool is_disabled = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_is_disabled(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_disabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:web_app.ChromeOSDataProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:web_app.ChromeOSDataProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChromeOSDataProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:web_app.ChromeOSDataProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool show_in_launcher = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->show_in_launcher(), output);
  }

  // required bool show_in_search = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->show_in_search(), output);
  }

  // required bool show_in_management = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->show_in_management(), output);
  }

  // required bool is_disabled = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->is_disabled(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:web_app.ChromeOSDataProto)
}

size_t ChromeOSDataProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:web_app.ChromeOSDataProto)
  size_t total_size = 0;

  if (has_show_in_launcher()) {
    // required bool show_in_launcher = 1;
    total_size += 1 + 1;
  }

  if (has_show_in_search()) {
    // required bool show_in_search = 2;
    total_size += 1 + 1;
  }

  if (has_show_in_management()) {
    // required bool show_in_management = 3;
    total_size += 1 + 1;
  }

  if (has_is_disabled()) {
    // required bool is_disabled = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ChromeOSDataProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:web_app.ChromeOSDataProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bool show_in_launcher = 1;
    total_size += 1 + 1;

    // required bool show_in_search = 2;
    total_size += 1 + 1;

    // required bool show_in_management = 3;
    total_size += 1 + 1;

    // required bool is_disabled = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeOSDataProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChromeOSDataProto*>(
      &from));
}

void ChromeOSDataProto::MergeFrom(const ChromeOSDataProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:web_app.ChromeOSDataProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      show_in_launcher_ = from.show_in_launcher_;
    }
    if (cached_has_bits & 0x00000002u) {
      show_in_search_ = from.show_in_search_;
    }
    if (cached_has_bits & 0x00000004u) {
      show_in_management_ = from.show_in_management_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_disabled_ = from.is_disabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChromeOSDataProto::CopyFrom(const ChromeOSDataProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:web_app.ChromeOSDataProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeOSDataProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ChromeOSDataProto::InternalSwap(ChromeOSDataProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(show_in_launcher_, other->show_in_launcher_);
  swap(show_in_search_, other->show_in_search_);
  swap(show_in_management_, other->show_in_management_);
  swap(is_disabled_, other->is_disabled_);
}

std::string ChromeOSDataProto::GetTypeName() const {
  return "web_app.ChromeOSDataProto";
}


// ===================================================================

void WebAppProto::InitAsDefaultInstance() {
  ::web_app::_WebAppProto_default_instance_._instance.get_mutable()->sync_data_ = const_cast< ::sync_pb::WebAppSpecifics*>(
      ::sync_pb::WebAppSpecifics::internal_default_instance());
  ::web_app::_WebAppProto_default_instance_._instance.get_mutable()->sources_ = const_cast< ::web_app::SourcesProto*>(
      ::web_app::SourcesProto::internal_default_instance());
  ::web_app::_WebAppProto_default_instance_._instance.get_mutable()->chromeos_data_ = const_cast< ::web_app::ChromeOSDataProto*>(
      ::web_app::ChromeOSDataProto::internal_default_instance());
}
class WebAppProto::_Internal {
 public:
  using HasBits = decltype(std::declval<WebAppProto>()._has_bits_);
  static const ::sync_pb::WebAppSpecifics& sync_data(const WebAppProto* msg);
  static void set_has_sync_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_theme_color(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_display_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_scope(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::web_app::SourcesProto& sources(const WebAppProto* msg);
  static void set_has_sources(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_locally_installed(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_in_sync_install(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::web_app::ChromeOSDataProto& chromeos_data(const WebAppProto* msg);
  static void set_has_chromeos_data(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_last_launch_time(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_install_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::sync_pb::WebAppSpecifics&
WebAppProto::_Internal::sync_data(const WebAppProto* msg) {
  return *msg->sync_data_;
}
const ::web_app::SourcesProto&
WebAppProto::_Internal::sources(const WebAppProto* msg) {
  return *msg->sources_;
}
const ::web_app::ChromeOSDataProto&
WebAppProto::_Internal::chromeos_data(const WebAppProto* msg) {
  return *msg->chromeos_data_;
}
void WebAppProto::clear_sync_data() {
  if (sync_data_ != nullptr) sync_data_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void WebAppProto::clear_icon_infos() {
  icon_infos_.Clear();
}
WebAppProto::WebAppProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:web_app.WebAppProto)
}
WebAppProto::WebAppProto(const WebAppProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      icon_infos_(from.icon_infos_),
      downloaded_icon_sizes_(from.downloaded_icon_sizes_),
      file_handlers_(from.file_handlers_),
      additional_search_terms_(from.additional_search_terms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_scope()) {
    scope_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scope_);
  }
  if (from.has_sync_data()) {
    sync_data_ = new ::sync_pb::WebAppSpecifics(*from.sync_data_);
  } else {
    sync_data_ = nullptr;
  }
  if (from.has_sources()) {
    sources_ = new ::web_app::SourcesProto(*from.sources_);
  } else {
    sources_ = nullptr;
  }
  if (from.has_chromeos_data()) {
    chromeos_data_ = new ::web_app::ChromeOSDataProto(*from.chromeos_data_);
  } else {
    chromeos_data_ = nullptr;
  }
  ::memcpy(&theme_color_, &from.theme_color_,
    static_cast<size_t>(reinterpret_cast<char*>(&display_mode_) -
    reinterpret_cast<char*>(&theme_color_)) + sizeof(display_mode_));
  // @@protoc_insertion_point(copy_constructor:web_app.WebAppProto)
}

void WebAppProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WebAppProto_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scope_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sync_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&install_time_) -
      reinterpret_cast<char*>(&sync_data_)) + sizeof(install_time_));
  display_mode_ = 1;
}

WebAppProto::~WebAppProto() {
  // @@protoc_insertion_point(destructor:web_app.WebAppProto)
  SharedDtor();
}

void WebAppProto::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scope_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sync_data_;
  if (this != internal_default_instance()) delete sources_;
  if (this != internal_default_instance()) delete chromeos_data_;
}

void WebAppProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WebAppProto& WebAppProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WebAppProto_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto.base);
  return *internal_default_instance();
}


void WebAppProto::Clear() {
// @@protoc_insertion_point(message_clear_start:web_app.WebAppProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  icon_infos_.Clear();
  downloaded_icon_sizes_.Clear();
  file_handlers_.Clear();
  additional_search_terms_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      scope_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(sync_data_ != nullptr);
      sync_data_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(sources_ != nullptr);
      sources_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(chromeos_data_ != nullptr);
      chromeos_data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&theme_color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_locally_installed_) -
        reinterpret_cast<char*>(&theme_color_)) + sizeof(is_locally_installed_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&is_in_sync_install_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&install_time_) -
        reinterpret_cast<char*>(&is_in_sync_install_)) + sizeof(install_time_));
    display_mode_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WebAppProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .sync_pb.WebAppSpecifics sync_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_sync_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 theme_color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_theme_color(&has_bits);
          theme_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_description(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .web_app.WebAppProto.DisplayMode display_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::web_app::WebAppProto_DisplayMode_IsValid(val))) {
            set_display_mode(static_cast<::web_app::WebAppProto_DisplayMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string scope = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_scope(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .web_app.SourcesProto sources = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_sources(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool is_locally_installed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_locally_installed(&has_bits);
          is_locally_installed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_in_sync_install = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_is_in_sync_install(&has_bits);
          is_in_sync_install_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sync_pb.WebAppIconInfo icon_infos = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_icon_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      // repeated int32 downloaded_icon_sizes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_downloaded_icon_sizes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 88);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_downloaded_icon_sizes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .web_app.WebAppFileHandlerProto file_handlers = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_file_handlers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 98);
        } else goto handle_unusual;
        continue;
      // repeated string additional_search_terms = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_additional_search_terms(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 106);
        } else goto handle_unusual;
        continue;
      // optional .web_app.ChromeOSDataProto chromeos_data = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_chromeos_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_launch_time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_last_launch_time(&has_bits);
          last_launch_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 install_time = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_install_time(&has_bits);
          install_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WebAppProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:web_app.WebAppProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sync_pb.WebAppSpecifics sync_data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sync_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 theme_color = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_theme_color(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &theme_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .web_app.WebAppProto.DisplayMode display_mode = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::web_app::WebAppProto_DisplayMode_IsValid(value)) {
            set_display_mode(static_cast< ::web_app::WebAppProto_DisplayMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string scope = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_scope()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .web_app.SourcesProto sources = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool is_locally_installed = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_is_locally_installed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_locally_installed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_in_sync_install = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_is_in_sync_install(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_in_sync_install_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sync_pb.WebAppIconInfo icon_infos = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_icon_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 downloaded_icon_sizes = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 88u, input, this->mutable_downloaded_icon_sizes())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_downloaded_icon_sizes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .web_app.WebAppFileHandlerProto file_handlers = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_file_handlers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string additional_search_terms = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_additional_search_terms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .web_app.ChromeOSDataProto chromeos_data = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_chromeos_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_launch_time = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_last_launch_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_launch_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 install_time = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          _Internal::set_has_install_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &install_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:web_app.WebAppProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:web_app.WebAppProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WebAppProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:web_app.WebAppProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .sync_pb.WebAppSpecifics sync_data = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::sync_data(this), output);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 theme_color = 3;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->theme_color(), output);
  }

  // optional string description = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  // optional .web_app.WebAppProto.DisplayMode display_mode = 5;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->display_mode(), output);
  }

  // optional string scope = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->scope(), output);
  }

  // required .web_app.SourcesProto sources = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::sources(this), output);
  }

  // required bool is_locally_installed = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->is_locally_installed(), output);
  }

  // optional bool is_in_sync_install = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->is_in_sync_install(), output);
  }

  // repeated .sync_pb.WebAppIconInfo icon_infos = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->icon_infos_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10,
      this->icon_infos(static_cast<int>(i)),
      output);
  }

  // repeated int32 downloaded_icon_sizes = 11;
  for (int i = 0, n = this->downloaded_icon_sizes_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
      11, this->downloaded_icon_sizes(i), output);
  }

  // repeated .web_app.WebAppFileHandlerProto file_handlers = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->file_handlers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      12,
      this->file_handlers(static_cast<int>(i)),
      output);
  }

  // repeated string additional_search_terms = 13;
  for (int i = 0, n = this->additional_search_terms_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      13, this->additional_search_terms(i), output);
  }

  // optional .web_app.ChromeOSDataProto chromeos_data = 14;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      14, _Internal::chromeos_data(this), output);
  }

  // optional int64 last_launch_time = 15;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(15, this->last_launch_time(), output);
  }

  // optional int64 install_time = 16;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(16, this->install_time(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:web_app.WebAppProto)
}

size_t WebAppProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:web_app.WebAppProto)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_sync_data()) {
    // required .sync_pb.WebAppSpecifics sync_data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sync_data_);
  }

  if (has_sources()) {
    // required .web_app.SourcesProto sources = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sources_);
  }

  if (has_is_locally_installed()) {
    // required bool is_locally_installed = 8;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t WebAppProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:web_app.WebAppProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000099) ^ 0x00000099) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());

    // required .sync_pb.WebAppSpecifics sync_data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sync_data_);

    // required .web_app.SourcesProto sources = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sources_);

    // required bool is_locally_installed = 8;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sync_pb.WebAppIconInfo icon_infos = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->icon_infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->icon_infos(static_cast<int>(i)));
    }
  }

  // repeated int32 downloaded_icon_sizes = 11;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->downloaded_icon_sizes_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->downloaded_icon_sizes_size());
    total_size += data_size;
  }

  // repeated .web_app.WebAppFileHandlerProto file_handlers = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->file_handlers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->file_handlers(static_cast<int>(i)));
    }
  }

  // repeated string additional_search_terms = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->additional_search_terms_size());
  for (int i = 0, n = this->additional_search_terms_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->additional_search_terms(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string description = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string scope = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->scope());
    }

  }
  if (cached_has_bits & 0x00000060u) {
    // optional .web_app.ChromeOSDataProto chromeos_data = 14;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chromeos_data_);
    }

    // optional uint32 theme_color = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->theme_color());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool is_in_sync_install = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional int64 last_launch_time = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_launch_time());
    }

    // optional int64 install_time = 16;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->install_time());
    }

    // optional .web_app.WebAppProto.DisplayMode display_mode = 5;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->display_mode());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WebAppProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const WebAppProto*>(
      &from));
}

void WebAppProto::MergeFrom(const WebAppProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:web_app.WebAppProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  icon_infos_.MergeFrom(from.icon_infos_);
  downloaded_icon_sizes_.MergeFrom(from.downloaded_icon_sizes_);
  file_handlers_.MergeFrom(from.file_handlers_);
  additional_search_terms_.MergeFrom(from.additional_search_terms_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      scope_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scope_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_sync_data()->::sync_pb::WebAppSpecifics::MergeFrom(from.sync_data());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_sources()->::web_app::SourcesProto::MergeFrom(from.sources());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_chromeos_data()->::web_app::ChromeOSDataProto::MergeFrom(from.chromeos_data());
    }
    if (cached_has_bits & 0x00000040u) {
      theme_color_ = from.theme_color_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_locally_installed_ = from.is_locally_installed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      is_in_sync_install_ = from.is_in_sync_install_;
    }
    if (cached_has_bits & 0x00000200u) {
      last_launch_time_ = from.last_launch_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      install_time_ = from.install_time_;
    }
    if (cached_has_bits & 0x00000800u) {
      display_mode_ = from.display_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WebAppProto::CopyFrom(const WebAppProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:web_app.WebAppProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebAppProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000099) != 0x00000099) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->file_handlers())) return false;
  if (has_sources()) {
    if (!this->sources_->IsInitialized()) return false;
  }
  if (has_chromeos_data()) {
    if (!this->chromeos_data_->IsInitialized()) return false;
  }
  return true;
}

void WebAppProto::InternalSwap(WebAppProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&icon_infos_)->InternalSwap(CastToBase(&other->icon_infos_));
  downloaded_icon_sizes_.InternalSwap(&other->downloaded_icon_sizes_);
  CastToBase(&file_handlers_)->InternalSwap(CastToBase(&other->file_handlers_));
  additional_search_terms_.InternalSwap(CastToBase(&other->additional_search_terms_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  scope_.Swap(&other->scope_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sync_data_, other->sync_data_);
  swap(sources_, other->sources_);
  swap(chromeos_data_, other->chromeos_data_);
  swap(theme_color_, other->theme_color_);
  swap(is_locally_installed_, other->is_locally_installed_);
  swap(is_in_sync_install_, other->is_in_sync_install_);
  swap(last_launch_time_, other->last_launch_time_);
  swap(install_time_, other->install_time_);
  swap(display_mode_, other->display_mode_);
}

std::string WebAppProto::GetTypeName() const {
  return "web_app.WebAppProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace web_app
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::web_app::WebAppFileHandlerAcceptProto* Arena::CreateMaybeMessage< ::web_app::WebAppFileHandlerAcceptProto >(Arena* arena) {
  return Arena::CreateInternal< ::web_app::WebAppFileHandlerAcceptProto >(arena);
}
template<> PROTOBUF_NOINLINE ::web_app::WebAppFileHandlerProto* Arena::CreateMaybeMessage< ::web_app::WebAppFileHandlerProto >(Arena* arena) {
  return Arena::CreateInternal< ::web_app::WebAppFileHandlerProto >(arena);
}
template<> PROTOBUF_NOINLINE ::web_app::SourcesProto* Arena::CreateMaybeMessage< ::web_app::SourcesProto >(Arena* arena) {
  return Arena::CreateInternal< ::web_app::SourcesProto >(arena);
}
template<> PROTOBUF_NOINLINE ::web_app::ChromeOSDataProto* Arena::CreateMaybeMessage< ::web_app::ChromeOSDataProto >(Arena* arena) {
  return Arena::CreateInternal< ::web_app::ChromeOSDataProto >(arena);
}
template<> PROTOBUF_NOINLINE ::web_app::WebAppProto* Arena::CreateMaybeMessage< ::web_app::WebAppProto >(Arena* arena) {
  return Arena::CreateInternal< ::web_app::WebAppProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chrome/browser/web_applications/proto/web_app.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "components/sync/protocol/web_app_specifics.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace web_app {
class ChromeOSDataProto;
class ChromeOSDataProtoDefaultTypeInternal;
extern ChromeOSDataProtoDefaultTypeInternal _ChromeOSDataProto_default_instance_;
class SourcesProto;
class SourcesProtoDefaultTypeInternal;
extern SourcesProtoDefaultTypeInternal _SourcesProto_default_instance_;
class WebAppFileHandlerAcceptProto;
class WebAppFileHandlerAcceptProtoDefaultTypeInternal;
extern WebAppFileHandlerAcceptProtoDefaultTypeInternal _WebAppFileHandlerAcceptProto_default_instance_;
class WebAppFileHandlerProto;
class WebAppFileHandlerProtoDefaultTypeInternal;
extern WebAppFileHandlerProtoDefaultTypeInternal _WebAppFileHandlerProto_default_instance_;
class WebAppProto;
class WebAppProtoDefaultTypeInternal;
extern WebAppProtoDefaultTypeInternal _WebAppProto_default_instance_;
}  // namespace web_app
PROTOBUF_NAMESPACE_OPEN
template<> ::web_app::ChromeOSDataProto* Arena::CreateMaybeMessage<::web_app::ChromeOSDataProto>(Arena*);
template<> ::web_app::SourcesProto* Arena::CreateMaybeMessage<::web_app::SourcesProto>(Arena*);
template<> ::web_app::WebAppFileHandlerAcceptProto* Arena::CreateMaybeMessage<::web_app::WebAppFileHandlerAcceptProto>(Arena*);
template<> ::web_app::WebAppFileHandlerProto* Arena::CreateMaybeMessage<::web_app::WebAppFileHandlerProto>(Arena*);
template<> ::web_app::WebAppProto* Arena::CreateMaybeMessage<::web_app::WebAppProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace web_app {

enum WebAppProto_DisplayMode : int {
  WebAppProto_DisplayMode_BROWSER = 1,
  WebAppProto_DisplayMode_MINIMAL_UI = 2,
  WebAppProto_DisplayMode_STANDALONE = 3,
  WebAppProto_DisplayMode_FULLSCREEN = 4
};
bool WebAppProto_DisplayMode_IsValid(int value);
constexpr WebAppProto_DisplayMode WebAppProto_DisplayMode_DisplayMode_MIN = WebAppProto_DisplayMode_BROWSER;
constexpr WebAppProto_DisplayMode WebAppProto_DisplayMode_DisplayMode_MAX = WebAppProto_DisplayMode_FULLSCREEN;
constexpr int WebAppProto_DisplayMode_DisplayMode_ARRAYSIZE = WebAppProto_DisplayMode_DisplayMode_MAX + 1;

const std::string& WebAppProto_DisplayMode_Name(WebAppProto_DisplayMode value);
template<typename T>
inline const std::string& WebAppProto_DisplayMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WebAppProto_DisplayMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WebAppProto_DisplayMode_Name.");
  return WebAppProto_DisplayMode_Name(static_cast<WebAppProto_DisplayMode>(enum_t_value));
}
bool WebAppProto_DisplayMode_Parse(
    const std::string& name, WebAppProto_DisplayMode* value);
// ===================================================================

class WebAppFileHandlerAcceptProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:web_app.WebAppFileHandlerAcceptProto) */ {
 public:
  WebAppFileHandlerAcceptProto();
  virtual ~WebAppFileHandlerAcceptProto();

  WebAppFileHandlerAcceptProto(const WebAppFileHandlerAcceptProto& from);
  WebAppFileHandlerAcceptProto(WebAppFileHandlerAcceptProto&& from) noexcept
    : WebAppFileHandlerAcceptProto() {
    *this = ::std::move(from);
  }

  inline WebAppFileHandlerAcceptProto& operator=(const WebAppFileHandlerAcceptProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline WebAppFileHandlerAcceptProto& operator=(WebAppFileHandlerAcceptProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const WebAppFileHandlerAcceptProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WebAppFileHandlerAcceptProto* internal_default_instance() {
    return reinterpret_cast<const WebAppFileHandlerAcceptProto*>(
               &_WebAppFileHandlerAcceptProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WebAppFileHandlerAcceptProto& a, WebAppFileHandlerAcceptProto& b) {
    a.Swap(&b);
  }
  inline void Swap(WebAppFileHandlerAcceptProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WebAppFileHandlerAcceptProto* New() const final {
    return CreateMaybeMessage<WebAppFileHandlerAcceptProto>(nullptr);
  }

  WebAppFileHandlerAcceptProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WebAppFileHandlerAcceptProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const WebAppFileHandlerAcceptProto& from);
  void MergeFrom(const WebAppFileHandlerAcceptProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WebAppFileHandlerAcceptProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "web_app.WebAppFileHandlerAcceptProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileExtensionsFieldNumber = 2,
    kMimetypeFieldNumber = 1,
  };
  // repeated string file_extensions = 2;
  int file_extensions_size() const;
  void clear_file_extensions();
  const std::string& file_extensions(int index) const;
  std::string* mutable_file_extensions(int index);
  void set_file_extensions(int index, const std::string& value);
  void set_file_extensions(int index, std::string&& value);
  void set_file_extensions(int index, const char* value);
  void set_file_extensions(int index, const char* value, size_t size);
  std::string* add_file_extensions();
  void add_file_extensions(const std::string& value);
  void add_file_extensions(std::string&& value);
  void add_file_extensions(const char* value);
  void add_file_extensions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& file_extensions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_file_extensions();

  // required string mimetype = 1;
  bool has_mimetype() const;
  void clear_mimetype();
  const std::string& mimetype() const;
  void set_mimetype(const std::string& value);
  void set_mimetype(std::string&& value);
  void set_mimetype(const char* value);
  void set_mimetype(const char* value, size_t size);
  std::string* mutable_mimetype();
  std::string* release_mimetype();
  void set_allocated_mimetype(std::string* mimetype);

  // @@protoc_insertion_point(class_scope:web_app.WebAppFileHandlerAcceptProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> file_extensions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mimetype_;
  friend struct ::TableStruct_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto;
};
// -------------------------------------------------------------------

class WebAppFileHandlerProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:web_app.WebAppFileHandlerProto) */ {
 public:
  WebAppFileHandlerProto();
  virtual ~WebAppFileHandlerProto();

  WebAppFileHandlerProto(const WebAppFileHandlerProto& from);
  WebAppFileHandlerProto(WebAppFileHandlerProto&& from) noexcept
    : WebAppFileHandlerProto() {
    *this = ::std::move(from);
  }

  inline WebAppFileHandlerProto& operator=(const WebAppFileHandlerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline WebAppFileHandlerProto& operator=(WebAppFileHandlerProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const WebAppFileHandlerProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WebAppFileHandlerProto* internal_default_instance() {
    return reinterpret_cast<const WebAppFileHandlerProto*>(
               &_WebAppFileHandlerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WebAppFileHandlerProto& a, WebAppFileHandlerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(WebAppFileHandlerProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WebAppFileHandlerProto* New() const final {
    return CreateMaybeMessage<WebAppFileHandlerProto>(nullptr);
  }

  WebAppFileHandlerProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WebAppFileHandlerProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const WebAppFileHandlerProto& from);
  void MergeFrom(const WebAppFileHandlerProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WebAppFileHandlerProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "web_app.WebAppFileHandlerProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcceptFieldNumber = 2,
    kActionFieldNumber = 1,
  };
  // repeated .web_app.WebAppFileHandlerAcceptProto accept = 2;
  int accept_size() const;
  void clear_accept();
  ::web_app::WebAppFileHandlerAcceptProto* mutable_accept(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::web_app::WebAppFileHandlerAcceptProto >*
      mutable_accept();
  const ::web_app::WebAppFileHandlerAcceptProto& accept(int index) const;
  ::web_app::WebAppFileHandlerAcceptProto* add_accept();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::web_app::WebAppFileHandlerAcceptProto >&
      accept() const;

  // required string action = 1;
  bool has_action() const;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);

  // @@protoc_insertion_point(class_scope:web_app.WebAppFileHandlerProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::web_app::WebAppFileHandlerAcceptProto > accept_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  friend struct ::TableStruct_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto;
};
// -------------------------------------------------------------------

class SourcesProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:web_app.SourcesProto) */ {
 public:
  SourcesProto();
  virtual ~SourcesProto();

  SourcesProto(const SourcesProto& from);
  SourcesProto(SourcesProto&& from) noexcept
    : SourcesProto() {
    *this = ::std::move(from);
  }

  inline SourcesProto& operator=(const SourcesProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourcesProto& operator=(SourcesProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SourcesProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourcesProto* internal_default_instance() {
    return reinterpret_cast<const SourcesProto*>(
               &_SourcesProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SourcesProto& a, SourcesProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SourcesProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SourcesProto* New() const final {
    return CreateMaybeMessage<SourcesProto>(nullptr);
  }

  SourcesProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SourcesProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SourcesProto& from);
  void MergeFrom(const SourcesProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SourcesProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "web_app.SourcesProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSystemFieldNumber = 1,
    kPolicyFieldNumber = 2,
    kWebAppStoreFieldNumber = 3,
    kSyncFieldNumber = 4,
    kDefaultFieldNumber = 5,
  };
  // required bool system = 1;
  bool has_system() const;
  void clear_system();
  bool system() const;
  void set_system(bool value);

  // required bool policy = 2;
  bool has_policy() const;
  void clear_policy();
  bool policy() const;
  void set_policy(bool value);

  // required bool web_app_store = 3;
  bool has_web_app_store() const;
  void clear_web_app_store();
  bool web_app_store() const;
  void set_web_app_store(bool value);

  // required bool sync = 4;
  bool has_sync() const;
  void clear_sync();
  bool sync() const;
  void set_sync(bool value);

  // required bool default = 5;
  bool has_default_() const;
  void clear_default_();
  bool default_() const;
  void set_default_(bool value);

  // @@protoc_insertion_point(class_scope:web_app.SourcesProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool system_;
  bool policy_;
  bool web_app_store_;
  bool sync_;
  bool default__;
  friend struct ::TableStruct_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto;
};
// -------------------------------------------------------------------

class ChromeOSDataProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:web_app.ChromeOSDataProto) */ {
 public:
  ChromeOSDataProto();
  virtual ~ChromeOSDataProto();

  ChromeOSDataProto(const ChromeOSDataProto& from);
  ChromeOSDataProto(ChromeOSDataProto&& from) noexcept
    : ChromeOSDataProto() {
    *this = ::std::move(from);
  }

  inline ChromeOSDataProto& operator=(const ChromeOSDataProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeOSDataProto& operator=(ChromeOSDataProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ChromeOSDataProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChromeOSDataProto* internal_default_instance() {
    return reinterpret_cast<const ChromeOSDataProto*>(
               &_ChromeOSDataProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChromeOSDataProto& a, ChromeOSDataProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ChromeOSDataProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChromeOSDataProto* New() const final {
    return CreateMaybeMessage<ChromeOSDataProto>(nullptr);
  }

  ChromeOSDataProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChromeOSDataProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ChromeOSDataProto& from);
  void MergeFrom(const ChromeOSDataProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeOSDataProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "web_app.ChromeOSDataProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowInLauncherFieldNumber = 1,
    kShowInSearchFieldNumber = 2,
    kShowInManagementFieldNumber = 3,
    kIsDisabledFieldNumber = 4,
  };
  // required bool show_in_launcher = 1;
  bool has_show_in_launcher() const;
  void clear_show_in_launcher();
  bool show_in_launcher() const;
  void set_show_in_launcher(bool value);

  // required bool show_in_search = 2;
  bool has_show_in_search() const;
  void clear_show_in_search();
  bool show_in_search() const;
  void set_show_in_search(bool value);

  // required bool show_in_management = 3;
  bool has_show_in_management() const;
  void clear_show_in_management();
  bool show_in_management() const;
  void set_show_in_management(bool value);

  // required bool is_disabled = 4;
  bool has_is_disabled() const;
  void clear_is_disabled();
  bool is_disabled() const;
  void set_is_disabled(bool value);

  // @@protoc_insertion_point(class_scope:web_app.ChromeOSDataProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool show_in_launcher_;
  bool show_in_search_;
  bool show_in_management_;
  bool is_disabled_;
  friend struct ::TableStruct_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto;
};
// -------------------------------------------------------------------

class WebAppProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:web_app.WebAppProto) */ {
 public:
  WebAppProto();
  virtual ~WebAppProto();

  WebAppProto(const WebAppProto& from);
  WebAppProto(WebAppProto&& from) noexcept
    : WebAppProto() {
    *this = ::std::move(from);
  }

  inline WebAppProto& operator=(const WebAppProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline WebAppProto& operator=(WebAppProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const WebAppProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WebAppProto* internal_default_instance() {
    return reinterpret_cast<const WebAppProto*>(
               &_WebAppProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WebAppProto& a, WebAppProto& b) {
    a.Swap(&b);
  }
  inline void Swap(WebAppProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WebAppProto* New() const final {
    return CreateMaybeMessage<WebAppProto>(nullptr);
  }

  WebAppProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WebAppProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const WebAppProto& from);
  void MergeFrom(const WebAppProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WebAppProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "web_app.WebAppProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef WebAppProto_DisplayMode DisplayMode;
  static constexpr DisplayMode BROWSER =
    WebAppProto_DisplayMode_BROWSER;
  static constexpr DisplayMode MINIMAL_UI =
    WebAppProto_DisplayMode_MINIMAL_UI;
  static constexpr DisplayMode STANDALONE =
    WebAppProto_DisplayMode_STANDALONE;
  static constexpr DisplayMode FULLSCREEN =
    WebAppProto_DisplayMode_FULLSCREEN;
  static inline bool DisplayMode_IsValid(int value) {
    return WebAppProto_DisplayMode_IsValid(value);
  }
  static constexpr DisplayMode DisplayMode_MIN =
    WebAppProto_DisplayMode_DisplayMode_MIN;
  static constexpr DisplayMode DisplayMode_MAX =
    WebAppProto_DisplayMode_DisplayMode_MAX;
  static constexpr int DisplayMode_ARRAYSIZE =
    WebAppProto_DisplayMode_DisplayMode_ARRAYSIZE;
  template<typename T>
  static inline const std::string& DisplayMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DisplayMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DisplayMode_Name.");
    return WebAppProto_DisplayMode_Name(enum_t_value);
  }
  static inline bool DisplayMode_Parse(const std::string& name,
      DisplayMode* value) {
    return WebAppProto_DisplayMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIconInfosFieldNumber = 10,
    kDownloadedIconSizesFieldNumber = 11,
    kFileHandlersFieldNumber = 12,
    kAdditionalSearchTermsFieldNumber = 13,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 4,
    kScopeFieldNumber = 6,
    kSyncDataFieldNumber = 1,
    kSourcesFieldNumber = 7,
    kChromeosDataFieldNumber = 14,
    kThemeColorFieldNumber = 3,
    kIsLocallyInstalledFieldNumber = 8,
    kIsInSyncInstallFieldNumber = 9,
    kLastLaunchTimeFieldNumber = 15,
    kInstallTimeFieldNumber = 16,
    kDisplayModeFieldNumber = 5,
  };
  // repeated .sync_pb.WebAppIconInfo icon_infos = 10;
  int icon_infos_size() const;
  void clear_icon_infos();
  ::sync_pb::WebAppIconInfo* mutable_icon_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::WebAppIconInfo >*
      mutable_icon_infos();
  const ::sync_pb::WebAppIconInfo& icon_infos(int index) const;
  ::sync_pb::WebAppIconInfo* add_icon_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::WebAppIconInfo >&
      icon_infos() const;

  // repeated int32 downloaded_icon_sizes = 11;
  int downloaded_icon_sizes_size() const;
  void clear_downloaded_icon_sizes();
  ::PROTOBUF_NAMESPACE_ID::int32 downloaded_icon_sizes(int index) const;
  void set_downloaded_icon_sizes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_downloaded_icon_sizes(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      downloaded_icon_sizes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_downloaded_icon_sizes();

  // repeated .web_app.WebAppFileHandlerProto file_handlers = 12;
  int file_handlers_size() const;
  void clear_file_handlers();
  ::web_app::WebAppFileHandlerProto* mutable_file_handlers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::web_app::WebAppFileHandlerProto >*
      mutable_file_handlers();
  const ::web_app::WebAppFileHandlerProto& file_handlers(int index) const;
  ::web_app::WebAppFileHandlerProto* add_file_handlers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::web_app::WebAppFileHandlerProto >&
      file_handlers() const;

  // repeated string additional_search_terms = 13;
  int additional_search_terms_size() const;
  void clear_additional_search_terms();
  const std::string& additional_search_terms(int index) const;
  std::string* mutable_additional_search_terms(int index);
  void set_additional_search_terms(int index, const std::string& value);
  void set_additional_search_terms(int index, std::string&& value);
  void set_additional_search_terms(int index, const char* value);
  void set_additional_search_terms(int index, const char* value, size_t size);
  std::string* add_additional_search_terms();
  void add_additional_search_terms(const std::string& value);
  void add_additional_search_terms(std::string&& value);
  void add_additional_search_terms(const char* value);
  void add_additional_search_terms(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& additional_search_terms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_additional_search_terms();

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string description = 4;
  bool has_description() const;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);

  // optional string scope = 6;
  bool has_scope() const;
  void clear_scope();
  const std::string& scope() const;
  void set_scope(const std::string& value);
  void set_scope(std::string&& value);
  void set_scope(const char* value);
  void set_scope(const char* value, size_t size);
  std::string* mutable_scope();
  std::string* release_scope();
  void set_allocated_scope(std::string* scope);

  // required .sync_pb.WebAppSpecifics sync_data = 1;
  bool has_sync_data() const;
  void clear_sync_data();
  const ::sync_pb::WebAppSpecifics& sync_data() const;
  ::sync_pb::WebAppSpecifics* release_sync_data();
  ::sync_pb::WebAppSpecifics* mutable_sync_data();
  void set_allocated_sync_data(::sync_pb::WebAppSpecifics* sync_data);

  // required .web_app.SourcesProto sources = 7;
  bool has_sources() const;
  void clear_sources();
  const ::web_app::SourcesProto& sources() const;
  ::web_app::SourcesProto* release_sources();
  ::web_app::SourcesProto* mutable_sources();
  void set_allocated_sources(::web_app::SourcesProto* sources);

  // optional .web_app.ChromeOSDataProto chromeos_data = 14;
  bool has_chromeos_data() const;
  void clear_chromeos_data();
  const ::web_app::ChromeOSDataProto& chromeos_data() const;
  ::web_app::ChromeOSDataProto* release_chromeos_data();
  ::web_app::ChromeOSDataProto* mutable_chromeos_data();
  void set_allocated_chromeos_data(::web_app::ChromeOSDataProto* chromeos_data);

  // optional uint32 theme_color = 3;
  bool has_theme_color() const;
  void clear_theme_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 theme_color() const;
  void set_theme_color(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required bool is_locally_installed = 8;
  bool has_is_locally_installed() const;
  void clear_is_locally_installed();
  bool is_locally_installed() const;
  void set_is_locally_installed(bool value);

  // optional bool is_in_sync_install = 9;
  bool has_is_in_sync_install() const;
  void clear_is_in_sync_install();
  bool is_in_sync_install() const;
  void set_is_in_sync_install(bool value);

  // optional int64 last_launch_time = 15;
  bool has_last_launch_time() const;
  void clear_last_launch_time();
  ::PROTOBUF_NAMESPACE_ID::int64 last_launch_time() const;
  void set_last_launch_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 install_time = 16;
  bool has_install_time() const;
  void clear_install_time();
  ::PROTOBUF_NAMESPACE_ID::int64 install_time() const;
  void set_install_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .web_app.WebAppProto.DisplayMode display_mode = 5;
  bool has_display_mode() const;
  void clear_display_mode();
  ::web_app::WebAppProto_DisplayMode display_mode() const;
  void set_display_mode(::web_app::WebAppProto_DisplayMode value);

  // @@protoc_insertion_point(class_scope:web_app.WebAppProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::WebAppIconInfo > icon_infos_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > downloaded_icon_sizes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::web_app::WebAppFileHandlerProto > file_handlers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> additional_search_terms_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scope_;
  ::sync_pb::WebAppSpecifics* sync_data_;
  ::web_app::SourcesProto* sources_;
  ::web_app::ChromeOSDataProto* chromeos_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 theme_color_;
  bool is_locally_installed_;
  bool is_in_sync_install_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_launch_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 install_time_;
  int display_mode_;
  friend struct ::TableStruct_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WebAppFileHandlerAcceptProto

// required string mimetype = 1;
inline bool WebAppFileHandlerAcceptProto::has_mimetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WebAppFileHandlerAcceptProto::clear_mimetype() {
  mimetype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WebAppFileHandlerAcceptProto::mimetype() const {
  // @@protoc_insertion_point(field_get:web_app.WebAppFileHandlerAcceptProto.mimetype)
  return mimetype_.GetNoArena();
}
inline void WebAppFileHandlerAcceptProto::set_mimetype(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mimetype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:web_app.WebAppFileHandlerAcceptProto.mimetype)
}
inline void WebAppFileHandlerAcceptProto::set_mimetype(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mimetype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:web_app.WebAppFileHandlerAcceptProto.mimetype)
}
inline void WebAppFileHandlerAcceptProto::set_mimetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mimetype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:web_app.WebAppFileHandlerAcceptProto.mimetype)
}
inline void WebAppFileHandlerAcceptProto::set_mimetype(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mimetype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:web_app.WebAppFileHandlerAcceptProto.mimetype)
}
inline std::string* WebAppFileHandlerAcceptProto::mutable_mimetype() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:web_app.WebAppFileHandlerAcceptProto.mimetype)
  return mimetype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WebAppFileHandlerAcceptProto::release_mimetype() {
  // @@protoc_insertion_point(field_release:web_app.WebAppFileHandlerAcceptProto.mimetype)
  if (!has_mimetype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mimetype_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WebAppFileHandlerAcceptProto::set_allocated_mimetype(std::string* mimetype) {
  if (mimetype != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mimetype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mimetype);
  // @@protoc_insertion_point(field_set_allocated:web_app.WebAppFileHandlerAcceptProto.mimetype)
}

// repeated string file_extensions = 2;
inline int WebAppFileHandlerAcceptProto::file_extensions_size() const {
  return file_extensions_.size();
}
inline void WebAppFileHandlerAcceptProto::clear_file_extensions() {
  file_extensions_.Clear();
}
inline const std::string& WebAppFileHandlerAcceptProto::file_extensions(int index) const {
  // @@protoc_insertion_point(field_get:web_app.WebAppFileHandlerAcceptProto.file_extensions)
  return file_extensions_.Get(index);
}
inline std::string* WebAppFileHandlerAcceptProto::mutable_file_extensions(int index) {
  // @@protoc_insertion_point(field_mutable:web_app.WebAppFileHandlerAcceptProto.file_extensions)
  return file_extensions_.Mutable(index);
}
inline void WebAppFileHandlerAcceptProto::set_file_extensions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:web_app.WebAppFileHandlerAcceptProto.file_extensions)
  file_extensions_.Mutable(index)->assign(value);
}
inline void WebAppFileHandlerAcceptProto::set_file_extensions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:web_app.WebAppFileHandlerAcceptProto.file_extensions)
  file_extensions_.Mutable(index)->assign(std::move(value));
}
inline void WebAppFileHandlerAcceptProto::set_file_extensions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  file_extensions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:web_app.WebAppFileHandlerAcceptProto.file_extensions)
}
inline void WebAppFileHandlerAcceptProto::set_file_extensions(int index, const char* value, size_t size) {
  file_extensions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:web_app.WebAppFileHandlerAcceptProto.file_extensions)
}
inline std::string* WebAppFileHandlerAcceptProto::add_file_extensions() {
  // @@protoc_insertion_point(field_add_mutable:web_app.WebAppFileHandlerAcceptProto.file_extensions)
  return file_extensions_.Add();
}
inline void WebAppFileHandlerAcceptProto::add_file_extensions(const std::string& value) {
  file_extensions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:web_app.WebAppFileHandlerAcceptProto.file_extensions)
}
inline void WebAppFileHandlerAcceptProto::add_file_extensions(std::string&& value) {
  file_extensions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:web_app.WebAppFileHandlerAcceptProto.file_extensions)
}
inline void WebAppFileHandlerAcceptProto::add_file_extensions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  file_extensions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:web_app.WebAppFileHandlerAcceptProto.file_extensions)
}
inline void WebAppFileHandlerAcceptProto::add_file_extensions(const char* value, size_t size) {
  file_extensions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:web_app.WebAppFileHandlerAcceptProto.file_extensions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WebAppFileHandlerAcceptProto::file_extensions() const {
  // @@protoc_insertion_point(field_list:web_app.WebAppFileHandlerAcceptProto.file_extensions)
  return file_extensions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
WebAppFileHandlerAcceptProto::mutable_file_extensions() {
  // @@protoc_insertion_point(field_mutable_list:web_app.WebAppFileHandlerAcceptProto.file_extensions)
  return &file_extensions_;
}

// -------------------------------------------------------------------

// WebAppFileHandlerProto

// required string action = 1;
inline bool WebAppFileHandlerProto::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WebAppFileHandlerProto::clear_action() {
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WebAppFileHandlerProto::action() const {
  // @@protoc_insertion_point(field_get:web_app.WebAppFileHandlerProto.action)
  return action_.GetNoArena();
}
inline void WebAppFileHandlerProto::set_action(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:web_app.WebAppFileHandlerProto.action)
}
inline void WebAppFileHandlerProto::set_action(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  action_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:web_app.WebAppFileHandlerProto.action)
}
inline void WebAppFileHandlerProto::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:web_app.WebAppFileHandlerProto.action)
}
inline void WebAppFileHandlerProto::set_action(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:web_app.WebAppFileHandlerProto.action)
}
inline std::string* WebAppFileHandlerProto::mutable_action() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:web_app.WebAppFileHandlerProto.action)
  return action_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WebAppFileHandlerProto::release_action() {
  // @@protoc_insertion_point(field_release:web_app.WebAppFileHandlerProto.action)
  if (!has_action()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return action_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WebAppFileHandlerProto::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  action_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:web_app.WebAppFileHandlerProto.action)
}

// repeated .web_app.WebAppFileHandlerAcceptProto accept = 2;
inline int WebAppFileHandlerProto::accept_size() const {
  return accept_.size();
}
inline void WebAppFileHandlerProto::clear_accept() {
  accept_.Clear();
}
inline ::web_app::WebAppFileHandlerAcceptProto* WebAppFileHandlerProto::mutable_accept(int index) {
  // @@protoc_insertion_point(field_mutable:web_app.WebAppFileHandlerProto.accept)
  return accept_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::web_app::WebAppFileHandlerAcceptProto >*
WebAppFileHandlerProto::mutable_accept() {
  // @@protoc_insertion_point(field_mutable_list:web_app.WebAppFileHandlerProto.accept)
  return &accept_;
}
inline const ::web_app::WebAppFileHandlerAcceptProto& WebAppFileHandlerProto::accept(int index) const {
  // @@protoc_insertion_point(field_get:web_app.WebAppFileHandlerProto.accept)
  return accept_.Get(index);
}
inline ::web_app::WebAppFileHandlerAcceptProto* WebAppFileHandlerProto::add_accept() {
  // @@protoc_insertion_point(field_add:web_app.WebAppFileHandlerProto.accept)
  return accept_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::web_app::WebAppFileHandlerAcceptProto >&
WebAppFileHandlerProto::accept() const {
  // @@protoc_insertion_point(field_list:web_app.WebAppFileHandlerProto.accept)
  return accept_;
}

// -------------------------------------------------------------------

// SourcesProto

// required bool system = 1;
inline bool SourcesProto::has_system() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SourcesProto::clear_system() {
  system_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool SourcesProto::system() const {
  // @@protoc_insertion_point(field_get:web_app.SourcesProto.system)
  return system_;
}
inline void SourcesProto::set_system(bool value) {
  _has_bits_[0] |= 0x00000001u;
  system_ = value;
  // @@protoc_insertion_point(field_set:web_app.SourcesProto.system)
}

// required bool policy = 2;
inline bool SourcesProto::has_policy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SourcesProto::clear_policy() {
  policy_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool SourcesProto::policy() const {
  // @@protoc_insertion_point(field_get:web_app.SourcesProto.policy)
  return policy_;
}
inline void SourcesProto::set_policy(bool value) {
  _has_bits_[0] |= 0x00000002u;
  policy_ = value;
  // @@protoc_insertion_point(field_set:web_app.SourcesProto.policy)
}

// required bool web_app_store = 3;
inline bool SourcesProto::has_web_app_store() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SourcesProto::clear_web_app_store() {
  web_app_store_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool SourcesProto::web_app_store() const {
  // @@protoc_insertion_point(field_get:web_app.SourcesProto.web_app_store)
  return web_app_store_;
}
inline void SourcesProto::set_web_app_store(bool value) {
  _has_bits_[0] |= 0x00000004u;
  web_app_store_ = value;
  // @@protoc_insertion_point(field_set:web_app.SourcesProto.web_app_store)
}

// required bool sync = 4;
inline bool SourcesProto::has_sync() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SourcesProto::clear_sync() {
  sync_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool SourcesProto::sync() const {
  // @@protoc_insertion_point(field_get:web_app.SourcesProto.sync)
  return sync_;
}
inline void SourcesProto::set_sync(bool value) {
  _has_bits_[0] |= 0x00000008u;
  sync_ = value;
  // @@protoc_insertion_point(field_set:web_app.SourcesProto.sync)
}

// required bool default = 5;
inline bool SourcesProto::has_default_() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SourcesProto::clear_default_() {
  default__ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool SourcesProto::default_() const {
  // @@protoc_insertion_point(field_get:web_app.SourcesProto.default)
  return default__;
}
inline void SourcesProto::set_default_(bool value) {
  _has_bits_[0] |= 0x00000010u;
  default__ = value;
  // @@protoc_insertion_point(field_set:web_app.SourcesProto.default)
}

// -------------------------------------------------------------------

// ChromeOSDataProto

// required bool show_in_launcher = 1;
inline bool ChromeOSDataProto::has_show_in_launcher() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChromeOSDataProto::clear_show_in_launcher() {
  show_in_launcher_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ChromeOSDataProto::show_in_launcher() const {
  // @@protoc_insertion_point(field_get:web_app.ChromeOSDataProto.show_in_launcher)
  return show_in_launcher_;
}
inline void ChromeOSDataProto::set_show_in_launcher(bool value) {
  _has_bits_[0] |= 0x00000001u;
  show_in_launcher_ = value;
  // @@protoc_insertion_point(field_set:web_app.ChromeOSDataProto.show_in_launcher)
}

// required bool show_in_search = 2;
inline bool ChromeOSDataProto::has_show_in_search() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChromeOSDataProto::clear_show_in_search() {
  show_in_search_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ChromeOSDataProto::show_in_search() const {
  // @@protoc_insertion_point(field_get:web_app.ChromeOSDataProto.show_in_search)
  return show_in_search_;
}
inline void ChromeOSDataProto::set_show_in_search(bool value) {
  _has_bits_[0] |= 0x00000002u;
  show_in_search_ = value;
  // @@protoc_insertion_point(field_set:web_app.ChromeOSDataProto.show_in_search)
}

// required bool show_in_management = 3;
inline bool ChromeOSDataProto::has_show_in_management() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChromeOSDataProto::clear_show_in_management() {
  show_in_management_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ChromeOSDataProto::show_in_management() const {
  // @@protoc_insertion_point(field_get:web_app.ChromeOSDataProto.show_in_management)
  return show_in_management_;
}
inline void ChromeOSDataProto::set_show_in_management(bool value) {
  _has_bits_[0] |= 0x00000004u;
  show_in_management_ = value;
  // @@protoc_insertion_point(field_set:web_app.ChromeOSDataProto.show_in_management)
}

// required bool is_disabled = 4;
inline bool ChromeOSDataProto::has_is_disabled() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChromeOSDataProto::clear_is_disabled() {
  is_disabled_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ChromeOSDataProto::is_disabled() const {
  // @@protoc_insertion_point(field_get:web_app.ChromeOSDataProto.is_disabled)
  return is_disabled_;
}
inline void ChromeOSDataProto::set_is_disabled(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_disabled_ = value;
  // @@protoc_insertion_point(field_set:web_app.ChromeOSDataProto.is_disabled)
}

// -------------------------------------------------------------------

// WebAppProto

// required .sync_pb.WebAppSpecifics sync_data = 1;
inline bool WebAppProto::has_sync_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::sync_pb::WebAppSpecifics& WebAppProto::sync_data() const {
  const ::sync_pb::WebAppSpecifics* p = sync_data_;
  // @@protoc_insertion_point(field_get:web_app.WebAppProto.sync_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::WebAppSpecifics*>(
      &::sync_pb::_WebAppSpecifics_default_instance_);
}
inline ::sync_pb::WebAppSpecifics* WebAppProto::release_sync_data() {
  // @@protoc_insertion_point(field_release:web_app.WebAppProto.sync_data)
  _has_bits_[0] &= ~0x00000008u;
  ::sync_pb::WebAppSpecifics* temp = sync_data_;
  sync_data_ = nullptr;
  return temp;
}
inline ::sync_pb::WebAppSpecifics* WebAppProto::mutable_sync_data() {
  _has_bits_[0] |= 0x00000008u;
  if (sync_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::WebAppSpecifics>(GetArenaNoVirtual());
    sync_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:web_app.WebAppProto.sync_data)
  return sync_data_;
}
inline void WebAppProto::set_allocated_sync_data(::sync_pb::WebAppSpecifics* sync_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync_data_);
  }
  if (sync_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sync_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  sync_data_ = sync_data;
  // @@protoc_insertion_point(field_set_allocated:web_app.WebAppProto.sync_data)
}

// required string name = 2;
inline bool WebAppProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WebAppProto::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WebAppProto::name() const {
  // @@protoc_insertion_point(field_get:web_app.WebAppProto.name)
  return name_.GetNoArena();
}
inline void WebAppProto::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:web_app.WebAppProto.name)
}
inline void WebAppProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:web_app.WebAppProto.name)
}
inline void WebAppProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:web_app.WebAppProto.name)
}
inline void WebAppProto::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:web_app.WebAppProto.name)
}
inline std::string* WebAppProto::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:web_app.WebAppProto.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WebAppProto::release_name() {
  // @@protoc_insertion_point(field_release:web_app.WebAppProto.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WebAppProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:web_app.WebAppProto.name)
}

// optional uint32 theme_color = 3;
inline bool WebAppProto::has_theme_color() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WebAppProto::clear_theme_color() {
  theme_color_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WebAppProto::theme_color() const {
  // @@protoc_insertion_point(field_get:web_app.WebAppProto.theme_color)
  return theme_color_;
}
inline void WebAppProto::set_theme_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  theme_color_ = value;
  // @@protoc_insertion_point(field_set:web_app.WebAppProto.theme_color)
}

// optional string description = 4;
inline bool WebAppProto::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WebAppProto::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WebAppProto::description() const {
  // @@protoc_insertion_point(field_get:web_app.WebAppProto.description)
  return description_.GetNoArena();
}
inline void WebAppProto::set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:web_app.WebAppProto.description)
}
inline void WebAppProto::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:web_app.WebAppProto.description)
}
inline void WebAppProto::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:web_app.WebAppProto.description)
}
inline void WebAppProto::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:web_app.WebAppProto.description)
}
inline std::string* WebAppProto::mutable_description() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:web_app.WebAppProto.description)
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WebAppProto::release_description() {
  // @@protoc_insertion_point(field_release:web_app.WebAppProto.description)
  if (!has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return description_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WebAppProto::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:web_app.WebAppProto.description)
}

// optional .web_app.WebAppProto.DisplayMode display_mode = 5;
inline bool WebAppProto::has_display_mode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void WebAppProto::clear_display_mode() {
  display_mode_ = 1;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::web_app::WebAppProto_DisplayMode WebAppProto::display_mode() const {
  // @@protoc_insertion_point(field_get:web_app.WebAppProto.display_mode)
  return static_cast< ::web_app::WebAppProto_DisplayMode >(display_mode_);
}
inline void WebAppProto::set_display_mode(::web_app::WebAppProto_DisplayMode value) {
  assert(::web_app::WebAppProto_DisplayMode_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  display_mode_ = value;
  // @@protoc_insertion_point(field_set:web_app.WebAppProto.display_mode)
}

// optional string scope = 6;
inline bool WebAppProto::has_scope() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WebAppProto::clear_scope() {
  scope_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& WebAppProto::scope() const {
  // @@protoc_insertion_point(field_get:web_app.WebAppProto.scope)
  return scope_.GetNoArena();
}
inline void WebAppProto::set_scope(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  scope_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:web_app.WebAppProto.scope)
}
inline void WebAppProto::set_scope(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  scope_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:web_app.WebAppProto.scope)
}
inline void WebAppProto::set_scope(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  scope_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:web_app.WebAppProto.scope)
}
inline void WebAppProto::set_scope(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  scope_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:web_app.WebAppProto.scope)
}
inline std::string* WebAppProto::mutable_scope() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:web_app.WebAppProto.scope)
  return scope_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WebAppProto::release_scope() {
  // @@protoc_insertion_point(field_release:web_app.WebAppProto.scope)
  if (!has_scope()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return scope_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WebAppProto::set_allocated_scope(std::string* scope) {
  if (scope != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  scope_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scope);
  // @@protoc_insertion_point(field_set_allocated:web_app.WebAppProto.scope)
}

// required .web_app.SourcesProto sources = 7;
inline bool WebAppProto::has_sources() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WebAppProto::clear_sources() {
  if (sources_ != nullptr) sources_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::web_app::SourcesProto& WebAppProto::sources() const {
  const ::web_app::SourcesProto* p = sources_;
  // @@protoc_insertion_point(field_get:web_app.WebAppProto.sources)
  return p != nullptr ? *p : *reinterpret_cast<const ::web_app::SourcesProto*>(
      &::web_app::_SourcesProto_default_instance_);
}
inline ::web_app::SourcesProto* WebAppProto::release_sources() {
  // @@protoc_insertion_point(field_release:web_app.WebAppProto.sources)
  _has_bits_[0] &= ~0x00000010u;
  ::web_app::SourcesProto* temp = sources_;
  sources_ = nullptr;
  return temp;
}
inline ::web_app::SourcesProto* WebAppProto::mutable_sources() {
  _has_bits_[0] |= 0x00000010u;
  if (sources_ == nullptr) {
    auto* p = CreateMaybeMessage<::web_app::SourcesProto>(GetArenaNoVirtual());
    sources_ = p;
  }
  // @@protoc_insertion_point(field_mutable:web_app.WebAppProto.sources)
  return sources_;
}
inline void WebAppProto::set_allocated_sources(::web_app::SourcesProto* sources) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sources_;
  }
  if (sources) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sources = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sources, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  sources_ = sources;
  // @@protoc_insertion_point(field_set_allocated:web_app.WebAppProto.sources)
}

// required bool is_locally_installed = 8;
inline bool WebAppProto::has_is_locally_installed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WebAppProto::clear_is_locally_installed() {
  is_locally_installed_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool WebAppProto::is_locally_installed() const {
  // @@protoc_insertion_point(field_get:web_app.WebAppProto.is_locally_installed)
  return is_locally_installed_;
}
inline void WebAppProto::set_is_locally_installed(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_locally_installed_ = value;
  // @@protoc_insertion_point(field_set:web_app.WebAppProto.is_locally_installed)
}

// optional bool is_in_sync_install = 9;
inline bool WebAppProto::has_is_in_sync_install() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WebAppProto::clear_is_in_sync_install() {
  is_in_sync_install_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool WebAppProto::is_in_sync_install() const {
  // @@protoc_insertion_point(field_get:web_app.WebAppProto.is_in_sync_install)
  return is_in_sync_install_;
}
inline void WebAppProto::set_is_in_sync_install(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_in_sync_install_ = value;
  // @@protoc_insertion_point(field_set:web_app.WebAppProto.is_in_sync_install)
}

// repeated .sync_pb.WebAppIconInfo icon_infos = 10;
inline int WebAppProto::icon_infos_size() const {
  return icon_infos_.size();
}
inline ::sync_pb::WebAppIconInfo* WebAppProto::mutable_icon_infos(int index) {
  // @@protoc_insertion_point(field_mutable:web_app.WebAppProto.icon_infos)
  return icon_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::WebAppIconInfo >*
WebAppProto::mutable_icon_infos() {
  // @@protoc_insertion_point(field_mutable_list:web_app.WebAppProto.icon_infos)
  return &icon_infos_;
}
inline const ::sync_pb::WebAppIconInfo& WebAppProto::icon_infos(int index) const {
  // @@protoc_insertion_point(field_get:web_app.WebAppProto.icon_infos)
  return icon_infos_.Get(index);
}
inline ::sync_pb::WebAppIconInfo* WebAppProto::add_icon_infos() {
  // @@protoc_insertion_point(field_add:web_app.WebAppProto.icon_infos)
  return icon_infos_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sync_pb::WebAppIconInfo >&
WebAppProto::icon_infos() const {
  // @@protoc_insertion_point(field_list:web_app.WebAppProto.icon_infos)
  return icon_infos_;
}

// repeated int32 downloaded_icon_sizes = 11;
inline int WebAppProto::downloaded_icon_sizes_size() const {
  return downloaded_icon_sizes_.size();
}
inline void WebAppProto::clear_downloaded_icon_sizes() {
  downloaded_icon_sizes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WebAppProto::downloaded_icon_sizes(int index) const {
  // @@protoc_insertion_point(field_get:web_app.WebAppProto.downloaded_icon_sizes)
  return downloaded_icon_sizes_.Get(index);
}
inline void WebAppProto::set_downloaded_icon_sizes(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  downloaded_icon_sizes_.Set(index, value);
  // @@protoc_insertion_point(field_set:web_app.WebAppProto.downloaded_icon_sizes)
}
inline void WebAppProto::add_downloaded_icon_sizes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  downloaded_icon_sizes_.Add(value);
  // @@protoc_insertion_point(field_add:web_app.WebAppProto.downloaded_icon_sizes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
WebAppProto::downloaded_icon_sizes() const {
  // @@protoc_insertion_point(field_list:web_app.WebAppProto.downloaded_icon_sizes)
  return downloaded_icon_sizes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
WebAppProto::mutable_downloaded_icon_sizes() {
  // @@protoc_insertion_point(field_mutable_list:web_app.WebAppProto.downloaded_icon_sizes)
  return &downloaded_icon_sizes_;
}

// repeated .web_app.WebAppFileHandlerProto file_handlers = 12;
inline int WebAppProto::file_handlers_size() const {
  return file_handlers_.size();
}
inline void WebAppProto::clear_file_handlers() {
  file_handlers_.Clear();
}
inline ::web_app::WebAppFileHandlerProto* WebAppProto::mutable_file_handlers(int index) {
  // @@protoc_insertion_point(field_mutable:web_app.WebAppProto.file_handlers)
  return file_handlers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::web_app::WebAppFileHandlerProto >*
WebAppProto::mutable_file_handlers() {
  // @@protoc_insertion_point(field_mutable_list:web_app.WebAppProto.file_handlers)
  return &file_handlers_;
}
inline const ::web_app::WebAppFileHandlerProto& WebAppProto::file_handlers(int index) const {
  // @@protoc_insertion_point(field_get:web_app.WebAppProto.file_handlers)
  return file_handlers_.Get(index);
}
inline ::web_app::WebAppFileHandlerProto* WebAppProto::add_file_handlers() {
  // @@protoc_insertion_point(field_add:web_app.WebAppProto.file_handlers)
  return file_handlers_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::web_app::WebAppFileHandlerProto >&
WebAppProto::file_handlers() const {
  // @@protoc_insertion_point(field_list:web_app.WebAppProto.file_handlers)
  return file_handlers_;
}

// repeated string additional_search_terms = 13;
inline int WebAppProto::additional_search_terms_size() const {
  return additional_search_terms_.size();
}
inline void WebAppProto::clear_additional_search_terms() {
  additional_search_terms_.Clear();
}
inline const std::string& WebAppProto::additional_search_terms(int index) const {
  // @@protoc_insertion_point(field_get:web_app.WebAppProto.additional_search_terms)
  return additional_search_terms_.Get(index);
}
inline std::string* WebAppProto::mutable_additional_search_terms(int index) {
  // @@protoc_insertion_point(field_mutable:web_app.WebAppProto.additional_search_terms)
  return additional_search_terms_.Mutable(index);
}
inline void WebAppProto::set_additional_search_terms(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:web_app.WebAppProto.additional_search_terms)
  additional_search_terms_.Mutable(index)->assign(value);
}
inline void WebAppProto::set_additional_search_terms(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:web_app.WebAppProto.additional_search_terms)
  additional_search_terms_.Mutable(index)->assign(std::move(value));
}
inline void WebAppProto::set_additional_search_terms(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  additional_search_terms_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:web_app.WebAppProto.additional_search_terms)
}
inline void WebAppProto::set_additional_search_terms(int index, const char* value, size_t size) {
  additional_search_terms_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:web_app.WebAppProto.additional_search_terms)
}
inline std::string* WebAppProto::add_additional_search_terms() {
  // @@protoc_insertion_point(field_add_mutable:web_app.WebAppProto.additional_search_terms)
  return additional_search_terms_.Add();
}
inline void WebAppProto::add_additional_search_terms(const std::string& value) {
  additional_search_terms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:web_app.WebAppProto.additional_search_terms)
}
inline void WebAppProto::add_additional_search_terms(std::string&& value) {
  additional_search_terms_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:web_app.WebAppProto.additional_search_terms)
}
inline void WebAppProto::add_additional_search_terms(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  additional_search_terms_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:web_app.WebAppProto.additional_search_terms)
}
inline void WebAppProto::add_additional_search_terms(const char* value, size_t size) {
  additional_search_terms_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:web_app.WebAppProto.additional_search_terms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WebAppProto::additional_search_terms() const {
  // @@protoc_insertion_point(field_list:web_app.WebAppProto.additional_search_terms)
  return additional_search_terms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
WebAppProto::mutable_additional_search_terms() {
  // @@protoc_insertion_point(field_mutable_list:web_app.WebAppProto.additional_search_terms)
  return &additional_search_terms_;
}

// optional .web_app.ChromeOSDataProto chromeos_data = 14;
inline bool WebAppProto::has_chromeos_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WebAppProto::clear_chromeos_data() {
  if (chromeos_data_ != nullptr) chromeos_data_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::web_app::ChromeOSDataProto& WebAppProto::chromeos_data() const {
  const ::web_app::ChromeOSDataProto* p = chromeos_data_;
  // @@protoc_insertion_point(field_get:web_app.WebAppProto.chromeos_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::web_app::ChromeOSDataProto*>(
      &::web_app::_ChromeOSDataProto_default_instance_);
}
inline ::web_app::ChromeOSDataProto* WebAppProto::release_chromeos_data() {
  // @@protoc_insertion_point(field_release:web_app.WebAppProto.chromeos_data)
  _has_bits_[0] &= ~0x00000020u;
  ::web_app::ChromeOSDataProto* temp = chromeos_data_;
  chromeos_data_ = nullptr;
  return temp;
}
inline ::web_app::ChromeOSDataProto* WebAppProto::mutable_chromeos_data() {
  _has_bits_[0] |= 0x00000020u;
  if (chromeos_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::web_app::ChromeOSDataProto>(GetArenaNoVirtual());
    chromeos_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:web_app.WebAppProto.chromeos_data)
  return chromeos_data_;
}
inline void WebAppProto::set_allocated_chromeos_data(::web_app::ChromeOSDataProto* chromeos_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete chromeos_data_;
  }
  if (chromeos_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chromeos_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chromeos_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  chromeos_data_ = chromeos_data;
  // @@protoc_insertion_point(field_set_allocated:web_app.WebAppProto.chromeos_data)
}

// optional int64 last_launch_time = 15;
inline bool WebAppProto::has_last_launch_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WebAppProto::clear_last_launch_time() {
  last_launch_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WebAppProto::last_launch_time() const {
  // @@protoc_insertion_point(field_get:web_app.WebAppProto.last_launch_time)
  return last_launch_time_;
}
inline void WebAppProto::set_last_launch_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000200u;
  last_launch_time_ = value;
  // @@protoc_insertion_point(field_set:web_app.WebAppProto.last_launch_time)
}

// optional int64 install_time = 16;
inline bool WebAppProto::has_install_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void WebAppProto::clear_install_time() {
  install_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WebAppProto::install_time() const {
  // @@protoc_insertion_point(field_get:web_app.WebAppProto.install_time)
  return install_time_;
}
inline void WebAppProto::set_install_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000400u;
  install_time_ = value;
  // @@protoc_insertion_point(field_set:web_app.WebAppProto.install_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace web_app

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::web_app::WebAppProto_DisplayMode> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chrome_2fbrowser_2fweb_5fapplications_2fproto_2fweb_5fapp_2eproto

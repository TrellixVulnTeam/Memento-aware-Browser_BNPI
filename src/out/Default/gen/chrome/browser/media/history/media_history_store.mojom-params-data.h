// chrome/browser/media/history/media_history_store.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_MEDIA_HISTORY_MEDIA_HISTORY_STORE_MOJOM_PARAMS_DATA_H_
#define CHROME_BROWSER_MEDIA_HISTORY_MEDIA_HISTORY_STORE_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace media_history {
namespace mojom {
namespace internal {
class  MediaHistoryStore_GetMediaHistoryStats_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaHistoryStore_GetMediaHistoryStats_Params_Data));
      new (data()) MediaHistoryStore_GetMediaHistoryStats_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaHistoryStore_GetMediaHistoryStats_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaHistoryStore_GetMediaHistoryStats_Params_Data>(index_);
    }
    MediaHistoryStore_GetMediaHistoryStats_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  MediaHistoryStore_GetMediaHistoryStats_Params_Data();
  ~MediaHistoryStore_GetMediaHistoryStats_Params_Data() = delete;
};
static_assert(sizeof(MediaHistoryStore_GetMediaHistoryStats_Params_Data) == 8,
              "Bad sizeof(MediaHistoryStore_GetMediaHistoryStats_Params_Data)");
class  MediaHistoryStore_GetMediaHistoryStats_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaHistoryStore_GetMediaHistoryStats_ResponseParams_Data));
      new (data()) MediaHistoryStore_GetMediaHistoryStats_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaHistoryStore_GetMediaHistoryStats_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaHistoryStore_GetMediaHistoryStats_ResponseParams_Data>(index_);
    }
    MediaHistoryStore_GetMediaHistoryStats_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::MediaHistoryStats_Data> stats;

 private:
  MediaHistoryStore_GetMediaHistoryStats_ResponseParams_Data();
  ~MediaHistoryStore_GetMediaHistoryStats_ResponseParams_Data() = delete;
};
static_assert(sizeof(MediaHistoryStore_GetMediaHistoryStats_ResponseParams_Data) == 16,
              "Bad sizeof(MediaHistoryStore_GetMediaHistoryStats_ResponseParams_Data)");
class  MediaHistoryStore_GetMediaHistoryOriginRows_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaHistoryStore_GetMediaHistoryOriginRows_Params_Data));
      new (data()) MediaHistoryStore_GetMediaHistoryOriginRows_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaHistoryStore_GetMediaHistoryOriginRows_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaHistoryStore_GetMediaHistoryOriginRows_Params_Data>(index_);
    }
    MediaHistoryStore_GetMediaHistoryOriginRows_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  MediaHistoryStore_GetMediaHistoryOriginRows_Params_Data();
  ~MediaHistoryStore_GetMediaHistoryOriginRows_Params_Data() = delete;
};
static_assert(sizeof(MediaHistoryStore_GetMediaHistoryOriginRows_Params_Data) == 8,
              "Bad sizeof(MediaHistoryStore_GetMediaHistoryOriginRows_Params_Data)");
class  MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams_Data));
      new (data()) MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams_Data>(index_);
    }
    MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::MediaHistoryOriginRow_Data>>> rows;

 private:
  MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams_Data();
  ~MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams_Data() = delete;
};
static_assert(sizeof(MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams_Data) == 16,
              "Bad sizeof(MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams_Data)");
class  MediaHistoryStore_GetMediaHistoryPlaybackRows_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaHistoryStore_GetMediaHistoryPlaybackRows_Params_Data));
      new (data()) MediaHistoryStore_GetMediaHistoryPlaybackRows_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaHistoryStore_GetMediaHistoryPlaybackRows_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaHistoryStore_GetMediaHistoryPlaybackRows_Params_Data>(index_);
    }
    MediaHistoryStore_GetMediaHistoryPlaybackRows_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  MediaHistoryStore_GetMediaHistoryPlaybackRows_Params_Data();
  ~MediaHistoryStore_GetMediaHistoryPlaybackRows_Params_Data() = delete;
};
static_assert(sizeof(MediaHistoryStore_GetMediaHistoryPlaybackRows_Params_Data) == 8,
              "Bad sizeof(MediaHistoryStore_GetMediaHistoryPlaybackRows_Params_Data)");
class  MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams_Data));
      new (data()) MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams_Data>(index_);
    }
    MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::MediaHistoryPlaybackRow_Data>>> rows;

 private:
  MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams_Data();
  ~MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams_Data() = delete;
};
static_assert(sizeof(MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams_Data) == 16,
              "Bad sizeof(MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams_Data)");
class  MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params_Data));
      new (data()) MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params_Data>(index_);
    }
    MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params_Data();
  ~MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params_Data() = delete;
};
static_assert(sizeof(MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params_Data) == 8,
              "Bad sizeof(MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params_Data)");
class  MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams_Data));
      new (data()) MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams_Data>(index_);
    }
    MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::MediaHistoryPlaybackSessionRow_Data>>> rows;

 private:
  MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams_Data();
  ~MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams_Data() = delete;
};
static_assert(sizeof(MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams_Data) == 16,
              "Bad sizeof(MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams_Data)");

}  // namespace internal
class MediaHistoryStore_GetMediaHistoryStats_ParamsDataView {
 public:
  MediaHistoryStore_GetMediaHistoryStats_ParamsDataView() {}

  MediaHistoryStore_GetMediaHistoryStats_ParamsDataView(
      internal::MediaHistoryStore_GetMediaHistoryStats_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::MediaHistoryStore_GetMediaHistoryStats_Params_Data* data_ = nullptr;
};

class MediaHistoryStore_GetMediaHistoryStats_ResponseParamsDataView {
 public:
  MediaHistoryStore_GetMediaHistoryStats_ResponseParamsDataView() {}

  MediaHistoryStore_GetMediaHistoryStats_ResponseParamsDataView(
      internal::MediaHistoryStore_GetMediaHistoryStats_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetStatsDataView(
      MediaHistoryStatsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadStats(UserType* output) {
    auto* pointer = data_->stats.Get();
    return mojo::internal::Deserialize<::media_history::mojom::MediaHistoryStatsDataView>(
        pointer, output, context_);
  }
 private:
  internal::MediaHistoryStore_GetMediaHistoryStats_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class MediaHistoryStore_GetMediaHistoryOriginRows_ParamsDataView {
 public:
  MediaHistoryStore_GetMediaHistoryOriginRows_ParamsDataView() {}

  MediaHistoryStore_GetMediaHistoryOriginRows_ParamsDataView(
      internal::MediaHistoryStore_GetMediaHistoryOriginRows_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::MediaHistoryStore_GetMediaHistoryOriginRows_Params_Data* data_ = nullptr;
};

class MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParamsDataView {
 public:
  MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParamsDataView() {}

  MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParamsDataView(
      internal::MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetRowsDataView(
      mojo::ArrayDataView<MediaHistoryOriginRowDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadRows(UserType* output) {
    auto* pointer = data_->rows.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::media_history::mojom::MediaHistoryOriginRowDataView>>(
        pointer, output, context_);
  }
 private:
  internal::MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class MediaHistoryStore_GetMediaHistoryPlaybackRows_ParamsDataView {
 public:
  MediaHistoryStore_GetMediaHistoryPlaybackRows_ParamsDataView() {}

  MediaHistoryStore_GetMediaHistoryPlaybackRows_ParamsDataView(
      internal::MediaHistoryStore_GetMediaHistoryPlaybackRows_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::MediaHistoryStore_GetMediaHistoryPlaybackRows_Params_Data* data_ = nullptr;
};

class MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParamsDataView {
 public:
  MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParamsDataView() {}

  MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParamsDataView(
      internal::MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetRowsDataView(
      mojo::ArrayDataView<MediaHistoryPlaybackRowDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadRows(UserType* output) {
    auto* pointer = data_->rows.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::media_history::mojom::MediaHistoryPlaybackRowDataView>>(
        pointer, output, context_);
  }
 private:
  internal::MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ParamsDataView {
 public:
  MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ParamsDataView() {}

  MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ParamsDataView(
      internal::MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params_Data* data_ = nullptr;
};

class MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParamsDataView {
 public:
  MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParamsDataView() {}

  MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParamsDataView(
      internal::MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetRowsDataView(
      mojo::ArrayDataView<MediaHistoryPlaybackSessionRowDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadRows(UserType* output) {
    auto* pointer = data_->rows.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::media_history::mojom::MediaHistoryPlaybackSessionRowDataView>>(
        pointer, output, context_);
  }
 private:
  internal::MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};




inline void MediaHistoryStore_GetMediaHistoryStats_ResponseParamsDataView::GetStatsDataView(
    MediaHistoryStatsDataView* output) {
  auto pointer = data_->stats.Get();
  *output = MediaHistoryStatsDataView(pointer, context_);
}




inline void MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParamsDataView::GetRowsDataView(
    mojo::ArrayDataView<MediaHistoryOriginRowDataView>* output) {
  auto pointer = data_->rows.Get();
  *output = mojo::ArrayDataView<MediaHistoryOriginRowDataView>(pointer, context_);
}




inline void MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParamsDataView::GetRowsDataView(
    mojo::ArrayDataView<MediaHistoryPlaybackRowDataView>* output) {
  auto pointer = data_->rows.Get();
  *output = mojo::ArrayDataView<MediaHistoryPlaybackRowDataView>(pointer, context_);
}




inline void MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParamsDataView::GetRowsDataView(
    mojo::ArrayDataView<MediaHistoryPlaybackSessionRowDataView>* output) {
  auto pointer = data_->rows.Get();
  *output = mojo::ArrayDataView<MediaHistoryPlaybackSessionRowDataView>(pointer, context_);
}

}  // namespace mojom
}  // namespace media_history

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CHROME_BROWSER_MEDIA_HISTORY_MEDIA_HISTORY_STORE_MOJOM_PARAMS_DATA_H_
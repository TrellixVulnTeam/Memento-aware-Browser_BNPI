// chrome/browser/media/history/media_history_store.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_MEDIA_HISTORY_MEDIA_HISTORY_STORE_MOJOM_SHARED_H_
#define CHROME_BROWSER_MEDIA_HISTORY_MEDIA_HISTORY_STORE_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "chrome/browser/media/history/media_history_store.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "services/media_session/public/mojom/media_session.mojom-shared.h"
#include "url/mojom/origin.mojom-shared.h"
#include "url/mojom/url.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace media_history {
namespace mojom {
class MediaHistoryStatsDataView;

class MediaHistoryOriginRowDataView;

class MediaHistoryPlaybackRowDataView;

class MediaHistoryPlaybackSessionRowDataView;



}  // namespace mojom
}  // namespace media_history

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::media_history::mojom::MediaHistoryStatsDataView> {
  using Data = ::media_history::mojom::internal::MediaHistoryStats_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::media_history::mojom::MediaHistoryOriginRowDataView> {
  using Data = ::media_history::mojom::internal::MediaHistoryOriginRow_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::media_history::mojom::MediaHistoryPlaybackRowDataView> {
  using Data = ::media_history::mojom::internal::MediaHistoryPlaybackRow_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::media_history::mojom::MediaHistoryPlaybackSessionRowDataView> {
  using Data = ::media_history::mojom::internal::MediaHistoryPlaybackSessionRow_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace media_history {
namespace mojom {
// Interface base classes. They are used for type safety check.
class MediaHistoryStoreInterfaceBase {};

using MediaHistoryStorePtrDataView =
    mojo::InterfacePtrDataView<MediaHistoryStoreInterfaceBase>;
using MediaHistoryStoreRequestDataView =
    mojo::InterfaceRequestDataView<MediaHistoryStoreInterfaceBase>;
using MediaHistoryStoreAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<MediaHistoryStoreInterfaceBase>;
using MediaHistoryStoreAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<MediaHistoryStoreInterfaceBase>;
class MediaHistoryStatsDataView {
 public:
  MediaHistoryStatsDataView() {}

  MediaHistoryStatsDataView(
      internal::MediaHistoryStats_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetTableRowCountsDataView(
      mojo::MapDataView<mojo::StringDataView, int32_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTableRowCounts(UserType* output) {
    auto* pointer = data_->table_row_counts.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<mojo::StringDataView, int32_t>>(
        pointer, output, context_);
  }
 private:
  internal::MediaHistoryStats_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class MediaHistoryOriginRowDataView {
 public:
  MediaHistoryOriginRowDataView() {}

  MediaHistoryOriginRowDataView(
      internal::MediaHistoryOriginRow_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadOrigin(UserType* output) {
    auto* pointer = data_->origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, context_);
  }
  inline void GetCachedAudioVideoWatchtimeDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadCachedAudioVideoWatchtime(UserType* output) {
    auto* pointer = data_->cached_audio_video_watchtime.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, context_);
  }
  inline void GetActualAudioVideoWatchtimeDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadActualAudioVideoWatchtime(UserType* output) {
    auto* pointer = data_->actual_audio_video_watchtime.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, context_);
  }
  double last_updated_time() const {
    return data_->last_updated_time;
  }
 private:
  internal::MediaHistoryOriginRow_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class MediaHistoryPlaybackRowDataView {
 public:
  MediaHistoryPlaybackRowDataView() {}

  MediaHistoryPlaybackRowDataView(
      internal::MediaHistoryPlaybackRow_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUrl(UserType* output) {
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  bool has_audio() const {
    return data_->has_audio;
  }
  bool has_video() const {
    return data_->has_video;
  }
  inline void GetWatchtimeDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadWatchtime(UserType* output) {
    auto* pointer = data_->watchtime.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, context_);
  }
  double last_updated_time() const {
    return data_->last_updated_time;
  }
 private:
  internal::MediaHistoryPlaybackRow_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class MediaHistoryPlaybackSessionRowDataView {
 public:
  MediaHistoryPlaybackSessionRowDataView() {}

  MediaHistoryPlaybackSessionRowDataView(
      internal::MediaHistoryPlaybackSessionRow_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int64_t id() const {
    return data_->id;
  }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUrl(UserType* output) {
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  inline void GetDurationDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDuration(UserType* output) {
    auto* pointer = data_->duration.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, context_);
  }
  inline void GetPositionDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPosition(UserType* output) {
    auto* pointer = data_->position.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, context_);
  }
  inline void GetMetadataDataView(
      ::media_session::mojom::MediaMetadataDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadMetadata(UserType* output) {
    auto* pointer = data_->metadata.Get();
    return mojo::internal::Deserialize<::media_session::mojom::MediaMetadataDataView>(
        pointer, output, context_);
  }
  inline void GetArtworkDataView(
      mojo::ArrayDataView<::media_session::mojom::MediaImageDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadArtwork(UserType* output) {
    auto* pointer = data_->artwork.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::media_session::mojom::MediaImageDataView>>(
        pointer, output, context_);
  }
  double last_updated_time() const {
    return data_->last_updated_time;
  }
 private:
  internal::MediaHistoryPlaybackSessionRow_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};



}  // namespace mojom
}  // namespace media_history

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::media_history::mojom::MediaHistoryStatsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::media_history::mojom::MediaHistoryStatsDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::media_history::mojom::internal::MediaHistoryStats_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::table_row_counts(input)) in_table_row_counts = Traits::table_row_counts(input);
    typename decltype((*output)->table_row_counts)::BaseType::BufferWriter
        table_row_counts_writer;
    const mojo::internal::ContainerValidateParams table_row_counts_validate_params(
        new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)), new mojo::internal::ContainerValidateParams(0, false, nullptr));
    mojo::internal::Serialize<mojo::MapDataView<mojo::StringDataView, int32_t>>(
        in_table_row_counts, buffer, &table_row_counts_writer, &table_row_counts_validate_params,
        context);
    (*output)->table_row_counts.Set(
        table_row_counts_writer.is_null() ? nullptr : table_row_counts_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->table_row_counts.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null table_row_counts in MediaHistoryStats struct");
  }

  static bool Deserialize(::media_history::mojom::internal::MediaHistoryStats_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::media_history::mojom::MediaHistoryStatsDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::media_history::mojom::MediaHistoryOriginRowDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::media_history::mojom::MediaHistoryOriginRowDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::media_history::mojom::internal::MediaHistoryOriginRow_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::origin(input)) in_origin = Traits::origin(input);
    typename decltype((*output)->origin)::BaseType::BufferWriter
        origin_writer;
    mojo::internal::Serialize<::url::mojom::OriginDataView>(
        in_origin, buffer, &origin_writer, context);
    (*output)->origin.Set(
        origin_writer.is_null() ? nullptr : origin_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->origin.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null origin in MediaHistoryOriginRow struct");
    decltype(Traits::cached_audio_video_watchtime(input)) in_cached_audio_video_watchtime = Traits::cached_audio_video_watchtime(input);
    typename decltype((*output)->cached_audio_video_watchtime)::BaseType::BufferWriter
        cached_audio_video_watchtime_writer;
    mojo::internal::Serialize<::mojo_base::mojom::TimeDeltaDataView>(
        in_cached_audio_video_watchtime, buffer, &cached_audio_video_watchtime_writer, context);
    (*output)->cached_audio_video_watchtime.Set(
        cached_audio_video_watchtime_writer.is_null() ? nullptr : cached_audio_video_watchtime_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->cached_audio_video_watchtime.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null cached_audio_video_watchtime in MediaHistoryOriginRow struct");
    decltype(Traits::actual_audio_video_watchtime(input)) in_actual_audio_video_watchtime = Traits::actual_audio_video_watchtime(input);
    typename decltype((*output)->actual_audio_video_watchtime)::BaseType::BufferWriter
        actual_audio_video_watchtime_writer;
    mojo::internal::Serialize<::mojo_base::mojom::TimeDeltaDataView>(
        in_actual_audio_video_watchtime, buffer, &actual_audio_video_watchtime_writer, context);
    (*output)->actual_audio_video_watchtime.Set(
        actual_audio_video_watchtime_writer.is_null() ? nullptr : actual_audio_video_watchtime_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->actual_audio_video_watchtime.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null actual_audio_video_watchtime in MediaHistoryOriginRow struct");
    (*output)->last_updated_time = Traits::last_updated_time(input);
  }

  static bool Deserialize(::media_history::mojom::internal::MediaHistoryOriginRow_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::media_history::mojom::MediaHistoryOriginRowDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::media_history::mojom::MediaHistoryPlaybackRowDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::media_history::mojom::MediaHistoryPlaybackRowDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::media_history::mojom::internal::MediaHistoryPlaybackRow_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::url(input)) in_url = Traits::url(input);
    typename decltype((*output)->url)::BaseType::BufferWriter
        url_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_url, buffer, &url_writer, context);
    (*output)->url.Set(
        url_writer.is_null() ? nullptr : url_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null url in MediaHistoryPlaybackRow struct");
    (*output)->has_audio = Traits::has_audio(input);
    (*output)->has_video = Traits::has_video(input);
    decltype(Traits::watchtime(input)) in_watchtime = Traits::watchtime(input);
    typename decltype((*output)->watchtime)::BaseType::BufferWriter
        watchtime_writer;
    mojo::internal::Serialize<::mojo_base::mojom::TimeDeltaDataView>(
        in_watchtime, buffer, &watchtime_writer, context);
    (*output)->watchtime.Set(
        watchtime_writer.is_null() ? nullptr : watchtime_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->watchtime.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null watchtime in MediaHistoryPlaybackRow struct");
    (*output)->last_updated_time = Traits::last_updated_time(input);
  }

  static bool Deserialize(::media_history::mojom::internal::MediaHistoryPlaybackRow_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::media_history::mojom::MediaHistoryPlaybackRowDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::media_history::mojom::MediaHistoryPlaybackSessionRowDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::media_history::mojom::MediaHistoryPlaybackSessionRowDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::media_history::mojom::internal::MediaHistoryPlaybackSessionRow_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->id = Traits::id(input);
    decltype(Traits::url(input)) in_url = Traits::url(input);
    typename decltype((*output)->url)::BaseType::BufferWriter
        url_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_url, buffer, &url_writer, context);
    (*output)->url.Set(
        url_writer.is_null() ? nullptr : url_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null url in MediaHistoryPlaybackSessionRow struct");
    decltype(Traits::duration(input)) in_duration = Traits::duration(input);
    typename decltype((*output)->duration)::BaseType::BufferWriter
        duration_writer;
    mojo::internal::Serialize<::mojo_base::mojom::TimeDeltaDataView>(
        in_duration, buffer, &duration_writer, context);
    (*output)->duration.Set(
        duration_writer.is_null() ? nullptr : duration_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->duration.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null duration in MediaHistoryPlaybackSessionRow struct");
    decltype(Traits::position(input)) in_position = Traits::position(input);
    typename decltype((*output)->position)::BaseType::BufferWriter
        position_writer;
    mojo::internal::Serialize<::mojo_base::mojom::TimeDeltaDataView>(
        in_position, buffer, &position_writer, context);
    (*output)->position.Set(
        position_writer.is_null() ? nullptr : position_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->position.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null position in MediaHistoryPlaybackSessionRow struct");
    decltype(Traits::metadata(input)) in_metadata = Traits::metadata(input);
    typename decltype((*output)->metadata)::BaseType::BufferWriter
        metadata_writer;
    mojo::internal::Serialize<::media_session::mojom::MediaMetadataDataView>(
        in_metadata, buffer, &metadata_writer, context);
    (*output)->metadata.Set(
        metadata_writer.is_null() ? nullptr : metadata_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->metadata.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null metadata in MediaHistoryPlaybackSessionRow struct");
    decltype(Traits::artwork(input)) in_artwork = Traits::artwork(input);
    typename decltype((*output)->artwork)::BaseType::BufferWriter
        artwork_writer;
    const mojo::internal::ContainerValidateParams artwork_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::media_session::mojom::MediaImageDataView>>(
        in_artwork, buffer, &artwork_writer, &artwork_validate_params,
        context);
    (*output)->artwork.Set(
        artwork_writer.is_null() ? nullptr : artwork_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->artwork.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null artwork in MediaHistoryPlaybackSessionRow struct");
    (*output)->last_updated_time = Traits::last_updated_time(input);
  }

  static bool Deserialize(::media_history::mojom::internal::MediaHistoryPlaybackSessionRow_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::media_history::mojom::MediaHistoryPlaybackSessionRowDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace media_history {
namespace mojom {

inline void MediaHistoryStatsDataView::GetTableRowCountsDataView(
    mojo::MapDataView<mojo::StringDataView, int32_t>* output) {
  auto pointer = data_->table_row_counts.Get();
  *output = mojo::MapDataView<mojo::StringDataView, int32_t>(pointer, context_);
}


inline void MediaHistoryOriginRowDataView::GetOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, context_);
}
inline void MediaHistoryOriginRowDataView::GetCachedAudioVideoWatchtimeDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->cached_audio_video_watchtime.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, context_);
}
inline void MediaHistoryOriginRowDataView::GetActualAudioVideoWatchtimeDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->actual_audio_video_watchtime.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, context_);
}


inline void MediaHistoryPlaybackRowDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void MediaHistoryPlaybackRowDataView::GetWatchtimeDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->watchtime.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, context_);
}


inline void MediaHistoryPlaybackSessionRowDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void MediaHistoryPlaybackSessionRowDataView::GetDurationDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->duration.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, context_);
}
inline void MediaHistoryPlaybackSessionRowDataView::GetPositionDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->position.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, context_);
}
inline void MediaHistoryPlaybackSessionRowDataView::GetMetadataDataView(
    ::media_session::mojom::MediaMetadataDataView* output) {
  auto pointer = data_->metadata.Get();
  *output = ::media_session::mojom::MediaMetadataDataView(pointer, context_);
}
inline void MediaHistoryPlaybackSessionRowDataView::GetArtworkDataView(
    mojo::ArrayDataView<::media_session::mojom::MediaImageDataView>* output) {
  auto pointer = data_->artwork.Get();
  *output = mojo::ArrayDataView<::media_session::mojom::MediaImageDataView>(pointer, context_);
}



}  // namespace mojom
}  // namespace media_history

#endif  // CHROME_BROWSER_MEDIA_HISTORY_MEDIA_HISTORY_STORE_MOJOM_SHARED_H_
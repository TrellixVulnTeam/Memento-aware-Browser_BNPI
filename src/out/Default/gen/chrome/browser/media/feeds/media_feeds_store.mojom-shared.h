// chrome/browser/media/feeds/media_feeds_store.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_MEDIA_FEEDS_MEDIA_FEEDS_STORE_MOJOM_SHARED_H_
#define CHROME_BROWSER_MEDIA_FEEDS_MEDIA_FEEDS_STORE_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "chrome/browser/media/feeds/media_feeds_store.mojom-shared-internal.h"
#include "services/media_session/public/mojom/media_session.mojom-shared.h"
#include "mojo/public/mojom/base/string16.mojom-shared.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "url/mojom/origin.mojom-shared.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared.h"
#include "url/mojom/url.mojom-shared.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace media_feeds {
namespace mojom {
class MediaFeedDataView;

class UserIdentifierDataView;

class ContentRatingDataView;

class AuthorDataView;

class IdentifierDataView;

class ActionDataView;

class PlayNextCandidateDataView;

class TVEpisodeDataView;

class LiveDetailsDataView;

class MediaImageDataView;

class MediaFeedItemDataView;

class DebugInformationDataView;



}  // namespace mojom
}  // namespace media_feeds

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::media_feeds::mojom::MediaFeedDataView> {
  using Data = ::media_feeds::mojom::internal::MediaFeed_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::media_feeds::mojom::UserIdentifierDataView> {
  using Data = ::media_feeds::mojom::internal::UserIdentifier_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::media_feeds::mojom::ContentRatingDataView> {
  using Data = ::media_feeds::mojom::internal::ContentRating_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::media_feeds::mojom::AuthorDataView> {
  using Data = ::media_feeds::mojom::internal::Author_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::media_feeds::mojom::IdentifierDataView> {
  using Data = ::media_feeds::mojom::internal::Identifier_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::media_feeds::mojom::ActionDataView> {
  using Data = ::media_feeds::mojom::internal::Action_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::media_feeds::mojom::PlayNextCandidateDataView> {
  using Data = ::media_feeds::mojom::internal::PlayNextCandidate_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::media_feeds::mojom::TVEpisodeDataView> {
  using Data = ::media_feeds::mojom::internal::TVEpisode_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::media_feeds::mojom::LiveDetailsDataView> {
  using Data = ::media_feeds::mojom::internal::LiveDetails_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::media_feeds::mojom::MediaImageDataView> {
  using Data = ::media_feeds::mojom::internal::MediaImage_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::media_feeds::mojom::MediaFeedItemDataView> {
  using Data = ::media_feeds::mojom::internal::MediaFeedItem_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::media_feeds::mojom::DebugInformationDataView> {
  using Data = ::media_feeds::mojom::internal::DebugInformation_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace media_feeds {
namespace mojom {


enum class FetchResult : int32_t {
  
  kNone = 0,
  
  kSuccess = 1,
  
  kFailedBackendError = 2,
  
  kFailedNetworkError = 3,
  
  kInvalidFeed = 4,
  
  kFailedDueToResetWhileInflight = 5,
  kMinValue = 0,
  kMaxValue = 5,
};

 std::ostream& operator<<(std::ostream& os, FetchResult value);
inline bool IsKnownEnumValue(FetchResult value) {
  return internal::FetchResult_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class ResetReason : int32_t {
  
  kNone = 0,
  
  kCookies = 1,
  
  kVisit = 2,
  
  kCache = 3,
  kMinValue = 0,
  kMaxValue = 3,
};

 std::ostream& operator<<(std::ostream& os, ResetReason value);
inline bool IsKnownEnumValue(ResetReason value) {
  return internal::ResetReason_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class FeedUserStatus : int32_t {
  
  kAuto = 0,
  
  kDisabled = 1,
  kMinValue = 0,
  kMaxValue = 1,
};

 std::ostream& operator<<(std::ostream& os, FeedUserStatus value);
inline bool IsKnownEnumValue(FeedUserStatus value) {
  return internal::FeedUserStatus_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class MediaFeedItemType : int32_t {
  
  kVideo = 1,
  
  kTVSeries = 2,
  
  kMovie = 4,
  kMinValue = 1,
  kMaxValue = 4,
};

 std::ostream& operator<<(std::ostream& os, MediaFeedItemType value);
inline bool IsKnownEnumValue(MediaFeedItemType value) {
  return internal::MediaFeedItemType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class MediaFeedItemActionStatus : int32_t {
  
  kUnknown = 0,
  
  kActive = 1,
  
  kPotential = 2,
  
  kCompleted = 3,
  kMinValue = 0,
  kMaxValue = 3,
};

 std::ostream& operator<<(std::ostream& os, MediaFeedItemActionStatus value);
inline bool IsKnownEnumValue(MediaFeedItemActionStatus value) {
  return internal::MediaFeedItemActionStatus_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class InteractionCounterType : int32_t {
  
  kWatch = 0,
  
  kLike = 1,
  
  kDislike = 2,
  kMinValue = 0,
  kMaxValue = 2,
};

 std::ostream& operator<<(std::ostream& os, InteractionCounterType value);
inline bool IsKnownEnumValue(InteractionCounterType value) {
  return internal::InteractionCounterType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class SafeSearchResult : int32_t {
  
  kUnknown = 0,
  
  kSafe = 1,
  
  kUnsafe = 2,
  kMinValue = 0,
  kMaxValue = 2,
};

 std::ostream& operator<<(std::ostream& os, SafeSearchResult value);
inline bool IsKnownEnumValue(SafeSearchResult value) {
  return internal::SafeSearchResult_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class ContentAttribute : int32_t {
  
  kUnknown = 0,
  
  kIconic = 1,
  
  kSceneStill = 2,
  
  kPoster = 3,
  
  kBackground = 4,
  
  kForDarkBackground = 5,
  
  kForLightBackground = 6,
  
  kCentered = 7,
  
  kRightCentered = 8,
  
  kLeftCentered = 9,
  
  kHasTransparentBackground = 10,
  
  kHasTitle = 11,
  
  kNoTitle = 12,
  kMinValue = 0,
  kMaxValue = 12,
};

 std::ostream& operator<<(std::ostream& os, ContentAttribute value);
inline bool IsKnownEnumValue(ContentAttribute value) {
  return internal::ContentAttribute_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class IsFamilyFriendly : int32_t {
  
  kUnknown = 0,
  
  kYes = 1,
  
  kNo = 2,
  kMinValue = 0,
  kMaxValue = 2,
};

 std::ostream& operator<<(std::ostream& os, IsFamilyFriendly value);
inline bool IsKnownEnumValue(IsFamilyFriendly value) {
  return internal::IsFamilyFriendly_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class Identifier_Type : int32_t {
  
  kTMSRootId = 0,
  
  kTMSId = 1,
  
  kPartnerId = 2,
  kMinValue = 0,
  kMaxValue = 2,
};

 std::ostream& operator<<(std::ostream& os, Identifier_Type value);
inline bool IsKnownEnumValue(Identifier_Type value) {
  return internal::Identifier_Type_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class MediaFeedsStoreInterfaceBase {};

using MediaFeedsStorePtrDataView =
    mojo::InterfacePtrDataView<MediaFeedsStoreInterfaceBase>;
using MediaFeedsStoreRequestDataView =
    mojo::InterfaceRequestDataView<MediaFeedsStoreInterfaceBase>;
using MediaFeedsStoreAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<MediaFeedsStoreInterfaceBase>;
using MediaFeedsStoreAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<MediaFeedsStoreInterfaceBase>;
class MediaFeedDataView {
 public:
  MediaFeedDataView() {}

  MediaFeedDataView(
      internal::MediaFeed_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int64_t id() const {
    return data_->id;
  }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUrl(UserType* output) {
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  inline void GetLastDiscoveryTimeDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadLastDiscoveryTime(UserType* output) {
    auto* pointer = data_->last_discovery_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, context_);
  }
  inline void GetLastFetchTimeDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadLastFetchTime(UserType* output) {
    auto* pointer = data_->last_fetch_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, context_);
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUserStatus(UserType* output) const {
    auto data_value = data_->user_status;
    return mojo::internal::Deserialize<::media_feeds::mojom::FeedUserStatus>(
        data_value, output);
  }

  FeedUserStatus user_status() const {
    return static_cast<FeedUserStatus>(data_->user_status);
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadLastFetchResult(UserType* output) const {
    auto data_value = data_->last_fetch_result;
    return mojo::internal::Deserialize<::media_feeds::mojom::FetchResult>(
        data_value, output);
  }

  FetchResult last_fetch_result() const {
    return static_cast<FetchResult>(data_->last_fetch_result);
  }
  int64_t fetch_failed_count() const {
    return data_->fetch_failed_count;
  }
  inline void GetLastFetchTimeNotCacheHitDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadLastFetchTimeNotCacheHit(UserType* output) {
    auto* pointer = data_->last_fetch_time_not_cache_hit.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, context_);
  }
  int64_t last_fetch_item_count() const {
    return data_->last_fetch_item_count;
  }
  int64_t last_fetch_play_next_count() const {
    return data_->last_fetch_play_next_count;
  }
  int64_t last_fetch_content_types() const {
    return data_->last_fetch_content_types;
  }
  inline void GetLogosDataView(
      mojo::ArrayDataView<MediaImageDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadLogos(UserType* output) {
    auto* pointer = data_->logos.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::media_feeds::mojom::MediaImageDataView>>(
        pointer, output, context_);
  }
  inline void GetDisplayNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDisplayName(UserType* output) {
    auto* pointer = data_->display_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  double origin_audio_video_watchtime_percentile() const {
    return data_->origin_audio_video_watchtime_percentile;
  }
  inline void GetLastDisplayTimeDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadLastDisplayTime(UserType* output) {
    auto* pointer = data_->last_display_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, context_);
  }
  int64_t last_fetch_safe_item_count() const {
    return data_->last_fetch_safe_item_count;
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadResetReason(UserType* output) const {
    auto data_value = data_->reset_reason;
    return mojo::internal::Deserialize<::media_feeds::mojom::ResetReason>(
        data_value, output);
  }

  ResetReason reset_reason() const {
    return static_cast<ResetReason>(data_->reset_reason);
  }
  inline void GetResetTokenDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadResetToken(UserType* output) {
    auto* pointer = data_->reset_token.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, context_);
  }
  inline void GetUserIdentifierDataView(
      UserIdentifierDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUserIdentifier(UserType* output) {
    auto* pointer = data_->user_identifier.Get();
    return mojo::internal::Deserialize<::media_feeds::mojom::UserIdentifierDataView>(
        pointer, output, context_);
  }
  inline void GetCookieNameFilterDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadCookieNameFilter(UserType* output) {
    auto* pointer = data_->cookie_name_filter.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSafeSearchResult(UserType* output) const {
    auto data_value = data_->safe_search_result;
    return mojo::internal::Deserialize<::media_feeds::mojom::SafeSearchResult>(
        data_value, output);
  }

  SafeSearchResult safe_search_result() const {
    return static_cast<SafeSearchResult>(data_->safe_search_result);
  }
 private:
  internal::MediaFeed_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class UserIdentifierDataView {
 public:
  UserIdentifierDataView() {}

  UserIdentifierDataView(
      internal::UserIdentifier_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadName(UserType* output) {
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetEmailDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadEmail(UserType* output) {
    auto* pointer = data_->email.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetImageDataView(
      MediaImageDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadImage(UserType* output) {
    auto* pointer = data_->image.Get();
    return mojo::internal::Deserialize<::media_feeds::mojom::MediaImageDataView>(
        pointer, output, context_);
  }
 private:
  internal::UserIdentifier_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class ContentRatingDataView {
 public:
  ContentRatingDataView() {}

  ContentRatingDataView(
      internal::ContentRating_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetAgencyDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAgency(UserType* output) {
    auto* pointer = data_->agency.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetValueDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadValue(UserType* output) {
    auto* pointer = data_->value.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::ContentRating_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class AuthorDataView {
 public:
  AuthorDataView() {}

  AuthorDataView(
      internal::Author_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadName(UserType* output) {
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUrl(UserType* output) {
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
 private:
  internal::Author_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class IdentifierDataView {
 public:
  IdentifierDataView() {}

  IdentifierDataView(
      internal::Identifier_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadType(UserType* output) const {
    auto data_value = data_->type;
    return mojo::internal::Deserialize<::media_feeds::mojom::Identifier_Type>(
        data_value, output);
  }

  Identifier_Type type() const {
    return static_cast<Identifier_Type>(data_->type);
  }
  inline void GetValueDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadValue(UserType* output) {
    auto* pointer = data_->value.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::Identifier_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class ActionDataView {
 public:
  ActionDataView() {}

  ActionDataView(
      internal::Action_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUrl(UserType* output) {
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  inline void GetStartTimeDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadStartTime(UserType* output) {
    auto* pointer = data_->start_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, context_);
  }
 private:
  internal::Action_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PlayNextCandidateDataView {
 public:
  PlayNextCandidateDataView() {}

  PlayNextCandidateDataView(
      internal::PlayNextCandidate_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadName(UserType* output) {
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  int64_t season_number() const {
    return data_->season_number;
  }
  int64_t episode_number() const {
    return data_->episode_number;
  }
  inline void GetActionDataView(
      ActionDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAction(UserType* output) {
    auto* pointer = data_->action.Get();
    return mojo::internal::Deserialize<::media_feeds::mojom::ActionDataView>(
        pointer, output, context_);
  }
  inline void GetDurationDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDuration(UserType* output) {
    auto* pointer = data_->duration.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, context_);
  }
  inline void GetIdentifiersDataView(
      mojo::ArrayDataView<IdentifierDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadIdentifiers(UserType* output) {
    auto* pointer = data_->identifiers.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::media_feeds::mojom::IdentifierDataView>>(
        pointer, output, context_);
  }
  inline void GetImagesDataView(
      mojo::ArrayDataView<MediaImageDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadImages(UserType* output) {
    auto* pointer = data_->images.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::media_feeds::mojom::MediaImageDataView>>(
        pointer, output, context_);
  }
 private:
  internal::PlayNextCandidate_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class TVEpisodeDataView {
 public:
  TVEpisodeDataView() {}

  TVEpisodeDataView(
      internal::TVEpisode_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadName(UserType* output) {
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  int64_t episode_number() const {
    return data_->episode_number;
  }
  int64_t season_number() const {
    return data_->season_number;
  }
  inline void GetDurationDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDuration(UserType* output) {
    auto* pointer = data_->duration.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, context_);
  }
  inline void GetIdentifiersDataView(
      mojo::ArrayDataView<IdentifierDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadIdentifiers(UserType* output) {
    auto* pointer = data_->identifiers.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::media_feeds::mojom::IdentifierDataView>>(
        pointer, output, context_);
  }
  inline void GetLiveDataView(
      LiveDetailsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadLive(UserType* output) {
    auto* pointer = data_->live.Get();
    return mojo::internal::Deserialize<::media_feeds::mojom::LiveDetailsDataView>(
        pointer, output, context_);
  }
  inline void GetImagesDataView(
      mojo::ArrayDataView<MediaImageDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadImages(UserType* output) {
    auto* pointer = data_->images.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::media_feeds::mojom::MediaImageDataView>>(
        pointer, output, context_);
  }
 private:
  internal::TVEpisode_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class LiveDetailsDataView {
 public:
  LiveDetailsDataView() {}

  LiveDetailsDataView(
      internal::LiveDetails_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetStartTimeDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadStartTime(UserType* output) {
    auto* pointer = data_->start_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, context_);
  }
  inline void GetEndTimeDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadEndTime(UserType* output) {
    auto* pointer = data_->end_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, context_);
  }
 private:
  internal::LiveDetails_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class MediaImageDataView {
 public:
  MediaImageDataView() {}

  MediaImageDataView(
      internal::MediaImage_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetSrcDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSrc(UserType* output) {
    auto* pointer = data_->src.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  inline void GetSizeDataView(
      ::gfx::mojom::SizeDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSize(UserType* output) {
    auto* pointer = data_->size.Get();
    return mojo::internal::Deserialize<::gfx::mojom::SizeDataView>(
        pointer, output, context_);
  }
  inline void GetContentAttributesDataView(
      mojo::ArrayDataView<ContentAttribute>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadContentAttributes(UserType* output) {
    auto* pointer = data_->content_attributes.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::media_feeds::mojom::ContentAttribute>>(
        pointer, output, context_);
  }
 private:
  internal::MediaImage_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class MediaFeedItemDataView {
 public:
  MediaFeedItemDataView() {}

  MediaFeedItemDataView(
      internal::MediaFeedItem_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int64_t id() const {
    return data_->id;
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadType(UserType* output) const {
    auto data_value = data_->type;
    return mojo::internal::Deserialize<::media_feeds::mojom::MediaFeedItemType>(
        data_value, output);
  }

  MediaFeedItemType type() const {
    return static_cast<MediaFeedItemType>(data_->type);
  }
  inline void GetNameDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadName(UserType* output) {
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
  inline void GetAuthorDataView(
      AuthorDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAuthor(UserType* output) {
    auto* pointer = data_->author.Get();
    return mojo::internal::Deserialize<::media_feeds::mojom::AuthorDataView>(
        pointer, output, context_);
  }
  inline void GetDatePublishedDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDatePublished(UserType* output) {
    auto* pointer = data_->date_published.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, context_);
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadIsFamilyFriendly(UserType* output) const {
    auto data_value = data_->is_family_friendly;
    return mojo::internal::Deserialize<::media_feeds::mojom::IsFamilyFriendly>(
        data_value, output);
  }

  IsFamilyFriendly is_family_friendly() const {
    return static_cast<IsFamilyFriendly>(data_->is_family_friendly);
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadActionStatus(UserType* output) const {
    auto data_value = data_->action_status;
    return mojo::internal::Deserialize<::media_feeds::mojom::MediaFeedItemActionStatus>(
        data_value, output);
  }

  MediaFeedItemActionStatus action_status() const {
    return static_cast<MediaFeedItemActionStatus>(data_->action_status);
  }
  inline void GetActionDataView(
      ActionDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAction(UserType* output) {
    auto* pointer = data_->action.Get();
    return mojo::internal::Deserialize<::media_feeds::mojom::ActionDataView>(
        pointer, output, context_);
  }
  inline void GetInteractionCountersDataView(
      mojo::MapDataView<InteractionCounterType, uint64_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadInteractionCounters(UserType* output) {
    auto* pointer = data_->interaction_counters.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<::media_feeds::mojom::InteractionCounterType, uint64_t>>(
        pointer, output, context_);
  }
  inline void GetContentRatingsDataView(
      mojo::ArrayDataView<ContentRatingDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadContentRatings(UserType* output) {
    auto* pointer = data_->content_ratings.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::media_feeds::mojom::ContentRatingDataView>>(
        pointer, output, context_);
  }
  inline void GetGenreDataView(
      mojo::ArrayDataView<mojo::StringDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadGenre(UserType* output) {
    auto* pointer = data_->genre.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<mojo::StringDataView>>(
        pointer, output, context_);
  }
  inline void GetDurationDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDuration(UserType* output) {
    auto* pointer = data_->duration.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, context_);
  }
  inline void GetLiveDataView(
      LiveDetailsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadLive(UserType* output) {
    auto* pointer = data_->live.Get();
    return mojo::internal::Deserialize<::media_feeds::mojom::LiveDetailsDataView>(
        pointer, output, context_);
  }
  inline void GetTvEpisodeDataView(
      TVEpisodeDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTvEpisode(UserType* output) {
    auto* pointer = data_->tv_episode.Get();
    return mojo::internal::Deserialize<::media_feeds::mojom::TVEpisodeDataView>(
        pointer, output, context_);
  }
  inline void GetPlayNextCandidateDataView(
      PlayNextCandidateDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPlayNextCandidate(UserType* output) {
    auto* pointer = data_->play_next_candidate.Get();
    return mojo::internal::Deserialize<::media_feeds::mojom::PlayNextCandidateDataView>(
        pointer, output, context_);
  }
  inline void GetIdentifiersDataView(
      mojo::ArrayDataView<IdentifierDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadIdentifiers(UserType* output) {
    auto* pointer = data_->identifiers.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::media_feeds::mojom::IdentifierDataView>>(
        pointer, output, context_);
  }
  uint64_t shown_count() const {
    return data_->shown_count;
  }
  bool clicked() const {
    return data_->clicked;
  }
  inline void GetImagesDataView(
      mojo::ArrayDataView<MediaImageDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadImages(UserType* output) {
    auto* pointer = data_->images.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::media_feeds::mojom::MediaImageDataView>>(
        pointer, output, context_);
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSafeSearchResult(UserType* output) const {
    auto data_value = data_->safe_search_result;
    return mojo::internal::Deserialize<::media_feeds::mojom::SafeSearchResult>(
        data_value, output);
  }

  SafeSearchResult safe_search_result() const {
    return static_cast<SafeSearchResult>(data_->safe_search_result);
  }
 private:
  internal::MediaFeedItem_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class DebugInformationDataView {
 public:
  DebugInformationDataView() {}

  DebugInformationDataView(
      internal::DebugInformation_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool safe_search_feature_enabled() const {
    return data_->safe_search_feature_enabled;
  }
  bool safe_search_pref_value() const {
    return data_->safe_search_pref_value;
  }
  bool background_fetching_feature_enabled() const {
    return data_->background_fetching_feature_enabled;
  }
  bool background_fetching_pref_value() const {
    return data_->background_fetching_pref_value;
  }
 private:
  internal::DebugInformation_Data* data_ = nullptr;
};



}  // namespace mojom
}  // namespace media_feeds

namespace std {

template <>
struct hash<::media_feeds::mojom::FetchResult>
    : public mojo::internal::EnumHashImpl<::media_feeds::mojom::FetchResult> {};

template <>
struct hash<::media_feeds::mojom::ResetReason>
    : public mojo::internal::EnumHashImpl<::media_feeds::mojom::ResetReason> {};

template <>
struct hash<::media_feeds::mojom::FeedUserStatus>
    : public mojo::internal::EnumHashImpl<::media_feeds::mojom::FeedUserStatus> {};

template <>
struct hash<::media_feeds::mojom::MediaFeedItemType>
    : public mojo::internal::EnumHashImpl<::media_feeds::mojom::MediaFeedItemType> {};

template <>
struct hash<::media_feeds::mojom::MediaFeedItemActionStatus>
    : public mojo::internal::EnumHashImpl<::media_feeds::mojom::MediaFeedItemActionStatus> {};

template <>
struct hash<::media_feeds::mojom::InteractionCounterType>
    : public mojo::internal::EnumHashImpl<::media_feeds::mojom::InteractionCounterType> {};

template <>
struct hash<::media_feeds::mojom::SafeSearchResult>
    : public mojo::internal::EnumHashImpl<::media_feeds::mojom::SafeSearchResult> {};

template <>
struct hash<::media_feeds::mojom::ContentAttribute>
    : public mojo::internal::EnumHashImpl<::media_feeds::mojom::ContentAttribute> {};

template <>
struct hash<::media_feeds::mojom::IsFamilyFriendly>
    : public mojo::internal::EnumHashImpl<::media_feeds::mojom::IsFamilyFriendly> {};

template <>
struct hash<::media_feeds::mojom::Identifier_Type>
    : public mojo::internal::EnumHashImpl<::media_feeds::mojom::Identifier_Type> {};

}  // namespace std

namespace mojo {


template <>
struct EnumTraits<::media_feeds::mojom::FetchResult, ::media_feeds::mojom::FetchResult> {
  static ::media_feeds::mojom::FetchResult ToMojom(::media_feeds::mojom::FetchResult input) { return input; }
  static bool FromMojom(::media_feeds::mojom::FetchResult input, ::media_feeds::mojom::FetchResult* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::media_feeds::mojom::FetchResult, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::media_feeds::mojom::FetchResult, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::media_feeds::mojom::FetchResult>(input), output);
  }
};

}  // namespace internal


template <>
struct EnumTraits<::media_feeds::mojom::ResetReason, ::media_feeds::mojom::ResetReason> {
  static ::media_feeds::mojom::ResetReason ToMojom(::media_feeds::mojom::ResetReason input) { return input; }
  static bool FromMojom(::media_feeds::mojom::ResetReason input, ::media_feeds::mojom::ResetReason* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::media_feeds::mojom::ResetReason, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::media_feeds::mojom::ResetReason, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::media_feeds::mojom::ResetReason>(input), output);
  }
};

}  // namespace internal


template <>
struct EnumTraits<::media_feeds::mojom::FeedUserStatus, ::media_feeds::mojom::FeedUserStatus> {
  static ::media_feeds::mojom::FeedUserStatus ToMojom(::media_feeds::mojom::FeedUserStatus input) { return input; }
  static bool FromMojom(::media_feeds::mojom::FeedUserStatus input, ::media_feeds::mojom::FeedUserStatus* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::media_feeds::mojom::FeedUserStatus, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::media_feeds::mojom::FeedUserStatus, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::media_feeds::mojom::FeedUserStatus>(input), output);
  }
};

}  // namespace internal


template <>
struct EnumTraits<::media_feeds::mojom::MediaFeedItemType, ::media_feeds::mojom::MediaFeedItemType> {
  static ::media_feeds::mojom::MediaFeedItemType ToMojom(::media_feeds::mojom::MediaFeedItemType input) { return input; }
  static bool FromMojom(::media_feeds::mojom::MediaFeedItemType input, ::media_feeds::mojom::MediaFeedItemType* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::media_feeds::mojom::MediaFeedItemType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::media_feeds::mojom::MediaFeedItemType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::media_feeds::mojom::MediaFeedItemType>(input), output);
  }
};

}  // namespace internal


template <>
struct EnumTraits<::media_feeds::mojom::MediaFeedItemActionStatus, ::media_feeds::mojom::MediaFeedItemActionStatus> {
  static ::media_feeds::mojom::MediaFeedItemActionStatus ToMojom(::media_feeds::mojom::MediaFeedItemActionStatus input) { return input; }
  static bool FromMojom(::media_feeds::mojom::MediaFeedItemActionStatus input, ::media_feeds::mojom::MediaFeedItemActionStatus* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::media_feeds::mojom::MediaFeedItemActionStatus, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::media_feeds::mojom::MediaFeedItemActionStatus, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::media_feeds::mojom::MediaFeedItemActionStatus>(input), output);
  }
};

}  // namespace internal


template <>
struct EnumTraits<::media_feeds::mojom::InteractionCounterType, ::media_feeds::mojom::InteractionCounterType> {
  static ::media_feeds::mojom::InteractionCounterType ToMojom(::media_feeds::mojom::InteractionCounterType input) { return input; }
  static bool FromMojom(::media_feeds::mojom::InteractionCounterType input, ::media_feeds::mojom::InteractionCounterType* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::media_feeds::mojom::InteractionCounterType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::media_feeds::mojom::InteractionCounterType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::media_feeds::mojom::InteractionCounterType>(input), output);
  }
};

}  // namespace internal


template <>
struct EnumTraits<::media_feeds::mojom::SafeSearchResult, ::media_feeds::mojom::SafeSearchResult> {
  static ::media_feeds::mojom::SafeSearchResult ToMojom(::media_feeds::mojom::SafeSearchResult input) { return input; }
  static bool FromMojom(::media_feeds::mojom::SafeSearchResult input, ::media_feeds::mojom::SafeSearchResult* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::media_feeds::mojom::SafeSearchResult, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::media_feeds::mojom::SafeSearchResult, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::media_feeds::mojom::SafeSearchResult>(input), output);
  }
};

}  // namespace internal


template <>
struct EnumTraits<::media_feeds::mojom::ContentAttribute, ::media_feeds::mojom::ContentAttribute> {
  static ::media_feeds::mojom::ContentAttribute ToMojom(::media_feeds::mojom::ContentAttribute input) { return input; }
  static bool FromMojom(::media_feeds::mojom::ContentAttribute input, ::media_feeds::mojom::ContentAttribute* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::media_feeds::mojom::ContentAttribute, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::media_feeds::mojom::ContentAttribute, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::media_feeds::mojom::ContentAttribute>(input), output);
  }
};

}  // namespace internal


template <>
struct EnumTraits<::media_feeds::mojom::IsFamilyFriendly, ::media_feeds::mojom::IsFamilyFriendly> {
  static ::media_feeds::mojom::IsFamilyFriendly ToMojom(::media_feeds::mojom::IsFamilyFriendly input) { return input; }
  static bool FromMojom(::media_feeds::mojom::IsFamilyFriendly input, ::media_feeds::mojom::IsFamilyFriendly* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::media_feeds::mojom::IsFamilyFriendly, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::media_feeds::mojom::IsFamilyFriendly, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::media_feeds::mojom::IsFamilyFriendly>(input), output);
  }
};

}  // namespace internal


template <>
struct EnumTraits<::media_feeds::mojom::Identifier_Type, ::media_feeds::mojom::Identifier_Type> {
  static ::media_feeds::mojom::Identifier_Type ToMojom(::media_feeds::mojom::Identifier_Type input) { return input; }
  static bool FromMojom(::media_feeds::mojom::Identifier_Type input, ::media_feeds::mojom::Identifier_Type* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::media_feeds::mojom::Identifier_Type, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::media_feeds::mojom::Identifier_Type, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::media_feeds::mojom::Identifier_Type>(input), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::media_feeds::mojom::MediaFeedDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::media_feeds::mojom::MediaFeedDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::media_feeds::mojom::internal::MediaFeed_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->id = Traits::id(input);
    decltype(Traits::url(input)) in_url = Traits::url(input);
    typename decltype((*output)->url)::BaseType::BufferWriter
        url_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_url, buffer, &url_writer, context);
    (*output)->url.Set(
        url_writer.is_null() ? nullptr : url_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null url in MediaFeed struct");
    decltype(Traits::last_discovery_time(input)) in_last_discovery_time = Traits::last_discovery_time(input);
    typename decltype((*output)->last_discovery_time)::BaseType::BufferWriter
        last_discovery_time_writer;
    mojo::internal::Serialize<::mojo_base::mojom::TimeDataView>(
        in_last_discovery_time, buffer, &last_discovery_time_writer, context);
    (*output)->last_discovery_time.Set(
        last_discovery_time_writer.is_null() ? nullptr : last_discovery_time_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->last_discovery_time.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null last_discovery_time in MediaFeed struct");
    decltype(Traits::last_fetch_time(input)) in_last_fetch_time = Traits::last_fetch_time(input);
    typename decltype((*output)->last_fetch_time)::BaseType::BufferWriter
        last_fetch_time_writer;
    mojo::internal::Serialize<::mojo_base::mojom::TimeDataView>(
        in_last_fetch_time, buffer, &last_fetch_time_writer, context);
    (*output)->last_fetch_time.Set(
        last_fetch_time_writer.is_null() ? nullptr : last_fetch_time_writer.data());
    mojo::internal::Serialize<::media_feeds::mojom::FeedUserStatus>(
        Traits::user_status(input), &(*output)->user_status);
    mojo::internal::Serialize<::media_feeds::mojom::FetchResult>(
        Traits::last_fetch_result(input), &(*output)->last_fetch_result);
    (*output)->fetch_failed_count = Traits::fetch_failed_count(input);
    decltype(Traits::last_fetch_time_not_cache_hit(input)) in_last_fetch_time_not_cache_hit = Traits::last_fetch_time_not_cache_hit(input);
    typename decltype((*output)->last_fetch_time_not_cache_hit)::BaseType::BufferWriter
        last_fetch_time_not_cache_hit_writer;
    mojo::internal::Serialize<::mojo_base::mojom::TimeDataView>(
        in_last_fetch_time_not_cache_hit, buffer, &last_fetch_time_not_cache_hit_writer, context);
    (*output)->last_fetch_time_not_cache_hit.Set(
        last_fetch_time_not_cache_hit_writer.is_null() ? nullptr : last_fetch_time_not_cache_hit_writer.data());
    (*output)->last_fetch_item_count = Traits::last_fetch_item_count(input);
    (*output)->last_fetch_play_next_count = Traits::last_fetch_play_next_count(input);
    (*output)->last_fetch_content_types = Traits::last_fetch_content_types(input);
    decltype(Traits::logos(input)) in_logos = Traits::logos(input);
    typename decltype((*output)->logos)::BaseType::BufferWriter
        logos_writer;
    const mojo::internal::ContainerValidateParams logos_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::media_feeds::mojom::MediaImageDataView>>(
        in_logos, buffer, &logos_writer, &logos_validate_params,
        context);
    (*output)->logos.Set(
        logos_writer.is_null() ? nullptr : logos_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->logos.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null logos in MediaFeed struct");
    decltype(Traits::display_name(input)) in_display_name = Traits::display_name(input);
    typename decltype((*output)->display_name)::BaseType::BufferWriter
        display_name_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_display_name, buffer, &display_name_writer, context);
    (*output)->display_name.Set(
        display_name_writer.is_null() ? nullptr : display_name_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->display_name.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null display_name in MediaFeed struct");
    (*output)->origin_audio_video_watchtime_percentile = Traits::origin_audio_video_watchtime_percentile(input);
    decltype(Traits::last_display_time(input)) in_last_display_time = Traits::last_display_time(input);
    typename decltype((*output)->last_display_time)::BaseType::BufferWriter
        last_display_time_writer;
    mojo::internal::Serialize<::mojo_base::mojom::TimeDataView>(
        in_last_display_time, buffer, &last_display_time_writer, context);
    (*output)->last_display_time.Set(
        last_display_time_writer.is_null() ? nullptr : last_display_time_writer.data());
    (*output)->last_fetch_safe_item_count = Traits::last_fetch_safe_item_count(input);
    mojo::internal::Serialize<::media_feeds::mojom::ResetReason>(
        Traits::reset_reason(input), &(*output)->reset_reason);
    decltype(Traits::reset_token(input)) in_reset_token = Traits::reset_token(input);
    typename decltype((*output)->reset_token)::BaseType::BufferWriter
        reset_token_writer;
    mojo::internal::Serialize<::mojo_base::mojom::UnguessableTokenDataView>(
        in_reset_token, buffer, &reset_token_writer, context);
    (*output)->reset_token.Set(
        reset_token_writer.is_null() ? nullptr : reset_token_writer.data());
    decltype(Traits::user_identifier(input)) in_user_identifier = Traits::user_identifier(input);
    typename decltype((*output)->user_identifier)::BaseType::BufferWriter
        user_identifier_writer;
    mojo::internal::Serialize<::media_feeds::mojom::UserIdentifierDataView>(
        in_user_identifier, buffer, &user_identifier_writer, context);
    (*output)->user_identifier.Set(
        user_identifier_writer.is_null() ? nullptr : user_identifier_writer.data());
    decltype(Traits::cookie_name_filter(input)) in_cookie_name_filter = Traits::cookie_name_filter(input);
    typename decltype((*output)->cookie_name_filter)::BaseType::BufferWriter
        cookie_name_filter_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_cookie_name_filter, buffer, &cookie_name_filter_writer, context);
    (*output)->cookie_name_filter.Set(
        cookie_name_filter_writer.is_null() ? nullptr : cookie_name_filter_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->cookie_name_filter.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null cookie_name_filter in MediaFeed struct");
    mojo::internal::Serialize<::media_feeds::mojom::SafeSearchResult>(
        Traits::safe_search_result(input), &(*output)->safe_search_result);
  }

  static bool Deserialize(::media_feeds::mojom::internal::MediaFeed_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::media_feeds::mojom::MediaFeedDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::media_feeds::mojom::UserIdentifierDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::media_feeds::mojom::UserIdentifierDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::media_feeds::mojom::internal::UserIdentifier_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::name(input)) in_name = Traits::name(input);
    typename decltype((*output)->name)::BaseType::BufferWriter
        name_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_name, buffer, &name_writer, context);
    (*output)->name.Set(
        name_writer.is_null() ? nullptr : name_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->name.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null name in UserIdentifier struct");
    decltype(Traits::email(input)) in_email = Traits::email(input);
    typename decltype((*output)->email)::BaseType::BufferWriter
        email_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_email, buffer, &email_writer, context);
    (*output)->email.Set(
        email_writer.is_null() ? nullptr : email_writer.data());
    decltype(Traits::image(input)) in_image = Traits::image(input);
    typename decltype((*output)->image)::BaseType::BufferWriter
        image_writer;
    mojo::internal::Serialize<::media_feeds::mojom::MediaImageDataView>(
        in_image, buffer, &image_writer, context);
    (*output)->image.Set(
        image_writer.is_null() ? nullptr : image_writer.data());
  }

  static bool Deserialize(::media_feeds::mojom::internal::UserIdentifier_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::media_feeds::mojom::UserIdentifierDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::media_feeds::mojom::ContentRatingDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::media_feeds::mojom::ContentRatingDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::media_feeds::mojom::internal::ContentRating_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::agency(input)) in_agency = Traits::agency(input);
    typename decltype((*output)->agency)::BaseType::BufferWriter
        agency_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_agency, buffer, &agency_writer, context);
    (*output)->agency.Set(
        agency_writer.is_null() ? nullptr : agency_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->agency.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null agency in ContentRating struct");
    decltype(Traits::value(input)) in_value = Traits::value(input);
    typename decltype((*output)->value)::BaseType::BufferWriter
        value_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_value, buffer, &value_writer, context);
    (*output)->value.Set(
        value_writer.is_null() ? nullptr : value_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->value.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null value in ContentRating struct");
  }

  static bool Deserialize(::media_feeds::mojom::internal::ContentRating_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::media_feeds::mojom::ContentRatingDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::media_feeds::mojom::AuthorDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::media_feeds::mojom::AuthorDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::media_feeds::mojom::internal::Author_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::name(input)) in_name = Traits::name(input);
    typename decltype((*output)->name)::BaseType::BufferWriter
        name_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_name, buffer, &name_writer, context);
    (*output)->name.Set(
        name_writer.is_null() ? nullptr : name_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->name.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null name in Author struct");
    decltype(Traits::url(input)) in_url = Traits::url(input);
    typename decltype((*output)->url)::BaseType::BufferWriter
        url_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_url, buffer, &url_writer, context);
    (*output)->url.Set(
        url_writer.is_null() ? nullptr : url_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null url in Author struct");
  }

  static bool Deserialize(::media_feeds::mojom::internal::Author_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::media_feeds::mojom::AuthorDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::media_feeds::mojom::IdentifierDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::media_feeds::mojom::IdentifierDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::media_feeds::mojom::internal::Identifier_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    mojo::internal::Serialize<::media_feeds::mojom::Identifier_Type>(
        Traits::type(input), &(*output)->type);
    decltype(Traits::value(input)) in_value = Traits::value(input);
    typename decltype((*output)->value)::BaseType::BufferWriter
        value_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_value, buffer, &value_writer, context);
    (*output)->value.Set(
        value_writer.is_null() ? nullptr : value_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->value.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null value in Identifier struct");
  }

  static bool Deserialize(::media_feeds::mojom::internal::Identifier_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::media_feeds::mojom::IdentifierDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::media_feeds::mojom::ActionDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::media_feeds::mojom::ActionDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::media_feeds::mojom::internal::Action_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::url(input)) in_url = Traits::url(input);
    typename decltype((*output)->url)::BaseType::BufferWriter
        url_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_url, buffer, &url_writer, context);
    (*output)->url.Set(
        url_writer.is_null() ? nullptr : url_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null url in Action struct");
    decltype(Traits::start_time(input)) in_start_time = Traits::start_time(input);
    typename decltype((*output)->start_time)::BaseType::BufferWriter
        start_time_writer;
    mojo::internal::Serialize<::mojo_base::mojom::TimeDeltaDataView>(
        in_start_time, buffer, &start_time_writer, context);
    (*output)->start_time.Set(
        start_time_writer.is_null() ? nullptr : start_time_writer.data());
  }

  static bool Deserialize(::media_feeds::mojom::internal::Action_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::media_feeds::mojom::ActionDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::media_feeds::mojom::PlayNextCandidateDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::media_feeds::mojom::PlayNextCandidateDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::media_feeds::mojom::internal::PlayNextCandidate_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::name(input)) in_name = Traits::name(input);
    typename decltype((*output)->name)::BaseType::BufferWriter
        name_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_name, buffer, &name_writer, context);
    (*output)->name.Set(
        name_writer.is_null() ? nullptr : name_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->name.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null name in PlayNextCandidate struct");
    (*output)->season_number = Traits::season_number(input);
    (*output)->episode_number = Traits::episode_number(input);
    decltype(Traits::action(input)) in_action = Traits::action(input);
    typename decltype((*output)->action)::BaseType::BufferWriter
        action_writer;
    mojo::internal::Serialize<::media_feeds::mojom::ActionDataView>(
        in_action, buffer, &action_writer, context);
    (*output)->action.Set(
        action_writer.is_null() ? nullptr : action_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->action.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null action in PlayNextCandidate struct");
    decltype(Traits::duration(input)) in_duration = Traits::duration(input);
    typename decltype((*output)->duration)::BaseType::BufferWriter
        duration_writer;
    mojo::internal::Serialize<::mojo_base::mojom::TimeDeltaDataView>(
        in_duration, buffer, &duration_writer, context);
    (*output)->duration.Set(
        duration_writer.is_null() ? nullptr : duration_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->duration.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null duration in PlayNextCandidate struct");
    decltype(Traits::identifiers(input)) in_identifiers = Traits::identifiers(input);
    typename decltype((*output)->identifiers)::BaseType::BufferWriter
        identifiers_writer;
    const mojo::internal::ContainerValidateParams identifiers_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::media_feeds::mojom::IdentifierDataView>>(
        in_identifiers, buffer, &identifiers_writer, &identifiers_validate_params,
        context);
    (*output)->identifiers.Set(
        identifiers_writer.is_null() ? nullptr : identifiers_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->identifiers.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null identifiers in PlayNextCandidate struct");
    decltype(Traits::images(input)) in_images = Traits::images(input);
    typename decltype((*output)->images)::BaseType::BufferWriter
        images_writer;
    const mojo::internal::ContainerValidateParams images_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::media_feeds::mojom::MediaImageDataView>>(
        in_images, buffer, &images_writer, &images_validate_params,
        context);
    (*output)->images.Set(
        images_writer.is_null() ? nullptr : images_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->images.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null images in PlayNextCandidate struct");
  }

  static bool Deserialize(::media_feeds::mojom::internal::PlayNextCandidate_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::media_feeds::mojom::PlayNextCandidateDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::media_feeds::mojom::TVEpisodeDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::media_feeds::mojom::TVEpisodeDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::media_feeds::mojom::internal::TVEpisode_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::name(input)) in_name = Traits::name(input);
    typename decltype((*output)->name)::BaseType::BufferWriter
        name_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_name, buffer, &name_writer, context);
    (*output)->name.Set(
        name_writer.is_null() ? nullptr : name_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->name.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null name in TVEpisode struct");
    (*output)->episode_number = Traits::episode_number(input);
    (*output)->season_number = Traits::season_number(input);
    decltype(Traits::duration(input)) in_duration = Traits::duration(input);
    typename decltype((*output)->duration)::BaseType::BufferWriter
        duration_writer;
    mojo::internal::Serialize<::mojo_base::mojom::TimeDeltaDataView>(
        in_duration, buffer, &duration_writer, context);
    (*output)->duration.Set(
        duration_writer.is_null() ? nullptr : duration_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->duration.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null duration in TVEpisode struct");
    decltype(Traits::identifiers(input)) in_identifiers = Traits::identifiers(input);
    typename decltype((*output)->identifiers)::BaseType::BufferWriter
        identifiers_writer;
    const mojo::internal::ContainerValidateParams identifiers_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::media_feeds::mojom::IdentifierDataView>>(
        in_identifiers, buffer, &identifiers_writer, &identifiers_validate_params,
        context);
    (*output)->identifiers.Set(
        identifiers_writer.is_null() ? nullptr : identifiers_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->identifiers.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null identifiers in TVEpisode struct");
    decltype(Traits::live(input)) in_live = Traits::live(input);
    typename decltype((*output)->live)::BaseType::BufferWriter
        live_writer;
    mojo::internal::Serialize<::media_feeds::mojom::LiveDetailsDataView>(
        in_live, buffer, &live_writer, context);
    (*output)->live.Set(
        live_writer.is_null() ? nullptr : live_writer.data());
    decltype(Traits::images(input)) in_images = Traits::images(input);
    typename decltype((*output)->images)::BaseType::BufferWriter
        images_writer;
    const mojo::internal::ContainerValidateParams images_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::media_feeds::mojom::MediaImageDataView>>(
        in_images, buffer, &images_writer, &images_validate_params,
        context);
    (*output)->images.Set(
        images_writer.is_null() ? nullptr : images_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->images.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null images in TVEpisode struct");
  }

  static bool Deserialize(::media_feeds::mojom::internal::TVEpisode_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::media_feeds::mojom::TVEpisodeDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::media_feeds::mojom::LiveDetailsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::media_feeds::mojom::LiveDetailsDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::media_feeds::mojom::internal::LiveDetails_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::start_time(input)) in_start_time = Traits::start_time(input);
    typename decltype((*output)->start_time)::BaseType::BufferWriter
        start_time_writer;
    mojo::internal::Serialize<::mojo_base::mojom::TimeDataView>(
        in_start_time, buffer, &start_time_writer, context);
    (*output)->start_time.Set(
        start_time_writer.is_null() ? nullptr : start_time_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->start_time.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null start_time in LiveDetails struct");
    decltype(Traits::end_time(input)) in_end_time = Traits::end_time(input);
    typename decltype((*output)->end_time)::BaseType::BufferWriter
        end_time_writer;
    mojo::internal::Serialize<::mojo_base::mojom::TimeDataView>(
        in_end_time, buffer, &end_time_writer, context);
    (*output)->end_time.Set(
        end_time_writer.is_null() ? nullptr : end_time_writer.data());
  }

  static bool Deserialize(::media_feeds::mojom::internal::LiveDetails_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::media_feeds::mojom::LiveDetailsDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::media_feeds::mojom::MediaImageDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::media_feeds::mojom::MediaImageDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::media_feeds::mojom::internal::MediaImage_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::src(input)) in_src = Traits::src(input);
    typename decltype((*output)->src)::BaseType::BufferWriter
        src_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_src, buffer, &src_writer, context);
    (*output)->src.Set(
        src_writer.is_null() ? nullptr : src_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->src.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null src in MediaImage struct");
    decltype(Traits::size(input)) in_size = Traits::size(input);
    typename decltype((*output)->size)::BaseType::BufferWriter
        size_writer;
    mojo::internal::Serialize<::gfx::mojom::SizeDataView>(
        in_size, buffer, &size_writer, context);
    (*output)->size.Set(
        size_writer.is_null() ? nullptr : size_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->size.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null size in MediaImage struct");
    decltype(Traits::content_attributes(input)) in_content_attributes = Traits::content_attributes(input);
    typename decltype((*output)->content_attributes)::BaseType::BufferWriter
        content_attributes_writer;
    const mojo::internal::ContainerValidateParams content_attributes_validate_params(
        0, ::media_feeds::mojom::internal::ContentAttribute_Data::Validate);
    mojo::internal::Serialize<mojo::ArrayDataView<::media_feeds::mojom::ContentAttribute>>(
        in_content_attributes, buffer, &content_attributes_writer, &content_attributes_validate_params,
        context);
    (*output)->content_attributes.Set(
        content_attributes_writer.is_null() ? nullptr : content_attributes_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->content_attributes.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null content_attributes in MediaImage struct");
  }

  static bool Deserialize(::media_feeds::mojom::internal::MediaImage_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::media_feeds::mojom::MediaImageDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::media_feeds::mojom::MediaFeedItemDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::media_feeds::mojom::MediaFeedItemDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::media_feeds::mojom::internal::MediaFeedItem_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->id = Traits::id(input);
    mojo::internal::Serialize<::media_feeds::mojom::MediaFeedItemType>(
        Traits::type(input), &(*output)->type);
    decltype(Traits::name(input)) in_name = Traits::name(input);
    typename decltype((*output)->name)::BaseType::BufferWriter
        name_writer;
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_name, buffer, &name_writer, context);
    (*output)->name.Set(
        name_writer.is_null() ? nullptr : name_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->name.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null name in MediaFeedItem struct");
    decltype(Traits::author(input)) in_author = Traits::author(input);
    typename decltype((*output)->author)::BaseType::BufferWriter
        author_writer;
    mojo::internal::Serialize<::media_feeds::mojom::AuthorDataView>(
        in_author, buffer, &author_writer, context);
    (*output)->author.Set(
        author_writer.is_null() ? nullptr : author_writer.data());
    decltype(Traits::date_published(input)) in_date_published = Traits::date_published(input);
    typename decltype((*output)->date_published)::BaseType::BufferWriter
        date_published_writer;
    mojo::internal::Serialize<::mojo_base::mojom::TimeDataView>(
        in_date_published, buffer, &date_published_writer, context);
    (*output)->date_published.Set(
        date_published_writer.is_null() ? nullptr : date_published_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->date_published.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null date_published in MediaFeedItem struct");
    mojo::internal::Serialize<::media_feeds::mojom::IsFamilyFriendly>(
        Traits::is_family_friendly(input), &(*output)->is_family_friendly);
    mojo::internal::Serialize<::media_feeds::mojom::MediaFeedItemActionStatus>(
        Traits::action_status(input), &(*output)->action_status);
    decltype(Traits::action(input)) in_action = Traits::action(input);
    typename decltype((*output)->action)::BaseType::BufferWriter
        action_writer;
    mojo::internal::Serialize<::media_feeds::mojom::ActionDataView>(
        in_action, buffer, &action_writer, context);
    (*output)->action.Set(
        action_writer.is_null() ? nullptr : action_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->action.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null action in MediaFeedItem struct");
    decltype(Traits::interaction_counters(input)) in_interaction_counters = Traits::interaction_counters(input);
    typename decltype((*output)->interaction_counters)::BaseType::BufferWriter
        interaction_counters_writer;
    const mojo::internal::ContainerValidateParams interaction_counters_validate_params(
        new mojo::internal::ContainerValidateParams(0, ::media_feeds::mojom::internal::InteractionCounterType_Data::Validate), new mojo::internal::ContainerValidateParams(0, false, nullptr));
    mojo::internal::Serialize<mojo::MapDataView<::media_feeds::mojom::InteractionCounterType, uint64_t>>(
        in_interaction_counters, buffer, &interaction_counters_writer, &interaction_counters_validate_params,
        context);
    (*output)->interaction_counters.Set(
        interaction_counters_writer.is_null() ? nullptr : interaction_counters_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->interaction_counters.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null interaction_counters in MediaFeedItem struct");
    decltype(Traits::content_ratings(input)) in_content_ratings = Traits::content_ratings(input);
    typename decltype((*output)->content_ratings)::BaseType::BufferWriter
        content_ratings_writer;
    const mojo::internal::ContainerValidateParams content_ratings_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::media_feeds::mojom::ContentRatingDataView>>(
        in_content_ratings, buffer, &content_ratings_writer, &content_ratings_validate_params,
        context);
    (*output)->content_ratings.Set(
        content_ratings_writer.is_null() ? nullptr : content_ratings_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->content_ratings.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null content_ratings in MediaFeedItem struct");
    decltype(Traits::genre(input)) in_genre = Traits::genre(input);
    typename decltype((*output)->genre)::BaseType::BufferWriter
        genre_writer;
    const mojo::internal::ContainerValidateParams genre_validate_params(
        0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
    mojo::internal::Serialize<mojo::ArrayDataView<mojo::StringDataView>>(
        in_genre, buffer, &genre_writer, &genre_validate_params,
        context);
    (*output)->genre.Set(
        genre_writer.is_null() ? nullptr : genre_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->genre.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null genre in MediaFeedItem struct");
    decltype(Traits::duration(input)) in_duration = Traits::duration(input);
    typename decltype((*output)->duration)::BaseType::BufferWriter
        duration_writer;
    mojo::internal::Serialize<::mojo_base::mojom::TimeDeltaDataView>(
        in_duration, buffer, &duration_writer, context);
    (*output)->duration.Set(
        duration_writer.is_null() ? nullptr : duration_writer.data());
    decltype(Traits::live(input)) in_live = Traits::live(input);
    typename decltype((*output)->live)::BaseType::BufferWriter
        live_writer;
    mojo::internal::Serialize<::media_feeds::mojom::LiveDetailsDataView>(
        in_live, buffer, &live_writer, context);
    (*output)->live.Set(
        live_writer.is_null() ? nullptr : live_writer.data());
    decltype(Traits::tv_episode(input)) in_tv_episode = Traits::tv_episode(input);
    typename decltype((*output)->tv_episode)::BaseType::BufferWriter
        tv_episode_writer;
    mojo::internal::Serialize<::media_feeds::mojom::TVEpisodeDataView>(
        in_tv_episode, buffer, &tv_episode_writer, context);
    (*output)->tv_episode.Set(
        tv_episode_writer.is_null() ? nullptr : tv_episode_writer.data());
    decltype(Traits::play_next_candidate(input)) in_play_next_candidate = Traits::play_next_candidate(input);
    typename decltype((*output)->play_next_candidate)::BaseType::BufferWriter
        play_next_candidate_writer;
    mojo::internal::Serialize<::media_feeds::mojom::PlayNextCandidateDataView>(
        in_play_next_candidate, buffer, &play_next_candidate_writer, context);
    (*output)->play_next_candidate.Set(
        play_next_candidate_writer.is_null() ? nullptr : play_next_candidate_writer.data());
    decltype(Traits::identifiers(input)) in_identifiers = Traits::identifiers(input);
    typename decltype((*output)->identifiers)::BaseType::BufferWriter
        identifiers_writer;
    const mojo::internal::ContainerValidateParams identifiers_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::media_feeds::mojom::IdentifierDataView>>(
        in_identifiers, buffer, &identifiers_writer, &identifiers_validate_params,
        context);
    (*output)->identifiers.Set(
        identifiers_writer.is_null() ? nullptr : identifiers_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->identifiers.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null identifiers in MediaFeedItem struct");
    (*output)->shown_count = Traits::shown_count(input);
    (*output)->clicked = Traits::clicked(input);
    decltype(Traits::images(input)) in_images = Traits::images(input);
    typename decltype((*output)->images)::BaseType::BufferWriter
        images_writer;
    const mojo::internal::ContainerValidateParams images_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::media_feeds::mojom::MediaImageDataView>>(
        in_images, buffer, &images_writer, &images_validate_params,
        context);
    (*output)->images.Set(
        images_writer.is_null() ? nullptr : images_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->images.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null images in MediaFeedItem struct");
    mojo::internal::Serialize<::media_feeds::mojom::SafeSearchResult>(
        Traits::safe_search_result(input), &(*output)->safe_search_result);
  }

  static bool Deserialize(::media_feeds::mojom::internal::MediaFeedItem_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::media_feeds::mojom::MediaFeedItemDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::media_feeds::mojom::DebugInformationDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::media_feeds::mojom::DebugInformationDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::media_feeds::mojom::internal::DebugInformation_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->safe_search_feature_enabled = Traits::safe_search_feature_enabled(input);
    (*output)->safe_search_pref_value = Traits::safe_search_pref_value(input);
    (*output)->background_fetching_feature_enabled = Traits::background_fetching_feature_enabled(input);
    (*output)->background_fetching_pref_value = Traits::background_fetching_pref_value(input);
  }

  static bool Deserialize(::media_feeds::mojom::internal::DebugInformation_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::media_feeds::mojom::DebugInformationDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace media_feeds {
namespace mojom {

inline void MediaFeedDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void MediaFeedDataView::GetLastDiscoveryTimeDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->last_discovery_time.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, context_);
}
inline void MediaFeedDataView::GetLastFetchTimeDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->last_fetch_time.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, context_);
}
inline void MediaFeedDataView::GetLastFetchTimeNotCacheHitDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->last_fetch_time_not_cache_hit.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, context_);
}
inline void MediaFeedDataView::GetLogosDataView(
    mojo::ArrayDataView<MediaImageDataView>* output) {
  auto pointer = data_->logos.Get();
  *output = mojo::ArrayDataView<MediaImageDataView>(pointer, context_);
}
inline void MediaFeedDataView::GetDisplayNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->display_name.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void MediaFeedDataView::GetLastDisplayTimeDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->last_display_time.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, context_);
}
inline void MediaFeedDataView::GetResetTokenDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->reset_token.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, context_);
}
inline void MediaFeedDataView::GetUserIdentifierDataView(
    UserIdentifierDataView* output) {
  auto pointer = data_->user_identifier.Get();
  *output = UserIdentifierDataView(pointer, context_);
}
inline void MediaFeedDataView::GetCookieNameFilterDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->cookie_name_filter.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void UserIdentifierDataView::GetNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->name.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void UserIdentifierDataView::GetEmailDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->email.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void UserIdentifierDataView::GetImageDataView(
    MediaImageDataView* output) {
  auto pointer = data_->image.Get();
  *output = MediaImageDataView(pointer, context_);
}


inline void ContentRatingDataView::GetAgencyDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->agency.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void ContentRatingDataView::GetValueDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->value.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void AuthorDataView::GetNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->name.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void AuthorDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}


inline void IdentifierDataView::GetValueDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->value.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void ActionDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void ActionDataView::GetStartTimeDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->start_time.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, context_);
}


inline void PlayNextCandidateDataView::GetNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->name.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void PlayNextCandidateDataView::GetActionDataView(
    ActionDataView* output) {
  auto pointer = data_->action.Get();
  *output = ActionDataView(pointer, context_);
}
inline void PlayNextCandidateDataView::GetDurationDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->duration.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, context_);
}
inline void PlayNextCandidateDataView::GetIdentifiersDataView(
    mojo::ArrayDataView<IdentifierDataView>* output) {
  auto pointer = data_->identifiers.Get();
  *output = mojo::ArrayDataView<IdentifierDataView>(pointer, context_);
}
inline void PlayNextCandidateDataView::GetImagesDataView(
    mojo::ArrayDataView<MediaImageDataView>* output) {
  auto pointer = data_->images.Get();
  *output = mojo::ArrayDataView<MediaImageDataView>(pointer, context_);
}


inline void TVEpisodeDataView::GetNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->name.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void TVEpisodeDataView::GetDurationDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->duration.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, context_);
}
inline void TVEpisodeDataView::GetIdentifiersDataView(
    mojo::ArrayDataView<IdentifierDataView>* output) {
  auto pointer = data_->identifiers.Get();
  *output = mojo::ArrayDataView<IdentifierDataView>(pointer, context_);
}
inline void TVEpisodeDataView::GetLiveDataView(
    LiveDetailsDataView* output) {
  auto pointer = data_->live.Get();
  *output = LiveDetailsDataView(pointer, context_);
}
inline void TVEpisodeDataView::GetImagesDataView(
    mojo::ArrayDataView<MediaImageDataView>* output) {
  auto pointer = data_->images.Get();
  *output = mojo::ArrayDataView<MediaImageDataView>(pointer, context_);
}


inline void LiveDetailsDataView::GetStartTimeDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->start_time.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, context_);
}
inline void LiveDetailsDataView::GetEndTimeDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->end_time.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, context_);
}


inline void MediaImageDataView::GetSrcDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->src.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void MediaImageDataView::GetSizeDataView(
    ::gfx::mojom::SizeDataView* output) {
  auto pointer = data_->size.Get();
  *output = ::gfx::mojom::SizeDataView(pointer, context_);
}
inline void MediaImageDataView::GetContentAttributesDataView(
    mojo::ArrayDataView<ContentAttribute>* output) {
  auto pointer = data_->content_attributes.Get();
  *output = mojo::ArrayDataView<ContentAttribute>(pointer, context_);
}


inline void MediaFeedItemDataView::GetNameDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->name.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}
inline void MediaFeedItemDataView::GetAuthorDataView(
    AuthorDataView* output) {
  auto pointer = data_->author.Get();
  *output = AuthorDataView(pointer, context_);
}
inline void MediaFeedItemDataView::GetDatePublishedDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->date_published.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, context_);
}
inline void MediaFeedItemDataView::GetActionDataView(
    ActionDataView* output) {
  auto pointer = data_->action.Get();
  *output = ActionDataView(pointer, context_);
}
inline void MediaFeedItemDataView::GetInteractionCountersDataView(
    mojo::MapDataView<InteractionCounterType, uint64_t>* output) {
  auto pointer = data_->interaction_counters.Get();
  *output = mojo::MapDataView<InteractionCounterType, uint64_t>(pointer, context_);
}
inline void MediaFeedItemDataView::GetContentRatingsDataView(
    mojo::ArrayDataView<ContentRatingDataView>* output) {
  auto pointer = data_->content_ratings.Get();
  *output = mojo::ArrayDataView<ContentRatingDataView>(pointer, context_);
}
inline void MediaFeedItemDataView::GetGenreDataView(
    mojo::ArrayDataView<mojo::StringDataView>* output) {
  auto pointer = data_->genre.Get();
  *output = mojo::ArrayDataView<mojo::StringDataView>(pointer, context_);
}
inline void MediaFeedItemDataView::GetDurationDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->duration.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, context_);
}
inline void MediaFeedItemDataView::GetLiveDataView(
    LiveDetailsDataView* output) {
  auto pointer = data_->live.Get();
  *output = LiveDetailsDataView(pointer, context_);
}
inline void MediaFeedItemDataView::GetTvEpisodeDataView(
    TVEpisodeDataView* output) {
  auto pointer = data_->tv_episode.Get();
  *output = TVEpisodeDataView(pointer, context_);
}
inline void MediaFeedItemDataView::GetPlayNextCandidateDataView(
    PlayNextCandidateDataView* output) {
  auto pointer = data_->play_next_candidate.Get();
  *output = PlayNextCandidateDataView(pointer, context_);
}
inline void MediaFeedItemDataView::GetIdentifiersDataView(
    mojo::ArrayDataView<IdentifierDataView>* output) {
  auto pointer = data_->identifiers.Get();
  *output = mojo::ArrayDataView<IdentifierDataView>(pointer, context_);
}
inline void MediaFeedItemDataView::GetImagesDataView(
    mojo::ArrayDataView<MediaImageDataView>* output) {
  auto pointer = data_->images.Get();
  *output = mojo::ArrayDataView<MediaImageDataView>(pointer, context_);
}





}  // namespace mojom
}  // namespace media_feeds

#endif  // CHROME_BROWSER_MEDIA_FEEDS_MEDIA_FEEDS_STORE_MOJOM_SHARED_H_
// chrome/browser/media/feeds/media_feeds_store.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_MEDIA_FEEDS_MEDIA_FEEDS_STORE_MOJOM_SHARED_INTERNAL_H_
#define CHROME_BROWSER_MEDIA_FEEDS_MEDIA_FEEDS_STORE_MOJOM_SHARED_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "services/media_session/public/mojom/media_session.mojom-shared-internal.h"
#include "mojo/public/mojom/base/string16.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared-internal.h"
#include "url/mojom/origin.mojom-shared-internal.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared-internal.h"
#include "url/mojom/url.mojom-shared-internal.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace media_feeds {
namespace mojom {
namespace internal {
class MediaFeed_Data;
class UserIdentifier_Data;
class ContentRating_Data;
class Author_Data;
class Identifier_Data;
class Action_Data;
class PlayNextCandidate_Data;
class TVEpisode_Data;
class LiveDetails_Data;
class MediaImage_Data;
class MediaFeedItem_Data;
class DebugInformation_Data;

struct FetchResult_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct ResetReason_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
      case 3:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct FeedUserStatus_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct MediaFeedItemType_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 1:
      case 2:
      case 4:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct MediaFeedItemActionStatus_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
      case 3:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct InteractionCounterType_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct SafeSearchResult_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct ContentAttribute_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct IsFamilyFriendly_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct Identifier_Type_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

#pragma pack(push, 1)
class  MediaFeed_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaFeed_Data));
      new (data()) MediaFeed_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaFeed_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaFeed_Data>(index_);
    }
    MediaFeed_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t id;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> last_discovery_time;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> last_fetch_time;
  int32_t user_status;
  int32_t last_fetch_result;
  int64_t fetch_failed_count;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> last_fetch_time_not_cache_hit;
  int64_t last_fetch_item_count;
  int64_t last_fetch_play_next_count;
  int64_t last_fetch_content_types;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::MediaImage_Data>>> logos;
  mojo::internal::Pointer<mojo::internal::String_Data> display_name;
  double origin_audio_video_watchtime_percentile;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> last_display_time;
  int64_t last_fetch_safe_item_count;
  int32_t reset_reason;
  int32_t safe_search_result;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> reset_token;
  mojo::internal::Pointer<internal::UserIdentifier_Data> user_identifier;
  mojo::internal::Pointer<mojo::internal::String_Data> cookie_name_filter;

 private:
  MediaFeed_Data();
  ~MediaFeed_Data() = delete;
};
static_assert(sizeof(MediaFeed_Data) == 160,
              "Bad sizeof(MediaFeed_Data)");
// Used by MediaFeed::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct MediaFeed_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  MediaFeed_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~MediaFeed_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    MediaFeed_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    MediaFeed_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  UserIdentifier_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(UserIdentifier_Data));
      new (data()) UserIdentifier_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    UserIdentifier_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<UserIdentifier_Data>(index_);
    }
    UserIdentifier_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> name;
  mojo::internal::Pointer<mojo::internal::String_Data> email;
  mojo::internal::Pointer<internal::MediaImage_Data> image;

 private:
  UserIdentifier_Data();
  ~UserIdentifier_Data() = delete;
};
static_assert(sizeof(UserIdentifier_Data) == 32,
              "Bad sizeof(UserIdentifier_Data)");
// Used by UserIdentifier::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct UserIdentifier_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  UserIdentifier_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~UserIdentifier_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    UserIdentifier_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    UserIdentifier_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  ContentRating_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ContentRating_Data));
      new (data()) ContentRating_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ContentRating_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ContentRating_Data>(index_);
    }
    ContentRating_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> agency;
  mojo::internal::Pointer<mojo::internal::String_Data> value;

 private:
  ContentRating_Data();
  ~ContentRating_Data() = delete;
};
static_assert(sizeof(ContentRating_Data) == 24,
              "Bad sizeof(ContentRating_Data)");
// Used by ContentRating::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct ContentRating_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  ContentRating_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~ContentRating_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    ContentRating_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    ContentRating_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  Author_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Author_Data));
      new (data()) Author_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Author_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Author_Data>(index_);
    }
    Author_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> name;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;

 private:
  Author_Data();
  ~Author_Data() = delete;
};
static_assert(sizeof(Author_Data) == 24,
              "Bad sizeof(Author_Data)");
// Used by Author::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct Author_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  Author_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~Author_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    Author_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    Author_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  Identifier_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Identifier_Data));
      new (data()) Identifier_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Identifier_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Identifier_Data>(index_);
    }
    Identifier_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t type;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> value;

 private:
  Identifier_Data();
  ~Identifier_Data() = delete;
};
static_assert(sizeof(Identifier_Data) == 24,
              "Bad sizeof(Identifier_Data)");
// Used by Identifier::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct Identifier_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  Identifier_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~Identifier_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    Identifier_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    Identifier_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  Action_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Action_Data));
      new (data()) Action_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Action_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Action_Data>(index_);
    }
    Action_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> start_time;

 private:
  Action_Data();
  ~Action_Data() = delete;
};
static_assert(sizeof(Action_Data) == 24,
              "Bad sizeof(Action_Data)");
// Used by Action::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct Action_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  Action_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~Action_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    Action_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    Action_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  PlayNextCandidate_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PlayNextCandidate_Data));
      new (data()) PlayNextCandidate_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PlayNextCandidate_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PlayNextCandidate_Data>(index_);
    }
    PlayNextCandidate_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> name;
  int64_t season_number;
  int64_t episode_number;
  mojo::internal::Pointer<internal::Action_Data> action;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> duration;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::Identifier_Data>>> identifiers;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::MediaImage_Data>>> images;

 private:
  PlayNextCandidate_Data();
  ~PlayNextCandidate_Data() = delete;
};
static_assert(sizeof(PlayNextCandidate_Data) == 64,
              "Bad sizeof(PlayNextCandidate_Data)");
// Used by PlayNextCandidate::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct PlayNextCandidate_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  PlayNextCandidate_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~PlayNextCandidate_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    PlayNextCandidate_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    PlayNextCandidate_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  TVEpisode_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(TVEpisode_Data));
      new (data()) TVEpisode_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    TVEpisode_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<TVEpisode_Data>(index_);
    }
    TVEpisode_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> name;
  int64_t episode_number;
  int64_t season_number;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> duration;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::Identifier_Data>>> identifiers;
  mojo::internal::Pointer<internal::LiveDetails_Data> live;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::MediaImage_Data>>> images;

 private:
  TVEpisode_Data();
  ~TVEpisode_Data() = delete;
};
static_assert(sizeof(TVEpisode_Data) == 64,
              "Bad sizeof(TVEpisode_Data)");
// Used by TVEpisode::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct TVEpisode_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  TVEpisode_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~TVEpisode_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    TVEpisode_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    TVEpisode_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  LiveDetails_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LiveDetails_Data));
      new (data()) LiveDetails_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LiveDetails_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LiveDetails_Data>(index_);
    }
    LiveDetails_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> start_time;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> end_time;

 private:
  LiveDetails_Data();
  ~LiveDetails_Data() = delete;
};
static_assert(sizeof(LiveDetails_Data) == 24,
              "Bad sizeof(LiveDetails_Data)");
// Used by LiveDetails::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct LiveDetails_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  LiveDetails_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~LiveDetails_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    LiveDetails_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    LiveDetails_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  MediaImage_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaImage_Data));
      new (data()) MediaImage_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaImage_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaImage_Data>(index_);
    }
    MediaImage_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> src;
  mojo::internal::Pointer<::gfx::mojom::internal::Size_Data> size;
  mojo::internal::Pointer<mojo::internal::Array_Data<int32_t>> content_attributes;

 private:
  MediaImage_Data();
  ~MediaImage_Data() = delete;
};
static_assert(sizeof(MediaImage_Data) == 32,
              "Bad sizeof(MediaImage_Data)");
// Used by MediaImage::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct MediaImage_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  MediaImage_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~MediaImage_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    MediaImage_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    MediaImage_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  MediaFeedItem_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaFeedItem_Data));
      new (data()) MediaFeedItem_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaFeedItem_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaFeedItem_Data>(index_);
    }
    MediaFeedItem_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t id;
  int32_t type;
  int32_t is_family_friendly;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> name;
  mojo::internal::Pointer<internal::Author_Data> author;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> date_published;
  int32_t action_status;
  uint8_t clicked : 1;
  uint8_t pad7_[3];
  mojo::internal::Pointer<internal::Action_Data> action;
  mojo::internal::Pointer<mojo::internal::Map_Data<int32_t, uint64_t>> interaction_counters;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::ContentRating_Data>>> content_ratings;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<mojo::internal::String_Data>>> genre;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> duration;
  mojo::internal::Pointer<internal::LiveDetails_Data> live;
  mojo::internal::Pointer<internal::TVEpisode_Data> tv_episode;
  mojo::internal::Pointer<internal::PlayNextCandidate_Data> play_next_candidate;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::Identifier_Data>>> identifiers;
  uint64_t shown_count;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::MediaImage_Data>>> images;
  int32_t safe_search_result;
  uint8_t padfinal_[4];

 private:
  MediaFeedItem_Data();
  ~MediaFeedItem_Data() = delete;
};
static_assert(sizeof(MediaFeedItem_Data) == 152,
              "Bad sizeof(MediaFeedItem_Data)");
// Used by MediaFeedItem::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct MediaFeedItem_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  MediaFeedItem_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~MediaFeedItem_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    MediaFeedItem_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    MediaFeedItem_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  DebugInformation_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DebugInformation_Data));
      new (data()) DebugInformation_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DebugInformation_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DebugInformation_Data>(index_);
    }
    DebugInformation_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t safe_search_feature_enabled : 1;
  uint8_t safe_search_pref_value : 1;
  uint8_t background_fetching_feature_enabled : 1;
  uint8_t background_fetching_pref_value : 1;
  uint8_t padfinal_[7];

 private:
  DebugInformation_Data();
  ~DebugInformation_Data() = delete;
};
static_assert(sizeof(DebugInformation_Data) == 16,
              "Bad sizeof(DebugInformation_Data)");
// Used by DebugInformation::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct DebugInformation_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  DebugInformation_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~DebugInformation_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    DebugInformation_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    DebugInformation_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace media_feeds

#endif  // CHROME_BROWSER_MEDIA_FEEDS_MEDIA_FEEDS_STORE_MOJOM_SHARED_INTERNAL_H_
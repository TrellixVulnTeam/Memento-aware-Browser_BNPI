// chrome/browser/media/feeds/media_feeds_store.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_MEDIA_FEEDS_MEDIA_FEEDS_STORE_MOJOM_PARAMS_DATA_H_
#define CHROME_BROWSER_MEDIA_FEEDS_MEDIA_FEEDS_STORE_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace media_feeds {
namespace mojom {
namespace internal {
class  MediaFeedsStore_GetDebugInformation_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaFeedsStore_GetDebugInformation_Params_Data));
      new (data()) MediaFeedsStore_GetDebugInformation_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaFeedsStore_GetDebugInformation_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaFeedsStore_GetDebugInformation_Params_Data>(index_);
    }
    MediaFeedsStore_GetDebugInformation_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  MediaFeedsStore_GetDebugInformation_Params_Data();
  ~MediaFeedsStore_GetDebugInformation_Params_Data() = delete;
};
static_assert(sizeof(MediaFeedsStore_GetDebugInformation_Params_Data) == 8,
              "Bad sizeof(MediaFeedsStore_GetDebugInformation_Params_Data)");
class  MediaFeedsStore_GetDebugInformation_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaFeedsStore_GetDebugInformation_ResponseParams_Data));
      new (data()) MediaFeedsStore_GetDebugInformation_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaFeedsStore_GetDebugInformation_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaFeedsStore_GetDebugInformation_ResponseParams_Data>(index_);
    }
    MediaFeedsStore_GetDebugInformation_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::DebugInformation_Data> info;

 private:
  MediaFeedsStore_GetDebugInformation_ResponseParams_Data();
  ~MediaFeedsStore_GetDebugInformation_ResponseParams_Data() = delete;
};
static_assert(sizeof(MediaFeedsStore_GetDebugInformation_ResponseParams_Data) == 16,
              "Bad sizeof(MediaFeedsStore_GetDebugInformation_ResponseParams_Data)");
class  MediaFeedsStore_SetSafeSearchEnabledPref_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaFeedsStore_SetSafeSearchEnabledPref_Params_Data));
      new (data()) MediaFeedsStore_SetSafeSearchEnabledPref_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaFeedsStore_SetSafeSearchEnabledPref_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaFeedsStore_SetSafeSearchEnabledPref_Params_Data>(index_);
    }
    MediaFeedsStore_SetSafeSearchEnabledPref_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t value : 1;
  uint8_t padfinal_[7];

 private:
  MediaFeedsStore_SetSafeSearchEnabledPref_Params_Data();
  ~MediaFeedsStore_SetSafeSearchEnabledPref_Params_Data() = delete;
};
static_assert(sizeof(MediaFeedsStore_SetSafeSearchEnabledPref_Params_Data) == 16,
              "Bad sizeof(MediaFeedsStore_SetSafeSearchEnabledPref_Params_Data)");
class  MediaFeedsStore_SetSafeSearchEnabledPref_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaFeedsStore_SetSafeSearchEnabledPref_ResponseParams_Data));
      new (data()) MediaFeedsStore_SetSafeSearchEnabledPref_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaFeedsStore_SetSafeSearchEnabledPref_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaFeedsStore_SetSafeSearchEnabledPref_ResponseParams_Data>(index_);
    }
    MediaFeedsStore_SetSafeSearchEnabledPref_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  MediaFeedsStore_SetSafeSearchEnabledPref_ResponseParams_Data();
  ~MediaFeedsStore_SetSafeSearchEnabledPref_ResponseParams_Data() = delete;
};
static_assert(sizeof(MediaFeedsStore_SetSafeSearchEnabledPref_ResponseParams_Data) == 8,
              "Bad sizeof(MediaFeedsStore_SetSafeSearchEnabledPref_ResponseParams_Data)");
class  MediaFeedsStore_SetBackgroundFetchingPref_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaFeedsStore_SetBackgroundFetchingPref_Params_Data));
      new (data()) MediaFeedsStore_SetBackgroundFetchingPref_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaFeedsStore_SetBackgroundFetchingPref_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaFeedsStore_SetBackgroundFetchingPref_Params_Data>(index_);
    }
    MediaFeedsStore_SetBackgroundFetchingPref_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t value : 1;
  uint8_t padfinal_[7];

 private:
  MediaFeedsStore_SetBackgroundFetchingPref_Params_Data();
  ~MediaFeedsStore_SetBackgroundFetchingPref_Params_Data() = delete;
};
static_assert(sizeof(MediaFeedsStore_SetBackgroundFetchingPref_Params_Data) == 16,
              "Bad sizeof(MediaFeedsStore_SetBackgroundFetchingPref_Params_Data)");
class  MediaFeedsStore_SetBackgroundFetchingPref_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaFeedsStore_SetBackgroundFetchingPref_ResponseParams_Data));
      new (data()) MediaFeedsStore_SetBackgroundFetchingPref_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaFeedsStore_SetBackgroundFetchingPref_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaFeedsStore_SetBackgroundFetchingPref_ResponseParams_Data>(index_);
    }
    MediaFeedsStore_SetBackgroundFetchingPref_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  MediaFeedsStore_SetBackgroundFetchingPref_ResponseParams_Data();
  ~MediaFeedsStore_SetBackgroundFetchingPref_ResponseParams_Data() = delete;
};
static_assert(sizeof(MediaFeedsStore_SetBackgroundFetchingPref_ResponseParams_Data) == 8,
              "Bad sizeof(MediaFeedsStore_SetBackgroundFetchingPref_ResponseParams_Data)");
class  MediaFeedsStore_GetMediaFeeds_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaFeedsStore_GetMediaFeeds_Params_Data));
      new (data()) MediaFeedsStore_GetMediaFeeds_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaFeedsStore_GetMediaFeeds_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaFeedsStore_GetMediaFeeds_Params_Data>(index_);
    }
    MediaFeedsStore_GetMediaFeeds_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  MediaFeedsStore_GetMediaFeeds_Params_Data();
  ~MediaFeedsStore_GetMediaFeeds_Params_Data() = delete;
};
static_assert(sizeof(MediaFeedsStore_GetMediaFeeds_Params_Data) == 8,
              "Bad sizeof(MediaFeedsStore_GetMediaFeeds_Params_Data)");
class  MediaFeedsStore_GetMediaFeeds_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaFeedsStore_GetMediaFeeds_ResponseParams_Data));
      new (data()) MediaFeedsStore_GetMediaFeeds_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaFeedsStore_GetMediaFeeds_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaFeedsStore_GetMediaFeeds_ResponseParams_Data>(index_);
    }
    MediaFeedsStore_GetMediaFeeds_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::MediaFeed_Data>>> feeds;

 private:
  MediaFeedsStore_GetMediaFeeds_ResponseParams_Data();
  ~MediaFeedsStore_GetMediaFeeds_ResponseParams_Data() = delete;
};
static_assert(sizeof(MediaFeedsStore_GetMediaFeeds_ResponseParams_Data) == 16,
              "Bad sizeof(MediaFeedsStore_GetMediaFeeds_ResponseParams_Data)");
class  MediaFeedsStore_GetItemsForMediaFeed_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaFeedsStore_GetItemsForMediaFeed_Params_Data));
      new (data()) MediaFeedsStore_GetItemsForMediaFeed_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaFeedsStore_GetItemsForMediaFeed_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaFeedsStore_GetItemsForMediaFeed_Params_Data>(index_);
    }
    MediaFeedsStore_GetItemsForMediaFeed_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t feed_id;

 private:
  MediaFeedsStore_GetItemsForMediaFeed_Params_Data();
  ~MediaFeedsStore_GetItemsForMediaFeed_Params_Data() = delete;
};
static_assert(sizeof(MediaFeedsStore_GetItemsForMediaFeed_Params_Data) == 16,
              "Bad sizeof(MediaFeedsStore_GetItemsForMediaFeed_Params_Data)");
class  MediaFeedsStore_GetItemsForMediaFeed_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaFeedsStore_GetItemsForMediaFeed_ResponseParams_Data));
      new (data()) MediaFeedsStore_GetItemsForMediaFeed_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaFeedsStore_GetItemsForMediaFeed_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaFeedsStore_GetItemsForMediaFeed_ResponseParams_Data>(index_);
    }
    MediaFeedsStore_GetItemsForMediaFeed_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::MediaFeedItem_Data>>> items;

 private:
  MediaFeedsStore_GetItemsForMediaFeed_ResponseParams_Data();
  ~MediaFeedsStore_GetItemsForMediaFeed_ResponseParams_Data() = delete;
};
static_assert(sizeof(MediaFeedsStore_GetItemsForMediaFeed_ResponseParams_Data) == 16,
              "Bad sizeof(MediaFeedsStore_GetItemsForMediaFeed_ResponseParams_Data)");
class  MediaFeedsStore_FetchMediaFeed_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaFeedsStore_FetchMediaFeed_Params_Data));
      new (data()) MediaFeedsStore_FetchMediaFeed_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaFeedsStore_FetchMediaFeed_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaFeedsStore_FetchMediaFeed_Params_Data>(index_);
    }
    MediaFeedsStore_FetchMediaFeed_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t feed_id;

 private:
  MediaFeedsStore_FetchMediaFeed_Params_Data();
  ~MediaFeedsStore_FetchMediaFeed_Params_Data() = delete;
};
static_assert(sizeof(MediaFeedsStore_FetchMediaFeed_Params_Data) == 16,
              "Bad sizeof(MediaFeedsStore_FetchMediaFeed_Params_Data)");
class  MediaFeedsStore_FetchMediaFeed_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaFeedsStore_FetchMediaFeed_ResponseParams_Data));
      new (data()) MediaFeedsStore_FetchMediaFeed_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaFeedsStore_FetchMediaFeed_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaFeedsStore_FetchMediaFeed_ResponseParams_Data>(index_);
    }
    MediaFeedsStore_FetchMediaFeed_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> logs;

 private:
  MediaFeedsStore_FetchMediaFeed_ResponseParams_Data();
  ~MediaFeedsStore_FetchMediaFeed_ResponseParams_Data() = delete;
};
static_assert(sizeof(MediaFeedsStore_FetchMediaFeed_ResponseParams_Data) == 16,
              "Bad sizeof(MediaFeedsStore_FetchMediaFeed_ResponseParams_Data)");

}  // namespace internal
class MediaFeedsStore_GetDebugInformation_ParamsDataView {
 public:
  MediaFeedsStore_GetDebugInformation_ParamsDataView() {}

  MediaFeedsStore_GetDebugInformation_ParamsDataView(
      internal::MediaFeedsStore_GetDebugInformation_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::MediaFeedsStore_GetDebugInformation_Params_Data* data_ = nullptr;
};

class MediaFeedsStore_GetDebugInformation_ResponseParamsDataView {
 public:
  MediaFeedsStore_GetDebugInformation_ResponseParamsDataView() {}

  MediaFeedsStore_GetDebugInformation_ResponseParamsDataView(
      internal::MediaFeedsStore_GetDebugInformation_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetInfoDataView(
      DebugInformationDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadInfo(UserType* output) {
    auto* pointer = data_->info.Get();
    return mojo::internal::Deserialize<::media_feeds::mojom::DebugInformationDataView>(
        pointer, output, context_);
  }
 private:
  internal::MediaFeedsStore_GetDebugInformation_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class MediaFeedsStore_SetSafeSearchEnabledPref_ParamsDataView {
 public:
  MediaFeedsStore_SetSafeSearchEnabledPref_ParamsDataView() {}

  MediaFeedsStore_SetSafeSearchEnabledPref_ParamsDataView(
      internal::MediaFeedsStore_SetSafeSearchEnabledPref_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool value() const {
    return data_->value;
  }
 private:
  internal::MediaFeedsStore_SetSafeSearchEnabledPref_Params_Data* data_ = nullptr;
};

class MediaFeedsStore_SetSafeSearchEnabledPref_ResponseParamsDataView {
 public:
  MediaFeedsStore_SetSafeSearchEnabledPref_ResponseParamsDataView() {}

  MediaFeedsStore_SetSafeSearchEnabledPref_ResponseParamsDataView(
      internal::MediaFeedsStore_SetSafeSearchEnabledPref_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::MediaFeedsStore_SetSafeSearchEnabledPref_ResponseParams_Data* data_ = nullptr;
};

class MediaFeedsStore_SetBackgroundFetchingPref_ParamsDataView {
 public:
  MediaFeedsStore_SetBackgroundFetchingPref_ParamsDataView() {}

  MediaFeedsStore_SetBackgroundFetchingPref_ParamsDataView(
      internal::MediaFeedsStore_SetBackgroundFetchingPref_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool value() const {
    return data_->value;
  }
 private:
  internal::MediaFeedsStore_SetBackgroundFetchingPref_Params_Data* data_ = nullptr;
};

class MediaFeedsStore_SetBackgroundFetchingPref_ResponseParamsDataView {
 public:
  MediaFeedsStore_SetBackgroundFetchingPref_ResponseParamsDataView() {}

  MediaFeedsStore_SetBackgroundFetchingPref_ResponseParamsDataView(
      internal::MediaFeedsStore_SetBackgroundFetchingPref_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::MediaFeedsStore_SetBackgroundFetchingPref_ResponseParams_Data* data_ = nullptr;
};

class MediaFeedsStore_GetMediaFeeds_ParamsDataView {
 public:
  MediaFeedsStore_GetMediaFeeds_ParamsDataView() {}

  MediaFeedsStore_GetMediaFeeds_ParamsDataView(
      internal::MediaFeedsStore_GetMediaFeeds_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::MediaFeedsStore_GetMediaFeeds_Params_Data* data_ = nullptr;
};

class MediaFeedsStore_GetMediaFeeds_ResponseParamsDataView {
 public:
  MediaFeedsStore_GetMediaFeeds_ResponseParamsDataView() {}

  MediaFeedsStore_GetMediaFeeds_ResponseParamsDataView(
      internal::MediaFeedsStore_GetMediaFeeds_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetFeedsDataView(
      mojo::ArrayDataView<MediaFeedDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFeeds(UserType* output) {
    auto* pointer = data_->feeds.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::media_feeds::mojom::MediaFeedDataView>>(
        pointer, output, context_);
  }
 private:
  internal::MediaFeedsStore_GetMediaFeeds_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class MediaFeedsStore_GetItemsForMediaFeed_ParamsDataView {
 public:
  MediaFeedsStore_GetItemsForMediaFeed_ParamsDataView() {}

  MediaFeedsStore_GetItemsForMediaFeed_ParamsDataView(
      internal::MediaFeedsStore_GetItemsForMediaFeed_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int64_t feed_id() const {
    return data_->feed_id;
  }
 private:
  internal::MediaFeedsStore_GetItemsForMediaFeed_Params_Data* data_ = nullptr;
};

class MediaFeedsStore_GetItemsForMediaFeed_ResponseParamsDataView {
 public:
  MediaFeedsStore_GetItemsForMediaFeed_ResponseParamsDataView() {}

  MediaFeedsStore_GetItemsForMediaFeed_ResponseParamsDataView(
      internal::MediaFeedsStore_GetItemsForMediaFeed_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetItemsDataView(
      mojo::ArrayDataView<MediaFeedItemDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadItems(UserType* output) {
    auto* pointer = data_->items.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::media_feeds::mojom::MediaFeedItemDataView>>(
        pointer, output, context_);
  }
 private:
  internal::MediaFeedsStore_GetItemsForMediaFeed_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class MediaFeedsStore_FetchMediaFeed_ParamsDataView {
 public:
  MediaFeedsStore_FetchMediaFeed_ParamsDataView() {}

  MediaFeedsStore_FetchMediaFeed_ParamsDataView(
      internal::MediaFeedsStore_FetchMediaFeed_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int64_t feed_id() const {
    return data_->feed_id;
  }
 private:
  internal::MediaFeedsStore_FetchMediaFeed_Params_Data* data_ = nullptr;
};

class MediaFeedsStore_FetchMediaFeed_ResponseParamsDataView {
 public:
  MediaFeedsStore_FetchMediaFeed_ResponseParamsDataView() {}

  MediaFeedsStore_FetchMediaFeed_ResponseParamsDataView(
      internal::MediaFeedsStore_FetchMediaFeed_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetLogsDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadLogs(UserType* output) {
    auto* pointer = data_->logs.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::MediaFeedsStore_FetchMediaFeed_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};




inline void MediaFeedsStore_GetDebugInformation_ResponseParamsDataView::GetInfoDataView(
    DebugInformationDataView* output) {
  auto pointer = data_->info.Get();
  *output = DebugInformationDataView(pointer, context_);
}












inline void MediaFeedsStore_GetMediaFeeds_ResponseParamsDataView::GetFeedsDataView(
    mojo::ArrayDataView<MediaFeedDataView>* output) {
  auto pointer = data_->feeds.Get();
  *output = mojo::ArrayDataView<MediaFeedDataView>(pointer, context_);
}




inline void MediaFeedsStore_GetItemsForMediaFeed_ResponseParamsDataView::GetItemsDataView(
    mojo::ArrayDataView<MediaFeedItemDataView>* output) {
  auto pointer = data_->items.Get();
  *output = mojo::ArrayDataView<MediaFeedItemDataView>(pointer, context_);
}




inline void MediaFeedsStore_FetchMediaFeed_ResponseParamsDataView::GetLogsDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->logs.Get();
  *output = mojo::StringDataView(pointer, context_);
}

}  // namespace mojom
}  // namespace media_feeds

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CHROME_BROWSER_MEDIA_FEEDS_MEDIA_FEEDS_STORE_MOJOM_PARAMS_DATA_H_
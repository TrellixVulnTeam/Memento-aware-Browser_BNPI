// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: media_feeds.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_media_5ffeeds_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_media_5ffeeds_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_media_5ffeeds_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_media_5ffeeds_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace media_feeds {
class Action;
class ActionDefaultTypeInternal;
extern ActionDefaultTypeInternal _Action_default_instance_;
class Author;
class AuthorDefaultTypeInternal;
extern AuthorDefaultTypeInternal _Author_default_instance_;
class ContentRating;
class ContentRatingDefaultTypeInternal;
extern ContentRatingDefaultTypeInternal _ContentRating_default_instance_;
class ContentRatingSet;
class ContentRatingSetDefaultTypeInternal;
extern ContentRatingSetDefaultTypeInternal _ContentRatingSet_default_instance_;
class FeedResetToken;
class FeedResetTokenDefaultTypeInternal;
extern FeedResetTokenDefaultTypeInternal _FeedResetToken_default_instance_;
class GenreSet;
class GenreSetDefaultTypeInternal;
extern GenreSetDefaultTypeInternal _GenreSet_default_instance_;
class Identifier;
class IdentifierDefaultTypeInternal;
extern IdentifierDefaultTypeInternal _Identifier_default_instance_;
class IdentifierSet;
class IdentifierSetDefaultTypeInternal;
extern IdentifierSetDefaultTypeInternal _IdentifierSet_default_instance_;
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class ImageSet;
class ImageSetDefaultTypeInternal;
extern ImageSetDefaultTypeInternal _ImageSet_default_instance_;
class InteractionCounter;
class InteractionCounterDefaultTypeInternal;
extern InteractionCounterDefaultTypeInternal _InteractionCounter_default_instance_;
class InteractionCounterSet;
class InteractionCounterSetDefaultTypeInternal;
extern InteractionCounterSetDefaultTypeInternal _InteractionCounterSet_default_instance_;
class LiveDetails;
class LiveDetailsDefaultTypeInternal;
extern LiveDetailsDefaultTypeInternal _LiveDetails_default_instance_;
class PlayNextCandidate;
class PlayNextCandidateDefaultTypeInternal;
extern PlayNextCandidateDefaultTypeInternal _PlayNextCandidate_default_instance_;
class TVEpisode;
class TVEpisodeDefaultTypeInternal;
extern TVEpisodeDefaultTypeInternal _TVEpisode_default_instance_;
class UserIdentifier;
class UserIdentifierDefaultTypeInternal;
extern UserIdentifierDefaultTypeInternal _UserIdentifier_default_instance_;
}  // namespace media_feeds
PROTOBUF_NAMESPACE_OPEN
template<> ::media_feeds::Action* Arena::CreateMaybeMessage<::media_feeds::Action>(Arena*);
template<> ::media_feeds::Author* Arena::CreateMaybeMessage<::media_feeds::Author>(Arena*);
template<> ::media_feeds::ContentRating* Arena::CreateMaybeMessage<::media_feeds::ContentRating>(Arena*);
template<> ::media_feeds::ContentRatingSet* Arena::CreateMaybeMessage<::media_feeds::ContentRatingSet>(Arena*);
template<> ::media_feeds::FeedResetToken* Arena::CreateMaybeMessage<::media_feeds::FeedResetToken>(Arena*);
template<> ::media_feeds::GenreSet* Arena::CreateMaybeMessage<::media_feeds::GenreSet>(Arena*);
template<> ::media_feeds::Identifier* Arena::CreateMaybeMessage<::media_feeds::Identifier>(Arena*);
template<> ::media_feeds::IdentifierSet* Arena::CreateMaybeMessage<::media_feeds::IdentifierSet>(Arena*);
template<> ::media_feeds::Image* Arena::CreateMaybeMessage<::media_feeds::Image>(Arena*);
template<> ::media_feeds::ImageSet* Arena::CreateMaybeMessage<::media_feeds::ImageSet>(Arena*);
template<> ::media_feeds::InteractionCounter* Arena::CreateMaybeMessage<::media_feeds::InteractionCounter>(Arena*);
template<> ::media_feeds::InteractionCounterSet* Arena::CreateMaybeMessage<::media_feeds::InteractionCounterSet>(Arena*);
template<> ::media_feeds::LiveDetails* Arena::CreateMaybeMessage<::media_feeds::LiveDetails>(Arena*);
template<> ::media_feeds::PlayNextCandidate* Arena::CreateMaybeMessage<::media_feeds::PlayNextCandidate>(Arena*);
template<> ::media_feeds::TVEpisode* Arena::CreateMaybeMessage<::media_feeds::TVEpisode>(Arena*);
template<> ::media_feeds::UserIdentifier* Arena::CreateMaybeMessage<::media_feeds::UserIdentifier>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace media_feeds {

enum InteractionCounter_Type : int {
  InteractionCounter_Type_WATCH = 0,
  InteractionCounter_Type_LIKE = 1,
  InteractionCounter_Type_DISLIKE = 2,
  InteractionCounter_Type_InteractionCounter_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  InteractionCounter_Type_InteractionCounter_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool InteractionCounter_Type_IsValid(int value);
constexpr InteractionCounter_Type InteractionCounter_Type_Type_MIN = InteractionCounter_Type_WATCH;
constexpr InteractionCounter_Type InteractionCounter_Type_Type_MAX = InteractionCounter_Type_DISLIKE;
constexpr int InteractionCounter_Type_Type_ARRAYSIZE = InteractionCounter_Type_Type_MAX + 1;

const std::string& InteractionCounter_Type_Name(InteractionCounter_Type value);
template<typename T>
inline const std::string& InteractionCounter_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InteractionCounter_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InteractionCounter_Type_Name.");
  return InteractionCounter_Type_Name(static_cast<InteractionCounter_Type>(enum_t_value));
}
bool InteractionCounter_Type_Parse(
    const std::string& name, InteractionCounter_Type* value);
enum Identifier_Type : int {
  Identifier_Type_TMS_ROOT_ID = 0,
  Identifier_Type_TMS_ID = 1,
  Identifier_Type_PARTNER_ID = 2,
  Identifier_Type_Identifier_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Identifier_Type_Identifier_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Identifier_Type_IsValid(int value);
constexpr Identifier_Type Identifier_Type_Type_MIN = Identifier_Type_TMS_ROOT_ID;
constexpr Identifier_Type Identifier_Type_Type_MAX = Identifier_Type_PARTNER_ID;
constexpr int Identifier_Type_Type_ARRAYSIZE = Identifier_Type_Type_MAX + 1;

const std::string& Identifier_Type_Name(Identifier_Type value);
template<typename T>
inline const std::string& Identifier_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Identifier_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Identifier_Type_Name.");
  return Identifier_Type_Name(static_cast<Identifier_Type>(enum_t_value));
}
bool Identifier_Type_Parse(
    const std::string& name, Identifier_Type* value);
enum Image_ContentAttribute : int {
  Image_ContentAttribute_CONTENT_ATTRIBUTE_UNSPECIFIED = 0,
  Image_ContentAttribute_ICONIC = 1,
  Image_ContentAttribute_SCENE_STILL = 2,
  Image_ContentAttribute_POSTER = 3,
  Image_ContentAttribute_BACKGROUND = 4,
  Image_ContentAttribute_FOR_DARK_BACKGROUND = 5,
  Image_ContentAttribute_FOR_LIGHT_BACKGROUND = 6,
  Image_ContentAttribute_CENTERED = 7,
  Image_ContentAttribute_RIGHT_CENTERED = 8,
  Image_ContentAttribute_LEFT_CENTERED = 9,
  Image_ContentAttribute_HAS_TRANSPARENT_BACKGROUND = 10,
  Image_ContentAttribute_HAS_TITLE = 11,
  Image_ContentAttribute_NO_TITLE = 12,
  Image_ContentAttribute_Image_ContentAttribute_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Image_ContentAttribute_Image_ContentAttribute_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Image_ContentAttribute_IsValid(int value);
constexpr Image_ContentAttribute Image_ContentAttribute_ContentAttribute_MIN = Image_ContentAttribute_CONTENT_ATTRIBUTE_UNSPECIFIED;
constexpr Image_ContentAttribute Image_ContentAttribute_ContentAttribute_MAX = Image_ContentAttribute_NO_TITLE;
constexpr int Image_ContentAttribute_ContentAttribute_ARRAYSIZE = Image_ContentAttribute_ContentAttribute_MAX + 1;

const std::string& Image_ContentAttribute_Name(Image_ContentAttribute value);
template<typename T>
inline const std::string& Image_ContentAttribute_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Image_ContentAttribute>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Image_ContentAttribute_Name.");
  return Image_ContentAttribute_Name(static_cast<Image_ContentAttribute>(enum_t_value));
}
bool Image_ContentAttribute_Parse(
    const std::string& name, Image_ContentAttribute* value);
// ===================================================================

class ContentRating :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:media_feeds.ContentRating) */ {
 public:
  ContentRating();
  virtual ~ContentRating();

  ContentRating(const ContentRating& from);
  ContentRating(ContentRating&& from) noexcept
    : ContentRating() {
    *this = ::std::move(from);
  }

  inline ContentRating& operator=(const ContentRating& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentRating& operator=(ContentRating&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ContentRating& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContentRating* internal_default_instance() {
    return reinterpret_cast<const ContentRating*>(
               &_ContentRating_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ContentRating& a, ContentRating& b) {
    a.Swap(&b);
  }
  inline void Swap(ContentRating* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContentRating* New() const final {
    return CreateMaybeMessage<ContentRating>(nullptr);
  }

  ContentRating* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContentRating>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ContentRating& from);
  void MergeFrom(const ContentRating& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContentRating* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media_feeds.ContentRating";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgencyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string agency = 1;
  void clear_agency();
  const std::string& agency() const;
  void set_agency(const std::string& value);
  void set_agency(std::string&& value);
  void set_agency(const char* value);
  void set_agency(const char* value, size_t size);
  std::string* mutable_agency();
  std::string* release_agency();
  void set_allocated_agency(std::string* agency);

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // @@protoc_insertion_point(class_scope:media_feeds.ContentRating)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_5ffeeds_2eproto;
};
// -------------------------------------------------------------------

class ContentRatingSet :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:media_feeds.ContentRatingSet) */ {
 public:
  ContentRatingSet();
  virtual ~ContentRatingSet();

  ContentRatingSet(const ContentRatingSet& from);
  ContentRatingSet(ContentRatingSet&& from) noexcept
    : ContentRatingSet() {
    *this = ::std::move(from);
  }

  inline ContentRatingSet& operator=(const ContentRatingSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentRatingSet& operator=(ContentRatingSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ContentRatingSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContentRatingSet* internal_default_instance() {
    return reinterpret_cast<const ContentRatingSet*>(
               &_ContentRatingSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ContentRatingSet& a, ContentRatingSet& b) {
    a.Swap(&b);
  }
  inline void Swap(ContentRatingSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContentRatingSet* New() const final {
    return CreateMaybeMessage<ContentRatingSet>(nullptr);
  }

  ContentRatingSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContentRatingSet>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ContentRatingSet& from);
  void MergeFrom(const ContentRatingSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContentRatingSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media_feeds.ContentRatingSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRatingFieldNumber = 1,
  };
  // repeated .media_feeds.ContentRating rating = 1;
  int rating_size() const;
  void clear_rating();
  ::media_feeds::ContentRating* mutable_rating(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::ContentRating >*
      mutable_rating();
  const ::media_feeds::ContentRating& rating(int index) const;
  ::media_feeds::ContentRating* add_rating();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::ContentRating >&
      rating() const;

  // @@protoc_insertion_point(class_scope:media_feeds.ContentRatingSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::ContentRating > rating_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_5ffeeds_2eproto;
};
// -------------------------------------------------------------------

class GenreSet :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:media_feeds.GenreSet) */ {
 public:
  GenreSet();
  virtual ~GenreSet();

  GenreSet(const GenreSet& from);
  GenreSet(GenreSet&& from) noexcept
    : GenreSet() {
    *this = ::std::move(from);
  }

  inline GenreSet& operator=(const GenreSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenreSet& operator=(GenreSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GenreSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenreSet* internal_default_instance() {
    return reinterpret_cast<const GenreSet*>(
               &_GenreSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GenreSet& a, GenreSet& b) {
    a.Swap(&b);
  }
  inline void Swap(GenreSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenreSet* New() const final {
    return CreateMaybeMessage<GenreSet>(nullptr);
  }

  GenreSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenreSet>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GenreSet& from);
  void MergeFrom(const GenreSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GenreSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media_feeds.GenreSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGenreFieldNumber = 1,
  };
  // repeated string genre = 1;
  int genre_size() const;
  void clear_genre();
  const std::string& genre(int index) const;
  std::string* mutable_genre(int index);
  void set_genre(int index, const std::string& value);
  void set_genre(int index, std::string&& value);
  void set_genre(int index, const char* value);
  void set_genre(int index, const char* value, size_t size);
  std::string* add_genre();
  void add_genre(const std::string& value);
  void add_genre(std::string&& value);
  void add_genre(const char* value);
  void add_genre(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& genre() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_genre();

  // @@protoc_insertion_point(class_scope:media_feeds.GenreSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> genre_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_5ffeeds_2eproto;
};
// -------------------------------------------------------------------

class InteractionCounter :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:media_feeds.InteractionCounter) */ {
 public:
  InteractionCounter();
  virtual ~InteractionCounter();

  InteractionCounter(const InteractionCounter& from);
  InteractionCounter(InteractionCounter&& from) noexcept
    : InteractionCounter() {
    *this = ::std::move(from);
  }

  inline InteractionCounter& operator=(const InteractionCounter& from) {
    CopyFrom(from);
    return *this;
  }
  inline InteractionCounter& operator=(InteractionCounter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const InteractionCounter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InteractionCounter* internal_default_instance() {
    return reinterpret_cast<const InteractionCounter*>(
               &_InteractionCounter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InteractionCounter& a, InteractionCounter& b) {
    a.Swap(&b);
  }
  inline void Swap(InteractionCounter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InteractionCounter* New() const final {
    return CreateMaybeMessage<InteractionCounter>(nullptr);
  }

  InteractionCounter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InteractionCounter>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const InteractionCounter& from);
  void MergeFrom(const InteractionCounter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InteractionCounter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media_feeds.InteractionCounter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef InteractionCounter_Type Type;
  static constexpr Type WATCH =
    InteractionCounter_Type_WATCH;
  static constexpr Type LIKE =
    InteractionCounter_Type_LIKE;
  static constexpr Type DISLIKE =
    InteractionCounter_Type_DISLIKE;
  static inline bool Type_IsValid(int value) {
    return InteractionCounter_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    InteractionCounter_Type_Type_MIN;
  static constexpr Type Type_MAX =
    InteractionCounter_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    InteractionCounter_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return InteractionCounter_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return InteractionCounter_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // uint64 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // .media_feeds.InteractionCounter.Type type = 1;
  void clear_type();
  ::media_feeds::InteractionCounter_Type type() const;
  void set_type(::media_feeds::InteractionCounter_Type value);

  // @@protoc_insertion_point(class_scope:media_feeds.InteractionCounter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 count_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_5ffeeds_2eproto;
};
// -------------------------------------------------------------------

class InteractionCounterSet :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:media_feeds.InteractionCounterSet) */ {
 public:
  InteractionCounterSet();
  virtual ~InteractionCounterSet();

  InteractionCounterSet(const InteractionCounterSet& from);
  InteractionCounterSet(InteractionCounterSet&& from) noexcept
    : InteractionCounterSet() {
    *this = ::std::move(from);
  }

  inline InteractionCounterSet& operator=(const InteractionCounterSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline InteractionCounterSet& operator=(InteractionCounterSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const InteractionCounterSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InteractionCounterSet* internal_default_instance() {
    return reinterpret_cast<const InteractionCounterSet*>(
               &_InteractionCounterSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InteractionCounterSet& a, InteractionCounterSet& b) {
    a.Swap(&b);
  }
  inline void Swap(InteractionCounterSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InteractionCounterSet* New() const final {
    return CreateMaybeMessage<InteractionCounterSet>(nullptr);
  }

  InteractionCounterSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InteractionCounterSet>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const InteractionCounterSet& from);
  void MergeFrom(const InteractionCounterSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InteractionCounterSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media_feeds.InteractionCounterSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCounterFieldNumber = 1,
  };
  // repeated .media_feeds.InteractionCounter counter = 1;
  int counter_size() const;
  void clear_counter();
  ::media_feeds::InteractionCounter* mutable_counter(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::InteractionCounter >*
      mutable_counter();
  const ::media_feeds::InteractionCounter& counter(int index) const;
  ::media_feeds::InteractionCounter* add_counter();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::InteractionCounter >&
      counter() const;

  // @@protoc_insertion_point(class_scope:media_feeds.InteractionCounterSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::InteractionCounter > counter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_5ffeeds_2eproto;
};
// -------------------------------------------------------------------

class Author :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:media_feeds.Author) */ {
 public:
  Author();
  virtual ~Author();

  Author(const Author& from);
  Author(Author&& from) noexcept
    : Author() {
    *this = ::std::move(from);
  }

  inline Author& operator=(const Author& from) {
    CopyFrom(from);
    return *this;
  }
  inline Author& operator=(Author&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Author& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Author* internal_default_instance() {
    return reinterpret_cast<const Author*>(
               &_Author_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Author& a, Author& b) {
    a.Swap(&b);
  }
  inline void Swap(Author* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Author* New() const final {
    return CreateMaybeMessage<Author>(nullptr);
  }

  Author* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Author>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Author& from);
  void MergeFrom(const Author& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Author* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media_feeds.Author";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kUrlFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string url = 2;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // @@protoc_insertion_point(class_scope:media_feeds.Author)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_5ffeeds_2eproto;
};
// -------------------------------------------------------------------

class Identifier :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:media_feeds.Identifier) */ {
 public:
  Identifier();
  virtual ~Identifier();

  Identifier(const Identifier& from);
  Identifier(Identifier&& from) noexcept
    : Identifier() {
    *this = ::std::move(from);
  }

  inline Identifier& operator=(const Identifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline Identifier& operator=(Identifier&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Identifier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Identifier* internal_default_instance() {
    return reinterpret_cast<const Identifier*>(
               &_Identifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Identifier& a, Identifier& b) {
    a.Swap(&b);
  }
  inline void Swap(Identifier* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Identifier* New() const final {
    return CreateMaybeMessage<Identifier>(nullptr);
  }

  Identifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Identifier>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Identifier& from);
  void MergeFrom(const Identifier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Identifier* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media_feeds.Identifier";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Identifier_Type Type;
  static constexpr Type TMS_ROOT_ID =
    Identifier_Type_TMS_ROOT_ID;
  static constexpr Type TMS_ID =
    Identifier_Type_TMS_ID;
  static constexpr Type PARTNER_ID =
    Identifier_Type_PARTNER_ID;
  static inline bool Type_IsValid(int value) {
    return Identifier_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Identifier_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Identifier_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Identifier_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Identifier_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Identifier_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // .media_feeds.Identifier.Type type = 1;
  void clear_type();
  ::media_feeds::Identifier_Type type() const;
  void set_type(::media_feeds::Identifier_Type value);

  // @@protoc_insertion_point(class_scope:media_feeds.Identifier)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_5ffeeds_2eproto;
};
// -------------------------------------------------------------------

class IdentifierSet :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:media_feeds.IdentifierSet) */ {
 public:
  IdentifierSet();
  virtual ~IdentifierSet();

  IdentifierSet(const IdentifierSet& from);
  IdentifierSet(IdentifierSet&& from) noexcept
    : IdentifierSet() {
    *this = ::std::move(from);
  }

  inline IdentifierSet& operator=(const IdentifierSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline IdentifierSet& operator=(IdentifierSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const IdentifierSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IdentifierSet* internal_default_instance() {
    return reinterpret_cast<const IdentifierSet*>(
               &_IdentifierSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(IdentifierSet& a, IdentifierSet& b) {
    a.Swap(&b);
  }
  inline void Swap(IdentifierSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IdentifierSet* New() const final {
    return CreateMaybeMessage<IdentifierSet>(nullptr);
  }

  IdentifierSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IdentifierSet>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const IdentifierSet& from);
  void MergeFrom(const IdentifierSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IdentifierSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media_feeds.IdentifierSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
  };
  // repeated .media_feeds.Identifier identifier = 1;
  int identifier_size() const;
  void clear_identifier();
  ::media_feeds::Identifier* mutable_identifier(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::Identifier >*
      mutable_identifier();
  const ::media_feeds::Identifier& identifier(int index) const;
  ::media_feeds::Identifier* add_identifier();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::Identifier >&
      identifier() const;

  // @@protoc_insertion_point(class_scope:media_feeds.IdentifierSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::Identifier > identifier_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_5ffeeds_2eproto;
};
// -------------------------------------------------------------------

class Action :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:media_feeds.Action) */ {
 public:
  Action();
  virtual ~Action();

  Action(const Action& from);
  Action(Action&& from) noexcept
    : Action() {
    *this = ::std::move(from);
  }

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  inline Action& operator=(Action&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Action& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Action* internal_default_instance() {
    return reinterpret_cast<const Action*>(
               &_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Action& a, Action& b) {
    a.Swap(&b);
  }
  inline void Swap(Action* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Action* New() const final {
    return CreateMaybeMessage<Action>(nullptr);
  }

  Action* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Action>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Action* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media_feeds.Action";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kStartTimeSecsFieldNumber = 2,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // int64 start_time_secs = 2;
  void clear_start_time_secs();
  ::PROTOBUF_NAMESPACE_ID::int64 start_time_secs() const;
  void set_start_time_secs(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:media_feeds.Action)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_time_secs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_5ffeeds_2eproto;
};
// -------------------------------------------------------------------

class LiveDetails :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:media_feeds.LiveDetails) */ {
 public:
  LiveDetails();
  virtual ~LiveDetails();

  LiveDetails(const LiveDetails& from);
  LiveDetails(LiveDetails&& from) noexcept
    : LiveDetails() {
    *this = ::std::move(from);
  }

  inline LiveDetails& operator=(const LiveDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiveDetails& operator=(LiveDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const LiveDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LiveDetails* internal_default_instance() {
    return reinterpret_cast<const LiveDetails*>(
               &_LiveDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LiveDetails& a, LiveDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(LiveDetails* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LiveDetails* New() const final {
    return CreateMaybeMessage<LiveDetails>(nullptr);
  }

  LiveDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LiveDetails>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LiveDetails& from);
  void MergeFrom(const LiveDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LiveDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media_feeds.LiveDetails";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTimeSecsFieldNumber = 1,
    kEndTimeSecsFieldNumber = 2,
  };
  // int64 start_time_secs = 1;
  void clear_start_time_secs();
  ::PROTOBUF_NAMESPACE_ID::int64 start_time_secs() const;
  void set_start_time_secs(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 end_time_secs = 2;
  void clear_end_time_secs();
  ::PROTOBUF_NAMESPACE_ID::int64 end_time_secs() const;
  void set_end_time_secs(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:media_feeds.LiveDetails)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 start_time_secs_;
  ::PROTOBUF_NAMESPACE_ID::int64 end_time_secs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_5ffeeds_2eproto;
};
// -------------------------------------------------------------------

class PlayNextCandidate :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:media_feeds.PlayNextCandidate) */ {
 public:
  PlayNextCandidate();
  virtual ~PlayNextCandidate();

  PlayNextCandidate(const PlayNextCandidate& from);
  PlayNextCandidate(PlayNextCandidate&& from) noexcept
    : PlayNextCandidate() {
    *this = ::std::move(from);
  }

  inline PlayNextCandidate& operator=(const PlayNextCandidate& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayNextCandidate& operator=(PlayNextCandidate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PlayNextCandidate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayNextCandidate* internal_default_instance() {
    return reinterpret_cast<const PlayNextCandidate*>(
               &_PlayNextCandidate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PlayNextCandidate& a, PlayNextCandidate& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayNextCandidate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayNextCandidate* New() const final {
    return CreateMaybeMessage<PlayNextCandidate>(nullptr);
  }

  PlayNextCandidate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayNextCandidate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PlayNextCandidate& from);
  void MergeFrom(const PlayNextCandidate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlayNextCandidate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media_feeds.PlayNextCandidate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 6,
    kImageFieldNumber = 7,
    kNameFieldNumber = 1,
    kActionFieldNumber = 4,
    kSeasonNumberFieldNumber = 2,
    kEpisodeNumberFieldNumber = 3,
    kDurationSecsFieldNumber = 5,
  };
  // repeated .media_feeds.Identifier identifier = 6;
  int identifier_size() const;
  void clear_identifier();
  ::media_feeds::Identifier* mutable_identifier(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::Identifier >*
      mutable_identifier();
  const ::media_feeds::Identifier& identifier(int index) const;
  ::media_feeds::Identifier* add_identifier();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::Identifier >&
      identifier() const;

  // repeated .media_feeds.Image image = 7;
  int image_size() const;
  void clear_image();
  ::media_feeds::Image* mutable_image(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::Image >*
      mutable_image();
  const ::media_feeds::Image& image(int index) const;
  ::media_feeds::Image* add_image();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::Image >&
      image() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .media_feeds.Action action = 4;
  bool has_action() const;
  void clear_action();
  const ::media_feeds::Action& action() const;
  ::media_feeds::Action* release_action();
  ::media_feeds::Action* mutable_action();
  void set_allocated_action(::media_feeds::Action* action);

  // int64 season_number = 2;
  void clear_season_number();
  ::PROTOBUF_NAMESPACE_ID::int64 season_number() const;
  void set_season_number(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 episode_number = 3;
  void clear_episode_number();
  ::PROTOBUF_NAMESPACE_ID::int64 episode_number() const;
  void set_episode_number(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 duration_secs = 5;
  void clear_duration_secs();
  ::PROTOBUF_NAMESPACE_ID::int64 duration_secs() const;
  void set_duration_secs(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:media_feeds.PlayNextCandidate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::Identifier > identifier_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::Image > image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::media_feeds::Action* action_;
  ::PROTOBUF_NAMESPACE_ID::int64 season_number_;
  ::PROTOBUF_NAMESPACE_ID::int64 episode_number_;
  ::PROTOBUF_NAMESPACE_ID::int64 duration_secs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_5ffeeds_2eproto;
};
// -------------------------------------------------------------------

class TVEpisode :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:media_feeds.TVEpisode) */ {
 public:
  TVEpisode();
  virtual ~TVEpisode();

  TVEpisode(const TVEpisode& from);
  TVEpisode(TVEpisode&& from) noexcept
    : TVEpisode() {
    *this = ::std::move(from);
  }

  inline TVEpisode& operator=(const TVEpisode& from) {
    CopyFrom(from);
    return *this;
  }
  inline TVEpisode& operator=(TVEpisode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TVEpisode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TVEpisode* internal_default_instance() {
    return reinterpret_cast<const TVEpisode*>(
               &_TVEpisode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TVEpisode& a, TVEpisode& b) {
    a.Swap(&b);
  }
  inline void Swap(TVEpisode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TVEpisode* New() const final {
    return CreateMaybeMessage<TVEpisode>(nullptr);
  }

  TVEpisode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TVEpisode>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TVEpisode& from);
  void MergeFrom(const TVEpisode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TVEpisode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media_feeds.TVEpisode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 4,
    kImageFieldNumber = 6,
    kNameFieldNumber = 1,
    kLiveDetailsFieldNumber = 7,
    kEpisodeNumberFieldNumber = 2,
    kSeasonNumberFieldNumber = 3,
    kDurationSecsFieldNumber = 5,
  };
  // repeated .media_feeds.Identifier identifier = 4;
  int identifier_size() const;
  void clear_identifier();
  ::media_feeds::Identifier* mutable_identifier(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::Identifier >*
      mutable_identifier();
  const ::media_feeds::Identifier& identifier(int index) const;
  ::media_feeds::Identifier* add_identifier();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::Identifier >&
      identifier() const;

  // repeated .media_feeds.Image image = 6;
  int image_size() const;
  void clear_image();
  ::media_feeds::Image* mutable_image(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::Image >*
      mutable_image();
  const ::media_feeds::Image& image(int index) const;
  ::media_feeds::Image* add_image();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::Image >&
      image() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .media_feeds.LiveDetails live_details = 7;
  bool has_live_details() const;
  void clear_live_details();
  const ::media_feeds::LiveDetails& live_details() const;
  ::media_feeds::LiveDetails* release_live_details();
  ::media_feeds::LiveDetails* mutable_live_details();
  void set_allocated_live_details(::media_feeds::LiveDetails* live_details);

  // int64 episode_number = 2;
  void clear_episode_number();
  ::PROTOBUF_NAMESPACE_ID::int64 episode_number() const;
  void set_episode_number(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 season_number = 3;
  void clear_season_number();
  ::PROTOBUF_NAMESPACE_ID::int64 season_number() const;
  void set_season_number(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 duration_secs = 5;
  void clear_duration_secs();
  ::PROTOBUF_NAMESPACE_ID::int64 duration_secs() const;
  void set_duration_secs(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:media_feeds.TVEpisode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::Identifier > identifier_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::Image > image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::media_feeds::LiveDetails* live_details_;
  ::PROTOBUF_NAMESPACE_ID::int64 episode_number_;
  ::PROTOBUF_NAMESPACE_ID::int64 season_number_;
  ::PROTOBUF_NAMESPACE_ID::int64 duration_secs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_5ffeeds_2eproto;
};
// -------------------------------------------------------------------

class Image :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:media_feeds.Image) */ {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Image& operator=(Image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }
  inline void Swap(Image* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const final {
    return CreateMaybeMessage<Image>(nullptr);
  }

  Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Image* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media_feeds.Image";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Image_ContentAttribute ContentAttribute;
  static constexpr ContentAttribute CONTENT_ATTRIBUTE_UNSPECIFIED =
    Image_ContentAttribute_CONTENT_ATTRIBUTE_UNSPECIFIED;
  static constexpr ContentAttribute ICONIC =
    Image_ContentAttribute_ICONIC;
  static constexpr ContentAttribute SCENE_STILL =
    Image_ContentAttribute_SCENE_STILL;
  static constexpr ContentAttribute POSTER =
    Image_ContentAttribute_POSTER;
  static constexpr ContentAttribute BACKGROUND =
    Image_ContentAttribute_BACKGROUND;
  static constexpr ContentAttribute FOR_DARK_BACKGROUND =
    Image_ContentAttribute_FOR_DARK_BACKGROUND;
  static constexpr ContentAttribute FOR_LIGHT_BACKGROUND =
    Image_ContentAttribute_FOR_LIGHT_BACKGROUND;
  static constexpr ContentAttribute CENTERED =
    Image_ContentAttribute_CENTERED;
  static constexpr ContentAttribute RIGHT_CENTERED =
    Image_ContentAttribute_RIGHT_CENTERED;
  static constexpr ContentAttribute LEFT_CENTERED =
    Image_ContentAttribute_LEFT_CENTERED;
  static constexpr ContentAttribute HAS_TRANSPARENT_BACKGROUND =
    Image_ContentAttribute_HAS_TRANSPARENT_BACKGROUND;
  static constexpr ContentAttribute HAS_TITLE =
    Image_ContentAttribute_HAS_TITLE;
  static constexpr ContentAttribute NO_TITLE =
    Image_ContentAttribute_NO_TITLE;
  static inline bool ContentAttribute_IsValid(int value) {
    return Image_ContentAttribute_IsValid(value);
  }
  static constexpr ContentAttribute ContentAttribute_MIN =
    Image_ContentAttribute_ContentAttribute_MIN;
  static constexpr ContentAttribute ContentAttribute_MAX =
    Image_ContentAttribute_ContentAttribute_MAX;
  static constexpr int ContentAttribute_ARRAYSIZE =
    Image_ContentAttribute_ContentAttribute_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ContentAttribute_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ContentAttribute>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ContentAttribute_Name.");
    return Image_ContentAttribute_Name(enum_t_value);
  }
  static inline bool ContentAttribute_Parse(const std::string& name,
      ContentAttribute* value) {
    return Image_ContentAttribute_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kContentAttributeFieldNumber = 4,
    kUrlFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // repeated .media_feeds.Image.ContentAttribute content_attribute = 4;
  int content_attribute_size() const;
  void clear_content_attribute();
  ::media_feeds::Image_ContentAttribute content_attribute(int index) const;
  void set_content_attribute(int index, ::media_feeds::Image_ContentAttribute value);
  void add_content_attribute(::media_feeds::Image_ContentAttribute value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& content_attribute() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_content_attribute();

  // string url = 1;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // int64 width = 2;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int64 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int64 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:media_feeds.Image)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> content_attribute_;
  mutable std::atomic<int> _content_attribute_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::int64 width_;
  ::PROTOBUF_NAMESPACE_ID::int64 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_5ffeeds_2eproto;
};
// -------------------------------------------------------------------

class ImageSet :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:media_feeds.ImageSet) */ {
 public:
  ImageSet();
  virtual ~ImageSet();

  ImageSet(const ImageSet& from);
  ImageSet(ImageSet&& from) noexcept
    : ImageSet() {
    *this = ::std::move(from);
  }

  inline ImageSet& operator=(const ImageSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageSet& operator=(ImageSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ImageSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageSet* internal_default_instance() {
    return reinterpret_cast<const ImageSet*>(
               &_ImageSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ImageSet& a, ImageSet& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageSet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageSet* New() const final {
    return CreateMaybeMessage<ImageSet>(nullptr);
  }

  ImageSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageSet>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ImageSet& from);
  void MergeFrom(const ImageSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImageSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media_feeds.ImageSet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 1,
  };
  // repeated .media_feeds.Image image = 1;
  int image_size() const;
  void clear_image();
  ::media_feeds::Image* mutable_image(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::Image >*
      mutable_image();
  const ::media_feeds::Image& image(int index) const;
  ::media_feeds::Image* add_image();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::Image >&
      image() const;

  // @@protoc_insertion_point(class_scope:media_feeds.ImageSet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::Image > image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_5ffeeds_2eproto;
};
// -------------------------------------------------------------------

class FeedResetToken :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:media_feeds.FeedResetToken) */ {
 public:
  FeedResetToken();
  virtual ~FeedResetToken();

  FeedResetToken(const FeedResetToken& from);
  FeedResetToken(FeedResetToken&& from) noexcept
    : FeedResetToken() {
    *this = ::std::move(from);
  }

  inline FeedResetToken& operator=(const FeedResetToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeedResetToken& operator=(FeedResetToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const FeedResetToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeedResetToken* internal_default_instance() {
    return reinterpret_cast<const FeedResetToken*>(
               &_FeedResetToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(FeedResetToken& a, FeedResetToken& b) {
    a.Swap(&b);
  }
  inline void Swap(FeedResetToken* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FeedResetToken* New() const final {
    return CreateMaybeMessage<FeedResetToken>(nullptr);
  }

  FeedResetToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FeedResetToken>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FeedResetToken& from);
  void MergeFrom(const FeedResetToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FeedResetToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media_feeds.FeedResetToken";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHighFieldNumber = 1,
    kLowFieldNumber = 2,
  };
  // uint64 high = 1;
  void clear_high();
  ::PROTOBUF_NAMESPACE_ID::uint64 high() const;
  void set_high(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 low = 2;
  void clear_low();
  ::PROTOBUF_NAMESPACE_ID::uint64 low() const;
  void set_low(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:media_feeds.FeedResetToken)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 high_;
  ::PROTOBUF_NAMESPACE_ID::uint64 low_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_5ffeeds_2eproto;
};
// -------------------------------------------------------------------

class UserIdentifier :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:media_feeds.UserIdentifier) */ {
 public:
  UserIdentifier();
  virtual ~UserIdentifier();

  UserIdentifier(const UserIdentifier& from);
  UserIdentifier(UserIdentifier&& from) noexcept
    : UserIdentifier() {
    *this = ::std::move(from);
  }

  inline UserIdentifier& operator=(const UserIdentifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserIdentifier& operator=(UserIdentifier&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const UserIdentifier& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserIdentifier* internal_default_instance() {
    return reinterpret_cast<const UserIdentifier*>(
               &_UserIdentifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(UserIdentifier& a, UserIdentifier& b) {
    a.Swap(&b);
  }
  inline void Swap(UserIdentifier* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserIdentifier* New() const final {
    return CreateMaybeMessage<UserIdentifier>(nullptr);
  }

  UserIdentifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserIdentifier>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const UserIdentifier& from);
  void MergeFrom(const UserIdentifier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserIdentifier* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media_feeds.UserIdentifier";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kEmailFieldNumber = 2,
    kImageFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string email = 2;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);

  // .media_feeds.Image image = 3;
  bool has_image() const;
  void clear_image();
  const ::media_feeds::Image& image() const;
  ::media_feeds::Image* release_image();
  ::media_feeds::Image* mutable_image();
  void set_allocated_image(::media_feeds::Image* image);

  // @@protoc_insertion_point(class_scope:media_feeds.UserIdentifier)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::media_feeds::Image* image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_5ffeeds_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ContentRating

// string agency = 1;
inline void ContentRating::clear_agency() {
  agency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContentRating::agency() const {
  // @@protoc_insertion_point(field_get:media_feeds.ContentRating.agency)
  return agency_.GetNoArena();
}
inline void ContentRating::set_agency(const std::string& value) {
  
  agency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:media_feeds.ContentRating.agency)
}
inline void ContentRating::set_agency(std::string&& value) {
  
  agency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:media_feeds.ContentRating.agency)
}
inline void ContentRating::set_agency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  agency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:media_feeds.ContentRating.agency)
}
inline void ContentRating::set_agency(const char* value, size_t size) {
  
  agency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:media_feeds.ContentRating.agency)
}
inline std::string* ContentRating::mutable_agency() {
  
  // @@protoc_insertion_point(field_mutable:media_feeds.ContentRating.agency)
  return agency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContentRating::release_agency() {
  // @@protoc_insertion_point(field_release:media_feeds.ContentRating.agency)
  
  return agency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContentRating::set_allocated_agency(std::string* agency) {
  if (agency != nullptr) {
    
  } else {
    
  }
  agency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), agency);
  // @@protoc_insertion_point(field_set_allocated:media_feeds.ContentRating.agency)
}

// string value = 2;
inline void ContentRating::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContentRating::value() const {
  // @@protoc_insertion_point(field_get:media_feeds.ContentRating.value)
  return value_.GetNoArena();
}
inline void ContentRating::set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:media_feeds.ContentRating.value)
}
inline void ContentRating::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:media_feeds.ContentRating.value)
}
inline void ContentRating::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:media_feeds.ContentRating.value)
}
inline void ContentRating::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:media_feeds.ContentRating.value)
}
inline std::string* ContentRating::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:media_feeds.ContentRating.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContentRating::release_value() {
  // @@protoc_insertion_point(field_release:media_feeds.ContentRating.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContentRating::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:media_feeds.ContentRating.value)
}

// -------------------------------------------------------------------

// ContentRatingSet

// repeated .media_feeds.ContentRating rating = 1;
inline int ContentRatingSet::rating_size() const {
  return rating_.size();
}
inline void ContentRatingSet::clear_rating() {
  rating_.Clear();
}
inline ::media_feeds::ContentRating* ContentRatingSet::mutable_rating(int index) {
  // @@protoc_insertion_point(field_mutable:media_feeds.ContentRatingSet.rating)
  return rating_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::ContentRating >*
ContentRatingSet::mutable_rating() {
  // @@protoc_insertion_point(field_mutable_list:media_feeds.ContentRatingSet.rating)
  return &rating_;
}
inline const ::media_feeds::ContentRating& ContentRatingSet::rating(int index) const {
  // @@protoc_insertion_point(field_get:media_feeds.ContentRatingSet.rating)
  return rating_.Get(index);
}
inline ::media_feeds::ContentRating* ContentRatingSet::add_rating() {
  // @@protoc_insertion_point(field_add:media_feeds.ContentRatingSet.rating)
  return rating_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::ContentRating >&
ContentRatingSet::rating() const {
  // @@protoc_insertion_point(field_list:media_feeds.ContentRatingSet.rating)
  return rating_;
}

// -------------------------------------------------------------------

// GenreSet

// repeated string genre = 1;
inline int GenreSet::genre_size() const {
  return genre_.size();
}
inline void GenreSet::clear_genre() {
  genre_.Clear();
}
inline const std::string& GenreSet::genre(int index) const {
  // @@protoc_insertion_point(field_get:media_feeds.GenreSet.genre)
  return genre_.Get(index);
}
inline std::string* GenreSet::mutable_genre(int index) {
  // @@protoc_insertion_point(field_mutable:media_feeds.GenreSet.genre)
  return genre_.Mutable(index);
}
inline void GenreSet::set_genre(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:media_feeds.GenreSet.genre)
  genre_.Mutable(index)->assign(value);
}
inline void GenreSet::set_genre(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:media_feeds.GenreSet.genre)
  genre_.Mutable(index)->assign(std::move(value));
}
inline void GenreSet::set_genre(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  genre_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:media_feeds.GenreSet.genre)
}
inline void GenreSet::set_genre(int index, const char* value, size_t size) {
  genre_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:media_feeds.GenreSet.genre)
}
inline std::string* GenreSet::add_genre() {
  // @@protoc_insertion_point(field_add_mutable:media_feeds.GenreSet.genre)
  return genre_.Add();
}
inline void GenreSet::add_genre(const std::string& value) {
  genre_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:media_feeds.GenreSet.genre)
}
inline void GenreSet::add_genre(std::string&& value) {
  genre_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:media_feeds.GenreSet.genre)
}
inline void GenreSet::add_genre(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  genre_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:media_feeds.GenreSet.genre)
}
inline void GenreSet::add_genre(const char* value, size_t size) {
  genre_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:media_feeds.GenreSet.genre)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GenreSet::genre() const {
  // @@protoc_insertion_point(field_list:media_feeds.GenreSet.genre)
  return genre_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GenreSet::mutable_genre() {
  // @@protoc_insertion_point(field_mutable_list:media_feeds.GenreSet.genre)
  return &genre_;
}

// -------------------------------------------------------------------

// InteractionCounter

// .media_feeds.InteractionCounter.Type type = 1;
inline void InteractionCounter::clear_type() {
  type_ = 0;
}
inline ::media_feeds::InteractionCounter_Type InteractionCounter::type() const {
  // @@protoc_insertion_point(field_get:media_feeds.InteractionCounter.type)
  return static_cast< ::media_feeds::InteractionCounter_Type >(type_);
}
inline void InteractionCounter::set_type(::media_feeds::InteractionCounter_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:media_feeds.InteractionCounter.type)
}

// uint64 count = 2;
inline void InteractionCounter::clear_count() {
  count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InteractionCounter::count() const {
  // @@protoc_insertion_point(field_get:media_feeds.InteractionCounter.count)
  return count_;
}
inline void InteractionCounter::set_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:media_feeds.InteractionCounter.count)
}

// -------------------------------------------------------------------

// InteractionCounterSet

// repeated .media_feeds.InteractionCounter counter = 1;
inline int InteractionCounterSet::counter_size() const {
  return counter_.size();
}
inline void InteractionCounterSet::clear_counter() {
  counter_.Clear();
}
inline ::media_feeds::InteractionCounter* InteractionCounterSet::mutable_counter(int index) {
  // @@protoc_insertion_point(field_mutable:media_feeds.InteractionCounterSet.counter)
  return counter_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::InteractionCounter >*
InteractionCounterSet::mutable_counter() {
  // @@protoc_insertion_point(field_mutable_list:media_feeds.InteractionCounterSet.counter)
  return &counter_;
}
inline const ::media_feeds::InteractionCounter& InteractionCounterSet::counter(int index) const {
  // @@protoc_insertion_point(field_get:media_feeds.InteractionCounterSet.counter)
  return counter_.Get(index);
}
inline ::media_feeds::InteractionCounter* InteractionCounterSet::add_counter() {
  // @@protoc_insertion_point(field_add:media_feeds.InteractionCounterSet.counter)
  return counter_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::InteractionCounter >&
InteractionCounterSet::counter() const {
  // @@protoc_insertion_point(field_list:media_feeds.InteractionCounterSet.counter)
  return counter_;
}

// -------------------------------------------------------------------

// Author

// string name = 1;
inline void Author::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Author::name() const {
  // @@protoc_insertion_point(field_get:media_feeds.Author.name)
  return name_.GetNoArena();
}
inline void Author::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:media_feeds.Author.name)
}
inline void Author::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:media_feeds.Author.name)
}
inline void Author::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:media_feeds.Author.name)
}
inline void Author::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:media_feeds.Author.name)
}
inline std::string* Author::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:media_feeds.Author.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Author::release_name() {
  // @@protoc_insertion_point(field_release:media_feeds.Author.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Author::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:media_feeds.Author.name)
}

// string url = 2;
inline void Author::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Author::url() const {
  // @@protoc_insertion_point(field_get:media_feeds.Author.url)
  return url_.GetNoArena();
}
inline void Author::set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:media_feeds.Author.url)
}
inline void Author::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:media_feeds.Author.url)
}
inline void Author::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:media_feeds.Author.url)
}
inline void Author::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:media_feeds.Author.url)
}
inline std::string* Author::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:media_feeds.Author.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Author::release_url() {
  // @@protoc_insertion_point(field_release:media_feeds.Author.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Author::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:media_feeds.Author.url)
}

// -------------------------------------------------------------------

// Identifier

// .media_feeds.Identifier.Type type = 1;
inline void Identifier::clear_type() {
  type_ = 0;
}
inline ::media_feeds::Identifier_Type Identifier::type() const {
  // @@protoc_insertion_point(field_get:media_feeds.Identifier.type)
  return static_cast< ::media_feeds::Identifier_Type >(type_);
}
inline void Identifier::set_type(::media_feeds::Identifier_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:media_feeds.Identifier.type)
}

// string value = 2;
inline void Identifier::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Identifier::value() const {
  // @@protoc_insertion_point(field_get:media_feeds.Identifier.value)
  return value_.GetNoArena();
}
inline void Identifier::set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:media_feeds.Identifier.value)
}
inline void Identifier::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:media_feeds.Identifier.value)
}
inline void Identifier::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:media_feeds.Identifier.value)
}
inline void Identifier::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:media_feeds.Identifier.value)
}
inline std::string* Identifier::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:media_feeds.Identifier.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Identifier::release_value() {
  // @@protoc_insertion_point(field_release:media_feeds.Identifier.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Identifier::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:media_feeds.Identifier.value)
}

// -------------------------------------------------------------------

// IdentifierSet

// repeated .media_feeds.Identifier identifier = 1;
inline int IdentifierSet::identifier_size() const {
  return identifier_.size();
}
inline void IdentifierSet::clear_identifier() {
  identifier_.Clear();
}
inline ::media_feeds::Identifier* IdentifierSet::mutable_identifier(int index) {
  // @@protoc_insertion_point(field_mutable:media_feeds.IdentifierSet.identifier)
  return identifier_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::Identifier >*
IdentifierSet::mutable_identifier() {
  // @@protoc_insertion_point(field_mutable_list:media_feeds.IdentifierSet.identifier)
  return &identifier_;
}
inline const ::media_feeds::Identifier& IdentifierSet::identifier(int index) const {
  // @@protoc_insertion_point(field_get:media_feeds.IdentifierSet.identifier)
  return identifier_.Get(index);
}
inline ::media_feeds::Identifier* IdentifierSet::add_identifier() {
  // @@protoc_insertion_point(field_add:media_feeds.IdentifierSet.identifier)
  return identifier_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::Identifier >&
IdentifierSet::identifier() const {
  // @@protoc_insertion_point(field_list:media_feeds.IdentifierSet.identifier)
  return identifier_;
}

// -------------------------------------------------------------------

// Action

// string url = 1;
inline void Action::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Action::url() const {
  // @@protoc_insertion_point(field_get:media_feeds.Action.url)
  return url_.GetNoArena();
}
inline void Action::set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:media_feeds.Action.url)
}
inline void Action::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:media_feeds.Action.url)
}
inline void Action::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:media_feeds.Action.url)
}
inline void Action::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:media_feeds.Action.url)
}
inline std::string* Action::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:media_feeds.Action.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Action::release_url() {
  // @@protoc_insertion_point(field_release:media_feeds.Action.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Action::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:media_feeds.Action.url)
}

// int64 start_time_secs = 2;
inline void Action::clear_start_time_secs() {
  start_time_secs_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Action::start_time_secs() const {
  // @@protoc_insertion_point(field_get:media_feeds.Action.start_time_secs)
  return start_time_secs_;
}
inline void Action::set_start_time_secs(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  start_time_secs_ = value;
  // @@protoc_insertion_point(field_set:media_feeds.Action.start_time_secs)
}

// -------------------------------------------------------------------

// LiveDetails

// int64 start_time_secs = 1;
inline void LiveDetails::clear_start_time_secs() {
  start_time_secs_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LiveDetails::start_time_secs() const {
  // @@protoc_insertion_point(field_get:media_feeds.LiveDetails.start_time_secs)
  return start_time_secs_;
}
inline void LiveDetails::set_start_time_secs(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  start_time_secs_ = value;
  // @@protoc_insertion_point(field_set:media_feeds.LiveDetails.start_time_secs)
}

// int64 end_time_secs = 2;
inline void LiveDetails::clear_end_time_secs() {
  end_time_secs_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LiveDetails::end_time_secs() const {
  // @@protoc_insertion_point(field_get:media_feeds.LiveDetails.end_time_secs)
  return end_time_secs_;
}
inline void LiveDetails::set_end_time_secs(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  end_time_secs_ = value;
  // @@protoc_insertion_point(field_set:media_feeds.LiveDetails.end_time_secs)
}

// -------------------------------------------------------------------

// PlayNextCandidate

// string name = 1;
inline void PlayNextCandidate::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlayNextCandidate::name() const {
  // @@protoc_insertion_point(field_get:media_feeds.PlayNextCandidate.name)
  return name_.GetNoArena();
}
inline void PlayNextCandidate::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:media_feeds.PlayNextCandidate.name)
}
inline void PlayNextCandidate::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:media_feeds.PlayNextCandidate.name)
}
inline void PlayNextCandidate::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:media_feeds.PlayNextCandidate.name)
}
inline void PlayNextCandidate::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:media_feeds.PlayNextCandidate.name)
}
inline std::string* PlayNextCandidate::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:media_feeds.PlayNextCandidate.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlayNextCandidate::release_name() {
  // @@protoc_insertion_point(field_release:media_feeds.PlayNextCandidate.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlayNextCandidate::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:media_feeds.PlayNextCandidate.name)
}

// int64 season_number = 2;
inline void PlayNextCandidate::clear_season_number() {
  season_number_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayNextCandidate::season_number() const {
  // @@protoc_insertion_point(field_get:media_feeds.PlayNextCandidate.season_number)
  return season_number_;
}
inline void PlayNextCandidate::set_season_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  season_number_ = value;
  // @@protoc_insertion_point(field_set:media_feeds.PlayNextCandidate.season_number)
}

// int64 episode_number = 3;
inline void PlayNextCandidate::clear_episode_number() {
  episode_number_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayNextCandidate::episode_number() const {
  // @@protoc_insertion_point(field_get:media_feeds.PlayNextCandidate.episode_number)
  return episode_number_;
}
inline void PlayNextCandidate::set_episode_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  episode_number_ = value;
  // @@protoc_insertion_point(field_set:media_feeds.PlayNextCandidate.episode_number)
}

// .media_feeds.Action action = 4;
inline bool PlayNextCandidate::has_action() const {
  return this != internal_default_instance() && action_ != nullptr;
}
inline void PlayNextCandidate::clear_action() {
  if (GetArenaNoVirtual() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
}
inline const ::media_feeds::Action& PlayNextCandidate::action() const {
  const ::media_feeds::Action* p = action_;
  // @@protoc_insertion_point(field_get:media_feeds.PlayNextCandidate.action)
  return p != nullptr ? *p : *reinterpret_cast<const ::media_feeds::Action*>(
      &::media_feeds::_Action_default_instance_);
}
inline ::media_feeds::Action* PlayNextCandidate::release_action() {
  // @@protoc_insertion_point(field_release:media_feeds.PlayNextCandidate.action)
  
  ::media_feeds::Action* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::media_feeds::Action* PlayNextCandidate::mutable_action() {
  
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::media_feeds::Action>(GetArenaNoVirtual());
    action_ = p;
  }
  // @@protoc_insertion_point(field_mutable:media_feeds.PlayNextCandidate.action)
  return action_;
}
inline void PlayNextCandidate::set_allocated_action(::media_feeds::Action* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_;
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    
  } else {
    
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:media_feeds.PlayNextCandidate.action)
}

// int64 duration_secs = 5;
inline void PlayNextCandidate::clear_duration_secs() {
  duration_secs_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayNextCandidate::duration_secs() const {
  // @@protoc_insertion_point(field_get:media_feeds.PlayNextCandidate.duration_secs)
  return duration_secs_;
}
inline void PlayNextCandidate::set_duration_secs(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  duration_secs_ = value;
  // @@protoc_insertion_point(field_set:media_feeds.PlayNextCandidate.duration_secs)
}

// repeated .media_feeds.Identifier identifier = 6;
inline int PlayNextCandidate::identifier_size() const {
  return identifier_.size();
}
inline void PlayNextCandidate::clear_identifier() {
  identifier_.Clear();
}
inline ::media_feeds::Identifier* PlayNextCandidate::mutable_identifier(int index) {
  // @@protoc_insertion_point(field_mutable:media_feeds.PlayNextCandidate.identifier)
  return identifier_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::Identifier >*
PlayNextCandidate::mutable_identifier() {
  // @@protoc_insertion_point(field_mutable_list:media_feeds.PlayNextCandidate.identifier)
  return &identifier_;
}
inline const ::media_feeds::Identifier& PlayNextCandidate::identifier(int index) const {
  // @@protoc_insertion_point(field_get:media_feeds.PlayNextCandidate.identifier)
  return identifier_.Get(index);
}
inline ::media_feeds::Identifier* PlayNextCandidate::add_identifier() {
  // @@protoc_insertion_point(field_add:media_feeds.PlayNextCandidate.identifier)
  return identifier_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::Identifier >&
PlayNextCandidate::identifier() const {
  // @@protoc_insertion_point(field_list:media_feeds.PlayNextCandidate.identifier)
  return identifier_;
}

// repeated .media_feeds.Image image = 7;
inline int PlayNextCandidate::image_size() const {
  return image_.size();
}
inline void PlayNextCandidate::clear_image() {
  image_.Clear();
}
inline ::media_feeds::Image* PlayNextCandidate::mutable_image(int index) {
  // @@protoc_insertion_point(field_mutable:media_feeds.PlayNextCandidate.image)
  return image_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::Image >*
PlayNextCandidate::mutable_image() {
  // @@protoc_insertion_point(field_mutable_list:media_feeds.PlayNextCandidate.image)
  return &image_;
}
inline const ::media_feeds::Image& PlayNextCandidate::image(int index) const {
  // @@protoc_insertion_point(field_get:media_feeds.PlayNextCandidate.image)
  return image_.Get(index);
}
inline ::media_feeds::Image* PlayNextCandidate::add_image() {
  // @@protoc_insertion_point(field_add:media_feeds.PlayNextCandidate.image)
  return image_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::Image >&
PlayNextCandidate::image() const {
  // @@protoc_insertion_point(field_list:media_feeds.PlayNextCandidate.image)
  return image_;
}

// -------------------------------------------------------------------

// TVEpisode

// string name = 1;
inline void TVEpisode::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TVEpisode::name() const {
  // @@protoc_insertion_point(field_get:media_feeds.TVEpisode.name)
  return name_.GetNoArena();
}
inline void TVEpisode::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:media_feeds.TVEpisode.name)
}
inline void TVEpisode::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:media_feeds.TVEpisode.name)
}
inline void TVEpisode::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:media_feeds.TVEpisode.name)
}
inline void TVEpisode::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:media_feeds.TVEpisode.name)
}
inline std::string* TVEpisode::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:media_feeds.TVEpisode.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TVEpisode::release_name() {
  // @@protoc_insertion_point(field_release:media_feeds.TVEpisode.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TVEpisode::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:media_feeds.TVEpisode.name)
}

// int64 episode_number = 2;
inline void TVEpisode::clear_episode_number() {
  episode_number_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TVEpisode::episode_number() const {
  // @@protoc_insertion_point(field_get:media_feeds.TVEpisode.episode_number)
  return episode_number_;
}
inline void TVEpisode::set_episode_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  episode_number_ = value;
  // @@protoc_insertion_point(field_set:media_feeds.TVEpisode.episode_number)
}

// int64 season_number = 3;
inline void TVEpisode::clear_season_number() {
  season_number_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TVEpisode::season_number() const {
  // @@protoc_insertion_point(field_get:media_feeds.TVEpisode.season_number)
  return season_number_;
}
inline void TVEpisode::set_season_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  season_number_ = value;
  // @@protoc_insertion_point(field_set:media_feeds.TVEpisode.season_number)
}

// repeated .media_feeds.Identifier identifier = 4;
inline int TVEpisode::identifier_size() const {
  return identifier_.size();
}
inline void TVEpisode::clear_identifier() {
  identifier_.Clear();
}
inline ::media_feeds::Identifier* TVEpisode::mutable_identifier(int index) {
  // @@protoc_insertion_point(field_mutable:media_feeds.TVEpisode.identifier)
  return identifier_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::Identifier >*
TVEpisode::mutable_identifier() {
  // @@protoc_insertion_point(field_mutable_list:media_feeds.TVEpisode.identifier)
  return &identifier_;
}
inline const ::media_feeds::Identifier& TVEpisode::identifier(int index) const {
  // @@protoc_insertion_point(field_get:media_feeds.TVEpisode.identifier)
  return identifier_.Get(index);
}
inline ::media_feeds::Identifier* TVEpisode::add_identifier() {
  // @@protoc_insertion_point(field_add:media_feeds.TVEpisode.identifier)
  return identifier_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::Identifier >&
TVEpisode::identifier() const {
  // @@protoc_insertion_point(field_list:media_feeds.TVEpisode.identifier)
  return identifier_;
}

// int64 duration_secs = 5;
inline void TVEpisode::clear_duration_secs() {
  duration_secs_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TVEpisode::duration_secs() const {
  // @@protoc_insertion_point(field_get:media_feeds.TVEpisode.duration_secs)
  return duration_secs_;
}
inline void TVEpisode::set_duration_secs(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  duration_secs_ = value;
  // @@protoc_insertion_point(field_set:media_feeds.TVEpisode.duration_secs)
}

// repeated .media_feeds.Image image = 6;
inline int TVEpisode::image_size() const {
  return image_.size();
}
inline void TVEpisode::clear_image() {
  image_.Clear();
}
inline ::media_feeds::Image* TVEpisode::mutable_image(int index) {
  // @@protoc_insertion_point(field_mutable:media_feeds.TVEpisode.image)
  return image_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::Image >*
TVEpisode::mutable_image() {
  // @@protoc_insertion_point(field_mutable_list:media_feeds.TVEpisode.image)
  return &image_;
}
inline const ::media_feeds::Image& TVEpisode::image(int index) const {
  // @@protoc_insertion_point(field_get:media_feeds.TVEpisode.image)
  return image_.Get(index);
}
inline ::media_feeds::Image* TVEpisode::add_image() {
  // @@protoc_insertion_point(field_add:media_feeds.TVEpisode.image)
  return image_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::Image >&
TVEpisode::image() const {
  // @@protoc_insertion_point(field_list:media_feeds.TVEpisode.image)
  return image_;
}

// .media_feeds.LiveDetails live_details = 7;
inline bool TVEpisode::has_live_details() const {
  return this != internal_default_instance() && live_details_ != nullptr;
}
inline void TVEpisode::clear_live_details() {
  if (GetArenaNoVirtual() == nullptr && live_details_ != nullptr) {
    delete live_details_;
  }
  live_details_ = nullptr;
}
inline const ::media_feeds::LiveDetails& TVEpisode::live_details() const {
  const ::media_feeds::LiveDetails* p = live_details_;
  // @@protoc_insertion_point(field_get:media_feeds.TVEpisode.live_details)
  return p != nullptr ? *p : *reinterpret_cast<const ::media_feeds::LiveDetails*>(
      &::media_feeds::_LiveDetails_default_instance_);
}
inline ::media_feeds::LiveDetails* TVEpisode::release_live_details() {
  // @@protoc_insertion_point(field_release:media_feeds.TVEpisode.live_details)
  
  ::media_feeds::LiveDetails* temp = live_details_;
  live_details_ = nullptr;
  return temp;
}
inline ::media_feeds::LiveDetails* TVEpisode::mutable_live_details() {
  
  if (live_details_ == nullptr) {
    auto* p = CreateMaybeMessage<::media_feeds::LiveDetails>(GetArenaNoVirtual());
    live_details_ = p;
  }
  // @@protoc_insertion_point(field_mutable:media_feeds.TVEpisode.live_details)
  return live_details_;
}
inline void TVEpisode::set_allocated_live_details(::media_feeds::LiveDetails* live_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete live_details_;
  }
  if (live_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      live_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, live_details, submessage_arena);
    }
    
  } else {
    
  }
  live_details_ = live_details;
  // @@protoc_insertion_point(field_set_allocated:media_feeds.TVEpisode.live_details)
}

// -------------------------------------------------------------------

// Image

// string url = 1;
inline void Image::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Image::url() const {
  // @@protoc_insertion_point(field_get:media_feeds.Image.url)
  return url_.GetNoArena();
}
inline void Image::set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:media_feeds.Image.url)
}
inline void Image::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:media_feeds.Image.url)
}
inline void Image::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:media_feeds.Image.url)
}
inline void Image::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:media_feeds.Image.url)
}
inline std::string* Image::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:media_feeds.Image.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Image::release_url() {
  // @@protoc_insertion_point(field_release:media_feeds.Image.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:media_feeds.Image.url)
}

// int64 width = 2;
inline void Image::clear_width() {
  width_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Image::width() const {
  // @@protoc_insertion_point(field_get:media_feeds.Image.width)
  return width_;
}
inline void Image::set_width(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:media_feeds.Image.width)
}

// int64 height = 3;
inline void Image::clear_height() {
  height_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Image::height() const {
  // @@protoc_insertion_point(field_get:media_feeds.Image.height)
  return height_;
}
inline void Image::set_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:media_feeds.Image.height)
}

// repeated .media_feeds.Image.ContentAttribute content_attribute = 4;
inline int Image::content_attribute_size() const {
  return content_attribute_.size();
}
inline void Image::clear_content_attribute() {
  content_attribute_.Clear();
}
inline ::media_feeds::Image_ContentAttribute Image::content_attribute(int index) const {
  // @@protoc_insertion_point(field_get:media_feeds.Image.content_attribute)
  return static_cast< ::media_feeds::Image_ContentAttribute >(content_attribute_.Get(index));
}
inline void Image::set_content_attribute(int index, ::media_feeds::Image_ContentAttribute value) {
  content_attribute_.Set(index, value);
  // @@protoc_insertion_point(field_set:media_feeds.Image.content_attribute)
}
inline void Image::add_content_attribute(::media_feeds::Image_ContentAttribute value) {
  content_attribute_.Add(value);
  // @@protoc_insertion_point(field_add:media_feeds.Image.content_attribute)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Image::content_attribute() const {
  // @@protoc_insertion_point(field_list:media_feeds.Image.content_attribute)
  return content_attribute_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Image::mutable_content_attribute() {
  // @@protoc_insertion_point(field_mutable_list:media_feeds.Image.content_attribute)
  return &content_attribute_;
}

// -------------------------------------------------------------------

// ImageSet

// repeated .media_feeds.Image image = 1;
inline int ImageSet::image_size() const {
  return image_.size();
}
inline void ImageSet::clear_image() {
  image_.Clear();
}
inline ::media_feeds::Image* ImageSet::mutable_image(int index) {
  // @@protoc_insertion_point(field_mutable:media_feeds.ImageSet.image)
  return image_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::Image >*
ImageSet::mutable_image() {
  // @@protoc_insertion_point(field_mutable_list:media_feeds.ImageSet.image)
  return &image_;
}
inline const ::media_feeds::Image& ImageSet::image(int index) const {
  // @@protoc_insertion_point(field_get:media_feeds.ImageSet.image)
  return image_.Get(index);
}
inline ::media_feeds::Image* ImageSet::add_image() {
  // @@protoc_insertion_point(field_add:media_feeds.ImageSet.image)
  return image_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media_feeds::Image >&
ImageSet::image() const {
  // @@protoc_insertion_point(field_list:media_feeds.ImageSet.image)
  return image_;
}

// -------------------------------------------------------------------

// FeedResetToken

// uint64 high = 1;
inline void FeedResetToken::clear_high() {
  high_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FeedResetToken::high() const {
  // @@protoc_insertion_point(field_get:media_feeds.FeedResetToken.high)
  return high_;
}
inline void FeedResetToken::set_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  high_ = value;
  // @@protoc_insertion_point(field_set:media_feeds.FeedResetToken.high)
}

// uint64 low = 2;
inline void FeedResetToken::clear_low() {
  low_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FeedResetToken::low() const {
  // @@protoc_insertion_point(field_get:media_feeds.FeedResetToken.low)
  return low_;
}
inline void FeedResetToken::set_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  low_ = value;
  // @@protoc_insertion_point(field_set:media_feeds.FeedResetToken.low)
}

// -------------------------------------------------------------------

// UserIdentifier

// string name = 1;
inline void UserIdentifier::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserIdentifier::name() const {
  // @@protoc_insertion_point(field_get:media_feeds.UserIdentifier.name)
  return name_.GetNoArena();
}
inline void UserIdentifier::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:media_feeds.UserIdentifier.name)
}
inline void UserIdentifier::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:media_feeds.UserIdentifier.name)
}
inline void UserIdentifier::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:media_feeds.UserIdentifier.name)
}
inline void UserIdentifier::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:media_feeds.UserIdentifier.name)
}
inline std::string* UserIdentifier::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:media_feeds.UserIdentifier.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserIdentifier::release_name() {
  // @@protoc_insertion_point(field_release:media_feeds.UserIdentifier.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserIdentifier::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:media_feeds.UserIdentifier.name)
}

// string email = 2;
inline void UserIdentifier::clear_email() {
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserIdentifier::email() const {
  // @@protoc_insertion_point(field_get:media_feeds.UserIdentifier.email)
  return email_.GetNoArena();
}
inline void UserIdentifier::set_email(const std::string& value) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:media_feeds.UserIdentifier.email)
}
inline void UserIdentifier::set_email(std::string&& value) {
  
  email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:media_feeds.UserIdentifier.email)
}
inline void UserIdentifier::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:media_feeds.UserIdentifier.email)
}
inline void UserIdentifier::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:media_feeds.UserIdentifier.email)
}
inline std::string* UserIdentifier::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:media_feeds.UserIdentifier.email)
  return email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserIdentifier::release_email() {
  // @@protoc_insertion_point(field_release:media_feeds.UserIdentifier.email)
  
  return email_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserIdentifier::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:media_feeds.UserIdentifier.email)
}

// .media_feeds.Image image = 3;
inline bool UserIdentifier::has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline void UserIdentifier::clear_image() {
  if (GetArenaNoVirtual() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::media_feeds::Image& UserIdentifier::image() const {
  const ::media_feeds::Image* p = image_;
  // @@protoc_insertion_point(field_get:media_feeds.UserIdentifier.image)
  return p != nullptr ? *p : *reinterpret_cast<const ::media_feeds::Image*>(
      &::media_feeds::_Image_default_instance_);
}
inline ::media_feeds::Image* UserIdentifier::release_image() {
  // @@protoc_insertion_point(field_release:media_feeds.UserIdentifier.image)
  
  ::media_feeds::Image* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::media_feeds::Image* UserIdentifier::mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::media_feeds::Image>(GetArenaNoVirtual());
    image_ = p;
  }
  // @@protoc_insertion_point(field_mutable:media_feeds.UserIdentifier.image)
  return image_;
}
inline void UserIdentifier::set_allocated_image(::media_feeds::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:media_feeds.UserIdentifier.image)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace media_feeds

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::media_feeds::InteractionCounter_Type> : ::std::true_type {};
template <> struct is_proto_enum< ::media_feeds::Identifier_Type> : ::std::true_type {};
template <> struct is_proto_enum< ::media_feeds::Image_ContentAttribute> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_media_5ffeeds_2eproto

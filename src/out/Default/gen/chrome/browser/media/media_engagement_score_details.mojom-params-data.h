// chrome/browser/media/media_engagement_score_details.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_MEDIA_MEDIA_ENGAGEMENT_SCORE_DETAILS_MOJOM_PARAMS_DATA_H_
#define CHROME_BROWSER_MEDIA_MEDIA_ENGAGEMENT_SCORE_DETAILS_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace media {
namespace mojom {
namespace internal {
class  MediaEngagementScoreDetailsProvider_GetMediaEngagementScoreDetails_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaEngagementScoreDetailsProvider_GetMediaEngagementScoreDetails_Params_Data));
      new (data()) MediaEngagementScoreDetailsProvider_GetMediaEngagementScoreDetails_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaEngagementScoreDetailsProvider_GetMediaEngagementScoreDetails_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaEngagementScoreDetailsProvider_GetMediaEngagementScoreDetails_Params_Data>(index_);
    }
    MediaEngagementScoreDetailsProvider_GetMediaEngagementScoreDetails_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  MediaEngagementScoreDetailsProvider_GetMediaEngagementScoreDetails_Params_Data();
  ~MediaEngagementScoreDetailsProvider_GetMediaEngagementScoreDetails_Params_Data() = delete;
};
static_assert(sizeof(MediaEngagementScoreDetailsProvider_GetMediaEngagementScoreDetails_Params_Data) == 8,
              "Bad sizeof(MediaEngagementScoreDetailsProvider_GetMediaEngagementScoreDetails_Params_Data)");
class  MediaEngagementScoreDetailsProvider_GetMediaEngagementScoreDetails_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaEngagementScoreDetailsProvider_GetMediaEngagementScoreDetails_ResponseParams_Data));
      new (data()) MediaEngagementScoreDetailsProvider_GetMediaEngagementScoreDetails_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaEngagementScoreDetailsProvider_GetMediaEngagementScoreDetails_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaEngagementScoreDetailsProvider_GetMediaEngagementScoreDetails_ResponseParams_Data>(index_);
    }
    MediaEngagementScoreDetailsProvider_GetMediaEngagementScoreDetails_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::MediaEngagementScoreDetails_Data>>> info;

 private:
  MediaEngagementScoreDetailsProvider_GetMediaEngagementScoreDetails_ResponseParams_Data();
  ~MediaEngagementScoreDetailsProvider_GetMediaEngagementScoreDetails_ResponseParams_Data() = delete;
};
static_assert(sizeof(MediaEngagementScoreDetailsProvider_GetMediaEngagementScoreDetails_ResponseParams_Data) == 16,
              "Bad sizeof(MediaEngagementScoreDetailsProvider_GetMediaEngagementScoreDetails_ResponseParams_Data)");
class  MediaEngagementScoreDetailsProvider_GetMediaEngagementConfig_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaEngagementScoreDetailsProvider_GetMediaEngagementConfig_Params_Data));
      new (data()) MediaEngagementScoreDetailsProvider_GetMediaEngagementConfig_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaEngagementScoreDetailsProvider_GetMediaEngagementConfig_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaEngagementScoreDetailsProvider_GetMediaEngagementConfig_Params_Data>(index_);
    }
    MediaEngagementScoreDetailsProvider_GetMediaEngagementConfig_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  MediaEngagementScoreDetailsProvider_GetMediaEngagementConfig_Params_Data();
  ~MediaEngagementScoreDetailsProvider_GetMediaEngagementConfig_Params_Data() = delete;
};
static_assert(sizeof(MediaEngagementScoreDetailsProvider_GetMediaEngagementConfig_Params_Data) == 8,
              "Bad sizeof(MediaEngagementScoreDetailsProvider_GetMediaEngagementConfig_Params_Data)");
class  MediaEngagementScoreDetailsProvider_GetMediaEngagementConfig_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaEngagementScoreDetailsProvider_GetMediaEngagementConfig_ResponseParams_Data));
      new (data()) MediaEngagementScoreDetailsProvider_GetMediaEngagementConfig_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaEngagementScoreDetailsProvider_GetMediaEngagementConfig_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaEngagementScoreDetailsProvider_GetMediaEngagementConfig_ResponseParams_Data>(index_);
    }
    MediaEngagementScoreDetailsProvider_GetMediaEngagementConfig_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::MediaEngagementConfig_Data> config;

 private:
  MediaEngagementScoreDetailsProvider_GetMediaEngagementConfig_ResponseParams_Data();
  ~MediaEngagementScoreDetailsProvider_GetMediaEngagementConfig_ResponseParams_Data() = delete;
};
static_assert(sizeof(MediaEngagementScoreDetailsProvider_GetMediaEngagementConfig_ResponseParams_Data) == 16,
              "Bad sizeof(MediaEngagementScoreDetailsProvider_GetMediaEngagementConfig_ResponseParams_Data)");

}  // namespace internal
class MediaEngagementScoreDetailsProvider_GetMediaEngagementScoreDetails_ParamsDataView {
 public:
  MediaEngagementScoreDetailsProvider_GetMediaEngagementScoreDetails_ParamsDataView() {}

  MediaEngagementScoreDetailsProvider_GetMediaEngagementScoreDetails_ParamsDataView(
      internal::MediaEngagementScoreDetailsProvider_GetMediaEngagementScoreDetails_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::MediaEngagementScoreDetailsProvider_GetMediaEngagementScoreDetails_Params_Data* data_ = nullptr;
};

class MediaEngagementScoreDetailsProvider_GetMediaEngagementScoreDetails_ResponseParamsDataView {
 public:
  MediaEngagementScoreDetailsProvider_GetMediaEngagementScoreDetails_ResponseParamsDataView() {}

  MediaEngagementScoreDetailsProvider_GetMediaEngagementScoreDetails_ResponseParamsDataView(
      internal::MediaEngagementScoreDetailsProvider_GetMediaEngagementScoreDetails_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetInfoDataView(
      mojo::ArrayDataView<MediaEngagementScoreDetailsDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadInfo(UserType* output) {
    auto* pointer = data_->info.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::media::mojom::MediaEngagementScoreDetailsDataView>>(
        pointer, output, context_);
  }
 private:
  internal::MediaEngagementScoreDetailsProvider_GetMediaEngagementScoreDetails_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class MediaEngagementScoreDetailsProvider_GetMediaEngagementConfig_ParamsDataView {
 public:
  MediaEngagementScoreDetailsProvider_GetMediaEngagementConfig_ParamsDataView() {}

  MediaEngagementScoreDetailsProvider_GetMediaEngagementConfig_ParamsDataView(
      internal::MediaEngagementScoreDetailsProvider_GetMediaEngagementConfig_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::MediaEngagementScoreDetailsProvider_GetMediaEngagementConfig_Params_Data* data_ = nullptr;
};

class MediaEngagementScoreDetailsProvider_GetMediaEngagementConfig_ResponseParamsDataView {
 public:
  MediaEngagementScoreDetailsProvider_GetMediaEngagementConfig_ResponseParamsDataView() {}

  MediaEngagementScoreDetailsProvider_GetMediaEngagementConfig_ResponseParamsDataView(
      internal::MediaEngagementScoreDetailsProvider_GetMediaEngagementConfig_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetConfigDataView(
      MediaEngagementConfigDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadConfig(UserType* output) {
    auto* pointer = data_->config.Get();
    return mojo::internal::Deserialize<::media::mojom::MediaEngagementConfigDataView>(
        pointer, output, context_);
  }
 private:
  internal::MediaEngagementScoreDetailsProvider_GetMediaEngagementConfig_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};




inline void MediaEngagementScoreDetailsProvider_GetMediaEngagementScoreDetails_ResponseParamsDataView::GetInfoDataView(
    mojo::ArrayDataView<MediaEngagementScoreDetailsDataView>* output) {
  auto pointer = data_->info.Get();
  *output = mojo::ArrayDataView<MediaEngagementScoreDetailsDataView>(pointer, context_);
}




inline void MediaEngagementScoreDetailsProvider_GetMediaEngagementConfig_ResponseParamsDataView::GetConfigDataView(
    MediaEngagementConfigDataView* output) {
  auto pointer = data_->config.Get();
  *output = MediaEngagementConfigDataView(pointer, context_);
}

}  // namespace mojom
}  // namespace media

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CHROME_BROWSER_MEDIA_MEDIA_ENGAGEMENT_SCORE_DETAILS_MOJOM_PARAMS_DATA_H_
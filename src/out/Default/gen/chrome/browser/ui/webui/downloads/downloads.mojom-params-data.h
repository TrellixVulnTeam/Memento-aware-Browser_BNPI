// chrome/browser/ui/webui/downloads/downloads.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_UI_WEBUI_DOWNLOADS_DOWNLOADS_MOJOM_PARAMS_DATA_H_
#define CHROME_BROWSER_UI_WEBUI_DOWNLOADS_DOWNLOADS_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace downloads {
namespace mojom {
namespace internal {
class  PageHandlerFactory_CreatePageHandler_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandlerFactory_CreatePageHandler_Params_Data));
      new (data()) PageHandlerFactory_CreatePageHandler_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandlerFactory_CreatePageHandler_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandlerFactory_CreatePageHandler_Params_Data>(index_);
    }
    PageHandlerFactory_CreatePageHandler_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data page;
  mojo::internal::Handle_Data handler;
  uint8_t padfinal_[4];

 private:
  PageHandlerFactory_CreatePageHandler_Params_Data();
  ~PageHandlerFactory_CreatePageHandler_Params_Data() = delete;
};
static_assert(sizeof(PageHandlerFactory_CreatePageHandler_Params_Data) == 24,
              "Bad sizeof(PageHandlerFactory_CreatePageHandler_Params_Data)");
class  PageHandler_GetDownloads_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_GetDownloads_Params_Data));
      new (data()) PageHandler_GetDownloads_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_GetDownloads_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_GetDownloads_Params_Data>(index_);
    }
    PageHandler_GetDownloads_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<mojo::internal::String_Data>>> search_terms;

 private:
  PageHandler_GetDownloads_Params_Data();
  ~PageHandler_GetDownloads_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_GetDownloads_Params_Data) == 16,
              "Bad sizeof(PageHandler_GetDownloads_Params_Data)");
class  PageHandler_OpenFileRequiringGesture_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_OpenFileRequiringGesture_Params_Data));
      new (data()) PageHandler_OpenFileRequiringGesture_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_OpenFileRequiringGesture_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_OpenFileRequiringGesture_Params_Data>(index_);
    }
    PageHandler_OpenFileRequiringGesture_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> id;

 private:
  PageHandler_OpenFileRequiringGesture_Params_Data();
  ~PageHandler_OpenFileRequiringGesture_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_OpenFileRequiringGesture_Params_Data) == 16,
              "Bad sizeof(PageHandler_OpenFileRequiringGesture_Params_Data)");
class  PageHandler_Drag_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_Drag_Params_Data));
      new (data()) PageHandler_Drag_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_Drag_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_Drag_Params_Data>(index_);
    }
    PageHandler_Drag_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> id;

 private:
  PageHandler_Drag_Params_Data();
  ~PageHandler_Drag_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_Drag_Params_Data) == 16,
              "Bad sizeof(PageHandler_Drag_Params_Data)");
class  PageHandler_SaveDangerousRequiringGesture_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_SaveDangerousRequiringGesture_Params_Data));
      new (data()) PageHandler_SaveDangerousRequiringGesture_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_SaveDangerousRequiringGesture_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_SaveDangerousRequiringGesture_Params_Data>(index_);
    }
    PageHandler_SaveDangerousRequiringGesture_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> id;

 private:
  PageHandler_SaveDangerousRequiringGesture_Params_Data();
  ~PageHandler_SaveDangerousRequiringGesture_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_SaveDangerousRequiringGesture_Params_Data) == 16,
              "Bad sizeof(PageHandler_SaveDangerousRequiringGesture_Params_Data)");
class  PageHandler_DiscardDangerous_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_DiscardDangerous_Params_Data));
      new (data()) PageHandler_DiscardDangerous_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_DiscardDangerous_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_DiscardDangerous_Params_Data>(index_);
    }
    PageHandler_DiscardDangerous_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> id;

 private:
  PageHandler_DiscardDangerous_Params_Data();
  ~PageHandler_DiscardDangerous_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_DiscardDangerous_Params_Data) == 16,
              "Bad sizeof(PageHandler_DiscardDangerous_Params_Data)");
class  PageHandler_RetryDownload_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_RetryDownload_Params_Data));
      new (data()) PageHandler_RetryDownload_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_RetryDownload_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_RetryDownload_Params_Data>(index_);
    }
    PageHandler_RetryDownload_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> id;

 private:
  PageHandler_RetryDownload_Params_Data();
  ~PageHandler_RetryDownload_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_RetryDownload_Params_Data) == 16,
              "Bad sizeof(PageHandler_RetryDownload_Params_Data)");
class  PageHandler_Show_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_Show_Params_Data));
      new (data()) PageHandler_Show_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_Show_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_Show_Params_Data>(index_);
    }
    PageHandler_Show_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> id;

 private:
  PageHandler_Show_Params_Data();
  ~PageHandler_Show_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_Show_Params_Data) == 16,
              "Bad sizeof(PageHandler_Show_Params_Data)");
class  PageHandler_Pause_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_Pause_Params_Data));
      new (data()) PageHandler_Pause_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_Pause_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_Pause_Params_Data>(index_);
    }
    PageHandler_Pause_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> id;

 private:
  PageHandler_Pause_Params_Data();
  ~PageHandler_Pause_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_Pause_Params_Data) == 16,
              "Bad sizeof(PageHandler_Pause_Params_Data)");
class  PageHandler_Resume_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_Resume_Params_Data));
      new (data()) PageHandler_Resume_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_Resume_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_Resume_Params_Data>(index_);
    }
    PageHandler_Resume_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> id;

 private:
  PageHandler_Resume_Params_Data();
  ~PageHandler_Resume_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_Resume_Params_Data) == 16,
              "Bad sizeof(PageHandler_Resume_Params_Data)");
class  PageHandler_Remove_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_Remove_Params_Data));
      new (data()) PageHandler_Remove_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_Remove_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_Remove_Params_Data>(index_);
    }
    PageHandler_Remove_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> id;

 private:
  PageHandler_Remove_Params_Data();
  ~PageHandler_Remove_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_Remove_Params_Data) == 16,
              "Bad sizeof(PageHandler_Remove_Params_Data)");
class  PageHandler_Undo_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_Undo_Params_Data));
      new (data()) PageHandler_Undo_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_Undo_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_Undo_Params_Data>(index_);
    }
    PageHandler_Undo_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PageHandler_Undo_Params_Data();
  ~PageHandler_Undo_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_Undo_Params_Data) == 8,
              "Bad sizeof(PageHandler_Undo_Params_Data)");
class  PageHandler_Cancel_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_Cancel_Params_Data));
      new (data()) PageHandler_Cancel_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_Cancel_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_Cancel_Params_Data>(index_);
    }
    PageHandler_Cancel_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> id;

 private:
  PageHandler_Cancel_Params_Data();
  ~PageHandler_Cancel_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_Cancel_Params_Data) == 16,
              "Bad sizeof(PageHandler_Cancel_Params_Data)");
class  PageHandler_ClearAll_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_ClearAll_Params_Data));
      new (data()) PageHandler_ClearAll_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_ClearAll_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_ClearAll_Params_Data>(index_);
    }
    PageHandler_ClearAll_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PageHandler_ClearAll_Params_Data();
  ~PageHandler_ClearAll_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_ClearAll_Params_Data) == 8,
              "Bad sizeof(PageHandler_ClearAll_Params_Data)");
class  PageHandler_OpenDownloadsFolderRequiringGesture_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_OpenDownloadsFolderRequiringGesture_Params_Data));
      new (data()) PageHandler_OpenDownloadsFolderRequiringGesture_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_OpenDownloadsFolderRequiringGesture_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_OpenDownloadsFolderRequiringGesture_Params_Data>(index_);
    }
    PageHandler_OpenDownloadsFolderRequiringGesture_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PageHandler_OpenDownloadsFolderRequiringGesture_Params_Data();
  ~PageHandler_OpenDownloadsFolderRequiringGesture_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_OpenDownloadsFolderRequiringGesture_Params_Data) == 8,
              "Bad sizeof(PageHandler_OpenDownloadsFolderRequiringGesture_Params_Data)");
class  PageHandler_OpenDuringScanningRequiringGesture_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_OpenDuringScanningRequiringGesture_Params_Data));
      new (data()) PageHandler_OpenDuringScanningRequiringGesture_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_OpenDuringScanningRequiringGesture_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_OpenDuringScanningRequiringGesture_Params_Data>(index_);
    }
    PageHandler_OpenDuringScanningRequiringGesture_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> id;

 private:
  PageHandler_OpenDuringScanningRequiringGesture_Params_Data();
  ~PageHandler_OpenDuringScanningRequiringGesture_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_OpenDuringScanningRequiringGesture_Params_Data) == 16,
              "Bad sizeof(PageHandler_OpenDuringScanningRequiringGesture_Params_Data)");
class  Page_RemoveItem_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Page_RemoveItem_Params_Data));
      new (data()) Page_RemoveItem_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Page_RemoveItem_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Page_RemoveItem_Params_Data>(index_);
    }
    Page_RemoveItem_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t index;
  uint8_t padfinal_[4];

 private:
  Page_RemoveItem_Params_Data();
  ~Page_RemoveItem_Params_Data() = delete;
};
static_assert(sizeof(Page_RemoveItem_Params_Data) == 16,
              "Bad sizeof(Page_RemoveItem_Params_Data)");
class  Page_UpdateItem_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Page_UpdateItem_Params_Data));
      new (data()) Page_UpdateItem_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Page_UpdateItem_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Page_UpdateItem_Params_Data>(index_);
    }
    Page_UpdateItem_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t index;
  uint8_t pad0_[4];
  mojo::internal::Pointer<internal::Data_Data> data;

 private:
  Page_UpdateItem_Params_Data();
  ~Page_UpdateItem_Params_Data() = delete;
};
static_assert(sizeof(Page_UpdateItem_Params_Data) == 24,
              "Bad sizeof(Page_UpdateItem_Params_Data)");
class  Page_InsertItems_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Page_InsertItems_Params_Data));
      new (data()) Page_InsertItems_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Page_InsertItems_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Page_InsertItems_Params_Data>(index_);
    }
    Page_InsertItems_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t index;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::Data_Data>>> items;

 private:
  Page_InsertItems_Params_Data();
  ~Page_InsertItems_Params_Data() = delete;
};
static_assert(sizeof(Page_InsertItems_Params_Data) == 24,
              "Bad sizeof(Page_InsertItems_Params_Data)");
class  Page_ClearAll_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Page_ClearAll_Params_Data));
      new (data()) Page_ClearAll_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Page_ClearAll_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Page_ClearAll_Params_Data>(index_);
    }
    Page_ClearAll_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  Page_ClearAll_Params_Data();
  ~Page_ClearAll_Params_Data() = delete;
};
static_assert(sizeof(Page_ClearAll_Params_Data) == 8,
              "Bad sizeof(Page_ClearAll_Params_Data)");

}  // namespace internal
class PageHandlerFactory_CreatePageHandler_ParamsDataView {
 public:
  PageHandlerFactory_CreatePageHandler_ParamsDataView() {}

  PageHandlerFactory_CreatePageHandler_ParamsDataView(
      internal::PageHandlerFactory_CreatePageHandler_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakePage() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::downloads::mojom::PageInterfaceBase>>(
            &data_->page, &result, context_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeHandler() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::downloads::mojom::PageHandlerInterfaceBase>>(
            &data_->handler, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::PageHandlerFactory_CreatePageHandler_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_GetDownloads_ParamsDataView {
 public:
  PageHandler_GetDownloads_ParamsDataView() {}

  PageHandler_GetDownloads_ParamsDataView(
      internal::PageHandler_GetDownloads_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetSearchTermsDataView(
      mojo::ArrayDataView<mojo::StringDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSearchTerms(UserType* output) {
    auto* pointer = data_->search_terms.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<mojo::StringDataView>>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_GetDownloads_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_OpenFileRequiringGesture_ParamsDataView {
 public:
  PageHandler_OpenFileRequiringGesture_ParamsDataView() {}

  PageHandler_OpenFileRequiringGesture_ParamsDataView(
      internal::PageHandler_OpenFileRequiringGesture_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadId(UserType* output) {
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_OpenFileRequiringGesture_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_Drag_ParamsDataView {
 public:
  PageHandler_Drag_ParamsDataView() {}

  PageHandler_Drag_ParamsDataView(
      internal::PageHandler_Drag_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadId(UserType* output) {
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_Drag_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_SaveDangerousRequiringGesture_ParamsDataView {
 public:
  PageHandler_SaveDangerousRequiringGesture_ParamsDataView() {}

  PageHandler_SaveDangerousRequiringGesture_ParamsDataView(
      internal::PageHandler_SaveDangerousRequiringGesture_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadId(UserType* output) {
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_SaveDangerousRequiringGesture_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_DiscardDangerous_ParamsDataView {
 public:
  PageHandler_DiscardDangerous_ParamsDataView() {}

  PageHandler_DiscardDangerous_ParamsDataView(
      internal::PageHandler_DiscardDangerous_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadId(UserType* output) {
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_DiscardDangerous_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_RetryDownload_ParamsDataView {
 public:
  PageHandler_RetryDownload_ParamsDataView() {}

  PageHandler_RetryDownload_ParamsDataView(
      internal::PageHandler_RetryDownload_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadId(UserType* output) {
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_RetryDownload_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_Show_ParamsDataView {
 public:
  PageHandler_Show_ParamsDataView() {}

  PageHandler_Show_ParamsDataView(
      internal::PageHandler_Show_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadId(UserType* output) {
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_Show_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_Pause_ParamsDataView {
 public:
  PageHandler_Pause_ParamsDataView() {}

  PageHandler_Pause_ParamsDataView(
      internal::PageHandler_Pause_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadId(UserType* output) {
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_Pause_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_Resume_ParamsDataView {
 public:
  PageHandler_Resume_ParamsDataView() {}

  PageHandler_Resume_ParamsDataView(
      internal::PageHandler_Resume_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadId(UserType* output) {
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_Resume_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_Remove_ParamsDataView {
 public:
  PageHandler_Remove_ParamsDataView() {}

  PageHandler_Remove_ParamsDataView(
      internal::PageHandler_Remove_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadId(UserType* output) {
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_Remove_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_Undo_ParamsDataView {
 public:
  PageHandler_Undo_ParamsDataView() {}

  PageHandler_Undo_ParamsDataView(
      internal::PageHandler_Undo_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PageHandler_Undo_Params_Data* data_ = nullptr;
};

class PageHandler_Cancel_ParamsDataView {
 public:
  PageHandler_Cancel_ParamsDataView() {}

  PageHandler_Cancel_ParamsDataView(
      internal::PageHandler_Cancel_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadId(UserType* output) {
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_Cancel_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_ClearAll_ParamsDataView {
 public:
  PageHandler_ClearAll_ParamsDataView() {}

  PageHandler_ClearAll_ParamsDataView(
      internal::PageHandler_ClearAll_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PageHandler_ClearAll_Params_Data* data_ = nullptr;
};

class PageHandler_OpenDownloadsFolderRequiringGesture_ParamsDataView {
 public:
  PageHandler_OpenDownloadsFolderRequiringGesture_ParamsDataView() {}

  PageHandler_OpenDownloadsFolderRequiringGesture_ParamsDataView(
      internal::PageHandler_OpenDownloadsFolderRequiringGesture_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PageHandler_OpenDownloadsFolderRequiringGesture_Params_Data* data_ = nullptr;
};

class PageHandler_OpenDuringScanningRequiringGesture_ParamsDataView {
 public:
  PageHandler_OpenDuringScanningRequiringGesture_ParamsDataView() {}

  PageHandler_OpenDuringScanningRequiringGesture_ParamsDataView(
      internal::PageHandler_OpenDuringScanningRequiringGesture_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadId(UserType* output) {
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_OpenDuringScanningRequiringGesture_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class Page_RemoveItem_ParamsDataView {
 public:
  Page_RemoveItem_ParamsDataView() {}

  Page_RemoveItem_ParamsDataView(
      internal::Page_RemoveItem_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t index() const {
    return data_->index;
  }
 private:
  internal::Page_RemoveItem_Params_Data* data_ = nullptr;
};

class Page_UpdateItem_ParamsDataView {
 public:
  Page_UpdateItem_ParamsDataView() {}

  Page_UpdateItem_ParamsDataView(
      internal::Page_UpdateItem_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int32_t index() const {
    return data_->index;
  }
  inline void GetDataDataView(
      DataDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadData(UserType* output) {
    auto* pointer = data_->data.Get();
    return mojo::internal::Deserialize<::downloads::mojom::DataDataView>(
        pointer, output, context_);
  }
 private:
  internal::Page_UpdateItem_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class Page_InsertItems_ParamsDataView {
 public:
  Page_InsertItems_ParamsDataView() {}

  Page_InsertItems_ParamsDataView(
      internal::Page_InsertItems_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int32_t index() const {
    return data_->index;
  }
  inline void GetItemsDataView(
      mojo::ArrayDataView<DataDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadItems(UserType* output) {
    auto* pointer = data_->items.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::downloads::mojom::DataDataView>>(
        pointer, output, context_);
  }
 private:
  internal::Page_InsertItems_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class Page_ClearAll_ParamsDataView {
 public:
  Page_ClearAll_ParamsDataView() {}

  Page_ClearAll_ParamsDataView(
      internal::Page_ClearAll_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::Page_ClearAll_Params_Data* data_ = nullptr;
};




inline void PageHandler_GetDownloads_ParamsDataView::GetSearchTermsDataView(
    mojo::ArrayDataView<mojo::StringDataView>* output) {
  auto pointer = data_->search_terms.Get();
  *output = mojo::ArrayDataView<mojo::StringDataView>(pointer, context_);
}


inline void PageHandler_OpenFileRequiringGesture_ParamsDataView::GetIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->id.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void PageHandler_Drag_ParamsDataView::GetIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->id.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void PageHandler_SaveDangerousRequiringGesture_ParamsDataView::GetIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->id.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void PageHandler_DiscardDangerous_ParamsDataView::GetIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->id.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void PageHandler_RetryDownload_ParamsDataView::GetIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->id.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void PageHandler_Show_ParamsDataView::GetIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->id.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void PageHandler_Pause_ParamsDataView::GetIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->id.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void PageHandler_Resume_ParamsDataView::GetIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->id.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void PageHandler_Remove_ParamsDataView::GetIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->id.Get();
  *output = mojo::StringDataView(pointer, context_);
}




inline void PageHandler_Cancel_ParamsDataView::GetIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->id.Get();
  *output = mojo::StringDataView(pointer, context_);
}






inline void PageHandler_OpenDuringScanningRequiringGesture_ParamsDataView::GetIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->id.Get();
  *output = mojo::StringDataView(pointer, context_);
}




inline void Page_UpdateItem_ParamsDataView::GetDataDataView(
    DataDataView* output) {
  auto pointer = data_->data.Get();
  *output = DataDataView(pointer, context_);
}


inline void Page_InsertItems_ParamsDataView::GetItemsDataView(
    mojo::ArrayDataView<DataDataView>* output) {
  auto pointer = data_->items.Get();
  *output = mojo::ArrayDataView<DataDataView>(pointer, context_);
}



}  // namespace mojom
}  // namespace downloads

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CHROME_BROWSER_UI_WEBUI_DOWNLOADS_DOWNLOADS_MOJOM_PARAMS_DATA_H_
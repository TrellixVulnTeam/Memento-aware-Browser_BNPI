// chrome/browser/ui/webui/bluetooth_internals/bluetooth_internals.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "chrome/browser/ui/webui/bluetooth_internals/bluetooth_internals.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "device/bluetooth/public/mojom/adapter.mojom.h"


#ifndef CHROME_BROWSER_UI_WEBUI_BLUETOOTH_INTERNALS_BLUETOOTH_INTERNALS_MOJOM_JUMBO_H_
#define CHROME_BROWSER_UI_WEBUI_BLUETOOTH_INTERNALS_BLUETOOTH_INTERNALS_MOJOM_JUMBO_H_
#endif


namespace mojom {


void DebugLogsChangeHandlerInterceptorForTesting::ChangeDebugLogsState(bool should_debug_logs_be_enabled) {
  GetForwardingInterface()->ChangeDebugLogsState(std::move(should_debug_logs_be_enabled));
}
DebugLogsChangeHandlerAsyncWaiter::DebugLogsChangeHandlerAsyncWaiter(
    DebugLogsChangeHandler* proxy) : proxy_(proxy) {}

DebugLogsChangeHandlerAsyncWaiter::~DebugLogsChangeHandlerAsyncWaiter() = default;




void BluetoothInternalsHandlerInterceptorForTesting::GetAdapter(GetAdapterCallback callback) {
  GetForwardingInterface()->GetAdapter(std::move(callback));
}
void BluetoothInternalsHandlerInterceptorForTesting::GetDebugLogsChangeHandler(GetDebugLogsChangeHandlerCallback callback) {
  GetForwardingInterface()->GetDebugLogsChangeHandler(std::move(callback));
}
BluetoothInternalsHandlerAsyncWaiter::BluetoothInternalsHandlerAsyncWaiter(
    BluetoothInternalsHandler* proxy) : proxy_(proxy) {}

BluetoothInternalsHandlerAsyncWaiter::~BluetoothInternalsHandlerAsyncWaiter() = default;

void BluetoothInternalsHandlerAsyncWaiter::GetAdapter(
    ::mojo::PendingRemote<::bluetooth::mojom::Adapter>* out_adapter) {
  base::RunLoop loop;
  proxy_->GetAdapter(
      base::BindOnce(
          [](base::RunLoop* loop,
             ::mojo::PendingRemote<::bluetooth::mojom::Adapter>* out_adapter
,
             ::mojo::PendingRemote<::bluetooth::mojom::Adapter> adapter) {*out_adapter = std::move(adapter);
            loop->Quit();
          },
          &loop,
          out_adapter));
  loop.Run();
}
void BluetoothInternalsHandlerAsyncWaiter::GetDebugLogsChangeHandler(
    ::mojo::PendingRemote<DebugLogsChangeHandler>* out_handler, bool* out_initial_toggle_value) {
  base::RunLoop loop;
  proxy_->GetDebugLogsChangeHandler(
      base::BindOnce(
          [](base::RunLoop* loop,
             ::mojo::PendingRemote<DebugLogsChangeHandler>* out_handler
,
             bool* out_initial_toggle_value
,
             ::mojo::PendingRemote<DebugLogsChangeHandler> handler,
             bool initial_toggle_value) {*out_handler = std::move(handler);*out_initial_toggle_value = std::move(initial_toggle_value);
            loop->Quit();
          },
          &loop,
          out_handler,
          out_initial_toggle_value));
  loop.Run();
}





}  // namespace mojom

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
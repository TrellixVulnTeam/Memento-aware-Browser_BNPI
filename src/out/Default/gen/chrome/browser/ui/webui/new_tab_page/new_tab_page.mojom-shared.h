// chrome/browser/ui/webui/new_tab_page/new_tab_page.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_UI_WEBUI_NEW_TAB_PAGE_NEW_TAB_PAGE_MOJOM_SHARED_H_
#define CHROME_BROWSER_UI_WEBUI_NEW_TAB_PAGE_NEW_TAB_PAGE_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "chrome/browser/ui/webui/new_tab_page/new_tab_page.mojom-shared-internal.h"
#include "mojo/public/mojom/base/text_direction.mojom-shared.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "skia/public/mojom/skcolor.mojom-shared.h"
#include "url/mojom/url.mojom-shared.h"
#include "mojo/public/mojom/base/string16.mojom-shared.h"
#include "chrome/common/search/omnibox.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace new_tab_page {
namespace mojom {
class OneGoogleBarPartsDataView;

class MostVisitedTileDataView;

class MostVisitedInfoDataView;

class ThemeColorsDataView;

class BackgroundCollectionDataView;

class CollectionImageDataView;

class ChromeThemeDataView;

class ThirdPartyThemeInfoDataView;

class SearchBoxThemeDataView;

class BackgroundImageDataView;

class ThemeDataView;

class DoodleShareButtonDataView;

class ImageDoodleContentDataView;

class InteractiveDoodleContentDataView;

class DoodleDataView;

class ThemeInfoDataView;
class DoodleContentDataView;


}  // namespace mojom
}  // namespace new_tab_page

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::new_tab_page::mojom::OneGoogleBarPartsDataView> {
  using Data = ::new_tab_page::mojom::internal::OneGoogleBarParts_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::new_tab_page::mojom::MostVisitedTileDataView> {
  using Data = ::new_tab_page::mojom::internal::MostVisitedTile_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::new_tab_page::mojom::MostVisitedInfoDataView> {
  using Data = ::new_tab_page::mojom::internal::MostVisitedInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::new_tab_page::mojom::ThemeColorsDataView> {
  using Data = ::new_tab_page::mojom::internal::ThemeColors_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::new_tab_page::mojom::BackgroundCollectionDataView> {
  using Data = ::new_tab_page::mojom::internal::BackgroundCollection_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::new_tab_page::mojom::CollectionImageDataView> {
  using Data = ::new_tab_page::mojom::internal::CollectionImage_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::new_tab_page::mojom::ChromeThemeDataView> {
  using Data = ::new_tab_page::mojom::internal::ChromeTheme_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::new_tab_page::mojom::ThirdPartyThemeInfoDataView> {
  using Data = ::new_tab_page::mojom::internal::ThirdPartyThemeInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::new_tab_page::mojom::SearchBoxThemeDataView> {
  using Data = ::new_tab_page::mojom::internal::SearchBoxTheme_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::new_tab_page::mojom::BackgroundImageDataView> {
  using Data = ::new_tab_page::mojom::internal::BackgroundImage_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::new_tab_page::mojom::ThemeDataView> {
  using Data = ::new_tab_page::mojom::internal::Theme_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::new_tab_page::mojom::DoodleShareButtonDataView> {
  using Data = ::new_tab_page::mojom::internal::DoodleShareButton_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::new_tab_page::mojom::ImageDoodleContentDataView> {
  using Data = ::new_tab_page::mojom::internal::ImageDoodleContent_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::new_tab_page::mojom::InteractiveDoodleContentDataView> {
  using Data = ::new_tab_page::mojom::internal::InteractiveDoodleContent_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::new_tab_page::mojom::DoodleDataView> {
  using Data = ::new_tab_page::mojom::internal::Doodle_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::new_tab_page::mojom::ThemeInfoDataView> {
  using Data = ::new_tab_page::mojom::internal::ThemeInfo_Data;
  using DataAsArrayElement = Data;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kUnion;
};

template <>
struct MojomTypeTraits<::new_tab_page::mojom::DoodleContentDataView> {
  using Data = ::new_tab_page::mojom::internal::DoodleContent_Data;
  using DataAsArrayElement = Data;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kUnion;
};

}  // namespace internal
}  // namespace mojo


namespace new_tab_page {
namespace mojom {


enum class ThemeType : int32_t {
  
  DEFAULT = 0,
  
  AUTOGENERATED = 1,
  
  CHROME = 2,
  
  THIRD_PARTY = 3,
  kMinValue = 0,
  kMaxValue = 3,
};

 std::ostream& operator<<(std::ostream& os, ThemeType value);
inline bool IsKnownEnumValue(ThemeType value) {
  return internal::ThemeType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class DoodleImageType : int32_t {
  
  ANIMATION = 0,
  
  CTA = 1,
  
  STATIC = 2,
  kMinValue = 0,
  kMaxValue = 2,
};

 std::ostream& operator<<(std::ostream& os, DoodleImageType value);
inline bool IsKnownEnumValue(DoodleImageType value) {
  return internal::DoodleImageType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class DoodleShareChannel : int32_t {
  
  FACEBOOK = 0,
  
  TWITTER = 1,
  
  EMAIL = 2,
  
  LINK_COPY = 3,
  kMinValue = 0,
  kMaxValue = 3,
};

 std::ostream& operator<<(std::ostream& os, DoodleShareChannel value);
inline bool IsKnownEnumValue(DoodleShareChannel value) {
  return internal::DoodleShareChannel_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class CustomizeDialogAction : int32_t {
  
  CANCEL_CLICKED = 0,
  
  DONE_CLICKED = 1,
  
  OPEN_CLICKED = 2,
  
  BACKGROUNDS_BACK_CLICKED = 3,
  
  BACKGROUNDS_NO_BACKGROUND_SELECTED = 4,
  
  BACKGROUNDS_COLLECTION_OPENED = 5,
  
  BACKGROUNDS_REFRESH_TOGGLE_CLICKED = 6,
  
  BACKGROUNDS_IMAGE_SELECTED = 7,
  
  BACKGROUNDS_UPLOAD_FROM_DEVICE_CLICKED = 8,
  
  SHORTCUTS_CUSTOM_LINKS_CLICKED = 9,
  
  SHORTCUTS_MOST_VISITED_CLICKED = 10,
  
  SHORTCUTS_VISIBILITY_TOGGLE_CLICKED = 11,
  kMinValue = 0,
  kMaxValue = 11,
};

 std::ostream& operator<<(std::ostream& os, CustomizeDialogAction value);
inline bool IsKnownEnumValue(CustomizeDialogAction value) {
  return internal::CustomizeDialogAction_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class VoiceSearchAction : int32_t {
  
  ACTIVATE_SEARCH_BOX = 0,
  
  ACTIVATE_KEYBOARD = 1,
  
  CLOSE_OVERLAY = 2,
  
  QUERY_SUBMITTED = 3,
  
  SUPPORT_LINK_CLICKED = 4,
  
  TRY_AGAIN_LINK = 5,
  
  TRY_AGAIN_MIC_BUTTON = 6,
  kMinValue = 0,
  kMaxValue = 6,
};

 std::ostream& operator<<(std::ostream& os, VoiceSearchAction value);
inline bool IsKnownEnumValue(VoiceSearchAction value) {
  return internal::VoiceSearchAction_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class VoiceSearchError : int32_t {
  
  ABORTED = 0,
  
  NO_SPEECH = 1,
  
  AUDIO_CAPTURE = 2,
  
  NETWORK = 3,
  
  NOT_ALLOWED = 4,
  
  LANGUAGE_NOT_SUPPORTED = 5,
  
  NO_MATCH = 6,
  
  SERVICE_NOT_ALLOWED = 7,
  
  BAD_GRAMMAR = 8,
  
  OTHER = 9,
  kMinValue = 0,
  kMaxValue = 9,
};

 std::ostream& operator<<(std::ostream& os, VoiceSearchError value);
inline bool IsKnownEnumValue(VoiceSearchError value) {
  return internal::VoiceSearchError_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class PageHandlerFactoryInterfaceBase {};

using PageHandlerFactoryPtrDataView =
    mojo::InterfacePtrDataView<PageHandlerFactoryInterfaceBase>;
using PageHandlerFactoryRequestDataView =
    mojo::InterfaceRequestDataView<PageHandlerFactoryInterfaceBase>;
using PageHandlerFactoryAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<PageHandlerFactoryInterfaceBase>;
using PageHandlerFactoryAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<PageHandlerFactoryInterfaceBase>;
class PageHandlerInterfaceBase {};

using PageHandlerPtrDataView =
    mojo::InterfacePtrDataView<PageHandlerInterfaceBase>;
using PageHandlerRequestDataView =
    mojo::InterfaceRequestDataView<PageHandlerInterfaceBase>;
using PageHandlerAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<PageHandlerInterfaceBase>;
using PageHandlerAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<PageHandlerInterfaceBase>;
class PageInterfaceBase {};

using PagePtrDataView =
    mojo::InterfacePtrDataView<PageInterfaceBase>;
using PageRequestDataView =
    mojo::InterfaceRequestDataView<PageInterfaceBase>;
using PageAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<PageInterfaceBase>;
using PageAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<PageInterfaceBase>;
class OneGoogleBarPartsDataView {
 public:
  OneGoogleBarPartsDataView() {}

  OneGoogleBarPartsDataView(
      internal::OneGoogleBarParts_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetBarHtmlDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadBarHtml(UserType* output) {
    auto* pointer = data_->bar_html.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetInHeadScriptDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadInHeadScript(UserType* output) {
    auto* pointer = data_->in_head_script.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetInHeadStyleDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadInHeadStyle(UserType* output) {
    auto* pointer = data_->in_head_style.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetAfterBarScriptDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAfterBarScript(UserType* output) {
    auto* pointer = data_->after_bar_script.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetEndOfBodyHtmlDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadEndOfBodyHtml(UserType* output) {
    auto* pointer = data_->end_of_body_html.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetEndOfBodyScriptDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadEndOfBodyScript(UserType* output) {
    auto* pointer = data_->end_of_body_script.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::OneGoogleBarParts_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class MostVisitedTileDataView {
 public:
  MostVisitedTileDataView() {}

  MostVisitedTileDataView(
      internal::MostVisitedTile_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetTitleDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTitle(UserType* output) {
    auto* pointer = data_->title.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTitleDirection(UserType* output) const {
    auto data_value = data_->title_direction;
    return mojo::internal::Deserialize<::mojo_base::mojom::TextDirection>(
        data_value, output);
  }

  ::mojo_base::mojom::TextDirection title_direction() const {
    return static_cast<::mojo_base::mojom::TextDirection>(data_->title_direction);
  }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUrl(UserType* output) {
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  int32_t source() const {
    return data_->source;
  }
  int32_t title_source() const {
    return data_->title_source;
  }
  inline void GetDataGenerationTimeDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDataGenerationTime(UserType* output) {
    auto* pointer = data_->data_generation_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, context_);
  }
 private:
  internal::MostVisitedTile_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class MostVisitedInfoDataView {
 public:
  MostVisitedInfoDataView() {}

  MostVisitedInfoDataView(
      internal::MostVisitedInfo_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  bool custom_links_enabled() const {
    return data_->custom_links_enabled;
  }
  bool visible() const {
    return data_->visible;
  }
  inline void GetTilesDataView(
      mojo::ArrayDataView<MostVisitedTileDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTiles(UserType* output) {
    auto* pointer = data_->tiles.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::new_tab_page::mojom::MostVisitedTileDataView>>(
        pointer, output, context_);
  }
 private:
  internal::MostVisitedInfo_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class ThemeColorsDataView {
 public:
  ThemeColorsDataView() {}

  ThemeColorsDataView(
      internal::ThemeColors_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetFrameDataView(
      ::skia::mojom::SkColorDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFrame(UserType* output) {
    auto* pointer = data_->frame.Get();
    return mojo::internal::Deserialize<::skia::mojom::SkColorDataView>(
        pointer, output, context_);
  }
  inline void GetActiveTabDataView(
      ::skia::mojom::SkColorDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadActiveTab(UserType* output) {
    auto* pointer = data_->active_tab.Get();
    return mojo::internal::Deserialize<::skia::mojom::SkColorDataView>(
        pointer, output, context_);
  }
 private:
  internal::ThemeColors_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class BackgroundCollectionDataView {
 public:
  BackgroundCollectionDataView() {}

  BackgroundCollectionDataView(
      internal::BackgroundCollection_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadId(UserType* output) {
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetLabelDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadLabel(UserType* output) {
    auto* pointer = data_->label.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetPreviewImageUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPreviewImageUrl(UserType* output) {
    auto* pointer = data_->preview_image_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
 private:
  internal::BackgroundCollection_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class CollectionImageDataView {
 public:
  CollectionImageDataView() {}

  CollectionImageDataView(
      internal::CollectionImage_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetAttribution1DataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAttribution1(UserType* output) {
    auto* pointer = data_->attribution_1.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetAttribution2DataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAttribution2(UserType* output) {
    auto* pointer = data_->attribution_2.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetAttributionUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAttributionUrl(UserType* output) {
    auto* pointer = data_->attribution_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  inline void GetImageUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadImageUrl(UserType* output) {
    auto* pointer = data_->image_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  inline void GetPreviewImageUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPreviewImageUrl(UserType* output) {
    auto* pointer = data_->preview_image_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
 private:
  internal::CollectionImage_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class ChromeThemeDataView {
 public:
  ChromeThemeDataView() {}

  ChromeThemeDataView(
      internal::ChromeTheme_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int32_t id() const {
    return data_->id;
  }
  inline void GetLabelDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadLabel(UserType* output) {
    auto* pointer = data_->label.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetColorsDataView(
      ThemeColorsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadColors(UserType* output) {
    auto* pointer = data_->colors.Get();
    return mojo::internal::Deserialize<::new_tab_page::mojom::ThemeColorsDataView>(
        pointer, output, context_);
  }
 private:
  internal::ChromeTheme_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class ThirdPartyThemeInfoDataView {
 public:
  ThirdPartyThemeInfoDataView() {}

  ThirdPartyThemeInfoDataView(
      internal::ThirdPartyThemeInfo_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadId(UserType* output) {
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadName(UserType* output) {
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::ThirdPartyThemeInfo_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class SearchBoxThemeDataView {
 public:
  SearchBoxThemeDataView() {}

  SearchBoxThemeDataView(
      internal::SearchBoxTheme_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetBgDataView(
      ::skia::mojom::SkColorDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadBg(UserType* output) {
    auto* pointer = data_->bg.Get();
    return mojo::internal::Deserialize<::skia::mojom::SkColorDataView>(
        pointer, output, context_);
  }
  inline void GetIconDataView(
      ::skia::mojom::SkColorDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadIcon(UserType* output) {
    auto* pointer = data_->icon.Get();
    return mojo::internal::Deserialize<::skia::mojom::SkColorDataView>(
        pointer, output, context_);
  }
  inline void GetIconSelectedDataView(
      ::skia::mojom::SkColorDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadIconSelected(UserType* output) {
    auto* pointer = data_->icon_selected.Get();
    return mojo::internal::Deserialize<::skia::mojom::SkColorDataView>(
        pointer, output, context_);
  }
  inline void GetPlaceholderDataView(
      ::skia::mojom::SkColorDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPlaceholder(UserType* output) {
    auto* pointer = data_->placeholder.Get();
    return mojo::internal::Deserialize<::skia::mojom::SkColorDataView>(
        pointer, output, context_);
  }
  inline void GetResultsBgDataView(
      ::skia::mojom::SkColorDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadResultsBg(UserType* output) {
    auto* pointer = data_->results_bg.Get();
    return mojo::internal::Deserialize<::skia::mojom::SkColorDataView>(
        pointer, output, context_);
  }
  inline void GetResultsBgHoveredDataView(
      ::skia::mojom::SkColorDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadResultsBgHovered(UserType* output) {
    auto* pointer = data_->results_bg_hovered.Get();
    return mojo::internal::Deserialize<::skia::mojom::SkColorDataView>(
        pointer, output, context_);
  }
  inline void GetResultsBgSelectedDataView(
      ::skia::mojom::SkColorDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadResultsBgSelected(UserType* output) {
    auto* pointer = data_->results_bg_selected.Get();
    return mojo::internal::Deserialize<::skia::mojom::SkColorDataView>(
        pointer, output, context_);
  }
  inline void GetResultsDimDataView(
      ::skia::mojom::SkColorDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadResultsDim(UserType* output) {
    auto* pointer = data_->results_dim.Get();
    return mojo::internal::Deserialize<::skia::mojom::SkColorDataView>(
        pointer, output, context_);
  }
  inline void GetResultsDimSelectedDataView(
      ::skia::mojom::SkColorDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadResultsDimSelected(UserType* output) {
    auto* pointer = data_->results_dim_selected.Get();
    return mojo::internal::Deserialize<::skia::mojom::SkColorDataView>(
        pointer, output, context_);
  }
  inline void GetResultsTextDataView(
      ::skia::mojom::SkColorDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadResultsText(UserType* output) {
    auto* pointer = data_->results_text.Get();
    return mojo::internal::Deserialize<::skia::mojom::SkColorDataView>(
        pointer, output, context_);
  }
  inline void GetResultsTextSelectedDataView(
      ::skia::mojom::SkColorDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadResultsTextSelected(UserType* output) {
    auto* pointer = data_->results_text_selected.Get();
    return mojo::internal::Deserialize<::skia::mojom::SkColorDataView>(
        pointer, output, context_);
  }
  inline void GetResultsUrlDataView(
      ::skia::mojom::SkColorDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadResultsUrl(UserType* output) {
    auto* pointer = data_->results_url.Get();
    return mojo::internal::Deserialize<::skia::mojom::SkColorDataView>(
        pointer, output, context_);
  }
  inline void GetResultsUrlSelectedDataView(
      ::skia::mojom::SkColorDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadResultsUrlSelected(UserType* output) {
    auto* pointer = data_->results_url_selected.Get();
    return mojo::internal::Deserialize<::skia::mojom::SkColorDataView>(
        pointer, output, context_);
  }
  inline void GetTextDataView(
      ::skia::mojom::SkColorDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadText(UserType* output) {
    auto* pointer = data_->text.Get();
    return mojo::internal::Deserialize<::skia::mojom::SkColorDataView>(
        pointer, output, context_);
  }
 private:
  internal::SearchBoxTheme_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class BackgroundImageDataView {
 public:
  BackgroundImageDataView() {}

  BackgroundImageDataView(
      internal::BackgroundImage_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUrl(UserType* output) {
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  inline void GetUrl2xDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUrl2x(UserType* output) {
    auto* pointer = data_->url_2x.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  inline void GetAttributionUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAttributionUrl(UserType* output) {
    auto* pointer = data_->attribution_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  inline void GetSizeDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSize(UserType* output) {
    auto* pointer = data_->size.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetRepeatXDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadRepeatX(UserType* output) {
    auto* pointer = data_->repeat_x.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetRepeatYDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadRepeatY(UserType* output) {
    auto* pointer = data_->repeat_y.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetPositionXDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPositionX(UserType* output) {
    auto* pointer = data_->position_x.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetPositionYDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPositionY(UserType* output) {
    auto* pointer = data_->position_y.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::BackgroundImage_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class ThemeDataView {
 public:
  ThemeDataView() {}

  ThemeDataView(
      internal::Theme_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadType(UserType* output) const {
    auto data_value = data_->type;
    return mojo::internal::Deserialize<::new_tab_page::mojom::ThemeType>(
        data_value, output);
  }

  ThemeType type() const {
    return static_cast<ThemeType>(data_->type);
  }
  inline void GetBackgroundColorDataView(
      ::skia::mojom::SkColorDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadBackgroundColor(UserType* output) {
    auto* pointer = data_->background_color.Get();
    return mojo::internal::Deserialize<::skia::mojom::SkColorDataView>(
        pointer, output, context_);
  }
  inline void GetShortcutBackgroundColorDataView(
      ::skia::mojom::SkColorDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadShortcutBackgroundColor(UserType* output) {
    auto* pointer = data_->shortcut_background_color.Get();
    return mojo::internal::Deserialize<::skia::mojom::SkColorDataView>(
        pointer, output, context_);
  }
  inline void GetShortcutTextColorDataView(
      ::skia::mojom::SkColorDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadShortcutTextColor(UserType* output) {
    auto* pointer = data_->shortcut_text_color.Get();
    return mojo::internal::Deserialize<::skia::mojom::SkColorDataView>(
        pointer, output, context_);
  }
  bool shortcut_use_white_add_icon() const {
    return data_->shortcut_use_white_add_icon;
  }
  bool shortcut_use_title_pill() const {
    return data_->shortcut_use_title_pill;
  }
  bool is_dark() const {
    return data_->is_dark;
  }
  inline void GetLogoColorDataView(
      ::skia::mojom::SkColorDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadLogoColor(UserType* output) {
    auto* pointer = data_->logo_color.Get();
    return mojo::internal::Deserialize<::skia::mojom::SkColorDataView>(
        pointer, output, context_);
  }
  inline void GetDailyRefreshCollectionIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDailyRefreshCollectionId(UserType* output) {
    auto* pointer = data_->daily_refresh_collection_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetBackgroundImageDataView(
      BackgroundImageDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadBackgroundImage(UserType* output) {
    auto* pointer = data_->background_image.Get();
    return mojo::internal::Deserialize<::new_tab_page::mojom::BackgroundImageDataView>(
        pointer, output, context_);
  }
  inline void GetBackgroundImageAttribution1DataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadBackgroundImageAttribution1(UserType* output) {
    auto* pointer = data_->background_image_attribution_1.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetBackgroundImageAttribution2DataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadBackgroundImageAttribution2(UserType* output) {
    auto* pointer = data_->background_image_attribution_2.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetBackgroundImageAttributionUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadBackgroundImageAttributionUrl(UserType* output) {
    auto* pointer = data_->background_image_attribution_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  inline void GetInfoDataView(
      ThemeInfoDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadInfo(UserType* output) {
    auto* pointer = !data_->info.is_null() ? &data_->info : nullptr;
    return mojo::internal::Deserialize<::new_tab_page::mojom::ThemeInfoDataView>(
        pointer, output, context_);
  }
  inline void GetSearchBoxDataView(
      SearchBoxThemeDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSearchBox(UserType* output) {
    auto* pointer = data_->search_box.Get();
    return mojo::internal::Deserialize<::new_tab_page::mojom::SearchBoxThemeDataView>(
        pointer, output, context_);
  }
 private:
  internal::Theme_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class DoodleShareButtonDataView {
 public:
  DoodleShareButtonDataView() {}

  DoodleShareButtonDataView(
      internal::DoodleShareButton_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int32_t x() const {
    return data_->x;
  }
  int32_t y() const {
    return data_->y;
  }
  inline void GetBackgroundColorDataView(
      ::skia::mojom::SkColorDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadBackgroundColor(UserType* output) {
    auto* pointer = data_->background_color.Get();
    return mojo::internal::Deserialize<::skia::mojom::SkColorDataView>(
        pointer, output, context_);
  }
  inline void GetIconUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadIconUrl(UserType* output) {
    auto* pointer = data_->icon_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
 private:
  internal::DoodleShareButton_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class ImageDoodleContentDataView {
 public:
  ImageDoodleContentDataView() {}

  ImageDoodleContentDataView(
      internal::ImageDoodleContent_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetImageUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadImageUrl(UserType* output) {
    auto* pointer = data_->image_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  inline void GetOnClickUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadOnClickUrl(UserType* output) {
    auto* pointer = data_->on_click_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  inline void GetAnimationUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAnimationUrl(UserType* output) {
    auto* pointer = data_->animation_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  uint32_t width() const {
    return data_->width;
  }
  uint32_t height() const {
    return data_->height;
  }
  inline void GetBackgroundColorDataView(
      ::skia::mojom::SkColorDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadBackgroundColor(UserType* output) {
    auto* pointer = data_->background_color.Get();
    return mojo::internal::Deserialize<::skia::mojom::SkColorDataView>(
        pointer, output, context_);
  }
  inline void GetShareButtonDataView(
      DoodleShareButtonDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadShareButton(UserType* output) {
    auto* pointer = data_->share_button.Get();
    return mojo::internal::Deserialize<::new_tab_page::mojom::DoodleShareButtonDataView>(
        pointer, output, context_);
  }
  inline void GetShareUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadShareUrl(UserType* output) {
    auto* pointer = data_->share_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  inline void GetImageImpressionLogUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadImageImpressionLogUrl(UserType* output) {
    auto* pointer = data_->image_impression_log_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  inline void GetAnimationImpressionLogUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAnimationImpressionLogUrl(UserType* output) {
    auto* pointer = data_->animation_impression_log_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
 private:
  internal::ImageDoodleContent_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class InteractiveDoodleContentDataView {
 public:
  InteractiveDoodleContentDataView() {}

  InteractiveDoodleContentDataView(
      internal::InteractiveDoodleContent_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUrl(UserType* output) {
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  uint32_t width() const {
    return data_->width;
  }
  uint32_t height() const {
    return data_->height;
  }
 private:
  internal::InteractiveDoodleContent_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class DoodleDataView {
 public:
  DoodleDataView() {}

  DoodleDataView(
      internal::Doodle_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetContentDataView(
      DoodleContentDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadContent(UserType* output) {
    auto* pointer = !data_->content.is_null() ? &data_->content : nullptr;
    return mojo::internal::Deserialize<::new_tab_page::mojom::DoodleContentDataView>(
        pointer, output, context_);
  }
  inline void GetDescriptionDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDescription(UserType* output) {
    auto* pointer = data_->description.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::Doodle_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class ThemeInfoDataView {
 public:
  using Tag = internal::ThemeInfo_Data::ThemeInfo_Tag;

  ThemeInfoDataView() {}

  ThemeInfoDataView(
      internal::ThemeInfo_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const {
    // For inlined unions, |data_| is always non-null. In that case we need to
    // check |data_->is_null()|.
    return !data_ || data_->is_null();
  }

  Tag tag() const { return data_->tag; }
  bool is_chrome_theme_id() const { return data_->tag == Tag::CHROME_THEME_ID; }
  int32_t chrome_theme_id() const {
    DCHECK(is_chrome_theme_id());
    return data_->data.f_chrome_theme_id;
  }
  bool is_autogenerated_theme_colors() const { return data_->tag == Tag::AUTOGENERATED_THEME_COLORS; }
  inline void GetAutogeneratedThemeColorsDataView(
      ThemeColorsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAutogeneratedThemeColors(UserType* output) {
    DCHECK(is_autogenerated_theme_colors());
    return mojo::internal::Deserialize<::new_tab_page::mojom::ThemeColorsDataView>(
        data_->data.f_autogenerated_theme_colors.Get(), output, context_);
  }
  bool is_third_party_theme_info() const { return data_->tag == Tag::THIRD_PARTY_THEME_INFO; }
  inline void GetThirdPartyThemeInfoDataView(
      ThirdPartyThemeInfoDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadThirdPartyThemeInfo(UserType* output) {
    DCHECK(is_third_party_theme_info());
    return mojo::internal::Deserialize<::new_tab_page::mojom::ThirdPartyThemeInfoDataView>(
        data_->data.f_third_party_theme_info.Get(), output, context_);
  }

 private:
  internal::ThemeInfo_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class DoodleContentDataView {
 public:
  using Tag = internal::DoodleContent_Data::DoodleContent_Tag;

  DoodleContentDataView() {}

  DoodleContentDataView(
      internal::DoodleContent_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const {
    // For inlined unions, |data_| is always non-null. In that case we need to
    // check |data_->is_null()|.
    return !data_ || data_->is_null();
  }

  Tag tag() const { return data_->tag; }
  bool is_image_doodle() const { return data_->tag == Tag::IMAGE_DOODLE; }
  inline void GetImageDoodleDataView(
      ImageDoodleContentDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadImageDoodle(UserType* output) {
    DCHECK(is_image_doodle());
    return mojo::internal::Deserialize<::new_tab_page::mojom::ImageDoodleContentDataView>(
        data_->data.f_image_doodle.Get(), output, context_);
  }
  bool is_interactive_doodle() const { return data_->tag == Tag::INTERACTIVE_DOODLE; }
  inline void GetInteractiveDoodleDataView(
      InteractiveDoodleContentDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadInteractiveDoodle(UserType* output) {
    DCHECK(is_interactive_doodle());
    return mojo::internal::Deserialize<::new_tab_page::mojom::InteractiveDoodleContentDataView>(
        data_->data.f_interactive_doodle.Get(), output, context_);
  }

 private:
  internal::DoodleContent_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};



}  // namespace mojom
}  // namespace new_tab_page

namespace std {

template <>
struct hash<::new_tab_page::mojom::ThemeType>
    : public mojo::internal::EnumHashImpl<::new_tab_page::mojom::ThemeType> {};

template <>
struct hash<::new_tab_page::mojom::DoodleImageType>
    : public mojo::internal::EnumHashImpl<::new_tab_page::mojom::DoodleImageType> {};

template <>
struct hash<::new_tab_page::mojom::DoodleShareChannel>
    : public mojo::internal::EnumHashImpl<::new_tab_page::mojom::DoodleShareChannel> {};

template <>
struct hash<::new_tab_page::mojom::CustomizeDialogAction>
    : public mojo::internal::EnumHashImpl<::new_tab_page::mojom::CustomizeDialogAction> {};

template <>
struct hash<::new_tab_page::mojom::VoiceSearchAction>
    : public mojo::internal::EnumHashImpl<::new_tab_page::mojom::VoiceSearchAction> {};

template <>
struct hash<::new_tab_page::mojom::VoiceSearchError>
    : public mojo::internal::EnumHashImpl<::new_tab_page::mojom::VoiceSearchError> {};

}  // namespace std

namespace mojo {


template <>
struct EnumTraits<::new_tab_page::mojom::ThemeType, ::new_tab_page::mojom::ThemeType> {
  static ::new_tab_page::mojom::ThemeType ToMojom(::new_tab_page::mojom::ThemeType input) { return input; }
  static bool FromMojom(::new_tab_page::mojom::ThemeType input, ::new_tab_page::mojom::ThemeType* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::new_tab_page::mojom::ThemeType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::new_tab_page::mojom::ThemeType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::new_tab_page::mojom::ThemeType>(input), output);
  }
};

}  // namespace internal


template <>
struct EnumTraits<::new_tab_page::mojom::DoodleImageType, ::new_tab_page::mojom::DoodleImageType> {
  static ::new_tab_page::mojom::DoodleImageType ToMojom(::new_tab_page::mojom::DoodleImageType input) { return input; }
  static bool FromMojom(::new_tab_page::mojom::DoodleImageType input, ::new_tab_page::mojom::DoodleImageType* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::new_tab_page::mojom::DoodleImageType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::new_tab_page::mojom::DoodleImageType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::new_tab_page::mojom::DoodleImageType>(input), output);
  }
};

}  // namespace internal


template <>
struct EnumTraits<::new_tab_page::mojom::DoodleShareChannel, ::new_tab_page::mojom::DoodleShareChannel> {
  static ::new_tab_page::mojom::DoodleShareChannel ToMojom(::new_tab_page::mojom::DoodleShareChannel input) { return input; }
  static bool FromMojom(::new_tab_page::mojom::DoodleShareChannel input, ::new_tab_page::mojom::DoodleShareChannel* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::new_tab_page::mojom::DoodleShareChannel, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::new_tab_page::mojom::DoodleShareChannel, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::new_tab_page::mojom::DoodleShareChannel>(input), output);
  }
};

}  // namespace internal


template <>
struct EnumTraits<::new_tab_page::mojom::CustomizeDialogAction, ::new_tab_page::mojom::CustomizeDialogAction> {
  static ::new_tab_page::mojom::CustomizeDialogAction ToMojom(::new_tab_page::mojom::CustomizeDialogAction input) { return input; }
  static bool FromMojom(::new_tab_page::mojom::CustomizeDialogAction input, ::new_tab_page::mojom::CustomizeDialogAction* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::new_tab_page::mojom::CustomizeDialogAction, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::new_tab_page::mojom::CustomizeDialogAction, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::new_tab_page::mojom::CustomizeDialogAction>(input), output);
  }
};

}  // namespace internal


template <>
struct EnumTraits<::new_tab_page::mojom::VoiceSearchAction, ::new_tab_page::mojom::VoiceSearchAction> {
  static ::new_tab_page::mojom::VoiceSearchAction ToMojom(::new_tab_page::mojom::VoiceSearchAction input) { return input; }
  static bool FromMojom(::new_tab_page::mojom::VoiceSearchAction input, ::new_tab_page::mojom::VoiceSearchAction* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::new_tab_page::mojom::VoiceSearchAction, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::new_tab_page::mojom::VoiceSearchAction, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::new_tab_page::mojom::VoiceSearchAction>(input), output);
  }
};

}  // namespace internal


template <>
struct EnumTraits<::new_tab_page::mojom::VoiceSearchError, ::new_tab_page::mojom::VoiceSearchError> {
  static ::new_tab_page::mojom::VoiceSearchError ToMojom(::new_tab_page::mojom::VoiceSearchError input) { return input; }
  static bool FromMojom(::new_tab_page::mojom::VoiceSearchError input, ::new_tab_page::mojom::VoiceSearchError* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::new_tab_page::mojom::VoiceSearchError, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::new_tab_page::mojom::VoiceSearchError, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::new_tab_page::mojom::VoiceSearchError>(input), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::new_tab_page::mojom::OneGoogleBarPartsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::new_tab_page::mojom::OneGoogleBarPartsDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::new_tab_page::mojom::internal::OneGoogleBarParts_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::bar_html(input)) in_bar_html = Traits::bar_html(input);
    typename decltype((*output)->bar_html)::BaseType::BufferWriter
        bar_html_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_bar_html, buffer, &bar_html_writer, context);
    (*output)->bar_html.Set(
        bar_html_writer.is_null() ? nullptr : bar_html_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->bar_html.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null bar_html in OneGoogleBarParts struct");
    decltype(Traits::in_head_script(input)) in_in_head_script = Traits::in_head_script(input);
    typename decltype((*output)->in_head_script)::BaseType::BufferWriter
        in_head_script_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_in_head_script, buffer, &in_head_script_writer, context);
    (*output)->in_head_script.Set(
        in_head_script_writer.is_null() ? nullptr : in_head_script_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->in_head_script.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null in_head_script in OneGoogleBarParts struct");
    decltype(Traits::in_head_style(input)) in_in_head_style = Traits::in_head_style(input);
    typename decltype((*output)->in_head_style)::BaseType::BufferWriter
        in_head_style_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_in_head_style, buffer, &in_head_style_writer, context);
    (*output)->in_head_style.Set(
        in_head_style_writer.is_null() ? nullptr : in_head_style_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->in_head_style.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null in_head_style in OneGoogleBarParts struct");
    decltype(Traits::after_bar_script(input)) in_after_bar_script = Traits::after_bar_script(input);
    typename decltype((*output)->after_bar_script)::BaseType::BufferWriter
        after_bar_script_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_after_bar_script, buffer, &after_bar_script_writer, context);
    (*output)->after_bar_script.Set(
        after_bar_script_writer.is_null() ? nullptr : after_bar_script_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->after_bar_script.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null after_bar_script in OneGoogleBarParts struct");
    decltype(Traits::end_of_body_html(input)) in_end_of_body_html = Traits::end_of_body_html(input);
    typename decltype((*output)->end_of_body_html)::BaseType::BufferWriter
        end_of_body_html_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_end_of_body_html, buffer, &end_of_body_html_writer, context);
    (*output)->end_of_body_html.Set(
        end_of_body_html_writer.is_null() ? nullptr : end_of_body_html_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->end_of_body_html.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null end_of_body_html in OneGoogleBarParts struct");
    decltype(Traits::end_of_body_script(input)) in_end_of_body_script = Traits::end_of_body_script(input);
    typename decltype((*output)->end_of_body_script)::BaseType::BufferWriter
        end_of_body_script_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_end_of_body_script, buffer, &end_of_body_script_writer, context);
    (*output)->end_of_body_script.Set(
        end_of_body_script_writer.is_null() ? nullptr : end_of_body_script_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->end_of_body_script.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null end_of_body_script in OneGoogleBarParts struct");
  }

  static bool Deserialize(::new_tab_page::mojom::internal::OneGoogleBarParts_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::new_tab_page::mojom::OneGoogleBarPartsDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::new_tab_page::mojom::MostVisitedTileDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::new_tab_page::mojom::MostVisitedTileDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::new_tab_page::mojom::internal::MostVisitedTile_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::title(input)) in_title = Traits::title(input);
    typename decltype((*output)->title)::BaseType::BufferWriter
        title_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_title, buffer, &title_writer, context);
    (*output)->title.Set(
        title_writer.is_null() ? nullptr : title_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->title.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null title in MostVisitedTile struct");
    mojo::internal::Serialize<::mojo_base::mojom::TextDirection>(
        Traits::title_direction(input), &(*output)->title_direction);
    decltype(Traits::url(input)) in_url = Traits::url(input);
    typename decltype((*output)->url)::BaseType::BufferWriter
        url_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_url, buffer, &url_writer, context);
    (*output)->url.Set(
        url_writer.is_null() ? nullptr : url_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null url in MostVisitedTile struct");
    (*output)->source = Traits::source(input);
    (*output)->title_source = Traits::title_source(input);
    decltype(Traits::data_generation_time(input)) in_data_generation_time = Traits::data_generation_time(input);
    typename decltype((*output)->data_generation_time)::BaseType::BufferWriter
        data_generation_time_writer;
    mojo::internal::Serialize<::mojo_base::mojom::TimeDataView>(
        in_data_generation_time, buffer, &data_generation_time_writer, context);
    (*output)->data_generation_time.Set(
        data_generation_time_writer.is_null() ? nullptr : data_generation_time_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->data_generation_time.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null data_generation_time in MostVisitedTile struct");
  }

  static bool Deserialize(::new_tab_page::mojom::internal::MostVisitedTile_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::new_tab_page::mojom::MostVisitedTileDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::new_tab_page::mojom::MostVisitedInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::new_tab_page::mojom::MostVisitedInfoDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::new_tab_page::mojom::internal::MostVisitedInfo_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->custom_links_enabled = Traits::custom_links_enabled(input);
    (*output)->visible = Traits::visible(input);
    decltype(Traits::tiles(input)) in_tiles = Traits::tiles(input);
    typename decltype((*output)->tiles)::BaseType::BufferWriter
        tiles_writer;
    const mojo::internal::ContainerValidateParams tiles_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::new_tab_page::mojom::MostVisitedTileDataView>>(
        in_tiles, buffer, &tiles_writer, &tiles_validate_params,
        context);
    (*output)->tiles.Set(
        tiles_writer.is_null() ? nullptr : tiles_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->tiles.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null tiles in MostVisitedInfo struct");
  }

  static bool Deserialize(::new_tab_page::mojom::internal::MostVisitedInfo_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::new_tab_page::mojom::MostVisitedInfoDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::new_tab_page::mojom::ThemeColorsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::new_tab_page::mojom::ThemeColorsDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::new_tab_page::mojom::internal::ThemeColors_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::frame(input)) in_frame = Traits::frame(input);
    typename decltype((*output)->frame)::BaseType::BufferWriter
        frame_writer;
    mojo::internal::Serialize<::skia::mojom::SkColorDataView>(
        in_frame, buffer, &frame_writer, context);
    (*output)->frame.Set(
        frame_writer.is_null() ? nullptr : frame_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->frame.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null frame in ThemeColors struct");
    decltype(Traits::active_tab(input)) in_active_tab = Traits::active_tab(input);
    typename decltype((*output)->active_tab)::BaseType::BufferWriter
        active_tab_writer;
    mojo::internal::Serialize<::skia::mojom::SkColorDataView>(
        in_active_tab, buffer, &active_tab_writer, context);
    (*output)->active_tab.Set(
        active_tab_writer.is_null() ? nullptr : active_tab_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->active_tab.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null active_tab in ThemeColors struct");
  }

  static bool Deserialize(::new_tab_page::mojom::internal::ThemeColors_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::new_tab_page::mojom::ThemeColorsDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::new_tab_page::mojom::BackgroundCollectionDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::new_tab_page::mojom::BackgroundCollectionDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::new_tab_page::mojom::internal::BackgroundCollection_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::id(input)) in_id = Traits::id(input);
    typename decltype((*output)->id)::BaseType::BufferWriter
        id_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_id, buffer, &id_writer, context);
    (*output)->id.Set(
        id_writer.is_null() ? nullptr : id_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null id in BackgroundCollection struct");
    decltype(Traits::label(input)) in_label = Traits::label(input);
    typename decltype((*output)->label)::BaseType::BufferWriter
        label_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_label, buffer, &label_writer, context);
    (*output)->label.Set(
        label_writer.is_null() ? nullptr : label_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->label.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null label in BackgroundCollection struct");
    decltype(Traits::preview_image_url(input)) in_preview_image_url = Traits::preview_image_url(input);
    typename decltype((*output)->preview_image_url)::BaseType::BufferWriter
        preview_image_url_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_preview_image_url, buffer, &preview_image_url_writer, context);
    (*output)->preview_image_url.Set(
        preview_image_url_writer.is_null() ? nullptr : preview_image_url_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->preview_image_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null preview_image_url in BackgroundCollection struct");
  }

  static bool Deserialize(::new_tab_page::mojom::internal::BackgroundCollection_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::new_tab_page::mojom::BackgroundCollectionDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::new_tab_page::mojom::CollectionImageDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::new_tab_page::mojom::CollectionImageDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::new_tab_page::mojom::internal::CollectionImage_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::attribution_1(input)) in_attribution_1 = Traits::attribution_1(input);
    typename decltype((*output)->attribution_1)::BaseType::BufferWriter
        attribution_1_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_attribution_1, buffer, &attribution_1_writer, context);
    (*output)->attribution_1.Set(
        attribution_1_writer.is_null() ? nullptr : attribution_1_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->attribution_1.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null attribution_1 in CollectionImage struct");
    decltype(Traits::attribution_2(input)) in_attribution_2 = Traits::attribution_2(input);
    typename decltype((*output)->attribution_2)::BaseType::BufferWriter
        attribution_2_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_attribution_2, buffer, &attribution_2_writer, context);
    (*output)->attribution_2.Set(
        attribution_2_writer.is_null() ? nullptr : attribution_2_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->attribution_2.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null attribution_2 in CollectionImage struct");
    decltype(Traits::attribution_url(input)) in_attribution_url = Traits::attribution_url(input);
    typename decltype((*output)->attribution_url)::BaseType::BufferWriter
        attribution_url_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_attribution_url, buffer, &attribution_url_writer, context);
    (*output)->attribution_url.Set(
        attribution_url_writer.is_null() ? nullptr : attribution_url_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->attribution_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null attribution_url in CollectionImage struct");
    decltype(Traits::image_url(input)) in_image_url = Traits::image_url(input);
    typename decltype((*output)->image_url)::BaseType::BufferWriter
        image_url_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_image_url, buffer, &image_url_writer, context);
    (*output)->image_url.Set(
        image_url_writer.is_null() ? nullptr : image_url_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->image_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null image_url in CollectionImage struct");
    decltype(Traits::preview_image_url(input)) in_preview_image_url = Traits::preview_image_url(input);
    typename decltype((*output)->preview_image_url)::BaseType::BufferWriter
        preview_image_url_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_preview_image_url, buffer, &preview_image_url_writer, context);
    (*output)->preview_image_url.Set(
        preview_image_url_writer.is_null() ? nullptr : preview_image_url_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->preview_image_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null preview_image_url in CollectionImage struct");
  }

  static bool Deserialize(::new_tab_page::mojom::internal::CollectionImage_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::new_tab_page::mojom::CollectionImageDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::new_tab_page::mojom::ChromeThemeDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::new_tab_page::mojom::ChromeThemeDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::new_tab_page::mojom::internal::ChromeTheme_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->id = Traits::id(input);
    decltype(Traits::label(input)) in_label = Traits::label(input);
    typename decltype((*output)->label)::BaseType::BufferWriter
        label_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_label, buffer, &label_writer, context);
    (*output)->label.Set(
        label_writer.is_null() ? nullptr : label_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->label.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null label in ChromeTheme struct");
    decltype(Traits::colors(input)) in_colors = Traits::colors(input);
    typename decltype((*output)->colors)::BaseType::BufferWriter
        colors_writer;
    mojo::internal::Serialize<::new_tab_page::mojom::ThemeColorsDataView>(
        in_colors, buffer, &colors_writer, context);
    (*output)->colors.Set(
        colors_writer.is_null() ? nullptr : colors_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->colors.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null colors in ChromeTheme struct");
  }

  static bool Deserialize(::new_tab_page::mojom::internal::ChromeTheme_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::new_tab_page::mojom::ChromeThemeDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::new_tab_page::mojom::ThirdPartyThemeInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::new_tab_page::mojom::ThirdPartyThemeInfoDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::new_tab_page::mojom::internal::ThirdPartyThemeInfo_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::id(input)) in_id = Traits::id(input);
    typename decltype((*output)->id)::BaseType::BufferWriter
        id_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_id, buffer, &id_writer, context);
    (*output)->id.Set(
        id_writer.is_null() ? nullptr : id_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null id in ThirdPartyThemeInfo struct");
    decltype(Traits::name(input)) in_name = Traits::name(input);
    typename decltype((*output)->name)::BaseType::BufferWriter
        name_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_name, buffer, &name_writer, context);
    (*output)->name.Set(
        name_writer.is_null() ? nullptr : name_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->name.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null name in ThirdPartyThemeInfo struct");
  }

  static bool Deserialize(::new_tab_page::mojom::internal::ThirdPartyThemeInfo_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::new_tab_page::mojom::ThirdPartyThemeInfoDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::new_tab_page::mojom::SearchBoxThemeDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::new_tab_page::mojom::SearchBoxThemeDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::new_tab_page::mojom::internal::SearchBoxTheme_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::bg(input)) in_bg = Traits::bg(input);
    typename decltype((*output)->bg)::BaseType::BufferWriter
        bg_writer;
    mojo::internal::Serialize<::skia::mojom::SkColorDataView>(
        in_bg, buffer, &bg_writer, context);
    (*output)->bg.Set(
        bg_writer.is_null() ? nullptr : bg_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->bg.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null bg in SearchBoxTheme struct");
    decltype(Traits::icon(input)) in_icon = Traits::icon(input);
    typename decltype((*output)->icon)::BaseType::BufferWriter
        icon_writer;
    mojo::internal::Serialize<::skia::mojom::SkColorDataView>(
        in_icon, buffer, &icon_writer, context);
    (*output)->icon.Set(
        icon_writer.is_null() ? nullptr : icon_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->icon.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null icon in SearchBoxTheme struct");
    decltype(Traits::icon_selected(input)) in_icon_selected = Traits::icon_selected(input);
    typename decltype((*output)->icon_selected)::BaseType::BufferWriter
        icon_selected_writer;
    mojo::internal::Serialize<::skia::mojom::SkColorDataView>(
        in_icon_selected, buffer, &icon_selected_writer, context);
    (*output)->icon_selected.Set(
        icon_selected_writer.is_null() ? nullptr : icon_selected_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->icon_selected.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null icon_selected in SearchBoxTheme struct");
    decltype(Traits::placeholder(input)) in_placeholder = Traits::placeholder(input);
    typename decltype((*output)->placeholder)::BaseType::BufferWriter
        placeholder_writer;
    mojo::internal::Serialize<::skia::mojom::SkColorDataView>(
        in_placeholder, buffer, &placeholder_writer, context);
    (*output)->placeholder.Set(
        placeholder_writer.is_null() ? nullptr : placeholder_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->placeholder.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null placeholder in SearchBoxTheme struct");
    decltype(Traits::results_bg(input)) in_results_bg = Traits::results_bg(input);
    typename decltype((*output)->results_bg)::BaseType::BufferWriter
        results_bg_writer;
    mojo::internal::Serialize<::skia::mojom::SkColorDataView>(
        in_results_bg, buffer, &results_bg_writer, context);
    (*output)->results_bg.Set(
        results_bg_writer.is_null() ? nullptr : results_bg_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->results_bg.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null results_bg in SearchBoxTheme struct");
    decltype(Traits::results_bg_hovered(input)) in_results_bg_hovered = Traits::results_bg_hovered(input);
    typename decltype((*output)->results_bg_hovered)::BaseType::BufferWriter
        results_bg_hovered_writer;
    mojo::internal::Serialize<::skia::mojom::SkColorDataView>(
        in_results_bg_hovered, buffer, &results_bg_hovered_writer, context);
    (*output)->results_bg_hovered.Set(
        results_bg_hovered_writer.is_null() ? nullptr : results_bg_hovered_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->results_bg_hovered.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null results_bg_hovered in SearchBoxTheme struct");
    decltype(Traits::results_bg_selected(input)) in_results_bg_selected = Traits::results_bg_selected(input);
    typename decltype((*output)->results_bg_selected)::BaseType::BufferWriter
        results_bg_selected_writer;
    mojo::internal::Serialize<::skia::mojom::SkColorDataView>(
        in_results_bg_selected, buffer, &results_bg_selected_writer, context);
    (*output)->results_bg_selected.Set(
        results_bg_selected_writer.is_null() ? nullptr : results_bg_selected_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->results_bg_selected.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null results_bg_selected in SearchBoxTheme struct");
    decltype(Traits::results_dim(input)) in_results_dim = Traits::results_dim(input);
    typename decltype((*output)->results_dim)::BaseType::BufferWriter
        results_dim_writer;
    mojo::internal::Serialize<::skia::mojom::SkColorDataView>(
        in_results_dim, buffer, &results_dim_writer, context);
    (*output)->results_dim.Set(
        results_dim_writer.is_null() ? nullptr : results_dim_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->results_dim.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null results_dim in SearchBoxTheme struct");
    decltype(Traits::results_dim_selected(input)) in_results_dim_selected = Traits::results_dim_selected(input);
    typename decltype((*output)->results_dim_selected)::BaseType::BufferWriter
        results_dim_selected_writer;
    mojo::internal::Serialize<::skia::mojom::SkColorDataView>(
        in_results_dim_selected, buffer, &results_dim_selected_writer, context);
    (*output)->results_dim_selected.Set(
        results_dim_selected_writer.is_null() ? nullptr : results_dim_selected_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->results_dim_selected.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null results_dim_selected in SearchBoxTheme struct");
    decltype(Traits::results_text(input)) in_results_text = Traits::results_text(input);
    typename decltype((*output)->results_text)::BaseType::BufferWriter
        results_text_writer;
    mojo::internal::Serialize<::skia::mojom::SkColorDataView>(
        in_results_text, buffer, &results_text_writer, context);
    (*output)->results_text.Set(
        results_text_writer.is_null() ? nullptr : results_text_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->results_text.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null results_text in SearchBoxTheme struct");
    decltype(Traits::results_text_selected(input)) in_results_text_selected = Traits::results_text_selected(input);
    typename decltype((*output)->results_text_selected)::BaseType::BufferWriter
        results_text_selected_writer;
    mojo::internal::Serialize<::skia::mojom::SkColorDataView>(
        in_results_text_selected, buffer, &results_text_selected_writer, context);
    (*output)->results_text_selected.Set(
        results_text_selected_writer.is_null() ? nullptr : results_text_selected_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->results_text_selected.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null results_text_selected in SearchBoxTheme struct");
    decltype(Traits::results_url(input)) in_results_url = Traits::results_url(input);
    typename decltype((*output)->results_url)::BaseType::BufferWriter
        results_url_writer;
    mojo::internal::Serialize<::skia::mojom::SkColorDataView>(
        in_results_url, buffer, &results_url_writer, context);
    (*output)->results_url.Set(
        results_url_writer.is_null() ? nullptr : results_url_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->results_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null results_url in SearchBoxTheme struct");
    decltype(Traits::results_url_selected(input)) in_results_url_selected = Traits::results_url_selected(input);
    typename decltype((*output)->results_url_selected)::BaseType::BufferWriter
        results_url_selected_writer;
    mojo::internal::Serialize<::skia::mojom::SkColorDataView>(
        in_results_url_selected, buffer, &results_url_selected_writer, context);
    (*output)->results_url_selected.Set(
        results_url_selected_writer.is_null() ? nullptr : results_url_selected_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->results_url_selected.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null results_url_selected in SearchBoxTheme struct");
    decltype(Traits::text(input)) in_text = Traits::text(input);
    typename decltype((*output)->text)::BaseType::BufferWriter
        text_writer;
    mojo::internal::Serialize<::skia::mojom::SkColorDataView>(
        in_text, buffer, &text_writer, context);
    (*output)->text.Set(
        text_writer.is_null() ? nullptr : text_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->text.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null text in SearchBoxTheme struct");
  }

  static bool Deserialize(::new_tab_page::mojom::internal::SearchBoxTheme_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::new_tab_page::mojom::SearchBoxThemeDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::new_tab_page::mojom::BackgroundImageDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::new_tab_page::mojom::BackgroundImageDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::new_tab_page::mojom::internal::BackgroundImage_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::url(input)) in_url = Traits::url(input);
    typename decltype((*output)->url)::BaseType::BufferWriter
        url_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_url, buffer, &url_writer, context);
    (*output)->url.Set(
        url_writer.is_null() ? nullptr : url_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null url in BackgroundImage struct");
    decltype(Traits::url_2x(input)) in_url_2x = Traits::url_2x(input);
    typename decltype((*output)->url_2x)::BaseType::BufferWriter
        url_2x_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_url_2x, buffer, &url_2x_writer, context);
    (*output)->url_2x.Set(
        url_2x_writer.is_null() ? nullptr : url_2x_writer.data());
    decltype(Traits::attribution_url(input)) in_attribution_url = Traits::attribution_url(input);
    typename decltype((*output)->attribution_url)::BaseType::BufferWriter
        attribution_url_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_attribution_url, buffer, &attribution_url_writer, context);
    (*output)->attribution_url.Set(
        attribution_url_writer.is_null() ? nullptr : attribution_url_writer.data());
    decltype(Traits::size(input)) in_size = Traits::size(input);
    typename decltype((*output)->size)::BaseType::BufferWriter
        size_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_size, buffer, &size_writer, context);
    (*output)->size.Set(
        size_writer.is_null() ? nullptr : size_writer.data());
    decltype(Traits::repeat_x(input)) in_repeat_x = Traits::repeat_x(input);
    typename decltype((*output)->repeat_x)::BaseType::BufferWriter
        repeat_x_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_repeat_x, buffer, &repeat_x_writer, context);
    (*output)->repeat_x.Set(
        repeat_x_writer.is_null() ? nullptr : repeat_x_writer.data());
    decltype(Traits::repeat_y(input)) in_repeat_y = Traits::repeat_y(input);
    typename decltype((*output)->repeat_y)::BaseType::BufferWriter
        repeat_y_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_repeat_y, buffer, &repeat_y_writer, context);
    (*output)->repeat_y.Set(
        repeat_y_writer.is_null() ? nullptr : repeat_y_writer.data());
    decltype(Traits::position_x(input)) in_position_x = Traits::position_x(input);
    typename decltype((*output)->position_x)::BaseType::BufferWriter
        position_x_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_position_x, buffer, &position_x_writer, context);
    (*output)->position_x.Set(
        position_x_writer.is_null() ? nullptr : position_x_writer.data());
    decltype(Traits::position_y(input)) in_position_y = Traits::position_y(input);
    typename decltype((*output)->position_y)::BaseType::BufferWriter
        position_y_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_position_y, buffer, &position_y_writer, context);
    (*output)->position_y.Set(
        position_y_writer.is_null() ? nullptr : position_y_writer.data());
  }

  static bool Deserialize(::new_tab_page::mojom::internal::BackgroundImage_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::new_tab_page::mojom::BackgroundImageDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::new_tab_page::mojom::ThemeDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::new_tab_page::mojom::ThemeDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::new_tab_page::mojom::internal::Theme_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    mojo::internal::Serialize<::new_tab_page::mojom::ThemeType>(
        Traits::type(input), &(*output)->type);
    decltype(Traits::background_color(input)) in_background_color = Traits::background_color(input);
    typename decltype((*output)->background_color)::BaseType::BufferWriter
        background_color_writer;
    mojo::internal::Serialize<::skia::mojom::SkColorDataView>(
        in_background_color, buffer, &background_color_writer, context);
    (*output)->background_color.Set(
        background_color_writer.is_null() ? nullptr : background_color_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->background_color.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null background_color in Theme struct");
    decltype(Traits::shortcut_background_color(input)) in_shortcut_background_color = Traits::shortcut_background_color(input);
    typename decltype((*output)->shortcut_background_color)::BaseType::BufferWriter
        shortcut_background_color_writer;
    mojo::internal::Serialize<::skia::mojom::SkColorDataView>(
        in_shortcut_background_color, buffer, &shortcut_background_color_writer, context);
    (*output)->shortcut_background_color.Set(
        shortcut_background_color_writer.is_null() ? nullptr : shortcut_background_color_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->shortcut_background_color.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null shortcut_background_color in Theme struct");
    decltype(Traits::shortcut_text_color(input)) in_shortcut_text_color = Traits::shortcut_text_color(input);
    typename decltype((*output)->shortcut_text_color)::BaseType::BufferWriter
        shortcut_text_color_writer;
    mojo::internal::Serialize<::skia::mojom::SkColorDataView>(
        in_shortcut_text_color, buffer, &shortcut_text_color_writer, context);
    (*output)->shortcut_text_color.Set(
        shortcut_text_color_writer.is_null() ? nullptr : shortcut_text_color_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->shortcut_text_color.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null shortcut_text_color in Theme struct");
    (*output)->shortcut_use_white_add_icon = Traits::shortcut_use_white_add_icon(input);
    (*output)->shortcut_use_title_pill = Traits::shortcut_use_title_pill(input);
    (*output)->is_dark = Traits::is_dark(input);
    decltype(Traits::logo_color(input)) in_logo_color = Traits::logo_color(input);
    typename decltype((*output)->logo_color)::BaseType::BufferWriter
        logo_color_writer;
    mojo::internal::Serialize<::skia::mojom::SkColorDataView>(
        in_logo_color, buffer, &logo_color_writer, context);
    (*output)->logo_color.Set(
        logo_color_writer.is_null() ? nullptr : logo_color_writer.data());
    decltype(Traits::daily_refresh_collection_id(input)) in_daily_refresh_collection_id = Traits::daily_refresh_collection_id(input);
    typename decltype((*output)->daily_refresh_collection_id)::BaseType::BufferWriter
        daily_refresh_collection_id_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_daily_refresh_collection_id, buffer, &daily_refresh_collection_id_writer, context);
    (*output)->daily_refresh_collection_id.Set(
        daily_refresh_collection_id_writer.is_null() ? nullptr : daily_refresh_collection_id_writer.data());
    decltype(Traits::background_image(input)) in_background_image = Traits::background_image(input);
    typename decltype((*output)->background_image)::BaseType::BufferWriter
        background_image_writer;
    mojo::internal::Serialize<::new_tab_page::mojom::BackgroundImageDataView>(
        in_background_image, buffer, &background_image_writer, context);
    (*output)->background_image.Set(
        background_image_writer.is_null() ? nullptr : background_image_writer.data());
    decltype(Traits::background_image_attribution_1(input)) in_background_image_attribution_1 = Traits::background_image_attribution_1(input);
    typename decltype((*output)->background_image_attribution_1)::BaseType::BufferWriter
        background_image_attribution_1_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_background_image_attribution_1, buffer, &background_image_attribution_1_writer, context);
    (*output)->background_image_attribution_1.Set(
        background_image_attribution_1_writer.is_null() ? nullptr : background_image_attribution_1_writer.data());
    decltype(Traits::background_image_attribution_2(input)) in_background_image_attribution_2 = Traits::background_image_attribution_2(input);
    typename decltype((*output)->background_image_attribution_2)::BaseType::BufferWriter
        background_image_attribution_2_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_background_image_attribution_2, buffer, &background_image_attribution_2_writer, context);
    (*output)->background_image_attribution_2.Set(
        background_image_attribution_2_writer.is_null() ? nullptr : background_image_attribution_2_writer.data());
    decltype(Traits::background_image_attribution_url(input)) in_background_image_attribution_url = Traits::background_image_attribution_url(input);
    typename decltype((*output)->background_image_attribution_url)::BaseType::BufferWriter
        background_image_attribution_url_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_background_image_attribution_url, buffer, &background_image_attribution_url_writer, context);
    (*output)->background_image_attribution_url.Set(
        background_image_attribution_url_writer.is_null() ? nullptr : background_image_attribution_url_writer.data());
    decltype(Traits::info(input)) in_info = Traits::info(input);
    typename decltype((*output)->info)::BufferWriter info_writer;
    info_writer.AllocateInline(buffer, &(*output)->info);
    mojo::internal::Serialize<::new_tab_page::mojom::ThemeInfoDataView>(
        in_info, buffer, &info_writer, true, context);
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->info.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null info in Theme struct");
    decltype(Traits::search_box(input)) in_search_box = Traits::search_box(input);
    typename decltype((*output)->search_box)::BaseType::BufferWriter
        search_box_writer;
    mojo::internal::Serialize<::new_tab_page::mojom::SearchBoxThemeDataView>(
        in_search_box, buffer, &search_box_writer, context);
    (*output)->search_box.Set(
        search_box_writer.is_null() ? nullptr : search_box_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->search_box.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null search_box in Theme struct");
  }

  static bool Deserialize(::new_tab_page::mojom::internal::Theme_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::new_tab_page::mojom::ThemeDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::new_tab_page::mojom::DoodleShareButtonDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::new_tab_page::mojom::DoodleShareButtonDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::new_tab_page::mojom::internal::DoodleShareButton_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->x = Traits::x(input);
    (*output)->y = Traits::y(input);
    decltype(Traits::background_color(input)) in_background_color = Traits::background_color(input);
    typename decltype((*output)->background_color)::BaseType::BufferWriter
        background_color_writer;
    mojo::internal::Serialize<::skia::mojom::SkColorDataView>(
        in_background_color, buffer, &background_color_writer, context);
    (*output)->background_color.Set(
        background_color_writer.is_null() ? nullptr : background_color_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->background_color.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null background_color in DoodleShareButton struct");
    decltype(Traits::icon_url(input)) in_icon_url = Traits::icon_url(input);
    typename decltype((*output)->icon_url)::BaseType::BufferWriter
        icon_url_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_icon_url, buffer, &icon_url_writer, context);
    (*output)->icon_url.Set(
        icon_url_writer.is_null() ? nullptr : icon_url_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->icon_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null icon_url in DoodleShareButton struct");
  }

  static bool Deserialize(::new_tab_page::mojom::internal::DoodleShareButton_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::new_tab_page::mojom::DoodleShareButtonDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::new_tab_page::mojom::ImageDoodleContentDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::new_tab_page::mojom::ImageDoodleContentDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::new_tab_page::mojom::internal::ImageDoodleContent_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::image_url(input)) in_image_url = Traits::image_url(input);
    typename decltype((*output)->image_url)::BaseType::BufferWriter
        image_url_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_image_url, buffer, &image_url_writer, context);
    (*output)->image_url.Set(
        image_url_writer.is_null() ? nullptr : image_url_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->image_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null image_url in ImageDoodleContent struct");
    decltype(Traits::on_click_url(input)) in_on_click_url = Traits::on_click_url(input);
    typename decltype((*output)->on_click_url)::BaseType::BufferWriter
        on_click_url_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_on_click_url, buffer, &on_click_url_writer, context);
    (*output)->on_click_url.Set(
        on_click_url_writer.is_null() ? nullptr : on_click_url_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->on_click_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null on_click_url in ImageDoodleContent struct");
    decltype(Traits::animation_url(input)) in_animation_url = Traits::animation_url(input);
    typename decltype((*output)->animation_url)::BaseType::BufferWriter
        animation_url_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_animation_url, buffer, &animation_url_writer, context);
    (*output)->animation_url.Set(
        animation_url_writer.is_null() ? nullptr : animation_url_writer.data());
    (*output)->width = Traits::width(input);
    (*output)->height = Traits::height(input);
    decltype(Traits::background_color(input)) in_background_color = Traits::background_color(input);
    typename decltype((*output)->background_color)::BaseType::BufferWriter
        background_color_writer;
    mojo::internal::Serialize<::skia::mojom::SkColorDataView>(
        in_background_color, buffer, &background_color_writer, context);
    (*output)->background_color.Set(
        background_color_writer.is_null() ? nullptr : background_color_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->background_color.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null background_color in ImageDoodleContent struct");
    decltype(Traits::share_button(input)) in_share_button = Traits::share_button(input);
    typename decltype((*output)->share_button)::BaseType::BufferWriter
        share_button_writer;
    mojo::internal::Serialize<::new_tab_page::mojom::DoodleShareButtonDataView>(
        in_share_button, buffer, &share_button_writer, context);
    (*output)->share_button.Set(
        share_button_writer.is_null() ? nullptr : share_button_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->share_button.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null share_button in ImageDoodleContent struct");
    decltype(Traits::share_url(input)) in_share_url = Traits::share_url(input);
    typename decltype((*output)->share_url)::BaseType::BufferWriter
        share_url_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_share_url, buffer, &share_url_writer, context);
    (*output)->share_url.Set(
        share_url_writer.is_null() ? nullptr : share_url_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->share_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null share_url in ImageDoodleContent struct");
    decltype(Traits::image_impression_log_url(input)) in_image_impression_log_url = Traits::image_impression_log_url(input);
    typename decltype((*output)->image_impression_log_url)::BaseType::BufferWriter
        image_impression_log_url_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_image_impression_log_url, buffer, &image_impression_log_url_writer, context);
    (*output)->image_impression_log_url.Set(
        image_impression_log_url_writer.is_null() ? nullptr : image_impression_log_url_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->image_impression_log_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null image_impression_log_url in ImageDoodleContent struct");
    decltype(Traits::animation_impression_log_url(input)) in_animation_impression_log_url = Traits::animation_impression_log_url(input);
    typename decltype((*output)->animation_impression_log_url)::BaseType::BufferWriter
        animation_impression_log_url_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_animation_impression_log_url, buffer, &animation_impression_log_url_writer, context);
    (*output)->animation_impression_log_url.Set(
        animation_impression_log_url_writer.is_null() ? nullptr : animation_impression_log_url_writer.data());
  }

  static bool Deserialize(::new_tab_page::mojom::internal::ImageDoodleContent_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::new_tab_page::mojom::ImageDoodleContentDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::new_tab_page::mojom::InteractiveDoodleContentDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::new_tab_page::mojom::InteractiveDoodleContentDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::new_tab_page::mojom::internal::InteractiveDoodleContent_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::url(input)) in_url = Traits::url(input);
    typename decltype((*output)->url)::BaseType::BufferWriter
        url_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_url, buffer, &url_writer, context);
    (*output)->url.Set(
        url_writer.is_null() ? nullptr : url_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null url in InteractiveDoodleContent struct");
    (*output)->width = Traits::width(input);
    (*output)->height = Traits::height(input);
  }

  static bool Deserialize(::new_tab_page::mojom::internal::InteractiveDoodleContent_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::new_tab_page::mojom::InteractiveDoodleContentDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::new_tab_page::mojom::DoodleDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::new_tab_page::mojom::DoodleDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::new_tab_page::mojom::internal::Doodle_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::content(input)) in_content = Traits::content(input);
    typename decltype((*output)->content)::BufferWriter content_writer;
    content_writer.AllocateInline(buffer, &(*output)->content);
    mojo::internal::Serialize<::new_tab_page::mojom::DoodleContentDataView>(
        in_content, buffer, &content_writer, true, context);
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->content.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null content in Doodle struct");
    decltype(Traits::description(input)) in_description = Traits::description(input);
    typename decltype((*output)->description)::BaseType::BufferWriter
        description_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_description, buffer, &description_writer, context);
    (*output)->description.Set(
        description_writer.is_null() ? nullptr : description_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->description.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null description in Doodle struct");
  }

  static bool Deserialize(::new_tab_page::mojom::internal::Doodle_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::new_tab_page::mojom::DoodleDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::new_tab_page::mojom::ThemeInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = UnionTraits<::new_tab_page::mojom::ThemeInfoDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::new_tab_page::mojom::internal::ThemeInfo_Data::BufferWriter* writer,
                        bool inlined,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input)) {
       if (inlined)
         writer->data()->set_null();
      return;
    }
    if (!inlined)
      writer->Allocate(buffer);

    ::new_tab_page::mojom::internal::ThemeInfo_Data::BufferWriter& result = *writer;
    ALLOW_UNUSED_LOCAL(result);
    // TODO(azani): Handle unknown and objects.
    // Set the not-null flag.
    result->size = kUnionDataSize;
    result->tag = Traits::GetTag(input);
    switch (result->tag) {
      case ::new_tab_page::mojom::ThemeInfoDataView::Tag::CHROME_THEME_ID: {
        decltype(Traits::chrome_theme_id(input))
            in_chrome_theme_id = Traits::chrome_theme_id(input);
        result->data.f_chrome_theme_id = in_chrome_theme_id;
        break;
      }
      case ::new_tab_page::mojom::ThemeInfoDataView::Tag::AUTOGENERATED_THEME_COLORS: {
        decltype(Traits::autogenerated_theme_colors(input))
            in_autogenerated_theme_colors = Traits::autogenerated_theme_colors(input);
        typename decltype(result->data.f_autogenerated_theme_colors)::BaseType::BufferWriter
            value_writer;
        mojo::internal::Serialize<::new_tab_page::mojom::ThemeColorsDataView>(
            in_autogenerated_theme_colors, buffer, &value_writer, context);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_writer.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null autogenerated_theme_colors in ThemeInfo union");
        result->data.f_autogenerated_theme_colors.Set(
            value_writer.is_null() ? nullptr : value_writer.data());
        break;
      }
      case ::new_tab_page::mojom::ThemeInfoDataView::Tag::THIRD_PARTY_THEME_INFO: {
        decltype(Traits::third_party_theme_info(input))
            in_third_party_theme_info = Traits::third_party_theme_info(input);
        typename decltype(result->data.f_third_party_theme_info)::BaseType::BufferWriter
            value_writer;
        mojo::internal::Serialize<::new_tab_page::mojom::ThirdPartyThemeInfoDataView>(
            in_third_party_theme_info, buffer, &value_writer, context);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_writer.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null third_party_theme_info in ThemeInfo union");
        result->data.f_third_party_theme_info.Set(
            value_writer.is_null() ? nullptr : value_writer.data());
        break;
      }
    }
  }

  static bool Deserialize(::new_tab_page::mojom::internal::ThemeInfo_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input || input->is_null())
      return CallSetToNullIfExists<Traits>(output);

    ::new_tab_page::mojom::ThemeInfoDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::new_tab_page::mojom::DoodleContentDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = UnionTraits<::new_tab_page::mojom::DoodleContentDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::new_tab_page::mojom::internal::DoodleContent_Data::BufferWriter* writer,
                        bool inlined,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input)) {
       if (inlined)
         writer->data()->set_null();
      return;
    }
    if (!inlined)
      writer->Allocate(buffer);

    ::new_tab_page::mojom::internal::DoodleContent_Data::BufferWriter& result = *writer;
    ALLOW_UNUSED_LOCAL(result);
    // TODO(azani): Handle unknown and objects.
    // Set the not-null flag.
    result->size = kUnionDataSize;
    result->tag = Traits::GetTag(input);
    switch (result->tag) {
      case ::new_tab_page::mojom::DoodleContentDataView::Tag::IMAGE_DOODLE: {
        decltype(Traits::image_doodle(input))
            in_image_doodle = Traits::image_doodle(input);
        typename decltype(result->data.f_image_doodle)::BaseType::BufferWriter
            value_writer;
        mojo::internal::Serialize<::new_tab_page::mojom::ImageDoodleContentDataView>(
            in_image_doodle, buffer, &value_writer, context);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_writer.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null image_doodle in DoodleContent union");
        result->data.f_image_doodle.Set(
            value_writer.is_null() ? nullptr : value_writer.data());
        break;
      }
      case ::new_tab_page::mojom::DoodleContentDataView::Tag::INTERACTIVE_DOODLE: {
        decltype(Traits::interactive_doodle(input))
            in_interactive_doodle = Traits::interactive_doodle(input);
        typename decltype(result->data.f_interactive_doodle)::BaseType::BufferWriter
            value_writer;
        mojo::internal::Serialize<::new_tab_page::mojom::InteractiveDoodleContentDataView>(
            in_interactive_doodle, buffer, &value_writer, context);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_writer.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null interactive_doodle in DoodleContent union");
        result->data.f_interactive_doodle.Set(
            value_writer.is_null() ? nullptr : value_writer.data());
        break;
      }
    }
  }

  static bool Deserialize(::new_tab_page::mojom::internal::DoodleContent_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input || input->is_null())
      return CallSetToNullIfExists<Traits>(output);

    ::new_tab_page::mojom::DoodleContentDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace new_tab_page {
namespace mojom {

inline void OneGoogleBarPartsDataView::GetBarHtmlDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->bar_html.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void OneGoogleBarPartsDataView::GetInHeadScriptDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->in_head_script.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void OneGoogleBarPartsDataView::GetInHeadStyleDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->in_head_style.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void OneGoogleBarPartsDataView::GetAfterBarScriptDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->after_bar_script.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void OneGoogleBarPartsDataView::GetEndOfBodyHtmlDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->end_of_body_html.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void OneGoogleBarPartsDataView::GetEndOfBodyScriptDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->end_of_body_script.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void MostVisitedTileDataView::GetTitleDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->title.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void MostVisitedTileDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void MostVisitedTileDataView::GetDataGenerationTimeDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->data_generation_time.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, context_);
}


inline void MostVisitedInfoDataView::GetTilesDataView(
    mojo::ArrayDataView<MostVisitedTileDataView>* output) {
  auto pointer = data_->tiles.Get();
  *output = mojo::ArrayDataView<MostVisitedTileDataView>(pointer, context_);
}


inline void ThemeColorsDataView::GetFrameDataView(
    ::skia::mojom::SkColorDataView* output) {
  auto pointer = data_->frame.Get();
  *output = ::skia::mojom::SkColorDataView(pointer, context_);
}
inline void ThemeColorsDataView::GetActiveTabDataView(
    ::skia::mojom::SkColorDataView* output) {
  auto pointer = data_->active_tab.Get();
  *output = ::skia::mojom::SkColorDataView(pointer, context_);
}


inline void BackgroundCollectionDataView::GetIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->id.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void BackgroundCollectionDataView::GetLabelDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->label.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void BackgroundCollectionDataView::GetPreviewImageUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->preview_image_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}


inline void CollectionImageDataView::GetAttribution1DataView(
    mojo::StringDataView* output) {
  auto pointer = data_->attribution_1.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void CollectionImageDataView::GetAttribution2DataView(
    mojo::StringDataView* output) {
  auto pointer = data_->attribution_2.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void CollectionImageDataView::GetAttributionUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->attribution_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void CollectionImageDataView::GetImageUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->image_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void CollectionImageDataView::GetPreviewImageUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->preview_image_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}


inline void ChromeThemeDataView::GetLabelDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->label.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void ChromeThemeDataView::GetColorsDataView(
    ThemeColorsDataView* output) {
  auto pointer = data_->colors.Get();
  *output = ThemeColorsDataView(pointer, context_);
}


inline void ThirdPartyThemeInfoDataView::GetIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->id.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void ThirdPartyThemeInfoDataView::GetNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->name.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void SearchBoxThemeDataView::GetBgDataView(
    ::skia::mojom::SkColorDataView* output) {
  auto pointer = data_->bg.Get();
  *output = ::skia::mojom::SkColorDataView(pointer, context_);
}
inline void SearchBoxThemeDataView::GetIconDataView(
    ::skia::mojom::SkColorDataView* output) {
  auto pointer = data_->icon.Get();
  *output = ::skia::mojom::SkColorDataView(pointer, context_);
}
inline void SearchBoxThemeDataView::GetIconSelectedDataView(
    ::skia::mojom::SkColorDataView* output) {
  auto pointer = data_->icon_selected.Get();
  *output = ::skia::mojom::SkColorDataView(pointer, context_);
}
inline void SearchBoxThemeDataView::GetPlaceholderDataView(
    ::skia::mojom::SkColorDataView* output) {
  auto pointer = data_->placeholder.Get();
  *output = ::skia::mojom::SkColorDataView(pointer, context_);
}
inline void SearchBoxThemeDataView::GetResultsBgDataView(
    ::skia::mojom::SkColorDataView* output) {
  auto pointer = data_->results_bg.Get();
  *output = ::skia::mojom::SkColorDataView(pointer, context_);
}
inline void SearchBoxThemeDataView::GetResultsBgHoveredDataView(
    ::skia::mojom::SkColorDataView* output) {
  auto pointer = data_->results_bg_hovered.Get();
  *output = ::skia::mojom::SkColorDataView(pointer, context_);
}
inline void SearchBoxThemeDataView::GetResultsBgSelectedDataView(
    ::skia::mojom::SkColorDataView* output) {
  auto pointer = data_->results_bg_selected.Get();
  *output = ::skia::mojom::SkColorDataView(pointer, context_);
}
inline void SearchBoxThemeDataView::GetResultsDimDataView(
    ::skia::mojom::SkColorDataView* output) {
  auto pointer = data_->results_dim.Get();
  *output = ::skia::mojom::SkColorDataView(pointer, context_);
}
inline void SearchBoxThemeDataView::GetResultsDimSelectedDataView(
    ::skia::mojom::SkColorDataView* output) {
  auto pointer = data_->results_dim_selected.Get();
  *output = ::skia::mojom::SkColorDataView(pointer, context_);
}
inline void SearchBoxThemeDataView::GetResultsTextDataView(
    ::skia::mojom::SkColorDataView* output) {
  auto pointer = data_->results_text.Get();
  *output = ::skia::mojom::SkColorDataView(pointer, context_);
}
inline void SearchBoxThemeDataView::GetResultsTextSelectedDataView(
    ::skia::mojom::SkColorDataView* output) {
  auto pointer = data_->results_text_selected.Get();
  *output = ::skia::mojom::SkColorDataView(pointer, context_);
}
inline void SearchBoxThemeDataView::GetResultsUrlDataView(
    ::skia::mojom::SkColorDataView* output) {
  auto pointer = data_->results_url.Get();
  *output = ::skia::mojom::SkColorDataView(pointer, context_);
}
inline void SearchBoxThemeDataView::GetResultsUrlSelectedDataView(
    ::skia::mojom::SkColorDataView* output) {
  auto pointer = data_->results_url_selected.Get();
  *output = ::skia::mojom::SkColorDataView(pointer, context_);
}
inline void SearchBoxThemeDataView::GetTextDataView(
    ::skia::mojom::SkColorDataView* output) {
  auto pointer = data_->text.Get();
  *output = ::skia::mojom::SkColorDataView(pointer, context_);
}


inline void BackgroundImageDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void BackgroundImageDataView::GetUrl2xDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url_2x.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void BackgroundImageDataView::GetAttributionUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->attribution_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void BackgroundImageDataView::GetSizeDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->size.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void BackgroundImageDataView::GetRepeatXDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->repeat_x.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void BackgroundImageDataView::GetRepeatYDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->repeat_y.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void BackgroundImageDataView::GetPositionXDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->position_x.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void BackgroundImageDataView::GetPositionYDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->position_y.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void ThemeDataView::GetBackgroundColorDataView(
    ::skia::mojom::SkColorDataView* output) {
  auto pointer = data_->background_color.Get();
  *output = ::skia::mojom::SkColorDataView(pointer, context_);
}
inline void ThemeDataView::GetShortcutBackgroundColorDataView(
    ::skia::mojom::SkColorDataView* output) {
  auto pointer = data_->shortcut_background_color.Get();
  *output = ::skia::mojom::SkColorDataView(pointer, context_);
}
inline void ThemeDataView::GetShortcutTextColorDataView(
    ::skia::mojom::SkColorDataView* output) {
  auto pointer = data_->shortcut_text_color.Get();
  *output = ::skia::mojom::SkColorDataView(pointer, context_);
}
inline void ThemeDataView::GetLogoColorDataView(
    ::skia::mojom::SkColorDataView* output) {
  auto pointer = data_->logo_color.Get();
  *output = ::skia::mojom::SkColorDataView(pointer, context_);
}
inline void ThemeDataView::GetDailyRefreshCollectionIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->daily_refresh_collection_id.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void ThemeDataView::GetBackgroundImageDataView(
    BackgroundImageDataView* output) {
  auto pointer = data_->background_image.Get();
  *output = BackgroundImageDataView(pointer, context_);
}
inline void ThemeDataView::GetBackgroundImageAttribution1DataView(
    mojo::StringDataView* output) {
  auto pointer = data_->background_image_attribution_1.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void ThemeDataView::GetBackgroundImageAttribution2DataView(
    mojo::StringDataView* output) {
  auto pointer = data_->background_image_attribution_2.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void ThemeDataView::GetBackgroundImageAttributionUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->background_image_attribution_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void ThemeDataView::GetInfoDataView(
    ThemeInfoDataView* output) {
  auto pointer = &data_->info;
  *output = ThemeInfoDataView(pointer, context_);
}
inline void ThemeDataView::GetSearchBoxDataView(
    SearchBoxThemeDataView* output) {
  auto pointer = data_->search_box.Get();
  *output = SearchBoxThemeDataView(pointer, context_);
}


inline void DoodleShareButtonDataView::GetBackgroundColorDataView(
    ::skia::mojom::SkColorDataView* output) {
  auto pointer = data_->background_color.Get();
  *output = ::skia::mojom::SkColorDataView(pointer, context_);
}
inline void DoodleShareButtonDataView::GetIconUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->icon_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}


inline void ImageDoodleContentDataView::GetImageUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->image_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void ImageDoodleContentDataView::GetOnClickUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->on_click_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void ImageDoodleContentDataView::GetAnimationUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->animation_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void ImageDoodleContentDataView::GetBackgroundColorDataView(
    ::skia::mojom::SkColorDataView* output) {
  auto pointer = data_->background_color.Get();
  *output = ::skia::mojom::SkColorDataView(pointer, context_);
}
inline void ImageDoodleContentDataView::GetShareButtonDataView(
    DoodleShareButtonDataView* output) {
  auto pointer = data_->share_button.Get();
  *output = DoodleShareButtonDataView(pointer, context_);
}
inline void ImageDoodleContentDataView::GetShareUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->share_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void ImageDoodleContentDataView::GetImageImpressionLogUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->image_impression_log_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void ImageDoodleContentDataView::GetAnimationImpressionLogUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->animation_impression_log_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}


inline void InteractiveDoodleContentDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}


inline void DoodleDataView::GetContentDataView(
    DoodleContentDataView* output) {
  auto pointer = &data_->content;
  *output = DoodleContentDataView(pointer, context_);
}
inline void DoodleDataView::GetDescriptionDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->description.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void ThemeInfoDataView::GetAutogeneratedThemeColorsDataView(
    ThemeColorsDataView* output) {
  DCHECK(is_autogenerated_theme_colors());
  *output = ThemeColorsDataView(data_->data.f_autogenerated_theme_colors.Get(), context_);
}
inline void ThemeInfoDataView::GetThirdPartyThemeInfoDataView(
    ThirdPartyThemeInfoDataView* output) {
  DCHECK(is_third_party_theme_info());
  *output = ThirdPartyThemeInfoDataView(data_->data.f_third_party_theme_info.Get(), context_);
}

inline void DoodleContentDataView::GetImageDoodleDataView(
    ImageDoodleContentDataView* output) {
  DCHECK(is_image_doodle());
  *output = ImageDoodleContentDataView(data_->data.f_image_doodle.Get(), context_);
}
inline void DoodleContentDataView::GetInteractiveDoodleDataView(
    InteractiveDoodleContentDataView* output) {
  DCHECK(is_interactive_doodle());
  *output = InteractiveDoodleContentDataView(data_->data.f_interactive_doodle.Get(), context_);
}


}  // namespace mojom
}  // namespace new_tab_page

#endif  // CHROME_BROWSER_UI_WEBUI_NEW_TAB_PAGE_NEW_TAB_PAGE_MOJOM_SHARED_H_
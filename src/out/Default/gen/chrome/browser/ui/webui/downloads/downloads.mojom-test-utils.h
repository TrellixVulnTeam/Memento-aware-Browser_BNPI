// chrome/browser/ui/webui/downloads/downloads.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_UI_WEBUI_DOWNLOADS_DOWNLOADS_MOJOM_TEST_UTILS_H_
#define CHROME_BROWSER_UI_WEBUI_DOWNLOADS_DOWNLOADS_MOJOM_TEST_UTILS_H_

#include "chrome/browser/ui/webui/downloads/downloads.mojom.h"


namespace downloads {
namespace mojom {


class  PageHandlerFactoryInterceptorForTesting : public PageHandlerFactory {
  virtual PageHandlerFactory* GetForwardingInterface() = 0;
  void CreatePageHandler(::mojo::PendingRemote<Page> page, ::mojo::PendingReceiver<PageHandler> handler) override;
};
class  PageHandlerFactoryAsyncWaiter {
 public:
  explicit PageHandlerFactoryAsyncWaiter(PageHandlerFactory* proxy);
  ~PageHandlerFactoryAsyncWaiter();

 private:
  PageHandlerFactory* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(PageHandlerFactoryAsyncWaiter);
};


class  PageHandlerInterceptorForTesting : public PageHandler {
  virtual PageHandler* GetForwardingInterface() = 0;
  void GetDownloads(const std::vector<std::string>& search_terms) override;
  void OpenFileRequiringGesture(const std::string& id) override;
  void Drag(const std::string& id) override;
  void SaveDangerousRequiringGesture(const std::string& id) override;
  void DiscardDangerous(const std::string& id) override;
  void RetryDownload(const std::string& id) override;
  void Show(const std::string& id) override;
  void Pause(const std::string& id) override;
  void Resume(const std::string& id) override;
  void Remove(const std::string& id) override;
  void Undo() override;
  void Cancel(const std::string& id) override;
  void ClearAll() override;
  void OpenDownloadsFolderRequiringGesture() override;
  void OpenDuringScanningRequiringGesture(const std::string& id) override;
};
class  PageHandlerAsyncWaiter {
 public:
  explicit PageHandlerAsyncWaiter(PageHandler* proxy);
  ~PageHandlerAsyncWaiter();

 private:
  PageHandler* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(PageHandlerAsyncWaiter);
};


class  PageInterceptorForTesting : public Page {
  virtual Page* GetForwardingInterface() = 0;
  void RemoveItem(int32_t index) override;
  void UpdateItem(int32_t index, DataPtr data) override;
  void InsertItems(int32_t index, std::vector<DataPtr> items) override;
  void ClearAll() override;
};
class  PageAsyncWaiter {
 public:
  explicit PageAsyncWaiter(Page* proxy);
  ~PageAsyncWaiter();

 private:
  Page* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(PageAsyncWaiter);
};




}  // namespace mojom
}  // namespace downloads

#endif  // CHROME_BROWSER_UI_WEBUI_DOWNLOADS_DOWNLOADS_MOJOM_TEST_UTILS_H_
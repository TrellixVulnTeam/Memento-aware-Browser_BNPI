// chrome/browser/ui/webui/new_tab_page/new_tab_page.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_UI_WEBUI_NEW_TAB_PAGE_NEW_TAB_PAGE_MOJOM_TEST_UTILS_H_
#define CHROME_BROWSER_UI_WEBUI_NEW_TAB_PAGE_NEW_TAB_PAGE_MOJOM_TEST_UTILS_H_

#include "chrome/browser/ui/webui/new_tab_page/new_tab_page.mojom.h"


namespace new_tab_page {
namespace mojom {


class  PageHandlerFactoryInterceptorForTesting : public PageHandlerFactory {
  virtual PageHandlerFactory* GetForwardingInterface() = 0;
  void CreatePageHandler(::mojo::PendingRemote<Page> page, ::mojo::PendingReceiver<PageHandler> handler) override;
};
class  PageHandlerFactoryAsyncWaiter {
 public:
  explicit PageHandlerFactoryAsyncWaiter(PageHandlerFactory* proxy);
  ~PageHandlerFactoryAsyncWaiter();

 private:
  PageHandlerFactory* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(PageHandlerFactoryAsyncWaiter);
};


class  PageHandlerInterceptorForTesting : public PageHandler {
  virtual PageHandler* GetForwardingInterface() = 0;
  void AddMostVisitedTile(const ::GURL& url, const std::string& title, AddMostVisitedTileCallback callback) override;
  void DeleteMostVisitedTile(const ::GURL& url) override;
  void ReorderMostVisitedTile(const ::GURL& url, uint8_t new_pos) override;
  void RestoreMostVisitedDefaults() override;
  void SetBackgroundImage(const std::string& attribution_1, const std::string& attribution_2, const ::GURL& attribution_url, const ::GURL& image_url) override;
  void SetDailyRefreshCollectionId(const std::string& collection_id) override;
  void SetNoBackgroundImage() override;
  void SetMostVisitedSettings(bool customLinksEnabled, bool visible) override;
  void UndoMostVisitedTileAction() override;
  void UpdateMostVisitedInfo() override;
  void UpdateMostVisitedTile(const ::GURL& url, const ::GURL& new_url, const std::string& new_title, UpdateMostVisitedTileCallback callback) override;
  void GetChromeThemes(GetChromeThemesCallback callback) override;
  void ApplyDefaultTheme() override;
  void ApplyAutogeneratedTheme(const ::SkColor& frame_color) override;
  void ApplyChromeTheme(int32_t id) override;
  void ConfirmThemeChanges() override;
  void RevertThemeChanges() override;
  void GetBackgroundCollections(GetBackgroundCollectionsCallback callback) override;
  void GetBackgroundImages(const std::string& collection_id, GetBackgroundImagesCallback callback) override;
  void FocusOmnibox() override;
  void PasteIntoOmnibox(const std::string& text) override;
  void GetDoodle(GetDoodleCallback callback) override;
  void ChooseLocalCustomBackground(ChooseLocalCustomBackgroundCallback callback) override;
  void GetOneGoogleBarParts(const std::string& query_params, GetOneGoogleBarPartsCallback callback) override;
  void OnMostVisitedTilesRendered(std::vector<MostVisitedTilePtr> tiles, double time) override;
  void OnOneGoogleBarRendered(double time) override;
  void OnPromoRendered(double time) override;
  void OnMostVisitedTileNavigation(MostVisitedTilePtr tile, uint32_t index) override;
  void OnCustomizeDialogAction(CustomizeDialogAction action) override;
  void OnDoodleImageClicked(DoodleImageType type, const base::Optional<::GURL>& log_url) override;
  void OnDoodleImageRendered(DoodleImageType type, double time, const ::GURL& log_url, OnDoodleImageRenderedCallback callback) override;
  void OnDoodleShared(DoodleShareChannel channel, const std::string& doodle_id, const base::Optional<std::string>& share_id) override;
  void OnPromoLinkClicked() override;
  void OnVoiceSearchAction(VoiceSearchAction action) override;
  void OnVoiceSearchError(VoiceSearchError error) override;
  void QueryAutocomplete(const ::base::string16& input, bool prevent_inline_autocomplete) override;
  void StopAutocomplete(bool clear_result) override;
  void OpenAutocompleteMatch(uint8_t line, const ::GURL& url, bool are_matches_showing, ::base::TimeDelta time_elapsed_since_last_focus, uint8_t mouse_button, bool alt_key, bool ctrl_key, bool meta_key, bool shift_key) override;
  void DeleteAutocompleteMatch(uint8_t line) override;
  void ToggleSuggestionGroupIdVisibility(int32_t suggestion_group_id) override;
  void LogCharTypedToRepaintLatency(::base::TimeDelta latency) override;
};
class  PageHandlerAsyncWaiter {
 public:
  explicit PageHandlerAsyncWaiter(PageHandler* proxy);
  ~PageHandlerAsyncWaiter();
  void AddMostVisitedTile(
      const ::GURL& url, const std::string& title, bool* out_success);
  void UpdateMostVisitedTile(
      const ::GURL& url, const ::GURL& new_url, const std::string& new_title, bool* out_success);
  void GetChromeThemes(
      std::vector<ChromeThemePtr>* out_chromeThemes);
  void GetBackgroundCollections(
      std::vector<BackgroundCollectionPtr>* out_collections);
  void GetBackgroundImages(
      const std::string& collection_id, std::vector<CollectionImagePtr>* out_images);
  void GetDoodle(
      DoodlePtr* out_doodle);
  void ChooseLocalCustomBackground(
      bool* out_success);
  void GetOneGoogleBarParts(
      const std::string& query_params, OneGoogleBarPartsPtr* out_parts);
  void OnDoodleImageRendered(
      DoodleImageType type, double time, const ::GURL& log_url, base::Optional<std::string>* out_image_click_params, base::Optional<::GURL>* out_interaction_log_url, base::Optional<std::string>* out_share_id);

 private:
  PageHandler* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(PageHandlerAsyncWaiter);
};


class  PageInterceptorForTesting : public Page {
  virtual Page* GetForwardingInterface() = 0;
  void SetMostVisitedInfo(MostVisitedInfoPtr info) override;
  void SetTheme(ThemePtr theme) override;
  void SetFakeboxFocused(bool focused) override;
  void SetFakeboxVisible(bool visible) override;
  void AutocompleteResultChanged(::search::mojom::AutocompleteResultPtr result) override;
  void AutocompleteMatchImageAvailable(uint32_t match_index, const ::GURL& url, const std::string& data_url) override;
};
class  PageAsyncWaiter {
 public:
  explicit PageAsyncWaiter(Page* proxy);
  ~PageAsyncWaiter();

 private:
  Page* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(PageAsyncWaiter);
};




}  // namespace mojom
}  // namespace new_tab_page

#endif  // CHROME_BROWSER_UI_WEBUI_NEW_TAB_PAGE_NEW_TAB_PAGE_MOJOM_TEST_UTILS_H_
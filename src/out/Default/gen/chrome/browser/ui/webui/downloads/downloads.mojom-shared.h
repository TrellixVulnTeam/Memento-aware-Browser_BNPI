// chrome/browser/ui/webui/downloads/downloads.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_UI_WEBUI_DOWNLOADS_DOWNLOADS_MOJOM_SHARED_H_
#define CHROME_BROWSER_UI_WEBUI_DOWNLOADS_DOWNLOADS_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "chrome/browser/ui/webui/downloads/downloads.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace downloads {
namespace mojom {
class DataDataView;



}  // namespace mojom
}  // namespace downloads

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::downloads::mojom::DataDataView> {
  using Data = ::downloads::mojom::internal::Data_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace downloads {
namespace mojom {
// Interface base classes. They are used for type safety check.
class PageHandlerFactoryInterfaceBase {};

using PageHandlerFactoryPtrDataView =
    mojo::InterfacePtrDataView<PageHandlerFactoryInterfaceBase>;
using PageHandlerFactoryRequestDataView =
    mojo::InterfaceRequestDataView<PageHandlerFactoryInterfaceBase>;
using PageHandlerFactoryAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<PageHandlerFactoryInterfaceBase>;
using PageHandlerFactoryAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<PageHandlerFactoryInterfaceBase>;
class PageHandlerInterfaceBase {};

using PageHandlerPtrDataView =
    mojo::InterfacePtrDataView<PageHandlerInterfaceBase>;
using PageHandlerRequestDataView =
    mojo::InterfaceRequestDataView<PageHandlerInterfaceBase>;
using PageHandlerAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<PageHandlerInterfaceBase>;
using PageHandlerAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<PageHandlerInterfaceBase>;
class PageInterfaceBase {};

using PagePtrDataView =
    mojo::InterfacePtrDataView<PageInterfaceBase>;
using PageRequestDataView =
    mojo::InterfaceRequestDataView<PageInterfaceBase>;
using PageAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<PageInterfaceBase>;
using PageAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<PageInterfaceBase>;
class DataDataView {
 public:
  DataDataView() {}

  DataDataView(
      internal::Data_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  bool file_externally_removed() const {
    return data_->file_externally_removed;
  }
  bool otr() const {
    return data_->otr;
  }
  bool resume() const {
    return data_->resume;
  }
  bool retry() const {
    return data_->retry;
  }
  int32_t percent() const {
    return data_->percent;
  }
  int32_t started() const {
    return data_->started;
  }
  int32_t total() const {
    return data_->total;
  }
  inline void GetByExtIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadByExtId(UserType* output) {
    auto* pointer = data_->by_ext_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetByExtNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadByExtName(UserType* output) {
    auto* pointer = data_->by_ext_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetDangerTypeDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDangerType(UserType* output) {
    auto* pointer = data_->danger_type.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetDateStringDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDateString(UserType* output) {
    auto* pointer = data_->date_string.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetFileNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFileName(UserType* output) {
    auto* pointer = data_->file_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetFilePathDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFilePath(UserType* output) {
    auto* pointer = data_->file_path.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetFileUrlDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFileUrl(UserType* output) {
    auto* pointer = data_->file_url.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadId(UserType* output) {
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetLastReasonTextDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadLastReasonText(UserType* output) {
    auto* pointer = data_->last_reason_text.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetProgressStatusTextDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadProgressStatusText(UserType* output) {
    auto* pointer = data_->progress_status_text.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetSinceStringDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSinceString(UserType* output) {
    auto* pointer = data_->since_string.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetStateDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadState(UserType* output) {
    auto* pointer = data_->state.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetUrlDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUrl(UserType* output) {
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::Data_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};



}  // namespace mojom
}  // namespace downloads

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::downloads::mojom::DataDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::downloads::mojom::DataDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::downloads::mojom::internal::Data_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->file_externally_removed = Traits::file_externally_removed(input);
    (*output)->otr = Traits::otr(input);
    (*output)->resume = Traits::resume(input);
    (*output)->retry = Traits::retry(input);
    (*output)->percent = Traits::percent(input);
    (*output)->started = Traits::started(input);
    (*output)->total = Traits::total(input);
    decltype(Traits::by_ext_id(input)) in_by_ext_id = Traits::by_ext_id(input);
    typename decltype((*output)->by_ext_id)::BaseType::BufferWriter
        by_ext_id_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_by_ext_id, buffer, &by_ext_id_writer, context);
    (*output)->by_ext_id.Set(
        by_ext_id_writer.is_null() ? nullptr : by_ext_id_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->by_ext_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null by_ext_id in Data struct");
    decltype(Traits::by_ext_name(input)) in_by_ext_name = Traits::by_ext_name(input);
    typename decltype((*output)->by_ext_name)::BaseType::BufferWriter
        by_ext_name_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_by_ext_name, buffer, &by_ext_name_writer, context);
    (*output)->by_ext_name.Set(
        by_ext_name_writer.is_null() ? nullptr : by_ext_name_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->by_ext_name.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null by_ext_name in Data struct");
    decltype(Traits::danger_type(input)) in_danger_type = Traits::danger_type(input);
    typename decltype((*output)->danger_type)::BaseType::BufferWriter
        danger_type_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_danger_type, buffer, &danger_type_writer, context);
    (*output)->danger_type.Set(
        danger_type_writer.is_null() ? nullptr : danger_type_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->danger_type.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null danger_type in Data struct");
    decltype(Traits::date_string(input)) in_date_string = Traits::date_string(input);
    typename decltype((*output)->date_string)::BaseType::BufferWriter
        date_string_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_date_string, buffer, &date_string_writer, context);
    (*output)->date_string.Set(
        date_string_writer.is_null() ? nullptr : date_string_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->date_string.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null date_string in Data struct");
    decltype(Traits::file_name(input)) in_file_name = Traits::file_name(input);
    typename decltype((*output)->file_name)::BaseType::BufferWriter
        file_name_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_file_name, buffer, &file_name_writer, context);
    (*output)->file_name.Set(
        file_name_writer.is_null() ? nullptr : file_name_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->file_name.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null file_name in Data struct");
    decltype(Traits::file_path(input)) in_file_path = Traits::file_path(input);
    typename decltype((*output)->file_path)::BaseType::BufferWriter
        file_path_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_file_path, buffer, &file_path_writer, context);
    (*output)->file_path.Set(
        file_path_writer.is_null() ? nullptr : file_path_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->file_path.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null file_path in Data struct");
    decltype(Traits::file_url(input)) in_file_url = Traits::file_url(input);
    typename decltype((*output)->file_url)::BaseType::BufferWriter
        file_url_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_file_url, buffer, &file_url_writer, context);
    (*output)->file_url.Set(
        file_url_writer.is_null() ? nullptr : file_url_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->file_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null file_url in Data struct");
    decltype(Traits::id(input)) in_id = Traits::id(input);
    typename decltype((*output)->id)::BaseType::BufferWriter
        id_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_id, buffer, &id_writer, context);
    (*output)->id.Set(
        id_writer.is_null() ? nullptr : id_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null id in Data struct");
    decltype(Traits::last_reason_text(input)) in_last_reason_text = Traits::last_reason_text(input);
    typename decltype((*output)->last_reason_text)::BaseType::BufferWriter
        last_reason_text_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_last_reason_text, buffer, &last_reason_text_writer, context);
    (*output)->last_reason_text.Set(
        last_reason_text_writer.is_null() ? nullptr : last_reason_text_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->last_reason_text.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null last_reason_text in Data struct");
    decltype(Traits::progress_status_text(input)) in_progress_status_text = Traits::progress_status_text(input);
    typename decltype((*output)->progress_status_text)::BaseType::BufferWriter
        progress_status_text_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_progress_status_text, buffer, &progress_status_text_writer, context);
    (*output)->progress_status_text.Set(
        progress_status_text_writer.is_null() ? nullptr : progress_status_text_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->progress_status_text.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null progress_status_text in Data struct");
    decltype(Traits::since_string(input)) in_since_string = Traits::since_string(input);
    typename decltype((*output)->since_string)::BaseType::BufferWriter
        since_string_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_since_string, buffer, &since_string_writer, context);
    (*output)->since_string.Set(
        since_string_writer.is_null() ? nullptr : since_string_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->since_string.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null since_string in Data struct");
    decltype(Traits::state(input)) in_state = Traits::state(input);
    typename decltype((*output)->state)::BaseType::BufferWriter
        state_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_state, buffer, &state_writer, context);
    (*output)->state.Set(
        state_writer.is_null() ? nullptr : state_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->state.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null state in Data struct");
    decltype(Traits::url(input)) in_url = Traits::url(input);
    typename decltype((*output)->url)::BaseType::BufferWriter
        url_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_url, buffer, &url_writer, context);
    (*output)->url.Set(
        url_writer.is_null() ? nullptr : url_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null url in Data struct");
  }

  static bool Deserialize(::downloads::mojom::internal::Data_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::downloads::mojom::DataDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace downloads {
namespace mojom {

inline void DataDataView::GetByExtIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->by_ext_id.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void DataDataView::GetByExtNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->by_ext_name.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void DataDataView::GetDangerTypeDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->danger_type.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void DataDataView::GetDateStringDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->date_string.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void DataDataView::GetFileNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->file_name.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void DataDataView::GetFilePathDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->file_path.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void DataDataView::GetFileUrlDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->file_url.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void DataDataView::GetIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->id.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void DataDataView::GetLastReasonTextDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->last_reason_text.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void DataDataView::GetProgressStatusTextDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->progress_status_text.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void DataDataView::GetSinceStringDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->since_string.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void DataDataView::GetStateDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->state.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void DataDataView::GetUrlDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->url.Get();
  *output = mojo::StringDataView(pointer, context_);
}



}  // namespace mojom
}  // namespace downloads

#endif  // CHROME_BROWSER_UI_WEBUI_DOWNLOADS_DOWNLOADS_MOJOM_SHARED_H_
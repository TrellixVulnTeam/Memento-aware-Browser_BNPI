// chrome/browser/ui/webui/feed_internals/feed_internals.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_UI_WEBUI_FEED_INTERNALS_FEED_INTERNALS_MOJOM_PARAMS_DATA_H_
#define CHROME_BROWSER_UI_WEBUI_FEED_INTERNALS_FEED_INTERNALS_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace feed_internals {
namespace mojom {
namespace internal {
class  PageHandler_GetGeneralProperties_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_GetGeneralProperties_Params_Data));
      new (data()) PageHandler_GetGeneralProperties_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_GetGeneralProperties_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_GetGeneralProperties_Params_Data>(index_);
    }
    PageHandler_GetGeneralProperties_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PageHandler_GetGeneralProperties_Params_Data();
  ~PageHandler_GetGeneralProperties_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_GetGeneralProperties_Params_Data) == 8,
              "Bad sizeof(PageHandler_GetGeneralProperties_Params_Data)");
class  PageHandler_GetGeneralProperties_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_GetGeneralProperties_ResponseParams_Data));
      new (data()) PageHandler_GetGeneralProperties_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_GetGeneralProperties_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_GetGeneralProperties_ResponseParams_Data>(index_);
    }
    PageHandler_GetGeneralProperties_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::Properties_Data> properties;

 private:
  PageHandler_GetGeneralProperties_ResponseParams_Data();
  ~PageHandler_GetGeneralProperties_ResponseParams_Data() = delete;
};
static_assert(sizeof(PageHandler_GetGeneralProperties_ResponseParams_Data) == 16,
              "Bad sizeof(PageHandler_GetGeneralProperties_ResponseParams_Data)");
class  PageHandler_GetUserClassifierProperties_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_GetUserClassifierProperties_Params_Data));
      new (data()) PageHandler_GetUserClassifierProperties_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_GetUserClassifierProperties_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_GetUserClassifierProperties_Params_Data>(index_);
    }
    PageHandler_GetUserClassifierProperties_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PageHandler_GetUserClassifierProperties_Params_Data();
  ~PageHandler_GetUserClassifierProperties_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_GetUserClassifierProperties_Params_Data) == 8,
              "Bad sizeof(PageHandler_GetUserClassifierProperties_Params_Data)");
class  PageHandler_GetUserClassifierProperties_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_GetUserClassifierProperties_ResponseParams_Data));
      new (data()) PageHandler_GetUserClassifierProperties_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_GetUserClassifierProperties_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_GetUserClassifierProperties_ResponseParams_Data>(index_);
    }
    PageHandler_GetUserClassifierProperties_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::UserClassifier_Data> properties;

 private:
  PageHandler_GetUserClassifierProperties_ResponseParams_Data();
  ~PageHandler_GetUserClassifierProperties_ResponseParams_Data() = delete;
};
static_assert(sizeof(PageHandler_GetUserClassifierProperties_ResponseParams_Data) == 16,
              "Bad sizeof(PageHandler_GetUserClassifierProperties_ResponseParams_Data)");
class  PageHandler_ClearUserClassifierProperties_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_ClearUserClassifierProperties_Params_Data));
      new (data()) PageHandler_ClearUserClassifierProperties_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_ClearUserClassifierProperties_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_ClearUserClassifierProperties_Params_Data>(index_);
    }
    PageHandler_ClearUserClassifierProperties_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PageHandler_ClearUserClassifierProperties_Params_Data();
  ~PageHandler_ClearUserClassifierProperties_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_ClearUserClassifierProperties_Params_Data) == 8,
              "Bad sizeof(PageHandler_ClearUserClassifierProperties_Params_Data)");
class  PageHandler_GetLastFetchProperties_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_GetLastFetchProperties_Params_Data));
      new (data()) PageHandler_GetLastFetchProperties_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_GetLastFetchProperties_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_GetLastFetchProperties_Params_Data>(index_);
    }
    PageHandler_GetLastFetchProperties_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PageHandler_GetLastFetchProperties_Params_Data();
  ~PageHandler_GetLastFetchProperties_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_GetLastFetchProperties_Params_Data) == 8,
              "Bad sizeof(PageHandler_GetLastFetchProperties_Params_Data)");
class  PageHandler_GetLastFetchProperties_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_GetLastFetchProperties_ResponseParams_Data));
      new (data()) PageHandler_GetLastFetchProperties_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_GetLastFetchProperties_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_GetLastFetchProperties_ResponseParams_Data>(index_);
    }
    PageHandler_GetLastFetchProperties_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::LastFetchProperties_Data> properties;

 private:
  PageHandler_GetLastFetchProperties_ResponseParams_Data();
  ~PageHandler_GetLastFetchProperties_ResponseParams_Data() = delete;
};
static_assert(sizeof(PageHandler_GetLastFetchProperties_ResponseParams_Data) == 16,
              "Bad sizeof(PageHandler_GetLastFetchProperties_ResponseParams_Data)");
class  PageHandler_ClearCachedDataAndRefreshFeed_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_ClearCachedDataAndRefreshFeed_Params_Data));
      new (data()) PageHandler_ClearCachedDataAndRefreshFeed_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_ClearCachedDataAndRefreshFeed_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_ClearCachedDataAndRefreshFeed_Params_Data>(index_);
    }
    PageHandler_ClearCachedDataAndRefreshFeed_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PageHandler_ClearCachedDataAndRefreshFeed_Params_Data();
  ~PageHandler_ClearCachedDataAndRefreshFeed_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_ClearCachedDataAndRefreshFeed_Params_Data) == 8,
              "Bad sizeof(PageHandler_ClearCachedDataAndRefreshFeed_Params_Data)");
class  PageHandler_RefreshFeed_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_RefreshFeed_Params_Data));
      new (data()) PageHandler_RefreshFeed_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_RefreshFeed_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_RefreshFeed_Params_Data>(index_);
    }
    PageHandler_RefreshFeed_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PageHandler_RefreshFeed_Params_Data();
  ~PageHandler_RefreshFeed_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_RefreshFeed_Params_Data) == 8,
              "Bad sizeof(PageHandler_RefreshFeed_Params_Data)");
class  PageHandler_GetCurrentContent_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_GetCurrentContent_Params_Data));
      new (data()) PageHandler_GetCurrentContent_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_GetCurrentContent_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_GetCurrentContent_Params_Data>(index_);
    }
    PageHandler_GetCurrentContent_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PageHandler_GetCurrentContent_Params_Data();
  ~PageHandler_GetCurrentContent_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_GetCurrentContent_Params_Data) == 8,
              "Bad sizeof(PageHandler_GetCurrentContent_Params_Data)");
class  PageHandler_GetCurrentContent_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_GetCurrentContent_ResponseParams_Data));
      new (data()) PageHandler_GetCurrentContent_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_GetCurrentContent_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_GetCurrentContent_ResponseParams_Data>(index_);
    }
    PageHandler_GetCurrentContent_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::Suggestion_Data>>> suggestions;

 private:
  PageHandler_GetCurrentContent_ResponseParams_Data();
  ~PageHandler_GetCurrentContent_ResponseParams_Data() = delete;
};
static_assert(sizeof(PageHandler_GetCurrentContent_ResponseParams_Data) == 16,
              "Bad sizeof(PageHandler_GetCurrentContent_ResponseParams_Data)");
class  PageHandler_GetFeedProcessScopeDump_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_GetFeedProcessScopeDump_Params_Data));
      new (data()) PageHandler_GetFeedProcessScopeDump_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_GetFeedProcessScopeDump_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_GetFeedProcessScopeDump_Params_Data>(index_);
    }
    PageHandler_GetFeedProcessScopeDump_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PageHandler_GetFeedProcessScopeDump_Params_Data();
  ~PageHandler_GetFeedProcessScopeDump_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_GetFeedProcessScopeDump_Params_Data) == 8,
              "Bad sizeof(PageHandler_GetFeedProcessScopeDump_Params_Data)");
class  PageHandler_GetFeedProcessScopeDump_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_GetFeedProcessScopeDump_ResponseParams_Data));
      new (data()) PageHandler_GetFeedProcessScopeDump_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_GetFeedProcessScopeDump_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_GetFeedProcessScopeDump_ResponseParams_Data>(index_);
    }
    PageHandler_GetFeedProcessScopeDump_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> dump;

 private:
  PageHandler_GetFeedProcessScopeDump_ResponseParams_Data();
  ~PageHandler_GetFeedProcessScopeDump_ResponseParams_Data() = delete;
};
static_assert(sizeof(PageHandler_GetFeedProcessScopeDump_ResponseParams_Data) == 16,
              "Bad sizeof(PageHandler_GetFeedProcessScopeDump_ResponseParams_Data)");
class  PageHandler_GetFeedHistograms_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_GetFeedHistograms_Params_Data));
      new (data()) PageHandler_GetFeedHistograms_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_GetFeedHistograms_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_GetFeedHistograms_Params_Data>(index_);
    }
    PageHandler_GetFeedHistograms_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PageHandler_GetFeedHistograms_Params_Data();
  ~PageHandler_GetFeedHistograms_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_GetFeedHistograms_Params_Data) == 8,
              "Bad sizeof(PageHandler_GetFeedHistograms_Params_Data)");
class  PageHandler_GetFeedHistograms_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_GetFeedHistograms_ResponseParams_Data));
      new (data()) PageHandler_GetFeedHistograms_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_GetFeedHistograms_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_GetFeedHistograms_ResponseParams_Data>(index_);
    }
    PageHandler_GetFeedHistograms_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> log;

 private:
  PageHandler_GetFeedHistograms_ResponseParams_Data();
  ~PageHandler_GetFeedHistograms_ResponseParams_Data() = delete;
};
static_assert(sizeof(PageHandler_GetFeedHistograms_ResponseParams_Data) == 16,
              "Bad sizeof(PageHandler_GetFeedHistograms_ResponseParams_Data)");
class  PageHandler_OverrideFeedHost_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_OverrideFeedHost_Params_Data));
      new (data()) PageHandler_OverrideFeedHost_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_OverrideFeedHost_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_OverrideFeedHost_Params_Data>(index_);
    }
    PageHandler_OverrideFeedHost_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> host;

 private:
  PageHandler_OverrideFeedHost_Params_Data();
  ~PageHandler_OverrideFeedHost_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_OverrideFeedHost_Params_Data) == 16,
              "Bad sizeof(PageHandler_OverrideFeedHost_Params_Data)");

}  // namespace internal
class PageHandler_GetGeneralProperties_ParamsDataView {
 public:
  PageHandler_GetGeneralProperties_ParamsDataView() {}

  PageHandler_GetGeneralProperties_ParamsDataView(
      internal::PageHandler_GetGeneralProperties_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PageHandler_GetGeneralProperties_Params_Data* data_ = nullptr;
};

class PageHandler_GetGeneralProperties_ResponseParamsDataView {
 public:
  PageHandler_GetGeneralProperties_ResponseParamsDataView() {}

  PageHandler_GetGeneralProperties_ResponseParamsDataView(
      internal::PageHandler_GetGeneralProperties_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetPropertiesDataView(
      PropertiesDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadProperties(UserType* output) {
    auto* pointer = data_->properties.Get();
    return mojo::internal::Deserialize<::feed_internals::mojom::PropertiesDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_GetGeneralProperties_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_GetUserClassifierProperties_ParamsDataView {
 public:
  PageHandler_GetUserClassifierProperties_ParamsDataView() {}

  PageHandler_GetUserClassifierProperties_ParamsDataView(
      internal::PageHandler_GetUserClassifierProperties_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PageHandler_GetUserClassifierProperties_Params_Data* data_ = nullptr;
};

class PageHandler_GetUserClassifierProperties_ResponseParamsDataView {
 public:
  PageHandler_GetUserClassifierProperties_ResponseParamsDataView() {}

  PageHandler_GetUserClassifierProperties_ResponseParamsDataView(
      internal::PageHandler_GetUserClassifierProperties_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetPropertiesDataView(
      UserClassifierDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadProperties(UserType* output) {
    auto* pointer = data_->properties.Get();
    return mojo::internal::Deserialize<::feed_internals::mojom::UserClassifierDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_GetUserClassifierProperties_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_ClearUserClassifierProperties_ParamsDataView {
 public:
  PageHandler_ClearUserClassifierProperties_ParamsDataView() {}

  PageHandler_ClearUserClassifierProperties_ParamsDataView(
      internal::PageHandler_ClearUserClassifierProperties_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PageHandler_ClearUserClassifierProperties_Params_Data* data_ = nullptr;
};

class PageHandler_GetLastFetchProperties_ParamsDataView {
 public:
  PageHandler_GetLastFetchProperties_ParamsDataView() {}

  PageHandler_GetLastFetchProperties_ParamsDataView(
      internal::PageHandler_GetLastFetchProperties_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PageHandler_GetLastFetchProperties_Params_Data* data_ = nullptr;
};

class PageHandler_GetLastFetchProperties_ResponseParamsDataView {
 public:
  PageHandler_GetLastFetchProperties_ResponseParamsDataView() {}

  PageHandler_GetLastFetchProperties_ResponseParamsDataView(
      internal::PageHandler_GetLastFetchProperties_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetPropertiesDataView(
      LastFetchPropertiesDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadProperties(UserType* output) {
    auto* pointer = data_->properties.Get();
    return mojo::internal::Deserialize<::feed_internals::mojom::LastFetchPropertiesDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_GetLastFetchProperties_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_ClearCachedDataAndRefreshFeed_ParamsDataView {
 public:
  PageHandler_ClearCachedDataAndRefreshFeed_ParamsDataView() {}

  PageHandler_ClearCachedDataAndRefreshFeed_ParamsDataView(
      internal::PageHandler_ClearCachedDataAndRefreshFeed_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PageHandler_ClearCachedDataAndRefreshFeed_Params_Data* data_ = nullptr;
};

class PageHandler_RefreshFeed_ParamsDataView {
 public:
  PageHandler_RefreshFeed_ParamsDataView() {}

  PageHandler_RefreshFeed_ParamsDataView(
      internal::PageHandler_RefreshFeed_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PageHandler_RefreshFeed_Params_Data* data_ = nullptr;
};

class PageHandler_GetCurrentContent_ParamsDataView {
 public:
  PageHandler_GetCurrentContent_ParamsDataView() {}

  PageHandler_GetCurrentContent_ParamsDataView(
      internal::PageHandler_GetCurrentContent_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PageHandler_GetCurrentContent_Params_Data* data_ = nullptr;
};

class PageHandler_GetCurrentContent_ResponseParamsDataView {
 public:
  PageHandler_GetCurrentContent_ResponseParamsDataView() {}

  PageHandler_GetCurrentContent_ResponseParamsDataView(
      internal::PageHandler_GetCurrentContent_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetSuggestionsDataView(
      mojo::ArrayDataView<SuggestionDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSuggestions(UserType* output) {
    auto* pointer = data_->suggestions.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::feed_internals::mojom::SuggestionDataView>>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_GetCurrentContent_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_GetFeedProcessScopeDump_ParamsDataView {
 public:
  PageHandler_GetFeedProcessScopeDump_ParamsDataView() {}

  PageHandler_GetFeedProcessScopeDump_ParamsDataView(
      internal::PageHandler_GetFeedProcessScopeDump_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PageHandler_GetFeedProcessScopeDump_Params_Data* data_ = nullptr;
};

class PageHandler_GetFeedProcessScopeDump_ResponseParamsDataView {
 public:
  PageHandler_GetFeedProcessScopeDump_ResponseParamsDataView() {}

  PageHandler_GetFeedProcessScopeDump_ResponseParamsDataView(
      internal::PageHandler_GetFeedProcessScopeDump_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDumpDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDump(UserType* output) {
    auto* pointer = data_->dump.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_GetFeedProcessScopeDump_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_GetFeedHistograms_ParamsDataView {
 public:
  PageHandler_GetFeedHistograms_ParamsDataView() {}

  PageHandler_GetFeedHistograms_ParamsDataView(
      internal::PageHandler_GetFeedHistograms_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PageHandler_GetFeedHistograms_Params_Data* data_ = nullptr;
};

class PageHandler_GetFeedHistograms_ResponseParamsDataView {
 public:
  PageHandler_GetFeedHistograms_ResponseParamsDataView() {}

  PageHandler_GetFeedHistograms_ResponseParamsDataView(
      internal::PageHandler_GetFeedHistograms_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetLogDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadLog(UserType* output) {
    auto* pointer = data_->log.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_GetFeedHistograms_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_OverrideFeedHost_ParamsDataView {
 public:
  PageHandler_OverrideFeedHost_ParamsDataView() {}

  PageHandler_OverrideFeedHost_ParamsDataView(
      internal::PageHandler_OverrideFeedHost_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetHostDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadHost(UserType* output) {
    auto* pointer = data_->host.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_OverrideFeedHost_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};




inline void PageHandler_GetGeneralProperties_ResponseParamsDataView::GetPropertiesDataView(
    PropertiesDataView* output) {
  auto pointer = data_->properties.Get();
  *output = PropertiesDataView(pointer, context_);
}




inline void PageHandler_GetUserClassifierProperties_ResponseParamsDataView::GetPropertiesDataView(
    UserClassifierDataView* output) {
  auto pointer = data_->properties.Get();
  *output = UserClassifierDataView(pointer, context_);
}






inline void PageHandler_GetLastFetchProperties_ResponseParamsDataView::GetPropertiesDataView(
    LastFetchPropertiesDataView* output) {
  auto pointer = data_->properties.Get();
  *output = LastFetchPropertiesDataView(pointer, context_);
}








inline void PageHandler_GetCurrentContent_ResponseParamsDataView::GetSuggestionsDataView(
    mojo::ArrayDataView<SuggestionDataView>* output) {
  auto pointer = data_->suggestions.Get();
  *output = mojo::ArrayDataView<SuggestionDataView>(pointer, context_);
}




inline void PageHandler_GetFeedProcessScopeDump_ResponseParamsDataView::GetDumpDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->dump.Get();
  *output = mojo::StringDataView(pointer, context_);
}




inline void PageHandler_GetFeedHistograms_ResponseParamsDataView::GetLogDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->log.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void PageHandler_OverrideFeedHost_ParamsDataView::GetHostDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->host.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}

}  // namespace mojom
}  // namespace feed_internals

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CHROME_BROWSER_UI_WEBUI_FEED_INTERNALS_FEED_INTERNALS_MOJOM_PARAMS_DATA_H_
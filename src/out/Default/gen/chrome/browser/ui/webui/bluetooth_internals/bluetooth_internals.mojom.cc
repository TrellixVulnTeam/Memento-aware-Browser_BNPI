// chrome/browser/ui/webui/bluetooth_internals/bluetooth_internals.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "chrome/browser/ui/webui/bluetooth_internals/bluetooth_internals.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "chrome/browser/ui/webui/bluetooth_internals/bluetooth_internals.mojom-params-data.h"
#include "chrome/browser/ui/webui/bluetooth_internals/bluetooth_internals.mojom-shared-message-ids.h"

#include "chrome/browser/ui/webui/bluetooth_internals/bluetooth_internals.mojom-import-headers.h"


#ifndef CHROME_BROWSER_UI_WEBUI_BLUETOOTH_INTERNALS_BLUETOOTH_INTERNALS_MOJOM_JUMBO_H_
#define CHROME_BROWSER_UI_WEBUI_BLUETOOTH_INTERNALS_BLUETOOTH_INTERNALS_MOJOM_JUMBO_H_
#endif
namespace mojom {
const char DebugLogsChangeHandler::Name_[] = "mojom.DebugLogsChangeHandler";

DebugLogsChangeHandlerProxy::DebugLogsChangeHandlerProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void DebugLogsChangeHandlerProxy::ChangeDebugLogsState(
    bool in_should_debug_logs_be_enabled) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "mojom::DebugLogsChangeHandler::ChangeDebugLogsState");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDebugLogsChangeHandler_ChangeDebugLogsState_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::mojom::internal::DebugLogsChangeHandler_ChangeDebugLogsState_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  params->should_debug_logs_be_enabled = in_should_debug_logs_be_enabled;
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DebugLogsChangeHandler::Name_);
  message.set_method_name("ChangeDebugLogsState");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool DebugLogsChangeHandlerStubDispatch::Accept(
    DebugLogsChangeHandler* impl,
    mojo::Message* message) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  switch (message->header()->name) {
    case internal::kDebugLogsChangeHandler_ChangeDebugLogsState_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojom::DebugLogsChangeHandler::ChangeDebugLogsState",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojom::DebugLogsChangeHandler::ChangeDebugLogsState");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::DebugLogsChangeHandler_ChangeDebugLogsState_Params_Data* params =
          reinterpret_cast<internal::DebugLogsChangeHandler_ChangeDebugLogsState_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      bool p_should_debug_logs_be_enabled{};
      DebugLogsChangeHandler_ChangeDebugLogsState_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success)
        p_should_debug_logs_be_enabled = input_data_view.should_debug_logs_be_enabled();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DebugLogsChangeHandler::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ChangeDebugLogsState(
std::move(p_should_debug_logs_be_enabled));
      return true;
    }
  }
  return false;
}

// static
bool DebugLogsChangeHandlerStubDispatch::AcceptWithResponder(
    DebugLogsChangeHandler* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kDebugLogsChangeHandler_ChangeDebugLogsState_Name: {
      break;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kDebugLogsChangeHandlerValidationInfo[] = {
    {internal::kDebugLogsChangeHandler_ChangeDebugLogsState_Name,
     {&internal::DebugLogsChangeHandler_ChangeDebugLogsState_Params_Data::Validate,
      nullptr /* no response */}},
};

bool DebugLogsChangeHandlerRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojom::DebugLogsChangeHandler::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kDebugLogsChangeHandlerValidationInfo);
}

const char BluetoothInternalsHandler::Name_[] = "mojom.BluetoothInternalsHandler";

class BluetoothInternalsHandler_GetAdapter_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  BluetoothInternalsHandler_GetAdapter_ForwardToCallback(
      BluetoothInternalsHandler::GetAdapterCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  BluetoothInternalsHandler::GetAdapterCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(BluetoothInternalsHandler_GetAdapter_ForwardToCallback);
};

class BluetoothInternalsHandler_GetDebugLogsChangeHandler_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  BluetoothInternalsHandler_GetDebugLogsChangeHandler_ForwardToCallback(
      BluetoothInternalsHandler::GetDebugLogsChangeHandlerCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  BluetoothInternalsHandler::GetDebugLogsChangeHandlerCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(BluetoothInternalsHandler_GetDebugLogsChangeHandler_ForwardToCallback);
};

BluetoothInternalsHandlerProxy::BluetoothInternalsHandlerProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void BluetoothInternalsHandlerProxy::GetAdapter(
    GetAdapterCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "mojom::BluetoothInternalsHandler::GetAdapter");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kBluetoothInternalsHandler_GetAdapter_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::mojom::internal::BluetoothInternalsHandler_GetAdapter_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(BluetoothInternalsHandler::Name_);
  message.set_method_name("GetAdapter");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new BluetoothInternalsHandler_GetAdapter_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}

void BluetoothInternalsHandlerProxy::GetDebugLogsChangeHandler(
    GetDebugLogsChangeHandlerCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "mojom::BluetoothInternalsHandler::GetDebugLogsChangeHandler");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kBluetoothInternalsHandler_GetDebugLogsChangeHandler_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::mojom::internal::BluetoothInternalsHandler_GetDebugLogsChangeHandler_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(BluetoothInternalsHandler::Name_);
  message.set_method_name("GetDebugLogsChangeHandler");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new BluetoothInternalsHandler_GetDebugLogsChangeHandler_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
class BluetoothInternalsHandler_GetAdapter_ProxyToResponder {
 public:
  static BluetoothInternalsHandler::GetAdapterCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<BluetoothInternalsHandler_GetAdapter_ProxyToResponder> proxy(
        new BluetoothInternalsHandler_GetAdapter_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&BluetoothInternalsHandler_GetAdapter_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~BluetoothInternalsHandler_GetAdapter_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  BluetoothInternalsHandler_GetAdapter_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "BluetoothInternalsHandler::GetAdapterCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      ::mojo::PendingRemote<::bluetooth::mojom::Adapter> in_adapter);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(BluetoothInternalsHandler_GetAdapter_ProxyToResponder);
};

bool BluetoothInternalsHandler_GetAdapter_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "mojom::BluetoothInternalsHandler::GetAdapterCallback",
               "message", message->name());
#endif
  mojo::internal::MessageDispatchContext dispatch_context(message);

  DCHECK(message->is_serialized());
  internal::BluetoothInternalsHandler_GetAdapter_ResponseParams_Data* params =
      reinterpret_cast<
          internal::BluetoothInternalsHandler_GetAdapter_ResponseParams_Data*>(
              message->mutable_payload());
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  
  bool success = true;
  ::mojo::PendingRemote<::bluetooth::mojom::Adapter> p_adapter{};
  BluetoothInternalsHandler_GetAdapter_ResponseParamsDataView input_data_view(params, &serialization_context);
  
  if (success) {
    p_adapter =
        input_data_view.TakeAdapter<decltype(p_adapter)>();
  }
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        BluetoothInternalsHandler::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_adapter));
  return true;
}

void BluetoothInternalsHandler_GetAdapter_ProxyToResponder::Run(
    ::mojo::PendingRemote<::bluetooth::mojom::Adapter> in_adapter) {
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kBluetoothInternalsHandler_GetAdapter_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::mojom::internal::BluetoothInternalsHandler_GetAdapter_ResponseParams_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::bluetooth::mojom::AdapterInterfaceBase>>(
      in_adapter, &params->adapter, &serialization_context);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "(Impl)mojom::BluetoothInternalsHandler::GetAdapterCallback",
               "message", message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(BluetoothInternalsHandler::Name_);
  message.set_method_name("GetAdapter");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class BluetoothInternalsHandler_GetDebugLogsChangeHandler_ProxyToResponder {
 public:
  static BluetoothInternalsHandler::GetDebugLogsChangeHandlerCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<BluetoothInternalsHandler_GetDebugLogsChangeHandler_ProxyToResponder> proxy(
        new BluetoothInternalsHandler_GetDebugLogsChangeHandler_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&BluetoothInternalsHandler_GetDebugLogsChangeHandler_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~BluetoothInternalsHandler_GetDebugLogsChangeHandler_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  BluetoothInternalsHandler_GetDebugLogsChangeHandler_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "BluetoothInternalsHandler::GetDebugLogsChangeHandlerCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      ::mojo::PendingRemote<DebugLogsChangeHandler> in_handler, bool in_initial_toggle_value);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(BluetoothInternalsHandler_GetDebugLogsChangeHandler_ProxyToResponder);
};

bool BluetoothInternalsHandler_GetDebugLogsChangeHandler_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "mojom::BluetoothInternalsHandler::GetDebugLogsChangeHandlerCallback",
               "message", message->name());
#endif
  mojo::internal::MessageDispatchContext dispatch_context(message);

  DCHECK(message->is_serialized());
  internal::BluetoothInternalsHandler_GetDebugLogsChangeHandler_ResponseParams_Data* params =
      reinterpret_cast<
          internal::BluetoothInternalsHandler_GetDebugLogsChangeHandler_ResponseParams_Data*>(
              message->mutable_payload());
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  
  bool success = true;
  ::mojo::PendingRemote<DebugLogsChangeHandler> p_handler{};
  bool p_initial_toggle_value{};
  BluetoothInternalsHandler_GetDebugLogsChangeHandler_ResponseParamsDataView input_data_view(params, &serialization_context);
  
  if (success) {
    p_handler =
        input_data_view.TakeHandler<decltype(p_handler)>();
  }
  if (success)
    p_initial_toggle_value = input_data_view.initial_toggle_value();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        BluetoothInternalsHandler::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_handler), 
std::move(p_initial_toggle_value));
  return true;
}

void BluetoothInternalsHandler_GetDebugLogsChangeHandler_ProxyToResponder::Run(
    ::mojo::PendingRemote<DebugLogsChangeHandler> in_handler, bool in_initial_toggle_value) {
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kBluetoothInternalsHandler_GetDebugLogsChangeHandler_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::mojom::internal::BluetoothInternalsHandler_GetDebugLogsChangeHandler_ResponseParams_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::mojom::DebugLogsChangeHandlerInterfaceBase>>(
      in_handler, &params->handler, &serialization_context);
  params->initial_toggle_value = in_initial_toggle_value;
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "(Impl)mojom::BluetoothInternalsHandler::GetDebugLogsChangeHandlerCallback",
               "message", message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(BluetoothInternalsHandler::Name_);
  message.set_method_name("GetDebugLogsChangeHandler");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool BluetoothInternalsHandlerStubDispatch::Accept(
    BluetoothInternalsHandler* impl,
    mojo::Message* message) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  switch (message->header()->name) {
    case internal::kBluetoothInternalsHandler_GetAdapter_Name: {
      break;
    }
    case internal::kBluetoothInternalsHandler_GetDebugLogsChangeHandler_Name: {
      break;
    }
  }
  return false;
}

// static
bool BluetoothInternalsHandlerStubDispatch::AcceptWithResponder(
    BluetoothInternalsHandler* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kBluetoothInternalsHandler_GetAdapter_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojom::BluetoothInternalsHandler::GetAdapter",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojom::BluetoothInternalsHandler::GetAdapter");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::BluetoothInternalsHandler_GetAdapter_Params_Data* params =
          reinterpret_cast<
              internal::BluetoothInternalsHandler_GetAdapter_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      BluetoothInternalsHandler_GetAdapter_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            BluetoothInternalsHandler::Name_, 0, false);
        return false;
      }
      BluetoothInternalsHandler::GetAdapterCallback callback =
          BluetoothInternalsHandler_GetAdapter_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetAdapter(std::move(callback));
      return true;
    }
    case internal::kBluetoothInternalsHandler_GetDebugLogsChangeHandler_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojom::BluetoothInternalsHandler::GetDebugLogsChangeHandler",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojom::BluetoothInternalsHandler::GetDebugLogsChangeHandler");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::BluetoothInternalsHandler_GetDebugLogsChangeHandler_Params_Data* params =
          reinterpret_cast<
              internal::BluetoothInternalsHandler_GetDebugLogsChangeHandler_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      BluetoothInternalsHandler_GetDebugLogsChangeHandler_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            BluetoothInternalsHandler::Name_, 1, false);
        return false;
      }
      BluetoothInternalsHandler::GetDebugLogsChangeHandlerCallback callback =
          BluetoothInternalsHandler_GetDebugLogsChangeHandler_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetDebugLogsChangeHandler(std::move(callback));
      return true;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kBluetoothInternalsHandlerValidationInfo[] = {
    {internal::kBluetoothInternalsHandler_GetAdapter_Name,
     {&internal::BluetoothInternalsHandler_GetAdapter_Params_Data::Validate,
      &internal::BluetoothInternalsHandler_GetAdapter_ResponseParams_Data::Validate}},
    {internal::kBluetoothInternalsHandler_GetDebugLogsChangeHandler_Name,
     {&internal::BluetoothInternalsHandler_GetDebugLogsChangeHandler_Params_Data::Validate,
      &internal::BluetoothInternalsHandler_GetDebugLogsChangeHandler_ResponseParams_Data::Validate}},
};

bool BluetoothInternalsHandlerRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojom::BluetoothInternalsHandler::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kBluetoothInternalsHandlerValidationInfo);
}

bool BluetoothInternalsHandlerResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::mojom::BluetoothInternalsHandler::Name_;
  return mojo::internal::ValidateResponseGeneric(message, name, kBluetoothInternalsHandlerValidationInfo);

}
}  // namespace mojom

namespace mojo {

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
// chrome/browser/ui/webui/reset_password/reset_password.mojom-lite-for-compile.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';

goog.require('mojo.internal');
goog.require('mojo.internal.interfaceSupport');







goog.provide('mojom.ResetPasswordHandler');
goog.provide('mojom.ResetPasswordHandlerReceiver');
goog.provide('mojom.ResetPasswordHandlerCallbackRouter');
goog.provide('mojom.ResetPasswordHandlerInterface');
goog.provide('mojom.ResetPasswordHandlerRemote');
goog.provide('mojom.ResetPasswordHandlerPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
mojom.ResetPasswordHandlerPendingReceiver = class {
  /** @param {!MojoHandle} handle */
  constructor(handle) {
    /** @public {!MojoHandle} */
    this.handle = handle;
  }
};

/** @interface */
mojom.ResetPasswordHandlerInterface = class {
  
  /**
   */

  handlePasswordReset() {}
};

/**
 * @export
 * @implements { mojom.ResetPasswordHandlerInterface }
 */
mojom.ResetPasswordHandlerRemote = class {
  /** @param {MojoHandle=} opt_handle */
  constructor(opt_handle) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!mojom.ResetPasswordHandlerPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          mojom.ResetPasswordHandlerPendingReceiver,
          opt_handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!mojom.ResetPasswordHandlerPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   */

  handlePasswordReset() {
    this.proxy.sendMessage(
        1670880172,
        mojom.ResetPasswordHandler_HandlePasswordReset_ParamsSpec.$,
        null,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the ResetPasswordHandler
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
mojom.ResetPasswordHandlerReceiver = class {
  /**
   * @param {!mojom.ResetPasswordHandlerInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!mojom.ResetPasswordHandlerRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        mojom.ResetPasswordHandlerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojom.ResetPasswordHandlerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        1670880172,
        mojom.ResetPasswordHandler_HandlePasswordReset_ParamsSpec.$,
        null,
        impl.handlePasswordReset.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
mojom.ResetPasswordHandler = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "mojom.ResetPasswordHandler";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!mojom.ResetPasswordHandlerRemote}
   * @export
   */
  static getRemote() {
    let remote = new mojom.ResetPasswordHandlerRemote;
    Mojo.bindInterface(this.$interfaceName,
                       remote.$.bindNewPipeAndPassReceiver().handle);
    return remote;
  }
};


/**
 * An object which receives request messages for the ResetPasswordHandler
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
mojom.ResetPasswordHandlerCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      mojom.ResetPasswordHandlerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mojom.ResetPasswordHandlerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.handlePasswordReset =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1670880172,
        mojom.ResetPasswordHandler_HandlePasswordReset_ParamsSpec.$,
        null,
        this.handlePasswordReset.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('mojom.ResetPasswordHandler_HandlePasswordReset_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mojom.ResetPasswordHandler_HandlePasswordReset_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    mojom.ResetPasswordHandler_HandlePasswordReset_ParamsSpec.$,
    'ResetPasswordHandler_HandlePasswordReset_Params',
    0,
    [
    ]);



goog.provide('mojom.ResetPasswordHandler_HandlePasswordReset_Params');

/** @record */
mojom.ResetPasswordHandler_HandlePasswordReset_Params = class {
  constructor() {
  }
};


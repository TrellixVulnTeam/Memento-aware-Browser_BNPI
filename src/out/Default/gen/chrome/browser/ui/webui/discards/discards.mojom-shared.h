// chrome/browser/ui/webui/discards/discards.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_UI_WEBUI_DISCARDS_DISCARDS_MOJOM_SHARED_H_
#define CHROME_BROWSER_UI_WEBUI_DISCARDS_DISCARDS_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "chrome/browser/ui/webui/discards/discards.mojom-shared-internal.h"
#include "chrome/browser/resource_coordinator/lifecycle_unit_state.mojom-shared.h"
#include "mojo/public/mojom/base/process_id.mojom-shared.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "url/mojom/url.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace discards {
namespace mojom {
class TabDiscardsInfoDataView;

class PageInfoDataView;

class FrameInfoDataView;

class ProcessInfoDataView;

class WorkerInfoDataView;

class FavIconInfoDataView;



}  // namespace mojom
}  // namespace discards

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::discards::mojom::TabDiscardsInfoDataView> {
  using Data = ::discards::mojom::internal::TabDiscardsInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::discards::mojom::PageInfoDataView> {
  using Data = ::discards::mojom::internal::PageInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::discards::mojom::FrameInfoDataView> {
  using Data = ::discards::mojom::internal::FrameInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::discards::mojom::ProcessInfoDataView> {
  using Data = ::discards::mojom::internal::ProcessInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::discards::mojom::WorkerInfoDataView> {
  using Data = ::discards::mojom::internal::WorkerInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::discards::mojom::FavIconInfoDataView> {
  using Data = ::discards::mojom::internal::FavIconInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace discards {
namespace mojom {


enum class LifecycleUnitVisibility : int32_t {
  
  HIDDEN = 0,
  
  OCCLUDED = 1,
  
  VISIBLE = 2,
  kMinValue = 0,
  kMaxValue = 2,
};

 std::ostream& operator<<(std::ostream& os, LifecycleUnitVisibility value);
inline bool IsKnownEnumValue(LifecycleUnitVisibility value) {
  return internal::LifecycleUnitVisibility_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class DetailsProviderInterfaceBase {};

using DetailsProviderPtrDataView =
    mojo::InterfacePtrDataView<DetailsProviderInterfaceBase>;
using DetailsProviderRequestDataView =
    mojo::InterfaceRequestDataView<DetailsProviderInterfaceBase>;
using DetailsProviderAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<DetailsProviderInterfaceBase>;
using DetailsProviderAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<DetailsProviderInterfaceBase>;
class GraphChangeStreamInterfaceBase {};

using GraphChangeStreamPtrDataView =
    mojo::InterfacePtrDataView<GraphChangeStreamInterfaceBase>;
using GraphChangeStreamRequestDataView =
    mojo::InterfaceRequestDataView<GraphChangeStreamInterfaceBase>;
using GraphChangeStreamAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<GraphChangeStreamInterfaceBase>;
using GraphChangeStreamAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<GraphChangeStreamInterfaceBase>;
class GraphDumpInterfaceBase {};

using GraphDumpPtrDataView =
    mojo::InterfacePtrDataView<GraphDumpInterfaceBase>;
using GraphDumpRequestDataView =
    mojo::InterfaceRequestDataView<GraphDumpInterfaceBase>;
using GraphDumpAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<GraphDumpInterfaceBase>;
using GraphDumpAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<GraphDumpInterfaceBase>;
class TabDiscardsInfoDataView {
 public:
  TabDiscardsInfoDataView() {}

  TabDiscardsInfoDataView(
      internal::TabDiscardsInfo_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetTabUrlDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTabUrl(UserType* output) {
    auto* pointer = data_->tab_url.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetTitleDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTitle(UserType* output) {
    auto* pointer = data_->title.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadVisibility(UserType* output) const {
    auto data_value = data_->visibility;
    return mojo::internal::Deserialize<::discards::mojom::LifecycleUnitVisibility>(
        data_value, output);
  }

  LifecycleUnitVisibility visibility() const {
    return static_cast<LifecycleUnitVisibility>(data_->visibility);
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadLoadingState(UserType* output) const {
    auto data_value = data_->loading_state;
    return mojo::internal::Deserialize<::mojom::LifecycleUnitLoadingState>(
        data_value, output);
  }

  ::mojom::LifecycleUnitLoadingState loading_state() const {
    return static_cast<::mojom::LifecycleUnitLoadingState>(data_->loading_state);
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadState(UserType* output) const {
    auto data_value = data_->state;
    return mojo::internal::Deserialize<::mojom::LifecycleUnitState>(
        data_value, output);
  }

  ::mojom::LifecycleUnitState state() const {
    return static_cast<::mojom::LifecycleUnitState>(data_->state);
  }
  bool can_discard() const {
    return data_->can_discard;
  }
  inline void GetCannotDiscardReasonsDataView(
      mojo::ArrayDataView<mojo::StringDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadCannotDiscardReasons(UserType* output) {
    auto* pointer = data_->cannot_discard_reasons.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<mojo::StringDataView>>(
        pointer, output, context_);
  }
  int32_t discard_count() const {
    return data_->discard_count;
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDiscardReason(UserType* output) const {
    auto data_value = data_->discard_reason;
    return mojo::internal::Deserialize<::mojom::LifecycleUnitDiscardReason>(
        data_value, output);
  }

  ::mojom::LifecycleUnitDiscardReason discard_reason() const {
    return static_cast<::mojom::LifecycleUnitDiscardReason>(data_->discard_reason);
  }
  int32_t utility_rank() const {
    return data_->utility_rank;
  }
  int32_t last_active_seconds() const {
    return data_->last_active_seconds;
  }
  int32_t id() const {
    return data_->id;
  }
  bool is_auto_discardable() const {
    return data_->is_auto_discardable;
  }
  bool has_reactivation_score() const {
    return data_->has_reactivation_score;
  }
  double reactivation_score() const {
    return data_->reactivation_score;
  }
  double site_engagement_score() const {
    return data_->site_engagement_score;
  }
  bool has_focus() const {
    return data_->has_focus;
  }
  inline void GetStateChangeTimeDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadStateChangeTime(UserType* output) {
    auto* pointer = data_->state_change_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, context_);
  }
 private:
  internal::TabDiscardsInfo_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageInfoDataView {
 public:
  PageInfoDataView() {}

  PageInfoDataView(
      internal::PageInfo_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int64_t id() const {
    return data_->id;
  }
  inline void GetMainFrameUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadMainFrameUrl(UserType* output) {
    auto* pointer = data_->main_frame_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  int64_t opener_frame_id() const {
    return data_->opener_frame_id;
  }
  inline void GetDescriptionJsonDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDescriptionJson(UserType* output) {
    auto* pointer = data_->description_json.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageInfo_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameInfoDataView {
 public:
  FrameInfoDataView() {}

  FrameInfoDataView(
      internal::FrameInfo_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int64_t id() const {
    return data_->id;
  }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUrl(UserType* output) {
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  int64_t page_id() const {
    return data_->page_id;
  }
  int64_t parent_frame_id() const {
    return data_->parent_frame_id;
  }
  int64_t process_id() const {
    return data_->process_id;
  }
  inline void GetDescriptionJsonDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDescriptionJson(UserType* output) {
    auto* pointer = data_->description_json.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::FrameInfo_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class ProcessInfoDataView {
 public:
  ProcessInfoDataView() {}

  ProcessInfoDataView(
      internal::ProcessInfo_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int64_t id() const {
    return data_->id;
  }
  inline void GetPidDataView(
      ::mojo_base::mojom::ProcessIdDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPid(UserType* output) {
    auto* pointer = data_->pid.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ProcessIdDataView>(
        pointer, output, context_);
  }
  uint64_t private_footprint_kb() const {
    return data_->private_footprint_kb;
  }
  inline void GetDescriptionJsonDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDescriptionJson(UserType* output) {
    auto* pointer = data_->description_json.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::ProcessInfo_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class WorkerInfoDataView {
 public:
  WorkerInfoDataView() {}

  WorkerInfoDataView(
      internal::WorkerInfo_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int64_t id() const {
    return data_->id;
  }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUrl(UserType* output) {
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  int64_t process_id() const {
    return data_->process_id;
  }
  inline void GetClientFrameIdsDataView(
      mojo::ArrayDataView<int64_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadClientFrameIds(UserType* output) {
    auto* pointer = data_->client_frame_ids.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<int64_t>>(
        pointer, output, context_);
  }
  inline void GetClientWorkerIdsDataView(
      mojo::ArrayDataView<int64_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadClientWorkerIds(UserType* output) {
    auto* pointer = data_->client_worker_ids.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<int64_t>>(
        pointer, output, context_);
  }
  inline void GetChildWorkerIdsDataView(
      mojo::ArrayDataView<int64_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadChildWorkerIds(UserType* output) {
    auto* pointer = data_->child_worker_ids.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<int64_t>>(
        pointer, output, context_);
  }
  inline void GetDescriptionJsonDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDescriptionJson(UserType* output) {
    auto* pointer = data_->description_json.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::WorkerInfo_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FavIconInfoDataView {
 public:
  FavIconInfoDataView() {}

  FavIconInfoDataView(
      internal::FavIconInfo_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int64_t node_id() const {
    return data_->node_id;
  }
  inline void GetIconDataDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadIconData(UserType* output) {
    auto* pointer = data_->icon_data.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::FavIconInfo_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};



}  // namespace mojom
}  // namespace discards

namespace std {

template <>
struct hash<::discards::mojom::LifecycleUnitVisibility>
    : public mojo::internal::EnumHashImpl<::discards::mojom::LifecycleUnitVisibility> {};

}  // namespace std

namespace mojo {


template <>
struct EnumTraits<::discards::mojom::LifecycleUnitVisibility, ::discards::mojom::LifecycleUnitVisibility> {
  static ::discards::mojom::LifecycleUnitVisibility ToMojom(::discards::mojom::LifecycleUnitVisibility input) { return input; }
  static bool FromMojom(::discards::mojom::LifecycleUnitVisibility input, ::discards::mojom::LifecycleUnitVisibility* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::discards::mojom::LifecycleUnitVisibility, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::discards::mojom::LifecycleUnitVisibility, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::discards::mojom::LifecycleUnitVisibility>(input), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::discards::mojom::TabDiscardsInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::discards::mojom::TabDiscardsInfoDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::discards::mojom::internal::TabDiscardsInfo_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::tab_url(input)) in_tab_url = Traits::tab_url(input);
    typename decltype((*output)->tab_url)::BaseType::BufferWriter
        tab_url_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_tab_url, buffer, &tab_url_writer, context);
    (*output)->tab_url.Set(
        tab_url_writer.is_null() ? nullptr : tab_url_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->tab_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null tab_url in TabDiscardsInfo struct");
    decltype(Traits::title(input)) in_title = Traits::title(input);
    typename decltype((*output)->title)::BaseType::BufferWriter
        title_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_title, buffer, &title_writer, context);
    (*output)->title.Set(
        title_writer.is_null() ? nullptr : title_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->title.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null title in TabDiscardsInfo struct");
    mojo::internal::Serialize<::discards::mojom::LifecycleUnitVisibility>(
        Traits::visibility(input), &(*output)->visibility);
    mojo::internal::Serialize<::mojom::LifecycleUnitLoadingState>(
        Traits::loading_state(input), &(*output)->loading_state);
    mojo::internal::Serialize<::mojom::LifecycleUnitState>(
        Traits::state(input), &(*output)->state);
    (*output)->can_discard = Traits::can_discard(input);
    decltype(Traits::cannot_discard_reasons(input)) in_cannot_discard_reasons = Traits::cannot_discard_reasons(input);
    typename decltype((*output)->cannot_discard_reasons)::BaseType::BufferWriter
        cannot_discard_reasons_writer;
    const mojo::internal::ContainerValidateParams cannot_discard_reasons_validate_params(
        0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
    mojo::internal::Serialize<mojo::ArrayDataView<mojo::StringDataView>>(
        in_cannot_discard_reasons, buffer, &cannot_discard_reasons_writer, &cannot_discard_reasons_validate_params,
        context);
    (*output)->cannot_discard_reasons.Set(
        cannot_discard_reasons_writer.is_null() ? nullptr : cannot_discard_reasons_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->cannot_discard_reasons.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null cannot_discard_reasons in TabDiscardsInfo struct");
    (*output)->discard_count = Traits::discard_count(input);
    mojo::internal::Serialize<::mojom::LifecycleUnitDiscardReason>(
        Traits::discard_reason(input), &(*output)->discard_reason);
    (*output)->utility_rank = Traits::utility_rank(input);
    (*output)->last_active_seconds = Traits::last_active_seconds(input);
    (*output)->id = Traits::id(input);
    (*output)->is_auto_discardable = Traits::is_auto_discardable(input);
    (*output)->has_reactivation_score = Traits::has_reactivation_score(input);
    (*output)->reactivation_score = Traits::reactivation_score(input);
    (*output)->site_engagement_score = Traits::site_engagement_score(input);
    (*output)->has_focus = Traits::has_focus(input);
    decltype(Traits::state_change_time(input)) in_state_change_time = Traits::state_change_time(input);
    typename decltype((*output)->state_change_time)::BaseType::BufferWriter
        state_change_time_writer;
    mojo::internal::Serialize<::mojo_base::mojom::TimeDeltaDataView>(
        in_state_change_time, buffer, &state_change_time_writer, context);
    (*output)->state_change_time.Set(
        state_change_time_writer.is_null() ? nullptr : state_change_time_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->state_change_time.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null state_change_time in TabDiscardsInfo struct");
  }

  static bool Deserialize(::discards::mojom::internal::TabDiscardsInfo_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::discards::mojom::TabDiscardsInfoDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::discards::mojom::PageInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::discards::mojom::PageInfoDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::discards::mojom::internal::PageInfo_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->id = Traits::id(input);
    decltype(Traits::main_frame_url(input)) in_main_frame_url = Traits::main_frame_url(input);
    typename decltype((*output)->main_frame_url)::BaseType::BufferWriter
        main_frame_url_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_main_frame_url, buffer, &main_frame_url_writer, context);
    (*output)->main_frame_url.Set(
        main_frame_url_writer.is_null() ? nullptr : main_frame_url_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->main_frame_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null main_frame_url in PageInfo struct");
    (*output)->opener_frame_id = Traits::opener_frame_id(input);
    decltype(Traits::description_json(input)) in_description_json = Traits::description_json(input);
    typename decltype((*output)->description_json)::BaseType::BufferWriter
        description_json_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_description_json, buffer, &description_json_writer, context);
    (*output)->description_json.Set(
        description_json_writer.is_null() ? nullptr : description_json_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->description_json.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null description_json in PageInfo struct");
  }

  static bool Deserialize(::discards::mojom::internal::PageInfo_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::discards::mojom::PageInfoDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::discards::mojom::FrameInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::discards::mojom::FrameInfoDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::discards::mojom::internal::FrameInfo_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->id = Traits::id(input);
    decltype(Traits::url(input)) in_url = Traits::url(input);
    typename decltype((*output)->url)::BaseType::BufferWriter
        url_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_url, buffer, &url_writer, context);
    (*output)->url.Set(
        url_writer.is_null() ? nullptr : url_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null url in FrameInfo struct");
    (*output)->page_id = Traits::page_id(input);
    (*output)->parent_frame_id = Traits::parent_frame_id(input);
    (*output)->process_id = Traits::process_id(input);
    decltype(Traits::description_json(input)) in_description_json = Traits::description_json(input);
    typename decltype((*output)->description_json)::BaseType::BufferWriter
        description_json_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_description_json, buffer, &description_json_writer, context);
    (*output)->description_json.Set(
        description_json_writer.is_null() ? nullptr : description_json_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->description_json.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null description_json in FrameInfo struct");
  }

  static bool Deserialize(::discards::mojom::internal::FrameInfo_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::discards::mojom::FrameInfoDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::discards::mojom::ProcessInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::discards::mojom::ProcessInfoDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::discards::mojom::internal::ProcessInfo_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->id = Traits::id(input);
    decltype(Traits::pid(input)) in_pid = Traits::pid(input);
    typename decltype((*output)->pid)::BaseType::BufferWriter
        pid_writer;
    mojo::internal::Serialize<::mojo_base::mojom::ProcessIdDataView>(
        in_pid, buffer, &pid_writer, context);
    (*output)->pid.Set(
        pid_writer.is_null() ? nullptr : pid_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->pid.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null pid in ProcessInfo struct");
    (*output)->private_footprint_kb = Traits::private_footprint_kb(input);
    decltype(Traits::description_json(input)) in_description_json = Traits::description_json(input);
    typename decltype((*output)->description_json)::BaseType::BufferWriter
        description_json_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_description_json, buffer, &description_json_writer, context);
    (*output)->description_json.Set(
        description_json_writer.is_null() ? nullptr : description_json_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->description_json.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null description_json in ProcessInfo struct");
  }

  static bool Deserialize(::discards::mojom::internal::ProcessInfo_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::discards::mojom::ProcessInfoDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::discards::mojom::WorkerInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::discards::mojom::WorkerInfoDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::discards::mojom::internal::WorkerInfo_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->id = Traits::id(input);
    decltype(Traits::url(input)) in_url = Traits::url(input);
    typename decltype((*output)->url)::BaseType::BufferWriter
        url_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_url, buffer, &url_writer, context);
    (*output)->url.Set(
        url_writer.is_null() ? nullptr : url_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null url in WorkerInfo struct");
    (*output)->process_id = Traits::process_id(input);
    decltype(Traits::client_frame_ids(input)) in_client_frame_ids = Traits::client_frame_ids(input);
    typename decltype((*output)->client_frame_ids)::BaseType::BufferWriter
        client_frame_ids_writer;
    const mojo::internal::ContainerValidateParams client_frame_ids_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<int64_t>>(
        in_client_frame_ids, buffer, &client_frame_ids_writer, &client_frame_ids_validate_params,
        context);
    (*output)->client_frame_ids.Set(
        client_frame_ids_writer.is_null() ? nullptr : client_frame_ids_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->client_frame_ids.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null client_frame_ids in WorkerInfo struct");
    decltype(Traits::client_worker_ids(input)) in_client_worker_ids = Traits::client_worker_ids(input);
    typename decltype((*output)->client_worker_ids)::BaseType::BufferWriter
        client_worker_ids_writer;
    const mojo::internal::ContainerValidateParams client_worker_ids_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<int64_t>>(
        in_client_worker_ids, buffer, &client_worker_ids_writer, &client_worker_ids_validate_params,
        context);
    (*output)->client_worker_ids.Set(
        client_worker_ids_writer.is_null() ? nullptr : client_worker_ids_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->client_worker_ids.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null client_worker_ids in WorkerInfo struct");
    decltype(Traits::child_worker_ids(input)) in_child_worker_ids = Traits::child_worker_ids(input);
    typename decltype((*output)->child_worker_ids)::BaseType::BufferWriter
        child_worker_ids_writer;
    const mojo::internal::ContainerValidateParams child_worker_ids_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<int64_t>>(
        in_child_worker_ids, buffer, &child_worker_ids_writer, &child_worker_ids_validate_params,
        context);
    (*output)->child_worker_ids.Set(
        child_worker_ids_writer.is_null() ? nullptr : child_worker_ids_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->child_worker_ids.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null child_worker_ids in WorkerInfo struct");
    decltype(Traits::description_json(input)) in_description_json = Traits::description_json(input);
    typename decltype((*output)->description_json)::BaseType::BufferWriter
        description_json_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_description_json, buffer, &description_json_writer, context);
    (*output)->description_json.Set(
        description_json_writer.is_null() ? nullptr : description_json_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->description_json.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null description_json in WorkerInfo struct");
  }

  static bool Deserialize(::discards::mojom::internal::WorkerInfo_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::discards::mojom::WorkerInfoDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::discards::mojom::FavIconInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::discards::mojom::FavIconInfoDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::discards::mojom::internal::FavIconInfo_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->node_id = Traits::node_id(input);
    decltype(Traits::icon_data(input)) in_icon_data = Traits::icon_data(input);
    typename decltype((*output)->icon_data)::BaseType::BufferWriter
        icon_data_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_icon_data, buffer, &icon_data_writer, context);
    (*output)->icon_data.Set(
        icon_data_writer.is_null() ? nullptr : icon_data_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->icon_data.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null icon_data in FavIconInfo struct");
  }

  static bool Deserialize(::discards::mojom::internal::FavIconInfo_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::discards::mojom::FavIconInfoDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace discards {
namespace mojom {

inline void TabDiscardsInfoDataView::GetTabUrlDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->tab_url.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void TabDiscardsInfoDataView::GetTitleDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->title.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void TabDiscardsInfoDataView::GetCannotDiscardReasonsDataView(
    mojo::ArrayDataView<mojo::StringDataView>* output) {
  auto pointer = data_->cannot_discard_reasons.Get();
  *output = mojo::ArrayDataView<mojo::StringDataView>(pointer, context_);
}
inline void TabDiscardsInfoDataView::GetStateChangeTimeDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->state_change_time.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, context_);
}


inline void PageInfoDataView::GetMainFrameUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->main_frame_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void PageInfoDataView::GetDescriptionJsonDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->description_json.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void FrameInfoDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void FrameInfoDataView::GetDescriptionJsonDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->description_json.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void ProcessInfoDataView::GetPidDataView(
    ::mojo_base::mojom::ProcessIdDataView* output) {
  auto pointer = data_->pid.Get();
  *output = ::mojo_base::mojom::ProcessIdDataView(pointer, context_);
}
inline void ProcessInfoDataView::GetDescriptionJsonDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->description_json.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void WorkerInfoDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void WorkerInfoDataView::GetClientFrameIdsDataView(
    mojo::ArrayDataView<int64_t>* output) {
  auto pointer = data_->client_frame_ids.Get();
  *output = mojo::ArrayDataView<int64_t>(pointer, context_);
}
inline void WorkerInfoDataView::GetClientWorkerIdsDataView(
    mojo::ArrayDataView<int64_t>* output) {
  auto pointer = data_->client_worker_ids.Get();
  *output = mojo::ArrayDataView<int64_t>(pointer, context_);
}
inline void WorkerInfoDataView::GetChildWorkerIdsDataView(
    mojo::ArrayDataView<int64_t>* output) {
  auto pointer = data_->child_worker_ids.Get();
  *output = mojo::ArrayDataView<int64_t>(pointer, context_);
}
inline void WorkerInfoDataView::GetDescriptionJsonDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->description_json.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void FavIconInfoDataView::GetIconDataDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->icon_data.Get();
  *output = mojo::StringDataView(pointer, context_);
}



}  // namespace mojom
}  // namespace discards

#endif  // CHROME_BROWSER_UI_WEBUI_DISCARDS_DISCARDS_MOJOM_SHARED_H_
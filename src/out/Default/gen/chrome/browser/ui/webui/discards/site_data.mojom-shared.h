// chrome/browser/ui/webui/discards/site_data.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_UI_WEBUI_DISCARDS_SITE_DATA_MOJOM_SHARED_H_
#define CHROME_BROWSER_UI_WEBUI_DISCARDS_SITE_DATA_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "chrome/browser/ui/webui/discards/site_data.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace discards {
namespace mojom {
class SiteCharacteristicsFeatureDataView;

class SiteCharacteristicsPerformanceMeasurementDataView;

class SiteCharacteristicsDatabaseSizeDataView;

class SiteCharacteristicsDatabaseValueDataView;

class SiteCharacteristicsDatabaseEntryDataView;

class SiteCharacteristicsDatabaseDataView;



}  // namespace mojom
}  // namespace discards

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::discards::mojom::SiteCharacteristicsFeatureDataView> {
  using Data = ::discards::mojom::internal::SiteCharacteristicsFeature_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::discards::mojom::SiteCharacteristicsPerformanceMeasurementDataView> {
  using Data = ::discards::mojom::internal::SiteCharacteristicsPerformanceMeasurement_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::discards::mojom::SiteCharacteristicsDatabaseSizeDataView> {
  using Data = ::discards::mojom::internal::SiteCharacteristicsDatabaseSize_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::discards::mojom::SiteCharacteristicsDatabaseValueDataView> {
  using Data = ::discards::mojom::internal::SiteCharacteristicsDatabaseValue_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::discards::mojom::SiteCharacteristicsDatabaseEntryDataView> {
  using Data = ::discards::mojom::internal::SiteCharacteristicsDatabaseEntry_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::discards::mojom::SiteCharacteristicsDatabaseDataView> {
  using Data = ::discards::mojom::internal::SiteCharacteristicsDatabase_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace discards {
namespace mojom {
// Interface base classes. They are used for type safety check.
class SiteDataProviderInterfaceBase {};

using SiteDataProviderPtrDataView =
    mojo::InterfacePtrDataView<SiteDataProviderInterfaceBase>;
using SiteDataProviderRequestDataView =
    mojo::InterfaceRequestDataView<SiteDataProviderInterfaceBase>;
using SiteDataProviderAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<SiteDataProviderInterfaceBase>;
using SiteDataProviderAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<SiteDataProviderInterfaceBase>;
class SiteCharacteristicsFeatureDataView {
 public:
  SiteCharacteristicsFeatureDataView() {}

  SiteCharacteristicsFeatureDataView(
      internal::SiteCharacteristicsFeature_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int64_t observation_duration() const {
    return data_->observation_duration;
  }
  int64_t use_timestamp() const {
    return data_->use_timestamp;
  }
 private:
  internal::SiteCharacteristicsFeature_Data* data_ = nullptr;
};

class SiteCharacteristicsPerformanceMeasurementDataView {
 public:
  SiteCharacteristicsPerformanceMeasurementDataView() {}

  SiteCharacteristicsPerformanceMeasurementDataView(
      internal::SiteCharacteristicsPerformanceMeasurement_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  float avg_cpu_usage_us() const {
    return data_->avg_cpu_usage_us;
  }
  float avg_footprint_kb() const {
    return data_->avg_footprint_kb;
  }
  float avg_load_duration_us() const {
    return data_->avg_load_duration_us;
  }
 private:
  internal::SiteCharacteristicsPerformanceMeasurement_Data* data_ = nullptr;
};

class SiteCharacteristicsDatabaseSizeDataView {
 public:
  SiteCharacteristicsDatabaseSizeDataView() {}

  SiteCharacteristicsDatabaseSizeDataView(
      internal::SiteCharacteristicsDatabaseSize_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int64_t num_rows() const {
    return data_->num_rows;
  }
  int64_t on_disk_size_kb() const {
    return data_->on_disk_size_kb;
  }
 private:
  internal::SiteCharacteristicsDatabaseSize_Data* data_ = nullptr;
};

class SiteCharacteristicsDatabaseValueDataView {
 public:
  SiteCharacteristicsDatabaseValueDataView() {}

  SiteCharacteristicsDatabaseValueDataView(
      internal::SiteCharacteristicsDatabaseValue_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  uint32_t last_loaded() const {
    return data_->last_loaded;
  }
  inline void GetUpdatesFaviconInBackgroundDataView(
      SiteCharacteristicsFeatureDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUpdatesFaviconInBackground(UserType* output) {
    auto* pointer = data_->updates_favicon_in_background.Get();
    return mojo::internal::Deserialize<::discards::mojom::SiteCharacteristicsFeatureDataView>(
        pointer, output, context_);
  }
  inline void GetUpdatesTitleInBackgroundDataView(
      SiteCharacteristicsFeatureDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUpdatesTitleInBackground(UserType* output) {
    auto* pointer = data_->updates_title_in_background.Get();
    return mojo::internal::Deserialize<::discards::mojom::SiteCharacteristicsFeatureDataView>(
        pointer, output, context_);
  }
  inline void GetUsesAudioInBackgroundDataView(
      SiteCharacteristicsFeatureDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUsesAudioInBackground(UserType* output) {
    auto* pointer = data_->uses_audio_in_background.Get();
    return mojo::internal::Deserialize<::discards::mojom::SiteCharacteristicsFeatureDataView>(
        pointer, output, context_);
  }
  inline void GetLoadTimeEstimatesDataView(
      SiteCharacteristicsPerformanceMeasurementDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadLoadTimeEstimates(UserType* output) {
    auto* pointer = data_->load_time_estimates.Get();
    return mojo::internal::Deserialize<::discards::mojom::SiteCharacteristicsPerformanceMeasurementDataView>(
        pointer, output, context_);
  }
 private:
  internal::SiteCharacteristicsDatabaseValue_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class SiteCharacteristicsDatabaseEntryDataView {
 public:
  SiteCharacteristicsDatabaseEntryDataView() {}

  SiteCharacteristicsDatabaseEntryDataView(
      internal::SiteCharacteristicsDatabaseEntry_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetOriginDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadOrigin(UserType* output) {
    auto* pointer = data_->origin.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  bool is_dirty() const {
    return data_->is_dirty;
  }
  inline void GetValueDataView(
      SiteCharacteristicsDatabaseValueDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadValue(UserType* output) {
    auto* pointer = data_->value.Get();
    return mojo::internal::Deserialize<::discards::mojom::SiteCharacteristicsDatabaseValueDataView>(
        pointer, output, context_);
  }
 private:
  internal::SiteCharacteristicsDatabaseEntry_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class SiteCharacteristicsDatabaseDataView {
 public:
  SiteCharacteristicsDatabaseDataView() {}

  SiteCharacteristicsDatabaseDataView(
      internal::SiteCharacteristicsDatabase_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDbRowsDataView(
      mojo::ArrayDataView<SiteCharacteristicsDatabaseEntryDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDbRows(UserType* output) {
    auto* pointer = data_->db_rows.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::discards::mojom::SiteCharacteristicsDatabaseEntryDataView>>(
        pointer, output, context_);
  }
 private:
  internal::SiteCharacteristicsDatabase_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};



}  // namespace mojom
}  // namespace discards

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::discards::mojom::SiteCharacteristicsFeatureDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::discards::mojom::SiteCharacteristicsFeatureDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::discards::mojom::internal::SiteCharacteristicsFeature_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->observation_duration = Traits::observation_duration(input);
    (*output)->use_timestamp = Traits::use_timestamp(input);
  }

  static bool Deserialize(::discards::mojom::internal::SiteCharacteristicsFeature_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::discards::mojom::SiteCharacteristicsFeatureDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::discards::mojom::SiteCharacteristicsPerformanceMeasurementDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::discards::mojom::SiteCharacteristicsPerformanceMeasurementDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::discards::mojom::internal::SiteCharacteristicsPerformanceMeasurement_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->avg_cpu_usage_us = Traits::avg_cpu_usage_us(input);
    (*output)->avg_footprint_kb = Traits::avg_footprint_kb(input);
    (*output)->avg_load_duration_us = Traits::avg_load_duration_us(input);
  }

  static bool Deserialize(::discards::mojom::internal::SiteCharacteristicsPerformanceMeasurement_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::discards::mojom::SiteCharacteristicsPerformanceMeasurementDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::discards::mojom::SiteCharacteristicsDatabaseSizeDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::discards::mojom::SiteCharacteristicsDatabaseSizeDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::discards::mojom::internal::SiteCharacteristicsDatabaseSize_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->num_rows = Traits::num_rows(input);
    (*output)->on_disk_size_kb = Traits::on_disk_size_kb(input);
  }

  static bool Deserialize(::discards::mojom::internal::SiteCharacteristicsDatabaseSize_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::discards::mojom::SiteCharacteristicsDatabaseSizeDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::discards::mojom::SiteCharacteristicsDatabaseValueDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::discards::mojom::SiteCharacteristicsDatabaseValueDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::discards::mojom::internal::SiteCharacteristicsDatabaseValue_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->last_loaded = Traits::last_loaded(input);
    decltype(Traits::updates_favicon_in_background(input)) in_updates_favicon_in_background = Traits::updates_favicon_in_background(input);
    typename decltype((*output)->updates_favicon_in_background)::BaseType::BufferWriter
        updates_favicon_in_background_writer;
    mojo::internal::Serialize<::discards::mojom::SiteCharacteristicsFeatureDataView>(
        in_updates_favicon_in_background, buffer, &updates_favicon_in_background_writer, context);
    (*output)->updates_favicon_in_background.Set(
        updates_favicon_in_background_writer.is_null() ? nullptr : updates_favicon_in_background_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->updates_favicon_in_background.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null updates_favicon_in_background in SiteCharacteristicsDatabaseValue struct");
    decltype(Traits::updates_title_in_background(input)) in_updates_title_in_background = Traits::updates_title_in_background(input);
    typename decltype((*output)->updates_title_in_background)::BaseType::BufferWriter
        updates_title_in_background_writer;
    mojo::internal::Serialize<::discards::mojom::SiteCharacteristicsFeatureDataView>(
        in_updates_title_in_background, buffer, &updates_title_in_background_writer, context);
    (*output)->updates_title_in_background.Set(
        updates_title_in_background_writer.is_null() ? nullptr : updates_title_in_background_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->updates_title_in_background.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null updates_title_in_background in SiteCharacteristicsDatabaseValue struct");
    decltype(Traits::uses_audio_in_background(input)) in_uses_audio_in_background = Traits::uses_audio_in_background(input);
    typename decltype((*output)->uses_audio_in_background)::BaseType::BufferWriter
        uses_audio_in_background_writer;
    mojo::internal::Serialize<::discards::mojom::SiteCharacteristicsFeatureDataView>(
        in_uses_audio_in_background, buffer, &uses_audio_in_background_writer, context);
    (*output)->uses_audio_in_background.Set(
        uses_audio_in_background_writer.is_null() ? nullptr : uses_audio_in_background_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->uses_audio_in_background.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null uses_audio_in_background in SiteCharacteristicsDatabaseValue struct");
    decltype(Traits::load_time_estimates(input)) in_load_time_estimates = Traits::load_time_estimates(input);
    typename decltype((*output)->load_time_estimates)::BaseType::BufferWriter
        load_time_estimates_writer;
    mojo::internal::Serialize<::discards::mojom::SiteCharacteristicsPerformanceMeasurementDataView>(
        in_load_time_estimates, buffer, &load_time_estimates_writer, context);
    (*output)->load_time_estimates.Set(
        load_time_estimates_writer.is_null() ? nullptr : load_time_estimates_writer.data());
  }

  static bool Deserialize(::discards::mojom::internal::SiteCharacteristicsDatabaseValue_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::discards::mojom::SiteCharacteristicsDatabaseValueDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::discards::mojom::SiteCharacteristicsDatabaseEntryDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::discards::mojom::SiteCharacteristicsDatabaseEntryDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::discards::mojom::internal::SiteCharacteristicsDatabaseEntry_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::origin(input)) in_origin = Traits::origin(input);
    typename decltype((*output)->origin)::BaseType::BufferWriter
        origin_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_origin, buffer, &origin_writer, context);
    (*output)->origin.Set(
        origin_writer.is_null() ? nullptr : origin_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->origin.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null origin in SiteCharacteristicsDatabaseEntry struct");
    (*output)->is_dirty = Traits::is_dirty(input);
    decltype(Traits::value(input)) in_value = Traits::value(input);
    typename decltype((*output)->value)::BaseType::BufferWriter
        value_writer;
    mojo::internal::Serialize<::discards::mojom::SiteCharacteristicsDatabaseValueDataView>(
        in_value, buffer, &value_writer, context);
    (*output)->value.Set(
        value_writer.is_null() ? nullptr : value_writer.data());
  }

  static bool Deserialize(::discards::mojom::internal::SiteCharacteristicsDatabaseEntry_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::discards::mojom::SiteCharacteristicsDatabaseEntryDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::discards::mojom::SiteCharacteristicsDatabaseDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::discards::mojom::SiteCharacteristicsDatabaseDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::discards::mojom::internal::SiteCharacteristicsDatabase_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::db_rows(input)) in_db_rows = Traits::db_rows(input);
    typename decltype((*output)->db_rows)::BaseType::BufferWriter
        db_rows_writer;
    const mojo::internal::ContainerValidateParams db_rows_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::discards::mojom::SiteCharacteristicsDatabaseEntryDataView>>(
        in_db_rows, buffer, &db_rows_writer, &db_rows_validate_params,
        context);
    (*output)->db_rows.Set(
        db_rows_writer.is_null() ? nullptr : db_rows_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->db_rows.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null db_rows in SiteCharacteristicsDatabase struct");
  }

  static bool Deserialize(::discards::mojom::internal::SiteCharacteristicsDatabase_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::discards::mojom::SiteCharacteristicsDatabaseDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace discards {
namespace mojom {







inline void SiteCharacteristicsDatabaseValueDataView::GetUpdatesFaviconInBackgroundDataView(
    SiteCharacteristicsFeatureDataView* output) {
  auto pointer = data_->updates_favicon_in_background.Get();
  *output = SiteCharacteristicsFeatureDataView(pointer, context_);
}
inline void SiteCharacteristicsDatabaseValueDataView::GetUpdatesTitleInBackgroundDataView(
    SiteCharacteristicsFeatureDataView* output) {
  auto pointer = data_->updates_title_in_background.Get();
  *output = SiteCharacteristicsFeatureDataView(pointer, context_);
}
inline void SiteCharacteristicsDatabaseValueDataView::GetUsesAudioInBackgroundDataView(
    SiteCharacteristicsFeatureDataView* output) {
  auto pointer = data_->uses_audio_in_background.Get();
  *output = SiteCharacteristicsFeatureDataView(pointer, context_);
}
inline void SiteCharacteristicsDatabaseValueDataView::GetLoadTimeEstimatesDataView(
    SiteCharacteristicsPerformanceMeasurementDataView* output) {
  auto pointer = data_->load_time_estimates.Get();
  *output = SiteCharacteristicsPerformanceMeasurementDataView(pointer, context_);
}


inline void SiteCharacteristicsDatabaseEntryDataView::GetOriginDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->origin.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void SiteCharacteristicsDatabaseEntryDataView::GetValueDataView(
    SiteCharacteristicsDatabaseValueDataView* output) {
  auto pointer = data_->value.Get();
  *output = SiteCharacteristicsDatabaseValueDataView(pointer, context_);
}


inline void SiteCharacteristicsDatabaseDataView::GetDbRowsDataView(
    mojo::ArrayDataView<SiteCharacteristicsDatabaseEntryDataView>* output) {
  auto pointer = data_->db_rows.Get();
  *output = mojo::ArrayDataView<SiteCharacteristicsDatabaseEntryDataView>(pointer, context_);
}



}  // namespace mojom
}  // namespace discards

#endif  // CHROME_BROWSER_UI_WEBUI_DISCARDS_SITE_DATA_MOJOM_SHARED_H_
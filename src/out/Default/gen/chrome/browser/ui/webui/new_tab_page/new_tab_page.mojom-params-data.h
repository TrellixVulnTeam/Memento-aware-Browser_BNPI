// chrome/browser/ui/webui/new_tab_page/new_tab_page.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_UI_WEBUI_NEW_TAB_PAGE_NEW_TAB_PAGE_MOJOM_PARAMS_DATA_H_
#define CHROME_BROWSER_UI_WEBUI_NEW_TAB_PAGE_NEW_TAB_PAGE_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace new_tab_page {
namespace mojom {
namespace internal {
class  PageHandlerFactory_CreatePageHandler_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandlerFactory_CreatePageHandler_Params_Data));
      new (data()) PageHandlerFactory_CreatePageHandler_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandlerFactory_CreatePageHandler_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandlerFactory_CreatePageHandler_Params_Data>(index_);
    }
    PageHandlerFactory_CreatePageHandler_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data page;
  mojo::internal::Handle_Data handler;
  uint8_t padfinal_[4];

 private:
  PageHandlerFactory_CreatePageHandler_Params_Data();
  ~PageHandlerFactory_CreatePageHandler_Params_Data() = delete;
};
static_assert(sizeof(PageHandlerFactory_CreatePageHandler_Params_Data) == 24,
              "Bad sizeof(PageHandlerFactory_CreatePageHandler_Params_Data)");
class  PageHandler_AddMostVisitedTile_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_AddMostVisitedTile_Params_Data));
      new (data()) PageHandler_AddMostVisitedTile_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_AddMostVisitedTile_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_AddMostVisitedTile_Params_Data>(index_);
    }
    PageHandler_AddMostVisitedTile_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<mojo::internal::String_Data> title;

 private:
  PageHandler_AddMostVisitedTile_Params_Data();
  ~PageHandler_AddMostVisitedTile_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_AddMostVisitedTile_Params_Data) == 24,
              "Bad sizeof(PageHandler_AddMostVisitedTile_Params_Data)");
class  PageHandler_AddMostVisitedTile_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_AddMostVisitedTile_ResponseParams_Data));
      new (data()) PageHandler_AddMostVisitedTile_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_AddMostVisitedTile_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_AddMostVisitedTile_ResponseParams_Data>(index_);
    }
    PageHandler_AddMostVisitedTile_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  PageHandler_AddMostVisitedTile_ResponseParams_Data();
  ~PageHandler_AddMostVisitedTile_ResponseParams_Data() = delete;
};
static_assert(sizeof(PageHandler_AddMostVisitedTile_ResponseParams_Data) == 16,
              "Bad sizeof(PageHandler_AddMostVisitedTile_ResponseParams_Data)");
class  PageHandler_DeleteMostVisitedTile_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_DeleteMostVisitedTile_Params_Data));
      new (data()) PageHandler_DeleteMostVisitedTile_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_DeleteMostVisitedTile_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_DeleteMostVisitedTile_Params_Data>(index_);
    }
    PageHandler_DeleteMostVisitedTile_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;

 private:
  PageHandler_DeleteMostVisitedTile_Params_Data();
  ~PageHandler_DeleteMostVisitedTile_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_DeleteMostVisitedTile_Params_Data) == 16,
              "Bad sizeof(PageHandler_DeleteMostVisitedTile_Params_Data)");
class  PageHandler_ReorderMostVisitedTile_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_ReorderMostVisitedTile_Params_Data));
      new (data()) PageHandler_ReorderMostVisitedTile_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_ReorderMostVisitedTile_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_ReorderMostVisitedTile_Params_Data>(index_);
    }
    PageHandler_ReorderMostVisitedTile_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  uint8_t new_pos;
  uint8_t padfinal_[7];

 private:
  PageHandler_ReorderMostVisitedTile_Params_Data();
  ~PageHandler_ReorderMostVisitedTile_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_ReorderMostVisitedTile_Params_Data) == 24,
              "Bad sizeof(PageHandler_ReorderMostVisitedTile_Params_Data)");
class  PageHandler_RestoreMostVisitedDefaults_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_RestoreMostVisitedDefaults_Params_Data));
      new (data()) PageHandler_RestoreMostVisitedDefaults_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_RestoreMostVisitedDefaults_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_RestoreMostVisitedDefaults_Params_Data>(index_);
    }
    PageHandler_RestoreMostVisitedDefaults_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PageHandler_RestoreMostVisitedDefaults_Params_Data();
  ~PageHandler_RestoreMostVisitedDefaults_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_RestoreMostVisitedDefaults_Params_Data) == 8,
              "Bad sizeof(PageHandler_RestoreMostVisitedDefaults_Params_Data)");
class  PageHandler_SetBackgroundImage_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_SetBackgroundImage_Params_Data));
      new (data()) PageHandler_SetBackgroundImage_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_SetBackgroundImage_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_SetBackgroundImage_Params_Data>(index_);
    }
    PageHandler_SetBackgroundImage_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> attribution_1;
  mojo::internal::Pointer<mojo::internal::String_Data> attribution_2;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> attribution_url;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> image_url;

 private:
  PageHandler_SetBackgroundImage_Params_Data();
  ~PageHandler_SetBackgroundImage_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_SetBackgroundImage_Params_Data) == 40,
              "Bad sizeof(PageHandler_SetBackgroundImage_Params_Data)");
class  PageHandler_SetDailyRefreshCollectionId_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_SetDailyRefreshCollectionId_Params_Data));
      new (data()) PageHandler_SetDailyRefreshCollectionId_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_SetDailyRefreshCollectionId_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_SetDailyRefreshCollectionId_Params_Data>(index_);
    }
    PageHandler_SetDailyRefreshCollectionId_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> collection_id;

 private:
  PageHandler_SetDailyRefreshCollectionId_Params_Data();
  ~PageHandler_SetDailyRefreshCollectionId_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_SetDailyRefreshCollectionId_Params_Data) == 16,
              "Bad sizeof(PageHandler_SetDailyRefreshCollectionId_Params_Data)");
class  PageHandler_SetNoBackgroundImage_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_SetNoBackgroundImage_Params_Data));
      new (data()) PageHandler_SetNoBackgroundImage_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_SetNoBackgroundImage_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_SetNoBackgroundImage_Params_Data>(index_);
    }
    PageHandler_SetNoBackgroundImage_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PageHandler_SetNoBackgroundImage_Params_Data();
  ~PageHandler_SetNoBackgroundImage_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_SetNoBackgroundImage_Params_Data) == 8,
              "Bad sizeof(PageHandler_SetNoBackgroundImage_Params_Data)");
class  PageHandler_SetMostVisitedSettings_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_SetMostVisitedSettings_Params_Data));
      new (data()) PageHandler_SetMostVisitedSettings_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_SetMostVisitedSettings_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_SetMostVisitedSettings_Params_Data>(index_);
    }
    PageHandler_SetMostVisitedSettings_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t customLinksEnabled : 1;
  uint8_t visible : 1;
  uint8_t padfinal_[7];

 private:
  PageHandler_SetMostVisitedSettings_Params_Data();
  ~PageHandler_SetMostVisitedSettings_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_SetMostVisitedSettings_Params_Data) == 16,
              "Bad sizeof(PageHandler_SetMostVisitedSettings_Params_Data)");
class  PageHandler_UndoMostVisitedTileAction_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_UndoMostVisitedTileAction_Params_Data));
      new (data()) PageHandler_UndoMostVisitedTileAction_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_UndoMostVisitedTileAction_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_UndoMostVisitedTileAction_Params_Data>(index_);
    }
    PageHandler_UndoMostVisitedTileAction_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PageHandler_UndoMostVisitedTileAction_Params_Data();
  ~PageHandler_UndoMostVisitedTileAction_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_UndoMostVisitedTileAction_Params_Data) == 8,
              "Bad sizeof(PageHandler_UndoMostVisitedTileAction_Params_Data)");
class  PageHandler_UpdateMostVisitedInfo_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_UpdateMostVisitedInfo_Params_Data));
      new (data()) PageHandler_UpdateMostVisitedInfo_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_UpdateMostVisitedInfo_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_UpdateMostVisitedInfo_Params_Data>(index_);
    }
    PageHandler_UpdateMostVisitedInfo_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PageHandler_UpdateMostVisitedInfo_Params_Data();
  ~PageHandler_UpdateMostVisitedInfo_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_UpdateMostVisitedInfo_Params_Data) == 8,
              "Bad sizeof(PageHandler_UpdateMostVisitedInfo_Params_Data)");
class  PageHandler_UpdateMostVisitedTile_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_UpdateMostVisitedTile_Params_Data));
      new (data()) PageHandler_UpdateMostVisitedTile_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_UpdateMostVisitedTile_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_UpdateMostVisitedTile_Params_Data>(index_);
    }
    PageHandler_UpdateMostVisitedTile_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> new_url;
  mojo::internal::Pointer<mojo::internal::String_Data> new_title;

 private:
  PageHandler_UpdateMostVisitedTile_Params_Data();
  ~PageHandler_UpdateMostVisitedTile_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_UpdateMostVisitedTile_Params_Data) == 32,
              "Bad sizeof(PageHandler_UpdateMostVisitedTile_Params_Data)");
class  PageHandler_UpdateMostVisitedTile_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_UpdateMostVisitedTile_ResponseParams_Data));
      new (data()) PageHandler_UpdateMostVisitedTile_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_UpdateMostVisitedTile_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_UpdateMostVisitedTile_ResponseParams_Data>(index_);
    }
    PageHandler_UpdateMostVisitedTile_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  PageHandler_UpdateMostVisitedTile_ResponseParams_Data();
  ~PageHandler_UpdateMostVisitedTile_ResponseParams_Data() = delete;
};
static_assert(sizeof(PageHandler_UpdateMostVisitedTile_ResponseParams_Data) == 16,
              "Bad sizeof(PageHandler_UpdateMostVisitedTile_ResponseParams_Data)");
class  PageHandler_GetChromeThemes_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_GetChromeThemes_Params_Data));
      new (data()) PageHandler_GetChromeThemes_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_GetChromeThemes_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_GetChromeThemes_Params_Data>(index_);
    }
    PageHandler_GetChromeThemes_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PageHandler_GetChromeThemes_Params_Data();
  ~PageHandler_GetChromeThemes_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_GetChromeThemes_Params_Data) == 8,
              "Bad sizeof(PageHandler_GetChromeThemes_Params_Data)");
class  PageHandler_GetChromeThemes_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_GetChromeThemes_ResponseParams_Data));
      new (data()) PageHandler_GetChromeThemes_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_GetChromeThemes_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_GetChromeThemes_ResponseParams_Data>(index_);
    }
    PageHandler_GetChromeThemes_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::ChromeTheme_Data>>> chromeThemes;

 private:
  PageHandler_GetChromeThemes_ResponseParams_Data();
  ~PageHandler_GetChromeThemes_ResponseParams_Data() = delete;
};
static_assert(sizeof(PageHandler_GetChromeThemes_ResponseParams_Data) == 16,
              "Bad sizeof(PageHandler_GetChromeThemes_ResponseParams_Data)");
class  PageHandler_ApplyDefaultTheme_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_ApplyDefaultTheme_Params_Data));
      new (data()) PageHandler_ApplyDefaultTheme_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_ApplyDefaultTheme_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_ApplyDefaultTheme_Params_Data>(index_);
    }
    PageHandler_ApplyDefaultTheme_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PageHandler_ApplyDefaultTheme_Params_Data();
  ~PageHandler_ApplyDefaultTheme_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_ApplyDefaultTheme_Params_Data) == 8,
              "Bad sizeof(PageHandler_ApplyDefaultTheme_Params_Data)");
class  PageHandler_ApplyAutogeneratedTheme_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_ApplyAutogeneratedTheme_Params_Data));
      new (data()) PageHandler_ApplyAutogeneratedTheme_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_ApplyAutogeneratedTheme_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_ApplyAutogeneratedTheme_Params_Data>(index_);
    }
    PageHandler_ApplyAutogeneratedTheme_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::skia::mojom::internal::SkColor_Data> frame_color;

 private:
  PageHandler_ApplyAutogeneratedTheme_Params_Data();
  ~PageHandler_ApplyAutogeneratedTheme_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_ApplyAutogeneratedTheme_Params_Data) == 16,
              "Bad sizeof(PageHandler_ApplyAutogeneratedTheme_Params_Data)");
class  PageHandler_ApplyChromeTheme_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_ApplyChromeTheme_Params_Data));
      new (data()) PageHandler_ApplyChromeTheme_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_ApplyChromeTheme_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_ApplyChromeTheme_Params_Data>(index_);
    }
    PageHandler_ApplyChromeTheme_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t id;
  uint8_t padfinal_[4];

 private:
  PageHandler_ApplyChromeTheme_Params_Data();
  ~PageHandler_ApplyChromeTheme_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_ApplyChromeTheme_Params_Data) == 16,
              "Bad sizeof(PageHandler_ApplyChromeTheme_Params_Data)");
class  PageHandler_ConfirmThemeChanges_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_ConfirmThemeChanges_Params_Data));
      new (data()) PageHandler_ConfirmThemeChanges_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_ConfirmThemeChanges_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_ConfirmThemeChanges_Params_Data>(index_);
    }
    PageHandler_ConfirmThemeChanges_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PageHandler_ConfirmThemeChanges_Params_Data();
  ~PageHandler_ConfirmThemeChanges_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_ConfirmThemeChanges_Params_Data) == 8,
              "Bad sizeof(PageHandler_ConfirmThemeChanges_Params_Data)");
class  PageHandler_RevertThemeChanges_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_RevertThemeChanges_Params_Data));
      new (data()) PageHandler_RevertThemeChanges_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_RevertThemeChanges_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_RevertThemeChanges_Params_Data>(index_);
    }
    PageHandler_RevertThemeChanges_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PageHandler_RevertThemeChanges_Params_Data();
  ~PageHandler_RevertThemeChanges_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_RevertThemeChanges_Params_Data) == 8,
              "Bad sizeof(PageHandler_RevertThemeChanges_Params_Data)");
class  PageHandler_GetBackgroundCollections_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_GetBackgroundCollections_Params_Data));
      new (data()) PageHandler_GetBackgroundCollections_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_GetBackgroundCollections_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_GetBackgroundCollections_Params_Data>(index_);
    }
    PageHandler_GetBackgroundCollections_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PageHandler_GetBackgroundCollections_Params_Data();
  ~PageHandler_GetBackgroundCollections_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_GetBackgroundCollections_Params_Data) == 8,
              "Bad sizeof(PageHandler_GetBackgroundCollections_Params_Data)");
class  PageHandler_GetBackgroundCollections_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_GetBackgroundCollections_ResponseParams_Data));
      new (data()) PageHandler_GetBackgroundCollections_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_GetBackgroundCollections_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_GetBackgroundCollections_ResponseParams_Data>(index_);
    }
    PageHandler_GetBackgroundCollections_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::BackgroundCollection_Data>>> collections;

 private:
  PageHandler_GetBackgroundCollections_ResponseParams_Data();
  ~PageHandler_GetBackgroundCollections_ResponseParams_Data() = delete;
};
static_assert(sizeof(PageHandler_GetBackgroundCollections_ResponseParams_Data) == 16,
              "Bad sizeof(PageHandler_GetBackgroundCollections_ResponseParams_Data)");
class  PageHandler_GetBackgroundImages_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_GetBackgroundImages_Params_Data));
      new (data()) PageHandler_GetBackgroundImages_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_GetBackgroundImages_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_GetBackgroundImages_Params_Data>(index_);
    }
    PageHandler_GetBackgroundImages_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> collection_id;

 private:
  PageHandler_GetBackgroundImages_Params_Data();
  ~PageHandler_GetBackgroundImages_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_GetBackgroundImages_Params_Data) == 16,
              "Bad sizeof(PageHandler_GetBackgroundImages_Params_Data)");
class  PageHandler_GetBackgroundImages_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_GetBackgroundImages_ResponseParams_Data));
      new (data()) PageHandler_GetBackgroundImages_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_GetBackgroundImages_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_GetBackgroundImages_ResponseParams_Data>(index_);
    }
    PageHandler_GetBackgroundImages_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::CollectionImage_Data>>> images;

 private:
  PageHandler_GetBackgroundImages_ResponseParams_Data();
  ~PageHandler_GetBackgroundImages_ResponseParams_Data() = delete;
};
static_assert(sizeof(PageHandler_GetBackgroundImages_ResponseParams_Data) == 16,
              "Bad sizeof(PageHandler_GetBackgroundImages_ResponseParams_Data)");
class  PageHandler_FocusOmnibox_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_FocusOmnibox_Params_Data));
      new (data()) PageHandler_FocusOmnibox_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_FocusOmnibox_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_FocusOmnibox_Params_Data>(index_);
    }
    PageHandler_FocusOmnibox_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PageHandler_FocusOmnibox_Params_Data();
  ~PageHandler_FocusOmnibox_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_FocusOmnibox_Params_Data) == 8,
              "Bad sizeof(PageHandler_FocusOmnibox_Params_Data)");
class  PageHandler_PasteIntoOmnibox_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_PasteIntoOmnibox_Params_Data));
      new (data()) PageHandler_PasteIntoOmnibox_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_PasteIntoOmnibox_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_PasteIntoOmnibox_Params_Data>(index_);
    }
    PageHandler_PasteIntoOmnibox_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> text;

 private:
  PageHandler_PasteIntoOmnibox_Params_Data();
  ~PageHandler_PasteIntoOmnibox_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_PasteIntoOmnibox_Params_Data) == 16,
              "Bad sizeof(PageHandler_PasteIntoOmnibox_Params_Data)");
class  PageHandler_GetDoodle_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_GetDoodle_Params_Data));
      new (data()) PageHandler_GetDoodle_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_GetDoodle_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_GetDoodle_Params_Data>(index_);
    }
    PageHandler_GetDoodle_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PageHandler_GetDoodle_Params_Data();
  ~PageHandler_GetDoodle_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_GetDoodle_Params_Data) == 8,
              "Bad sizeof(PageHandler_GetDoodle_Params_Data)");
class  PageHandler_GetDoodle_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_GetDoodle_ResponseParams_Data));
      new (data()) PageHandler_GetDoodle_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_GetDoodle_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_GetDoodle_ResponseParams_Data>(index_);
    }
    PageHandler_GetDoodle_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::Doodle_Data> doodle;

 private:
  PageHandler_GetDoodle_ResponseParams_Data();
  ~PageHandler_GetDoodle_ResponseParams_Data() = delete;
};
static_assert(sizeof(PageHandler_GetDoodle_ResponseParams_Data) == 16,
              "Bad sizeof(PageHandler_GetDoodle_ResponseParams_Data)");
class  PageHandler_ChooseLocalCustomBackground_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_ChooseLocalCustomBackground_Params_Data));
      new (data()) PageHandler_ChooseLocalCustomBackground_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_ChooseLocalCustomBackground_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_ChooseLocalCustomBackground_Params_Data>(index_);
    }
    PageHandler_ChooseLocalCustomBackground_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PageHandler_ChooseLocalCustomBackground_Params_Data();
  ~PageHandler_ChooseLocalCustomBackground_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_ChooseLocalCustomBackground_Params_Data) == 8,
              "Bad sizeof(PageHandler_ChooseLocalCustomBackground_Params_Data)");
class  PageHandler_ChooseLocalCustomBackground_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_ChooseLocalCustomBackground_ResponseParams_Data));
      new (data()) PageHandler_ChooseLocalCustomBackground_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_ChooseLocalCustomBackground_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_ChooseLocalCustomBackground_ResponseParams_Data>(index_);
    }
    PageHandler_ChooseLocalCustomBackground_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  PageHandler_ChooseLocalCustomBackground_ResponseParams_Data();
  ~PageHandler_ChooseLocalCustomBackground_ResponseParams_Data() = delete;
};
static_assert(sizeof(PageHandler_ChooseLocalCustomBackground_ResponseParams_Data) == 16,
              "Bad sizeof(PageHandler_ChooseLocalCustomBackground_ResponseParams_Data)");
class  PageHandler_GetOneGoogleBarParts_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_GetOneGoogleBarParts_Params_Data));
      new (data()) PageHandler_GetOneGoogleBarParts_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_GetOneGoogleBarParts_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_GetOneGoogleBarParts_Params_Data>(index_);
    }
    PageHandler_GetOneGoogleBarParts_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> query_params;

 private:
  PageHandler_GetOneGoogleBarParts_Params_Data();
  ~PageHandler_GetOneGoogleBarParts_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_GetOneGoogleBarParts_Params_Data) == 16,
              "Bad sizeof(PageHandler_GetOneGoogleBarParts_Params_Data)");
class  PageHandler_GetOneGoogleBarParts_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_GetOneGoogleBarParts_ResponseParams_Data));
      new (data()) PageHandler_GetOneGoogleBarParts_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_GetOneGoogleBarParts_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_GetOneGoogleBarParts_ResponseParams_Data>(index_);
    }
    PageHandler_GetOneGoogleBarParts_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::OneGoogleBarParts_Data> parts;

 private:
  PageHandler_GetOneGoogleBarParts_ResponseParams_Data();
  ~PageHandler_GetOneGoogleBarParts_ResponseParams_Data() = delete;
};
static_assert(sizeof(PageHandler_GetOneGoogleBarParts_ResponseParams_Data) == 16,
              "Bad sizeof(PageHandler_GetOneGoogleBarParts_ResponseParams_Data)");
class  PageHandler_OnMostVisitedTilesRendered_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_OnMostVisitedTilesRendered_Params_Data));
      new (data()) PageHandler_OnMostVisitedTilesRendered_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_OnMostVisitedTilesRendered_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_OnMostVisitedTilesRendered_Params_Data>(index_);
    }
    PageHandler_OnMostVisitedTilesRendered_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::MostVisitedTile_Data>>> tiles;
  double time;

 private:
  PageHandler_OnMostVisitedTilesRendered_Params_Data();
  ~PageHandler_OnMostVisitedTilesRendered_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_OnMostVisitedTilesRendered_Params_Data) == 24,
              "Bad sizeof(PageHandler_OnMostVisitedTilesRendered_Params_Data)");
class  PageHandler_OnOneGoogleBarRendered_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_OnOneGoogleBarRendered_Params_Data));
      new (data()) PageHandler_OnOneGoogleBarRendered_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_OnOneGoogleBarRendered_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_OnOneGoogleBarRendered_Params_Data>(index_);
    }
    PageHandler_OnOneGoogleBarRendered_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  double time;

 private:
  PageHandler_OnOneGoogleBarRendered_Params_Data();
  ~PageHandler_OnOneGoogleBarRendered_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_OnOneGoogleBarRendered_Params_Data) == 16,
              "Bad sizeof(PageHandler_OnOneGoogleBarRendered_Params_Data)");
class  PageHandler_OnPromoRendered_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_OnPromoRendered_Params_Data));
      new (data()) PageHandler_OnPromoRendered_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_OnPromoRendered_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_OnPromoRendered_Params_Data>(index_);
    }
    PageHandler_OnPromoRendered_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  double time;

 private:
  PageHandler_OnPromoRendered_Params_Data();
  ~PageHandler_OnPromoRendered_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_OnPromoRendered_Params_Data) == 16,
              "Bad sizeof(PageHandler_OnPromoRendered_Params_Data)");
class  PageHandler_OnMostVisitedTileNavigation_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_OnMostVisitedTileNavigation_Params_Data));
      new (data()) PageHandler_OnMostVisitedTileNavigation_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_OnMostVisitedTileNavigation_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_OnMostVisitedTileNavigation_Params_Data>(index_);
    }
    PageHandler_OnMostVisitedTileNavigation_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::MostVisitedTile_Data> tile;
  uint32_t index;
  uint8_t padfinal_[4];

 private:
  PageHandler_OnMostVisitedTileNavigation_Params_Data();
  ~PageHandler_OnMostVisitedTileNavigation_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_OnMostVisitedTileNavigation_Params_Data) == 24,
              "Bad sizeof(PageHandler_OnMostVisitedTileNavigation_Params_Data)");
class  PageHandler_OnCustomizeDialogAction_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_OnCustomizeDialogAction_Params_Data));
      new (data()) PageHandler_OnCustomizeDialogAction_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_OnCustomizeDialogAction_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_OnCustomizeDialogAction_Params_Data>(index_);
    }
    PageHandler_OnCustomizeDialogAction_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t action;
  uint8_t padfinal_[4];

 private:
  PageHandler_OnCustomizeDialogAction_Params_Data();
  ~PageHandler_OnCustomizeDialogAction_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_OnCustomizeDialogAction_Params_Data) == 16,
              "Bad sizeof(PageHandler_OnCustomizeDialogAction_Params_Data)");
class  PageHandler_OnDoodleImageClicked_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_OnDoodleImageClicked_Params_Data));
      new (data()) PageHandler_OnDoodleImageClicked_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_OnDoodleImageClicked_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_OnDoodleImageClicked_Params_Data>(index_);
    }
    PageHandler_OnDoodleImageClicked_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t type;
  uint8_t pad0_[4];
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> log_url;

 private:
  PageHandler_OnDoodleImageClicked_Params_Data();
  ~PageHandler_OnDoodleImageClicked_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_OnDoodleImageClicked_Params_Data) == 24,
              "Bad sizeof(PageHandler_OnDoodleImageClicked_Params_Data)");
class  PageHandler_OnDoodleImageRendered_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_OnDoodleImageRendered_Params_Data));
      new (data()) PageHandler_OnDoodleImageRendered_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_OnDoodleImageRendered_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_OnDoodleImageRendered_Params_Data>(index_);
    }
    PageHandler_OnDoodleImageRendered_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t type;
  uint8_t pad0_[4];
  double time;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> log_url;

 private:
  PageHandler_OnDoodleImageRendered_Params_Data();
  ~PageHandler_OnDoodleImageRendered_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_OnDoodleImageRendered_Params_Data) == 32,
              "Bad sizeof(PageHandler_OnDoodleImageRendered_Params_Data)");
class  PageHandler_OnDoodleImageRendered_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_OnDoodleImageRendered_ResponseParams_Data));
      new (data()) PageHandler_OnDoodleImageRendered_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_OnDoodleImageRendered_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_OnDoodleImageRendered_ResponseParams_Data>(index_);
    }
    PageHandler_OnDoodleImageRendered_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> image_click_params;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> interaction_log_url;
  mojo::internal::Pointer<mojo::internal::String_Data> share_id;

 private:
  PageHandler_OnDoodleImageRendered_ResponseParams_Data();
  ~PageHandler_OnDoodleImageRendered_ResponseParams_Data() = delete;
};
static_assert(sizeof(PageHandler_OnDoodleImageRendered_ResponseParams_Data) == 32,
              "Bad sizeof(PageHandler_OnDoodleImageRendered_ResponseParams_Data)");
class  PageHandler_OnDoodleShared_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_OnDoodleShared_Params_Data));
      new (data()) PageHandler_OnDoodleShared_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_OnDoodleShared_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_OnDoodleShared_Params_Data>(index_);
    }
    PageHandler_OnDoodleShared_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t channel;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> doodle_id;
  mojo::internal::Pointer<mojo::internal::String_Data> share_id;

 private:
  PageHandler_OnDoodleShared_Params_Data();
  ~PageHandler_OnDoodleShared_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_OnDoodleShared_Params_Data) == 32,
              "Bad sizeof(PageHandler_OnDoodleShared_Params_Data)");
class  PageHandler_OnPromoLinkClicked_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_OnPromoLinkClicked_Params_Data));
      new (data()) PageHandler_OnPromoLinkClicked_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_OnPromoLinkClicked_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_OnPromoLinkClicked_Params_Data>(index_);
    }
    PageHandler_OnPromoLinkClicked_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  PageHandler_OnPromoLinkClicked_Params_Data();
  ~PageHandler_OnPromoLinkClicked_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_OnPromoLinkClicked_Params_Data) == 8,
              "Bad sizeof(PageHandler_OnPromoLinkClicked_Params_Data)");
class  PageHandler_OnVoiceSearchAction_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_OnVoiceSearchAction_Params_Data));
      new (data()) PageHandler_OnVoiceSearchAction_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_OnVoiceSearchAction_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_OnVoiceSearchAction_Params_Data>(index_);
    }
    PageHandler_OnVoiceSearchAction_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t action;
  uint8_t padfinal_[4];

 private:
  PageHandler_OnVoiceSearchAction_Params_Data();
  ~PageHandler_OnVoiceSearchAction_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_OnVoiceSearchAction_Params_Data) == 16,
              "Bad sizeof(PageHandler_OnVoiceSearchAction_Params_Data)");
class  PageHandler_OnVoiceSearchError_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_OnVoiceSearchError_Params_Data));
      new (data()) PageHandler_OnVoiceSearchError_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_OnVoiceSearchError_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_OnVoiceSearchError_Params_Data>(index_);
    }
    PageHandler_OnVoiceSearchError_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t padfinal_[4];

 private:
  PageHandler_OnVoiceSearchError_Params_Data();
  ~PageHandler_OnVoiceSearchError_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_OnVoiceSearchError_Params_Data) == 16,
              "Bad sizeof(PageHandler_OnVoiceSearchError_Params_Data)");
class  PageHandler_QueryAutocomplete_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_QueryAutocomplete_Params_Data));
      new (data()) PageHandler_QueryAutocomplete_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_QueryAutocomplete_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_QueryAutocomplete_Params_Data>(index_);
    }
    PageHandler_QueryAutocomplete_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> input;
  uint8_t prevent_inline_autocomplete : 1;
  uint8_t padfinal_[7];

 private:
  PageHandler_QueryAutocomplete_Params_Data();
  ~PageHandler_QueryAutocomplete_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_QueryAutocomplete_Params_Data) == 24,
              "Bad sizeof(PageHandler_QueryAutocomplete_Params_Data)");
class  PageHandler_StopAutocomplete_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_StopAutocomplete_Params_Data));
      new (data()) PageHandler_StopAutocomplete_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_StopAutocomplete_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_StopAutocomplete_Params_Data>(index_);
    }
    PageHandler_StopAutocomplete_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t clear_result : 1;
  uint8_t padfinal_[7];

 private:
  PageHandler_StopAutocomplete_Params_Data();
  ~PageHandler_StopAutocomplete_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_StopAutocomplete_Params_Data) == 16,
              "Bad sizeof(PageHandler_StopAutocomplete_Params_Data)");
class  PageHandler_OpenAutocompleteMatch_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_OpenAutocompleteMatch_Params_Data));
      new (data()) PageHandler_OpenAutocompleteMatch_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_OpenAutocompleteMatch_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_OpenAutocompleteMatch_Params_Data>(index_);
    }
    PageHandler_OpenAutocompleteMatch_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t line;
  uint8_t are_matches_showing : 1;
  uint8_t alt_key : 1;
  uint8_t ctrl_key : 1;
  uint8_t meta_key : 1;
  uint8_t shift_key : 1;
  uint8_t mouse_button;
  uint8_t pad6_[5];
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> time_elapsed_since_last_focus;

 private:
  PageHandler_OpenAutocompleteMatch_Params_Data();
  ~PageHandler_OpenAutocompleteMatch_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_OpenAutocompleteMatch_Params_Data) == 32,
              "Bad sizeof(PageHandler_OpenAutocompleteMatch_Params_Data)");
class  PageHandler_DeleteAutocompleteMatch_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_DeleteAutocompleteMatch_Params_Data));
      new (data()) PageHandler_DeleteAutocompleteMatch_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_DeleteAutocompleteMatch_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_DeleteAutocompleteMatch_Params_Data>(index_);
    }
    PageHandler_DeleteAutocompleteMatch_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t line;
  uint8_t padfinal_[7];

 private:
  PageHandler_DeleteAutocompleteMatch_Params_Data();
  ~PageHandler_DeleteAutocompleteMatch_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_DeleteAutocompleteMatch_Params_Data) == 16,
              "Bad sizeof(PageHandler_DeleteAutocompleteMatch_Params_Data)");
class  PageHandler_ToggleSuggestionGroupIdVisibility_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_ToggleSuggestionGroupIdVisibility_Params_Data));
      new (data()) PageHandler_ToggleSuggestionGroupIdVisibility_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_ToggleSuggestionGroupIdVisibility_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_ToggleSuggestionGroupIdVisibility_Params_Data>(index_);
    }
    PageHandler_ToggleSuggestionGroupIdVisibility_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t suggestion_group_id;
  uint8_t padfinal_[4];

 private:
  PageHandler_ToggleSuggestionGroupIdVisibility_Params_Data();
  ~PageHandler_ToggleSuggestionGroupIdVisibility_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_ToggleSuggestionGroupIdVisibility_Params_Data) == 16,
              "Bad sizeof(PageHandler_ToggleSuggestionGroupIdVisibility_Params_Data)");
class  PageHandler_LogCharTypedToRepaintLatency_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageHandler_LogCharTypedToRepaintLatency_Params_Data));
      new (data()) PageHandler_LogCharTypedToRepaintLatency_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageHandler_LogCharTypedToRepaintLatency_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageHandler_LogCharTypedToRepaintLatency_Params_Data>(index_);
    }
    PageHandler_LogCharTypedToRepaintLatency_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> latency;

 private:
  PageHandler_LogCharTypedToRepaintLatency_Params_Data();
  ~PageHandler_LogCharTypedToRepaintLatency_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_LogCharTypedToRepaintLatency_Params_Data) == 16,
              "Bad sizeof(PageHandler_LogCharTypedToRepaintLatency_Params_Data)");
class  Page_SetMostVisitedInfo_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Page_SetMostVisitedInfo_Params_Data));
      new (data()) Page_SetMostVisitedInfo_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Page_SetMostVisitedInfo_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Page_SetMostVisitedInfo_Params_Data>(index_);
    }
    Page_SetMostVisitedInfo_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::MostVisitedInfo_Data> info;

 private:
  Page_SetMostVisitedInfo_Params_Data();
  ~Page_SetMostVisitedInfo_Params_Data() = delete;
};
static_assert(sizeof(Page_SetMostVisitedInfo_Params_Data) == 16,
              "Bad sizeof(Page_SetMostVisitedInfo_Params_Data)");
class  Page_SetTheme_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Page_SetTheme_Params_Data));
      new (data()) Page_SetTheme_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Page_SetTheme_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Page_SetTheme_Params_Data>(index_);
    }
    Page_SetTheme_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::Theme_Data> theme;

 private:
  Page_SetTheme_Params_Data();
  ~Page_SetTheme_Params_Data() = delete;
};
static_assert(sizeof(Page_SetTheme_Params_Data) == 16,
              "Bad sizeof(Page_SetTheme_Params_Data)");
class  Page_SetFakeboxFocused_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Page_SetFakeboxFocused_Params_Data));
      new (data()) Page_SetFakeboxFocused_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Page_SetFakeboxFocused_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Page_SetFakeboxFocused_Params_Data>(index_);
    }
    Page_SetFakeboxFocused_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t focused : 1;
  uint8_t padfinal_[7];

 private:
  Page_SetFakeboxFocused_Params_Data();
  ~Page_SetFakeboxFocused_Params_Data() = delete;
};
static_assert(sizeof(Page_SetFakeboxFocused_Params_Data) == 16,
              "Bad sizeof(Page_SetFakeboxFocused_Params_Data)");
class  Page_SetFakeboxVisible_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Page_SetFakeboxVisible_Params_Data));
      new (data()) Page_SetFakeboxVisible_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Page_SetFakeboxVisible_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Page_SetFakeboxVisible_Params_Data>(index_);
    }
    Page_SetFakeboxVisible_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t visible : 1;
  uint8_t padfinal_[7];

 private:
  Page_SetFakeboxVisible_Params_Data();
  ~Page_SetFakeboxVisible_Params_Data() = delete;
};
static_assert(sizeof(Page_SetFakeboxVisible_Params_Data) == 16,
              "Bad sizeof(Page_SetFakeboxVisible_Params_Data)");
class  Page_AutocompleteResultChanged_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Page_AutocompleteResultChanged_Params_Data));
      new (data()) Page_AutocompleteResultChanged_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Page_AutocompleteResultChanged_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Page_AutocompleteResultChanged_Params_Data>(index_);
    }
    Page_AutocompleteResultChanged_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::search::mojom::internal::AutocompleteResult_Data> result;

 private:
  Page_AutocompleteResultChanged_Params_Data();
  ~Page_AutocompleteResultChanged_Params_Data() = delete;
};
static_assert(sizeof(Page_AutocompleteResultChanged_Params_Data) == 16,
              "Bad sizeof(Page_AutocompleteResultChanged_Params_Data)");
class  Page_AutocompleteMatchImageAvailable_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Page_AutocompleteMatchImageAvailable_Params_Data));
      new (data()) Page_AutocompleteMatchImageAvailable_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Page_AutocompleteMatchImageAvailable_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Page_AutocompleteMatchImageAvailable_Params_Data>(index_);
    }
    Page_AutocompleteMatchImageAvailable_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t match_index;
  uint8_t pad0_[4];
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<mojo::internal::String_Data> data_url;

 private:
  Page_AutocompleteMatchImageAvailable_Params_Data();
  ~Page_AutocompleteMatchImageAvailable_Params_Data() = delete;
};
static_assert(sizeof(Page_AutocompleteMatchImageAvailable_Params_Data) == 32,
              "Bad sizeof(Page_AutocompleteMatchImageAvailable_Params_Data)");

}  // namespace internal
class PageHandlerFactory_CreatePageHandler_ParamsDataView {
 public:
  PageHandlerFactory_CreatePageHandler_ParamsDataView() {}

  PageHandlerFactory_CreatePageHandler_ParamsDataView(
      internal::PageHandlerFactory_CreatePageHandler_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakePage() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::new_tab_page::mojom::PageInterfaceBase>>(
            &data_->page, &result, context_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeHandler() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::new_tab_page::mojom::PageHandlerInterfaceBase>>(
            &data_->handler, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::PageHandlerFactory_CreatePageHandler_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_AddMostVisitedTile_ParamsDataView {
 public:
  PageHandler_AddMostVisitedTile_ParamsDataView() {}

  PageHandler_AddMostVisitedTile_ParamsDataView(
      internal::PageHandler_AddMostVisitedTile_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUrl(UserType* output) {
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  inline void GetTitleDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTitle(UserType* output) {
    auto* pointer = data_->title.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_AddMostVisitedTile_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_AddMostVisitedTile_ResponseParamsDataView {
 public:
  PageHandler_AddMostVisitedTile_ResponseParamsDataView() {}

  PageHandler_AddMostVisitedTile_ResponseParamsDataView(
      internal::PageHandler_AddMostVisitedTile_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::PageHandler_AddMostVisitedTile_ResponseParams_Data* data_ = nullptr;
};

class PageHandler_DeleteMostVisitedTile_ParamsDataView {
 public:
  PageHandler_DeleteMostVisitedTile_ParamsDataView() {}

  PageHandler_DeleteMostVisitedTile_ParamsDataView(
      internal::PageHandler_DeleteMostVisitedTile_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUrl(UserType* output) {
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_DeleteMostVisitedTile_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_ReorderMostVisitedTile_ParamsDataView {
 public:
  PageHandler_ReorderMostVisitedTile_ParamsDataView() {}

  PageHandler_ReorderMostVisitedTile_ParamsDataView(
      internal::PageHandler_ReorderMostVisitedTile_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUrl(UserType* output) {
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  uint8_t new_pos() const {
    return data_->new_pos;
  }
 private:
  internal::PageHandler_ReorderMostVisitedTile_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_RestoreMostVisitedDefaults_ParamsDataView {
 public:
  PageHandler_RestoreMostVisitedDefaults_ParamsDataView() {}

  PageHandler_RestoreMostVisitedDefaults_ParamsDataView(
      internal::PageHandler_RestoreMostVisitedDefaults_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PageHandler_RestoreMostVisitedDefaults_Params_Data* data_ = nullptr;
};

class PageHandler_SetBackgroundImage_ParamsDataView {
 public:
  PageHandler_SetBackgroundImage_ParamsDataView() {}

  PageHandler_SetBackgroundImage_ParamsDataView(
      internal::PageHandler_SetBackgroundImage_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetAttribution1DataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAttribution1(UserType* output) {
    auto* pointer = data_->attribution_1.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetAttribution2DataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAttribution2(UserType* output) {
    auto* pointer = data_->attribution_2.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetAttributionUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAttributionUrl(UserType* output) {
    auto* pointer = data_->attribution_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  inline void GetImageUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadImageUrl(UserType* output) {
    auto* pointer = data_->image_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_SetBackgroundImage_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_SetDailyRefreshCollectionId_ParamsDataView {
 public:
  PageHandler_SetDailyRefreshCollectionId_ParamsDataView() {}

  PageHandler_SetDailyRefreshCollectionId_ParamsDataView(
      internal::PageHandler_SetDailyRefreshCollectionId_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetCollectionIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadCollectionId(UserType* output) {
    auto* pointer = data_->collection_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_SetDailyRefreshCollectionId_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_SetNoBackgroundImage_ParamsDataView {
 public:
  PageHandler_SetNoBackgroundImage_ParamsDataView() {}

  PageHandler_SetNoBackgroundImage_ParamsDataView(
      internal::PageHandler_SetNoBackgroundImage_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PageHandler_SetNoBackgroundImage_Params_Data* data_ = nullptr;
};

class PageHandler_SetMostVisitedSettings_ParamsDataView {
 public:
  PageHandler_SetMostVisitedSettings_ParamsDataView() {}

  PageHandler_SetMostVisitedSettings_ParamsDataView(
      internal::PageHandler_SetMostVisitedSettings_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool customLinksEnabled() const {
    return data_->customLinksEnabled;
  }
  bool visible() const {
    return data_->visible;
  }
 private:
  internal::PageHandler_SetMostVisitedSettings_Params_Data* data_ = nullptr;
};

class PageHandler_UndoMostVisitedTileAction_ParamsDataView {
 public:
  PageHandler_UndoMostVisitedTileAction_ParamsDataView() {}

  PageHandler_UndoMostVisitedTileAction_ParamsDataView(
      internal::PageHandler_UndoMostVisitedTileAction_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PageHandler_UndoMostVisitedTileAction_Params_Data* data_ = nullptr;
};

class PageHandler_UpdateMostVisitedInfo_ParamsDataView {
 public:
  PageHandler_UpdateMostVisitedInfo_ParamsDataView() {}

  PageHandler_UpdateMostVisitedInfo_ParamsDataView(
      internal::PageHandler_UpdateMostVisitedInfo_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PageHandler_UpdateMostVisitedInfo_Params_Data* data_ = nullptr;
};

class PageHandler_UpdateMostVisitedTile_ParamsDataView {
 public:
  PageHandler_UpdateMostVisitedTile_ParamsDataView() {}

  PageHandler_UpdateMostVisitedTile_ParamsDataView(
      internal::PageHandler_UpdateMostVisitedTile_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUrl(UserType* output) {
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  inline void GetNewUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadNewUrl(UserType* output) {
    auto* pointer = data_->new_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  inline void GetNewTitleDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadNewTitle(UserType* output) {
    auto* pointer = data_->new_title.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_UpdateMostVisitedTile_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_UpdateMostVisitedTile_ResponseParamsDataView {
 public:
  PageHandler_UpdateMostVisitedTile_ResponseParamsDataView() {}

  PageHandler_UpdateMostVisitedTile_ResponseParamsDataView(
      internal::PageHandler_UpdateMostVisitedTile_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::PageHandler_UpdateMostVisitedTile_ResponseParams_Data* data_ = nullptr;
};

class PageHandler_GetChromeThemes_ParamsDataView {
 public:
  PageHandler_GetChromeThemes_ParamsDataView() {}

  PageHandler_GetChromeThemes_ParamsDataView(
      internal::PageHandler_GetChromeThemes_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PageHandler_GetChromeThemes_Params_Data* data_ = nullptr;
};

class PageHandler_GetChromeThemes_ResponseParamsDataView {
 public:
  PageHandler_GetChromeThemes_ResponseParamsDataView() {}

  PageHandler_GetChromeThemes_ResponseParamsDataView(
      internal::PageHandler_GetChromeThemes_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetChromeThemesDataView(
      mojo::ArrayDataView<ChromeThemeDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadChromeThemes(UserType* output) {
    auto* pointer = data_->chromeThemes.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::new_tab_page::mojom::ChromeThemeDataView>>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_GetChromeThemes_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_ApplyDefaultTheme_ParamsDataView {
 public:
  PageHandler_ApplyDefaultTheme_ParamsDataView() {}

  PageHandler_ApplyDefaultTheme_ParamsDataView(
      internal::PageHandler_ApplyDefaultTheme_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PageHandler_ApplyDefaultTheme_Params_Data* data_ = nullptr;
};

class PageHandler_ApplyAutogeneratedTheme_ParamsDataView {
 public:
  PageHandler_ApplyAutogeneratedTheme_ParamsDataView() {}

  PageHandler_ApplyAutogeneratedTheme_ParamsDataView(
      internal::PageHandler_ApplyAutogeneratedTheme_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetFrameColorDataView(
      ::skia::mojom::SkColorDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFrameColor(UserType* output) {
    auto* pointer = data_->frame_color.Get();
    return mojo::internal::Deserialize<::skia::mojom::SkColorDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_ApplyAutogeneratedTheme_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_ApplyChromeTheme_ParamsDataView {
 public:
  PageHandler_ApplyChromeTheme_ParamsDataView() {}

  PageHandler_ApplyChromeTheme_ParamsDataView(
      internal::PageHandler_ApplyChromeTheme_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t id() const {
    return data_->id;
  }
 private:
  internal::PageHandler_ApplyChromeTheme_Params_Data* data_ = nullptr;
};

class PageHandler_ConfirmThemeChanges_ParamsDataView {
 public:
  PageHandler_ConfirmThemeChanges_ParamsDataView() {}

  PageHandler_ConfirmThemeChanges_ParamsDataView(
      internal::PageHandler_ConfirmThemeChanges_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PageHandler_ConfirmThemeChanges_Params_Data* data_ = nullptr;
};

class PageHandler_RevertThemeChanges_ParamsDataView {
 public:
  PageHandler_RevertThemeChanges_ParamsDataView() {}

  PageHandler_RevertThemeChanges_ParamsDataView(
      internal::PageHandler_RevertThemeChanges_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PageHandler_RevertThemeChanges_Params_Data* data_ = nullptr;
};

class PageHandler_GetBackgroundCollections_ParamsDataView {
 public:
  PageHandler_GetBackgroundCollections_ParamsDataView() {}

  PageHandler_GetBackgroundCollections_ParamsDataView(
      internal::PageHandler_GetBackgroundCollections_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PageHandler_GetBackgroundCollections_Params_Data* data_ = nullptr;
};

class PageHandler_GetBackgroundCollections_ResponseParamsDataView {
 public:
  PageHandler_GetBackgroundCollections_ResponseParamsDataView() {}

  PageHandler_GetBackgroundCollections_ResponseParamsDataView(
      internal::PageHandler_GetBackgroundCollections_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetCollectionsDataView(
      mojo::ArrayDataView<BackgroundCollectionDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadCollections(UserType* output) {
    auto* pointer = data_->collections.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::new_tab_page::mojom::BackgroundCollectionDataView>>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_GetBackgroundCollections_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_GetBackgroundImages_ParamsDataView {
 public:
  PageHandler_GetBackgroundImages_ParamsDataView() {}

  PageHandler_GetBackgroundImages_ParamsDataView(
      internal::PageHandler_GetBackgroundImages_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetCollectionIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadCollectionId(UserType* output) {
    auto* pointer = data_->collection_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_GetBackgroundImages_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_GetBackgroundImages_ResponseParamsDataView {
 public:
  PageHandler_GetBackgroundImages_ResponseParamsDataView() {}

  PageHandler_GetBackgroundImages_ResponseParamsDataView(
      internal::PageHandler_GetBackgroundImages_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetImagesDataView(
      mojo::ArrayDataView<CollectionImageDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadImages(UserType* output) {
    auto* pointer = data_->images.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::new_tab_page::mojom::CollectionImageDataView>>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_GetBackgroundImages_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_FocusOmnibox_ParamsDataView {
 public:
  PageHandler_FocusOmnibox_ParamsDataView() {}

  PageHandler_FocusOmnibox_ParamsDataView(
      internal::PageHandler_FocusOmnibox_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PageHandler_FocusOmnibox_Params_Data* data_ = nullptr;
};

class PageHandler_PasteIntoOmnibox_ParamsDataView {
 public:
  PageHandler_PasteIntoOmnibox_ParamsDataView() {}

  PageHandler_PasteIntoOmnibox_ParamsDataView(
      internal::PageHandler_PasteIntoOmnibox_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetTextDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadText(UserType* output) {
    auto* pointer = data_->text.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_PasteIntoOmnibox_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_GetDoodle_ParamsDataView {
 public:
  PageHandler_GetDoodle_ParamsDataView() {}

  PageHandler_GetDoodle_ParamsDataView(
      internal::PageHandler_GetDoodle_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PageHandler_GetDoodle_Params_Data* data_ = nullptr;
};

class PageHandler_GetDoodle_ResponseParamsDataView {
 public:
  PageHandler_GetDoodle_ResponseParamsDataView() {}

  PageHandler_GetDoodle_ResponseParamsDataView(
      internal::PageHandler_GetDoodle_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDoodleDataView(
      DoodleDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDoodle(UserType* output) {
    auto* pointer = data_->doodle.Get();
    return mojo::internal::Deserialize<::new_tab_page::mojom::DoodleDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_GetDoodle_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_ChooseLocalCustomBackground_ParamsDataView {
 public:
  PageHandler_ChooseLocalCustomBackground_ParamsDataView() {}

  PageHandler_ChooseLocalCustomBackground_ParamsDataView(
      internal::PageHandler_ChooseLocalCustomBackground_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PageHandler_ChooseLocalCustomBackground_Params_Data* data_ = nullptr;
};

class PageHandler_ChooseLocalCustomBackground_ResponseParamsDataView {
 public:
  PageHandler_ChooseLocalCustomBackground_ResponseParamsDataView() {}

  PageHandler_ChooseLocalCustomBackground_ResponseParamsDataView(
      internal::PageHandler_ChooseLocalCustomBackground_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::PageHandler_ChooseLocalCustomBackground_ResponseParams_Data* data_ = nullptr;
};

class PageHandler_GetOneGoogleBarParts_ParamsDataView {
 public:
  PageHandler_GetOneGoogleBarParts_ParamsDataView() {}

  PageHandler_GetOneGoogleBarParts_ParamsDataView(
      internal::PageHandler_GetOneGoogleBarParts_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetQueryParamsDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadQueryParams(UserType* output) {
    auto* pointer = data_->query_params.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_GetOneGoogleBarParts_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_GetOneGoogleBarParts_ResponseParamsDataView {
 public:
  PageHandler_GetOneGoogleBarParts_ResponseParamsDataView() {}

  PageHandler_GetOneGoogleBarParts_ResponseParamsDataView(
      internal::PageHandler_GetOneGoogleBarParts_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetPartsDataView(
      OneGoogleBarPartsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadParts(UserType* output) {
    auto* pointer = data_->parts.Get();
    return mojo::internal::Deserialize<::new_tab_page::mojom::OneGoogleBarPartsDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_GetOneGoogleBarParts_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_OnMostVisitedTilesRendered_ParamsDataView {
 public:
  PageHandler_OnMostVisitedTilesRendered_ParamsDataView() {}

  PageHandler_OnMostVisitedTilesRendered_ParamsDataView(
      internal::PageHandler_OnMostVisitedTilesRendered_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetTilesDataView(
      mojo::ArrayDataView<MostVisitedTileDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTiles(UserType* output) {
    auto* pointer = data_->tiles.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::new_tab_page::mojom::MostVisitedTileDataView>>(
        pointer, output, context_);
  }
  double time() const {
    return data_->time;
  }
 private:
  internal::PageHandler_OnMostVisitedTilesRendered_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_OnOneGoogleBarRendered_ParamsDataView {
 public:
  PageHandler_OnOneGoogleBarRendered_ParamsDataView() {}

  PageHandler_OnOneGoogleBarRendered_ParamsDataView(
      internal::PageHandler_OnOneGoogleBarRendered_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  double time() const {
    return data_->time;
  }
 private:
  internal::PageHandler_OnOneGoogleBarRendered_Params_Data* data_ = nullptr;
};

class PageHandler_OnPromoRendered_ParamsDataView {
 public:
  PageHandler_OnPromoRendered_ParamsDataView() {}

  PageHandler_OnPromoRendered_ParamsDataView(
      internal::PageHandler_OnPromoRendered_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  double time() const {
    return data_->time;
  }
 private:
  internal::PageHandler_OnPromoRendered_Params_Data* data_ = nullptr;
};

class PageHandler_OnMostVisitedTileNavigation_ParamsDataView {
 public:
  PageHandler_OnMostVisitedTileNavigation_ParamsDataView() {}

  PageHandler_OnMostVisitedTileNavigation_ParamsDataView(
      internal::PageHandler_OnMostVisitedTileNavigation_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetTileDataView(
      MostVisitedTileDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTile(UserType* output) {
    auto* pointer = data_->tile.Get();
    return mojo::internal::Deserialize<::new_tab_page::mojom::MostVisitedTileDataView>(
        pointer, output, context_);
  }
  uint32_t index() const {
    return data_->index;
  }
 private:
  internal::PageHandler_OnMostVisitedTileNavigation_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_OnCustomizeDialogAction_ParamsDataView {
 public:
  PageHandler_OnCustomizeDialogAction_ParamsDataView() {}

  PageHandler_OnCustomizeDialogAction_ParamsDataView(
      internal::PageHandler_OnCustomizeDialogAction_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAction(UserType* output) const {
    auto data_value = data_->action;
    return mojo::internal::Deserialize<::new_tab_page::mojom::CustomizeDialogAction>(
        data_value, output);
  }

  CustomizeDialogAction action() const {
    return static_cast<CustomizeDialogAction>(data_->action);
  }
 private:
  internal::PageHandler_OnCustomizeDialogAction_Params_Data* data_ = nullptr;
};

class PageHandler_OnDoodleImageClicked_ParamsDataView {
 public:
  PageHandler_OnDoodleImageClicked_ParamsDataView() {}

  PageHandler_OnDoodleImageClicked_ParamsDataView(
      internal::PageHandler_OnDoodleImageClicked_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadType(UserType* output) const {
    auto data_value = data_->type;
    return mojo::internal::Deserialize<::new_tab_page::mojom::DoodleImageType>(
        data_value, output);
  }

  DoodleImageType type() const {
    return static_cast<DoodleImageType>(data_->type);
  }
  inline void GetLogUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadLogUrl(UserType* output) {
    auto* pointer = data_->log_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_OnDoodleImageClicked_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_OnDoodleImageRendered_ParamsDataView {
 public:
  PageHandler_OnDoodleImageRendered_ParamsDataView() {}

  PageHandler_OnDoodleImageRendered_ParamsDataView(
      internal::PageHandler_OnDoodleImageRendered_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadType(UserType* output) const {
    auto data_value = data_->type;
    return mojo::internal::Deserialize<::new_tab_page::mojom::DoodleImageType>(
        data_value, output);
  }

  DoodleImageType type() const {
    return static_cast<DoodleImageType>(data_->type);
  }
  double time() const {
    return data_->time;
  }
  inline void GetLogUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadLogUrl(UserType* output) {
    auto* pointer = data_->log_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_OnDoodleImageRendered_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_OnDoodleImageRendered_ResponseParamsDataView {
 public:
  PageHandler_OnDoodleImageRendered_ResponseParamsDataView() {}

  PageHandler_OnDoodleImageRendered_ResponseParamsDataView(
      internal::PageHandler_OnDoodleImageRendered_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetImageClickParamsDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadImageClickParams(UserType* output) {
    auto* pointer = data_->image_click_params.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetInteractionLogUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadInteractionLogUrl(UserType* output) {
    auto* pointer = data_->interaction_log_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  inline void GetShareIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadShareId(UserType* output) {
    auto* pointer = data_->share_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_OnDoodleImageRendered_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_OnDoodleShared_ParamsDataView {
 public:
  PageHandler_OnDoodleShared_ParamsDataView() {}

  PageHandler_OnDoodleShared_ParamsDataView(
      internal::PageHandler_OnDoodleShared_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadChannel(UserType* output) const {
    auto data_value = data_->channel;
    return mojo::internal::Deserialize<::new_tab_page::mojom::DoodleShareChannel>(
        data_value, output);
  }

  DoodleShareChannel channel() const {
    return static_cast<DoodleShareChannel>(data_->channel);
  }
  inline void GetDoodleIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDoodleId(UserType* output) {
    auto* pointer = data_->doodle_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetShareIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadShareId(UserType* output) {
    auto* pointer = data_->share_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_OnDoodleShared_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_OnPromoLinkClicked_ParamsDataView {
 public:
  PageHandler_OnPromoLinkClicked_ParamsDataView() {}

  PageHandler_OnPromoLinkClicked_ParamsDataView(
      internal::PageHandler_OnPromoLinkClicked_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PageHandler_OnPromoLinkClicked_Params_Data* data_ = nullptr;
};

class PageHandler_OnVoiceSearchAction_ParamsDataView {
 public:
  PageHandler_OnVoiceSearchAction_ParamsDataView() {}

  PageHandler_OnVoiceSearchAction_ParamsDataView(
      internal::PageHandler_OnVoiceSearchAction_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAction(UserType* output) const {
    auto data_value = data_->action;
    return mojo::internal::Deserialize<::new_tab_page::mojom::VoiceSearchAction>(
        data_value, output);
  }

  VoiceSearchAction action() const {
    return static_cast<VoiceSearchAction>(data_->action);
  }
 private:
  internal::PageHandler_OnVoiceSearchAction_Params_Data* data_ = nullptr;
};

class PageHandler_OnVoiceSearchError_ParamsDataView {
 public:
  PageHandler_OnVoiceSearchError_ParamsDataView() {}

  PageHandler_OnVoiceSearchError_ParamsDataView(
      internal::PageHandler_OnVoiceSearchError_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadError(UserType* output) const {
    auto data_value = data_->error;
    return mojo::internal::Deserialize<::new_tab_page::mojom::VoiceSearchError>(
        data_value, output);
  }

  VoiceSearchError error() const {
    return static_cast<VoiceSearchError>(data_->error);
  }
 private:
  internal::PageHandler_OnVoiceSearchError_Params_Data* data_ = nullptr;
};

class PageHandler_QueryAutocomplete_ParamsDataView {
 public:
  PageHandler_QueryAutocomplete_ParamsDataView() {}

  PageHandler_QueryAutocomplete_ParamsDataView(
      internal::PageHandler_QueryAutocomplete_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetInputDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadInput(UserType* output) {
    auto* pointer = data_->input.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
  bool prevent_inline_autocomplete() const {
    return data_->prevent_inline_autocomplete;
  }
 private:
  internal::PageHandler_QueryAutocomplete_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_StopAutocomplete_ParamsDataView {
 public:
  PageHandler_StopAutocomplete_ParamsDataView() {}

  PageHandler_StopAutocomplete_ParamsDataView(
      internal::PageHandler_StopAutocomplete_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool clear_result() const {
    return data_->clear_result;
  }
 private:
  internal::PageHandler_StopAutocomplete_Params_Data* data_ = nullptr;
};

class PageHandler_OpenAutocompleteMatch_ParamsDataView {
 public:
  PageHandler_OpenAutocompleteMatch_ParamsDataView() {}

  PageHandler_OpenAutocompleteMatch_ParamsDataView(
      internal::PageHandler_OpenAutocompleteMatch_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  uint8_t line() const {
    return data_->line;
  }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUrl(UserType* output) {
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  bool are_matches_showing() const {
    return data_->are_matches_showing;
  }
  inline void GetTimeElapsedSinceLastFocusDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTimeElapsedSinceLastFocus(UserType* output) {
    auto* pointer = data_->time_elapsed_since_last_focus.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, context_);
  }
  uint8_t mouse_button() const {
    return data_->mouse_button;
  }
  bool alt_key() const {
    return data_->alt_key;
  }
  bool ctrl_key() const {
    return data_->ctrl_key;
  }
  bool meta_key() const {
    return data_->meta_key;
  }
  bool shift_key() const {
    return data_->shift_key;
  }
 private:
  internal::PageHandler_OpenAutocompleteMatch_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PageHandler_DeleteAutocompleteMatch_ParamsDataView {
 public:
  PageHandler_DeleteAutocompleteMatch_ParamsDataView() {}

  PageHandler_DeleteAutocompleteMatch_ParamsDataView(
      internal::PageHandler_DeleteAutocompleteMatch_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint8_t line() const {
    return data_->line;
  }
 private:
  internal::PageHandler_DeleteAutocompleteMatch_Params_Data* data_ = nullptr;
};

class PageHandler_ToggleSuggestionGroupIdVisibility_ParamsDataView {
 public:
  PageHandler_ToggleSuggestionGroupIdVisibility_ParamsDataView() {}

  PageHandler_ToggleSuggestionGroupIdVisibility_ParamsDataView(
      internal::PageHandler_ToggleSuggestionGroupIdVisibility_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t suggestion_group_id() const {
    return data_->suggestion_group_id;
  }
 private:
  internal::PageHandler_ToggleSuggestionGroupIdVisibility_Params_Data* data_ = nullptr;
};

class PageHandler_LogCharTypedToRepaintLatency_ParamsDataView {
 public:
  PageHandler_LogCharTypedToRepaintLatency_ParamsDataView() {}

  PageHandler_LogCharTypedToRepaintLatency_ParamsDataView(
      internal::PageHandler_LogCharTypedToRepaintLatency_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetLatencyDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadLatency(UserType* output) {
    auto* pointer = data_->latency.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, context_);
  }
 private:
  internal::PageHandler_LogCharTypedToRepaintLatency_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class Page_SetMostVisitedInfo_ParamsDataView {
 public:
  Page_SetMostVisitedInfo_ParamsDataView() {}

  Page_SetMostVisitedInfo_ParamsDataView(
      internal::Page_SetMostVisitedInfo_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetInfoDataView(
      MostVisitedInfoDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadInfo(UserType* output) {
    auto* pointer = data_->info.Get();
    return mojo::internal::Deserialize<::new_tab_page::mojom::MostVisitedInfoDataView>(
        pointer, output, context_);
  }
 private:
  internal::Page_SetMostVisitedInfo_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class Page_SetTheme_ParamsDataView {
 public:
  Page_SetTheme_ParamsDataView() {}

  Page_SetTheme_ParamsDataView(
      internal::Page_SetTheme_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetThemeDataView(
      ThemeDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTheme(UserType* output) {
    auto* pointer = data_->theme.Get();
    return mojo::internal::Deserialize<::new_tab_page::mojom::ThemeDataView>(
        pointer, output, context_);
  }
 private:
  internal::Page_SetTheme_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class Page_SetFakeboxFocused_ParamsDataView {
 public:
  Page_SetFakeboxFocused_ParamsDataView() {}

  Page_SetFakeboxFocused_ParamsDataView(
      internal::Page_SetFakeboxFocused_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool focused() const {
    return data_->focused;
  }
 private:
  internal::Page_SetFakeboxFocused_Params_Data* data_ = nullptr;
};

class Page_SetFakeboxVisible_ParamsDataView {
 public:
  Page_SetFakeboxVisible_ParamsDataView() {}

  Page_SetFakeboxVisible_ParamsDataView(
      internal::Page_SetFakeboxVisible_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool visible() const {
    return data_->visible;
  }
 private:
  internal::Page_SetFakeboxVisible_Params_Data* data_ = nullptr;
};

class Page_AutocompleteResultChanged_ParamsDataView {
 public:
  Page_AutocompleteResultChanged_ParamsDataView() {}

  Page_AutocompleteResultChanged_ParamsDataView(
      internal::Page_AutocompleteResultChanged_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      ::search::mojom::AutocompleteResultDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadResult(UserType* output) {
    auto* pointer = data_->result.Get();
    return mojo::internal::Deserialize<::search::mojom::AutocompleteResultDataView>(
        pointer, output, context_);
  }
 private:
  internal::Page_AutocompleteResultChanged_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class Page_AutocompleteMatchImageAvailable_ParamsDataView {
 public:
  Page_AutocompleteMatchImageAvailable_ParamsDataView() {}

  Page_AutocompleteMatchImageAvailable_ParamsDataView(
      internal::Page_AutocompleteMatchImageAvailable_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  uint32_t match_index() const {
    return data_->match_index;
  }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUrl(UserType* output) {
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  inline void GetDataUrlDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDataUrl(UserType* output) {
    auto* pointer = data_->data_url.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::Page_AutocompleteMatchImageAvailable_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};




inline void PageHandler_AddMostVisitedTile_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void PageHandler_AddMostVisitedTile_ParamsDataView::GetTitleDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->title.Get();
  *output = mojo::StringDataView(pointer, context_);
}




inline void PageHandler_DeleteMostVisitedTile_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}


inline void PageHandler_ReorderMostVisitedTile_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}




inline void PageHandler_SetBackgroundImage_ParamsDataView::GetAttribution1DataView(
    mojo::StringDataView* output) {
  auto pointer = data_->attribution_1.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void PageHandler_SetBackgroundImage_ParamsDataView::GetAttribution2DataView(
    mojo::StringDataView* output) {
  auto pointer = data_->attribution_2.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void PageHandler_SetBackgroundImage_ParamsDataView::GetAttributionUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->attribution_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void PageHandler_SetBackgroundImage_ParamsDataView::GetImageUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->image_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}


inline void PageHandler_SetDailyRefreshCollectionId_ParamsDataView::GetCollectionIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->collection_id.Get();
  *output = mojo::StringDataView(pointer, context_);
}










inline void PageHandler_UpdateMostVisitedTile_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void PageHandler_UpdateMostVisitedTile_ParamsDataView::GetNewUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->new_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void PageHandler_UpdateMostVisitedTile_ParamsDataView::GetNewTitleDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->new_title.Get();
  *output = mojo::StringDataView(pointer, context_);
}






inline void PageHandler_GetChromeThemes_ResponseParamsDataView::GetChromeThemesDataView(
    mojo::ArrayDataView<ChromeThemeDataView>* output) {
  auto pointer = data_->chromeThemes.Get();
  *output = mojo::ArrayDataView<ChromeThemeDataView>(pointer, context_);
}




inline void PageHandler_ApplyAutogeneratedTheme_ParamsDataView::GetFrameColorDataView(
    ::skia::mojom::SkColorDataView* output) {
  auto pointer = data_->frame_color.Get();
  *output = ::skia::mojom::SkColorDataView(pointer, context_);
}










inline void PageHandler_GetBackgroundCollections_ResponseParamsDataView::GetCollectionsDataView(
    mojo::ArrayDataView<BackgroundCollectionDataView>* output) {
  auto pointer = data_->collections.Get();
  *output = mojo::ArrayDataView<BackgroundCollectionDataView>(pointer, context_);
}


inline void PageHandler_GetBackgroundImages_ParamsDataView::GetCollectionIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->collection_id.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void PageHandler_GetBackgroundImages_ResponseParamsDataView::GetImagesDataView(
    mojo::ArrayDataView<CollectionImageDataView>* output) {
  auto pointer = data_->images.Get();
  *output = mojo::ArrayDataView<CollectionImageDataView>(pointer, context_);
}




inline void PageHandler_PasteIntoOmnibox_ParamsDataView::GetTextDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->text.Get();
  *output = mojo::StringDataView(pointer, context_);
}




inline void PageHandler_GetDoodle_ResponseParamsDataView::GetDoodleDataView(
    DoodleDataView* output) {
  auto pointer = data_->doodle.Get();
  *output = DoodleDataView(pointer, context_);
}






inline void PageHandler_GetOneGoogleBarParts_ParamsDataView::GetQueryParamsDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->query_params.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void PageHandler_GetOneGoogleBarParts_ResponseParamsDataView::GetPartsDataView(
    OneGoogleBarPartsDataView* output) {
  auto pointer = data_->parts.Get();
  *output = OneGoogleBarPartsDataView(pointer, context_);
}


inline void PageHandler_OnMostVisitedTilesRendered_ParamsDataView::GetTilesDataView(
    mojo::ArrayDataView<MostVisitedTileDataView>* output) {
  auto pointer = data_->tiles.Get();
  *output = mojo::ArrayDataView<MostVisitedTileDataView>(pointer, context_);
}






inline void PageHandler_OnMostVisitedTileNavigation_ParamsDataView::GetTileDataView(
    MostVisitedTileDataView* output) {
  auto pointer = data_->tile.Get();
  *output = MostVisitedTileDataView(pointer, context_);
}




inline void PageHandler_OnDoodleImageClicked_ParamsDataView::GetLogUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->log_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}


inline void PageHandler_OnDoodleImageRendered_ParamsDataView::GetLogUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->log_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}


inline void PageHandler_OnDoodleImageRendered_ResponseParamsDataView::GetImageClickParamsDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->image_click_params.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void PageHandler_OnDoodleImageRendered_ResponseParamsDataView::GetInteractionLogUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->interaction_log_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void PageHandler_OnDoodleImageRendered_ResponseParamsDataView::GetShareIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->share_id.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void PageHandler_OnDoodleShared_ParamsDataView::GetDoodleIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->doodle_id.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void PageHandler_OnDoodleShared_ParamsDataView::GetShareIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->share_id.Get();
  *output = mojo::StringDataView(pointer, context_);
}








inline void PageHandler_QueryAutocomplete_ParamsDataView::GetInputDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->input.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}




inline void PageHandler_OpenAutocompleteMatch_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void PageHandler_OpenAutocompleteMatch_ParamsDataView::GetTimeElapsedSinceLastFocusDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->time_elapsed_since_last_focus.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, context_);
}






inline void PageHandler_LogCharTypedToRepaintLatency_ParamsDataView::GetLatencyDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->latency.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, context_);
}


inline void Page_SetMostVisitedInfo_ParamsDataView::GetInfoDataView(
    MostVisitedInfoDataView* output) {
  auto pointer = data_->info.Get();
  *output = MostVisitedInfoDataView(pointer, context_);
}


inline void Page_SetTheme_ParamsDataView::GetThemeDataView(
    ThemeDataView* output) {
  auto pointer = data_->theme.Get();
  *output = ThemeDataView(pointer, context_);
}






inline void Page_AutocompleteResultChanged_ParamsDataView::GetResultDataView(
    ::search::mojom::AutocompleteResultDataView* output) {
  auto pointer = data_->result.Get();
  *output = ::search::mojom::AutocompleteResultDataView(pointer, context_);
}


inline void Page_AutocompleteMatchImageAvailable_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void Page_AutocompleteMatchImageAvailable_ParamsDataView::GetDataUrlDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->data_url.Get();
  *output = mojo::StringDataView(pointer, context_);
}

}  // namespace mojom
}  // namespace new_tab_page

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CHROME_BROWSER_UI_WEBUI_NEW_TAB_PAGE_NEW_TAB_PAGE_MOJOM_PARAMS_DATA_H_
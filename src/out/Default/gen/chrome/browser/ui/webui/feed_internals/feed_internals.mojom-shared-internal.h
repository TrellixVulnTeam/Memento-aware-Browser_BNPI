// chrome/browser/ui/webui/feed_internals/feed_internals.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_UI_WEBUI_FEED_INTERNALS_FEED_INTERNALS_MOJOM_SHARED_INTERNAL_H_
#define CHROME_BROWSER_UI_WEBUI_FEED_INTERNALS_FEED_INTERNALS_MOJOM_SHARED_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/mojom/base/time.mojom-shared-internal.h"
#include "url/mojom/url.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace feed_internals {
namespace mojom {
namespace internal {
class Properties_Data;
class UserClassifier_Data;
class LastFetchProperties_Data;
class Suggestion_Data;

#pragma pack(push, 1)
class  Properties_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Properties_Data));
      new (data()) Properties_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Properties_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Properties_Data>(index_);
    }
    Properties_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t is_feed_enabled : 1;
  uint8_t is_feed_visible : 1;
  uint8_t is_feed_allowed : 1;
  uint8_t is_prefetching_enabled : 1;
  uint8_t pad3_[7];
  mojo::internal::Pointer<mojo::internal::String_Data> load_stream_status;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> feed_fetch_url;

 private:
  Properties_Data();
  ~Properties_Data() = delete;
};
static_assert(sizeof(Properties_Data) == 32,
              "Bad sizeof(Properties_Data)");
// Used by Properties::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct Properties_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  Properties_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~Properties_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    Properties_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    Properties_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  UserClassifier_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(UserClassifier_Data));
      new (data()) UserClassifier_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    UserClassifier_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<UserClassifier_Data>(index_);
    }
    UserClassifier_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> user_class_description;
  float avg_hours_between_views;
  float avg_hours_between_uses;

 private:
  UserClassifier_Data();
  ~UserClassifier_Data() = delete;
};
static_assert(sizeof(UserClassifier_Data) == 24,
              "Bad sizeof(UserClassifier_Data)");
// Used by UserClassifier::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct UserClassifier_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  UserClassifier_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~UserClassifier_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    UserClassifier_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    UserClassifier_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  LastFetchProperties_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LastFetchProperties_Data));
      new (data()) LastFetchProperties_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LastFetchProperties_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LastFetchProperties_Data>(index_);
    }
    LastFetchProperties_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t last_fetch_status;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> last_fetch_trigger;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> last_fetch_time;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> refresh_suppress_time;
  mojo::internal::Pointer<mojo::internal::String_Data> last_bless_nonce;

 private:
  LastFetchProperties_Data();
  ~LastFetchProperties_Data() = delete;
};
static_assert(sizeof(LastFetchProperties_Data) == 48,
              "Bad sizeof(LastFetchProperties_Data)");
// Used by LastFetchProperties::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct LastFetchProperties_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  LastFetchProperties_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~LastFetchProperties_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    LastFetchProperties_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    LastFetchProperties_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  Suggestion_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Suggestion_Data));
      new (data()) Suggestion_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Suggestion_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Suggestion_Data>(index_);
    }
    Suggestion_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> title;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<mojo::internal::String_Data> publisher_name;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> image_url;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> favicon_url;

 private:
  Suggestion_Data();
  ~Suggestion_Data() = delete;
};
static_assert(sizeof(Suggestion_Data) == 48,
              "Bad sizeof(Suggestion_Data)");
// Used by Suggestion::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct Suggestion_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  Suggestion_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~Suggestion_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    Suggestion_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    Suggestion_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace feed_internals

#endif  // CHROME_BROWSER_UI_WEBUI_FEED_INTERNALS_FEED_INTERNALS_MOJOM_SHARED_INTERNAL_H_
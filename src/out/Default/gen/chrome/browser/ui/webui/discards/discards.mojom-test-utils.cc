// chrome/browser/ui/webui/discards/discards.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "chrome/browser/ui/webui/discards/discards.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "chrome/browser/resource_coordinator/lifecycle_unit_state.mojom.h"
#include "mojo/public/mojom/base/process_id.mojom.h"
#include "mojo/public/mojom/base/time.mojom.h"
#include "url/mojom/url.mojom.h"


#ifndef CHROME_BROWSER_UI_WEBUI_DISCARDS_DISCARDS_MOJOM_JUMBO_H_
#define CHROME_BROWSER_UI_WEBUI_DISCARDS_DISCARDS_MOJOM_JUMBO_H_
#endif


namespace discards {
namespace mojom {


void DetailsProviderInterceptorForTesting::GetTabDiscardsInfo(GetTabDiscardsInfoCallback callback) {
  GetForwardingInterface()->GetTabDiscardsInfo(std::move(callback));
}
void DetailsProviderInterceptorForTesting::SetAutoDiscardable(int32_t tab_id, bool is_auto_discardable, SetAutoDiscardableCallback callback) {
  GetForwardingInterface()->SetAutoDiscardable(std::move(tab_id), std::move(is_auto_discardable), std::move(callback));
}
void DetailsProviderInterceptorForTesting::DiscardById(int32_t tab_id, DiscardByIdCallback callback) {
  GetForwardingInterface()->DiscardById(std::move(tab_id), std::move(callback));
}
void DetailsProviderInterceptorForTesting::LoadById(int32_t tab_id) {
  GetForwardingInterface()->LoadById(std::move(tab_id));
}
void DetailsProviderInterceptorForTesting::Discard(DiscardCallback callback) {
  GetForwardingInterface()->Discard(std::move(callback));
}
DetailsProviderAsyncWaiter::DetailsProviderAsyncWaiter(
    DetailsProvider* proxy) : proxy_(proxy) {}

DetailsProviderAsyncWaiter::~DetailsProviderAsyncWaiter() = default;

void DetailsProviderAsyncWaiter::GetTabDiscardsInfo(
    std::vector<TabDiscardsInfoPtr>* out_infos) {
  base::RunLoop loop;
  proxy_->GetTabDiscardsInfo(
      base::BindOnce(
          [](base::RunLoop* loop,
             std::vector<TabDiscardsInfoPtr>* out_infos
,
             std::vector<TabDiscardsInfoPtr> infos) {*out_infos = std::move(infos);
            loop->Quit();
          },
          &loop,
          out_infos));
  loop.Run();
}
void DetailsProviderAsyncWaiter::SetAutoDiscardable(
    int32_t tab_id, bool is_auto_discardable) {
  base::RunLoop loop;
  proxy_->SetAutoDiscardable(std::move(tab_id),std::move(is_auto_discardable),
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}
void DetailsProviderAsyncWaiter::DiscardById(
    int32_t tab_id) {
  base::RunLoop loop;
  proxy_->DiscardById(std::move(tab_id),
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}
void DetailsProviderAsyncWaiter::Discard(
    ) {
  base::RunLoop loop;
  proxy_->Discard(
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}



void GraphChangeStreamInterceptorForTesting::FrameCreated(FrameInfoPtr frame) {
  GetForwardingInterface()->FrameCreated(std::move(frame));
}
void GraphChangeStreamInterceptorForTesting::PageCreated(PageInfoPtr pages) {
  GetForwardingInterface()->PageCreated(std::move(pages));
}
void GraphChangeStreamInterceptorForTesting::ProcessCreated(ProcessInfoPtr process) {
  GetForwardingInterface()->ProcessCreated(std::move(process));
}
void GraphChangeStreamInterceptorForTesting::WorkerCreated(WorkerInfoPtr worker) {
  GetForwardingInterface()->WorkerCreated(std::move(worker));
}
void GraphChangeStreamInterceptorForTesting::FrameChanged(FrameInfoPtr frame) {
  GetForwardingInterface()->FrameChanged(std::move(frame));
}
void GraphChangeStreamInterceptorForTesting::PageChanged(PageInfoPtr page) {
  GetForwardingInterface()->PageChanged(std::move(page));
}
void GraphChangeStreamInterceptorForTesting::ProcessChanged(ProcessInfoPtr process) {
  GetForwardingInterface()->ProcessChanged(std::move(process));
}
void GraphChangeStreamInterceptorForTesting::WorkerChanged(WorkerInfoPtr worker) {
  GetForwardingInterface()->WorkerChanged(std::move(worker));
}
void GraphChangeStreamInterceptorForTesting::FavIconDataAvailable(FavIconInfoPtr favicon) {
  GetForwardingInterface()->FavIconDataAvailable(std::move(favicon));
}
void GraphChangeStreamInterceptorForTesting::NodeDeleted(int64_t node_id) {
  GetForwardingInterface()->NodeDeleted(std::move(node_id));
}
GraphChangeStreamAsyncWaiter::GraphChangeStreamAsyncWaiter(
    GraphChangeStream* proxy) : proxy_(proxy) {}

GraphChangeStreamAsyncWaiter::~GraphChangeStreamAsyncWaiter() = default;




void GraphDumpInterceptorForTesting::SubscribeToChanges(::mojo::PendingRemote<GraphChangeStream> change_subscriber) {
  GetForwardingInterface()->SubscribeToChanges(std::move(change_subscriber));
}
void GraphDumpInterceptorForTesting::RequestNodeDescriptions(const std::vector<int64_t>& node_ids, RequestNodeDescriptionsCallback callback) {
  GetForwardingInterface()->RequestNodeDescriptions(std::move(node_ids), std::move(callback));
}
GraphDumpAsyncWaiter::GraphDumpAsyncWaiter(
    GraphDump* proxy) : proxy_(proxy) {}

GraphDumpAsyncWaiter::~GraphDumpAsyncWaiter() = default;

void GraphDumpAsyncWaiter::RequestNodeDescriptions(
    const std::vector<int64_t>& node_ids, base::flat_map<int64_t, std::string>* out_node_descriptions_json) {
  base::RunLoop loop;
  proxy_->RequestNodeDescriptions(std::move(node_ids),
      base::BindOnce(
          [](base::RunLoop* loop,
             base::flat_map<int64_t, std::string>* out_node_descriptions_json
,
             const base::flat_map<int64_t, std::string>& node_descriptions_json) {*out_node_descriptions_json = std::move(node_descriptions_json);
            loop->Quit();
          },
          &loop,
          out_node_descriptions_json));
  loop.Run();
}





}  // namespace mojom
}  // namespace discards

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
// chrome/browser/ui/webui/discards/site_data.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "chrome/browser/ui/webui/discards/site_data.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"


#ifndef CHROME_BROWSER_UI_WEBUI_DISCARDS_SITE_DATA_MOJOM_JUMBO_H_
#define CHROME_BROWSER_UI_WEBUI_DISCARDS_SITE_DATA_MOJOM_JUMBO_H_
#endif


namespace discards {
namespace mojom {


void SiteDataProviderInterceptorForTesting::GetSiteCharacteristicsDatabase(const std::vector<std::string>& explicitly_requested_origins, GetSiteCharacteristicsDatabaseCallback callback) {
  GetForwardingInterface()->GetSiteCharacteristicsDatabase(std::move(explicitly_requested_origins), std::move(callback));
}
void SiteDataProviderInterceptorForTesting::GetSiteCharacteristicsDatabaseSize(GetSiteCharacteristicsDatabaseSizeCallback callback) {
  GetForwardingInterface()->GetSiteCharacteristicsDatabaseSize(std::move(callback));
}
SiteDataProviderAsyncWaiter::SiteDataProviderAsyncWaiter(
    SiteDataProvider* proxy) : proxy_(proxy) {}

SiteDataProviderAsyncWaiter::~SiteDataProviderAsyncWaiter() = default;

void SiteDataProviderAsyncWaiter::GetSiteCharacteristicsDatabase(
    const std::vector<std::string>& explicitly_requested_origins, SiteCharacteristicsDatabasePtr* out_result) {
  base::RunLoop loop;
  proxy_->GetSiteCharacteristicsDatabase(std::move(explicitly_requested_origins),
      base::BindOnce(
          [](base::RunLoop* loop,
             SiteCharacteristicsDatabasePtr* out_result
,
             SiteCharacteristicsDatabasePtr result) {*out_result = std::move(result);
            loop->Quit();
          },
          &loop,
          out_result));
  loop.Run();
}
void SiteDataProviderAsyncWaiter::GetSiteCharacteristicsDatabaseSize(
    SiteCharacteristicsDatabaseSizePtr* out_db_size) {
  base::RunLoop loop;
  proxy_->GetSiteCharacteristicsDatabaseSize(
      base::BindOnce(
          [](base::RunLoop* loop,
             SiteCharacteristicsDatabaseSizePtr* out_db_size
,
             SiteCharacteristicsDatabaseSizePtr db_size) {*out_db_size = std::move(db_size);
            loop->Quit();
          },
          &loop,
          out_db_size));
  loop.Run();
}





}  // namespace mojom
}  // namespace discards

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
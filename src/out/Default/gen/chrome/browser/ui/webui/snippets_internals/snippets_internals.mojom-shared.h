// chrome/browser/ui/webui/snippets_internals/snippets_internals.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_UI_WEBUI_SNIPPETS_INTERNALS_SNIPPETS_INTERNALS_MOJOM_SHARED_H_
#define CHROME_BROWSER_UI_WEBUI_SNIPPETS_INTERNALS_SNIPPETS_INTERNALS_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "chrome/browser/ui/webui/snippets_internals/snippets_internals.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace snippets_internals {
namespace mojom {
class SuggestionCategoryDataView;

class SuggestionItemDataView;



}  // namespace mojom
}  // namespace snippets_internals

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::snippets_internals::mojom::SuggestionCategoryDataView> {
  using Data = ::snippets_internals::mojom::internal::SuggestionCategory_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::snippets_internals::mojom::SuggestionItemDataView> {
  using Data = ::snippets_internals::mojom::internal::SuggestionItem_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace snippets_internals {
namespace mojom {
// Interface base classes. They are used for type safety check.
class PageHandlerFactoryInterfaceBase {};

using PageHandlerFactoryPtrDataView =
    mojo::InterfacePtrDataView<PageHandlerFactoryInterfaceBase>;
using PageHandlerFactoryRequestDataView =
    mojo::InterfaceRequestDataView<PageHandlerFactoryInterfaceBase>;
using PageHandlerFactoryAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<PageHandlerFactoryInterfaceBase>;
using PageHandlerFactoryAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<PageHandlerFactoryInterfaceBase>;
class PageHandlerInterfaceBase {};

using PageHandlerPtrDataView =
    mojo::InterfacePtrDataView<PageHandlerInterfaceBase>;
using PageHandlerRequestDataView =
    mojo::InterfaceRequestDataView<PageHandlerInterfaceBase>;
using PageHandlerAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<PageHandlerInterfaceBase>;
using PageHandlerAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<PageHandlerInterfaceBase>;
class PageInterfaceBase {};

using PagePtrDataView =
    mojo::InterfacePtrDataView<PageInterfaceBase>;
using PageRequestDataView =
    mojo::InterfaceRequestDataView<PageInterfaceBase>;
using PageAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<PageInterfaceBase>;
using PageAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<PageInterfaceBase>;
class SuggestionCategoryDataView {
 public:
  SuggestionCategoryDataView() {}

  SuggestionCategoryDataView(
      internal::SuggestionCategory_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int64_t categoryId() const {
    return data_->categoryId;
  }
  inline void GetCategoryTitleDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadCategoryTitle(UserType* output) {
    auto* pointer = data_->categoryTitle.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetStatusDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadStatus(UserType* output) {
    auto* pointer = data_->status.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetSuggestionsDataView(
      mojo::ArrayDataView<SuggestionItemDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSuggestions(UserType* output) {
    auto* pointer = data_->suggestions.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::snippets_internals::mojom::SuggestionItemDataView>>(
        pointer, output, context_);
  }
  inline void GetDismissedSuggestionsDataView(
      mojo::ArrayDataView<SuggestionItemDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDismissedSuggestions(UserType* output) {
    auto* pointer = data_->dismissedSuggestions.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::snippets_internals::mojom::SuggestionItemDataView>>(
        pointer, output, context_);
  }
 private:
  internal::SuggestionCategory_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class SuggestionItemDataView {
 public:
  SuggestionItemDataView() {}

  SuggestionItemDataView(
      internal::SuggestionItem_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetSuggestionTitleDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSuggestionTitle(UserType* output) {
    auto* pointer = data_->suggestionTitle.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetSuggestionIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSuggestionId(UserType* output) {
    auto* pointer = data_->suggestionId.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetSuggestionIdWithinCategoryDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSuggestionIdWithinCategory(UserType* output) {
    auto* pointer = data_->suggestionIdWithinCategory.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetUrlDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUrl(UserType* output) {
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetFaviconUrlDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFaviconUrl(UserType* output) {
    auto* pointer = data_->faviconUrl.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetSnippetDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSnippet(UserType* output) {
    auto* pointer = data_->snippet.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetPublishDateDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPublishDate(UserType* output) {
    auto* pointer = data_->publishDate.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetPublisherNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPublisherName(UserType* output) {
    auto* pointer = data_->publisherName.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  float score() const {
    return data_->score;
  }
 private:
  internal::SuggestionItem_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};



}  // namespace mojom
}  // namespace snippets_internals

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::snippets_internals::mojom::SuggestionCategoryDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::snippets_internals::mojom::SuggestionCategoryDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::snippets_internals::mojom::internal::SuggestionCategory_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->categoryId = Traits::categoryId(input);
    decltype(Traits::categoryTitle(input)) in_categoryTitle = Traits::categoryTitle(input);
    typename decltype((*output)->categoryTitle)::BaseType::BufferWriter
        categoryTitle_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_categoryTitle, buffer, &categoryTitle_writer, context);
    (*output)->categoryTitle.Set(
        categoryTitle_writer.is_null() ? nullptr : categoryTitle_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->categoryTitle.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null categoryTitle in SuggestionCategory struct");
    decltype(Traits::status(input)) in_status = Traits::status(input);
    typename decltype((*output)->status)::BaseType::BufferWriter
        status_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_status, buffer, &status_writer, context);
    (*output)->status.Set(
        status_writer.is_null() ? nullptr : status_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->status.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null status in SuggestionCategory struct");
    decltype(Traits::suggestions(input)) in_suggestions = Traits::suggestions(input);
    typename decltype((*output)->suggestions)::BaseType::BufferWriter
        suggestions_writer;
    const mojo::internal::ContainerValidateParams suggestions_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::snippets_internals::mojom::SuggestionItemDataView>>(
        in_suggestions, buffer, &suggestions_writer, &suggestions_validate_params,
        context);
    (*output)->suggestions.Set(
        suggestions_writer.is_null() ? nullptr : suggestions_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->suggestions.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null suggestions in SuggestionCategory struct");
    decltype(Traits::dismissedSuggestions(input)) in_dismissedSuggestions = Traits::dismissedSuggestions(input);
    typename decltype((*output)->dismissedSuggestions)::BaseType::BufferWriter
        dismissedSuggestions_writer;
    const mojo::internal::ContainerValidateParams dismissedSuggestions_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::snippets_internals::mojom::SuggestionItemDataView>>(
        in_dismissedSuggestions, buffer, &dismissedSuggestions_writer, &dismissedSuggestions_validate_params,
        context);
    (*output)->dismissedSuggestions.Set(
        dismissedSuggestions_writer.is_null() ? nullptr : dismissedSuggestions_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->dismissedSuggestions.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null dismissedSuggestions in SuggestionCategory struct");
  }

  static bool Deserialize(::snippets_internals::mojom::internal::SuggestionCategory_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::snippets_internals::mojom::SuggestionCategoryDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::snippets_internals::mojom::SuggestionItemDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::snippets_internals::mojom::SuggestionItemDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::snippets_internals::mojom::internal::SuggestionItem_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::suggestionTitle(input)) in_suggestionTitle = Traits::suggestionTitle(input);
    typename decltype((*output)->suggestionTitle)::BaseType::BufferWriter
        suggestionTitle_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_suggestionTitle, buffer, &suggestionTitle_writer, context);
    (*output)->suggestionTitle.Set(
        suggestionTitle_writer.is_null() ? nullptr : suggestionTitle_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->suggestionTitle.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null suggestionTitle in SuggestionItem struct");
    decltype(Traits::suggestionId(input)) in_suggestionId = Traits::suggestionId(input);
    typename decltype((*output)->suggestionId)::BaseType::BufferWriter
        suggestionId_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_suggestionId, buffer, &suggestionId_writer, context);
    (*output)->suggestionId.Set(
        suggestionId_writer.is_null() ? nullptr : suggestionId_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->suggestionId.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null suggestionId in SuggestionItem struct");
    decltype(Traits::suggestionIdWithinCategory(input)) in_suggestionIdWithinCategory = Traits::suggestionIdWithinCategory(input);
    typename decltype((*output)->suggestionIdWithinCategory)::BaseType::BufferWriter
        suggestionIdWithinCategory_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_suggestionIdWithinCategory, buffer, &suggestionIdWithinCategory_writer, context);
    (*output)->suggestionIdWithinCategory.Set(
        suggestionIdWithinCategory_writer.is_null() ? nullptr : suggestionIdWithinCategory_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->suggestionIdWithinCategory.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null suggestionIdWithinCategory in SuggestionItem struct");
    decltype(Traits::url(input)) in_url = Traits::url(input);
    typename decltype((*output)->url)::BaseType::BufferWriter
        url_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_url, buffer, &url_writer, context);
    (*output)->url.Set(
        url_writer.is_null() ? nullptr : url_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null url in SuggestionItem struct");
    decltype(Traits::faviconUrl(input)) in_faviconUrl = Traits::faviconUrl(input);
    typename decltype((*output)->faviconUrl)::BaseType::BufferWriter
        faviconUrl_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_faviconUrl, buffer, &faviconUrl_writer, context);
    (*output)->faviconUrl.Set(
        faviconUrl_writer.is_null() ? nullptr : faviconUrl_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->faviconUrl.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null faviconUrl in SuggestionItem struct");
    decltype(Traits::snippet(input)) in_snippet = Traits::snippet(input);
    typename decltype((*output)->snippet)::BaseType::BufferWriter
        snippet_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_snippet, buffer, &snippet_writer, context);
    (*output)->snippet.Set(
        snippet_writer.is_null() ? nullptr : snippet_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->snippet.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null snippet in SuggestionItem struct");
    decltype(Traits::publishDate(input)) in_publishDate = Traits::publishDate(input);
    typename decltype((*output)->publishDate)::BaseType::BufferWriter
        publishDate_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_publishDate, buffer, &publishDate_writer, context);
    (*output)->publishDate.Set(
        publishDate_writer.is_null() ? nullptr : publishDate_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->publishDate.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null publishDate in SuggestionItem struct");
    decltype(Traits::publisherName(input)) in_publisherName = Traits::publisherName(input);
    typename decltype((*output)->publisherName)::BaseType::BufferWriter
        publisherName_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_publisherName, buffer, &publisherName_writer, context);
    (*output)->publisherName.Set(
        publisherName_writer.is_null() ? nullptr : publisherName_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->publisherName.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null publisherName in SuggestionItem struct");
    (*output)->score = Traits::score(input);
  }

  static bool Deserialize(::snippets_internals::mojom::internal::SuggestionItem_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::snippets_internals::mojom::SuggestionItemDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace snippets_internals {
namespace mojom {

inline void SuggestionCategoryDataView::GetCategoryTitleDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->categoryTitle.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void SuggestionCategoryDataView::GetStatusDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->status.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void SuggestionCategoryDataView::GetSuggestionsDataView(
    mojo::ArrayDataView<SuggestionItemDataView>* output) {
  auto pointer = data_->suggestions.Get();
  *output = mojo::ArrayDataView<SuggestionItemDataView>(pointer, context_);
}
inline void SuggestionCategoryDataView::GetDismissedSuggestionsDataView(
    mojo::ArrayDataView<SuggestionItemDataView>* output) {
  auto pointer = data_->dismissedSuggestions.Get();
  *output = mojo::ArrayDataView<SuggestionItemDataView>(pointer, context_);
}


inline void SuggestionItemDataView::GetSuggestionTitleDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->suggestionTitle.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void SuggestionItemDataView::GetSuggestionIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->suggestionId.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void SuggestionItemDataView::GetSuggestionIdWithinCategoryDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->suggestionIdWithinCategory.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void SuggestionItemDataView::GetUrlDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->url.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void SuggestionItemDataView::GetFaviconUrlDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->faviconUrl.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void SuggestionItemDataView::GetSnippetDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->snippet.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void SuggestionItemDataView::GetPublishDateDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->publishDate.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void SuggestionItemDataView::GetPublisherNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->publisherName.Get();
  *output = mojo::StringDataView(pointer, context_);
}



}  // namespace mojom
}  // namespace snippets_internals

#endif  // CHROME_BROWSER_UI_WEBUI_SNIPPETS_INTERNALS_SNIPPETS_INTERNALS_MOJOM_SHARED_H_
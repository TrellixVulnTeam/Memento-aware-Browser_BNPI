// chrome/browser/ui/webui/feed_internals/feed_internals.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "chrome/browser/ui/webui/feed_internals/feed_internals.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/mojom/base/time.mojom.h"
#include "url/mojom/url.mojom.h"


#ifndef CHROME_BROWSER_UI_WEBUI_FEED_INTERNALS_FEED_INTERNALS_MOJOM_JUMBO_H_
#define CHROME_BROWSER_UI_WEBUI_FEED_INTERNALS_FEED_INTERNALS_MOJOM_JUMBO_H_
#endif


namespace feed_internals {
namespace mojom {


void PageHandlerInterceptorForTesting::GetGeneralProperties(GetGeneralPropertiesCallback callback) {
  GetForwardingInterface()->GetGeneralProperties(std::move(callback));
}
void PageHandlerInterceptorForTesting::GetUserClassifierProperties(GetUserClassifierPropertiesCallback callback) {
  GetForwardingInterface()->GetUserClassifierProperties(std::move(callback));
}
void PageHandlerInterceptorForTesting::ClearUserClassifierProperties() {
  GetForwardingInterface()->ClearUserClassifierProperties();
}
void PageHandlerInterceptorForTesting::GetLastFetchProperties(GetLastFetchPropertiesCallback callback) {
  GetForwardingInterface()->GetLastFetchProperties(std::move(callback));
}
void PageHandlerInterceptorForTesting::ClearCachedDataAndRefreshFeed() {
  GetForwardingInterface()->ClearCachedDataAndRefreshFeed();
}
void PageHandlerInterceptorForTesting::RefreshFeed() {
  GetForwardingInterface()->RefreshFeed();
}
void PageHandlerInterceptorForTesting::GetCurrentContent(GetCurrentContentCallback callback) {
  GetForwardingInterface()->GetCurrentContent(std::move(callback));
}
void PageHandlerInterceptorForTesting::GetFeedProcessScopeDump(GetFeedProcessScopeDumpCallback callback) {
  GetForwardingInterface()->GetFeedProcessScopeDump(std::move(callback));
}
void PageHandlerInterceptorForTesting::GetFeedHistograms(GetFeedHistogramsCallback callback) {
  GetForwardingInterface()->GetFeedHistograms(std::move(callback));
}
void PageHandlerInterceptorForTesting::OverrideFeedHost(const ::GURL& host) {
  GetForwardingInterface()->OverrideFeedHost(std::move(host));
}
PageHandlerAsyncWaiter::PageHandlerAsyncWaiter(
    PageHandler* proxy) : proxy_(proxy) {}

PageHandlerAsyncWaiter::~PageHandlerAsyncWaiter() = default;

void PageHandlerAsyncWaiter::GetGeneralProperties(
    PropertiesPtr* out_properties) {
  base::RunLoop loop;
  proxy_->GetGeneralProperties(
      base::BindOnce(
          [](base::RunLoop* loop,
             PropertiesPtr* out_properties
,
             PropertiesPtr properties) {*out_properties = std::move(properties);
            loop->Quit();
          },
          &loop,
          out_properties));
  loop.Run();
}
void PageHandlerAsyncWaiter::GetUserClassifierProperties(
    UserClassifierPtr* out_properties) {
  base::RunLoop loop;
  proxy_->GetUserClassifierProperties(
      base::BindOnce(
          [](base::RunLoop* loop,
             UserClassifierPtr* out_properties
,
             UserClassifierPtr properties) {*out_properties = std::move(properties);
            loop->Quit();
          },
          &loop,
          out_properties));
  loop.Run();
}
void PageHandlerAsyncWaiter::GetLastFetchProperties(
    LastFetchPropertiesPtr* out_properties) {
  base::RunLoop loop;
  proxy_->GetLastFetchProperties(
      base::BindOnce(
          [](base::RunLoop* loop,
             LastFetchPropertiesPtr* out_properties
,
             LastFetchPropertiesPtr properties) {*out_properties = std::move(properties);
            loop->Quit();
          },
          &loop,
          out_properties));
  loop.Run();
}
void PageHandlerAsyncWaiter::GetCurrentContent(
    std::vector<SuggestionPtr>* out_suggestions) {
  base::RunLoop loop;
  proxy_->GetCurrentContent(
      base::BindOnce(
          [](base::RunLoop* loop,
             std::vector<SuggestionPtr>* out_suggestions
,
             std::vector<SuggestionPtr> suggestions) {*out_suggestions = std::move(suggestions);
            loop->Quit();
          },
          &loop,
          out_suggestions));
  loop.Run();
}
void PageHandlerAsyncWaiter::GetFeedProcessScopeDump(
    std::string* out_dump) {
  base::RunLoop loop;
  proxy_->GetFeedProcessScopeDump(
      base::BindOnce(
          [](base::RunLoop* loop,
             std::string* out_dump
,
             const std::string& dump) {*out_dump = std::move(dump);
            loop->Quit();
          },
          &loop,
          out_dump));
  loop.Run();
}
void PageHandlerAsyncWaiter::GetFeedHistograms(
    std::string* out_log) {
  base::RunLoop loop;
  proxy_->GetFeedHistograms(
      base::BindOnce(
          [](base::RunLoop* loop,
             std::string* out_log
,
             const std::string& log) {*out_log = std::move(log);
            loop->Quit();
          },
          &loop,
          out_log));
  loop.Run();
}





}  // namespace mojom
}  // namespace feed_internals

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
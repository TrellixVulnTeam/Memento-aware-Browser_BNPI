// chrome/browser/ui/webui/discards/discards.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "chrome/browser/ui/webui/discards/discards.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "chrome/browser/ui/webui/discards/discards.mojom-params-data.h"
#include "chrome/browser/ui/webui/discards/discards.mojom-shared-message-ids.h"

#include "chrome/browser/ui/webui/discards/discards.mojom-import-headers.h"


#ifndef CHROME_BROWSER_UI_WEBUI_DISCARDS_DISCARDS_MOJOM_JUMBO_H_
#define CHROME_BROWSER_UI_WEBUI_DISCARDS_DISCARDS_MOJOM_JUMBO_H_
#endif
namespace discards {
namespace mojom {
TabDiscardsInfo::TabDiscardsInfo()
    : tab_url(),
      title(),
      visibility(),
      loading_state(),
      state(),
      can_discard(),
      cannot_discard_reasons(),
      discard_count(),
      discard_reason(),
      utility_rank(),
      last_active_seconds(),
      id(),
      is_auto_discardable(),
      has_reactivation_score(),
      reactivation_score(),
      site_engagement_score(),
      has_focus(),
      state_change_time() {}

TabDiscardsInfo::TabDiscardsInfo(
    const std::string& tab_url_in,
    const std::string& title_in,
    LifecycleUnitVisibility visibility_in,
    ::mojom::LifecycleUnitLoadingState loading_state_in,
    ::mojom::LifecycleUnitState state_in,
    bool can_discard_in,
    std::vector<std::string> cannot_discard_reasons_in,
    int32_t discard_count_in,
    ::mojom::LifecycleUnitDiscardReason discard_reason_in,
    int32_t utility_rank_in,
    int32_t last_active_seconds_in,
    int32_t id_in,
    bool is_auto_discardable_in,
    bool has_reactivation_score_in,
    double reactivation_score_in,
    double site_engagement_score_in,
    bool has_focus_in,
    ::base::TimeDelta state_change_time_in)
    : tab_url(std::move(tab_url_in)),
      title(std::move(title_in)),
      visibility(std::move(visibility_in)),
      loading_state(std::move(loading_state_in)),
      state(std::move(state_in)),
      can_discard(std::move(can_discard_in)),
      cannot_discard_reasons(std::move(cannot_discard_reasons_in)),
      discard_count(std::move(discard_count_in)),
      discard_reason(std::move(discard_reason_in)),
      utility_rank(std::move(utility_rank_in)),
      last_active_seconds(std::move(last_active_seconds_in)),
      id(std::move(id_in)),
      is_auto_discardable(std::move(is_auto_discardable_in)),
      has_reactivation_score(std::move(has_reactivation_score_in)),
      reactivation_score(std::move(reactivation_score_in)),
      site_engagement_score(std::move(site_engagement_score_in)),
      has_focus(std::move(has_focus_in)),
      state_change_time(std::move(state_change_time_in)) {}

TabDiscardsInfo::~TabDiscardsInfo() = default;

bool TabDiscardsInfo::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
PageInfo::PageInfo()
    : id(),
      main_frame_url(),
      opener_frame_id(),
      description_json() {}

PageInfo::PageInfo(
    int64_t id_in,
    const ::GURL& main_frame_url_in,
    int64_t opener_frame_id_in,
    const std::string& description_json_in)
    : id(std::move(id_in)),
      main_frame_url(std::move(main_frame_url_in)),
      opener_frame_id(std::move(opener_frame_id_in)),
      description_json(std::move(description_json_in)) {}

PageInfo::~PageInfo() = default;

bool PageInfo::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
FrameInfo::FrameInfo()
    : id(),
      url(),
      page_id(),
      parent_frame_id(),
      process_id(),
      description_json() {}

FrameInfo::FrameInfo(
    int64_t id_in,
    const ::GURL& url_in,
    int64_t page_id_in,
    int64_t parent_frame_id_in,
    int64_t process_id_in,
    const std::string& description_json_in)
    : id(std::move(id_in)),
      url(std::move(url_in)),
      page_id(std::move(page_id_in)),
      parent_frame_id(std::move(parent_frame_id_in)),
      process_id(std::move(process_id_in)),
      description_json(std::move(description_json_in)) {}

FrameInfo::~FrameInfo() = default;

bool FrameInfo::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
ProcessInfo::ProcessInfo()
    : id(),
      pid(),
      private_footprint_kb(),
      description_json() {}

ProcessInfo::ProcessInfo(
    int64_t id_in,
    ::base::ProcessId pid_in,
    uint64_t private_footprint_kb_in,
    const std::string& description_json_in)
    : id(std::move(id_in)),
      pid(std::move(pid_in)),
      private_footprint_kb(std::move(private_footprint_kb_in)),
      description_json(std::move(description_json_in)) {}

ProcessInfo::~ProcessInfo() = default;

bool ProcessInfo::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
WorkerInfo::WorkerInfo()
    : id(),
      url(),
      process_id(),
      client_frame_ids(),
      client_worker_ids(),
      child_worker_ids(),
      description_json() {}

WorkerInfo::WorkerInfo(
    int64_t id_in,
    const ::GURL& url_in,
    int64_t process_id_in,
    std::vector<int64_t> client_frame_ids_in,
    std::vector<int64_t> client_worker_ids_in,
    std::vector<int64_t> child_worker_ids_in,
    const std::string& description_json_in)
    : id(std::move(id_in)),
      url(std::move(url_in)),
      process_id(std::move(process_id_in)),
      client_frame_ids(std::move(client_frame_ids_in)),
      client_worker_ids(std::move(client_worker_ids_in)),
      child_worker_ids(std::move(child_worker_ids_in)),
      description_json(std::move(description_json_in)) {}

WorkerInfo::~WorkerInfo() = default;

bool WorkerInfo::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
FavIconInfo::FavIconInfo()
    : node_id(),
      icon_data() {}

FavIconInfo::FavIconInfo(
    int64_t node_id_in,
    const std::string& icon_data_in)
    : node_id(std::move(node_id_in)),
      icon_data(std::move(icon_data_in)) {}

FavIconInfo::~FavIconInfo() = default;
size_t FavIconInfo::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->node_id);
  seed = mojo::internal::Hash(seed, this->icon_data);
  return seed;
}

bool FavIconInfo::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char DetailsProvider::Name_[] = "discards.mojom.DetailsProvider";

class DetailsProvider_GetTabDiscardsInfo_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  DetailsProvider_GetTabDiscardsInfo_ForwardToCallback(
      DetailsProvider::GetTabDiscardsInfoCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  DetailsProvider::GetTabDiscardsInfoCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(DetailsProvider_GetTabDiscardsInfo_ForwardToCallback);
};

class DetailsProvider_SetAutoDiscardable_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  DetailsProvider_SetAutoDiscardable_ForwardToCallback(
      DetailsProvider::SetAutoDiscardableCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  DetailsProvider::SetAutoDiscardableCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(DetailsProvider_SetAutoDiscardable_ForwardToCallback);
};

class DetailsProvider_DiscardById_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  DetailsProvider_DiscardById_ForwardToCallback(
      DetailsProvider::DiscardByIdCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  DetailsProvider::DiscardByIdCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(DetailsProvider_DiscardById_ForwardToCallback);
};

class DetailsProvider_Discard_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  DetailsProvider_Discard_ForwardToCallback(
      DetailsProvider::DiscardCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  DetailsProvider::DiscardCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(DetailsProvider_Discard_ForwardToCallback);
};

DetailsProviderProxy::DetailsProviderProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void DetailsProviderProxy::GetTabDiscardsInfo(
    GetTabDiscardsInfoCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "discards::mojom::DetailsProvider::GetTabDiscardsInfo");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDetailsProvider_GetTabDiscardsInfo_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::discards::mojom::internal::DetailsProvider_GetTabDiscardsInfo_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DetailsProvider::Name_);
  message.set_method_name("GetTabDiscardsInfo");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new DetailsProvider_GetTabDiscardsInfo_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}

void DetailsProviderProxy::SetAutoDiscardable(
    int32_t in_tab_id, bool in_is_auto_discardable, SetAutoDiscardableCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "discards::mojom::DetailsProvider::SetAutoDiscardable");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDetailsProvider_SetAutoDiscardable_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::discards::mojom::internal::DetailsProvider_SetAutoDiscardable_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  params->tab_id = in_tab_id;
  params->is_auto_discardable = in_is_auto_discardable;
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DetailsProvider::Name_);
  message.set_method_name("SetAutoDiscardable");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new DetailsProvider_SetAutoDiscardable_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}

void DetailsProviderProxy::DiscardById(
    int32_t in_tab_id, DiscardByIdCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "discards::mojom::DetailsProvider::DiscardById");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDetailsProvider_DiscardById_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::discards::mojom::internal::DetailsProvider_DiscardById_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  params->tab_id = in_tab_id;
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DetailsProvider::Name_);
  message.set_method_name("DiscardById");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new DetailsProvider_DiscardById_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}

void DetailsProviderProxy::LoadById(
    int32_t in_tab_id) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "discards::mojom::DetailsProvider::LoadById");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDetailsProvider_LoadById_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::discards::mojom::internal::DetailsProvider_LoadById_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  params->tab_id = in_tab_id;
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DetailsProvider::Name_);
  message.set_method_name("LoadById");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void DetailsProviderProxy::Discard(
    DiscardCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "discards::mojom::DetailsProvider::Discard");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDetailsProvider_Discard_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::discards::mojom::internal::DetailsProvider_Discard_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DetailsProvider::Name_);
  message.set_method_name("Discard");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new DetailsProvider_Discard_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
class DetailsProvider_GetTabDiscardsInfo_ProxyToResponder {
 public:
  static DetailsProvider::GetTabDiscardsInfoCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<DetailsProvider_GetTabDiscardsInfo_ProxyToResponder> proxy(
        new DetailsProvider_GetTabDiscardsInfo_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&DetailsProvider_GetTabDiscardsInfo_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~DetailsProvider_GetTabDiscardsInfo_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  DetailsProvider_GetTabDiscardsInfo_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "DetailsProvider::GetTabDiscardsInfoCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      std::vector<TabDiscardsInfoPtr> in_infos);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(DetailsProvider_GetTabDiscardsInfo_ProxyToResponder);
};

bool DetailsProvider_GetTabDiscardsInfo_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "discards::mojom::DetailsProvider::GetTabDiscardsInfoCallback",
               "message", message->name());
#endif
  mojo::internal::MessageDispatchContext dispatch_context(message);

  DCHECK(message->is_serialized());
  internal::DetailsProvider_GetTabDiscardsInfo_ResponseParams_Data* params =
      reinterpret_cast<
          internal::DetailsProvider_GetTabDiscardsInfo_ResponseParams_Data*>(
              message->mutable_payload());
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  
  bool success = true;
  std::vector<TabDiscardsInfoPtr> p_infos{};
  DetailsProvider_GetTabDiscardsInfo_ResponseParamsDataView input_data_view(params, &serialization_context);
  
  if (success && !input_data_view.ReadInfos(&p_infos))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        DetailsProvider::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_infos));
  return true;
}

void DetailsProvider_GetTabDiscardsInfo_ProxyToResponder::Run(
    std::vector<TabDiscardsInfoPtr> in_infos) {
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDetailsProvider_GetTabDiscardsInfo_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::discards::mojom::internal::DetailsProvider_GetTabDiscardsInfo_ResponseParams_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->infos)::BaseType::BufferWriter
      infos_writer;
  const mojo::internal::ContainerValidateParams infos_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::discards::mojom::TabDiscardsInfoDataView>>(
      in_infos, buffer, &infos_writer, &infos_validate_params,
      &serialization_context);
  params->infos.Set(
      infos_writer.is_null() ? nullptr : infos_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->infos.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null infos in ");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "(Impl)discards::mojom::DetailsProvider::GetTabDiscardsInfoCallback",
               "message", message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DetailsProvider::Name_);
  message.set_method_name("GetTabDiscardsInfo");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class DetailsProvider_SetAutoDiscardable_ProxyToResponder {
 public:
  static DetailsProvider::SetAutoDiscardableCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<DetailsProvider_SetAutoDiscardable_ProxyToResponder> proxy(
        new DetailsProvider_SetAutoDiscardable_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&DetailsProvider_SetAutoDiscardable_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~DetailsProvider_SetAutoDiscardable_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  DetailsProvider_SetAutoDiscardable_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "DetailsProvider::SetAutoDiscardableCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      );

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(DetailsProvider_SetAutoDiscardable_ProxyToResponder);
};

bool DetailsProvider_SetAutoDiscardable_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "discards::mojom::DetailsProvider::SetAutoDiscardableCallback",
               "message", message->name());
#endif
  mojo::internal::MessageDispatchContext dispatch_context(message);

  DCHECK(message->is_serialized());
  internal::DetailsProvider_SetAutoDiscardable_ResponseParams_Data* params =
      reinterpret_cast<
          internal::DetailsProvider_SetAutoDiscardable_ResponseParams_Data*>(
              message->mutable_payload());
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  
  bool success = true;
  DetailsProvider_SetAutoDiscardable_ResponseParamsDataView input_data_view(params, &serialization_context);
  
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        DetailsProvider::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run();
  return true;
}

void DetailsProvider_SetAutoDiscardable_ProxyToResponder::Run(
    ) {
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDetailsProvider_SetAutoDiscardable_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::discards::mojom::internal::DetailsProvider_SetAutoDiscardable_ResponseParams_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "(Impl)discards::mojom::DetailsProvider::SetAutoDiscardableCallback",
               "message", message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DetailsProvider::Name_);
  message.set_method_name("SetAutoDiscardable");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class DetailsProvider_DiscardById_ProxyToResponder {
 public:
  static DetailsProvider::DiscardByIdCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<DetailsProvider_DiscardById_ProxyToResponder> proxy(
        new DetailsProvider_DiscardById_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&DetailsProvider_DiscardById_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~DetailsProvider_DiscardById_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  DetailsProvider_DiscardById_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "DetailsProvider::DiscardByIdCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      );

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(DetailsProvider_DiscardById_ProxyToResponder);
};

bool DetailsProvider_DiscardById_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "discards::mojom::DetailsProvider::DiscardByIdCallback",
               "message", message->name());
#endif
  mojo::internal::MessageDispatchContext dispatch_context(message);

  DCHECK(message->is_serialized());
  internal::DetailsProvider_DiscardById_ResponseParams_Data* params =
      reinterpret_cast<
          internal::DetailsProvider_DiscardById_ResponseParams_Data*>(
              message->mutable_payload());
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  
  bool success = true;
  DetailsProvider_DiscardById_ResponseParamsDataView input_data_view(params, &serialization_context);
  
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        DetailsProvider::Name_, 2, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run();
  return true;
}

void DetailsProvider_DiscardById_ProxyToResponder::Run(
    ) {
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDetailsProvider_DiscardById_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::discards::mojom::internal::DetailsProvider_DiscardById_ResponseParams_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "(Impl)discards::mojom::DetailsProvider::DiscardByIdCallback",
               "message", message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DetailsProvider::Name_);
  message.set_method_name("DiscardById");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class DetailsProvider_Discard_ProxyToResponder {
 public:
  static DetailsProvider::DiscardCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<DetailsProvider_Discard_ProxyToResponder> proxy(
        new DetailsProvider_Discard_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&DetailsProvider_Discard_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~DetailsProvider_Discard_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  DetailsProvider_Discard_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "DetailsProvider::DiscardCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      );

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(DetailsProvider_Discard_ProxyToResponder);
};

bool DetailsProvider_Discard_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "discards::mojom::DetailsProvider::DiscardCallback",
               "message", message->name());
#endif
  mojo::internal::MessageDispatchContext dispatch_context(message);

  DCHECK(message->is_serialized());
  internal::DetailsProvider_Discard_ResponseParams_Data* params =
      reinterpret_cast<
          internal::DetailsProvider_Discard_ResponseParams_Data*>(
              message->mutable_payload());
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  
  bool success = true;
  DetailsProvider_Discard_ResponseParamsDataView input_data_view(params, &serialization_context);
  
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        DetailsProvider::Name_, 4, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run();
  return true;
}

void DetailsProvider_Discard_ProxyToResponder::Run(
    ) {
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDetailsProvider_Discard_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::discards::mojom::internal::DetailsProvider_Discard_ResponseParams_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "(Impl)discards::mojom::DetailsProvider::DiscardCallback",
               "message", message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DetailsProvider::Name_);
  message.set_method_name("Discard");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool DetailsProviderStubDispatch::Accept(
    DetailsProvider* impl,
    mojo::Message* message) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  switch (message->header()->name) {
    case internal::kDetailsProvider_GetTabDiscardsInfo_Name: {
      break;
    }
    case internal::kDetailsProvider_SetAutoDiscardable_Name: {
      break;
    }
    case internal::kDetailsProvider_DiscardById_Name: {
      break;
    }
    case internal::kDetailsProvider_LoadById_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)discards::mojom::DetailsProvider::LoadById",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)discards::mojom::DetailsProvider::LoadById");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::DetailsProvider_LoadById_Params_Data* params =
          reinterpret_cast<internal::DetailsProvider_LoadById_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      int32_t p_tab_id{};
      DetailsProvider_LoadById_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success)
        p_tab_id = input_data_view.tab_id();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DetailsProvider::Name_, 3, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->LoadById(
std::move(p_tab_id));
      return true;
    }
    case internal::kDetailsProvider_Discard_Name: {
      break;
    }
  }
  return false;
}

// static
bool DetailsProviderStubDispatch::AcceptWithResponder(
    DetailsProvider* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kDetailsProvider_GetTabDiscardsInfo_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)discards::mojom::DetailsProvider::GetTabDiscardsInfo",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)discards::mojom::DetailsProvider::GetTabDiscardsInfo");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::DetailsProvider_GetTabDiscardsInfo_Params_Data* params =
          reinterpret_cast<
              internal::DetailsProvider_GetTabDiscardsInfo_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      DetailsProvider_GetTabDiscardsInfo_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DetailsProvider::Name_, 0, false);
        return false;
      }
      DetailsProvider::GetTabDiscardsInfoCallback callback =
          DetailsProvider_GetTabDiscardsInfo_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetTabDiscardsInfo(std::move(callback));
      return true;
    }
    case internal::kDetailsProvider_SetAutoDiscardable_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)discards::mojom::DetailsProvider::SetAutoDiscardable",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)discards::mojom::DetailsProvider::SetAutoDiscardable");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::DetailsProvider_SetAutoDiscardable_Params_Data* params =
          reinterpret_cast<
              internal::DetailsProvider_SetAutoDiscardable_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      int32_t p_tab_id{};
      bool p_is_auto_discardable{};
      DetailsProvider_SetAutoDiscardable_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success)
        p_tab_id = input_data_view.tab_id();
      if (success)
        p_is_auto_discardable = input_data_view.is_auto_discardable();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DetailsProvider::Name_, 1, false);
        return false;
      }
      DetailsProvider::SetAutoDiscardableCallback callback =
          DetailsProvider_SetAutoDiscardable_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetAutoDiscardable(
std::move(p_tab_id), 
std::move(p_is_auto_discardable), std::move(callback));
      return true;
    }
    case internal::kDetailsProvider_DiscardById_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)discards::mojom::DetailsProvider::DiscardById",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)discards::mojom::DetailsProvider::DiscardById");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::DetailsProvider_DiscardById_Params_Data* params =
          reinterpret_cast<
              internal::DetailsProvider_DiscardById_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      int32_t p_tab_id{};
      DetailsProvider_DiscardById_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success)
        p_tab_id = input_data_view.tab_id();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DetailsProvider::Name_, 2, false);
        return false;
      }
      DetailsProvider::DiscardByIdCallback callback =
          DetailsProvider_DiscardById_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->DiscardById(
std::move(p_tab_id), std::move(callback));
      return true;
    }
    case internal::kDetailsProvider_LoadById_Name: {
      break;
    }
    case internal::kDetailsProvider_Discard_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)discards::mojom::DetailsProvider::Discard",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)discards::mojom::DetailsProvider::Discard");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::DetailsProvider_Discard_Params_Data* params =
          reinterpret_cast<
              internal::DetailsProvider_Discard_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      DetailsProvider_Discard_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DetailsProvider::Name_, 4, false);
        return false;
      }
      DetailsProvider::DiscardCallback callback =
          DetailsProvider_Discard_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Discard(std::move(callback));
      return true;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kDetailsProviderValidationInfo[] = {
    {internal::kDetailsProvider_GetTabDiscardsInfo_Name,
     {&internal::DetailsProvider_GetTabDiscardsInfo_Params_Data::Validate,
      &internal::DetailsProvider_GetTabDiscardsInfo_ResponseParams_Data::Validate}},
    {internal::kDetailsProvider_SetAutoDiscardable_Name,
     {&internal::DetailsProvider_SetAutoDiscardable_Params_Data::Validate,
      &internal::DetailsProvider_SetAutoDiscardable_ResponseParams_Data::Validate}},
    {internal::kDetailsProvider_DiscardById_Name,
     {&internal::DetailsProvider_DiscardById_Params_Data::Validate,
      &internal::DetailsProvider_DiscardById_ResponseParams_Data::Validate}},
    {internal::kDetailsProvider_LoadById_Name,
     {&internal::DetailsProvider_LoadById_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kDetailsProvider_Discard_Name,
     {&internal::DetailsProvider_Discard_Params_Data::Validate,
      &internal::DetailsProvider_Discard_ResponseParams_Data::Validate}},
};

bool DetailsProviderRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::discards::mojom::DetailsProvider::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kDetailsProviderValidationInfo);
}

bool DetailsProviderResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::discards::mojom::DetailsProvider::Name_;
  return mojo::internal::ValidateResponseGeneric(message, name, kDetailsProviderValidationInfo);

}
const char GraphChangeStream::Name_[] = "discards.mojom.GraphChangeStream";

GraphChangeStreamProxy::GraphChangeStreamProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void GraphChangeStreamProxy::FrameCreated(
    FrameInfoPtr in_frame) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "discards::mojom::GraphChangeStream::FrameCreated");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kGraphChangeStream_FrameCreated_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::discards::mojom::internal::GraphChangeStream_FrameCreated_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->frame)::BaseType::BufferWriter
      frame_writer;
  mojo::internal::Serialize<::discards::mojom::FrameInfoDataView>(
      in_frame, buffer, &frame_writer, &serialization_context);
  params->frame.Set(
      frame_writer.is_null() ? nullptr : frame_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->frame.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null frame in GraphChangeStream.FrameCreated request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GraphChangeStream::Name_);
  message.set_method_name("FrameCreated");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void GraphChangeStreamProxy::PageCreated(
    PageInfoPtr in_pages) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "discards::mojom::GraphChangeStream::PageCreated");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kGraphChangeStream_PageCreated_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::discards::mojom::internal::GraphChangeStream_PageCreated_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->pages)::BaseType::BufferWriter
      pages_writer;
  mojo::internal::Serialize<::discards::mojom::PageInfoDataView>(
      in_pages, buffer, &pages_writer, &serialization_context);
  params->pages.Set(
      pages_writer.is_null() ? nullptr : pages_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->pages.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null pages in GraphChangeStream.PageCreated request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GraphChangeStream::Name_);
  message.set_method_name("PageCreated");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void GraphChangeStreamProxy::ProcessCreated(
    ProcessInfoPtr in_process) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "discards::mojom::GraphChangeStream::ProcessCreated");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kGraphChangeStream_ProcessCreated_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::discards::mojom::internal::GraphChangeStream_ProcessCreated_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->process)::BaseType::BufferWriter
      process_writer;
  mojo::internal::Serialize<::discards::mojom::ProcessInfoDataView>(
      in_process, buffer, &process_writer, &serialization_context);
  params->process.Set(
      process_writer.is_null() ? nullptr : process_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->process.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null process in GraphChangeStream.ProcessCreated request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GraphChangeStream::Name_);
  message.set_method_name("ProcessCreated");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void GraphChangeStreamProxy::WorkerCreated(
    WorkerInfoPtr in_worker) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "discards::mojom::GraphChangeStream::WorkerCreated");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kGraphChangeStream_WorkerCreated_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::discards::mojom::internal::GraphChangeStream_WorkerCreated_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->worker)::BaseType::BufferWriter
      worker_writer;
  mojo::internal::Serialize<::discards::mojom::WorkerInfoDataView>(
      in_worker, buffer, &worker_writer, &serialization_context);
  params->worker.Set(
      worker_writer.is_null() ? nullptr : worker_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->worker.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null worker in GraphChangeStream.WorkerCreated request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GraphChangeStream::Name_);
  message.set_method_name("WorkerCreated");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void GraphChangeStreamProxy::FrameChanged(
    FrameInfoPtr in_frame) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "discards::mojom::GraphChangeStream::FrameChanged");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kGraphChangeStream_FrameChanged_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::discards::mojom::internal::GraphChangeStream_FrameChanged_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->frame)::BaseType::BufferWriter
      frame_writer;
  mojo::internal::Serialize<::discards::mojom::FrameInfoDataView>(
      in_frame, buffer, &frame_writer, &serialization_context);
  params->frame.Set(
      frame_writer.is_null() ? nullptr : frame_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->frame.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null frame in GraphChangeStream.FrameChanged request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GraphChangeStream::Name_);
  message.set_method_name("FrameChanged");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void GraphChangeStreamProxy::PageChanged(
    PageInfoPtr in_page) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "discards::mojom::GraphChangeStream::PageChanged");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kGraphChangeStream_PageChanged_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::discards::mojom::internal::GraphChangeStream_PageChanged_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->page)::BaseType::BufferWriter
      page_writer;
  mojo::internal::Serialize<::discards::mojom::PageInfoDataView>(
      in_page, buffer, &page_writer, &serialization_context);
  params->page.Set(
      page_writer.is_null() ? nullptr : page_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->page.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null page in GraphChangeStream.PageChanged request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GraphChangeStream::Name_);
  message.set_method_name("PageChanged");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void GraphChangeStreamProxy::ProcessChanged(
    ProcessInfoPtr in_process) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "discards::mojom::GraphChangeStream::ProcessChanged");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kGraphChangeStream_ProcessChanged_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::discards::mojom::internal::GraphChangeStream_ProcessChanged_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->process)::BaseType::BufferWriter
      process_writer;
  mojo::internal::Serialize<::discards::mojom::ProcessInfoDataView>(
      in_process, buffer, &process_writer, &serialization_context);
  params->process.Set(
      process_writer.is_null() ? nullptr : process_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->process.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null process in GraphChangeStream.ProcessChanged request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GraphChangeStream::Name_);
  message.set_method_name("ProcessChanged");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void GraphChangeStreamProxy::WorkerChanged(
    WorkerInfoPtr in_worker) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "discards::mojom::GraphChangeStream::WorkerChanged");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kGraphChangeStream_WorkerChanged_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::discards::mojom::internal::GraphChangeStream_WorkerChanged_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->worker)::BaseType::BufferWriter
      worker_writer;
  mojo::internal::Serialize<::discards::mojom::WorkerInfoDataView>(
      in_worker, buffer, &worker_writer, &serialization_context);
  params->worker.Set(
      worker_writer.is_null() ? nullptr : worker_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->worker.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null worker in GraphChangeStream.WorkerChanged request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GraphChangeStream::Name_);
  message.set_method_name("WorkerChanged");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void GraphChangeStreamProxy::FavIconDataAvailable(
    FavIconInfoPtr in_favicon) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "discards::mojom::GraphChangeStream::FavIconDataAvailable");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kGraphChangeStream_FavIconDataAvailable_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::discards::mojom::internal::GraphChangeStream_FavIconDataAvailable_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->favicon)::BaseType::BufferWriter
      favicon_writer;
  mojo::internal::Serialize<::discards::mojom::FavIconInfoDataView>(
      in_favicon, buffer, &favicon_writer, &serialization_context);
  params->favicon.Set(
      favicon_writer.is_null() ? nullptr : favicon_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->favicon.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null favicon in GraphChangeStream.FavIconDataAvailable request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GraphChangeStream::Name_);
  message.set_method_name("FavIconDataAvailable");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void GraphChangeStreamProxy::NodeDeleted(
    int64_t in_node_id) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "discards::mojom::GraphChangeStream::NodeDeleted");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kGraphChangeStream_NodeDeleted_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::discards::mojom::internal::GraphChangeStream_NodeDeleted_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  params->node_id = in_node_id;
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GraphChangeStream::Name_);
  message.set_method_name("NodeDeleted");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool GraphChangeStreamStubDispatch::Accept(
    GraphChangeStream* impl,
    mojo::Message* message) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  switch (message->header()->name) {
    case internal::kGraphChangeStream_FrameCreated_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)discards::mojom::GraphChangeStream::FrameCreated",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)discards::mojom::GraphChangeStream::FrameCreated");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::GraphChangeStream_FrameCreated_Params_Data* params =
          reinterpret_cast<internal::GraphChangeStream_FrameCreated_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      FrameInfoPtr p_frame{};
      GraphChangeStream_FrameCreated_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadFrame(&p_frame))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GraphChangeStream::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->FrameCreated(
std::move(p_frame));
      return true;
    }
    case internal::kGraphChangeStream_PageCreated_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)discards::mojom::GraphChangeStream::PageCreated",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)discards::mojom::GraphChangeStream::PageCreated");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::GraphChangeStream_PageCreated_Params_Data* params =
          reinterpret_cast<internal::GraphChangeStream_PageCreated_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      PageInfoPtr p_pages{};
      GraphChangeStream_PageCreated_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadPages(&p_pages))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GraphChangeStream::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->PageCreated(
std::move(p_pages));
      return true;
    }
    case internal::kGraphChangeStream_ProcessCreated_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)discards::mojom::GraphChangeStream::ProcessCreated",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)discards::mojom::GraphChangeStream::ProcessCreated");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::GraphChangeStream_ProcessCreated_Params_Data* params =
          reinterpret_cast<internal::GraphChangeStream_ProcessCreated_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ProcessInfoPtr p_process{};
      GraphChangeStream_ProcessCreated_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadProcess(&p_process))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GraphChangeStream::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ProcessCreated(
std::move(p_process));
      return true;
    }
    case internal::kGraphChangeStream_WorkerCreated_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)discards::mojom::GraphChangeStream::WorkerCreated",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)discards::mojom::GraphChangeStream::WorkerCreated");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::GraphChangeStream_WorkerCreated_Params_Data* params =
          reinterpret_cast<internal::GraphChangeStream_WorkerCreated_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      WorkerInfoPtr p_worker{};
      GraphChangeStream_WorkerCreated_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadWorker(&p_worker))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GraphChangeStream::Name_, 3, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->WorkerCreated(
std::move(p_worker));
      return true;
    }
    case internal::kGraphChangeStream_FrameChanged_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)discards::mojom::GraphChangeStream::FrameChanged",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)discards::mojom::GraphChangeStream::FrameChanged");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::GraphChangeStream_FrameChanged_Params_Data* params =
          reinterpret_cast<internal::GraphChangeStream_FrameChanged_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      FrameInfoPtr p_frame{};
      GraphChangeStream_FrameChanged_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadFrame(&p_frame))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GraphChangeStream::Name_, 4, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->FrameChanged(
std::move(p_frame));
      return true;
    }
    case internal::kGraphChangeStream_PageChanged_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)discards::mojom::GraphChangeStream::PageChanged",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)discards::mojom::GraphChangeStream::PageChanged");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::GraphChangeStream_PageChanged_Params_Data* params =
          reinterpret_cast<internal::GraphChangeStream_PageChanged_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      PageInfoPtr p_page{};
      GraphChangeStream_PageChanged_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadPage(&p_page))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GraphChangeStream::Name_, 5, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->PageChanged(
std::move(p_page));
      return true;
    }
    case internal::kGraphChangeStream_ProcessChanged_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)discards::mojom::GraphChangeStream::ProcessChanged",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)discards::mojom::GraphChangeStream::ProcessChanged");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::GraphChangeStream_ProcessChanged_Params_Data* params =
          reinterpret_cast<internal::GraphChangeStream_ProcessChanged_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ProcessInfoPtr p_process{};
      GraphChangeStream_ProcessChanged_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadProcess(&p_process))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GraphChangeStream::Name_, 6, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ProcessChanged(
std::move(p_process));
      return true;
    }
    case internal::kGraphChangeStream_WorkerChanged_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)discards::mojom::GraphChangeStream::WorkerChanged",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)discards::mojom::GraphChangeStream::WorkerChanged");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::GraphChangeStream_WorkerChanged_Params_Data* params =
          reinterpret_cast<internal::GraphChangeStream_WorkerChanged_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      WorkerInfoPtr p_worker{};
      GraphChangeStream_WorkerChanged_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadWorker(&p_worker))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GraphChangeStream::Name_, 7, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->WorkerChanged(
std::move(p_worker));
      return true;
    }
    case internal::kGraphChangeStream_FavIconDataAvailable_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)discards::mojom::GraphChangeStream::FavIconDataAvailable",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)discards::mojom::GraphChangeStream::FavIconDataAvailable");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::GraphChangeStream_FavIconDataAvailable_Params_Data* params =
          reinterpret_cast<internal::GraphChangeStream_FavIconDataAvailable_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      FavIconInfoPtr p_favicon{};
      GraphChangeStream_FavIconDataAvailable_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadFavicon(&p_favicon))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GraphChangeStream::Name_, 8, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->FavIconDataAvailable(
std::move(p_favicon));
      return true;
    }
    case internal::kGraphChangeStream_NodeDeleted_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)discards::mojom::GraphChangeStream::NodeDeleted",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)discards::mojom::GraphChangeStream::NodeDeleted");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::GraphChangeStream_NodeDeleted_Params_Data* params =
          reinterpret_cast<internal::GraphChangeStream_NodeDeleted_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      int64_t p_node_id{};
      GraphChangeStream_NodeDeleted_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success)
        p_node_id = input_data_view.node_id();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GraphChangeStream::Name_, 9, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->NodeDeleted(
std::move(p_node_id));
      return true;
    }
  }
  return false;
}

// static
bool GraphChangeStreamStubDispatch::AcceptWithResponder(
    GraphChangeStream* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kGraphChangeStream_FrameCreated_Name: {
      break;
    }
    case internal::kGraphChangeStream_PageCreated_Name: {
      break;
    }
    case internal::kGraphChangeStream_ProcessCreated_Name: {
      break;
    }
    case internal::kGraphChangeStream_WorkerCreated_Name: {
      break;
    }
    case internal::kGraphChangeStream_FrameChanged_Name: {
      break;
    }
    case internal::kGraphChangeStream_PageChanged_Name: {
      break;
    }
    case internal::kGraphChangeStream_ProcessChanged_Name: {
      break;
    }
    case internal::kGraphChangeStream_WorkerChanged_Name: {
      break;
    }
    case internal::kGraphChangeStream_FavIconDataAvailable_Name: {
      break;
    }
    case internal::kGraphChangeStream_NodeDeleted_Name: {
      break;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kGraphChangeStreamValidationInfo[] = {
    {internal::kGraphChangeStream_FrameCreated_Name,
     {&internal::GraphChangeStream_FrameCreated_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kGraphChangeStream_PageCreated_Name,
     {&internal::GraphChangeStream_PageCreated_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kGraphChangeStream_ProcessCreated_Name,
     {&internal::GraphChangeStream_ProcessCreated_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kGraphChangeStream_WorkerCreated_Name,
     {&internal::GraphChangeStream_WorkerCreated_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kGraphChangeStream_FrameChanged_Name,
     {&internal::GraphChangeStream_FrameChanged_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kGraphChangeStream_PageChanged_Name,
     {&internal::GraphChangeStream_PageChanged_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kGraphChangeStream_ProcessChanged_Name,
     {&internal::GraphChangeStream_ProcessChanged_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kGraphChangeStream_WorkerChanged_Name,
     {&internal::GraphChangeStream_WorkerChanged_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kGraphChangeStream_FavIconDataAvailable_Name,
     {&internal::GraphChangeStream_FavIconDataAvailable_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kGraphChangeStream_NodeDeleted_Name,
     {&internal::GraphChangeStream_NodeDeleted_Params_Data::Validate,
      nullptr /* no response */}},
};

bool GraphChangeStreamRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::discards::mojom::GraphChangeStream::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kGraphChangeStreamValidationInfo);
}

const char GraphDump::Name_[] = "discards.mojom.GraphDump";

class GraphDump_RequestNodeDescriptions_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  GraphDump_RequestNodeDescriptions_ForwardToCallback(
      GraphDump::RequestNodeDescriptionsCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  GraphDump::RequestNodeDescriptionsCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(GraphDump_RequestNodeDescriptions_ForwardToCallback);
};

GraphDumpProxy::GraphDumpProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void GraphDumpProxy::SubscribeToChanges(
    ::mojo::PendingRemote<GraphChangeStream> in_change_subscriber) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "discards::mojom::GraphDump::SubscribeToChanges");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kGraphDump_SubscribeToChanges_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::discards::mojom::internal::GraphDump_SubscribeToChanges_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::discards::mojom::GraphChangeStreamInterfaceBase>>(
      in_change_subscriber, &params->change_subscriber, &serialization_context);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->change_subscriber),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid change_subscriber in GraphDump.SubscribeToChanges request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GraphDump::Name_);
  message.set_method_name("SubscribeToChanges");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void GraphDumpProxy::RequestNodeDescriptions(
    const std::vector<int64_t>& in_node_ids, RequestNodeDescriptionsCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "discards::mojom::GraphDump::RequestNodeDescriptions");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kGraphDump_RequestNodeDescriptions_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::discards::mojom::internal::GraphDump_RequestNodeDescriptions_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->node_ids)::BaseType::BufferWriter
      node_ids_writer;
  const mojo::internal::ContainerValidateParams node_ids_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<int64_t>>(
      in_node_ids, buffer, &node_ids_writer, &node_ids_validate_params,
      &serialization_context);
  params->node_ids.Set(
      node_ids_writer.is_null() ? nullptr : node_ids_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->node_ids.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null node_ids in GraphDump.RequestNodeDescriptions request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GraphDump::Name_);
  message.set_method_name("RequestNodeDescriptions");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new GraphDump_RequestNodeDescriptions_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
class GraphDump_RequestNodeDescriptions_ProxyToResponder {
 public:
  static GraphDump::RequestNodeDescriptionsCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<GraphDump_RequestNodeDescriptions_ProxyToResponder> proxy(
        new GraphDump_RequestNodeDescriptions_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&GraphDump_RequestNodeDescriptions_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~GraphDump_RequestNodeDescriptions_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  GraphDump_RequestNodeDescriptions_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "GraphDump::RequestNodeDescriptionsCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const base::flat_map<int64_t, std::string>& in_node_descriptions_json);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(GraphDump_RequestNodeDescriptions_ProxyToResponder);
};

bool GraphDump_RequestNodeDescriptions_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "discards::mojom::GraphDump::RequestNodeDescriptionsCallback",
               "message", message->name());
#endif
  mojo::internal::MessageDispatchContext dispatch_context(message);

  DCHECK(message->is_serialized());
  internal::GraphDump_RequestNodeDescriptions_ResponseParams_Data* params =
      reinterpret_cast<
          internal::GraphDump_RequestNodeDescriptions_ResponseParams_Data*>(
              message->mutable_payload());
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  
  bool success = true;
  base::flat_map<int64_t, std::string> p_node_descriptions_json{};
  GraphDump_RequestNodeDescriptions_ResponseParamsDataView input_data_view(params, &serialization_context);
  
  if (success && !input_data_view.ReadNodeDescriptionsJson(&p_node_descriptions_json))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        GraphDump::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_node_descriptions_json));
  return true;
}

void GraphDump_RequestNodeDescriptions_ProxyToResponder::Run(
    const base::flat_map<int64_t, std::string>& in_node_descriptions_json) {
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kGraphDump_RequestNodeDescriptions_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::discards::mojom::internal::GraphDump_RequestNodeDescriptions_ResponseParams_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->node_descriptions_json)::BaseType::BufferWriter
      node_descriptions_json_writer;
  const mojo::internal::ContainerValidateParams node_descriptions_json_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, nullptr), new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)));
  mojo::internal::Serialize<mojo::MapDataView<int64_t, mojo::StringDataView>>(
      in_node_descriptions_json, buffer, &node_descriptions_json_writer, &node_descriptions_json_validate_params,
      &serialization_context);
  params->node_descriptions_json.Set(
      node_descriptions_json_writer.is_null() ? nullptr : node_descriptions_json_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->node_descriptions_json.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null node_descriptions_json in ");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "(Impl)discards::mojom::GraphDump::RequestNodeDescriptionsCallback",
               "message", message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GraphDump::Name_);
  message.set_method_name("RequestNodeDescriptions");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool GraphDumpStubDispatch::Accept(
    GraphDump* impl,
    mojo::Message* message) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  switch (message->header()->name) {
    case internal::kGraphDump_SubscribeToChanges_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)discards::mojom::GraphDump::SubscribeToChanges",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)discards::mojom::GraphDump::SubscribeToChanges");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::GraphDump_SubscribeToChanges_Params_Data* params =
          reinterpret_cast<internal::GraphDump_SubscribeToChanges_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingRemote<GraphChangeStream> p_change_subscriber{};
      GraphDump_SubscribeToChanges_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success) {
        p_change_subscriber =
            input_data_view.TakeChangeSubscriber<decltype(p_change_subscriber)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GraphDump::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SubscribeToChanges(
std::move(p_change_subscriber));
      return true;
    }
    case internal::kGraphDump_RequestNodeDescriptions_Name: {
      break;
    }
  }
  return false;
}

// static
bool GraphDumpStubDispatch::AcceptWithResponder(
    GraphDump* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kGraphDump_SubscribeToChanges_Name: {
      break;
    }
    case internal::kGraphDump_RequestNodeDescriptions_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)discards::mojom::GraphDump::RequestNodeDescriptions",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)discards::mojom::GraphDump::RequestNodeDescriptions");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::GraphDump_RequestNodeDescriptions_Params_Data* params =
          reinterpret_cast<
              internal::GraphDump_RequestNodeDescriptions_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      std::vector<int64_t> p_node_ids{};
      GraphDump_RequestNodeDescriptions_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadNodeIds(&p_node_ids))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GraphDump::Name_, 1, false);
        return false;
      }
      GraphDump::RequestNodeDescriptionsCallback callback =
          GraphDump_RequestNodeDescriptions_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->RequestNodeDescriptions(
std::move(p_node_ids), std::move(callback));
      return true;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kGraphDumpValidationInfo[] = {
    {internal::kGraphDump_SubscribeToChanges_Name,
     {&internal::GraphDump_SubscribeToChanges_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kGraphDump_RequestNodeDescriptions_Name,
     {&internal::GraphDump_RequestNodeDescriptions_Params_Data::Validate,
      &internal::GraphDump_RequestNodeDescriptions_ResponseParams_Data::Validate}},
};

bool GraphDumpRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::discards::mojom::GraphDump::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kGraphDumpValidationInfo);
}

bool GraphDumpResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::discards::mojom::GraphDump::Name_;
  return mojo::internal::ValidateResponseGeneric(message, name, kGraphDumpValidationInfo);

}
}  // namespace mojom
}  // namespace discards

namespace mojo {


// static
bool StructTraits<::discards::mojom::TabDiscardsInfo::DataView, ::discards::mojom::TabDiscardsInfoPtr>::Read(
    ::discards::mojom::TabDiscardsInfo::DataView input,
    ::discards::mojom::TabDiscardsInfoPtr* output) {
  bool success = true;
  ::discards::mojom::TabDiscardsInfoPtr result(::discards::mojom::TabDiscardsInfo::New());
  
      if (success && !input.ReadTabUrl(&result->tab_url))
        success = false;
      if (success && !input.ReadTitle(&result->title))
        success = false;
      if (success && !input.ReadVisibility(&result->visibility))
        success = false;
      if (success && !input.ReadLoadingState(&result->loading_state))
        success = false;
      if (success && !input.ReadState(&result->state))
        success = false;
      if (success)
        result->can_discard = input.can_discard();
      if (success && !input.ReadCannotDiscardReasons(&result->cannot_discard_reasons))
        success = false;
      if (success)
        result->discard_count = input.discard_count();
      if (success && !input.ReadDiscardReason(&result->discard_reason))
        success = false;
      if (success)
        result->utility_rank = input.utility_rank();
      if (success)
        result->last_active_seconds = input.last_active_seconds();
      if (success)
        result->id = input.id();
      if (success)
        result->is_auto_discardable = input.is_auto_discardable();
      if (success)
        result->has_reactivation_score = input.has_reactivation_score();
      if (success)
        result->reactivation_score = input.reactivation_score();
      if (success)
        result->site_engagement_score = input.site_engagement_score();
      if (success)
        result->has_focus = input.has_focus();
      if (success && !input.ReadStateChangeTime(&result->state_change_time))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::discards::mojom::PageInfo::DataView, ::discards::mojom::PageInfoPtr>::Read(
    ::discards::mojom::PageInfo::DataView input,
    ::discards::mojom::PageInfoPtr* output) {
  bool success = true;
  ::discards::mojom::PageInfoPtr result(::discards::mojom::PageInfo::New());
  
      if (success)
        result->id = input.id();
      if (success && !input.ReadMainFrameUrl(&result->main_frame_url))
        success = false;
      if (success)
        result->opener_frame_id = input.opener_frame_id();
      if (success && !input.ReadDescriptionJson(&result->description_json))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::discards::mojom::FrameInfo::DataView, ::discards::mojom::FrameInfoPtr>::Read(
    ::discards::mojom::FrameInfo::DataView input,
    ::discards::mojom::FrameInfoPtr* output) {
  bool success = true;
  ::discards::mojom::FrameInfoPtr result(::discards::mojom::FrameInfo::New());
  
      if (success)
        result->id = input.id();
      if (success && !input.ReadUrl(&result->url))
        success = false;
      if (success)
        result->page_id = input.page_id();
      if (success)
        result->parent_frame_id = input.parent_frame_id();
      if (success)
        result->process_id = input.process_id();
      if (success && !input.ReadDescriptionJson(&result->description_json))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::discards::mojom::ProcessInfo::DataView, ::discards::mojom::ProcessInfoPtr>::Read(
    ::discards::mojom::ProcessInfo::DataView input,
    ::discards::mojom::ProcessInfoPtr* output) {
  bool success = true;
  ::discards::mojom::ProcessInfoPtr result(::discards::mojom::ProcessInfo::New());
  
      if (success)
        result->id = input.id();
      if (success && !input.ReadPid(&result->pid))
        success = false;
      if (success)
        result->private_footprint_kb = input.private_footprint_kb();
      if (success && !input.ReadDescriptionJson(&result->description_json))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::discards::mojom::WorkerInfo::DataView, ::discards::mojom::WorkerInfoPtr>::Read(
    ::discards::mojom::WorkerInfo::DataView input,
    ::discards::mojom::WorkerInfoPtr* output) {
  bool success = true;
  ::discards::mojom::WorkerInfoPtr result(::discards::mojom::WorkerInfo::New());
  
      if (success)
        result->id = input.id();
      if (success && !input.ReadUrl(&result->url))
        success = false;
      if (success)
        result->process_id = input.process_id();
      if (success && !input.ReadClientFrameIds(&result->client_frame_ids))
        success = false;
      if (success && !input.ReadClientWorkerIds(&result->client_worker_ids))
        success = false;
      if (success && !input.ReadChildWorkerIds(&result->child_worker_ids))
        success = false;
      if (success && !input.ReadDescriptionJson(&result->description_json))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::discards::mojom::FavIconInfo::DataView, ::discards::mojom::FavIconInfoPtr>::Read(
    ::discards::mojom::FavIconInfo::DataView input,
    ::discards::mojom::FavIconInfoPtr* output) {
  bool success = true;
  ::discards::mojom::FavIconInfoPtr result(::discards::mojom::FavIconInfo::New());
  
      if (success)
        result->node_id = input.node_id();
      if (success && !input.ReadIconData(&result->icon_data))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
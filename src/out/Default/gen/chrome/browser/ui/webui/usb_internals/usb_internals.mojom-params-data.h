// chrome/browser/ui/webui/usb_internals/usb_internals.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_UI_WEBUI_USB_INTERNALS_USB_INTERNALS_MOJOM_PARAMS_DATA_H_
#define CHROME_BROWSER_UI_WEBUI_USB_INTERNALS_USB_INTERNALS_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace mojom {
namespace internal {
class  UsbInternalsPageHandler_BindUsbDeviceManagerInterface_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(UsbInternalsPageHandler_BindUsbDeviceManagerInterface_Params_Data));
      new (data()) UsbInternalsPageHandler_BindUsbDeviceManagerInterface_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    UsbInternalsPageHandler_BindUsbDeviceManagerInterface_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<UsbInternalsPageHandler_BindUsbDeviceManagerInterface_Params_Data>(index_);
    }
    UsbInternalsPageHandler_BindUsbDeviceManagerInterface_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  UsbInternalsPageHandler_BindUsbDeviceManagerInterface_Params_Data();
  ~UsbInternalsPageHandler_BindUsbDeviceManagerInterface_Params_Data() = delete;
};
static_assert(sizeof(UsbInternalsPageHandler_BindUsbDeviceManagerInterface_Params_Data) == 16,
              "Bad sizeof(UsbInternalsPageHandler_BindUsbDeviceManagerInterface_Params_Data)");
class  UsbInternalsPageHandler_BindTestInterface_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(UsbInternalsPageHandler_BindTestInterface_Params_Data));
      new (data()) UsbInternalsPageHandler_BindTestInterface_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    UsbInternalsPageHandler_BindTestInterface_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<UsbInternalsPageHandler_BindTestInterface_Params_Data>(index_);
    }
    UsbInternalsPageHandler_BindTestInterface_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  UsbInternalsPageHandler_BindTestInterface_Params_Data();
  ~UsbInternalsPageHandler_BindTestInterface_Params_Data() = delete;
};
static_assert(sizeof(UsbInternalsPageHandler_BindTestInterface_Params_Data) == 16,
              "Bad sizeof(UsbInternalsPageHandler_BindTestInterface_Params_Data)");

}  // namespace internal
class UsbInternalsPageHandler_BindUsbDeviceManagerInterface_ParamsDataView {
 public:
  UsbInternalsPageHandler_BindUsbDeviceManagerInterface_ParamsDataView() {}

  UsbInternalsPageHandler_BindUsbDeviceManagerInterface_ParamsDataView(
      internal::UsbInternalsPageHandler_BindUsbDeviceManagerInterface_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::device::mojom::UsbDeviceManagerInterfaceBase>>(
            &data_->receiver, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::UsbInternalsPageHandler_BindUsbDeviceManagerInterface_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class UsbInternalsPageHandler_BindTestInterface_ParamsDataView {
 public:
  UsbInternalsPageHandler_BindTestInterface_ParamsDataView() {}

  UsbInternalsPageHandler_BindTestInterface_ParamsDataView(
      internal::UsbInternalsPageHandler_BindTestInterface_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::device::mojom::UsbDeviceManagerTestInterfaceBase>>(
            &data_->receiver, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::UsbInternalsPageHandler_BindTestInterface_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};





}  // namespace mojom

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CHROME_BROWSER_UI_WEBUI_USB_INTERNALS_USB_INTERNALS_MOJOM_PARAMS_DATA_H_
// chrome/browser/ui/webui/feed_internals/feed_internals.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_UI_WEBUI_FEED_INTERNALS_FEED_INTERNALS_MOJOM_SHARED_H_
#define CHROME_BROWSER_UI_WEBUI_FEED_INTERNALS_FEED_INTERNALS_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "chrome/browser/ui/webui/feed_internals/feed_internals.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "url/mojom/url.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace feed_internals {
namespace mojom {
class PropertiesDataView;

class UserClassifierDataView;

class LastFetchPropertiesDataView;

class SuggestionDataView;



}  // namespace mojom
}  // namespace feed_internals

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::feed_internals::mojom::PropertiesDataView> {
  using Data = ::feed_internals::mojom::internal::Properties_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::feed_internals::mojom::UserClassifierDataView> {
  using Data = ::feed_internals::mojom::internal::UserClassifier_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::feed_internals::mojom::LastFetchPropertiesDataView> {
  using Data = ::feed_internals::mojom::internal::LastFetchProperties_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::feed_internals::mojom::SuggestionDataView> {
  using Data = ::feed_internals::mojom::internal::Suggestion_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace feed_internals {
namespace mojom {
// Interface base classes. They are used for type safety check.
class PageHandlerInterfaceBase {};

using PageHandlerPtrDataView =
    mojo::InterfacePtrDataView<PageHandlerInterfaceBase>;
using PageHandlerRequestDataView =
    mojo::InterfaceRequestDataView<PageHandlerInterfaceBase>;
using PageHandlerAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<PageHandlerInterfaceBase>;
using PageHandlerAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<PageHandlerInterfaceBase>;
class PropertiesDataView {
 public:
  PropertiesDataView() {}

  PropertiesDataView(
      internal::Properties_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  bool is_feed_enabled() const {
    return data_->is_feed_enabled;
  }
  bool is_feed_visible() const {
    return data_->is_feed_visible;
  }
  bool is_feed_allowed() const {
    return data_->is_feed_allowed;
  }
  bool is_prefetching_enabled() const {
    return data_->is_prefetching_enabled;
  }
  inline void GetLoadStreamStatusDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadLoadStreamStatus(UserType* output) {
    auto* pointer = data_->load_stream_status.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetFeedFetchUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFeedFetchUrl(UserType* output) {
    auto* pointer = data_->feed_fetch_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
 private:
  internal::Properties_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class UserClassifierDataView {
 public:
  UserClassifierDataView() {}

  UserClassifierDataView(
      internal::UserClassifier_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetUserClassDescriptionDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUserClassDescription(UserType* output) {
    auto* pointer = data_->user_class_description.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  float avg_hours_between_views() const {
    return data_->avg_hours_between_views;
  }
  float avg_hours_between_uses() const {
    return data_->avg_hours_between_uses;
  }
 private:
  internal::UserClassifier_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class LastFetchPropertiesDataView {
 public:
  LastFetchPropertiesDataView() {}

  LastFetchPropertiesDataView(
      internal::LastFetchProperties_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int32_t last_fetch_status() const {
    return data_->last_fetch_status;
  }
  inline void GetLastFetchTriggerDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadLastFetchTrigger(UserType* output) {
    auto* pointer = data_->last_fetch_trigger.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetLastFetchTimeDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadLastFetchTime(UserType* output) {
    auto* pointer = data_->last_fetch_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, context_);
  }
  inline void GetRefreshSuppressTimeDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadRefreshSuppressTime(UserType* output) {
    auto* pointer = data_->refresh_suppress_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, context_);
  }
  inline void GetLastBlessNonceDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadLastBlessNonce(UserType* output) {
    auto* pointer = data_->last_bless_nonce.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::LastFetchProperties_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class SuggestionDataView {
 public:
  SuggestionDataView() {}

  SuggestionDataView(
      internal::Suggestion_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetTitleDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTitle(UserType* output) {
    auto* pointer = data_->title.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUrl(UserType* output) {
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  inline void GetPublisherNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPublisherName(UserType* output) {
    auto* pointer = data_->publisher_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetImageUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadImageUrl(UserType* output) {
    auto* pointer = data_->image_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  inline void GetFaviconUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFaviconUrl(UserType* output) {
    auto* pointer = data_->favicon_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
 private:
  internal::Suggestion_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};



}  // namespace mojom
}  // namespace feed_internals

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::feed_internals::mojom::PropertiesDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::feed_internals::mojom::PropertiesDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::feed_internals::mojom::internal::Properties_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->is_feed_enabled = Traits::is_feed_enabled(input);
    (*output)->is_feed_visible = Traits::is_feed_visible(input);
    (*output)->is_feed_allowed = Traits::is_feed_allowed(input);
    (*output)->is_prefetching_enabled = Traits::is_prefetching_enabled(input);
    decltype(Traits::load_stream_status(input)) in_load_stream_status = Traits::load_stream_status(input);
    typename decltype((*output)->load_stream_status)::BaseType::BufferWriter
        load_stream_status_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_load_stream_status, buffer, &load_stream_status_writer, context);
    (*output)->load_stream_status.Set(
        load_stream_status_writer.is_null() ? nullptr : load_stream_status_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->load_stream_status.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null load_stream_status in Properties struct");
    decltype(Traits::feed_fetch_url(input)) in_feed_fetch_url = Traits::feed_fetch_url(input);
    typename decltype((*output)->feed_fetch_url)::BaseType::BufferWriter
        feed_fetch_url_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_feed_fetch_url, buffer, &feed_fetch_url_writer, context);
    (*output)->feed_fetch_url.Set(
        feed_fetch_url_writer.is_null() ? nullptr : feed_fetch_url_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->feed_fetch_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null feed_fetch_url in Properties struct");
  }

  static bool Deserialize(::feed_internals::mojom::internal::Properties_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::feed_internals::mojom::PropertiesDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::feed_internals::mojom::UserClassifierDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::feed_internals::mojom::UserClassifierDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::feed_internals::mojom::internal::UserClassifier_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::user_class_description(input)) in_user_class_description = Traits::user_class_description(input);
    typename decltype((*output)->user_class_description)::BaseType::BufferWriter
        user_class_description_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_user_class_description, buffer, &user_class_description_writer, context);
    (*output)->user_class_description.Set(
        user_class_description_writer.is_null() ? nullptr : user_class_description_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->user_class_description.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null user_class_description in UserClassifier struct");
    (*output)->avg_hours_between_views = Traits::avg_hours_between_views(input);
    (*output)->avg_hours_between_uses = Traits::avg_hours_between_uses(input);
  }

  static bool Deserialize(::feed_internals::mojom::internal::UserClassifier_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::feed_internals::mojom::UserClassifierDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::feed_internals::mojom::LastFetchPropertiesDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::feed_internals::mojom::LastFetchPropertiesDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::feed_internals::mojom::internal::LastFetchProperties_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->last_fetch_status = Traits::last_fetch_status(input);
    decltype(Traits::last_fetch_trigger(input)) in_last_fetch_trigger = Traits::last_fetch_trigger(input);
    typename decltype((*output)->last_fetch_trigger)::BaseType::BufferWriter
        last_fetch_trigger_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_last_fetch_trigger, buffer, &last_fetch_trigger_writer, context);
    (*output)->last_fetch_trigger.Set(
        last_fetch_trigger_writer.is_null() ? nullptr : last_fetch_trigger_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->last_fetch_trigger.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null last_fetch_trigger in LastFetchProperties struct");
    decltype(Traits::last_fetch_time(input)) in_last_fetch_time = Traits::last_fetch_time(input);
    typename decltype((*output)->last_fetch_time)::BaseType::BufferWriter
        last_fetch_time_writer;
    mojo::internal::Serialize<::mojo_base::mojom::TimeDeltaDataView>(
        in_last_fetch_time, buffer, &last_fetch_time_writer, context);
    (*output)->last_fetch_time.Set(
        last_fetch_time_writer.is_null() ? nullptr : last_fetch_time_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->last_fetch_time.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null last_fetch_time in LastFetchProperties struct");
    decltype(Traits::refresh_suppress_time(input)) in_refresh_suppress_time = Traits::refresh_suppress_time(input);
    typename decltype((*output)->refresh_suppress_time)::BaseType::BufferWriter
        refresh_suppress_time_writer;
    mojo::internal::Serialize<::mojo_base::mojom::TimeDeltaDataView>(
        in_refresh_suppress_time, buffer, &refresh_suppress_time_writer, context);
    (*output)->refresh_suppress_time.Set(
        refresh_suppress_time_writer.is_null() ? nullptr : refresh_suppress_time_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->refresh_suppress_time.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null refresh_suppress_time in LastFetchProperties struct");
    decltype(Traits::last_bless_nonce(input)) in_last_bless_nonce = Traits::last_bless_nonce(input);
    typename decltype((*output)->last_bless_nonce)::BaseType::BufferWriter
        last_bless_nonce_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_last_bless_nonce, buffer, &last_bless_nonce_writer, context);
    (*output)->last_bless_nonce.Set(
        last_bless_nonce_writer.is_null() ? nullptr : last_bless_nonce_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->last_bless_nonce.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null last_bless_nonce in LastFetchProperties struct");
  }

  static bool Deserialize(::feed_internals::mojom::internal::LastFetchProperties_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::feed_internals::mojom::LastFetchPropertiesDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::feed_internals::mojom::SuggestionDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::feed_internals::mojom::SuggestionDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::feed_internals::mojom::internal::Suggestion_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::title(input)) in_title = Traits::title(input);
    typename decltype((*output)->title)::BaseType::BufferWriter
        title_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_title, buffer, &title_writer, context);
    (*output)->title.Set(
        title_writer.is_null() ? nullptr : title_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->title.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null title in Suggestion struct");
    decltype(Traits::url(input)) in_url = Traits::url(input);
    typename decltype((*output)->url)::BaseType::BufferWriter
        url_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_url, buffer, &url_writer, context);
    (*output)->url.Set(
        url_writer.is_null() ? nullptr : url_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null url in Suggestion struct");
    decltype(Traits::publisher_name(input)) in_publisher_name = Traits::publisher_name(input);
    typename decltype((*output)->publisher_name)::BaseType::BufferWriter
        publisher_name_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_publisher_name, buffer, &publisher_name_writer, context);
    (*output)->publisher_name.Set(
        publisher_name_writer.is_null() ? nullptr : publisher_name_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->publisher_name.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null publisher_name in Suggestion struct");
    decltype(Traits::image_url(input)) in_image_url = Traits::image_url(input);
    typename decltype((*output)->image_url)::BaseType::BufferWriter
        image_url_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_image_url, buffer, &image_url_writer, context);
    (*output)->image_url.Set(
        image_url_writer.is_null() ? nullptr : image_url_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->image_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null image_url in Suggestion struct");
    decltype(Traits::favicon_url(input)) in_favicon_url = Traits::favicon_url(input);
    typename decltype((*output)->favicon_url)::BaseType::BufferWriter
        favicon_url_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_favicon_url, buffer, &favicon_url_writer, context);
    (*output)->favicon_url.Set(
        favicon_url_writer.is_null() ? nullptr : favicon_url_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->favicon_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null favicon_url in Suggestion struct");
  }

  static bool Deserialize(::feed_internals::mojom::internal::Suggestion_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::feed_internals::mojom::SuggestionDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace feed_internals {
namespace mojom {

inline void PropertiesDataView::GetLoadStreamStatusDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->load_stream_status.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void PropertiesDataView::GetFeedFetchUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->feed_fetch_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}


inline void UserClassifierDataView::GetUserClassDescriptionDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->user_class_description.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void LastFetchPropertiesDataView::GetLastFetchTriggerDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->last_fetch_trigger.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void LastFetchPropertiesDataView::GetLastFetchTimeDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->last_fetch_time.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, context_);
}
inline void LastFetchPropertiesDataView::GetRefreshSuppressTimeDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->refresh_suppress_time.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, context_);
}
inline void LastFetchPropertiesDataView::GetLastBlessNonceDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->last_bless_nonce.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void SuggestionDataView::GetTitleDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->title.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void SuggestionDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void SuggestionDataView::GetPublisherNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->publisher_name.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void SuggestionDataView::GetImageUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->image_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void SuggestionDataView::GetFaviconUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->favicon_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}



}  // namespace mojom
}  // namespace feed_internals

#endif  // CHROME_BROWSER_UI_WEBUI_FEED_INTERNALS_FEED_INTERNALS_MOJOM_SHARED_H_
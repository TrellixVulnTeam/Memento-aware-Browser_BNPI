// chrome/browser/ui/webui/discards/discards.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_UI_WEBUI_DISCARDS_DISCARDS_MOJOM_PARAMS_DATA_H_
#define CHROME_BROWSER_UI_WEBUI_DISCARDS_DISCARDS_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace discards {
namespace mojom {
namespace internal {
class  DetailsProvider_GetTabDiscardsInfo_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DetailsProvider_GetTabDiscardsInfo_Params_Data));
      new (data()) DetailsProvider_GetTabDiscardsInfo_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DetailsProvider_GetTabDiscardsInfo_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DetailsProvider_GetTabDiscardsInfo_Params_Data>(index_);
    }
    DetailsProvider_GetTabDiscardsInfo_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  DetailsProvider_GetTabDiscardsInfo_Params_Data();
  ~DetailsProvider_GetTabDiscardsInfo_Params_Data() = delete;
};
static_assert(sizeof(DetailsProvider_GetTabDiscardsInfo_Params_Data) == 8,
              "Bad sizeof(DetailsProvider_GetTabDiscardsInfo_Params_Data)");
class  DetailsProvider_GetTabDiscardsInfo_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DetailsProvider_GetTabDiscardsInfo_ResponseParams_Data));
      new (data()) DetailsProvider_GetTabDiscardsInfo_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DetailsProvider_GetTabDiscardsInfo_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DetailsProvider_GetTabDiscardsInfo_ResponseParams_Data>(index_);
    }
    DetailsProvider_GetTabDiscardsInfo_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::TabDiscardsInfo_Data>>> infos;

 private:
  DetailsProvider_GetTabDiscardsInfo_ResponseParams_Data();
  ~DetailsProvider_GetTabDiscardsInfo_ResponseParams_Data() = delete;
};
static_assert(sizeof(DetailsProvider_GetTabDiscardsInfo_ResponseParams_Data) == 16,
              "Bad sizeof(DetailsProvider_GetTabDiscardsInfo_ResponseParams_Data)");
class  DetailsProvider_SetAutoDiscardable_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DetailsProvider_SetAutoDiscardable_Params_Data));
      new (data()) DetailsProvider_SetAutoDiscardable_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DetailsProvider_SetAutoDiscardable_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DetailsProvider_SetAutoDiscardable_Params_Data>(index_);
    }
    DetailsProvider_SetAutoDiscardable_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t tab_id;
  uint8_t is_auto_discardable : 1;
  uint8_t padfinal_[3];

 private:
  DetailsProvider_SetAutoDiscardable_Params_Data();
  ~DetailsProvider_SetAutoDiscardable_Params_Data() = delete;
};
static_assert(sizeof(DetailsProvider_SetAutoDiscardable_Params_Data) == 16,
              "Bad sizeof(DetailsProvider_SetAutoDiscardable_Params_Data)");
class  DetailsProvider_SetAutoDiscardable_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DetailsProvider_SetAutoDiscardable_ResponseParams_Data));
      new (data()) DetailsProvider_SetAutoDiscardable_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DetailsProvider_SetAutoDiscardable_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DetailsProvider_SetAutoDiscardable_ResponseParams_Data>(index_);
    }
    DetailsProvider_SetAutoDiscardable_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  DetailsProvider_SetAutoDiscardable_ResponseParams_Data();
  ~DetailsProvider_SetAutoDiscardable_ResponseParams_Data() = delete;
};
static_assert(sizeof(DetailsProvider_SetAutoDiscardable_ResponseParams_Data) == 8,
              "Bad sizeof(DetailsProvider_SetAutoDiscardable_ResponseParams_Data)");
class  DetailsProvider_DiscardById_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DetailsProvider_DiscardById_Params_Data));
      new (data()) DetailsProvider_DiscardById_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DetailsProvider_DiscardById_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DetailsProvider_DiscardById_Params_Data>(index_);
    }
    DetailsProvider_DiscardById_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t tab_id;
  uint8_t padfinal_[4];

 private:
  DetailsProvider_DiscardById_Params_Data();
  ~DetailsProvider_DiscardById_Params_Data() = delete;
};
static_assert(sizeof(DetailsProvider_DiscardById_Params_Data) == 16,
              "Bad sizeof(DetailsProvider_DiscardById_Params_Data)");
class  DetailsProvider_DiscardById_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DetailsProvider_DiscardById_ResponseParams_Data));
      new (data()) DetailsProvider_DiscardById_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DetailsProvider_DiscardById_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DetailsProvider_DiscardById_ResponseParams_Data>(index_);
    }
    DetailsProvider_DiscardById_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  DetailsProvider_DiscardById_ResponseParams_Data();
  ~DetailsProvider_DiscardById_ResponseParams_Data() = delete;
};
static_assert(sizeof(DetailsProvider_DiscardById_ResponseParams_Data) == 8,
              "Bad sizeof(DetailsProvider_DiscardById_ResponseParams_Data)");
class  DetailsProvider_LoadById_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DetailsProvider_LoadById_Params_Data));
      new (data()) DetailsProvider_LoadById_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DetailsProvider_LoadById_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DetailsProvider_LoadById_Params_Data>(index_);
    }
    DetailsProvider_LoadById_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t tab_id;
  uint8_t padfinal_[4];

 private:
  DetailsProvider_LoadById_Params_Data();
  ~DetailsProvider_LoadById_Params_Data() = delete;
};
static_assert(sizeof(DetailsProvider_LoadById_Params_Data) == 16,
              "Bad sizeof(DetailsProvider_LoadById_Params_Data)");
class  DetailsProvider_Discard_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DetailsProvider_Discard_Params_Data));
      new (data()) DetailsProvider_Discard_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DetailsProvider_Discard_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DetailsProvider_Discard_Params_Data>(index_);
    }
    DetailsProvider_Discard_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  DetailsProvider_Discard_Params_Data();
  ~DetailsProvider_Discard_Params_Data() = delete;
};
static_assert(sizeof(DetailsProvider_Discard_Params_Data) == 8,
              "Bad sizeof(DetailsProvider_Discard_Params_Data)");
class  DetailsProvider_Discard_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DetailsProvider_Discard_ResponseParams_Data));
      new (data()) DetailsProvider_Discard_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DetailsProvider_Discard_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DetailsProvider_Discard_ResponseParams_Data>(index_);
    }
    DetailsProvider_Discard_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  DetailsProvider_Discard_ResponseParams_Data();
  ~DetailsProvider_Discard_ResponseParams_Data() = delete;
};
static_assert(sizeof(DetailsProvider_Discard_ResponseParams_Data) == 8,
              "Bad sizeof(DetailsProvider_Discard_ResponseParams_Data)");
class  GraphChangeStream_FrameCreated_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(GraphChangeStream_FrameCreated_Params_Data));
      new (data()) GraphChangeStream_FrameCreated_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    GraphChangeStream_FrameCreated_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<GraphChangeStream_FrameCreated_Params_Data>(index_);
    }
    GraphChangeStream_FrameCreated_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::FrameInfo_Data> frame;

 private:
  GraphChangeStream_FrameCreated_Params_Data();
  ~GraphChangeStream_FrameCreated_Params_Data() = delete;
};
static_assert(sizeof(GraphChangeStream_FrameCreated_Params_Data) == 16,
              "Bad sizeof(GraphChangeStream_FrameCreated_Params_Data)");
class  GraphChangeStream_PageCreated_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(GraphChangeStream_PageCreated_Params_Data));
      new (data()) GraphChangeStream_PageCreated_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    GraphChangeStream_PageCreated_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<GraphChangeStream_PageCreated_Params_Data>(index_);
    }
    GraphChangeStream_PageCreated_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::PageInfo_Data> pages;

 private:
  GraphChangeStream_PageCreated_Params_Data();
  ~GraphChangeStream_PageCreated_Params_Data() = delete;
};
static_assert(sizeof(GraphChangeStream_PageCreated_Params_Data) == 16,
              "Bad sizeof(GraphChangeStream_PageCreated_Params_Data)");
class  GraphChangeStream_ProcessCreated_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(GraphChangeStream_ProcessCreated_Params_Data));
      new (data()) GraphChangeStream_ProcessCreated_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    GraphChangeStream_ProcessCreated_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<GraphChangeStream_ProcessCreated_Params_Data>(index_);
    }
    GraphChangeStream_ProcessCreated_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::ProcessInfo_Data> process;

 private:
  GraphChangeStream_ProcessCreated_Params_Data();
  ~GraphChangeStream_ProcessCreated_Params_Data() = delete;
};
static_assert(sizeof(GraphChangeStream_ProcessCreated_Params_Data) == 16,
              "Bad sizeof(GraphChangeStream_ProcessCreated_Params_Data)");
class  GraphChangeStream_WorkerCreated_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(GraphChangeStream_WorkerCreated_Params_Data));
      new (data()) GraphChangeStream_WorkerCreated_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    GraphChangeStream_WorkerCreated_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<GraphChangeStream_WorkerCreated_Params_Data>(index_);
    }
    GraphChangeStream_WorkerCreated_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::WorkerInfo_Data> worker;

 private:
  GraphChangeStream_WorkerCreated_Params_Data();
  ~GraphChangeStream_WorkerCreated_Params_Data() = delete;
};
static_assert(sizeof(GraphChangeStream_WorkerCreated_Params_Data) == 16,
              "Bad sizeof(GraphChangeStream_WorkerCreated_Params_Data)");
class  GraphChangeStream_FrameChanged_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(GraphChangeStream_FrameChanged_Params_Data));
      new (data()) GraphChangeStream_FrameChanged_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    GraphChangeStream_FrameChanged_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<GraphChangeStream_FrameChanged_Params_Data>(index_);
    }
    GraphChangeStream_FrameChanged_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::FrameInfo_Data> frame;

 private:
  GraphChangeStream_FrameChanged_Params_Data();
  ~GraphChangeStream_FrameChanged_Params_Data() = delete;
};
static_assert(sizeof(GraphChangeStream_FrameChanged_Params_Data) == 16,
              "Bad sizeof(GraphChangeStream_FrameChanged_Params_Data)");
class  GraphChangeStream_PageChanged_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(GraphChangeStream_PageChanged_Params_Data));
      new (data()) GraphChangeStream_PageChanged_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    GraphChangeStream_PageChanged_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<GraphChangeStream_PageChanged_Params_Data>(index_);
    }
    GraphChangeStream_PageChanged_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::PageInfo_Data> page;

 private:
  GraphChangeStream_PageChanged_Params_Data();
  ~GraphChangeStream_PageChanged_Params_Data() = delete;
};
static_assert(sizeof(GraphChangeStream_PageChanged_Params_Data) == 16,
              "Bad sizeof(GraphChangeStream_PageChanged_Params_Data)");
class  GraphChangeStream_ProcessChanged_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(GraphChangeStream_ProcessChanged_Params_Data));
      new (data()) GraphChangeStream_ProcessChanged_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    GraphChangeStream_ProcessChanged_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<GraphChangeStream_ProcessChanged_Params_Data>(index_);
    }
    GraphChangeStream_ProcessChanged_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::ProcessInfo_Data> process;

 private:
  GraphChangeStream_ProcessChanged_Params_Data();
  ~GraphChangeStream_ProcessChanged_Params_Data() = delete;
};
static_assert(sizeof(GraphChangeStream_ProcessChanged_Params_Data) == 16,
              "Bad sizeof(GraphChangeStream_ProcessChanged_Params_Data)");
class  GraphChangeStream_WorkerChanged_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(GraphChangeStream_WorkerChanged_Params_Data));
      new (data()) GraphChangeStream_WorkerChanged_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    GraphChangeStream_WorkerChanged_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<GraphChangeStream_WorkerChanged_Params_Data>(index_);
    }
    GraphChangeStream_WorkerChanged_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::WorkerInfo_Data> worker;

 private:
  GraphChangeStream_WorkerChanged_Params_Data();
  ~GraphChangeStream_WorkerChanged_Params_Data() = delete;
};
static_assert(sizeof(GraphChangeStream_WorkerChanged_Params_Data) == 16,
              "Bad sizeof(GraphChangeStream_WorkerChanged_Params_Data)");
class  GraphChangeStream_FavIconDataAvailable_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(GraphChangeStream_FavIconDataAvailable_Params_Data));
      new (data()) GraphChangeStream_FavIconDataAvailable_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    GraphChangeStream_FavIconDataAvailable_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<GraphChangeStream_FavIconDataAvailable_Params_Data>(index_);
    }
    GraphChangeStream_FavIconDataAvailable_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::FavIconInfo_Data> favicon;

 private:
  GraphChangeStream_FavIconDataAvailable_Params_Data();
  ~GraphChangeStream_FavIconDataAvailable_Params_Data() = delete;
};
static_assert(sizeof(GraphChangeStream_FavIconDataAvailable_Params_Data) == 16,
              "Bad sizeof(GraphChangeStream_FavIconDataAvailable_Params_Data)");
class  GraphChangeStream_NodeDeleted_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(GraphChangeStream_NodeDeleted_Params_Data));
      new (data()) GraphChangeStream_NodeDeleted_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    GraphChangeStream_NodeDeleted_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<GraphChangeStream_NodeDeleted_Params_Data>(index_);
    }
    GraphChangeStream_NodeDeleted_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t node_id;

 private:
  GraphChangeStream_NodeDeleted_Params_Data();
  ~GraphChangeStream_NodeDeleted_Params_Data() = delete;
};
static_assert(sizeof(GraphChangeStream_NodeDeleted_Params_Data) == 16,
              "Bad sizeof(GraphChangeStream_NodeDeleted_Params_Data)");
class  GraphDump_SubscribeToChanges_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(GraphDump_SubscribeToChanges_Params_Data));
      new (data()) GraphDump_SubscribeToChanges_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    GraphDump_SubscribeToChanges_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<GraphDump_SubscribeToChanges_Params_Data>(index_);
    }
    GraphDump_SubscribeToChanges_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data change_subscriber;

 private:
  GraphDump_SubscribeToChanges_Params_Data();
  ~GraphDump_SubscribeToChanges_Params_Data() = delete;
};
static_assert(sizeof(GraphDump_SubscribeToChanges_Params_Data) == 16,
              "Bad sizeof(GraphDump_SubscribeToChanges_Params_Data)");
class  GraphDump_RequestNodeDescriptions_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(GraphDump_RequestNodeDescriptions_Params_Data));
      new (data()) GraphDump_RequestNodeDescriptions_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    GraphDump_RequestNodeDescriptions_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<GraphDump_RequestNodeDescriptions_Params_Data>(index_);
    }
    GraphDump_RequestNodeDescriptions_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<int64_t>> node_ids;

 private:
  GraphDump_RequestNodeDescriptions_Params_Data();
  ~GraphDump_RequestNodeDescriptions_Params_Data() = delete;
};
static_assert(sizeof(GraphDump_RequestNodeDescriptions_Params_Data) == 16,
              "Bad sizeof(GraphDump_RequestNodeDescriptions_Params_Data)");
class  GraphDump_RequestNodeDescriptions_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(GraphDump_RequestNodeDescriptions_ResponseParams_Data));
      new (data()) GraphDump_RequestNodeDescriptions_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    GraphDump_RequestNodeDescriptions_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<GraphDump_RequestNodeDescriptions_ResponseParams_Data>(index_);
    }
    GraphDump_RequestNodeDescriptions_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Map_Data<int64_t, mojo::internal::Pointer<mojo::internal::String_Data>>> node_descriptions_json;

 private:
  GraphDump_RequestNodeDescriptions_ResponseParams_Data();
  ~GraphDump_RequestNodeDescriptions_ResponseParams_Data() = delete;
};
static_assert(sizeof(GraphDump_RequestNodeDescriptions_ResponseParams_Data) == 16,
              "Bad sizeof(GraphDump_RequestNodeDescriptions_ResponseParams_Data)");

}  // namespace internal
class DetailsProvider_GetTabDiscardsInfo_ParamsDataView {
 public:
  DetailsProvider_GetTabDiscardsInfo_ParamsDataView() {}

  DetailsProvider_GetTabDiscardsInfo_ParamsDataView(
      internal::DetailsProvider_GetTabDiscardsInfo_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::DetailsProvider_GetTabDiscardsInfo_Params_Data* data_ = nullptr;
};

class DetailsProvider_GetTabDiscardsInfo_ResponseParamsDataView {
 public:
  DetailsProvider_GetTabDiscardsInfo_ResponseParamsDataView() {}

  DetailsProvider_GetTabDiscardsInfo_ResponseParamsDataView(
      internal::DetailsProvider_GetTabDiscardsInfo_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetInfosDataView(
      mojo::ArrayDataView<TabDiscardsInfoDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadInfos(UserType* output) {
    auto* pointer = data_->infos.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::discards::mojom::TabDiscardsInfoDataView>>(
        pointer, output, context_);
  }
 private:
  internal::DetailsProvider_GetTabDiscardsInfo_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class DetailsProvider_SetAutoDiscardable_ParamsDataView {
 public:
  DetailsProvider_SetAutoDiscardable_ParamsDataView() {}

  DetailsProvider_SetAutoDiscardable_ParamsDataView(
      internal::DetailsProvider_SetAutoDiscardable_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t tab_id() const {
    return data_->tab_id;
  }
  bool is_auto_discardable() const {
    return data_->is_auto_discardable;
  }
 private:
  internal::DetailsProvider_SetAutoDiscardable_Params_Data* data_ = nullptr;
};

class DetailsProvider_SetAutoDiscardable_ResponseParamsDataView {
 public:
  DetailsProvider_SetAutoDiscardable_ResponseParamsDataView() {}

  DetailsProvider_SetAutoDiscardable_ResponseParamsDataView(
      internal::DetailsProvider_SetAutoDiscardable_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::DetailsProvider_SetAutoDiscardable_ResponseParams_Data* data_ = nullptr;
};

class DetailsProvider_DiscardById_ParamsDataView {
 public:
  DetailsProvider_DiscardById_ParamsDataView() {}

  DetailsProvider_DiscardById_ParamsDataView(
      internal::DetailsProvider_DiscardById_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t tab_id() const {
    return data_->tab_id;
  }
 private:
  internal::DetailsProvider_DiscardById_Params_Data* data_ = nullptr;
};

class DetailsProvider_DiscardById_ResponseParamsDataView {
 public:
  DetailsProvider_DiscardById_ResponseParamsDataView() {}

  DetailsProvider_DiscardById_ResponseParamsDataView(
      internal::DetailsProvider_DiscardById_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::DetailsProvider_DiscardById_ResponseParams_Data* data_ = nullptr;
};

class DetailsProvider_LoadById_ParamsDataView {
 public:
  DetailsProvider_LoadById_ParamsDataView() {}

  DetailsProvider_LoadById_ParamsDataView(
      internal::DetailsProvider_LoadById_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t tab_id() const {
    return data_->tab_id;
  }
 private:
  internal::DetailsProvider_LoadById_Params_Data* data_ = nullptr;
};

class DetailsProvider_Discard_ParamsDataView {
 public:
  DetailsProvider_Discard_ParamsDataView() {}

  DetailsProvider_Discard_ParamsDataView(
      internal::DetailsProvider_Discard_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::DetailsProvider_Discard_Params_Data* data_ = nullptr;
};

class DetailsProvider_Discard_ResponseParamsDataView {
 public:
  DetailsProvider_Discard_ResponseParamsDataView() {}

  DetailsProvider_Discard_ResponseParamsDataView(
      internal::DetailsProvider_Discard_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::DetailsProvider_Discard_ResponseParams_Data* data_ = nullptr;
};

class GraphChangeStream_FrameCreated_ParamsDataView {
 public:
  GraphChangeStream_FrameCreated_ParamsDataView() {}

  GraphChangeStream_FrameCreated_ParamsDataView(
      internal::GraphChangeStream_FrameCreated_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetFrameDataView(
      FrameInfoDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFrame(UserType* output) {
    auto* pointer = data_->frame.Get();
    return mojo::internal::Deserialize<::discards::mojom::FrameInfoDataView>(
        pointer, output, context_);
  }
 private:
  internal::GraphChangeStream_FrameCreated_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class GraphChangeStream_PageCreated_ParamsDataView {
 public:
  GraphChangeStream_PageCreated_ParamsDataView() {}

  GraphChangeStream_PageCreated_ParamsDataView(
      internal::GraphChangeStream_PageCreated_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetPagesDataView(
      PageInfoDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPages(UserType* output) {
    auto* pointer = data_->pages.Get();
    return mojo::internal::Deserialize<::discards::mojom::PageInfoDataView>(
        pointer, output, context_);
  }
 private:
  internal::GraphChangeStream_PageCreated_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class GraphChangeStream_ProcessCreated_ParamsDataView {
 public:
  GraphChangeStream_ProcessCreated_ParamsDataView() {}

  GraphChangeStream_ProcessCreated_ParamsDataView(
      internal::GraphChangeStream_ProcessCreated_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetProcessDataView(
      ProcessInfoDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadProcess(UserType* output) {
    auto* pointer = data_->process.Get();
    return mojo::internal::Deserialize<::discards::mojom::ProcessInfoDataView>(
        pointer, output, context_);
  }
 private:
  internal::GraphChangeStream_ProcessCreated_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class GraphChangeStream_WorkerCreated_ParamsDataView {
 public:
  GraphChangeStream_WorkerCreated_ParamsDataView() {}

  GraphChangeStream_WorkerCreated_ParamsDataView(
      internal::GraphChangeStream_WorkerCreated_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetWorkerDataView(
      WorkerInfoDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadWorker(UserType* output) {
    auto* pointer = data_->worker.Get();
    return mojo::internal::Deserialize<::discards::mojom::WorkerInfoDataView>(
        pointer, output, context_);
  }
 private:
  internal::GraphChangeStream_WorkerCreated_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class GraphChangeStream_FrameChanged_ParamsDataView {
 public:
  GraphChangeStream_FrameChanged_ParamsDataView() {}

  GraphChangeStream_FrameChanged_ParamsDataView(
      internal::GraphChangeStream_FrameChanged_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetFrameDataView(
      FrameInfoDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFrame(UserType* output) {
    auto* pointer = data_->frame.Get();
    return mojo::internal::Deserialize<::discards::mojom::FrameInfoDataView>(
        pointer, output, context_);
  }
 private:
  internal::GraphChangeStream_FrameChanged_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class GraphChangeStream_PageChanged_ParamsDataView {
 public:
  GraphChangeStream_PageChanged_ParamsDataView() {}

  GraphChangeStream_PageChanged_ParamsDataView(
      internal::GraphChangeStream_PageChanged_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetPageDataView(
      PageInfoDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPage(UserType* output) {
    auto* pointer = data_->page.Get();
    return mojo::internal::Deserialize<::discards::mojom::PageInfoDataView>(
        pointer, output, context_);
  }
 private:
  internal::GraphChangeStream_PageChanged_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class GraphChangeStream_ProcessChanged_ParamsDataView {
 public:
  GraphChangeStream_ProcessChanged_ParamsDataView() {}

  GraphChangeStream_ProcessChanged_ParamsDataView(
      internal::GraphChangeStream_ProcessChanged_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetProcessDataView(
      ProcessInfoDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadProcess(UserType* output) {
    auto* pointer = data_->process.Get();
    return mojo::internal::Deserialize<::discards::mojom::ProcessInfoDataView>(
        pointer, output, context_);
  }
 private:
  internal::GraphChangeStream_ProcessChanged_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class GraphChangeStream_WorkerChanged_ParamsDataView {
 public:
  GraphChangeStream_WorkerChanged_ParamsDataView() {}

  GraphChangeStream_WorkerChanged_ParamsDataView(
      internal::GraphChangeStream_WorkerChanged_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetWorkerDataView(
      WorkerInfoDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadWorker(UserType* output) {
    auto* pointer = data_->worker.Get();
    return mojo::internal::Deserialize<::discards::mojom::WorkerInfoDataView>(
        pointer, output, context_);
  }
 private:
  internal::GraphChangeStream_WorkerChanged_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class GraphChangeStream_FavIconDataAvailable_ParamsDataView {
 public:
  GraphChangeStream_FavIconDataAvailable_ParamsDataView() {}

  GraphChangeStream_FavIconDataAvailable_ParamsDataView(
      internal::GraphChangeStream_FavIconDataAvailable_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetFaviconDataView(
      FavIconInfoDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFavicon(UserType* output) {
    auto* pointer = data_->favicon.Get();
    return mojo::internal::Deserialize<::discards::mojom::FavIconInfoDataView>(
        pointer, output, context_);
  }
 private:
  internal::GraphChangeStream_FavIconDataAvailable_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class GraphChangeStream_NodeDeleted_ParamsDataView {
 public:
  GraphChangeStream_NodeDeleted_ParamsDataView() {}

  GraphChangeStream_NodeDeleted_ParamsDataView(
      internal::GraphChangeStream_NodeDeleted_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int64_t node_id() const {
    return data_->node_id;
  }
 private:
  internal::GraphChangeStream_NodeDeleted_Params_Data* data_ = nullptr;
};

class GraphDump_SubscribeToChanges_ParamsDataView {
 public:
  GraphDump_SubscribeToChanges_ParamsDataView() {}

  GraphDump_SubscribeToChanges_ParamsDataView(
      internal::GraphDump_SubscribeToChanges_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeChangeSubscriber() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::discards::mojom::GraphChangeStreamInterfaceBase>>(
            &data_->change_subscriber, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::GraphDump_SubscribeToChanges_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class GraphDump_RequestNodeDescriptions_ParamsDataView {
 public:
  GraphDump_RequestNodeDescriptions_ParamsDataView() {}

  GraphDump_RequestNodeDescriptions_ParamsDataView(
      internal::GraphDump_RequestNodeDescriptions_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetNodeIdsDataView(
      mojo::ArrayDataView<int64_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadNodeIds(UserType* output) {
    auto* pointer = data_->node_ids.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<int64_t>>(
        pointer, output, context_);
  }
 private:
  internal::GraphDump_RequestNodeDescriptions_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class GraphDump_RequestNodeDescriptions_ResponseParamsDataView {
 public:
  GraphDump_RequestNodeDescriptions_ResponseParamsDataView() {}

  GraphDump_RequestNodeDescriptions_ResponseParamsDataView(
      internal::GraphDump_RequestNodeDescriptions_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetNodeDescriptionsJsonDataView(
      mojo::MapDataView<int64_t, mojo::StringDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadNodeDescriptionsJson(UserType* output) {
    auto* pointer = data_->node_descriptions_json.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<int64_t, mojo::StringDataView>>(
        pointer, output, context_);
  }
 private:
  internal::GraphDump_RequestNodeDescriptions_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};




inline void DetailsProvider_GetTabDiscardsInfo_ResponseParamsDataView::GetInfosDataView(
    mojo::ArrayDataView<TabDiscardsInfoDataView>* output) {
  auto pointer = data_->infos.Get();
  *output = mojo::ArrayDataView<TabDiscardsInfoDataView>(pointer, context_);
}
















inline void GraphChangeStream_FrameCreated_ParamsDataView::GetFrameDataView(
    FrameInfoDataView* output) {
  auto pointer = data_->frame.Get();
  *output = FrameInfoDataView(pointer, context_);
}


inline void GraphChangeStream_PageCreated_ParamsDataView::GetPagesDataView(
    PageInfoDataView* output) {
  auto pointer = data_->pages.Get();
  *output = PageInfoDataView(pointer, context_);
}


inline void GraphChangeStream_ProcessCreated_ParamsDataView::GetProcessDataView(
    ProcessInfoDataView* output) {
  auto pointer = data_->process.Get();
  *output = ProcessInfoDataView(pointer, context_);
}


inline void GraphChangeStream_WorkerCreated_ParamsDataView::GetWorkerDataView(
    WorkerInfoDataView* output) {
  auto pointer = data_->worker.Get();
  *output = WorkerInfoDataView(pointer, context_);
}


inline void GraphChangeStream_FrameChanged_ParamsDataView::GetFrameDataView(
    FrameInfoDataView* output) {
  auto pointer = data_->frame.Get();
  *output = FrameInfoDataView(pointer, context_);
}


inline void GraphChangeStream_PageChanged_ParamsDataView::GetPageDataView(
    PageInfoDataView* output) {
  auto pointer = data_->page.Get();
  *output = PageInfoDataView(pointer, context_);
}


inline void GraphChangeStream_ProcessChanged_ParamsDataView::GetProcessDataView(
    ProcessInfoDataView* output) {
  auto pointer = data_->process.Get();
  *output = ProcessInfoDataView(pointer, context_);
}


inline void GraphChangeStream_WorkerChanged_ParamsDataView::GetWorkerDataView(
    WorkerInfoDataView* output) {
  auto pointer = data_->worker.Get();
  *output = WorkerInfoDataView(pointer, context_);
}


inline void GraphChangeStream_FavIconDataAvailable_ParamsDataView::GetFaviconDataView(
    FavIconInfoDataView* output) {
  auto pointer = data_->favicon.Get();
  *output = FavIconInfoDataView(pointer, context_);
}






inline void GraphDump_RequestNodeDescriptions_ParamsDataView::GetNodeIdsDataView(
    mojo::ArrayDataView<int64_t>* output) {
  auto pointer = data_->node_ids.Get();
  *output = mojo::ArrayDataView<int64_t>(pointer, context_);
}


inline void GraphDump_RequestNodeDescriptions_ResponseParamsDataView::GetNodeDescriptionsJsonDataView(
    mojo::MapDataView<int64_t, mojo::StringDataView>* output) {
  auto pointer = data_->node_descriptions_json.Get();
  *output = mojo::MapDataView<int64_t, mojo::StringDataView>(pointer, context_);
}

}  // namespace mojom
}  // namespace discards

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CHROME_BROWSER_UI_WEBUI_DISCARDS_DISCARDS_MOJOM_PARAMS_DATA_H_
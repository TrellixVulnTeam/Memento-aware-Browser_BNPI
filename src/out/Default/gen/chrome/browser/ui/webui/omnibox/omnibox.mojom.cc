// chrome/browser/ui/webui/omnibox/omnibox.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "chrome/browser/ui/webui/omnibox/omnibox.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "chrome/browser/ui/webui/omnibox/omnibox.mojom-params-data.h"
#include "chrome/browser/ui/webui/omnibox/omnibox.mojom-shared-message-ids.h"

#include "chrome/browser/ui/webui/omnibox/omnibox.mojom-import-headers.h"


#ifndef CHROME_BROWSER_UI_WEBUI_OMNIBOX_OMNIBOX_MOJOM_JUMBO_H_
#define CHROME_BROWSER_UI_WEBUI_OMNIBOX_OMNIBOX_MOJOM_JUMBO_H_
#endif
namespace mojom {
ACMatchClassification::ACMatchClassification()
    : offset(),
      style() {}

ACMatchClassification::ACMatchClassification(
    int32_t offset_in,
    int32_t style_in)
    : offset(std::move(offset_in)),
      style(std::move(style_in)) {}

ACMatchClassification::~ACMatchClassification() = default;
size_t ACMatchClassification::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->offset);
  seed = mojo::internal::Hash(seed, this->style);
  return seed;
}

bool ACMatchClassification::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
AutocompleteAdditionalInfo::AutocompleteAdditionalInfo()
    : key(),
      value() {}

AutocompleteAdditionalInfo::AutocompleteAdditionalInfo(
    const std::string& key_in,
    const std::string& value_in)
    : key(std::move(key_in)),
      value(std::move(value_in)) {}

AutocompleteAdditionalInfo::~AutocompleteAdditionalInfo() = default;
size_t AutocompleteAdditionalInfo::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->key);
  seed = mojo::internal::Hash(seed, this->value);
  return seed;
}

bool AutocompleteAdditionalInfo::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
AutocompleteMatch::AutocompleteMatch()
    : provider_name(),
      provider_done(),
      relevance(),
      deletable(),
      fill_into_edit(),
      inline_autocompletion(),
      destination_url(),
      stripped_destination_url(),
      image(),
      contents(),
      contents_class(),
      description(),
      description_class(),
      swap_contents_and_description(),
      answer(),
      transition(),
      allowed_to_be_default_match(),
      type(),
      is_search_type(),
      has_tab_match(),
      associated_keyword(),
      keyword(),
      starred(),
      duplicates(),
      from_previous(),
      additional_info() {}

AutocompleteMatch::AutocompleteMatch(
    const base::Optional<std::string>& provider_name_in,
    bool provider_done_in,
    int32_t relevance_in,
    bool deletable_in,
    const std::string& fill_into_edit_in,
    const std::string& inline_autocompletion_in,
    const std::string& destination_url_in,
    const std::string& stripped_destination_url_in,
    const std::string& image_in,
    const std::string& contents_in,
    std::vector<ACMatchClassificationPtr> contents_class_in,
    const std::string& description_in,
    std::vector<ACMatchClassificationPtr> description_class_in,
    bool swap_contents_and_description_in,
    const std::string& answer_in,
    const std::string& transition_in,
    bool allowed_to_be_default_match_in,
    const std::string& type_in,
    bool is_search_type_in,
    bool has_tab_match_in,
    const base::Optional<std::string>& associated_keyword_in,
    const std::string& keyword_in,
    bool starred_in,
    int32_t duplicates_in,
    bool from_previous_in,
    std::vector<AutocompleteAdditionalInfoPtr> additional_info_in)
    : provider_name(std::move(provider_name_in)),
      provider_done(std::move(provider_done_in)),
      relevance(std::move(relevance_in)),
      deletable(std::move(deletable_in)),
      fill_into_edit(std::move(fill_into_edit_in)),
      inline_autocompletion(std::move(inline_autocompletion_in)),
      destination_url(std::move(destination_url_in)),
      stripped_destination_url(std::move(stripped_destination_url_in)),
      image(std::move(image_in)),
      contents(std::move(contents_in)),
      contents_class(std::move(contents_class_in)),
      description(std::move(description_in)),
      description_class(std::move(description_class_in)),
      swap_contents_and_description(std::move(swap_contents_and_description_in)),
      answer(std::move(answer_in)),
      transition(std::move(transition_in)),
      allowed_to_be_default_match(std::move(allowed_to_be_default_match_in)),
      type(std::move(type_in)),
      is_search_type(std::move(is_search_type_in)),
      has_tab_match(std::move(has_tab_match_in)),
      associated_keyword(std::move(associated_keyword_in)),
      keyword(std::move(keyword_in)),
      starred(std::move(starred_in)),
      duplicates(std::move(duplicates_in)),
      from_previous(std::move(from_previous_in)),
      additional_info(std::move(additional_info_in)) {}

AutocompleteMatch::~AutocompleteMatch() = default;

bool AutocompleteMatch::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
AutocompleteResultsForProvider::AutocompleteResultsForProvider()
    : provider_name(),
      results() {}

AutocompleteResultsForProvider::AutocompleteResultsForProvider(
    const std::string& provider_name_in,
    std::vector<AutocompleteMatchPtr> results_in)
    : provider_name(std::move(provider_name_in)),
      results(std::move(results_in)) {}

AutocompleteResultsForProvider::~AutocompleteResultsForProvider() = default;

bool AutocompleteResultsForProvider::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
OmniboxResponse::OmniboxResponse()
    : cursor_position(),
      time_since_omnibox_started_ms(),
      done(),
      type(),
      host(),
      is_typed_host(),
      input_text(),
      combined_results(),
      results_by_provider() {}

OmniboxResponse::OmniboxResponse(
    int32_t cursor_position_in,
    int32_t time_since_omnibox_started_ms_in,
    bool done_in,
    const std::string& type_in,
    const std::string& host_in,
    bool is_typed_host_in,
    const std::string& input_text_in,
    std::vector<AutocompleteMatchPtr> combined_results_in,
    std::vector<AutocompleteResultsForProviderPtr> results_by_provider_in)
    : cursor_position(std::move(cursor_position_in)),
      time_since_omnibox_started_ms(std::move(time_since_omnibox_started_ms_in)),
      done(std::move(done_in)),
      type(std::move(type_in)),
      host(std::move(host_in)),
      is_typed_host(std::move(is_typed_host_in)),
      input_text(std::move(input_text_in)),
      combined_results(std::move(combined_results_in)),
      results_by_provider(std::move(results_by_provider_in)) {}

OmniboxResponse::~OmniboxResponse() = default;

bool OmniboxResponse::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char OmniboxPageHandler::Name_[] = "mojom.OmniboxPageHandler";

OmniboxPageHandlerProxy::OmniboxPageHandlerProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void OmniboxPageHandlerProxy::SetClientPage(
    ::mojo::PendingRemote<OmniboxPage> in_page) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "mojom::OmniboxPageHandler::SetClientPage");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kOmniboxPageHandler_SetClientPage_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::mojom::internal::OmniboxPageHandler_SetClientPage_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::mojom::OmniboxPageInterfaceBase>>(
      in_page, &params->page, &serialization_context);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->page),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid page in OmniboxPageHandler.SetClientPage request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(OmniboxPageHandler::Name_);
  message.set_method_name("SetClientPage");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void OmniboxPageHandlerProxy::StartOmniboxQuery(
    const std::string& in_input_string, bool in_reset_autocomplete_controller, int32_t in_cursor_position, bool in_zero_suggest, bool in_prevent_inline_autocomplete, bool in_prefer_keyword, const std::string& in_current_url, int32_t in_page_classification) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "mojom::OmniboxPageHandler::StartOmniboxQuery");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kOmniboxPageHandler_StartOmniboxQuery_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::mojom::internal::OmniboxPageHandler_StartOmniboxQuery_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->input_string)::BaseType::BufferWriter
      input_string_writer;
  mojo::internal::Serialize<mojo::StringDataView>(
      in_input_string, buffer, &input_string_writer, &serialization_context);
  params->input_string.Set(
      input_string_writer.is_null() ? nullptr : input_string_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->input_string.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null input_string in OmniboxPageHandler.StartOmniboxQuery request");
  params->reset_autocomplete_controller = in_reset_autocomplete_controller;
  params->cursor_position = in_cursor_position;
  params->zero_suggest = in_zero_suggest;
  params->prevent_inline_autocomplete = in_prevent_inline_autocomplete;
  params->prefer_keyword = in_prefer_keyword;
  typename decltype(params->current_url)::BaseType::BufferWriter
      current_url_writer;
  mojo::internal::Serialize<mojo::StringDataView>(
      in_current_url, buffer, &current_url_writer, &serialization_context);
  params->current_url.Set(
      current_url_writer.is_null() ? nullptr : current_url_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->current_url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null current_url in OmniboxPageHandler.StartOmniboxQuery request");
  params->page_classification = in_page_classification;
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(OmniboxPageHandler::Name_);
  message.set_method_name("StartOmniboxQuery");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool OmniboxPageHandlerStubDispatch::Accept(
    OmniboxPageHandler* impl,
    mojo::Message* message) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  switch (message->header()->name) {
    case internal::kOmniboxPageHandler_SetClientPage_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojom::OmniboxPageHandler::SetClientPage",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojom::OmniboxPageHandler::SetClientPage");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::OmniboxPageHandler_SetClientPage_Params_Data* params =
          reinterpret_cast<internal::OmniboxPageHandler_SetClientPage_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingRemote<OmniboxPage> p_page{};
      OmniboxPageHandler_SetClientPage_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success) {
        p_page =
            input_data_view.TakePage<decltype(p_page)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            OmniboxPageHandler::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetClientPage(
std::move(p_page));
      return true;
    }
    case internal::kOmniboxPageHandler_StartOmniboxQuery_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojom::OmniboxPageHandler::StartOmniboxQuery",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojom::OmniboxPageHandler::StartOmniboxQuery");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::OmniboxPageHandler_StartOmniboxQuery_Params_Data* params =
          reinterpret_cast<internal::OmniboxPageHandler_StartOmniboxQuery_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_input_string{};
      bool p_reset_autocomplete_controller{};
      int32_t p_cursor_position{};
      bool p_zero_suggest{};
      bool p_prevent_inline_autocomplete{};
      bool p_prefer_keyword{};
      std::string p_current_url{};
      int32_t p_page_classification{};
      OmniboxPageHandler_StartOmniboxQuery_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadInputString(&p_input_string))
        success = false;
      if (success)
        p_reset_autocomplete_controller = input_data_view.reset_autocomplete_controller();
      if (success)
        p_cursor_position = input_data_view.cursor_position();
      if (success)
        p_zero_suggest = input_data_view.zero_suggest();
      if (success)
        p_prevent_inline_autocomplete = input_data_view.prevent_inline_autocomplete();
      if (success)
        p_prefer_keyword = input_data_view.prefer_keyword();
      if (success && !input_data_view.ReadCurrentUrl(&p_current_url))
        success = false;
      if (success)
        p_page_classification = input_data_view.page_classification();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            OmniboxPageHandler::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->StartOmniboxQuery(
std::move(p_input_string), 
std::move(p_reset_autocomplete_controller), 
std::move(p_cursor_position), 
std::move(p_zero_suggest), 
std::move(p_prevent_inline_autocomplete), 
std::move(p_prefer_keyword), 
std::move(p_current_url), 
std::move(p_page_classification));
      return true;
    }
  }
  return false;
}

// static
bool OmniboxPageHandlerStubDispatch::AcceptWithResponder(
    OmniboxPageHandler* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kOmniboxPageHandler_SetClientPage_Name: {
      break;
    }
    case internal::kOmniboxPageHandler_StartOmniboxQuery_Name: {
      break;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kOmniboxPageHandlerValidationInfo[] = {
    {internal::kOmniboxPageHandler_SetClientPage_Name,
     {&internal::OmniboxPageHandler_SetClientPage_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kOmniboxPageHandler_StartOmniboxQuery_Name,
     {&internal::OmniboxPageHandler_StartOmniboxQuery_Params_Data::Validate,
      nullptr /* no response */}},
};

bool OmniboxPageHandlerRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojom::OmniboxPageHandler::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kOmniboxPageHandlerValidationInfo);
}

const char OmniboxPage::Name_[] = "mojom.OmniboxPage";

OmniboxPageProxy::OmniboxPageProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void OmniboxPageProxy::HandleNewAutocompleteResponse(
    OmniboxResponsePtr in_response, bool in_is_page_controller) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "mojom::OmniboxPage::HandleNewAutocompleteResponse");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kOmniboxPage_HandleNewAutocompleteResponse_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::mojom::internal::OmniboxPage_HandleNewAutocompleteResponse_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->response)::BaseType::BufferWriter
      response_writer;
  mojo::internal::Serialize<::mojom::OmniboxResponseDataView>(
      in_response, buffer, &response_writer, &serialization_context);
  params->response.Set(
      response_writer.is_null() ? nullptr : response_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->response.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null response in OmniboxPage.HandleNewAutocompleteResponse request");
  params->is_page_controller = in_is_page_controller;
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(OmniboxPage::Name_);
  message.set_method_name("HandleNewAutocompleteResponse");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void OmniboxPageProxy::HandleNewAutocompleteQuery(
    bool in_is_page_controller, const std::string& in_input_text) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "mojom::OmniboxPage::HandleNewAutocompleteQuery");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kOmniboxPage_HandleNewAutocompleteQuery_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::mojom::internal::OmniboxPage_HandleNewAutocompleteQuery_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  params->is_page_controller = in_is_page_controller;
  typename decltype(params->input_text)::BaseType::BufferWriter
      input_text_writer;
  mojo::internal::Serialize<mojo::StringDataView>(
      in_input_text, buffer, &input_text_writer, &serialization_context);
  params->input_text.Set(
      input_text_writer.is_null() ? nullptr : input_text_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->input_text.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null input_text in OmniboxPage.HandleNewAutocompleteQuery request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(OmniboxPage::Name_);
  message.set_method_name("HandleNewAutocompleteQuery");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void OmniboxPageProxy::HandleAnswerImageData(
    const std::string& in_image_url, const std::string& in_image_data) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "mojom::OmniboxPage::HandleAnswerImageData");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kOmniboxPage_HandleAnswerImageData_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::mojom::internal::OmniboxPage_HandleAnswerImageData_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->image_url)::BaseType::BufferWriter
      image_url_writer;
  mojo::internal::Serialize<mojo::StringDataView>(
      in_image_url, buffer, &image_url_writer, &serialization_context);
  params->image_url.Set(
      image_url_writer.is_null() ? nullptr : image_url_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->image_url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null image_url in OmniboxPage.HandleAnswerImageData request");
  typename decltype(params->image_data)::BaseType::BufferWriter
      image_data_writer;
  mojo::internal::Serialize<mojo::StringDataView>(
      in_image_data, buffer, &image_data_writer, &serialization_context);
  params->image_data.Set(
      image_data_writer.is_null() ? nullptr : image_data_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->image_data.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null image_data in OmniboxPage.HandleAnswerImageData request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(OmniboxPage::Name_);
  message.set_method_name("HandleAnswerImageData");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool OmniboxPageStubDispatch::Accept(
    OmniboxPage* impl,
    mojo::Message* message) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  switch (message->header()->name) {
    case internal::kOmniboxPage_HandleNewAutocompleteResponse_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojom::OmniboxPage::HandleNewAutocompleteResponse",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojom::OmniboxPage::HandleNewAutocompleteResponse");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::OmniboxPage_HandleNewAutocompleteResponse_Params_Data* params =
          reinterpret_cast<internal::OmniboxPage_HandleNewAutocompleteResponse_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      OmniboxResponsePtr p_response{};
      bool p_is_page_controller{};
      OmniboxPage_HandleNewAutocompleteResponse_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadResponse(&p_response))
        success = false;
      if (success)
        p_is_page_controller = input_data_view.is_page_controller();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            OmniboxPage::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->HandleNewAutocompleteResponse(
std::move(p_response), 
std::move(p_is_page_controller));
      return true;
    }
    case internal::kOmniboxPage_HandleNewAutocompleteQuery_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojom::OmniboxPage::HandleNewAutocompleteQuery",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojom::OmniboxPage::HandleNewAutocompleteQuery");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::OmniboxPage_HandleNewAutocompleteQuery_Params_Data* params =
          reinterpret_cast<internal::OmniboxPage_HandleNewAutocompleteQuery_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      bool p_is_page_controller{};
      std::string p_input_text{};
      OmniboxPage_HandleNewAutocompleteQuery_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success)
        p_is_page_controller = input_data_view.is_page_controller();
      if (success && !input_data_view.ReadInputText(&p_input_text))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            OmniboxPage::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->HandleNewAutocompleteQuery(
std::move(p_is_page_controller), 
std::move(p_input_text));
      return true;
    }
    case internal::kOmniboxPage_HandleAnswerImageData_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)mojom::OmniboxPage::HandleAnswerImageData",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)mojom::OmniboxPage::HandleAnswerImageData");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::OmniboxPage_HandleAnswerImageData_Params_Data* params =
          reinterpret_cast<internal::OmniboxPage_HandleAnswerImageData_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_image_url{};
      std::string p_image_data{};
      OmniboxPage_HandleAnswerImageData_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadImageUrl(&p_image_url))
        success = false;
      if (success && !input_data_view.ReadImageData(&p_image_data))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            OmniboxPage::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->HandleAnswerImageData(
std::move(p_image_url), 
std::move(p_image_data));
      return true;
    }
  }
  return false;
}

// static
bool OmniboxPageStubDispatch::AcceptWithResponder(
    OmniboxPage* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kOmniboxPage_HandleNewAutocompleteResponse_Name: {
      break;
    }
    case internal::kOmniboxPage_HandleNewAutocompleteQuery_Name: {
      break;
    }
    case internal::kOmniboxPage_HandleAnswerImageData_Name: {
      break;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kOmniboxPageValidationInfo[] = {
    {internal::kOmniboxPage_HandleNewAutocompleteResponse_Name,
     {&internal::OmniboxPage_HandleNewAutocompleteResponse_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kOmniboxPage_HandleNewAutocompleteQuery_Name,
     {&internal::OmniboxPage_HandleNewAutocompleteQuery_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kOmniboxPage_HandleAnswerImageData_Name,
     {&internal::OmniboxPage_HandleAnswerImageData_Params_Data::Validate,
      nullptr /* no response */}},
};

bool OmniboxPageRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojom::OmniboxPage::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kOmniboxPageValidationInfo);
}

}  // namespace mojom

namespace mojo {


// static
bool StructTraits<::mojom::ACMatchClassification::DataView, ::mojom::ACMatchClassificationPtr>::Read(
    ::mojom::ACMatchClassification::DataView input,
    ::mojom::ACMatchClassificationPtr* output) {
  bool success = true;
  ::mojom::ACMatchClassificationPtr result(::mojom::ACMatchClassification::New());
  
      if (success)
        result->offset = input.offset();
      if (success)
        result->style = input.style();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::mojom::AutocompleteAdditionalInfo::DataView, ::mojom::AutocompleteAdditionalInfoPtr>::Read(
    ::mojom::AutocompleteAdditionalInfo::DataView input,
    ::mojom::AutocompleteAdditionalInfoPtr* output) {
  bool success = true;
  ::mojom::AutocompleteAdditionalInfoPtr result(::mojom::AutocompleteAdditionalInfo::New());
  
      if (success && !input.ReadKey(&result->key))
        success = false;
      if (success && !input.ReadValue(&result->value))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::mojom::AutocompleteMatch::DataView, ::mojom::AutocompleteMatchPtr>::Read(
    ::mojom::AutocompleteMatch::DataView input,
    ::mojom::AutocompleteMatchPtr* output) {
  bool success = true;
  ::mojom::AutocompleteMatchPtr result(::mojom::AutocompleteMatch::New());
  
      if (success && !input.ReadProviderName(&result->provider_name))
        success = false;
      if (success)
        result->provider_done = input.provider_done();
      if (success)
        result->relevance = input.relevance();
      if (success)
        result->deletable = input.deletable();
      if (success && !input.ReadFillIntoEdit(&result->fill_into_edit))
        success = false;
      if (success && !input.ReadInlineAutocompletion(&result->inline_autocompletion))
        success = false;
      if (success && !input.ReadDestinationUrl(&result->destination_url))
        success = false;
      if (success && !input.ReadStrippedDestinationUrl(&result->stripped_destination_url))
        success = false;
      if (success && !input.ReadImage(&result->image))
        success = false;
      if (success && !input.ReadContents(&result->contents))
        success = false;
      if (success && !input.ReadContentsClass(&result->contents_class))
        success = false;
      if (success && !input.ReadDescription(&result->description))
        success = false;
      if (success && !input.ReadDescriptionClass(&result->description_class))
        success = false;
      if (success)
        result->swap_contents_and_description = input.swap_contents_and_description();
      if (success && !input.ReadAnswer(&result->answer))
        success = false;
      if (success && !input.ReadTransition(&result->transition))
        success = false;
      if (success)
        result->allowed_to_be_default_match = input.allowed_to_be_default_match();
      if (success && !input.ReadType(&result->type))
        success = false;
      if (success)
        result->is_search_type = input.is_search_type();
      if (success)
        result->has_tab_match = input.has_tab_match();
      if (success && !input.ReadAssociatedKeyword(&result->associated_keyword))
        success = false;
      if (success && !input.ReadKeyword(&result->keyword))
        success = false;
      if (success)
        result->starred = input.starred();
      if (success)
        result->duplicates = input.duplicates();
      if (success)
        result->from_previous = input.from_previous();
      if (success && !input.ReadAdditionalInfo(&result->additional_info))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::mojom::AutocompleteResultsForProvider::DataView, ::mojom::AutocompleteResultsForProviderPtr>::Read(
    ::mojom::AutocompleteResultsForProvider::DataView input,
    ::mojom::AutocompleteResultsForProviderPtr* output) {
  bool success = true;
  ::mojom::AutocompleteResultsForProviderPtr result(::mojom::AutocompleteResultsForProvider::New());
  
      if (success && !input.ReadProviderName(&result->provider_name))
        success = false;
      if (success && !input.ReadResults(&result->results))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::mojom::OmniboxResponse::DataView, ::mojom::OmniboxResponsePtr>::Read(
    ::mojom::OmniboxResponse::DataView input,
    ::mojom::OmniboxResponsePtr* output) {
  bool success = true;
  ::mojom::OmniboxResponsePtr result(::mojom::OmniboxResponse::New());
  
      if (success)
        result->cursor_position = input.cursor_position();
      if (success)
        result->time_since_omnibox_started_ms = input.time_since_omnibox_started_ms();
      if (success)
        result->done = input.done();
      if (success && !input.ReadType(&result->type))
        success = false;
      if (success && !input.ReadHost(&result->host))
        success = false;
      if (success)
        result->is_typed_host = input.is_typed_host();
      if (success && !input.ReadInputText(&result->input_text))
        success = false;
      if (success && !input.ReadCombinedResults(&result->combined_results))
        success = false;
      if (success && !input.ReadResultsByProvider(&result->results_by_provider))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
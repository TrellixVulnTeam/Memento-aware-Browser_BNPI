// chrome/browser/ui/webui/omnibox/omnibox.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "chrome/browser/ui/webui/omnibox/omnibox.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"


#ifndef CHROME_BROWSER_UI_WEBUI_OMNIBOX_OMNIBOX_MOJOM_JUMBO_H_
#define CHROME_BROWSER_UI_WEBUI_OMNIBOX_OMNIBOX_MOJOM_JUMBO_H_
#endif


namespace mojom {


void OmniboxPageHandlerInterceptorForTesting::SetClientPage(::mojo::PendingRemote<OmniboxPage> page) {
  GetForwardingInterface()->SetClientPage(std::move(page));
}
void OmniboxPageHandlerInterceptorForTesting::StartOmniboxQuery(const std::string& input_string, bool reset_autocomplete_controller, int32_t cursor_position, bool zero_suggest, bool prevent_inline_autocomplete, bool prefer_keyword, const std::string& current_url, int32_t page_classification) {
  GetForwardingInterface()->StartOmniboxQuery(std::move(input_string), std::move(reset_autocomplete_controller), std::move(cursor_position), std::move(zero_suggest), std::move(prevent_inline_autocomplete), std::move(prefer_keyword), std::move(current_url), std::move(page_classification));
}
OmniboxPageHandlerAsyncWaiter::OmniboxPageHandlerAsyncWaiter(
    OmniboxPageHandler* proxy) : proxy_(proxy) {}

OmniboxPageHandlerAsyncWaiter::~OmniboxPageHandlerAsyncWaiter() = default;




void OmniboxPageInterceptorForTesting::HandleNewAutocompleteResponse(OmniboxResponsePtr response, bool is_page_controller) {
  GetForwardingInterface()->HandleNewAutocompleteResponse(std::move(response), std::move(is_page_controller));
}
void OmniboxPageInterceptorForTesting::HandleNewAutocompleteQuery(bool is_page_controller, const std::string& input_text) {
  GetForwardingInterface()->HandleNewAutocompleteQuery(std::move(is_page_controller), std::move(input_text));
}
void OmniboxPageInterceptorForTesting::HandleAnswerImageData(const std::string& image_url, const std::string& image_data) {
  GetForwardingInterface()->HandleAnswerImageData(std::move(image_url), std::move(image_data));
}
OmniboxPageAsyncWaiter::OmniboxPageAsyncWaiter(
    OmniboxPage* proxy) : proxy_(proxy) {}

OmniboxPageAsyncWaiter::~OmniboxPageAsyncWaiter() = default;






}  // namespace mojom

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
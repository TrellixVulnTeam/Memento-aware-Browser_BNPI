// chrome/browser/ui/webui/discards/site_data.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_UI_WEBUI_DISCARDS_SITE_DATA_MOJOM_PARAMS_DATA_H_
#define CHROME_BROWSER_UI_WEBUI_DISCARDS_SITE_DATA_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace discards {
namespace mojom {
namespace internal {
class  SiteDataProvider_GetSiteCharacteristicsDatabase_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SiteDataProvider_GetSiteCharacteristicsDatabase_Params_Data));
      new (data()) SiteDataProvider_GetSiteCharacteristicsDatabase_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SiteDataProvider_GetSiteCharacteristicsDatabase_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SiteDataProvider_GetSiteCharacteristicsDatabase_Params_Data>(index_);
    }
    SiteDataProvider_GetSiteCharacteristicsDatabase_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<mojo::internal::String_Data>>> explicitly_requested_origins;

 private:
  SiteDataProvider_GetSiteCharacteristicsDatabase_Params_Data();
  ~SiteDataProvider_GetSiteCharacteristicsDatabase_Params_Data() = delete;
};
static_assert(sizeof(SiteDataProvider_GetSiteCharacteristicsDatabase_Params_Data) == 16,
              "Bad sizeof(SiteDataProvider_GetSiteCharacteristicsDatabase_Params_Data)");
class  SiteDataProvider_GetSiteCharacteristicsDatabase_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SiteDataProvider_GetSiteCharacteristicsDatabase_ResponseParams_Data));
      new (data()) SiteDataProvider_GetSiteCharacteristicsDatabase_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SiteDataProvider_GetSiteCharacteristicsDatabase_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SiteDataProvider_GetSiteCharacteristicsDatabase_ResponseParams_Data>(index_);
    }
    SiteDataProvider_GetSiteCharacteristicsDatabase_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::SiteCharacteristicsDatabase_Data> result;

 private:
  SiteDataProvider_GetSiteCharacteristicsDatabase_ResponseParams_Data();
  ~SiteDataProvider_GetSiteCharacteristicsDatabase_ResponseParams_Data() = delete;
};
static_assert(sizeof(SiteDataProvider_GetSiteCharacteristicsDatabase_ResponseParams_Data) == 16,
              "Bad sizeof(SiteDataProvider_GetSiteCharacteristicsDatabase_ResponseParams_Data)");
class  SiteDataProvider_GetSiteCharacteristicsDatabaseSize_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SiteDataProvider_GetSiteCharacteristicsDatabaseSize_Params_Data));
      new (data()) SiteDataProvider_GetSiteCharacteristicsDatabaseSize_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SiteDataProvider_GetSiteCharacteristicsDatabaseSize_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SiteDataProvider_GetSiteCharacteristicsDatabaseSize_Params_Data>(index_);
    }
    SiteDataProvider_GetSiteCharacteristicsDatabaseSize_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  SiteDataProvider_GetSiteCharacteristicsDatabaseSize_Params_Data();
  ~SiteDataProvider_GetSiteCharacteristicsDatabaseSize_Params_Data() = delete;
};
static_assert(sizeof(SiteDataProvider_GetSiteCharacteristicsDatabaseSize_Params_Data) == 8,
              "Bad sizeof(SiteDataProvider_GetSiteCharacteristicsDatabaseSize_Params_Data)");
class  SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ResponseParams_Data));
      new (data()) SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ResponseParams_Data>(index_);
    }
    SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::SiteCharacteristicsDatabaseSize_Data> db_size;

 private:
  SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ResponseParams_Data();
  ~SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ResponseParams_Data() = delete;
};
static_assert(sizeof(SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ResponseParams_Data) == 16,
              "Bad sizeof(SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ResponseParams_Data)");

}  // namespace internal
class SiteDataProvider_GetSiteCharacteristicsDatabase_ParamsDataView {
 public:
  SiteDataProvider_GetSiteCharacteristicsDatabase_ParamsDataView() {}

  SiteDataProvider_GetSiteCharacteristicsDatabase_ParamsDataView(
      internal::SiteDataProvider_GetSiteCharacteristicsDatabase_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetExplicitlyRequestedOriginsDataView(
      mojo::ArrayDataView<mojo::StringDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadExplicitlyRequestedOrigins(UserType* output) {
    auto* pointer = data_->explicitly_requested_origins.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<mojo::StringDataView>>(
        pointer, output, context_);
  }
 private:
  internal::SiteDataProvider_GetSiteCharacteristicsDatabase_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class SiteDataProvider_GetSiteCharacteristicsDatabase_ResponseParamsDataView {
 public:
  SiteDataProvider_GetSiteCharacteristicsDatabase_ResponseParamsDataView() {}

  SiteDataProvider_GetSiteCharacteristicsDatabase_ResponseParamsDataView(
      internal::SiteDataProvider_GetSiteCharacteristicsDatabase_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      SiteCharacteristicsDatabaseDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadResult(UserType* output) {
    auto* pointer = data_->result.Get();
    return mojo::internal::Deserialize<::discards::mojom::SiteCharacteristicsDatabaseDataView>(
        pointer, output, context_);
  }
 private:
  internal::SiteDataProvider_GetSiteCharacteristicsDatabase_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ParamsDataView {
 public:
  SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ParamsDataView() {}

  SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ParamsDataView(
      internal::SiteDataProvider_GetSiteCharacteristicsDatabaseSize_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SiteDataProvider_GetSiteCharacteristicsDatabaseSize_Params_Data* data_ = nullptr;
};

class SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ResponseParamsDataView {
 public:
  SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ResponseParamsDataView() {}

  SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ResponseParamsDataView(
      internal::SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDbSizeDataView(
      SiteCharacteristicsDatabaseSizeDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDbSize(UserType* output) {
    auto* pointer = data_->db_size.Get();
    return mojo::internal::Deserialize<::discards::mojom::SiteCharacteristicsDatabaseSizeDataView>(
        pointer, output, context_);
  }
 private:
  internal::SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};


inline void SiteDataProvider_GetSiteCharacteristicsDatabase_ParamsDataView::GetExplicitlyRequestedOriginsDataView(
    mojo::ArrayDataView<mojo::StringDataView>* output) {
  auto pointer = data_->explicitly_requested_origins.Get();
  *output = mojo::ArrayDataView<mojo::StringDataView>(pointer, context_);
}


inline void SiteDataProvider_GetSiteCharacteristicsDatabase_ResponseParamsDataView::GetResultDataView(
    SiteCharacteristicsDatabaseDataView* output) {
  auto pointer = data_->result.Get();
  *output = SiteCharacteristicsDatabaseDataView(pointer, context_);
}




inline void SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ResponseParamsDataView::GetDbSizeDataView(
    SiteCharacteristicsDatabaseSizeDataView* output) {
  auto pointer = data_->db_size.Get();
  *output = SiteCharacteristicsDatabaseSizeDataView(pointer, context_);
}

}  // namespace mojom
}  // namespace discards

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CHROME_BROWSER_UI_WEBUI_DISCARDS_SITE_DATA_MOJOM_PARAMS_DATA_H_
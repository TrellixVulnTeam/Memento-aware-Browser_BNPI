// chrome/browser/ui/webui/new_tab_page/new_tab_page.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'chrome/browser/ui/webui/new_tab_page/new_tab_page.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('newTabPage.mojom');
  var text_direction$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/text_direction.mojom', '../../../../../mojo/public/mojom/base/text_direction.mojom.js');
  }
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../../../mojo/public/mojom/base/time.mojom.js');
  }
  var skcolor$ =
      mojo.internal.exposeNamespace('skia.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'skia/public/mojom/skcolor.mojom', '../../../../../skia/public/mojom/skcolor.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../../url/mojom/url.mojom.js');
  }
  var string16$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/string16.mojom', '../../../../../mojo/public/mojom/base/string16.mojom.js');
  }
  var omnibox$ =
      mojo.internal.exposeNamespace('search.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'chrome/common/search/omnibox.mojom', '../../../../common/search/omnibox.mojom.js');
  }


  var ThemeType = {};
  ThemeType.DEFAULT = 0;
  ThemeType.AUTOGENERATED = 1;
  ThemeType.CHROME = 2;
  ThemeType.THIRD_PARTY = 3;
  ThemeType.MIN_VALUE = 0,
  ThemeType.MAX_VALUE = 3,

  ThemeType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    }
    return false;
  };

  ThemeType.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var DoodleImageType = {};
  DoodleImageType.ANIMATION = 0;
  DoodleImageType.CTA = 1;
  DoodleImageType.STATIC = 2;
  DoodleImageType.MIN_VALUE = 0,
  DoodleImageType.MAX_VALUE = 2,

  DoodleImageType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  DoodleImageType.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var DoodleShareChannel = {};
  DoodleShareChannel.FACEBOOK = 0;
  DoodleShareChannel.TWITTER = 1;
  DoodleShareChannel.EMAIL = 2;
  DoodleShareChannel.LINK_COPY = 3;
  DoodleShareChannel.MIN_VALUE = 0,
  DoodleShareChannel.MAX_VALUE = 3,

  DoodleShareChannel.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    }
    return false;
  };

  DoodleShareChannel.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var CustomizeDialogAction = {};
  CustomizeDialogAction.CANCEL_CLICKED = 0;
  CustomizeDialogAction.DONE_CLICKED = 1;
  CustomizeDialogAction.OPEN_CLICKED = 2;
  CustomizeDialogAction.BACKGROUNDS_BACK_CLICKED = 3;
  CustomizeDialogAction.BACKGROUNDS_NO_BACKGROUND_SELECTED = 4;
  CustomizeDialogAction.BACKGROUNDS_COLLECTION_OPENED = 5;
  CustomizeDialogAction.BACKGROUNDS_REFRESH_TOGGLE_CLICKED = 6;
  CustomizeDialogAction.BACKGROUNDS_IMAGE_SELECTED = 7;
  CustomizeDialogAction.BACKGROUNDS_UPLOAD_FROM_DEVICE_CLICKED = 8;
  CustomizeDialogAction.SHORTCUTS_CUSTOM_LINKS_CLICKED = 9;
  CustomizeDialogAction.SHORTCUTS_MOST_VISITED_CLICKED = 10;
  CustomizeDialogAction.SHORTCUTS_VISIBILITY_TOGGLE_CLICKED = 11;
  CustomizeDialogAction.MIN_VALUE = 0,
  CustomizeDialogAction.MAX_VALUE = 11,

  CustomizeDialogAction.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    }
    return false;
  };

  CustomizeDialogAction.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var VoiceSearchAction = {};
  VoiceSearchAction.ACTIVATE_SEARCH_BOX = 0;
  VoiceSearchAction.ACTIVATE_KEYBOARD = 1;
  VoiceSearchAction.CLOSE_OVERLAY = 2;
  VoiceSearchAction.QUERY_SUBMITTED = 3;
  VoiceSearchAction.SUPPORT_LINK_CLICKED = 4;
  VoiceSearchAction.TRY_AGAIN_LINK = 5;
  VoiceSearchAction.TRY_AGAIN_MIC_BUTTON = 6;
  VoiceSearchAction.MIN_VALUE = 0,
  VoiceSearchAction.MAX_VALUE = 6,

  VoiceSearchAction.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    }
    return false;
  };

  VoiceSearchAction.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var VoiceSearchError = {};
  VoiceSearchError.ABORTED = 0;
  VoiceSearchError.NO_SPEECH = 1;
  VoiceSearchError.AUDIO_CAPTURE = 2;
  VoiceSearchError.NETWORK = 3;
  VoiceSearchError.NOT_ALLOWED = 4;
  VoiceSearchError.LANGUAGE_NOT_SUPPORTED = 5;
  VoiceSearchError.NO_MATCH = 6;
  VoiceSearchError.SERVICE_NOT_ALLOWED = 7;
  VoiceSearchError.BAD_GRAMMAR = 8;
  VoiceSearchError.OTHER = 9;
  VoiceSearchError.MIN_VALUE = 0,
  VoiceSearchError.MAX_VALUE = 9,

  VoiceSearchError.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    }
    return false;
  };

  VoiceSearchError.validate = function(enumValue) {
    var isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function OneGoogleBarParts(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  OneGoogleBarParts.prototype.initDefaults_ = function() {
    this.barHtml = null;
    this.inHeadScript = null;
    this.inHeadStyle = null;
    this.afterBarScript = null;
    this.endOfBodyHtml = null;
    this.endOfBodyScript = null;
  };
  OneGoogleBarParts.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  OneGoogleBarParts.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 56}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate OneGoogleBarParts.barHtml
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate OneGoogleBarParts.inHeadScript
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate OneGoogleBarParts.inHeadStyle
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate OneGoogleBarParts.afterBarScript
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 24, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate OneGoogleBarParts.endOfBodyHtml
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 32, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate OneGoogleBarParts.endOfBodyScript
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 40, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  OneGoogleBarParts.encodedSize = codec.kStructHeaderSize + 48;

  OneGoogleBarParts.decode = function(decoder) {
    var packed;
    var val = new OneGoogleBarParts();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.barHtml =
        decoder.decodeStruct(codec.String);
    val.inHeadScript =
        decoder.decodeStruct(codec.String);
    val.inHeadStyle =
        decoder.decodeStruct(codec.String);
    val.afterBarScript =
        decoder.decodeStruct(codec.String);
    val.endOfBodyHtml =
        decoder.decodeStruct(codec.String);
    val.endOfBodyScript =
        decoder.decodeStruct(codec.String);
    return val;
  };

  OneGoogleBarParts.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(OneGoogleBarParts.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.barHtml);
    encoder.encodeStruct(codec.String, val.inHeadScript);
    encoder.encodeStruct(codec.String, val.inHeadStyle);
    encoder.encodeStruct(codec.String, val.afterBarScript);
    encoder.encodeStruct(codec.String, val.endOfBodyHtml);
    encoder.encodeStruct(codec.String, val.endOfBodyScript);
  };
  function MostVisitedTile(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MostVisitedTile.prototype.initDefaults_ = function() {
    this.title = null;
    this.titleDirection = 0;
    this.source = 0;
    this.url = null;
    this.titleSource = 0;
    this.dataGenerationTime = null;
  };
  MostVisitedTile.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MostVisitedTile.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MostVisitedTile.title
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate MostVisitedTile.titleDirection
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 8, text_direction$.TextDirection);
    if (err !== validator.validationError.NONE)
        return err;


    // validate MostVisitedTile.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;




    // validate MostVisitedTile.dataGenerationTime
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, time$.Time, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MostVisitedTile.encodedSize = codec.kStructHeaderSize + 40;

  MostVisitedTile.decode = function(decoder) {
    var packed;
    var val = new MostVisitedTile();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.title =
        decoder.decodeStruct(codec.String);
    val.titleDirection =
        decoder.decodeStruct(codec.Int32);
    val.source =
        decoder.decodeStruct(codec.Int32);
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.titleSource =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.dataGenerationTime =
        decoder.decodeStructPointer(time$.Time);
    return val;
  };

  MostVisitedTile.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MostVisitedTile.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.title);
    encoder.encodeStruct(codec.Int32, val.titleDirection);
    encoder.encodeStruct(codec.Int32, val.source);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStruct(codec.Int32, val.titleSource);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(time$.Time, val.dataGenerationTime);
  };
  function MostVisitedInfo(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  MostVisitedInfo.prototype.initDefaults_ = function() {
    this.customLinksEnabled = false;
    this.visible = false;
    this.tiles = null;
  };
  MostVisitedInfo.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  MostVisitedInfo.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;




    // validate MostVisitedInfo.tiles
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(MostVisitedTile), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  MostVisitedInfo.encodedSize = codec.kStructHeaderSize + 16;

  MostVisitedInfo.decode = function(decoder) {
    var packed;
    var val = new MostVisitedInfo();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.customLinksEnabled = (packed >> 0) & 1 ? true : false;
    val.visible = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.tiles =
        decoder.decodeArrayPointer(new codec.PointerTo(MostVisitedTile));
    return val;
  };

  MostVisitedInfo.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(MostVisitedInfo.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.customLinksEnabled & 1) << 0
    packed |= (val.visible & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(new codec.PointerTo(MostVisitedTile), val.tiles);
  };
  function ThemeColors(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ThemeColors.prototype.initDefaults_ = function() {
    this.frame = null;
    this.activeTab = null;
  };
  ThemeColors.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ThemeColors.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ThemeColors.frame
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ThemeColors.activeTab
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ThemeColors.encodedSize = codec.kStructHeaderSize + 16;

  ThemeColors.decode = function(decoder) {
    var packed;
    var val = new ThemeColors();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.frame =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.activeTab =
        decoder.decodeStructPointer(skcolor$.SkColor);
    return val;
  };

  ThemeColors.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ThemeColors.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(skcolor$.SkColor, val.frame);
    encoder.encodeStructPointer(skcolor$.SkColor, val.activeTab);
  };
  function BackgroundCollection(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BackgroundCollection.prototype.initDefaults_ = function() {
    this.id = null;
    this.label = null;
    this.previewImageUrl = null;
  };
  BackgroundCollection.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BackgroundCollection.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BackgroundCollection.id
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate BackgroundCollection.label
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate BackgroundCollection.previewImageUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BackgroundCollection.encodedSize = codec.kStructHeaderSize + 24;

  BackgroundCollection.decode = function(decoder) {
    var packed;
    var val = new BackgroundCollection();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.String);
    val.label =
        decoder.decodeStruct(codec.String);
    val.previewImageUrl =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  BackgroundCollection.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BackgroundCollection.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.id);
    encoder.encodeStruct(codec.String, val.label);
    encoder.encodeStructPointer(url$.Url, val.previewImageUrl);
  };
  function CollectionImage(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CollectionImage.prototype.initDefaults_ = function() {
    this.attribution1 = null;
    this.attribution2 = null;
    this.attributionUrl = null;
    this.imageUrl = null;
    this.previewImageUrl = null;
  };
  CollectionImage.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CollectionImage.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CollectionImage.attribution1
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate CollectionImage.attribution2
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate CollectionImage.attributionUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CollectionImage.imageUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CollectionImage.previewImageUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CollectionImage.encodedSize = codec.kStructHeaderSize + 40;

  CollectionImage.decode = function(decoder) {
    var packed;
    var val = new CollectionImage();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.attribution1 =
        decoder.decodeStruct(codec.String);
    val.attribution2 =
        decoder.decodeStruct(codec.String);
    val.attributionUrl =
        decoder.decodeStructPointer(url$.Url);
    val.imageUrl =
        decoder.decodeStructPointer(url$.Url);
    val.previewImageUrl =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  CollectionImage.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CollectionImage.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.attribution1);
    encoder.encodeStruct(codec.String, val.attribution2);
    encoder.encodeStructPointer(url$.Url, val.attributionUrl);
    encoder.encodeStructPointer(url$.Url, val.imageUrl);
    encoder.encodeStructPointer(url$.Url, val.previewImageUrl);
  };
  function ChromeTheme(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ChromeTheme.prototype.initDefaults_ = function() {
    this.id = 0;
    this.label = null;
    this.colors = null;
  };
  ChromeTheme.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ChromeTheme.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate ChromeTheme.label
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate ChromeTheme.colors
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, ThemeColors, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ChromeTheme.encodedSize = codec.kStructHeaderSize + 24;

  ChromeTheme.decode = function(decoder) {
    var packed;
    var val = new ChromeTheme();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.label =
        decoder.decodeStruct(codec.String);
    val.colors =
        decoder.decodeStructPointer(ThemeColors);
    return val;
  };

  ChromeTheme.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ChromeTheme.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.id);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.label);
    encoder.encodeStructPointer(ThemeColors, val.colors);
  };
  function ThirdPartyThemeInfo(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ThirdPartyThemeInfo.prototype.initDefaults_ = function() {
    this.id = null;
    this.name = null;
  };
  ThirdPartyThemeInfo.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ThirdPartyThemeInfo.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ThirdPartyThemeInfo.id
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate ThirdPartyThemeInfo.name
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ThirdPartyThemeInfo.encodedSize = codec.kStructHeaderSize + 16;

  ThirdPartyThemeInfo.decode = function(decoder) {
    var packed;
    var val = new ThirdPartyThemeInfo();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.String);
    val.name =
        decoder.decodeStruct(codec.String);
    return val;
  };

  ThirdPartyThemeInfo.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ThirdPartyThemeInfo.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.id);
    encoder.encodeStruct(codec.String, val.name);
  };
  function SearchBoxTheme(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  SearchBoxTheme.prototype.initDefaults_ = function() {
    this.bg = null;
    this.icon = null;
    this.iconSelected = null;
    this.placeholder = null;
    this.resultsBg = null;
    this.resultsBgHovered = null;
    this.resultsBgSelected = null;
    this.resultsDim = null;
    this.resultsDimSelected = null;
    this.resultsText = null;
    this.resultsTextSelected = null;
    this.resultsUrl = null;
    this.resultsUrlSelected = null;
    this.text = null;
  };
  SearchBoxTheme.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  SearchBoxTheme.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 120}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SearchBoxTheme.bg
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SearchBoxTheme.icon
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SearchBoxTheme.iconSelected
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SearchBoxTheme.placeholder
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SearchBoxTheme.resultsBg
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SearchBoxTheme.resultsBgHovered
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 40, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SearchBoxTheme.resultsBgSelected
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 48, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SearchBoxTheme.resultsDim
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 56, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SearchBoxTheme.resultsDimSelected
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 64, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SearchBoxTheme.resultsText
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 72, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SearchBoxTheme.resultsTextSelected
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 80, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SearchBoxTheme.resultsUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 88, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SearchBoxTheme.resultsUrlSelected
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 96, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate SearchBoxTheme.text
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 104, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  SearchBoxTheme.encodedSize = codec.kStructHeaderSize + 112;

  SearchBoxTheme.decode = function(decoder) {
    var packed;
    var val = new SearchBoxTheme();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bg =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.icon =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.iconSelected =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.placeholder =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.resultsBg =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.resultsBgHovered =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.resultsBgSelected =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.resultsDim =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.resultsDimSelected =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.resultsText =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.resultsTextSelected =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.resultsUrl =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.resultsUrlSelected =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.text =
        decoder.decodeStructPointer(skcolor$.SkColor);
    return val;
  };

  SearchBoxTheme.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(SearchBoxTheme.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(skcolor$.SkColor, val.bg);
    encoder.encodeStructPointer(skcolor$.SkColor, val.icon);
    encoder.encodeStructPointer(skcolor$.SkColor, val.iconSelected);
    encoder.encodeStructPointer(skcolor$.SkColor, val.placeholder);
    encoder.encodeStructPointer(skcolor$.SkColor, val.resultsBg);
    encoder.encodeStructPointer(skcolor$.SkColor, val.resultsBgHovered);
    encoder.encodeStructPointer(skcolor$.SkColor, val.resultsBgSelected);
    encoder.encodeStructPointer(skcolor$.SkColor, val.resultsDim);
    encoder.encodeStructPointer(skcolor$.SkColor, val.resultsDimSelected);
    encoder.encodeStructPointer(skcolor$.SkColor, val.resultsText);
    encoder.encodeStructPointer(skcolor$.SkColor, val.resultsTextSelected);
    encoder.encodeStructPointer(skcolor$.SkColor, val.resultsUrl);
    encoder.encodeStructPointer(skcolor$.SkColor, val.resultsUrlSelected);
    encoder.encodeStructPointer(skcolor$.SkColor, val.text);
  };
  function BackgroundImage(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  BackgroundImage.prototype.initDefaults_ = function() {
    this.url = null;
    this.url2x = null;
    this.attributionUrl = null;
    this.size = null;
    this.repeatX = null;
    this.repeatY = null;
    this.positionX = null;
    this.positionY = null;
  };
  BackgroundImage.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  BackgroundImage.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 72}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BackgroundImage.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BackgroundImage.url2x
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BackgroundImage.attributionUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, url$.Url, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate BackgroundImage.size
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 24, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate BackgroundImage.repeatX
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 32, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate BackgroundImage.repeatY
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 40, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate BackgroundImage.positionX
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 48, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate BackgroundImage.positionY
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 56, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  BackgroundImage.encodedSize = codec.kStructHeaderSize + 64;

  BackgroundImage.decode = function(decoder) {
    var packed;
    var val = new BackgroundImage();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.url2x =
        decoder.decodeStructPointer(url$.Url);
    val.attributionUrl =
        decoder.decodeStructPointer(url$.Url);
    val.size =
        decoder.decodeStruct(codec.NullableString);
    val.repeatX =
        decoder.decodeStruct(codec.NullableString);
    val.repeatY =
        decoder.decodeStruct(codec.NullableString);
    val.positionX =
        decoder.decodeStruct(codec.NullableString);
    val.positionY =
        decoder.decodeStruct(codec.NullableString);
    return val;
  };

  BackgroundImage.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(BackgroundImage.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStructPointer(url$.Url, val.url2x);
    encoder.encodeStructPointer(url$.Url, val.attributionUrl);
    encoder.encodeStruct(codec.NullableString, val.size);
    encoder.encodeStruct(codec.NullableString, val.repeatX);
    encoder.encodeStruct(codec.NullableString, val.repeatY);
    encoder.encodeStruct(codec.NullableString, val.positionX);
    encoder.encodeStruct(codec.NullableString, val.positionY);
  };
  function Theme(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Theme.prototype.initDefaults_ = function() {
    this.type = 0;
    this.shortcutUseWhiteAddIcon = false;
    this.shortcutUseTitlePill = false;
    this.isDark = false;
    this.backgroundColor = null;
    this.shortcutBackgroundColor = null;
    this.shortcutTextColor = null;
    this.logoColor = null;
    this.dailyRefreshCollectionId = null;
    this.backgroundImage = null;
    this.backgroundImageAttribution1 = null;
    this.backgroundImageAttribution2 = null;
    this.backgroundImageAttributionUrl = null;
    this.info = null;
    this.searchBox = null;
  };
  Theme.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Theme.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 112}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Theme.type
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, ThemeType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Theme.backgroundColor
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Theme.shortcutBackgroundColor
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Theme.shortcutTextColor
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;





    // validate Theme.logoColor
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, skcolor$.SkColor, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Theme.dailyRefreshCollectionId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 40, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Theme.backgroundImage
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 48, BackgroundImage, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Theme.backgroundImageAttribution1
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 56, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Theme.backgroundImageAttribution2
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 64, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate Theme.backgroundImageAttributionUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 72, url$.Url, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Theme.info
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 80, ThemeInfo, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Theme.searchBox
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 96, SearchBoxTheme, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Theme.encodedSize = codec.kStructHeaderSize + 104;

  Theme.decode = function(decoder) {
    var packed;
    var val = new Theme();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.type =
        decoder.decodeStruct(codec.Int32);
    packed = decoder.readUint8();
    val.shortcutUseWhiteAddIcon = (packed >> 0) & 1 ? true : false;
    val.shortcutUseTitlePill = (packed >> 1) & 1 ? true : false;
    val.isDark = (packed >> 2) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.backgroundColor =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.shortcutBackgroundColor =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.shortcutTextColor =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.logoColor =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.dailyRefreshCollectionId =
        decoder.decodeStruct(codec.NullableString);
    val.backgroundImage =
        decoder.decodeStructPointer(BackgroundImage);
    val.backgroundImageAttribution1 =
        decoder.decodeStruct(codec.NullableString);
    val.backgroundImageAttribution2 =
        decoder.decodeStruct(codec.NullableString);
    val.backgroundImageAttributionUrl =
        decoder.decodeStructPointer(url$.Url);
    val.info =
        decoder.decodeStruct(ThemeInfo);
    val.searchBox =
        decoder.decodeStructPointer(SearchBoxTheme);
    return val;
  };

  Theme.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Theme.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.type);
    packed = 0;
    packed |= (val.shortcutUseWhiteAddIcon & 1) << 0
    packed |= (val.shortcutUseTitlePill & 1) << 1
    packed |= (val.isDark & 1) << 2
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(skcolor$.SkColor, val.backgroundColor);
    encoder.encodeStructPointer(skcolor$.SkColor, val.shortcutBackgroundColor);
    encoder.encodeStructPointer(skcolor$.SkColor, val.shortcutTextColor);
    encoder.encodeStructPointer(skcolor$.SkColor, val.logoColor);
    encoder.encodeStruct(codec.NullableString, val.dailyRefreshCollectionId);
    encoder.encodeStructPointer(BackgroundImage, val.backgroundImage);
    encoder.encodeStruct(codec.NullableString, val.backgroundImageAttribution1);
    encoder.encodeStruct(codec.NullableString, val.backgroundImageAttribution2);
    encoder.encodeStructPointer(url$.Url, val.backgroundImageAttributionUrl);
    encoder.encodeStruct(ThemeInfo, val.info);
    encoder.encodeStructPointer(SearchBoxTheme, val.searchBox);
  };
  function DoodleShareButton(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DoodleShareButton.prototype.initDefaults_ = function() {
    this.x = 0;
    this.y = 0;
    this.backgroundColor = null;
    this.iconUrl = null;
  };
  DoodleShareButton.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DoodleShareButton.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;




    // validate DoodleShareButton.backgroundColor
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DoodleShareButton.iconUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DoodleShareButton.encodedSize = codec.kStructHeaderSize + 24;

  DoodleShareButton.decode = function(decoder) {
    var packed;
    var val = new DoodleShareButton();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.x =
        decoder.decodeStruct(codec.Int32);
    val.y =
        decoder.decodeStruct(codec.Int32);
    val.backgroundColor =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.iconUrl =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  DoodleShareButton.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DoodleShareButton.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.x);
    encoder.encodeStruct(codec.Int32, val.y);
    encoder.encodeStructPointer(skcolor$.SkColor, val.backgroundColor);
    encoder.encodeStructPointer(url$.Url, val.iconUrl);
  };
  function ImageDoodleContent(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  ImageDoodleContent.prototype.initDefaults_ = function() {
    this.imageUrl = null;
    this.onClickUrl = null;
    this.animationUrl = null;
    this.width = 0;
    this.height = 0;
    this.backgroundColor = null;
    this.shareButton = null;
    this.shareUrl = null;
    this.imageImpressionLogUrl = null;
    this.animationImpressionLogUrl = null;
  };
  ImageDoodleContent.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  ImageDoodleContent.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 80}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ImageDoodleContent.imageUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ImageDoodleContent.onClickUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ImageDoodleContent.animationUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, url$.Url, true);
    if (err !== validator.validationError.NONE)
        return err;




    // validate ImageDoodleContent.backgroundColor
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ImageDoodleContent.shareButton
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 40, DoodleShareButton, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ImageDoodleContent.shareUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 48, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ImageDoodleContent.imageImpressionLogUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 56, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate ImageDoodleContent.animationImpressionLogUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 64, url$.Url, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  ImageDoodleContent.encodedSize = codec.kStructHeaderSize + 72;

  ImageDoodleContent.decode = function(decoder) {
    var packed;
    var val = new ImageDoodleContent();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.imageUrl =
        decoder.decodeStructPointer(url$.Url);
    val.onClickUrl =
        decoder.decodeStructPointer(url$.Url);
    val.animationUrl =
        decoder.decodeStructPointer(url$.Url);
    val.width =
        decoder.decodeStruct(codec.Uint32);
    val.height =
        decoder.decodeStruct(codec.Uint32);
    val.backgroundColor =
        decoder.decodeStructPointer(skcolor$.SkColor);
    val.shareButton =
        decoder.decodeStructPointer(DoodleShareButton);
    val.shareUrl =
        decoder.decodeStructPointer(url$.Url);
    val.imageImpressionLogUrl =
        decoder.decodeStructPointer(url$.Url);
    val.animationImpressionLogUrl =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  ImageDoodleContent.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(ImageDoodleContent.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.imageUrl);
    encoder.encodeStructPointer(url$.Url, val.onClickUrl);
    encoder.encodeStructPointer(url$.Url, val.animationUrl);
    encoder.encodeStruct(codec.Uint32, val.width);
    encoder.encodeStruct(codec.Uint32, val.height);
    encoder.encodeStructPointer(skcolor$.SkColor, val.backgroundColor);
    encoder.encodeStructPointer(DoodleShareButton, val.shareButton);
    encoder.encodeStructPointer(url$.Url, val.shareUrl);
    encoder.encodeStructPointer(url$.Url, val.imageImpressionLogUrl);
    encoder.encodeStructPointer(url$.Url, val.animationImpressionLogUrl);
  };
  function InteractiveDoodleContent(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  InteractiveDoodleContent.prototype.initDefaults_ = function() {
    this.url = null;
    this.width = 0;
    this.height = 0;
  };
  InteractiveDoodleContent.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  InteractiveDoodleContent.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate InteractiveDoodleContent.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  InteractiveDoodleContent.encodedSize = codec.kStructHeaderSize + 16;

  InteractiveDoodleContent.decode = function(decoder) {
    var packed;
    var val = new InteractiveDoodleContent();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.width =
        decoder.decodeStruct(codec.Uint32);
    val.height =
        decoder.decodeStruct(codec.Uint32);
    return val;
  };

  InteractiveDoodleContent.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(InteractiveDoodleContent.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStruct(codec.Uint32, val.width);
    encoder.encodeStruct(codec.Uint32, val.height);
  };
  function Doodle(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Doodle.prototype.initDefaults_ = function() {
    this.content = null;
    this.description = null;
  };
  Doodle.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Doodle.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Doodle.content
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, DoodleContent, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Doodle.description
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Doodle.encodedSize = codec.kStructHeaderSize + 24;

  Doodle.decode = function(decoder) {
    var packed;
    var val = new Doodle();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.content =
        decoder.decodeStruct(DoodleContent);
    val.description =
        decoder.decodeStruct(codec.String);
    return val;
  };

  Doodle.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Doodle.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(DoodleContent, val.content);
    encoder.encodeStruct(codec.String, val.description);
  };
  function PageHandlerFactory_CreatePageHandler_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandlerFactory_CreatePageHandler_Params.prototype.initDefaults_ = function() {
    this.page = new PagePtr();
    this.handler = new bindings.InterfaceRequest();
  };
  PageHandlerFactory_CreatePageHandler_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandlerFactory_CreatePageHandler_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandlerFactory_CreatePageHandler_Params.page
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandlerFactory_CreatePageHandler_Params.handler
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandlerFactory_CreatePageHandler_Params.encodedSize = codec.kStructHeaderSize + 16;

  PageHandlerFactory_CreatePageHandler_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandlerFactory_CreatePageHandler_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.page =
        decoder.decodeStruct(new codec.Interface(PagePtr));
    val.handler =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PageHandlerFactory_CreatePageHandler_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandlerFactory_CreatePageHandler_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(PagePtr), val.page);
    encoder.encodeStruct(codec.InterfaceRequest, val.handler);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PageHandler_AddMostVisitedTile_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_AddMostVisitedTile_Params.prototype.initDefaults_ = function() {
    this.url = null;
    this.title = null;
  };
  PageHandler_AddMostVisitedTile_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_AddMostVisitedTile_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_AddMostVisitedTile_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_AddMostVisitedTile_Params.title
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_AddMostVisitedTile_Params.encodedSize = codec.kStructHeaderSize + 16;

  PageHandler_AddMostVisitedTile_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_AddMostVisitedTile_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.title =
        decoder.decodeStruct(codec.String);
    return val;
  };

  PageHandler_AddMostVisitedTile_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_AddMostVisitedTile_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStruct(codec.String, val.title);
  };
  function PageHandler_AddMostVisitedTile_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_AddMostVisitedTile_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
  };
  PageHandler_AddMostVisitedTile_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_AddMostVisitedTile_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PageHandler_AddMostVisitedTile_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_AddMostVisitedTile_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PageHandler_AddMostVisitedTile_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.success = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PageHandler_AddMostVisitedTile_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_AddMostVisitedTile_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.success & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PageHandler_DeleteMostVisitedTile_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_DeleteMostVisitedTile_Params.prototype.initDefaults_ = function() {
    this.url = null;
  };
  PageHandler_DeleteMostVisitedTile_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_DeleteMostVisitedTile_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_DeleteMostVisitedTile_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_DeleteMostVisitedTile_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_DeleteMostVisitedTile_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_DeleteMostVisitedTile_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  PageHandler_DeleteMostVisitedTile_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_DeleteMostVisitedTile_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
  };
  function PageHandler_ReorderMostVisitedTile_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_ReorderMostVisitedTile_Params.prototype.initDefaults_ = function() {
    this.url = null;
    this.newPos = 0;
  };
  PageHandler_ReorderMostVisitedTile_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_ReorderMostVisitedTile_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_ReorderMostVisitedTile_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PageHandler_ReorderMostVisitedTile_Params.encodedSize = codec.kStructHeaderSize + 16;

  PageHandler_ReorderMostVisitedTile_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_ReorderMostVisitedTile_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.newPos =
        decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PageHandler_ReorderMostVisitedTile_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_ReorderMostVisitedTile_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStruct(codec.Uint8, val.newPos);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PageHandler_RestoreMostVisitedDefaults_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_RestoreMostVisitedDefaults_Params.prototype.initDefaults_ = function() {
  };
  PageHandler_RestoreMostVisitedDefaults_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_RestoreMostVisitedDefaults_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_RestoreMostVisitedDefaults_Params.encodedSize = codec.kStructHeaderSize + 0;

  PageHandler_RestoreMostVisitedDefaults_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_RestoreMostVisitedDefaults_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PageHandler_RestoreMostVisitedDefaults_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_RestoreMostVisitedDefaults_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PageHandler_SetBackgroundImage_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_SetBackgroundImage_Params.prototype.initDefaults_ = function() {
    this.attribution1 = null;
    this.attribution2 = null;
    this.attributionUrl = null;
    this.imageUrl = null;
  };
  PageHandler_SetBackgroundImage_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_SetBackgroundImage_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_SetBackgroundImage_Params.attribution1
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_SetBackgroundImage_Params.attribution2
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_SetBackgroundImage_Params.attributionUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_SetBackgroundImage_Params.imageUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_SetBackgroundImage_Params.encodedSize = codec.kStructHeaderSize + 32;

  PageHandler_SetBackgroundImage_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_SetBackgroundImage_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.attribution1 =
        decoder.decodeStruct(codec.String);
    val.attribution2 =
        decoder.decodeStruct(codec.String);
    val.attributionUrl =
        decoder.decodeStructPointer(url$.Url);
    val.imageUrl =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  PageHandler_SetBackgroundImage_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_SetBackgroundImage_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.attribution1);
    encoder.encodeStruct(codec.String, val.attribution2);
    encoder.encodeStructPointer(url$.Url, val.attributionUrl);
    encoder.encodeStructPointer(url$.Url, val.imageUrl);
  };
  function PageHandler_SetDailyRefreshCollectionId_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_SetDailyRefreshCollectionId_Params.prototype.initDefaults_ = function() {
    this.collectionId = null;
  };
  PageHandler_SetDailyRefreshCollectionId_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_SetDailyRefreshCollectionId_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_SetDailyRefreshCollectionId_Params.collectionId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_SetDailyRefreshCollectionId_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_SetDailyRefreshCollectionId_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_SetDailyRefreshCollectionId_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.collectionId =
        decoder.decodeStruct(codec.String);
    return val;
  };

  PageHandler_SetDailyRefreshCollectionId_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_SetDailyRefreshCollectionId_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.collectionId);
  };
  function PageHandler_SetNoBackgroundImage_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_SetNoBackgroundImage_Params.prototype.initDefaults_ = function() {
  };
  PageHandler_SetNoBackgroundImage_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_SetNoBackgroundImage_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_SetNoBackgroundImage_Params.encodedSize = codec.kStructHeaderSize + 0;

  PageHandler_SetNoBackgroundImage_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_SetNoBackgroundImage_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PageHandler_SetNoBackgroundImage_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_SetNoBackgroundImage_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PageHandler_SetMostVisitedSettings_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_SetMostVisitedSettings_Params.prototype.initDefaults_ = function() {
    this.customLinksEnabled = false;
    this.visible = false;
  };
  PageHandler_SetMostVisitedSettings_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_SetMostVisitedSettings_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  PageHandler_SetMostVisitedSettings_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_SetMostVisitedSettings_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_SetMostVisitedSettings_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.customLinksEnabled = (packed >> 0) & 1 ? true : false;
    val.visible = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PageHandler_SetMostVisitedSettings_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_SetMostVisitedSettings_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.customLinksEnabled & 1) << 0
    packed |= (val.visible & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PageHandler_UndoMostVisitedTileAction_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_UndoMostVisitedTileAction_Params.prototype.initDefaults_ = function() {
  };
  PageHandler_UndoMostVisitedTileAction_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_UndoMostVisitedTileAction_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_UndoMostVisitedTileAction_Params.encodedSize = codec.kStructHeaderSize + 0;

  PageHandler_UndoMostVisitedTileAction_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_UndoMostVisitedTileAction_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PageHandler_UndoMostVisitedTileAction_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_UndoMostVisitedTileAction_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PageHandler_UpdateMostVisitedInfo_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_UpdateMostVisitedInfo_Params.prototype.initDefaults_ = function() {
  };
  PageHandler_UpdateMostVisitedInfo_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_UpdateMostVisitedInfo_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_UpdateMostVisitedInfo_Params.encodedSize = codec.kStructHeaderSize + 0;

  PageHandler_UpdateMostVisitedInfo_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_UpdateMostVisitedInfo_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PageHandler_UpdateMostVisitedInfo_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_UpdateMostVisitedInfo_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PageHandler_UpdateMostVisitedTile_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_UpdateMostVisitedTile_Params.prototype.initDefaults_ = function() {
    this.url = null;
    this.newUrl = null;
    this.newTitle = null;
  };
  PageHandler_UpdateMostVisitedTile_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_UpdateMostVisitedTile_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_UpdateMostVisitedTile_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_UpdateMostVisitedTile_Params.newUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_UpdateMostVisitedTile_Params.newTitle
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_UpdateMostVisitedTile_Params.encodedSize = codec.kStructHeaderSize + 24;

  PageHandler_UpdateMostVisitedTile_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_UpdateMostVisitedTile_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.newUrl =
        decoder.decodeStructPointer(url$.Url);
    val.newTitle =
        decoder.decodeStruct(codec.String);
    return val;
  };

  PageHandler_UpdateMostVisitedTile_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_UpdateMostVisitedTile_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStructPointer(url$.Url, val.newUrl);
    encoder.encodeStruct(codec.String, val.newTitle);
  };
  function PageHandler_UpdateMostVisitedTile_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_UpdateMostVisitedTile_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
  };
  PageHandler_UpdateMostVisitedTile_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_UpdateMostVisitedTile_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PageHandler_UpdateMostVisitedTile_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_UpdateMostVisitedTile_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PageHandler_UpdateMostVisitedTile_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.success = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PageHandler_UpdateMostVisitedTile_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_UpdateMostVisitedTile_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.success & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PageHandler_GetChromeThemes_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_GetChromeThemes_Params.prototype.initDefaults_ = function() {
  };
  PageHandler_GetChromeThemes_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_GetChromeThemes_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_GetChromeThemes_Params.encodedSize = codec.kStructHeaderSize + 0;

  PageHandler_GetChromeThemes_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_GetChromeThemes_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PageHandler_GetChromeThemes_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_GetChromeThemes_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PageHandler_GetChromeThemes_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_GetChromeThemes_ResponseParams.prototype.initDefaults_ = function() {
    this.chromeThemes = null;
  };
  PageHandler_GetChromeThemes_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_GetChromeThemes_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_GetChromeThemes_ResponseParams.chromeThemes
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(ChromeTheme), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_GetChromeThemes_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_GetChromeThemes_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PageHandler_GetChromeThemes_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.chromeThemes =
        decoder.decodeArrayPointer(new codec.PointerTo(ChromeTheme));
    return val;
  };

  PageHandler_GetChromeThemes_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_GetChromeThemes_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(ChromeTheme), val.chromeThemes);
  };
  function PageHandler_ApplyDefaultTheme_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_ApplyDefaultTheme_Params.prototype.initDefaults_ = function() {
  };
  PageHandler_ApplyDefaultTheme_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_ApplyDefaultTheme_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_ApplyDefaultTheme_Params.encodedSize = codec.kStructHeaderSize + 0;

  PageHandler_ApplyDefaultTheme_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_ApplyDefaultTheme_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PageHandler_ApplyDefaultTheme_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_ApplyDefaultTheme_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PageHandler_ApplyAutogeneratedTheme_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_ApplyAutogeneratedTheme_Params.prototype.initDefaults_ = function() {
    this.frameColor = null;
  };
  PageHandler_ApplyAutogeneratedTheme_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_ApplyAutogeneratedTheme_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_ApplyAutogeneratedTheme_Params.frameColor
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, skcolor$.SkColor, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_ApplyAutogeneratedTheme_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_ApplyAutogeneratedTheme_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_ApplyAutogeneratedTheme_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.frameColor =
        decoder.decodeStructPointer(skcolor$.SkColor);
    return val;
  };

  PageHandler_ApplyAutogeneratedTheme_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_ApplyAutogeneratedTheme_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(skcolor$.SkColor, val.frameColor);
  };
  function PageHandler_ApplyChromeTheme_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_ApplyChromeTheme_Params.prototype.initDefaults_ = function() {
    this.id = 0;
  };
  PageHandler_ApplyChromeTheme_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_ApplyChromeTheme_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PageHandler_ApplyChromeTheme_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_ApplyChromeTheme_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_ApplyChromeTheme_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PageHandler_ApplyChromeTheme_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_ApplyChromeTheme_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.id);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PageHandler_ConfirmThemeChanges_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_ConfirmThemeChanges_Params.prototype.initDefaults_ = function() {
  };
  PageHandler_ConfirmThemeChanges_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_ConfirmThemeChanges_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_ConfirmThemeChanges_Params.encodedSize = codec.kStructHeaderSize + 0;

  PageHandler_ConfirmThemeChanges_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_ConfirmThemeChanges_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PageHandler_ConfirmThemeChanges_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_ConfirmThemeChanges_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PageHandler_RevertThemeChanges_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_RevertThemeChanges_Params.prototype.initDefaults_ = function() {
  };
  PageHandler_RevertThemeChanges_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_RevertThemeChanges_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_RevertThemeChanges_Params.encodedSize = codec.kStructHeaderSize + 0;

  PageHandler_RevertThemeChanges_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_RevertThemeChanges_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PageHandler_RevertThemeChanges_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_RevertThemeChanges_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PageHandler_GetBackgroundCollections_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_GetBackgroundCollections_Params.prototype.initDefaults_ = function() {
  };
  PageHandler_GetBackgroundCollections_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_GetBackgroundCollections_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_GetBackgroundCollections_Params.encodedSize = codec.kStructHeaderSize + 0;

  PageHandler_GetBackgroundCollections_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_GetBackgroundCollections_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PageHandler_GetBackgroundCollections_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_GetBackgroundCollections_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PageHandler_GetBackgroundCollections_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_GetBackgroundCollections_ResponseParams.prototype.initDefaults_ = function() {
    this.collections = null;
  };
  PageHandler_GetBackgroundCollections_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_GetBackgroundCollections_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_GetBackgroundCollections_ResponseParams.collections
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(BackgroundCollection), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_GetBackgroundCollections_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_GetBackgroundCollections_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PageHandler_GetBackgroundCollections_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.collections =
        decoder.decodeArrayPointer(new codec.PointerTo(BackgroundCollection));
    return val;
  };

  PageHandler_GetBackgroundCollections_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_GetBackgroundCollections_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(BackgroundCollection), val.collections);
  };
  function PageHandler_GetBackgroundImages_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_GetBackgroundImages_Params.prototype.initDefaults_ = function() {
    this.collectionId = null;
  };
  PageHandler_GetBackgroundImages_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_GetBackgroundImages_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_GetBackgroundImages_Params.collectionId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_GetBackgroundImages_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_GetBackgroundImages_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_GetBackgroundImages_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.collectionId =
        decoder.decodeStruct(codec.String);
    return val;
  };

  PageHandler_GetBackgroundImages_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_GetBackgroundImages_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.collectionId);
  };
  function PageHandler_GetBackgroundImages_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_GetBackgroundImages_ResponseParams.prototype.initDefaults_ = function() {
    this.images = null;
  };
  PageHandler_GetBackgroundImages_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_GetBackgroundImages_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_GetBackgroundImages_ResponseParams.images
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(CollectionImage), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_GetBackgroundImages_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_GetBackgroundImages_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PageHandler_GetBackgroundImages_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.images =
        decoder.decodeArrayPointer(new codec.PointerTo(CollectionImage));
    return val;
  };

  PageHandler_GetBackgroundImages_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_GetBackgroundImages_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(CollectionImage), val.images);
  };
  function PageHandler_FocusOmnibox_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_FocusOmnibox_Params.prototype.initDefaults_ = function() {
  };
  PageHandler_FocusOmnibox_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_FocusOmnibox_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_FocusOmnibox_Params.encodedSize = codec.kStructHeaderSize + 0;

  PageHandler_FocusOmnibox_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_FocusOmnibox_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PageHandler_FocusOmnibox_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_FocusOmnibox_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PageHandler_PasteIntoOmnibox_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_PasteIntoOmnibox_Params.prototype.initDefaults_ = function() {
    this.text = null;
  };
  PageHandler_PasteIntoOmnibox_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_PasteIntoOmnibox_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_PasteIntoOmnibox_Params.text
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_PasteIntoOmnibox_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_PasteIntoOmnibox_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_PasteIntoOmnibox_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.text =
        decoder.decodeStruct(codec.String);
    return val;
  };

  PageHandler_PasteIntoOmnibox_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_PasteIntoOmnibox_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.text);
  };
  function PageHandler_GetDoodle_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_GetDoodle_Params.prototype.initDefaults_ = function() {
  };
  PageHandler_GetDoodle_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_GetDoodle_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_GetDoodle_Params.encodedSize = codec.kStructHeaderSize + 0;

  PageHandler_GetDoodle_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_GetDoodle_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PageHandler_GetDoodle_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_GetDoodle_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PageHandler_GetDoodle_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_GetDoodle_ResponseParams.prototype.initDefaults_ = function() {
    this.doodle = null;
  };
  PageHandler_GetDoodle_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_GetDoodle_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_GetDoodle_ResponseParams.doodle
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, Doodle, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_GetDoodle_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_GetDoodle_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PageHandler_GetDoodle_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.doodle =
        decoder.decodeStructPointer(Doodle);
    return val;
  };

  PageHandler_GetDoodle_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_GetDoodle_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(Doodle, val.doodle);
  };
  function PageHandler_ChooseLocalCustomBackground_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_ChooseLocalCustomBackground_Params.prototype.initDefaults_ = function() {
  };
  PageHandler_ChooseLocalCustomBackground_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_ChooseLocalCustomBackground_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_ChooseLocalCustomBackground_Params.encodedSize = codec.kStructHeaderSize + 0;

  PageHandler_ChooseLocalCustomBackground_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_ChooseLocalCustomBackground_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PageHandler_ChooseLocalCustomBackground_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_ChooseLocalCustomBackground_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PageHandler_ChooseLocalCustomBackground_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_ChooseLocalCustomBackground_ResponseParams.prototype.initDefaults_ = function() {
    this.success = false;
  };
  PageHandler_ChooseLocalCustomBackground_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_ChooseLocalCustomBackground_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PageHandler_ChooseLocalCustomBackground_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_ChooseLocalCustomBackground_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PageHandler_ChooseLocalCustomBackground_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.success = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PageHandler_ChooseLocalCustomBackground_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_ChooseLocalCustomBackground_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.success & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PageHandler_GetOneGoogleBarParts_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_GetOneGoogleBarParts_Params.prototype.initDefaults_ = function() {
    this.queryParams = null;
  };
  PageHandler_GetOneGoogleBarParts_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_GetOneGoogleBarParts_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_GetOneGoogleBarParts_Params.queryParams
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_GetOneGoogleBarParts_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_GetOneGoogleBarParts_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_GetOneGoogleBarParts_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.queryParams =
        decoder.decodeStruct(codec.String);
    return val;
  };

  PageHandler_GetOneGoogleBarParts_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_GetOneGoogleBarParts_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.queryParams);
  };
  function PageHandler_GetOneGoogleBarParts_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_GetOneGoogleBarParts_ResponseParams.prototype.initDefaults_ = function() {
    this.parts = null;
  };
  PageHandler_GetOneGoogleBarParts_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_GetOneGoogleBarParts_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_GetOneGoogleBarParts_ResponseParams.parts
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, OneGoogleBarParts, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_GetOneGoogleBarParts_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_GetOneGoogleBarParts_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PageHandler_GetOneGoogleBarParts_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.parts =
        decoder.decodeStructPointer(OneGoogleBarParts);
    return val;
  };

  PageHandler_GetOneGoogleBarParts_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_GetOneGoogleBarParts_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(OneGoogleBarParts, val.parts);
  };
  function PageHandler_OnMostVisitedTilesRendered_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_OnMostVisitedTilesRendered_Params.prototype.initDefaults_ = function() {
    this.tiles = null;
    this.time = 0;
  };
  PageHandler_OnMostVisitedTilesRendered_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_OnMostVisitedTilesRendered_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_OnMostVisitedTilesRendered_Params.tiles
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(MostVisitedTile), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PageHandler_OnMostVisitedTilesRendered_Params.encodedSize = codec.kStructHeaderSize + 16;

  PageHandler_OnMostVisitedTilesRendered_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_OnMostVisitedTilesRendered_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.tiles =
        decoder.decodeArrayPointer(new codec.PointerTo(MostVisitedTile));
    val.time =
        decoder.decodeStruct(codec.Double);
    return val;
  };

  PageHandler_OnMostVisitedTilesRendered_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_OnMostVisitedTilesRendered_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(MostVisitedTile), val.tiles);
    encoder.encodeStruct(codec.Double, val.time);
  };
  function PageHandler_OnOneGoogleBarRendered_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_OnOneGoogleBarRendered_Params.prototype.initDefaults_ = function() {
    this.time = 0;
  };
  PageHandler_OnOneGoogleBarRendered_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_OnOneGoogleBarRendered_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PageHandler_OnOneGoogleBarRendered_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_OnOneGoogleBarRendered_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_OnOneGoogleBarRendered_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.time =
        decoder.decodeStruct(codec.Double);
    return val;
  };

  PageHandler_OnOneGoogleBarRendered_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_OnOneGoogleBarRendered_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Double, val.time);
  };
  function PageHandler_OnPromoRendered_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_OnPromoRendered_Params.prototype.initDefaults_ = function() {
    this.time = 0;
  };
  PageHandler_OnPromoRendered_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_OnPromoRendered_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PageHandler_OnPromoRendered_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_OnPromoRendered_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_OnPromoRendered_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.time =
        decoder.decodeStruct(codec.Double);
    return val;
  };

  PageHandler_OnPromoRendered_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_OnPromoRendered_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Double, val.time);
  };
  function PageHandler_OnMostVisitedTileNavigation_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_OnMostVisitedTileNavigation_Params.prototype.initDefaults_ = function() {
    this.tile = null;
    this.index = 0;
  };
  PageHandler_OnMostVisitedTileNavigation_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_OnMostVisitedTileNavigation_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_OnMostVisitedTileNavigation_Params.tile
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, MostVisitedTile, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PageHandler_OnMostVisitedTileNavigation_Params.encodedSize = codec.kStructHeaderSize + 16;

  PageHandler_OnMostVisitedTileNavigation_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_OnMostVisitedTileNavigation_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.tile =
        decoder.decodeStructPointer(MostVisitedTile);
    val.index =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PageHandler_OnMostVisitedTileNavigation_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_OnMostVisitedTileNavigation_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(MostVisitedTile, val.tile);
    encoder.encodeStruct(codec.Uint32, val.index);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PageHandler_OnCustomizeDialogAction_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_OnCustomizeDialogAction_Params.prototype.initDefaults_ = function() {
    this.action = 0;
  };
  PageHandler_OnCustomizeDialogAction_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_OnCustomizeDialogAction_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_OnCustomizeDialogAction_Params.action
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, CustomizeDialogAction);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_OnCustomizeDialogAction_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_OnCustomizeDialogAction_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_OnCustomizeDialogAction_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.action =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PageHandler_OnCustomizeDialogAction_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_OnCustomizeDialogAction_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.action);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PageHandler_OnDoodleImageClicked_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_OnDoodleImageClicked_Params.prototype.initDefaults_ = function() {
    this.type = 0;
    this.logUrl = null;
  };
  PageHandler_OnDoodleImageClicked_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_OnDoodleImageClicked_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_OnDoodleImageClicked_Params.type
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, DoodleImageType);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_OnDoodleImageClicked_Params.logUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_OnDoodleImageClicked_Params.encodedSize = codec.kStructHeaderSize + 16;

  PageHandler_OnDoodleImageClicked_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_OnDoodleImageClicked_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.type =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.logUrl =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  PageHandler_OnDoodleImageClicked_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_OnDoodleImageClicked_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.type);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(url$.Url, val.logUrl);
  };
  function PageHandler_OnDoodleImageRendered_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_OnDoodleImageRendered_Params.prototype.initDefaults_ = function() {
    this.type = 0;
    this.time = 0;
    this.logUrl = null;
  };
  PageHandler_OnDoodleImageRendered_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_OnDoodleImageRendered_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_OnDoodleImageRendered_Params.type
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, DoodleImageType);
    if (err !== validator.validationError.NONE)
        return err;



    // validate PageHandler_OnDoodleImageRendered_Params.logUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_OnDoodleImageRendered_Params.encodedSize = codec.kStructHeaderSize + 24;

  PageHandler_OnDoodleImageRendered_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_OnDoodleImageRendered_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.type =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.time =
        decoder.decodeStruct(codec.Double);
    val.logUrl =
        decoder.decodeStructPointer(url$.Url);
    return val;
  };

  PageHandler_OnDoodleImageRendered_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_OnDoodleImageRendered_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.type);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Double, val.time);
    encoder.encodeStructPointer(url$.Url, val.logUrl);
  };
  function PageHandler_OnDoodleImageRendered_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_OnDoodleImageRendered_ResponseParams.prototype.initDefaults_ = function() {
    this.imageClickParams = null;
    this.interactionLogUrl = null;
    this.shareId = null;
  };
  PageHandler_OnDoodleImageRendered_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_OnDoodleImageRendered_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_OnDoodleImageRendered_ResponseParams.imageClickParams
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_OnDoodleImageRendered_ResponseParams.interactionLogUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_OnDoodleImageRendered_ResponseParams.shareId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_OnDoodleImageRendered_ResponseParams.encodedSize = codec.kStructHeaderSize + 24;

  PageHandler_OnDoodleImageRendered_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new PageHandler_OnDoodleImageRendered_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.imageClickParams =
        decoder.decodeStruct(codec.NullableString);
    val.interactionLogUrl =
        decoder.decodeStructPointer(url$.Url);
    val.shareId =
        decoder.decodeStruct(codec.NullableString);
    return val;
  };

  PageHandler_OnDoodleImageRendered_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_OnDoodleImageRendered_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.NullableString, val.imageClickParams);
    encoder.encodeStructPointer(url$.Url, val.interactionLogUrl);
    encoder.encodeStruct(codec.NullableString, val.shareId);
  };
  function PageHandler_OnDoodleShared_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_OnDoodleShared_Params.prototype.initDefaults_ = function() {
    this.channel = 0;
    this.doodleId = null;
    this.shareId = null;
  };
  PageHandler_OnDoodleShared_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_OnDoodleShared_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_OnDoodleShared_Params.channel
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, DoodleShareChannel);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_OnDoodleShared_Params.doodleId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_OnDoodleShared_Params.shareId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_OnDoodleShared_Params.encodedSize = codec.kStructHeaderSize + 24;

  PageHandler_OnDoodleShared_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_OnDoodleShared_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.channel =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.doodleId =
        decoder.decodeStruct(codec.String);
    val.shareId =
        decoder.decodeStruct(codec.NullableString);
    return val;
  };

  PageHandler_OnDoodleShared_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_OnDoodleShared_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.channel);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.String, val.doodleId);
    encoder.encodeStruct(codec.NullableString, val.shareId);
  };
  function PageHandler_OnPromoLinkClicked_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_OnPromoLinkClicked_Params.prototype.initDefaults_ = function() {
  };
  PageHandler_OnPromoLinkClicked_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_OnPromoLinkClicked_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_OnPromoLinkClicked_Params.encodedSize = codec.kStructHeaderSize + 0;

  PageHandler_OnPromoLinkClicked_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_OnPromoLinkClicked_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  PageHandler_OnPromoLinkClicked_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_OnPromoLinkClicked_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function PageHandler_OnVoiceSearchAction_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_OnVoiceSearchAction_Params.prototype.initDefaults_ = function() {
    this.action = 0;
  };
  PageHandler_OnVoiceSearchAction_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_OnVoiceSearchAction_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_OnVoiceSearchAction_Params.action
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, VoiceSearchAction);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_OnVoiceSearchAction_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_OnVoiceSearchAction_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_OnVoiceSearchAction_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.action =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PageHandler_OnVoiceSearchAction_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_OnVoiceSearchAction_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.action);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PageHandler_OnVoiceSearchError_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_OnVoiceSearchError_Params.prototype.initDefaults_ = function() {
    this.error = 0;
  };
  PageHandler_OnVoiceSearchError_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_OnVoiceSearchError_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_OnVoiceSearchError_Params.error
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, VoiceSearchError);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_OnVoiceSearchError_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_OnVoiceSearchError_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_OnVoiceSearchError_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.error =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PageHandler_OnVoiceSearchError_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_OnVoiceSearchError_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.error);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PageHandler_QueryAutocomplete_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_QueryAutocomplete_Params.prototype.initDefaults_ = function() {
    this.input = null;
    this.preventInlineAutocomplete = false;
  };
  PageHandler_QueryAutocomplete_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_QueryAutocomplete_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_QueryAutocomplete_Params.input
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, string16$.String16, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PageHandler_QueryAutocomplete_Params.encodedSize = codec.kStructHeaderSize + 16;

  PageHandler_QueryAutocomplete_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_QueryAutocomplete_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.input =
        decoder.decodeStructPointer(string16$.String16);
    packed = decoder.readUint8();
    val.preventInlineAutocomplete = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PageHandler_QueryAutocomplete_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_QueryAutocomplete_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(string16$.String16, val.input);
    packed = 0;
    packed |= (val.preventInlineAutocomplete & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PageHandler_StopAutocomplete_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_StopAutocomplete_Params.prototype.initDefaults_ = function() {
    this.clearResult = false;
  };
  PageHandler_StopAutocomplete_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_StopAutocomplete_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PageHandler_StopAutocomplete_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_StopAutocomplete_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_StopAutocomplete_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.clearResult = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PageHandler_StopAutocomplete_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_StopAutocomplete_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.clearResult & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PageHandler_OpenAutocompleteMatch_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_OpenAutocompleteMatch_Params.prototype.initDefaults_ = function() {
    this.line = 0;
    this.areMatchesShowing = false;
    this.altKey = false;
    this.ctrlKey = false;
    this.metaKey = false;
    this.shiftKey = false;
    this.mouseButton = 0;
    this.url = null;
    this.timeElapsedSinceLastFocus = null;
  };
  PageHandler_OpenAutocompleteMatch_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_OpenAutocompleteMatch_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate PageHandler_OpenAutocompleteMatch_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate PageHandler_OpenAutocompleteMatch_Params.timeElapsedSinceLastFocus
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;






    return validator.validationError.NONE;
  };

  PageHandler_OpenAutocompleteMatch_Params.encodedSize = codec.kStructHeaderSize + 24;

  PageHandler_OpenAutocompleteMatch_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_OpenAutocompleteMatch_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.line =
        decoder.decodeStruct(codec.Uint8);
    packed = decoder.readUint8();
    val.areMatchesShowing = (packed >> 0) & 1 ? true : false;
    val.altKey = (packed >> 1) & 1 ? true : false;
    val.ctrlKey = (packed >> 2) & 1 ? true : false;
    val.metaKey = (packed >> 3) & 1 ? true : false;
    val.shiftKey = (packed >> 4) & 1 ? true : false;
    val.mouseButton =
        decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.timeElapsedSinceLastFocus =
        decoder.decodeStructPointer(time$.TimeDelta);
    return val;
  };

  PageHandler_OpenAutocompleteMatch_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_OpenAutocompleteMatch_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint8, val.line);
    packed = 0;
    packed |= (val.areMatchesShowing & 1) << 0
    packed |= (val.altKey & 1) << 1
    packed |= (val.ctrlKey & 1) << 2
    packed |= (val.metaKey & 1) << 3
    packed |= (val.shiftKey & 1) << 4
    encoder.writeUint8(packed);
    encoder.encodeStruct(codec.Uint8, val.mouseButton);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStructPointer(time$.TimeDelta, val.timeElapsedSinceLastFocus);
  };
  function PageHandler_DeleteAutocompleteMatch_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_DeleteAutocompleteMatch_Params.prototype.initDefaults_ = function() {
    this.line = 0;
  };
  PageHandler_DeleteAutocompleteMatch_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_DeleteAutocompleteMatch_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PageHandler_DeleteAutocompleteMatch_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_DeleteAutocompleteMatch_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_DeleteAutocompleteMatch_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.line =
        decoder.decodeStruct(codec.Uint8);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PageHandler_DeleteAutocompleteMatch_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_DeleteAutocompleteMatch_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint8, val.line);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PageHandler_ToggleSuggestionGroupIdVisibility_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_ToggleSuggestionGroupIdVisibility_Params.prototype.initDefaults_ = function() {
    this.suggestionGroupId = 0;
  };
  PageHandler_ToggleSuggestionGroupIdVisibility_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_ToggleSuggestionGroupIdVisibility_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  PageHandler_ToggleSuggestionGroupIdVisibility_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_ToggleSuggestionGroupIdVisibility_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_ToggleSuggestionGroupIdVisibility_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.suggestionGroupId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  PageHandler_ToggleSuggestionGroupIdVisibility_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_ToggleSuggestionGroupIdVisibility_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.suggestionGroupId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function PageHandler_LogCharTypedToRepaintLatency_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  PageHandler_LogCharTypedToRepaintLatency_Params.prototype.initDefaults_ = function() {
    this.latency = null;
  };
  PageHandler_LogCharTypedToRepaintLatency_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  PageHandler_LogCharTypedToRepaintLatency_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate PageHandler_LogCharTypedToRepaintLatency_Params.latency
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, time$.TimeDelta, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  PageHandler_LogCharTypedToRepaintLatency_Params.encodedSize = codec.kStructHeaderSize + 8;

  PageHandler_LogCharTypedToRepaintLatency_Params.decode = function(decoder) {
    var packed;
    var val = new PageHandler_LogCharTypedToRepaintLatency_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.latency =
        decoder.decodeStructPointer(time$.TimeDelta);
    return val;
  };

  PageHandler_LogCharTypedToRepaintLatency_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(PageHandler_LogCharTypedToRepaintLatency_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(time$.TimeDelta, val.latency);
  };
  function Page_SetMostVisitedInfo_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Page_SetMostVisitedInfo_Params.prototype.initDefaults_ = function() {
    this.info = null;
  };
  Page_SetMostVisitedInfo_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Page_SetMostVisitedInfo_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Page_SetMostVisitedInfo_Params.info
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, MostVisitedInfo, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Page_SetMostVisitedInfo_Params.encodedSize = codec.kStructHeaderSize + 8;

  Page_SetMostVisitedInfo_Params.decode = function(decoder) {
    var packed;
    var val = new Page_SetMostVisitedInfo_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.info =
        decoder.decodeStructPointer(MostVisitedInfo);
    return val;
  };

  Page_SetMostVisitedInfo_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Page_SetMostVisitedInfo_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(MostVisitedInfo, val.info);
  };
  function Page_SetTheme_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Page_SetTheme_Params.prototype.initDefaults_ = function() {
    this.theme = null;
  };
  Page_SetTheme_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Page_SetTheme_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Page_SetTheme_Params.theme
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, Theme, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Page_SetTheme_Params.encodedSize = codec.kStructHeaderSize + 8;

  Page_SetTheme_Params.decode = function(decoder) {
    var packed;
    var val = new Page_SetTheme_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.theme =
        decoder.decodeStructPointer(Theme);
    return val;
  };

  Page_SetTheme_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Page_SetTheme_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(Theme, val.theme);
  };
  function Page_SetFakeboxFocused_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Page_SetFakeboxFocused_Params.prototype.initDefaults_ = function() {
    this.focused = false;
  };
  Page_SetFakeboxFocused_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Page_SetFakeboxFocused_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Page_SetFakeboxFocused_Params.encodedSize = codec.kStructHeaderSize + 8;

  Page_SetFakeboxFocused_Params.decode = function(decoder) {
    var packed;
    var val = new Page_SetFakeboxFocused_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.focused = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Page_SetFakeboxFocused_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Page_SetFakeboxFocused_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.focused & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Page_SetFakeboxVisible_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Page_SetFakeboxVisible_Params.prototype.initDefaults_ = function() {
    this.visible = false;
  };
  Page_SetFakeboxVisible_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Page_SetFakeboxVisible_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Page_SetFakeboxVisible_Params.encodedSize = codec.kStructHeaderSize + 8;

  Page_SetFakeboxVisible_Params.decode = function(decoder) {
    var packed;
    var val = new Page_SetFakeboxVisible_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    packed = decoder.readUint8();
    val.visible = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Page_SetFakeboxVisible_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Page_SetFakeboxVisible_Params.encodedSize);
    encoder.writeUint32(0);
    packed = 0;
    packed |= (val.visible & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Page_AutocompleteResultChanged_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Page_AutocompleteResultChanged_Params.prototype.initDefaults_ = function() {
    this.result = null;
  };
  Page_AutocompleteResultChanged_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Page_AutocompleteResultChanged_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Page_AutocompleteResultChanged_Params.result
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, omnibox$.AutocompleteResult, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Page_AutocompleteResultChanged_Params.encodedSize = codec.kStructHeaderSize + 8;

  Page_AutocompleteResultChanged_Params.decode = function(decoder) {
    var packed;
    var val = new Page_AutocompleteResultChanged_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.result =
        decoder.decodeStructPointer(omnibox$.AutocompleteResult);
    return val;
  };

  Page_AutocompleteResultChanged_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Page_AutocompleteResultChanged_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(omnibox$.AutocompleteResult, val.result);
  };
  function Page_AutocompleteMatchImageAvailable_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Page_AutocompleteMatchImageAvailable_Params.prototype.initDefaults_ = function() {
    this.matchIndex = 0;
    this.url = null;
    this.dataUrl = null;
  };
  Page_AutocompleteMatchImageAvailable_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Page_AutocompleteMatchImageAvailable_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    // validate Page_AutocompleteMatchImageAvailable_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Page_AutocompleteMatchImageAvailable_Params.dataUrl
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Page_AutocompleteMatchImageAvailable_Params.encodedSize = codec.kStructHeaderSize + 24;

  Page_AutocompleteMatchImageAvailable_Params.decode = function(decoder) {
    var packed;
    var val = new Page_AutocompleteMatchImageAvailable_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.matchIndex =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.dataUrl =
        decoder.decodeStruct(codec.String);
    return val;
  };

  Page_AutocompleteMatchImageAvailable_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Page_AutocompleteMatchImageAvailable_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.matchIndex);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStruct(codec.String, val.dataUrl);
  };

  function ThemeInfo(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  ThemeInfo.Tags = {
    chromeThemeId: 0,
    autogeneratedThemeColors: 1,
    thirdPartyThemeInfo: 2,
  };

  ThemeInfo.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  ThemeInfo.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "chromeThemeId",
        "autogeneratedThemeColors",
        "thirdPartyThemeInfo",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a ThemeInfo member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(ThemeInfo.prototype, "chromeThemeId", {
    get: function() {
      if (this.$tag != ThemeInfo.Tags.chromeThemeId) {
        throw new ReferenceError(
            "ThemeInfo.chromeThemeId is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = ThemeInfo.Tags.chromeThemeId;
      this.$data = value;
    }
  });
  Object.defineProperty(ThemeInfo.prototype, "autogeneratedThemeColors", {
    get: function() {
      if (this.$tag != ThemeInfo.Tags.autogeneratedThemeColors) {
        throw new ReferenceError(
            "ThemeInfo.autogeneratedThemeColors is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = ThemeInfo.Tags.autogeneratedThemeColors;
      this.$data = value;
    }
  });
  Object.defineProperty(ThemeInfo.prototype, "thirdPartyThemeInfo", {
    get: function() {
      if (this.$tag != ThemeInfo.Tags.thirdPartyThemeInfo) {
        throw new ReferenceError(
            "ThemeInfo.thirdPartyThemeInfo is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = ThemeInfo.Tags.thirdPartyThemeInfo;
      this.$data = value;
    }
  });


    ThemeInfo.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case ThemeInfo.Tags.chromeThemeId:
          encoder.encodeStruct(codec.Int32, val.chromeThemeId);
          break;
        case ThemeInfo.Tags.autogeneratedThemeColors:
          encoder.encodeStructPointer(ThemeColors, val.autogeneratedThemeColors);
          break;
        case ThemeInfo.Tags.thirdPartyThemeInfo:
          encoder.encodeStructPointer(ThirdPartyThemeInfo, val.thirdPartyThemeInfo);
          break;
      }
      encoder.align();
    };


    ThemeInfo.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new ThemeInfo();
      var tag = decoder.readUint32();
      switch (tag) {
        case ThemeInfo.Tags.chromeThemeId:
          result.chromeThemeId = decoder.decodeStruct(codec.Int32);
          break;
        case ThemeInfo.Tags.autogeneratedThemeColors:
          result.autogeneratedThemeColors = decoder.decodeStructPointer(ThemeColors);
          break;
        case ThemeInfo.Tags.thirdPartyThemeInfo:
          result.thirdPartyThemeInfo = decoder.decodeStructPointer(ThirdPartyThemeInfo);
          break;
      }
      decoder.align();

      return result;
    };


    ThemeInfo.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case ThemeInfo.Tags.chromeThemeId:
          

          break;
        case ThemeInfo.Tags.autogeneratedThemeColors:
          

    // validate ThemeInfo.autogeneratedThemeColors
    err = messageValidator.validateStructPointer(data_offset, ThemeColors, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case ThemeInfo.Tags.thirdPartyThemeInfo:
          

    // validate ThemeInfo.thirdPartyThemeInfo
    err = messageValidator.validateStructPointer(data_offset, ThirdPartyThemeInfo, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  ThemeInfo.encodedSize = 16;

  function DoodleContent(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  DoodleContent.Tags = {
    imageDoodle: 0,
    interactiveDoodle: 1,
  };

  DoodleContent.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  DoodleContent.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "imageDoodle",
        "interactiveDoodle",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a DoodleContent member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(DoodleContent.prototype, "imageDoodle", {
    get: function() {
      if (this.$tag != DoodleContent.Tags.imageDoodle) {
        throw new ReferenceError(
            "DoodleContent.imageDoodle is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = DoodleContent.Tags.imageDoodle;
      this.$data = value;
    }
  });
  Object.defineProperty(DoodleContent.prototype, "interactiveDoodle", {
    get: function() {
      if (this.$tag != DoodleContent.Tags.interactiveDoodle) {
        throw new ReferenceError(
            "DoodleContent.interactiveDoodle is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = DoodleContent.Tags.interactiveDoodle;
      this.$data = value;
    }
  });


    DoodleContent.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case DoodleContent.Tags.imageDoodle:
          encoder.encodeStructPointer(ImageDoodleContent, val.imageDoodle);
          break;
        case DoodleContent.Tags.interactiveDoodle:
          encoder.encodeStructPointer(InteractiveDoodleContent, val.interactiveDoodle);
          break;
      }
      encoder.align();
    };


    DoodleContent.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new DoodleContent();
      var tag = decoder.readUint32();
      switch (tag) {
        case DoodleContent.Tags.imageDoodle:
          result.imageDoodle = decoder.decodeStructPointer(ImageDoodleContent);
          break;
        case DoodleContent.Tags.interactiveDoodle:
          result.interactiveDoodle = decoder.decodeStructPointer(InteractiveDoodleContent);
          break;
      }
      decoder.align();

      return result;
    };


    DoodleContent.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case DoodleContent.Tags.imageDoodle:
          

    // validate DoodleContent.imageDoodle
    err = messageValidator.validateStructPointer(data_offset, ImageDoodleContent, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case DoodleContent.Tags.interactiveDoodle:
          

    // validate DoodleContent.interactiveDoodle
    err = messageValidator.validateStructPointer(data_offset, InteractiveDoodleContent, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  DoodleContent.encodedSize = 16;
  var kPageHandlerFactory_CreatePageHandler_Name = 835966243;

  function PageHandlerFactoryPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PageHandlerFactory,
                                                   handleOrPtrInfo);
  }

  function PageHandlerFactoryAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PageHandlerFactory, associatedInterfacePtrInfo);
  }

  PageHandlerFactoryAssociatedPtr.prototype =
      Object.create(PageHandlerFactoryPtr.prototype);
  PageHandlerFactoryAssociatedPtr.prototype.constructor =
      PageHandlerFactoryAssociatedPtr;

  function PageHandlerFactoryProxy(receiver) {
    this.receiver_ = receiver;
  }
  PageHandlerFactoryPtr.prototype.createPageHandler = function() {
    return PageHandlerFactoryProxy.prototype.createPageHandler
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerFactoryProxy.prototype.createPageHandler = function(page, handler) {
    var params_ = new PageHandlerFactory_CreatePageHandler_Params();
    params_.page = page;
    params_.handler = handler;
    var builder = new codec.MessageV0Builder(
        kPageHandlerFactory_CreatePageHandler_Name,
        codec.align(PageHandlerFactory_CreatePageHandler_Params.encodedSize));
    builder.encodeStruct(PageHandlerFactory_CreatePageHandler_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PageHandlerFactoryStub(delegate) {
    this.delegate_ = delegate;
  }
  PageHandlerFactoryStub.prototype.createPageHandler = function(page, handler) {
    return this.delegate_ && this.delegate_.createPageHandler && this.delegate_.createPageHandler(page, handler);
  }

  PageHandlerFactoryStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPageHandlerFactory_CreatePageHandler_Name:
      var params = reader.decodeStruct(PageHandlerFactory_CreatePageHandler_Params);
      this.createPageHandler(params.page, params.handler);
      return true;
    default:
      return false;
    }
  };

  PageHandlerFactoryStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validatePageHandlerFactoryRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPageHandlerFactory_CreatePageHandler_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandlerFactory_CreatePageHandler_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePageHandlerFactoryResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var PageHandlerFactory = {
    name: 'new_tab_page.mojom.PageHandlerFactory',
    kVersion: 0,
    ptrClass: PageHandlerFactoryPtr,
    proxyClass: PageHandlerFactoryProxy,
    stubClass: PageHandlerFactoryStub,
    validateRequest: validatePageHandlerFactoryRequest,
    validateResponse: null,
  };
  PageHandlerFactoryStub.prototype.validator = validatePageHandlerFactoryRequest;
  PageHandlerFactoryProxy.prototype.validator = null;
  var kPageHandler_AddMostVisitedTile_Name = 670170113;
  var kPageHandler_DeleteMostVisitedTile_Name = 757347667;
  var kPageHandler_ReorderMostVisitedTile_Name = 1762317186;
  var kPageHandler_RestoreMostVisitedDefaults_Name = 1262227491;
  var kPageHandler_SetBackgroundImage_Name = 2018413951;
  var kPageHandler_SetDailyRefreshCollectionId_Name = 1424104588;
  var kPageHandler_SetNoBackgroundImage_Name = 1739803898;
  var kPageHandler_SetMostVisitedSettings_Name = 157965235;
  var kPageHandler_UndoMostVisitedTileAction_Name = 895559210;
  var kPageHandler_UpdateMostVisitedInfo_Name = 2084011752;
  var kPageHandler_UpdateMostVisitedTile_Name = 873470122;
  var kPageHandler_GetChromeThemes_Name = 612874036;
  var kPageHandler_ApplyDefaultTheme_Name = 1657373993;
  var kPageHandler_ApplyAutogeneratedTheme_Name = 1247371928;
  var kPageHandler_ApplyChromeTheme_Name = 788701113;
  var kPageHandler_ConfirmThemeChanges_Name = 81637650;
  var kPageHandler_RevertThemeChanges_Name = 2015675016;
  var kPageHandler_GetBackgroundCollections_Name = 1554440684;
  var kPageHandler_GetBackgroundImages_Name = 238391265;
  var kPageHandler_FocusOmnibox_Name = 266325287;
  var kPageHandler_PasteIntoOmnibox_Name = 224938545;
  var kPageHandler_GetDoodle_Name = 1266454199;
  var kPageHandler_ChooseLocalCustomBackground_Name = 1055348676;
  var kPageHandler_GetOneGoogleBarParts_Name = 872559351;
  var kPageHandler_OnMostVisitedTilesRendered_Name = 1657451456;
  var kPageHandler_OnOneGoogleBarRendered_Name = 1716751693;
  var kPageHandler_OnPromoRendered_Name = 812742292;
  var kPageHandler_OnMostVisitedTileNavigation_Name = 770057424;
  var kPageHandler_OnCustomizeDialogAction_Name = 1779239238;
  var kPageHandler_OnDoodleImageClicked_Name = 1115137649;
  var kPageHandler_OnDoodleImageRendered_Name = 485822022;
  var kPageHandler_OnDoodleShared_Name = 1402245188;
  var kPageHandler_OnPromoLinkClicked_Name = 232042770;
  var kPageHandler_OnVoiceSearchAction_Name = 496196643;
  var kPageHandler_OnVoiceSearchError_Name = 584838315;
  var kPageHandler_QueryAutocomplete_Name = 1090514118;
  var kPageHandler_StopAutocomplete_Name = 1490925399;
  var kPageHandler_OpenAutocompleteMatch_Name = 724969920;
  var kPageHandler_DeleteAutocompleteMatch_Name = 545835932;
  var kPageHandler_ToggleSuggestionGroupIdVisibility_Name = 1646364386;
  var kPageHandler_LogCharTypedToRepaintLatency_Name = 786398080;

  function PageHandlerPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(PageHandler,
                                                   handleOrPtrInfo);
  }

  function PageHandlerAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        PageHandler, associatedInterfacePtrInfo);
  }

  PageHandlerAssociatedPtr.prototype =
      Object.create(PageHandlerPtr.prototype);
  PageHandlerAssociatedPtr.prototype.constructor =
      PageHandlerAssociatedPtr;

  function PageHandlerProxy(receiver) {
    this.receiver_ = receiver;
  }
  PageHandlerPtr.prototype.addMostVisitedTile = function() {
    return PageHandlerProxy.prototype.addMostVisitedTile
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.addMostVisitedTile = function(url, title) {
    var params_ = new PageHandler_AddMostVisitedTile_Params();
    params_.url = url;
    params_.title = title;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPageHandler_AddMostVisitedTile_Name,
          codec.align(PageHandler_AddMostVisitedTile_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PageHandler_AddMostVisitedTile_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PageHandler_AddMostVisitedTile_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PageHandlerPtr.prototype.deleteMostVisitedTile = function() {
    return PageHandlerProxy.prototype.deleteMostVisitedTile
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.deleteMostVisitedTile = function(url) {
    var params_ = new PageHandler_DeleteMostVisitedTile_Params();
    params_.url = url;
    var builder = new codec.MessageV0Builder(
        kPageHandler_DeleteMostVisitedTile_Name,
        codec.align(PageHandler_DeleteMostVisitedTile_Params.encodedSize));
    builder.encodeStruct(PageHandler_DeleteMostVisitedTile_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.reorderMostVisitedTile = function() {
    return PageHandlerProxy.prototype.reorderMostVisitedTile
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.reorderMostVisitedTile = function(url, newPos) {
    var params_ = new PageHandler_ReorderMostVisitedTile_Params();
    params_.url = url;
    params_.newPos = newPos;
    var builder = new codec.MessageV0Builder(
        kPageHandler_ReorderMostVisitedTile_Name,
        codec.align(PageHandler_ReorderMostVisitedTile_Params.encodedSize));
    builder.encodeStruct(PageHandler_ReorderMostVisitedTile_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.restoreMostVisitedDefaults = function() {
    return PageHandlerProxy.prototype.restoreMostVisitedDefaults
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.restoreMostVisitedDefaults = function() {
    var params_ = new PageHandler_RestoreMostVisitedDefaults_Params();
    var builder = new codec.MessageV0Builder(
        kPageHandler_RestoreMostVisitedDefaults_Name,
        codec.align(PageHandler_RestoreMostVisitedDefaults_Params.encodedSize));
    builder.encodeStruct(PageHandler_RestoreMostVisitedDefaults_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.setBackgroundImage = function() {
    return PageHandlerProxy.prototype.setBackgroundImage
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.setBackgroundImage = function(attribution1, attribution2, attributionUrl, imageUrl) {
    var params_ = new PageHandler_SetBackgroundImage_Params();
    params_.attribution1 = attribution1;
    params_.attribution2 = attribution2;
    params_.attributionUrl = attributionUrl;
    params_.imageUrl = imageUrl;
    var builder = new codec.MessageV0Builder(
        kPageHandler_SetBackgroundImage_Name,
        codec.align(PageHandler_SetBackgroundImage_Params.encodedSize));
    builder.encodeStruct(PageHandler_SetBackgroundImage_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.setDailyRefreshCollectionId = function() {
    return PageHandlerProxy.prototype.setDailyRefreshCollectionId
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.setDailyRefreshCollectionId = function(collectionId) {
    var params_ = new PageHandler_SetDailyRefreshCollectionId_Params();
    params_.collectionId = collectionId;
    var builder = new codec.MessageV0Builder(
        kPageHandler_SetDailyRefreshCollectionId_Name,
        codec.align(PageHandler_SetDailyRefreshCollectionId_Params.encodedSize));
    builder.encodeStruct(PageHandler_SetDailyRefreshCollectionId_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.setNoBackgroundImage = function() {
    return PageHandlerProxy.prototype.setNoBackgroundImage
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.setNoBackgroundImage = function() {
    var params_ = new PageHandler_SetNoBackgroundImage_Params();
    var builder = new codec.MessageV0Builder(
        kPageHandler_SetNoBackgroundImage_Name,
        codec.align(PageHandler_SetNoBackgroundImage_Params.encodedSize));
    builder.encodeStruct(PageHandler_SetNoBackgroundImage_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.setMostVisitedSettings = function() {
    return PageHandlerProxy.prototype.setMostVisitedSettings
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.setMostVisitedSettings = function(customLinksEnabled, visible) {
    var params_ = new PageHandler_SetMostVisitedSettings_Params();
    params_.customLinksEnabled = customLinksEnabled;
    params_.visible = visible;
    var builder = new codec.MessageV0Builder(
        kPageHandler_SetMostVisitedSettings_Name,
        codec.align(PageHandler_SetMostVisitedSettings_Params.encodedSize));
    builder.encodeStruct(PageHandler_SetMostVisitedSettings_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.undoMostVisitedTileAction = function() {
    return PageHandlerProxy.prototype.undoMostVisitedTileAction
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.undoMostVisitedTileAction = function() {
    var params_ = new PageHandler_UndoMostVisitedTileAction_Params();
    var builder = new codec.MessageV0Builder(
        kPageHandler_UndoMostVisitedTileAction_Name,
        codec.align(PageHandler_UndoMostVisitedTileAction_Params.encodedSize));
    builder.encodeStruct(PageHandler_UndoMostVisitedTileAction_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.updateMostVisitedInfo = function() {
    return PageHandlerProxy.prototype.updateMostVisitedInfo
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.updateMostVisitedInfo = function() {
    var params_ = new PageHandler_UpdateMostVisitedInfo_Params();
    var builder = new codec.MessageV0Builder(
        kPageHandler_UpdateMostVisitedInfo_Name,
        codec.align(PageHandler_UpdateMostVisitedInfo_Params.encodedSize));
    builder.encodeStruct(PageHandler_UpdateMostVisitedInfo_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.updateMostVisitedTile = function() {
    return PageHandlerProxy.prototype.updateMostVisitedTile
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.updateMostVisitedTile = function(url, newUrl, newTitle) {
    var params_ = new PageHandler_UpdateMostVisitedTile_Params();
    params_.url = url;
    params_.newUrl = newUrl;
    params_.newTitle = newTitle;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPageHandler_UpdateMostVisitedTile_Name,
          codec.align(PageHandler_UpdateMostVisitedTile_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PageHandler_UpdateMostVisitedTile_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PageHandler_UpdateMostVisitedTile_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PageHandlerPtr.prototype.getChromeThemes = function() {
    return PageHandlerProxy.prototype.getChromeThemes
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.getChromeThemes = function() {
    var params_ = new PageHandler_GetChromeThemes_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPageHandler_GetChromeThemes_Name,
          codec.align(PageHandler_GetChromeThemes_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PageHandler_GetChromeThemes_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PageHandler_GetChromeThemes_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PageHandlerPtr.prototype.applyDefaultTheme = function() {
    return PageHandlerProxy.prototype.applyDefaultTheme
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.applyDefaultTheme = function() {
    var params_ = new PageHandler_ApplyDefaultTheme_Params();
    var builder = new codec.MessageV0Builder(
        kPageHandler_ApplyDefaultTheme_Name,
        codec.align(PageHandler_ApplyDefaultTheme_Params.encodedSize));
    builder.encodeStruct(PageHandler_ApplyDefaultTheme_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.applyAutogeneratedTheme = function() {
    return PageHandlerProxy.prototype.applyAutogeneratedTheme
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.applyAutogeneratedTheme = function(frameColor) {
    var params_ = new PageHandler_ApplyAutogeneratedTheme_Params();
    params_.frameColor = frameColor;
    var builder = new codec.MessageV0Builder(
        kPageHandler_ApplyAutogeneratedTheme_Name,
        codec.align(PageHandler_ApplyAutogeneratedTheme_Params.encodedSize));
    builder.encodeStruct(PageHandler_ApplyAutogeneratedTheme_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.applyChromeTheme = function() {
    return PageHandlerProxy.prototype.applyChromeTheme
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.applyChromeTheme = function(id) {
    var params_ = new PageHandler_ApplyChromeTheme_Params();
    params_.id = id;
    var builder = new codec.MessageV0Builder(
        kPageHandler_ApplyChromeTheme_Name,
        codec.align(PageHandler_ApplyChromeTheme_Params.encodedSize));
    builder.encodeStruct(PageHandler_ApplyChromeTheme_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.confirmThemeChanges = function() {
    return PageHandlerProxy.prototype.confirmThemeChanges
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.confirmThemeChanges = function() {
    var params_ = new PageHandler_ConfirmThemeChanges_Params();
    var builder = new codec.MessageV0Builder(
        kPageHandler_ConfirmThemeChanges_Name,
        codec.align(PageHandler_ConfirmThemeChanges_Params.encodedSize));
    builder.encodeStruct(PageHandler_ConfirmThemeChanges_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.revertThemeChanges = function() {
    return PageHandlerProxy.prototype.revertThemeChanges
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.revertThemeChanges = function() {
    var params_ = new PageHandler_RevertThemeChanges_Params();
    var builder = new codec.MessageV0Builder(
        kPageHandler_RevertThemeChanges_Name,
        codec.align(PageHandler_RevertThemeChanges_Params.encodedSize));
    builder.encodeStruct(PageHandler_RevertThemeChanges_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.getBackgroundCollections = function() {
    return PageHandlerProxy.prototype.getBackgroundCollections
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.getBackgroundCollections = function() {
    var params_ = new PageHandler_GetBackgroundCollections_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPageHandler_GetBackgroundCollections_Name,
          codec.align(PageHandler_GetBackgroundCollections_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PageHandler_GetBackgroundCollections_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PageHandler_GetBackgroundCollections_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PageHandlerPtr.prototype.getBackgroundImages = function() {
    return PageHandlerProxy.prototype.getBackgroundImages
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.getBackgroundImages = function(collectionId) {
    var params_ = new PageHandler_GetBackgroundImages_Params();
    params_.collectionId = collectionId;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPageHandler_GetBackgroundImages_Name,
          codec.align(PageHandler_GetBackgroundImages_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PageHandler_GetBackgroundImages_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PageHandler_GetBackgroundImages_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PageHandlerPtr.prototype.focusOmnibox = function() {
    return PageHandlerProxy.prototype.focusOmnibox
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.focusOmnibox = function() {
    var params_ = new PageHandler_FocusOmnibox_Params();
    var builder = new codec.MessageV0Builder(
        kPageHandler_FocusOmnibox_Name,
        codec.align(PageHandler_FocusOmnibox_Params.encodedSize));
    builder.encodeStruct(PageHandler_FocusOmnibox_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.pasteIntoOmnibox = function() {
    return PageHandlerProxy.prototype.pasteIntoOmnibox
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.pasteIntoOmnibox = function(text) {
    var params_ = new PageHandler_PasteIntoOmnibox_Params();
    params_.text = text;
    var builder = new codec.MessageV0Builder(
        kPageHandler_PasteIntoOmnibox_Name,
        codec.align(PageHandler_PasteIntoOmnibox_Params.encodedSize));
    builder.encodeStruct(PageHandler_PasteIntoOmnibox_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.getDoodle = function() {
    return PageHandlerProxy.prototype.getDoodle
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.getDoodle = function() {
    var params_ = new PageHandler_GetDoodle_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPageHandler_GetDoodle_Name,
          codec.align(PageHandler_GetDoodle_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PageHandler_GetDoodle_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PageHandler_GetDoodle_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PageHandlerPtr.prototype.chooseLocalCustomBackground = function() {
    return PageHandlerProxy.prototype.chooseLocalCustomBackground
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.chooseLocalCustomBackground = function() {
    var params_ = new PageHandler_ChooseLocalCustomBackground_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPageHandler_ChooseLocalCustomBackground_Name,
          codec.align(PageHandler_ChooseLocalCustomBackground_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PageHandler_ChooseLocalCustomBackground_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PageHandler_ChooseLocalCustomBackground_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PageHandlerPtr.prototype.getOneGoogleBarParts = function() {
    return PageHandlerProxy.prototype.getOneGoogleBarParts
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.getOneGoogleBarParts = function(queryParams) {
    var params_ = new PageHandler_GetOneGoogleBarParts_Params();
    params_.queryParams = queryParams;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPageHandler_GetOneGoogleBarParts_Name,
          codec.align(PageHandler_GetOneGoogleBarParts_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PageHandler_GetOneGoogleBarParts_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PageHandler_GetOneGoogleBarParts_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PageHandlerPtr.prototype.onMostVisitedTilesRendered = function() {
    return PageHandlerProxy.prototype.onMostVisitedTilesRendered
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.onMostVisitedTilesRendered = function(tiles, time) {
    var params_ = new PageHandler_OnMostVisitedTilesRendered_Params();
    params_.tiles = tiles;
    params_.time = time;
    var builder = new codec.MessageV0Builder(
        kPageHandler_OnMostVisitedTilesRendered_Name,
        codec.align(PageHandler_OnMostVisitedTilesRendered_Params.encodedSize));
    builder.encodeStruct(PageHandler_OnMostVisitedTilesRendered_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.onOneGoogleBarRendered = function() {
    return PageHandlerProxy.prototype.onOneGoogleBarRendered
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.onOneGoogleBarRendered = function(time) {
    var params_ = new PageHandler_OnOneGoogleBarRendered_Params();
    params_.time = time;
    var builder = new codec.MessageV0Builder(
        kPageHandler_OnOneGoogleBarRendered_Name,
        codec.align(PageHandler_OnOneGoogleBarRendered_Params.encodedSize));
    builder.encodeStruct(PageHandler_OnOneGoogleBarRendered_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.onPromoRendered = function() {
    return PageHandlerProxy.prototype.onPromoRendered
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.onPromoRendered = function(time) {
    var params_ = new PageHandler_OnPromoRendered_Params();
    params_.time = time;
    var builder = new codec.MessageV0Builder(
        kPageHandler_OnPromoRendered_Name,
        codec.align(PageHandler_OnPromoRendered_Params.encodedSize));
    builder.encodeStruct(PageHandler_OnPromoRendered_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.onMostVisitedTileNavigation = function() {
    return PageHandlerProxy.prototype.onMostVisitedTileNavigation
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.onMostVisitedTileNavigation = function(tile, index) {
    var params_ = new PageHandler_OnMostVisitedTileNavigation_Params();
    params_.tile = tile;
    params_.index = index;
    var builder = new codec.MessageV0Builder(
        kPageHandler_OnMostVisitedTileNavigation_Name,
        codec.align(PageHandler_OnMostVisitedTileNavigation_Params.encodedSize));
    builder.encodeStruct(PageHandler_OnMostVisitedTileNavigation_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.onCustomizeDialogAction = function() {
    return PageHandlerProxy.prototype.onCustomizeDialogAction
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.onCustomizeDialogAction = function(action) {
    var params_ = new PageHandler_OnCustomizeDialogAction_Params();
    params_.action = action;
    var builder = new codec.MessageV0Builder(
        kPageHandler_OnCustomizeDialogAction_Name,
        codec.align(PageHandler_OnCustomizeDialogAction_Params.encodedSize));
    builder.encodeStruct(PageHandler_OnCustomizeDialogAction_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.onDoodleImageClicked = function() {
    return PageHandlerProxy.prototype.onDoodleImageClicked
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.onDoodleImageClicked = function(type, logUrl) {
    var params_ = new PageHandler_OnDoodleImageClicked_Params();
    params_.type = type;
    params_.logUrl = logUrl;
    var builder = new codec.MessageV0Builder(
        kPageHandler_OnDoodleImageClicked_Name,
        codec.align(PageHandler_OnDoodleImageClicked_Params.encodedSize));
    builder.encodeStruct(PageHandler_OnDoodleImageClicked_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.onDoodleImageRendered = function() {
    return PageHandlerProxy.prototype.onDoodleImageRendered
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.onDoodleImageRendered = function(type, time, logUrl) {
    var params_ = new PageHandler_OnDoodleImageRendered_Params();
    params_.type = type;
    params_.time = time;
    params_.logUrl = logUrl;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kPageHandler_OnDoodleImageRendered_Name,
          codec.align(PageHandler_OnDoodleImageRendered_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(PageHandler_OnDoodleImageRendered_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(PageHandler_OnDoodleImageRendered_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  PageHandlerPtr.prototype.onDoodleShared = function() {
    return PageHandlerProxy.prototype.onDoodleShared
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.onDoodleShared = function(channel, doodleId, shareId) {
    var params_ = new PageHandler_OnDoodleShared_Params();
    params_.channel = channel;
    params_.doodleId = doodleId;
    params_.shareId = shareId;
    var builder = new codec.MessageV0Builder(
        kPageHandler_OnDoodleShared_Name,
        codec.align(PageHandler_OnDoodleShared_Params.encodedSize));
    builder.encodeStruct(PageHandler_OnDoodleShared_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.onPromoLinkClicked = function() {
    return PageHandlerProxy.prototype.onPromoLinkClicked
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.onPromoLinkClicked = function() {
    var params_ = new PageHandler_OnPromoLinkClicked_Params();
    var builder = new codec.MessageV0Builder(
        kPageHandler_OnPromoLinkClicked_Name,
        codec.align(PageHandler_OnPromoLinkClicked_Params.encodedSize));
    builder.encodeStruct(PageHandler_OnPromoLinkClicked_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.onVoiceSearchAction = function() {
    return PageHandlerProxy.prototype.onVoiceSearchAction
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.onVoiceSearchAction = function(action) {
    var params_ = new PageHandler_OnVoiceSearchAction_Params();
    params_.action = action;
    var builder = new codec.MessageV0Builder(
        kPageHandler_OnVoiceSearchAction_Name,
        codec.align(PageHandler_OnVoiceSearchAction_Params.encodedSize));
    builder.encodeStruct(PageHandler_OnVoiceSearchAction_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.onVoiceSearchError = function() {
    return PageHandlerProxy.prototype.onVoiceSearchError
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.onVoiceSearchError = function(error) {
    var params_ = new PageHandler_OnVoiceSearchError_Params();
    params_.error = error;
    var builder = new codec.MessageV0Builder(
        kPageHandler_OnVoiceSearchError_Name,
        codec.align(PageHandler_OnVoiceSearchError_Params.encodedSize));
    builder.encodeStruct(PageHandler_OnVoiceSearchError_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.queryAutocomplete = function() {
    return PageHandlerProxy.prototype.queryAutocomplete
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.queryAutocomplete = function(input, preventInlineAutocomplete) {
    var params_ = new PageHandler_QueryAutocomplete_Params();
    params_.input = input;
    params_.preventInlineAutocomplete = preventInlineAutocomplete;
    var builder = new codec.MessageV0Builder(
        kPageHandler_QueryAutocomplete_Name,
        codec.align(PageHandler_QueryAutocomplete_Params.encodedSize));
    builder.encodeStruct(PageHandler_QueryAutocomplete_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.stopAutocomplete = function() {
    return PageHandlerProxy.prototype.stopAutocomplete
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.stopAutocomplete = function(clearResult) {
    var params_ = new PageHandler_StopAutocomplete_Params();
    params_.clearResult = clearResult;
    var builder = new codec.MessageV0Builder(
        kPageHandler_StopAutocomplete_Name,
        codec.align(PageHandler_StopAutocomplete_Params.encodedSize));
    builder.encodeStruct(PageHandler_StopAutocomplete_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.openAutocompleteMatch = function() {
    return PageHandlerProxy.prototype.openAutocompleteMatch
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.openAutocompleteMatch = function(line, url, areMatchesShowing, timeElapsedSinceLastFocus, mouseButton, altKey, ctrlKey, metaKey, shiftKey) {
    var params_ = new PageHandler_OpenAutocompleteMatch_Params();
    params_.line = line;
    params_.url = url;
    params_.areMatchesShowing = areMatchesShowing;
    params_.timeElapsedSinceLastFocus = timeElapsedSinceLastFocus;
    params_.mouseButton = mouseButton;
    params_.altKey = altKey;
    params_.ctrlKey = ctrlKey;
    params_.metaKey = metaKey;
    params_.shiftKey = shiftKey;
    var builder = new codec.MessageV0Builder(
        kPageHandler_OpenAutocompleteMatch_Name,
        codec.align(PageHandler_OpenAutocompleteMatch_Params.encodedSize));
    builder.encodeStruct(PageHandler_OpenAutocompleteMatch_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.deleteAutocompleteMatch = function() {
    return PageHandlerProxy.prototype.deleteAutocompleteMatch
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.deleteAutocompleteMatch = function(line) {
    var params_ = new PageHandler_DeleteAutocompleteMatch_Params();
    params_.line = line;
    var builder = new codec.MessageV0Builder(
        kPageHandler_DeleteAutocompleteMatch_Name,
        codec.align(PageHandler_DeleteAutocompleteMatch_Params.encodedSize));
    builder.encodeStruct(PageHandler_DeleteAutocompleteMatch_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.toggleSuggestionGroupIdVisibility = function() {
    return PageHandlerProxy.prototype.toggleSuggestionGroupIdVisibility
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.toggleSuggestionGroupIdVisibility = function(suggestionGroupId) {
    var params_ = new PageHandler_ToggleSuggestionGroupIdVisibility_Params();
    params_.suggestionGroupId = suggestionGroupId;
    var builder = new codec.MessageV0Builder(
        kPageHandler_ToggleSuggestionGroupIdVisibility_Name,
        codec.align(PageHandler_ToggleSuggestionGroupIdVisibility_Params.encodedSize));
    builder.encodeStruct(PageHandler_ToggleSuggestionGroupIdVisibility_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PageHandlerPtr.prototype.logCharTypedToRepaintLatency = function() {
    return PageHandlerProxy.prototype.logCharTypedToRepaintLatency
        .apply(this.ptr.getProxy(), arguments);
  };

  PageHandlerProxy.prototype.logCharTypedToRepaintLatency = function(latency) {
    var params_ = new PageHandler_LogCharTypedToRepaintLatency_Params();
    params_.latency = latency;
    var builder = new codec.MessageV0Builder(
        kPageHandler_LogCharTypedToRepaintLatency_Name,
        codec.align(PageHandler_LogCharTypedToRepaintLatency_Params.encodedSize));
    builder.encodeStruct(PageHandler_LogCharTypedToRepaintLatency_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PageHandlerStub(delegate) {
    this.delegate_ = delegate;
  }
  PageHandlerStub.prototype.addMostVisitedTile = function(url, title) {
    return this.delegate_ && this.delegate_.addMostVisitedTile && this.delegate_.addMostVisitedTile(url, title);
  }
  PageHandlerStub.prototype.deleteMostVisitedTile = function(url) {
    return this.delegate_ && this.delegate_.deleteMostVisitedTile && this.delegate_.deleteMostVisitedTile(url);
  }
  PageHandlerStub.prototype.reorderMostVisitedTile = function(url, newPos) {
    return this.delegate_ && this.delegate_.reorderMostVisitedTile && this.delegate_.reorderMostVisitedTile(url, newPos);
  }
  PageHandlerStub.prototype.restoreMostVisitedDefaults = function() {
    return this.delegate_ && this.delegate_.restoreMostVisitedDefaults && this.delegate_.restoreMostVisitedDefaults();
  }
  PageHandlerStub.prototype.setBackgroundImage = function(attribution1, attribution2, attributionUrl, imageUrl) {
    return this.delegate_ && this.delegate_.setBackgroundImage && this.delegate_.setBackgroundImage(attribution1, attribution2, attributionUrl, imageUrl);
  }
  PageHandlerStub.prototype.setDailyRefreshCollectionId = function(collectionId) {
    return this.delegate_ && this.delegate_.setDailyRefreshCollectionId && this.delegate_.setDailyRefreshCollectionId(collectionId);
  }
  PageHandlerStub.prototype.setNoBackgroundImage = function() {
    return this.delegate_ && this.delegate_.setNoBackgroundImage && this.delegate_.setNoBackgroundImage();
  }
  PageHandlerStub.prototype.setMostVisitedSettings = function(customLinksEnabled, visible) {
    return this.delegate_ && this.delegate_.setMostVisitedSettings && this.delegate_.setMostVisitedSettings(customLinksEnabled, visible);
  }
  PageHandlerStub.prototype.undoMostVisitedTileAction = function() {
    return this.delegate_ && this.delegate_.undoMostVisitedTileAction && this.delegate_.undoMostVisitedTileAction();
  }
  PageHandlerStub.prototype.updateMostVisitedInfo = function() {
    return this.delegate_ && this.delegate_.updateMostVisitedInfo && this.delegate_.updateMostVisitedInfo();
  }
  PageHandlerStub.prototype.updateMostVisitedTile = function(url, newUrl, newTitle) {
    return this.delegate_ && this.delegate_.updateMostVisitedTile && this.delegate_.updateMostVisitedTile(url, newUrl, newTitle);
  }
  PageHandlerStub.prototype.getChromeThemes = function() {
    return this.delegate_ && this.delegate_.getChromeThemes && this.delegate_.getChromeThemes();
  }
  PageHandlerStub.prototype.applyDefaultTheme = function() {
    return this.delegate_ && this.delegate_.applyDefaultTheme && this.delegate_.applyDefaultTheme();
  }
  PageHandlerStub.prototype.applyAutogeneratedTheme = function(frameColor) {
    return this.delegate_ && this.delegate_.applyAutogeneratedTheme && this.delegate_.applyAutogeneratedTheme(frameColor);
  }
  PageHandlerStub.prototype.applyChromeTheme = function(id) {
    return this.delegate_ && this.delegate_.applyChromeTheme && this.delegate_.applyChromeTheme(id);
  }
  PageHandlerStub.prototype.confirmThemeChanges = function() {
    return this.delegate_ && this.delegate_.confirmThemeChanges && this.delegate_.confirmThemeChanges();
  }
  PageHandlerStub.prototype.revertThemeChanges = function() {
    return this.delegate_ && this.delegate_.revertThemeChanges && this.delegate_.revertThemeChanges();
  }
  PageHandlerStub.prototype.getBackgroundCollections = function() {
    return this.delegate_ && this.delegate_.getBackgroundCollections && this.delegate_.getBackgroundCollections();
  }
  PageHandlerStub.prototype.getBackgroundImages = function(collectionId) {
    return this.delegate_ && this.delegate_.getBackgroundImages && this.delegate_.getBackgroundImages(collectionId);
  }
  PageHandlerStub.prototype.focusOmnibox = function() {
    return this.delegate_ && this.delegate_.focusOmnibox && this.delegate_.focusOmnibox();
  }
  PageHandlerStub.prototype.pasteIntoOmnibox = function(text) {
    return this.delegate_ && this.delegate_.pasteIntoOmnibox && this.delegate_.pasteIntoOmnibox(text);
  }
  PageHandlerStub.prototype.getDoodle = function() {
    return this.delegate_ && this.delegate_.getDoodle && this.delegate_.getDoodle();
  }
  PageHandlerStub.prototype.chooseLocalCustomBackground = function() {
    return this.delegate_ && this.delegate_.chooseLocalCustomBackground && this.delegate_.chooseLocalCustomBackground();
  }
  PageHandlerStub.prototype.getOneGoogleBarParts = function(queryParams) {
    return this.delegate_ && this.delegate_.getOneGoogleBarParts && this.delegate_.getOneGoogleBarParts(queryParams);
  }
  PageHandlerStub.prototype.onMostVisitedTilesRendered = function(tiles, time) {
    return this.delegate_ && this.delegate_.onMostVisitedTilesRendered && this.delegate_.onMostVisitedTilesRendered(tiles, time);
  }
  PageHandlerStub.prototype.onOneGoogleBarRendered = function(time) {
    return this.delegate_ && this.delegate_.onOneGoogleBarRendered && this.delegate_.onOneGoogleBarRendered(time);
  }
  PageHandlerStub.prototype.onPromoRendered = function(time) {
    return this.delegate_ && this.delegate_.onPromoRendered && this.delegate_.onPromoRendered(time);
  }
  PageHandlerStub.prototype.onMostVisitedTileNavigation = function(tile, index) {
    return this.delegate_ && this.delegate_.onMostVisitedTileNavigation && this.delegate_.onMostVisitedTileNavigation(tile, index);
  }
  PageHandlerStub.prototype.onCustomizeDialogAction = function(action) {
    return this.delegate_ && this.delegate_.onCustomizeDialogAction && this.delegate_.onCustomizeDialogAction(action);
  }
  PageHandlerStub.prototype.onDoodleImageClicked = function(type, logUrl) {
    return this.delegate_ && this.delegate_.onDoodleImageClicked && this.delegate_.onDoodleImageClicked(type, logUrl);
  }
  PageHandlerStub.prototype.onDoodleImageRendered = function(type, time, logUrl) {
    return this.delegate_ && this.delegate_.onDoodleImageRendered && this.delegate_.onDoodleImageRendered(type, time, logUrl);
  }
  PageHandlerStub.prototype.onDoodleShared = function(channel, doodleId, shareId) {
    return this.delegate_ && this.delegate_.onDoodleShared && this.delegate_.onDoodleShared(channel, doodleId, shareId);
  }
  PageHandlerStub.prototype.onPromoLinkClicked = function() {
    return this.delegate_ && this.delegate_.onPromoLinkClicked && this.delegate_.onPromoLinkClicked();
  }
  PageHandlerStub.prototype.onVoiceSearchAction = function(action) {
    return this.delegate_ && this.delegate_.onVoiceSearchAction && this.delegate_.onVoiceSearchAction(action);
  }
  PageHandlerStub.prototype.onVoiceSearchError = function(error) {
    return this.delegate_ && this.delegate_.onVoiceSearchError && this.delegate_.onVoiceSearchError(error);
  }
  PageHandlerStub.prototype.queryAutocomplete = function(input, preventInlineAutocomplete) {
    return this.delegate_ && this.delegate_.queryAutocomplete && this.delegate_.queryAutocomplete(input, preventInlineAutocomplete);
  }
  PageHandlerStub.prototype.stopAutocomplete = function(clearResult) {
    return this.delegate_ && this.delegate_.stopAutocomplete && this.delegate_.stopAutocomplete(clearResult);
  }
  PageHandlerStub.prototype.openAutocompleteMatch = function(line, url, areMatchesShowing, timeElapsedSinceLastFocus, mouseButton, altKey, ctrlKey, metaKey, shiftKey) {
    return this.delegate_ && this.delegate_.openAutocompleteMatch && this.delegate_.openAutocompleteMatch(line, url, areMatchesShowing, timeElapsedSinceLastFocus, mouseButton, altKey, ctrlKey, metaKey, shiftKey);
  }
  PageHandlerStub.prototype.deleteAutocompleteMatch = function(line) {
    return this.delegate_ && this.delegate_.deleteAutocompleteMatch && this.delegate_.deleteAutocompleteMatch(line);
  }
  PageHandlerStub.prototype.toggleSuggestionGroupIdVisibility = function(suggestionGroupId) {
    return this.delegate_ && this.delegate_.toggleSuggestionGroupIdVisibility && this.delegate_.toggleSuggestionGroupIdVisibility(suggestionGroupId);
  }
  PageHandlerStub.prototype.logCharTypedToRepaintLatency = function(latency) {
    return this.delegate_ && this.delegate_.logCharTypedToRepaintLatency && this.delegate_.logCharTypedToRepaintLatency(latency);
  }

  PageHandlerStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPageHandler_DeleteMostVisitedTile_Name:
      var params = reader.decodeStruct(PageHandler_DeleteMostVisitedTile_Params);
      this.deleteMostVisitedTile(params.url);
      return true;
    case kPageHandler_ReorderMostVisitedTile_Name:
      var params = reader.decodeStruct(PageHandler_ReorderMostVisitedTile_Params);
      this.reorderMostVisitedTile(params.url, params.newPos);
      return true;
    case kPageHandler_RestoreMostVisitedDefaults_Name:
      var params = reader.decodeStruct(PageHandler_RestoreMostVisitedDefaults_Params);
      this.restoreMostVisitedDefaults();
      return true;
    case kPageHandler_SetBackgroundImage_Name:
      var params = reader.decodeStruct(PageHandler_SetBackgroundImage_Params);
      this.setBackgroundImage(params.attribution1, params.attribution2, params.attributionUrl, params.imageUrl);
      return true;
    case kPageHandler_SetDailyRefreshCollectionId_Name:
      var params = reader.decodeStruct(PageHandler_SetDailyRefreshCollectionId_Params);
      this.setDailyRefreshCollectionId(params.collectionId);
      return true;
    case kPageHandler_SetNoBackgroundImage_Name:
      var params = reader.decodeStruct(PageHandler_SetNoBackgroundImage_Params);
      this.setNoBackgroundImage();
      return true;
    case kPageHandler_SetMostVisitedSettings_Name:
      var params = reader.decodeStruct(PageHandler_SetMostVisitedSettings_Params);
      this.setMostVisitedSettings(params.customLinksEnabled, params.visible);
      return true;
    case kPageHandler_UndoMostVisitedTileAction_Name:
      var params = reader.decodeStruct(PageHandler_UndoMostVisitedTileAction_Params);
      this.undoMostVisitedTileAction();
      return true;
    case kPageHandler_UpdateMostVisitedInfo_Name:
      var params = reader.decodeStruct(PageHandler_UpdateMostVisitedInfo_Params);
      this.updateMostVisitedInfo();
      return true;
    case kPageHandler_ApplyDefaultTheme_Name:
      var params = reader.decodeStruct(PageHandler_ApplyDefaultTheme_Params);
      this.applyDefaultTheme();
      return true;
    case kPageHandler_ApplyAutogeneratedTheme_Name:
      var params = reader.decodeStruct(PageHandler_ApplyAutogeneratedTheme_Params);
      this.applyAutogeneratedTheme(params.frameColor);
      return true;
    case kPageHandler_ApplyChromeTheme_Name:
      var params = reader.decodeStruct(PageHandler_ApplyChromeTheme_Params);
      this.applyChromeTheme(params.id);
      return true;
    case kPageHandler_ConfirmThemeChanges_Name:
      var params = reader.decodeStruct(PageHandler_ConfirmThemeChanges_Params);
      this.confirmThemeChanges();
      return true;
    case kPageHandler_RevertThemeChanges_Name:
      var params = reader.decodeStruct(PageHandler_RevertThemeChanges_Params);
      this.revertThemeChanges();
      return true;
    case kPageHandler_FocusOmnibox_Name:
      var params = reader.decodeStruct(PageHandler_FocusOmnibox_Params);
      this.focusOmnibox();
      return true;
    case kPageHandler_PasteIntoOmnibox_Name:
      var params = reader.decodeStruct(PageHandler_PasteIntoOmnibox_Params);
      this.pasteIntoOmnibox(params.text);
      return true;
    case kPageHandler_OnMostVisitedTilesRendered_Name:
      var params = reader.decodeStruct(PageHandler_OnMostVisitedTilesRendered_Params);
      this.onMostVisitedTilesRendered(params.tiles, params.time);
      return true;
    case kPageHandler_OnOneGoogleBarRendered_Name:
      var params = reader.decodeStruct(PageHandler_OnOneGoogleBarRendered_Params);
      this.onOneGoogleBarRendered(params.time);
      return true;
    case kPageHandler_OnPromoRendered_Name:
      var params = reader.decodeStruct(PageHandler_OnPromoRendered_Params);
      this.onPromoRendered(params.time);
      return true;
    case kPageHandler_OnMostVisitedTileNavigation_Name:
      var params = reader.decodeStruct(PageHandler_OnMostVisitedTileNavigation_Params);
      this.onMostVisitedTileNavigation(params.tile, params.index);
      return true;
    case kPageHandler_OnCustomizeDialogAction_Name:
      var params = reader.decodeStruct(PageHandler_OnCustomizeDialogAction_Params);
      this.onCustomizeDialogAction(params.action);
      return true;
    case kPageHandler_OnDoodleImageClicked_Name:
      var params = reader.decodeStruct(PageHandler_OnDoodleImageClicked_Params);
      this.onDoodleImageClicked(params.type, params.logUrl);
      return true;
    case kPageHandler_OnDoodleShared_Name:
      var params = reader.decodeStruct(PageHandler_OnDoodleShared_Params);
      this.onDoodleShared(params.channel, params.doodleId, params.shareId);
      return true;
    case kPageHandler_OnPromoLinkClicked_Name:
      var params = reader.decodeStruct(PageHandler_OnPromoLinkClicked_Params);
      this.onPromoLinkClicked();
      return true;
    case kPageHandler_OnVoiceSearchAction_Name:
      var params = reader.decodeStruct(PageHandler_OnVoiceSearchAction_Params);
      this.onVoiceSearchAction(params.action);
      return true;
    case kPageHandler_OnVoiceSearchError_Name:
      var params = reader.decodeStruct(PageHandler_OnVoiceSearchError_Params);
      this.onVoiceSearchError(params.error);
      return true;
    case kPageHandler_QueryAutocomplete_Name:
      var params = reader.decodeStruct(PageHandler_QueryAutocomplete_Params);
      this.queryAutocomplete(params.input, params.preventInlineAutocomplete);
      return true;
    case kPageHandler_StopAutocomplete_Name:
      var params = reader.decodeStruct(PageHandler_StopAutocomplete_Params);
      this.stopAutocomplete(params.clearResult);
      return true;
    case kPageHandler_OpenAutocompleteMatch_Name:
      var params = reader.decodeStruct(PageHandler_OpenAutocompleteMatch_Params);
      this.openAutocompleteMatch(params.line, params.url, params.areMatchesShowing, params.timeElapsedSinceLastFocus, params.mouseButton, params.altKey, params.ctrlKey, params.metaKey, params.shiftKey);
      return true;
    case kPageHandler_DeleteAutocompleteMatch_Name:
      var params = reader.decodeStruct(PageHandler_DeleteAutocompleteMatch_Params);
      this.deleteAutocompleteMatch(params.line);
      return true;
    case kPageHandler_ToggleSuggestionGroupIdVisibility_Name:
      var params = reader.decodeStruct(PageHandler_ToggleSuggestionGroupIdVisibility_Params);
      this.toggleSuggestionGroupIdVisibility(params.suggestionGroupId);
      return true;
    case kPageHandler_LogCharTypedToRepaintLatency_Name:
      var params = reader.decodeStruct(PageHandler_LogCharTypedToRepaintLatency_Params);
      this.logCharTypedToRepaintLatency(params.latency);
      return true;
    default:
      return false;
    }
  };

  PageHandlerStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPageHandler_AddMostVisitedTile_Name:
      var params = reader.decodeStruct(PageHandler_AddMostVisitedTile_Params);
      this.addMostVisitedTile(params.url, params.title).then(function(response) {
        var responseParams =
            new PageHandler_AddMostVisitedTile_ResponseParams();
        responseParams.success = response.success;
        var builder = new codec.MessageV1Builder(
            kPageHandler_AddMostVisitedTile_Name,
            codec.align(PageHandler_AddMostVisitedTile_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PageHandler_AddMostVisitedTile_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPageHandler_UpdateMostVisitedTile_Name:
      var params = reader.decodeStruct(PageHandler_UpdateMostVisitedTile_Params);
      this.updateMostVisitedTile(params.url, params.newUrl, params.newTitle).then(function(response) {
        var responseParams =
            new PageHandler_UpdateMostVisitedTile_ResponseParams();
        responseParams.success = response.success;
        var builder = new codec.MessageV1Builder(
            kPageHandler_UpdateMostVisitedTile_Name,
            codec.align(PageHandler_UpdateMostVisitedTile_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PageHandler_UpdateMostVisitedTile_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPageHandler_GetChromeThemes_Name:
      var params = reader.decodeStruct(PageHandler_GetChromeThemes_Params);
      this.getChromeThemes().then(function(response) {
        var responseParams =
            new PageHandler_GetChromeThemes_ResponseParams();
        responseParams.chromeThemes = response.chromeThemes;
        var builder = new codec.MessageV1Builder(
            kPageHandler_GetChromeThemes_Name,
            codec.align(PageHandler_GetChromeThemes_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PageHandler_GetChromeThemes_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPageHandler_GetBackgroundCollections_Name:
      var params = reader.decodeStruct(PageHandler_GetBackgroundCollections_Params);
      this.getBackgroundCollections().then(function(response) {
        var responseParams =
            new PageHandler_GetBackgroundCollections_ResponseParams();
        responseParams.collections = response.collections;
        var builder = new codec.MessageV1Builder(
            kPageHandler_GetBackgroundCollections_Name,
            codec.align(PageHandler_GetBackgroundCollections_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PageHandler_GetBackgroundCollections_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPageHandler_GetBackgroundImages_Name:
      var params = reader.decodeStruct(PageHandler_GetBackgroundImages_Params);
      this.getBackgroundImages(params.collectionId).then(function(response) {
        var responseParams =
            new PageHandler_GetBackgroundImages_ResponseParams();
        responseParams.images = response.images;
        var builder = new codec.MessageV1Builder(
            kPageHandler_GetBackgroundImages_Name,
            codec.align(PageHandler_GetBackgroundImages_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PageHandler_GetBackgroundImages_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPageHandler_GetDoodle_Name:
      var params = reader.decodeStruct(PageHandler_GetDoodle_Params);
      this.getDoodle().then(function(response) {
        var responseParams =
            new PageHandler_GetDoodle_ResponseParams();
        responseParams.doodle = response.doodle;
        var builder = new codec.MessageV1Builder(
            kPageHandler_GetDoodle_Name,
            codec.align(PageHandler_GetDoodle_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PageHandler_GetDoodle_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPageHandler_ChooseLocalCustomBackground_Name:
      var params = reader.decodeStruct(PageHandler_ChooseLocalCustomBackground_Params);
      this.chooseLocalCustomBackground().then(function(response) {
        var responseParams =
            new PageHandler_ChooseLocalCustomBackground_ResponseParams();
        responseParams.success = response.success;
        var builder = new codec.MessageV1Builder(
            kPageHandler_ChooseLocalCustomBackground_Name,
            codec.align(PageHandler_ChooseLocalCustomBackground_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PageHandler_ChooseLocalCustomBackground_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPageHandler_GetOneGoogleBarParts_Name:
      var params = reader.decodeStruct(PageHandler_GetOneGoogleBarParts_Params);
      this.getOneGoogleBarParts(params.queryParams).then(function(response) {
        var responseParams =
            new PageHandler_GetOneGoogleBarParts_ResponseParams();
        responseParams.parts = response.parts;
        var builder = new codec.MessageV1Builder(
            kPageHandler_GetOneGoogleBarParts_Name,
            codec.align(PageHandler_GetOneGoogleBarParts_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PageHandler_GetOneGoogleBarParts_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kPageHandler_OnDoodleImageRendered_Name:
      var params = reader.decodeStruct(PageHandler_OnDoodleImageRendered_Params);
      this.onDoodleImageRendered(params.type, params.time, params.logUrl).then(function(response) {
        var responseParams =
            new PageHandler_OnDoodleImageRendered_ResponseParams();
        responseParams.imageClickParams = response.imageClickParams;
        responseParams.interactionLogUrl = response.interactionLogUrl;
        responseParams.shareId = response.shareId;
        var builder = new codec.MessageV1Builder(
            kPageHandler_OnDoodleImageRendered_Name,
            codec.align(PageHandler_OnDoodleImageRendered_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(PageHandler_OnDoodleImageRendered_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validatePageHandlerRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPageHandler_AddMostVisitedTile_Name:
        if (message.expectsResponse())
          paramsClass = PageHandler_AddMostVisitedTile_Params;
      break;
      case kPageHandler_DeleteMostVisitedTile_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_DeleteMostVisitedTile_Params;
      break;
      case kPageHandler_ReorderMostVisitedTile_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_ReorderMostVisitedTile_Params;
      break;
      case kPageHandler_RestoreMostVisitedDefaults_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_RestoreMostVisitedDefaults_Params;
      break;
      case kPageHandler_SetBackgroundImage_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_SetBackgroundImage_Params;
      break;
      case kPageHandler_SetDailyRefreshCollectionId_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_SetDailyRefreshCollectionId_Params;
      break;
      case kPageHandler_SetNoBackgroundImage_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_SetNoBackgroundImage_Params;
      break;
      case kPageHandler_SetMostVisitedSettings_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_SetMostVisitedSettings_Params;
      break;
      case kPageHandler_UndoMostVisitedTileAction_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_UndoMostVisitedTileAction_Params;
      break;
      case kPageHandler_UpdateMostVisitedInfo_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_UpdateMostVisitedInfo_Params;
      break;
      case kPageHandler_UpdateMostVisitedTile_Name:
        if (message.expectsResponse())
          paramsClass = PageHandler_UpdateMostVisitedTile_Params;
      break;
      case kPageHandler_GetChromeThemes_Name:
        if (message.expectsResponse())
          paramsClass = PageHandler_GetChromeThemes_Params;
      break;
      case kPageHandler_ApplyDefaultTheme_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_ApplyDefaultTheme_Params;
      break;
      case kPageHandler_ApplyAutogeneratedTheme_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_ApplyAutogeneratedTheme_Params;
      break;
      case kPageHandler_ApplyChromeTheme_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_ApplyChromeTheme_Params;
      break;
      case kPageHandler_ConfirmThemeChanges_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_ConfirmThemeChanges_Params;
      break;
      case kPageHandler_RevertThemeChanges_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_RevertThemeChanges_Params;
      break;
      case kPageHandler_GetBackgroundCollections_Name:
        if (message.expectsResponse())
          paramsClass = PageHandler_GetBackgroundCollections_Params;
      break;
      case kPageHandler_GetBackgroundImages_Name:
        if (message.expectsResponse())
          paramsClass = PageHandler_GetBackgroundImages_Params;
      break;
      case kPageHandler_FocusOmnibox_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_FocusOmnibox_Params;
      break;
      case kPageHandler_PasteIntoOmnibox_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_PasteIntoOmnibox_Params;
      break;
      case kPageHandler_GetDoodle_Name:
        if (message.expectsResponse())
          paramsClass = PageHandler_GetDoodle_Params;
      break;
      case kPageHandler_ChooseLocalCustomBackground_Name:
        if (message.expectsResponse())
          paramsClass = PageHandler_ChooseLocalCustomBackground_Params;
      break;
      case kPageHandler_GetOneGoogleBarParts_Name:
        if (message.expectsResponse())
          paramsClass = PageHandler_GetOneGoogleBarParts_Params;
      break;
      case kPageHandler_OnMostVisitedTilesRendered_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_OnMostVisitedTilesRendered_Params;
      break;
      case kPageHandler_OnOneGoogleBarRendered_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_OnOneGoogleBarRendered_Params;
      break;
      case kPageHandler_OnPromoRendered_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_OnPromoRendered_Params;
      break;
      case kPageHandler_OnMostVisitedTileNavigation_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_OnMostVisitedTileNavigation_Params;
      break;
      case kPageHandler_OnCustomizeDialogAction_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_OnCustomizeDialogAction_Params;
      break;
      case kPageHandler_OnDoodleImageClicked_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_OnDoodleImageClicked_Params;
      break;
      case kPageHandler_OnDoodleImageRendered_Name:
        if (message.expectsResponse())
          paramsClass = PageHandler_OnDoodleImageRendered_Params;
      break;
      case kPageHandler_OnDoodleShared_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_OnDoodleShared_Params;
      break;
      case kPageHandler_OnPromoLinkClicked_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_OnPromoLinkClicked_Params;
      break;
      case kPageHandler_OnVoiceSearchAction_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_OnVoiceSearchAction_Params;
      break;
      case kPageHandler_OnVoiceSearchError_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_OnVoiceSearchError_Params;
      break;
      case kPageHandler_QueryAutocomplete_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_QueryAutocomplete_Params;
      break;
      case kPageHandler_StopAutocomplete_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_StopAutocomplete_Params;
      break;
      case kPageHandler_OpenAutocompleteMatch_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_OpenAutocompleteMatch_Params;
      break;
      case kPageHandler_DeleteAutocompleteMatch_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_DeleteAutocompleteMatch_Params;
      break;
      case kPageHandler_ToggleSuggestionGroupIdVisibility_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_ToggleSuggestionGroupIdVisibility_Params;
      break;
      case kPageHandler_LogCharTypedToRepaintLatency_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = PageHandler_LogCharTypedToRepaintLatency_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePageHandlerResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kPageHandler_AddMostVisitedTile_Name:
        if (message.isResponse())
          paramsClass = PageHandler_AddMostVisitedTile_ResponseParams;
        break;
      case kPageHandler_UpdateMostVisitedTile_Name:
        if (message.isResponse())
          paramsClass = PageHandler_UpdateMostVisitedTile_ResponseParams;
        break;
      case kPageHandler_GetChromeThemes_Name:
        if (message.isResponse())
          paramsClass = PageHandler_GetChromeThemes_ResponseParams;
        break;
      case kPageHandler_GetBackgroundCollections_Name:
        if (message.isResponse())
          paramsClass = PageHandler_GetBackgroundCollections_ResponseParams;
        break;
      case kPageHandler_GetBackgroundImages_Name:
        if (message.isResponse())
          paramsClass = PageHandler_GetBackgroundImages_ResponseParams;
        break;
      case kPageHandler_GetDoodle_Name:
        if (message.isResponse())
          paramsClass = PageHandler_GetDoodle_ResponseParams;
        break;
      case kPageHandler_ChooseLocalCustomBackground_Name:
        if (message.isResponse())
          paramsClass = PageHandler_ChooseLocalCustomBackground_ResponseParams;
        break;
      case kPageHandler_GetOneGoogleBarParts_Name:
        if (message.isResponse())
          paramsClass = PageHandler_GetOneGoogleBarParts_ResponseParams;
        break;
      case kPageHandler_OnDoodleImageRendered_Name:
        if (message.isResponse())
          paramsClass = PageHandler_OnDoodleImageRendered_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var PageHandler = {
    name: 'new_tab_page.mojom.PageHandler',
    kVersion: 0,
    ptrClass: PageHandlerPtr,
    proxyClass: PageHandlerProxy,
    stubClass: PageHandlerStub,
    validateRequest: validatePageHandlerRequest,
    validateResponse: validatePageHandlerResponse,
  };
  PageHandlerStub.prototype.validator = validatePageHandlerRequest;
  PageHandlerProxy.prototype.validator = validatePageHandlerResponse;
  var kPage_SetMostVisitedInfo_Name = 317073767;
  var kPage_SetTheme_Name = 732624710;
  var kPage_SetFakeboxFocused_Name = 278101485;
  var kPage_SetFakeboxVisible_Name = 560390409;
  var kPage_AutocompleteResultChanged_Name = 1546359173;
  var kPage_AutocompleteMatchImageAvailable_Name = 116724268;

  function PagePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(Page,
                                                   handleOrPtrInfo);
  }

  function PageAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        Page, associatedInterfacePtrInfo);
  }

  PageAssociatedPtr.prototype =
      Object.create(PagePtr.prototype);
  PageAssociatedPtr.prototype.constructor =
      PageAssociatedPtr;

  function PageProxy(receiver) {
    this.receiver_ = receiver;
  }
  PagePtr.prototype.setMostVisitedInfo = function() {
    return PageProxy.prototype.setMostVisitedInfo
        .apply(this.ptr.getProxy(), arguments);
  };

  PageProxy.prototype.setMostVisitedInfo = function(info) {
    var params_ = new Page_SetMostVisitedInfo_Params();
    params_.info = info;
    var builder = new codec.MessageV0Builder(
        kPage_SetMostVisitedInfo_Name,
        codec.align(Page_SetMostVisitedInfo_Params.encodedSize));
    builder.encodeStruct(Page_SetMostVisitedInfo_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PagePtr.prototype.setTheme = function() {
    return PageProxy.prototype.setTheme
        .apply(this.ptr.getProxy(), arguments);
  };

  PageProxy.prototype.setTheme = function(theme) {
    var params_ = new Page_SetTheme_Params();
    params_.theme = theme;
    var builder = new codec.MessageV0Builder(
        kPage_SetTheme_Name,
        codec.align(Page_SetTheme_Params.encodedSize));
    builder.encodeStruct(Page_SetTheme_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PagePtr.prototype.setFakeboxFocused = function() {
    return PageProxy.prototype.setFakeboxFocused
        .apply(this.ptr.getProxy(), arguments);
  };

  PageProxy.prototype.setFakeboxFocused = function(focused) {
    var params_ = new Page_SetFakeboxFocused_Params();
    params_.focused = focused;
    var builder = new codec.MessageV0Builder(
        kPage_SetFakeboxFocused_Name,
        codec.align(Page_SetFakeboxFocused_Params.encodedSize));
    builder.encodeStruct(Page_SetFakeboxFocused_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PagePtr.prototype.setFakeboxVisible = function() {
    return PageProxy.prototype.setFakeboxVisible
        .apply(this.ptr.getProxy(), arguments);
  };

  PageProxy.prototype.setFakeboxVisible = function(visible) {
    var params_ = new Page_SetFakeboxVisible_Params();
    params_.visible = visible;
    var builder = new codec.MessageV0Builder(
        kPage_SetFakeboxVisible_Name,
        codec.align(Page_SetFakeboxVisible_Params.encodedSize));
    builder.encodeStruct(Page_SetFakeboxVisible_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PagePtr.prototype.autocompleteResultChanged = function() {
    return PageProxy.prototype.autocompleteResultChanged
        .apply(this.ptr.getProxy(), arguments);
  };

  PageProxy.prototype.autocompleteResultChanged = function(result) {
    var params_ = new Page_AutocompleteResultChanged_Params();
    params_.result = result;
    var builder = new codec.MessageV0Builder(
        kPage_AutocompleteResultChanged_Name,
        codec.align(Page_AutocompleteResultChanged_Params.encodedSize));
    builder.encodeStruct(Page_AutocompleteResultChanged_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  PagePtr.prototype.autocompleteMatchImageAvailable = function() {
    return PageProxy.prototype.autocompleteMatchImageAvailable
        .apply(this.ptr.getProxy(), arguments);
  };

  PageProxy.prototype.autocompleteMatchImageAvailable = function(matchIndex, url, dataUrl) {
    var params_ = new Page_AutocompleteMatchImageAvailable_Params();
    params_.matchIndex = matchIndex;
    params_.url = url;
    params_.dataUrl = dataUrl;
    var builder = new codec.MessageV0Builder(
        kPage_AutocompleteMatchImageAvailable_Name,
        codec.align(Page_AutocompleteMatchImageAvailable_Params.encodedSize));
    builder.encodeStruct(Page_AutocompleteMatchImageAvailable_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function PageStub(delegate) {
    this.delegate_ = delegate;
  }
  PageStub.prototype.setMostVisitedInfo = function(info) {
    return this.delegate_ && this.delegate_.setMostVisitedInfo && this.delegate_.setMostVisitedInfo(info);
  }
  PageStub.prototype.setTheme = function(theme) {
    return this.delegate_ && this.delegate_.setTheme && this.delegate_.setTheme(theme);
  }
  PageStub.prototype.setFakeboxFocused = function(focused) {
    return this.delegate_ && this.delegate_.setFakeboxFocused && this.delegate_.setFakeboxFocused(focused);
  }
  PageStub.prototype.setFakeboxVisible = function(visible) {
    return this.delegate_ && this.delegate_.setFakeboxVisible && this.delegate_.setFakeboxVisible(visible);
  }
  PageStub.prototype.autocompleteResultChanged = function(result) {
    return this.delegate_ && this.delegate_.autocompleteResultChanged && this.delegate_.autocompleteResultChanged(result);
  }
  PageStub.prototype.autocompleteMatchImageAvailable = function(matchIndex, url, dataUrl) {
    return this.delegate_ && this.delegate_.autocompleteMatchImageAvailable && this.delegate_.autocompleteMatchImageAvailable(matchIndex, url, dataUrl);
  }

  PageStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kPage_SetMostVisitedInfo_Name:
      var params = reader.decodeStruct(Page_SetMostVisitedInfo_Params);
      this.setMostVisitedInfo(params.info);
      return true;
    case kPage_SetTheme_Name:
      var params = reader.decodeStruct(Page_SetTheme_Params);
      this.setTheme(params.theme);
      return true;
    case kPage_SetFakeboxFocused_Name:
      var params = reader.decodeStruct(Page_SetFakeboxFocused_Params);
      this.setFakeboxFocused(params.focused);
      return true;
    case kPage_SetFakeboxVisible_Name:
      var params = reader.decodeStruct(Page_SetFakeboxVisible_Params);
      this.setFakeboxVisible(params.visible);
      return true;
    case kPage_AutocompleteResultChanged_Name:
      var params = reader.decodeStruct(Page_AutocompleteResultChanged_Params);
      this.autocompleteResultChanged(params.result);
      return true;
    case kPage_AutocompleteMatchImageAvailable_Name:
      var params = reader.decodeStruct(Page_AutocompleteMatchImageAvailable_Params);
      this.autocompleteMatchImageAvailable(params.matchIndex, params.url, params.dataUrl);
      return true;
    default:
      return false;
    }
  };

  PageStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validatePageRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kPage_SetMostVisitedInfo_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Page_SetMostVisitedInfo_Params;
      break;
      case kPage_SetTheme_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Page_SetTheme_Params;
      break;
      case kPage_SetFakeboxFocused_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Page_SetFakeboxFocused_Params;
      break;
      case kPage_SetFakeboxVisible_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Page_SetFakeboxVisible_Params;
      break;
      case kPage_AutocompleteResultChanged_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Page_AutocompleteResultChanged_Params;
      break;
      case kPage_AutocompleteMatchImageAvailable_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Page_AutocompleteMatchImageAvailable_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validatePageResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var Page = {
    name: 'new_tab_page.mojom.Page',
    kVersion: 0,
    ptrClass: PagePtr,
    proxyClass: PageProxy,
    stubClass: PageStub,
    validateRequest: validatePageRequest,
    validateResponse: null,
  };
  PageStub.prototype.validator = validatePageRequest;
  PageProxy.prototype.validator = null;
  exports.ThemeType = ThemeType;
  exports.DoodleImageType = DoodleImageType;
  exports.DoodleShareChannel = DoodleShareChannel;
  exports.CustomizeDialogAction = CustomizeDialogAction;
  exports.VoiceSearchAction = VoiceSearchAction;
  exports.VoiceSearchError = VoiceSearchError;
  exports.OneGoogleBarParts = OneGoogleBarParts;
  exports.MostVisitedTile = MostVisitedTile;
  exports.MostVisitedInfo = MostVisitedInfo;
  exports.ThemeColors = ThemeColors;
  exports.BackgroundCollection = BackgroundCollection;
  exports.CollectionImage = CollectionImage;
  exports.ChromeTheme = ChromeTheme;
  exports.ThirdPartyThemeInfo = ThirdPartyThemeInfo;
  exports.SearchBoxTheme = SearchBoxTheme;
  exports.BackgroundImage = BackgroundImage;
  exports.Theme = Theme;
  exports.DoodleShareButton = DoodleShareButton;
  exports.ImageDoodleContent = ImageDoodleContent;
  exports.InteractiveDoodleContent = InteractiveDoodleContent;
  exports.Doodle = Doodle;
  exports.ThemeInfo = ThemeInfo;
  exports.DoodleContent = DoodleContent;
  exports.PageHandlerFactory = PageHandlerFactory;
  exports.PageHandlerFactoryPtr = PageHandlerFactoryPtr;
  exports.PageHandlerFactoryAssociatedPtr = PageHandlerFactoryAssociatedPtr;
  exports.PageHandler = PageHandler;
  exports.PageHandlerPtr = PageHandlerPtr;
  exports.PageHandlerAssociatedPtr = PageHandlerAssociatedPtr;
  exports.Page = Page;
  exports.PagePtr = PagePtr;
  exports.PageAssociatedPtr = PageAssociatedPtr;
})();
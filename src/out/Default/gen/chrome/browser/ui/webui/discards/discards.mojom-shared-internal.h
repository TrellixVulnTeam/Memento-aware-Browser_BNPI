// chrome/browser/ui/webui/discards/discards.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_UI_WEBUI_DISCARDS_DISCARDS_MOJOM_SHARED_INTERNAL_H_
#define CHROME_BROWSER_UI_WEBUI_DISCARDS_DISCARDS_MOJOM_SHARED_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "chrome/browser/resource_coordinator/lifecycle_unit_state.mojom-shared-internal.h"
#include "mojo/public/mojom/base/process_id.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared-internal.h"
#include "url/mojom/url.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace discards {
namespace mojom {
namespace internal {
class TabDiscardsInfo_Data;
class PageInfo_Data;
class FrameInfo_Data;
class ProcessInfo_Data;
class WorkerInfo_Data;
class FavIconInfo_Data;

struct LifecycleUnitVisibility_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

#pragma pack(push, 1)
class  TabDiscardsInfo_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(TabDiscardsInfo_Data));
      new (data()) TabDiscardsInfo_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    TabDiscardsInfo_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<TabDiscardsInfo_Data>(index_);
    }
    TabDiscardsInfo_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> tab_url;
  mojo::internal::Pointer<mojo::internal::String_Data> title;
  int32_t visibility;
  int32_t loading_state;
  int32_t state;
  uint8_t can_discard : 1;
  uint8_t is_auto_discardable : 1;
  uint8_t has_reactivation_score : 1;
  uint8_t has_focus : 1;
  uint8_t pad8_[3];
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<mojo::internal::String_Data>>> cannot_discard_reasons;
  int32_t discard_count;
  int32_t discard_reason;
  int32_t utility_rank;
  int32_t last_active_seconds;
  int32_t id;
  uint8_t pad14_[4];
  double reactivation_score;
  double site_engagement_score;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> state_change_time;

 private:
  TabDiscardsInfo_Data();
  ~TabDiscardsInfo_Data() = delete;
};
static_assert(sizeof(TabDiscardsInfo_Data) == 96,
              "Bad sizeof(TabDiscardsInfo_Data)");
// Used by TabDiscardsInfo::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct TabDiscardsInfo_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  TabDiscardsInfo_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~TabDiscardsInfo_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    TabDiscardsInfo_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    TabDiscardsInfo_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  PageInfo_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageInfo_Data));
      new (data()) PageInfo_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageInfo_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageInfo_Data>(index_);
    }
    PageInfo_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t id;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> main_frame_url;
  int64_t opener_frame_id;
  mojo::internal::Pointer<mojo::internal::String_Data> description_json;

 private:
  PageInfo_Data();
  ~PageInfo_Data() = delete;
};
static_assert(sizeof(PageInfo_Data) == 40,
              "Bad sizeof(PageInfo_Data)");
// Used by PageInfo::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct PageInfo_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  PageInfo_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~PageInfo_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    PageInfo_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    PageInfo_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  FrameInfo_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameInfo_Data));
      new (data()) FrameInfo_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameInfo_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameInfo_Data>(index_);
    }
    FrameInfo_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t id;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  int64_t page_id;
  int64_t parent_frame_id;
  int64_t process_id;
  mojo::internal::Pointer<mojo::internal::String_Data> description_json;

 private:
  FrameInfo_Data();
  ~FrameInfo_Data() = delete;
};
static_assert(sizeof(FrameInfo_Data) == 56,
              "Bad sizeof(FrameInfo_Data)");
// Used by FrameInfo::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct FrameInfo_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  FrameInfo_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~FrameInfo_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    FrameInfo_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    FrameInfo_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  ProcessInfo_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ProcessInfo_Data));
      new (data()) ProcessInfo_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ProcessInfo_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ProcessInfo_Data>(index_);
    }
    ProcessInfo_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t id;
  mojo::internal::Pointer<::mojo_base::mojom::internal::ProcessId_Data> pid;
  uint64_t private_footprint_kb;
  mojo::internal::Pointer<mojo::internal::String_Data> description_json;

 private:
  ProcessInfo_Data();
  ~ProcessInfo_Data() = delete;
};
static_assert(sizeof(ProcessInfo_Data) == 40,
              "Bad sizeof(ProcessInfo_Data)");
// Used by ProcessInfo::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct ProcessInfo_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  ProcessInfo_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~ProcessInfo_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    ProcessInfo_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    ProcessInfo_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  WorkerInfo_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(WorkerInfo_Data));
      new (data()) WorkerInfo_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    WorkerInfo_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<WorkerInfo_Data>(index_);
    }
    WorkerInfo_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t id;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  int64_t process_id;
  mojo::internal::Pointer<mojo::internal::Array_Data<int64_t>> client_frame_ids;
  mojo::internal::Pointer<mojo::internal::Array_Data<int64_t>> client_worker_ids;
  mojo::internal::Pointer<mojo::internal::Array_Data<int64_t>> child_worker_ids;
  mojo::internal::Pointer<mojo::internal::String_Data> description_json;

 private:
  WorkerInfo_Data();
  ~WorkerInfo_Data() = delete;
};
static_assert(sizeof(WorkerInfo_Data) == 64,
              "Bad sizeof(WorkerInfo_Data)");
// Used by WorkerInfo::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct WorkerInfo_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  WorkerInfo_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~WorkerInfo_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    WorkerInfo_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    WorkerInfo_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  FavIconInfo_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FavIconInfo_Data));
      new (data()) FavIconInfo_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FavIconInfo_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FavIconInfo_Data>(index_);
    }
    FavIconInfo_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t node_id;
  mojo::internal::Pointer<mojo::internal::String_Data> icon_data;

 private:
  FavIconInfo_Data();
  ~FavIconInfo_Data() = delete;
};
static_assert(sizeof(FavIconInfo_Data) == 24,
              "Bad sizeof(FavIconInfo_Data)");
// Used by FavIconInfo::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct FavIconInfo_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  FavIconInfo_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~FavIconInfo_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    FavIconInfo_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    FavIconInfo_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace discards

#endif  // CHROME_BROWSER_UI_WEBUI_DISCARDS_DISCARDS_MOJOM_SHARED_INTERNAL_H_
// chrome/browser/ui/webui/interventions_internals/interventions_internals.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "chrome/browser/ui/webui/interventions_internals/interventions_internals.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "url/mojom/url.mojom.h"


#ifndef CHROME_BROWSER_UI_WEBUI_INTERVENTIONS_INTERNALS_INTERVENTIONS_INTERNALS_MOJOM_JUMBO_H_
#define CHROME_BROWSER_UI_WEBUI_INTERVENTIONS_INTERNALS_INTERVENTIONS_INTERNALS_MOJOM_JUMBO_H_
#endif


namespace mojom {


void InterventionsInternalsPageHandlerInterceptorForTesting::GetPreviewsEnabled(GetPreviewsEnabledCallback callback) {
  GetForwardingInterface()->GetPreviewsEnabled(std::move(callback));
}
void InterventionsInternalsPageHandlerInterceptorForTesting::GetPreviewsFlagsDetails(GetPreviewsFlagsDetailsCallback callback) {
  GetForwardingInterface()->GetPreviewsFlagsDetails(std::move(callback));
}
void InterventionsInternalsPageHandlerInterceptorForTesting::SetClientPage(::mojo::PendingRemote<InterventionsInternalsPage> page) {
  GetForwardingInterface()->SetClientPage(std::move(page));
}
void InterventionsInternalsPageHandlerInterceptorForTesting::SetIgnorePreviewsBlocklistDecision(bool ignored) {
  GetForwardingInterface()->SetIgnorePreviewsBlocklistDecision(std::move(ignored));
}
InterventionsInternalsPageHandlerAsyncWaiter::InterventionsInternalsPageHandlerAsyncWaiter(
    InterventionsInternalsPageHandler* proxy) : proxy_(proxy) {}

InterventionsInternalsPageHandlerAsyncWaiter::~InterventionsInternalsPageHandlerAsyncWaiter() = default;

void InterventionsInternalsPageHandlerAsyncWaiter::GetPreviewsEnabled(
    std::vector<PreviewsStatusPtr>* out_statuses) {
  base::RunLoop loop;
  proxy_->GetPreviewsEnabled(
      base::BindOnce(
          [](base::RunLoop* loop,
             std::vector<PreviewsStatusPtr>* out_statuses
,
             std::vector<PreviewsStatusPtr> statuses) {*out_statuses = std::move(statuses);
            loop->Quit();
          },
          &loop,
          out_statuses));
  loop.Run();
}
void InterventionsInternalsPageHandlerAsyncWaiter::GetPreviewsFlagsDetails(
    std::vector<PreviewsFlagPtr>* out_flags) {
  base::RunLoop loop;
  proxy_->GetPreviewsFlagsDetails(
      base::BindOnce(
          [](base::RunLoop* loop,
             std::vector<PreviewsFlagPtr>* out_flags
,
             std::vector<PreviewsFlagPtr> flags) {*out_flags = std::move(flags);
            loop->Quit();
          },
          &loop,
          out_flags));
  loop.Run();
}



void InterventionsInternalsPageInterceptorForTesting::LogNewMessage(MessageLogPtr log) {
  GetForwardingInterface()->LogNewMessage(std::move(log));
}
void InterventionsInternalsPageInterceptorForTesting::OnBlocklistedHost(const std::string& host, int64_t time) {
  GetForwardingInterface()->OnBlocklistedHost(std::move(host), std::move(time));
}
void InterventionsInternalsPageInterceptorForTesting::OnUserBlocklistedStatusChange(bool blocklisted) {
  GetForwardingInterface()->OnUserBlocklistedStatusChange(std::move(blocklisted));
}
void InterventionsInternalsPageInterceptorForTesting::OnBlocklistCleared(int64_t time) {
  GetForwardingInterface()->OnBlocklistCleared(std::move(time));
}
void InterventionsInternalsPageInterceptorForTesting::UpdateEffectiveConnectionType(const std::string& type, const std::string& max_intervention_type) {
  GetForwardingInterface()->UpdateEffectiveConnectionType(std::move(type), std::move(max_intervention_type));
}
void InterventionsInternalsPageInterceptorForTesting::OnIgnoreBlocklistDecisionStatusChanged(bool ignored) {
  GetForwardingInterface()->OnIgnoreBlocklistDecisionStatusChanged(std::move(ignored));
}
InterventionsInternalsPageAsyncWaiter::InterventionsInternalsPageAsyncWaiter(
    InterventionsInternalsPage* proxy) : proxy_(proxy) {}

InterventionsInternalsPageAsyncWaiter::~InterventionsInternalsPageAsyncWaiter() = default;






}  // namespace mojom

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
// chrome/browser/ui/webui/interventions_internals/interventions_internals.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_UI_WEBUI_INTERVENTIONS_INTERNALS_INTERVENTIONS_INTERNALS_MOJOM_PARAMS_DATA_H_
#define CHROME_BROWSER_UI_WEBUI_INTERVENTIONS_INTERNALS_INTERVENTIONS_INTERNALS_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace mojom {
namespace internal {
class  InterventionsInternalsPageHandler_GetPreviewsEnabled_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(InterventionsInternalsPageHandler_GetPreviewsEnabled_Params_Data));
      new (data()) InterventionsInternalsPageHandler_GetPreviewsEnabled_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    InterventionsInternalsPageHandler_GetPreviewsEnabled_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<InterventionsInternalsPageHandler_GetPreviewsEnabled_Params_Data>(index_);
    }
    InterventionsInternalsPageHandler_GetPreviewsEnabled_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  InterventionsInternalsPageHandler_GetPreviewsEnabled_Params_Data();
  ~InterventionsInternalsPageHandler_GetPreviewsEnabled_Params_Data() = delete;
};
static_assert(sizeof(InterventionsInternalsPageHandler_GetPreviewsEnabled_Params_Data) == 8,
              "Bad sizeof(InterventionsInternalsPageHandler_GetPreviewsEnabled_Params_Data)");
class  InterventionsInternalsPageHandler_GetPreviewsEnabled_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(InterventionsInternalsPageHandler_GetPreviewsEnabled_ResponseParams_Data));
      new (data()) InterventionsInternalsPageHandler_GetPreviewsEnabled_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    InterventionsInternalsPageHandler_GetPreviewsEnabled_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<InterventionsInternalsPageHandler_GetPreviewsEnabled_ResponseParams_Data>(index_);
    }
    InterventionsInternalsPageHandler_GetPreviewsEnabled_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::PreviewsStatus_Data>>> statuses;

 private:
  InterventionsInternalsPageHandler_GetPreviewsEnabled_ResponseParams_Data();
  ~InterventionsInternalsPageHandler_GetPreviewsEnabled_ResponseParams_Data() = delete;
};
static_assert(sizeof(InterventionsInternalsPageHandler_GetPreviewsEnabled_ResponseParams_Data) == 16,
              "Bad sizeof(InterventionsInternalsPageHandler_GetPreviewsEnabled_ResponseParams_Data)");
class  InterventionsInternalsPageHandler_GetPreviewsFlagsDetails_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(InterventionsInternalsPageHandler_GetPreviewsFlagsDetails_Params_Data));
      new (data()) InterventionsInternalsPageHandler_GetPreviewsFlagsDetails_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    InterventionsInternalsPageHandler_GetPreviewsFlagsDetails_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<InterventionsInternalsPageHandler_GetPreviewsFlagsDetails_Params_Data>(index_);
    }
    InterventionsInternalsPageHandler_GetPreviewsFlagsDetails_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  InterventionsInternalsPageHandler_GetPreviewsFlagsDetails_Params_Data();
  ~InterventionsInternalsPageHandler_GetPreviewsFlagsDetails_Params_Data() = delete;
};
static_assert(sizeof(InterventionsInternalsPageHandler_GetPreviewsFlagsDetails_Params_Data) == 8,
              "Bad sizeof(InterventionsInternalsPageHandler_GetPreviewsFlagsDetails_Params_Data)");
class  InterventionsInternalsPageHandler_GetPreviewsFlagsDetails_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(InterventionsInternalsPageHandler_GetPreviewsFlagsDetails_ResponseParams_Data));
      new (data()) InterventionsInternalsPageHandler_GetPreviewsFlagsDetails_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    InterventionsInternalsPageHandler_GetPreviewsFlagsDetails_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<InterventionsInternalsPageHandler_GetPreviewsFlagsDetails_ResponseParams_Data>(index_);
    }
    InterventionsInternalsPageHandler_GetPreviewsFlagsDetails_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::PreviewsFlag_Data>>> flags;

 private:
  InterventionsInternalsPageHandler_GetPreviewsFlagsDetails_ResponseParams_Data();
  ~InterventionsInternalsPageHandler_GetPreviewsFlagsDetails_ResponseParams_Data() = delete;
};
static_assert(sizeof(InterventionsInternalsPageHandler_GetPreviewsFlagsDetails_ResponseParams_Data) == 16,
              "Bad sizeof(InterventionsInternalsPageHandler_GetPreviewsFlagsDetails_ResponseParams_Data)");
class  InterventionsInternalsPageHandler_SetClientPage_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(InterventionsInternalsPageHandler_SetClientPage_Params_Data));
      new (data()) InterventionsInternalsPageHandler_SetClientPage_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    InterventionsInternalsPageHandler_SetClientPage_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<InterventionsInternalsPageHandler_SetClientPage_Params_Data>(index_);
    }
    InterventionsInternalsPageHandler_SetClientPage_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data page;

 private:
  InterventionsInternalsPageHandler_SetClientPage_Params_Data();
  ~InterventionsInternalsPageHandler_SetClientPage_Params_Data() = delete;
};
static_assert(sizeof(InterventionsInternalsPageHandler_SetClientPage_Params_Data) == 16,
              "Bad sizeof(InterventionsInternalsPageHandler_SetClientPage_Params_Data)");
class  InterventionsInternalsPageHandler_SetIgnorePreviewsBlocklistDecision_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(InterventionsInternalsPageHandler_SetIgnorePreviewsBlocklistDecision_Params_Data));
      new (data()) InterventionsInternalsPageHandler_SetIgnorePreviewsBlocklistDecision_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    InterventionsInternalsPageHandler_SetIgnorePreviewsBlocklistDecision_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<InterventionsInternalsPageHandler_SetIgnorePreviewsBlocklistDecision_Params_Data>(index_);
    }
    InterventionsInternalsPageHandler_SetIgnorePreviewsBlocklistDecision_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t ignored : 1;
  uint8_t padfinal_[7];

 private:
  InterventionsInternalsPageHandler_SetIgnorePreviewsBlocklistDecision_Params_Data();
  ~InterventionsInternalsPageHandler_SetIgnorePreviewsBlocklistDecision_Params_Data() = delete;
};
static_assert(sizeof(InterventionsInternalsPageHandler_SetIgnorePreviewsBlocklistDecision_Params_Data) == 16,
              "Bad sizeof(InterventionsInternalsPageHandler_SetIgnorePreviewsBlocklistDecision_Params_Data)");
class  InterventionsInternalsPage_LogNewMessage_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(InterventionsInternalsPage_LogNewMessage_Params_Data));
      new (data()) InterventionsInternalsPage_LogNewMessage_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    InterventionsInternalsPage_LogNewMessage_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<InterventionsInternalsPage_LogNewMessage_Params_Data>(index_);
    }
    InterventionsInternalsPage_LogNewMessage_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::MessageLog_Data> log;

 private:
  InterventionsInternalsPage_LogNewMessage_Params_Data();
  ~InterventionsInternalsPage_LogNewMessage_Params_Data() = delete;
};
static_assert(sizeof(InterventionsInternalsPage_LogNewMessage_Params_Data) == 16,
              "Bad sizeof(InterventionsInternalsPage_LogNewMessage_Params_Data)");
class  InterventionsInternalsPage_OnBlocklistedHost_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(InterventionsInternalsPage_OnBlocklistedHost_Params_Data));
      new (data()) InterventionsInternalsPage_OnBlocklistedHost_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    InterventionsInternalsPage_OnBlocklistedHost_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<InterventionsInternalsPage_OnBlocklistedHost_Params_Data>(index_);
    }
    InterventionsInternalsPage_OnBlocklistedHost_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> host;
  int64_t time;

 private:
  InterventionsInternalsPage_OnBlocklistedHost_Params_Data();
  ~InterventionsInternalsPage_OnBlocklistedHost_Params_Data() = delete;
};
static_assert(sizeof(InterventionsInternalsPage_OnBlocklistedHost_Params_Data) == 24,
              "Bad sizeof(InterventionsInternalsPage_OnBlocklistedHost_Params_Data)");
class  InterventionsInternalsPage_OnUserBlocklistedStatusChange_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(InterventionsInternalsPage_OnUserBlocklistedStatusChange_Params_Data));
      new (data()) InterventionsInternalsPage_OnUserBlocklistedStatusChange_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    InterventionsInternalsPage_OnUserBlocklistedStatusChange_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<InterventionsInternalsPage_OnUserBlocklistedStatusChange_Params_Data>(index_);
    }
    InterventionsInternalsPage_OnUserBlocklistedStatusChange_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t blocklisted : 1;
  uint8_t padfinal_[7];

 private:
  InterventionsInternalsPage_OnUserBlocklistedStatusChange_Params_Data();
  ~InterventionsInternalsPage_OnUserBlocklistedStatusChange_Params_Data() = delete;
};
static_assert(sizeof(InterventionsInternalsPage_OnUserBlocklistedStatusChange_Params_Data) == 16,
              "Bad sizeof(InterventionsInternalsPage_OnUserBlocklistedStatusChange_Params_Data)");
class  InterventionsInternalsPage_OnBlocklistCleared_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(InterventionsInternalsPage_OnBlocklistCleared_Params_Data));
      new (data()) InterventionsInternalsPage_OnBlocklistCleared_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    InterventionsInternalsPage_OnBlocklistCleared_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<InterventionsInternalsPage_OnBlocklistCleared_Params_Data>(index_);
    }
    InterventionsInternalsPage_OnBlocklistCleared_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t time;

 private:
  InterventionsInternalsPage_OnBlocklistCleared_Params_Data();
  ~InterventionsInternalsPage_OnBlocklistCleared_Params_Data() = delete;
};
static_assert(sizeof(InterventionsInternalsPage_OnBlocklistCleared_Params_Data) == 16,
              "Bad sizeof(InterventionsInternalsPage_OnBlocklistCleared_Params_Data)");
class  InterventionsInternalsPage_UpdateEffectiveConnectionType_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(InterventionsInternalsPage_UpdateEffectiveConnectionType_Params_Data));
      new (data()) InterventionsInternalsPage_UpdateEffectiveConnectionType_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    InterventionsInternalsPage_UpdateEffectiveConnectionType_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<InterventionsInternalsPage_UpdateEffectiveConnectionType_Params_Data>(index_);
    }
    InterventionsInternalsPage_UpdateEffectiveConnectionType_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> type;
  mojo::internal::Pointer<mojo::internal::String_Data> max_intervention_type;

 private:
  InterventionsInternalsPage_UpdateEffectiveConnectionType_Params_Data();
  ~InterventionsInternalsPage_UpdateEffectiveConnectionType_Params_Data() = delete;
};
static_assert(sizeof(InterventionsInternalsPage_UpdateEffectiveConnectionType_Params_Data) == 24,
              "Bad sizeof(InterventionsInternalsPage_UpdateEffectiveConnectionType_Params_Data)");
class  InterventionsInternalsPage_OnIgnoreBlocklistDecisionStatusChanged_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(InterventionsInternalsPage_OnIgnoreBlocklistDecisionStatusChanged_Params_Data));
      new (data()) InterventionsInternalsPage_OnIgnoreBlocklistDecisionStatusChanged_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    InterventionsInternalsPage_OnIgnoreBlocklistDecisionStatusChanged_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<InterventionsInternalsPage_OnIgnoreBlocklistDecisionStatusChanged_Params_Data>(index_);
    }
    InterventionsInternalsPage_OnIgnoreBlocklistDecisionStatusChanged_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t ignored : 1;
  uint8_t padfinal_[7];

 private:
  InterventionsInternalsPage_OnIgnoreBlocklistDecisionStatusChanged_Params_Data();
  ~InterventionsInternalsPage_OnIgnoreBlocklistDecisionStatusChanged_Params_Data() = delete;
};
static_assert(sizeof(InterventionsInternalsPage_OnIgnoreBlocklistDecisionStatusChanged_Params_Data) == 16,
              "Bad sizeof(InterventionsInternalsPage_OnIgnoreBlocklistDecisionStatusChanged_Params_Data)");

}  // namespace internal
class InterventionsInternalsPageHandler_GetPreviewsEnabled_ParamsDataView {
 public:
  InterventionsInternalsPageHandler_GetPreviewsEnabled_ParamsDataView() {}

  InterventionsInternalsPageHandler_GetPreviewsEnabled_ParamsDataView(
      internal::InterventionsInternalsPageHandler_GetPreviewsEnabled_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::InterventionsInternalsPageHandler_GetPreviewsEnabled_Params_Data* data_ = nullptr;
};

class InterventionsInternalsPageHandler_GetPreviewsEnabled_ResponseParamsDataView {
 public:
  InterventionsInternalsPageHandler_GetPreviewsEnabled_ResponseParamsDataView() {}

  InterventionsInternalsPageHandler_GetPreviewsEnabled_ResponseParamsDataView(
      internal::InterventionsInternalsPageHandler_GetPreviewsEnabled_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetStatusesDataView(
      mojo::ArrayDataView<PreviewsStatusDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadStatuses(UserType* output) {
    auto* pointer = data_->statuses.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::mojom::PreviewsStatusDataView>>(
        pointer, output, context_);
  }
 private:
  internal::InterventionsInternalsPageHandler_GetPreviewsEnabled_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class InterventionsInternalsPageHandler_GetPreviewsFlagsDetails_ParamsDataView {
 public:
  InterventionsInternalsPageHandler_GetPreviewsFlagsDetails_ParamsDataView() {}

  InterventionsInternalsPageHandler_GetPreviewsFlagsDetails_ParamsDataView(
      internal::InterventionsInternalsPageHandler_GetPreviewsFlagsDetails_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::InterventionsInternalsPageHandler_GetPreviewsFlagsDetails_Params_Data* data_ = nullptr;
};

class InterventionsInternalsPageHandler_GetPreviewsFlagsDetails_ResponseParamsDataView {
 public:
  InterventionsInternalsPageHandler_GetPreviewsFlagsDetails_ResponseParamsDataView() {}

  InterventionsInternalsPageHandler_GetPreviewsFlagsDetails_ResponseParamsDataView(
      internal::InterventionsInternalsPageHandler_GetPreviewsFlagsDetails_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetFlagsDataView(
      mojo::ArrayDataView<PreviewsFlagDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFlags(UserType* output) {
    auto* pointer = data_->flags.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::mojom::PreviewsFlagDataView>>(
        pointer, output, context_);
  }
 private:
  internal::InterventionsInternalsPageHandler_GetPreviewsFlagsDetails_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class InterventionsInternalsPageHandler_SetClientPage_ParamsDataView {
 public:
  InterventionsInternalsPageHandler_SetClientPage_ParamsDataView() {}

  InterventionsInternalsPageHandler_SetClientPage_ParamsDataView(
      internal::InterventionsInternalsPageHandler_SetClientPage_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakePage() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::mojom::InterventionsInternalsPageInterfaceBase>>(
            &data_->page, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::InterventionsInternalsPageHandler_SetClientPage_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class InterventionsInternalsPageHandler_SetIgnorePreviewsBlocklistDecision_ParamsDataView {
 public:
  InterventionsInternalsPageHandler_SetIgnorePreviewsBlocklistDecision_ParamsDataView() {}

  InterventionsInternalsPageHandler_SetIgnorePreviewsBlocklistDecision_ParamsDataView(
      internal::InterventionsInternalsPageHandler_SetIgnorePreviewsBlocklistDecision_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool ignored() const {
    return data_->ignored;
  }
 private:
  internal::InterventionsInternalsPageHandler_SetIgnorePreviewsBlocklistDecision_Params_Data* data_ = nullptr;
};

class InterventionsInternalsPage_LogNewMessage_ParamsDataView {
 public:
  InterventionsInternalsPage_LogNewMessage_ParamsDataView() {}

  InterventionsInternalsPage_LogNewMessage_ParamsDataView(
      internal::InterventionsInternalsPage_LogNewMessage_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetLogDataView(
      MessageLogDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadLog(UserType* output) {
    auto* pointer = data_->log.Get();
    return mojo::internal::Deserialize<::mojom::MessageLogDataView>(
        pointer, output, context_);
  }
 private:
  internal::InterventionsInternalsPage_LogNewMessage_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class InterventionsInternalsPage_OnBlocklistedHost_ParamsDataView {
 public:
  InterventionsInternalsPage_OnBlocklistedHost_ParamsDataView() {}

  InterventionsInternalsPage_OnBlocklistedHost_ParamsDataView(
      internal::InterventionsInternalsPage_OnBlocklistedHost_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetHostDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadHost(UserType* output) {
    auto* pointer = data_->host.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  int64_t time() const {
    return data_->time;
  }
 private:
  internal::InterventionsInternalsPage_OnBlocklistedHost_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class InterventionsInternalsPage_OnUserBlocklistedStatusChange_ParamsDataView {
 public:
  InterventionsInternalsPage_OnUserBlocklistedStatusChange_ParamsDataView() {}

  InterventionsInternalsPage_OnUserBlocklistedStatusChange_ParamsDataView(
      internal::InterventionsInternalsPage_OnUserBlocklistedStatusChange_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool blocklisted() const {
    return data_->blocklisted;
  }
 private:
  internal::InterventionsInternalsPage_OnUserBlocklistedStatusChange_Params_Data* data_ = nullptr;
};

class InterventionsInternalsPage_OnBlocklistCleared_ParamsDataView {
 public:
  InterventionsInternalsPage_OnBlocklistCleared_ParamsDataView() {}

  InterventionsInternalsPage_OnBlocklistCleared_ParamsDataView(
      internal::InterventionsInternalsPage_OnBlocklistCleared_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int64_t time() const {
    return data_->time;
  }
 private:
  internal::InterventionsInternalsPage_OnBlocklistCleared_Params_Data* data_ = nullptr;
};

class InterventionsInternalsPage_UpdateEffectiveConnectionType_ParamsDataView {
 public:
  InterventionsInternalsPage_UpdateEffectiveConnectionType_ParamsDataView() {}

  InterventionsInternalsPage_UpdateEffectiveConnectionType_ParamsDataView(
      internal::InterventionsInternalsPage_UpdateEffectiveConnectionType_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetTypeDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadType(UserType* output) {
    auto* pointer = data_->type.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetMaxInterventionTypeDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadMaxInterventionType(UserType* output) {
    auto* pointer = data_->max_intervention_type.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::InterventionsInternalsPage_UpdateEffectiveConnectionType_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class InterventionsInternalsPage_OnIgnoreBlocklistDecisionStatusChanged_ParamsDataView {
 public:
  InterventionsInternalsPage_OnIgnoreBlocklistDecisionStatusChanged_ParamsDataView() {}

  InterventionsInternalsPage_OnIgnoreBlocklistDecisionStatusChanged_ParamsDataView(
      internal::InterventionsInternalsPage_OnIgnoreBlocklistDecisionStatusChanged_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool ignored() const {
    return data_->ignored;
  }
 private:
  internal::InterventionsInternalsPage_OnIgnoreBlocklistDecisionStatusChanged_Params_Data* data_ = nullptr;
};




inline void InterventionsInternalsPageHandler_GetPreviewsEnabled_ResponseParamsDataView::GetStatusesDataView(
    mojo::ArrayDataView<PreviewsStatusDataView>* output) {
  auto pointer = data_->statuses.Get();
  *output = mojo::ArrayDataView<PreviewsStatusDataView>(pointer, context_);
}




inline void InterventionsInternalsPageHandler_GetPreviewsFlagsDetails_ResponseParamsDataView::GetFlagsDataView(
    mojo::ArrayDataView<PreviewsFlagDataView>* output) {
  auto pointer = data_->flags.Get();
  *output = mojo::ArrayDataView<PreviewsFlagDataView>(pointer, context_);
}






inline void InterventionsInternalsPage_LogNewMessage_ParamsDataView::GetLogDataView(
    MessageLogDataView* output) {
  auto pointer = data_->log.Get();
  *output = MessageLogDataView(pointer, context_);
}


inline void InterventionsInternalsPage_OnBlocklistedHost_ParamsDataView::GetHostDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->host.Get();
  *output = mojo::StringDataView(pointer, context_);
}






inline void InterventionsInternalsPage_UpdateEffectiveConnectionType_ParamsDataView::GetTypeDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->type.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void InterventionsInternalsPage_UpdateEffectiveConnectionType_ParamsDataView::GetMaxInterventionTypeDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->max_intervention_type.Get();
  *output = mojo::StringDataView(pointer, context_);
}



}  // namespace mojom

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CHROME_BROWSER_UI_WEBUI_INTERVENTIONS_INTERNALS_INTERVENTIONS_INTERNALS_MOJOM_PARAMS_DATA_H_
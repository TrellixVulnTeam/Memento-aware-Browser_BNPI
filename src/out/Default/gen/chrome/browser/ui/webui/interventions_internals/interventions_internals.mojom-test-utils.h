// chrome/browser/ui/webui/interventions_internals/interventions_internals.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_UI_WEBUI_INTERVENTIONS_INTERNALS_INTERVENTIONS_INTERNALS_MOJOM_TEST_UTILS_H_
#define CHROME_BROWSER_UI_WEBUI_INTERVENTIONS_INTERNALS_INTERVENTIONS_INTERNALS_MOJOM_TEST_UTILS_H_

#include "chrome/browser/ui/webui/interventions_internals/interventions_internals.mojom.h"


namespace mojom {


class  InterventionsInternalsPageHandlerInterceptorForTesting : public InterventionsInternalsPageHandler {
  virtual InterventionsInternalsPageHandler* GetForwardingInterface() = 0;
  void GetPreviewsEnabled(GetPreviewsEnabledCallback callback) override;
  void GetPreviewsFlagsDetails(GetPreviewsFlagsDetailsCallback callback) override;
  void SetClientPage(::mojo::PendingRemote<InterventionsInternalsPage> page) override;
  void SetIgnorePreviewsBlocklistDecision(bool ignored) override;
};
class  InterventionsInternalsPageHandlerAsyncWaiter {
 public:
  explicit InterventionsInternalsPageHandlerAsyncWaiter(InterventionsInternalsPageHandler* proxy);
  ~InterventionsInternalsPageHandlerAsyncWaiter();
  void GetPreviewsEnabled(
      std::vector<PreviewsStatusPtr>* out_statuses);
  void GetPreviewsFlagsDetails(
      std::vector<PreviewsFlagPtr>* out_flags);

 private:
  InterventionsInternalsPageHandler* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(InterventionsInternalsPageHandlerAsyncWaiter);
};


class  InterventionsInternalsPageInterceptorForTesting : public InterventionsInternalsPage {
  virtual InterventionsInternalsPage* GetForwardingInterface() = 0;
  void LogNewMessage(MessageLogPtr log) override;
  void OnBlocklistedHost(const std::string& host, int64_t time) override;
  void OnUserBlocklistedStatusChange(bool blocklisted) override;
  void OnBlocklistCleared(int64_t time) override;
  void UpdateEffectiveConnectionType(const std::string& type, const std::string& max_intervention_type) override;
  void OnIgnoreBlocklistDecisionStatusChanged(bool ignored) override;
};
class  InterventionsInternalsPageAsyncWaiter {
 public:
  explicit InterventionsInternalsPageAsyncWaiter(InterventionsInternalsPage* proxy);
  ~InterventionsInternalsPageAsyncWaiter();

 private:
  InterventionsInternalsPage* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(InterventionsInternalsPageAsyncWaiter);
};




}  // namespace mojom

#endif  // CHROME_BROWSER_UI_WEBUI_INTERVENTIONS_INTERNALS_INTERVENTIONS_INTERNALS_MOJOM_TEST_UTILS_H_
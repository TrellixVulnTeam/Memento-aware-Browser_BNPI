// chrome/browser/ui/webui/discards/site_data.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "chrome/browser/ui/webui/discards/site_data.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "chrome/browser/ui/webui/discards/site_data.mojom-params-data.h"
#include "chrome/browser/ui/webui/discards/site_data.mojom-shared-message-ids.h"

#include "chrome/browser/ui/webui/discards/site_data.mojom-import-headers.h"


#ifndef CHROME_BROWSER_UI_WEBUI_DISCARDS_SITE_DATA_MOJOM_JUMBO_H_
#define CHROME_BROWSER_UI_WEBUI_DISCARDS_SITE_DATA_MOJOM_JUMBO_H_
#endif
namespace discards {
namespace mojom {
SiteCharacteristicsFeature::SiteCharacteristicsFeature()
    : observation_duration(),
      use_timestamp() {}

SiteCharacteristicsFeature::SiteCharacteristicsFeature(
    int64_t observation_duration_in,
    int64_t use_timestamp_in)
    : observation_duration(std::move(observation_duration_in)),
      use_timestamp(std::move(use_timestamp_in)) {}

SiteCharacteristicsFeature::~SiteCharacteristicsFeature() = default;
size_t SiteCharacteristicsFeature::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->observation_duration);
  seed = mojo::internal::Hash(seed, this->use_timestamp);
  return seed;
}

bool SiteCharacteristicsFeature::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
SiteCharacteristicsPerformanceMeasurement::SiteCharacteristicsPerformanceMeasurement()
    : avg_cpu_usage_us(),
      avg_footprint_kb(),
      avg_load_duration_us() {}

SiteCharacteristicsPerformanceMeasurement::SiteCharacteristicsPerformanceMeasurement(
    float avg_cpu_usage_us_in,
    float avg_footprint_kb_in,
    float avg_load_duration_us_in)
    : avg_cpu_usage_us(std::move(avg_cpu_usage_us_in)),
      avg_footprint_kb(std::move(avg_footprint_kb_in)),
      avg_load_duration_us(std::move(avg_load_duration_us_in)) {}

SiteCharacteristicsPerformanceMeasurement::~SiteCharacteristicsPerformanceMeasurement() = default;
size_t SiteCharacteristicsPerformanceMeasurement::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->avg_cpu_usage_us);
  seed = mojo::internal::Hash(seed, this->avg_footprint_kb);
  seed = mojo::internal::Hash(seed, this->avg_load_duration_us);
  return seed;
}

bool SiteCharacteristicsPerformanceMeasurement::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
SiteCharacteristicsDatabaseSize::SiteCharacteristicsDatabaseSize()
    : num_rows(),
      on_disk_size_kb() {}

SiteCharacteristicsDatabaseSize::SiteCharacteristicsDatabaseSize(
    int64_t num_rows_in,
    int64_t on_disk_size_kb_in)
    : num_rows(std::move(num_rows_in)),
      on_disk_size_kb(std::move(on_disk_size_kb_in)) {}

SiteCharacteristicsDatabaseSize::~SiteCharacteristicsDatabaseSize() = default;
size_t SiteCharacteristicsDatabaseSize::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->num_rows);
  seed = mojo::internal::Hash(seed, this->on_disk_size_kb);
  return seed;
}

bool SiteCharacteristicsDatabaseSize::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
SiteCharacteristicsDatabaseValue::SiteCharacteristicsDatabaseValue()
    : last_loaded(),
      updates_favicon_in_background(),
      updates_title_in_background(),
      uses_audio_in_background(),
      load_time_estimates() {}

SiteCharacteristicsDatabaseValue::SiteCharacteristicsDatabaseValue(
    uint32_t last_loaded_in,
    SiteCharacteristicsFeaturePtr updates_favicon_in_background_in,
    SiteCharacteristicsFeaturePtr updates_title_in_background_in,
    SiteCharacteristicsFeaturePtr uses_audio_in_background_in,
    SiteCharacteristicsPerformanceMeasurementPtr load_time_estimates_in)
    : last_loaded(std::move(last_loaded_in)),
      updates_favicon_in_background(std::move(updates_favicon_in_background_in)),
      updates_title_in_background(std::move(updates_title_in_background_in)),
      uses_audio_in_background(std::move(uses_audio_in_background_in)),
      load_time_estimates(std::move(load_time_estimates_in)) {}

SiteCharacteristicsDatabaseValue::~SiteCharacteristicsDatabaseValue() = default;

bool SiteCharacteristicsDatabaseValue::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
SiteCharacteristicsDatabaseEntry::SiteCharacteristicsDatabaseEntry()
    : origin(),
      is_dirty(),
      value() {}

SiteCharacteristicsDatabaseEntry::SiteCharacteristicsDatabaseEntry(
    const std::string& origin_in,
    bool is_dirty_in,
    SiteCharacteristicsDatabaseValuePtr value_in)
    : origin(std::move(origin_in)),
      is_dirty(std::move(is_dirty_in)),
      value(std::move(value_in)) {}

SiteCharacteristicsDatabaseEntry::~SiteCharacteristicsDatabaseEntry() = default;

bool SiteCharacteristicsDatabaseEntry::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
SiteCharacteristicsDatabase::SiteCharacteristicsDatabase()
    : db_rows() {}

SiteCharacteristicsDatabase::SiteCharacteristicsDatabase(
    std::vector<SiteCharacteristicsDatabaseEntryPtr> db_rows_in)
    : db_rows(std::move(db_rows_in)) {}

SiteCharacteristicsDatabase::~SiteCharacteristicsDatabase() = default;

bool SiteCharacteristicsDatabase::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char SiteDataProvider::Name_[] = "discards.mojom.SiteDataProvider";

class SiteDataProvider_GetSiteCharacteristicsDatabase_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  SiteDataProvider_GetSiteCharacteristicsDatabase_ForwardToCallback(
      SiteDataProvider::GetSiteCharacteristicsDatabaseCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  SiteDataProvider::GetSiteCharacteristicsDatabaseCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(SiteDataProvider_GetSiteCharacteristicsDatabase_ForwardToCallback);
};

class SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ForwardToCallback(
      SiteDataProvider::GetSiteCharacteristicsDatabaseSizeCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  SiteDataProvider::GetSiteCharacteristicsDatabaseSizeCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ForwardToCallback);
};

SiteDataProviderProxy::SiteDataProviderProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void SiteDataProviderProxy::GetSiteCharacteristicsDatabase(
    const std::vector<std::string>& in_explicitly_requested_origins, GetSiteCharacteristicsDatabaseCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "discards::mojom::SiteDataProvider::GetSiteCharacteristicsDatabase");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kSiteDataProvider_GetSiteCharacteristicsDatabase_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::discards::mojom::internal::SiteDataProvider_GetSiteCharacteristicsDatabase_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->explicitly_requested_origins)::BaseType::BufferWriter
      explicitly_requested_origins_writer;
  const mojo::internal::ContainerValidateParams explicitly_requested_origins_validate_params(
      0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
  mojo::internal::Serialize<mojo::ArrayDataView<mojo::StringDataView>>(
      in_explicitly_requested_origins, buffer, &explicitly_requested_origins_writer, &explicitly_requested_origins_validate_params,
      &serialization_context);
  params->explicitly_requested_origins.Set(
      explicitly_requested_origins_writer.is_null() ? nullptr : explicitly_requested_origins_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->explicitly_requested_origins.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null explicitly_requested_origins in SiteDataProvider.GetSiteCharacteristicsDatabase request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SiteDataProvider::Name_);
  message.set_method_name("GetSiteCharacteristicsDatabase");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new SiteDataProvider_GetSiteCharacteristicsDatabase_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}

void SiteDataProviderProxy::GetSiteCharacteristicsDatabaseSize(
    GetSiteCharacteristicsDatabaseSizeCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "discards::mojom::SiteDataProvider::GetSiteCharacteristicsDatabaseSize");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kSiteDataProvider_GetSiteCharacteristicsDatabaseSize_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::discards::mojom::internal::SiteDataProvider_GetSiteCharacteristicsDatabaseSize_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SiteDataProvider::Name_);
  message.set_method_name("GetSiteCharacteristicsDatabaseSize");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
class SiteDataProvider_GetSiteCharacteristicsDatabase_ProxyToResponder {
 public:
  static SiteDataProvider::GetSiteCharacteristicsDatabaseCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<SiteDataProvider_GetSiteCharacteristicsDatabase_ProxyToResponder> proxy(
        new SiteDataProvider_GetSiteCharacteristicsDatabase_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&SiteDataProvider_GetSiteCharacteristicsDatabase_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~SiteDataProvider_GetSiteCharacteristicsDatabase_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  SiteDataProvider_GetSiteCharacteristicsDatabase_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "SiteDataProvider::GetSiteCharacteristicsDatabaseCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      SiteCharacteristicsDatabasePtr in_result);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(SiteDataProvider_GetSiteCharacteristicsDatabase_ProxyToResponder);
};

bool SiteDataProvider_GetSiteCharacteristicsDatabase_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "discards::mojom::SiteDataProvider::GetSiteCharacteristicsDatabaseCallback",
               "message", message->name());
#endif
  mojo::internal::MessageDispatchContext dispatch_context(message);

  DCHECK(message->is_serialized());
  internal::SiteDataProvider_GetSiteCharacteristicsDatabase_ResponseParams_Data* params =
      reinterpret_cast<
          internal::SiteDataProvider_GetSiteCharacteristicsDatabase_ResponseParams_Data*>(
              message->mutable_payload());
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  
  bool success = true;
  SiteCharacteristicsDatabasePtr p_result{};
  SiteDataProvider_GetSiteCharacteristicsDatabase_ResponseParamsDataView input_data_view(params, &serialization_context);
  
  if (success && !input_data_view.ReadResult(&p_result))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        SiteDataProvider::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_result));
  return true;
}

void SiteDataProvider_GetSiteCharacteristicsDatabase_ProxyToResponder::Run(
    SiteCharacteristicsDatabasePtr in_result) {
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kSiteDataProvider_GetSiteCharacteristicsDatabase_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::discards::mojom::internal::SiteDataProvider_GetSiteCharacteristicsDatabase_ResponseParams_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->result)::BaseType::BufferWriter
      result_writer;
  mojo::internal::Serialize<::discards::mojom::SiteCharacteristicsDatabaseDataView>(
      in_result, buffer, &result_writer, &serialization_context);
  params->result.Set(
      result_writer.is_null() ? nullptr : result_writer.data());
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "(Impl)discards::mojom::SiteDataProvider::GetSiteCharacteristicsDatabaseCallback",
               "message", message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SiteDataProvider::Name_);
  message.set_method_name("GetSiteCharacteristicsDatabase");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ProxyToResponder {
 public:
  static SiteDataProvider::GetSiteCharacteristicsDatabaseSizeCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ProxyToResponder> proxy(
        new SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "SiteDataProvider::GetSiteCharacteristicsDatabaseSizeCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      SiteCharacteristicsDatabaseSizePtr in_db_size);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ProxyToResponder);
};

bool SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "discards::mojom::SiteDataProvider::GetSiteCharacteristicsDatabaseSizeCallback",
               "message", message->name());
#endif
  mojo::internal::MessageDispatchContext dispatch_context(message);

  DCHECK(message->is_serialized());
  internal::SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ResponseParams_Data* params =
      reinterpret_cast<
          internal::SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ResponseParams_Data*>(
              message->mutable_payload());
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  
  bool success = true;
  SiteCharacteristicsDatabaseSizePtr p_db_size{};
  SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ResponseParamsDataView input_data_view(params, &serialization_context);
  
  if (success && !input_data_view.ReadDbSize(&p_db_size))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        SiteDataProvider::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_db_size));
  return true;
}

void SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ProxyToResponder::Run(
    SiteCharacteristicsDatabaseSizePtr in_db_size) {
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kSiteDataProvider_GetSiteCharacteristicsDatabaseSize_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::discards::mojom::internal::SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ResponseParams_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->db_size)::BaseType::BufferWriter
      db_size_writer;
  mojo::internal::Serialize<::discards::mojom::SiteCharacteristicsDatabaseSizeDataView>(
      in_db_size, buffer, &db_size_writer, &serialization_context);
  params->db_size.Set(
      db_size_writer.is_null() ? nullptr : db_size_writer.data());
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "(Impl)discards::mojom::SiteDataProvider::GetSiteCharacteristicsDatabaseSizeCallback",
               "message", message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SiteDataProvider::Name_);
  message.set_method_name("GetSiteCharacteristicsDatabaseSize");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool SiteDataProviderStubDispatch::Accept(
    SiteDataProvider* impl,
    mojo::Message* message) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  switch (message->header()->name) {
    case internal::kSiteDataProvider_GetSiteCharacteristicsDatabase_Name: {
      break;
    }
    case internal::kSiteDataProvider_GetSiteCharacteristicsDatabaseSize_Name: {
      break;
    }
  }
  return false;
}

// static
bool SiteDataProviderStubDispatch::AcceptWithResponder(
    SiteDataProvider* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kSiteDataProvider_GetSiteCharacteristicsDatabase_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)discards::mojom::SiteDataProvider::GetSiteCharacteristicsDatabase",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)discards::mojom::SiteDataProvider::GetSiteCharacteristicsDatabase");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::SiteDataProvider_GetSiteCharacteristicsDatabase_Params_Data* params =
          reinterpret_cast<
              internal::SiteDataProvider_GetSiteCharacteristicsDatabase_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      std::vector<std::string> p_explicitly_requested_origins{};
      SiteDataProvider_GetSiteCharacteristicsDatabase_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadExplicitlyRequestedOrigins(&p_explicitly_requested_origins))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SiteDataProvider::Name_, 0, false);
        return false;
      }
      SiteDataProvider::GetSiteCharacteristicsDatabaseCallback callback =
          SiteDataProvider_GetSiteCharacteristicsDatabase_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetSiteCharacteristicsDatabase(
std::move(p_explicitly_requested_origins), std::move(callback));
      return true;
    }
    case internal::kSiteDataProvider_GetSiteCharacteristicsDatabaseSize_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)discards::mojom::SiteDataProvider::GetSiteCharacteristicsDatabaseSize",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)discards::mojom::SiteDataProvider::GetSiteCharacteristicsDatabaseSize");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::SiteDataProvider_GetSiteCharacteristicsDatabaseSize_Params_Data* params =
          reinterpret_cast<
              internal::SiteDataProvider_GetSiteCharacteristicsDatabaseSize_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SiteDataProvider::Name_, 1, false);
        return false;
      }
      SiteDataProvider::GetSiteCharacteristicsDatabaseSizeCallback callback =
          SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetSiteCharacteristicsDatabaseSize(std::move(callback));
      return true;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kSiteDataProviderValidationInfo[] = {
    {internal::kSiteDataProvider_GetSiteCharacteristicsDatabase_Name,
     {&internal::SiteDataProvider_GetSiteCharacteristicsDatabase_Params_Data::Validate,
      &internal::SiteDataProvider_GetSiteCharacteristicsDatabase_ResponseParams_Data::Validate}},
    {internal::kSiteDataProvider_GetSiteCharacteristicsDatabaseSize_Name,
     {&internal::SiteDataProvider_GetSiteCharacteristicsDatabaseSize_Params_Data::Validate,
      &internal::SiteDataProvider_GetSiteCharacteristicsDatabaseSize_ResponseParams_Data::Validate}},
};

bool SiteDataProviderRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::discards::mojom::SiteDataProvider::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kSiteDataProviderValidationInfo);
}

bool SiteDataProviderResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::discards::mojom::SiteDataProvider::Name_;
  return mojo::internal::ValidateResponseGeneric(message, name, kSiteDataProviderValidationInfo);

}
}  // namespace mojom
}  // namespace discards

namespace mojo {


// static
bool StructTraits<::discards::mojom::SiteCharacteristicsFeature::DataView, ::discards::mojom::SiteCharacteristicsFeaturePtr>::Read(
    ::discards::mojom::SiteCharacteristicsFeature::DataView input,
    ::discards::mojom::SiteCharacteristicsFeaturePtr* output) {
  bool success = true;
  ::discards::mojom::SiteCharacteristicsFeaturePtr result(::discards::mojom::SiteCharacteristicsFeature::New());
  
      if (success)
        result->observation_duration = input.observation_duration();
      if (success)
        result->use_timestamp = input.use_timestamp();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::discards::mojom::SiteCharacteristicsPerformanceMeasurement::DataView, ::discards::mojom::SiteCharacteristicsPerformanceMeasurementPtr>::Read(
    ::discards::mojom::SiteCharacteristicsPerformanceMeasurement::DataView input,
    ::discards::mojom::SiteCharacteristicsPerformanceMeasurementPtr* output) {
  bool success = true;
  ::discards::mojom::SiteCharacteristicsPerformanceMeasurementPtr result(::discards::mojom::SiteCharacteristicsPerformanceMeasurement::New());
  
      if (success)
        result->avg_cpu_usage_us = input.avg_cpu_usage_us();
      if (success)
        result->avg_footprint_kb = input.avg_footprint_kb();
      if (success)
        result->avg_load_duration_us = input.avg_load_duration_us();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::discards::mojom::SiteCharacteristicsDatabaseSize::DataView, ::discards::mojom::SiteCharacteristicsDatabaseSizePtr>::Read(
    ::discards::mojom::SiteCharacteristicsDatabaseSize::DataView input,
    ::discards::mojom::SiteCharacteristicsDatabaseSizePtr* output) {
  bool success = true;
  ::discards::mojom::SiteCharacteristicsDatabaseSizePtr result(::discards::mojom::SiteCharacteristicsDatabaseSize::New());
  
      if (success)
        result->num_rows = input.num_rows();
      if (success)
        result->on_disk_size_kb = input.on_disk_size_kb();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::discards::mojom::SiteCharacteristicsDatabaseValue::DataView, ::discards::mojom::SiteCharacteristicsDatabaseValuePtr>::Read(
    ::discards::mojom::SiteCharacteristicsDatabaseValue::DataView input,
    ::discards::mojom::SiteCharacteristicsDatabaseValuePtr* output) {
  bool success = true;
  ::discards::mojom::SiteCharacteristicsDatabaseValuePtr result(::discards::mojom::SiteCharacteristicsDatabaseValue::New());
  
      if (success)
        result->last_loaded = input.last_loaded();
      if (success && !input.ReadUpdatesFaviconInBackground(&result->updates_favicon_in_background))
        success = false;
      if (success && !input.ReadUpdatesTitleInBackground(&result->updates_title_in_background))
        success = false;
      if (success && !input.ReadUsesAudioInBackground(&result->uses_audio_in_background))
        success = false;
      if (success && !input.ReadLoadTimeEstimates(&result->load_time_estimates))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::discards::mojom::SiteCharacteristicsDatabaseEntry::DataView, ::discards::mojom::SiteCharacteristicsDatabaseEntryPtr>::Read(
    ::discards::mojom::SiteCharacteristicsDatabaseEntry::DataView input,
    ::discards::mojom::SiteCharacteristicsDatabaseEntryPtr* output) {
  bool success = true;
  ::discards::mojom::SiteCharacteristicsDatabaseEntryPtr result(::discards::mojom::SiteCharacteristicsDatabaseEntry::New());
  
      if (success && !input.ReadOrigin(&result->origin))
        success = false;
      if (success)
        result->is_dirty = input.is_dirty();
      if (success && !input.ReadValue(&result->value))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::discards::mojom::SiteCharacteristicsDatabase::DataView, ::discards::mojom::SiteCharacteristicsDatabasePtr>::Read(
    ::discards::mojom::SiteCharacteristicsDatabase::DataView input,
    ::discards::mojom::SiteCharacteristicsDatabasePtr* output) {
  bool success = true;
  ::discards::mojom::SiteCharacteristicsDatabasePtr result(::discards::mojom::SiteCharacteristicsDatabase::New());
  
      if (success && !input.ReadDbRows(&result->db_rows))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
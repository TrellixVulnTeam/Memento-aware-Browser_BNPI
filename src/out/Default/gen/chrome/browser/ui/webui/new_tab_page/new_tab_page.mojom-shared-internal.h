// chrome/browser/ui/webui/new_tab_page/new_tab_page.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_UI_WEBUI_NEW_TAB_PAGE_NEW_TAB_PAGE_MOJOM_SHARED_INTERNAL_H_
#define CHROME_BROWSER_UI_WEBUI_NEW_TAB_PAGE_NEW_TAB_PAGE_MOJOM_SHARED_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/mojom/base/text_direction.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared-internal.h"
#include "skia/public/mojom/skcolor.mojom-shared-internal.h"
#include "url/mojom/url.mojom-shared-internal.h"
#include "mojo/public/mojom/base/string16.mojom-shared-internal.h"
#include "chrome/common/search/omnibox.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace new_tab_page {
namespace mojom {
namespace internal {
class OneGoogleBarParts_Data;
class MostVisitedTile_Data;
class MostVisitedInfo_Data;
class ThemeColors_Data;
class BackgroundCollection_Data;
class CollectionImage_Data;
class ChromeTheme_Data;
class ThirdPartyThemeInfo_Data;
class SearchBoxTheme_Data;
class BackgroundImage_Data;
class Theme_Data;
class DoodleShareButton_Data;
class ImageDoodleContent_Data;
class InteractiveDoodleContent_Data;
class Doodle_Data;
class ThemeInfo_Data;
class DoodleContent_Data;

struct ThemeType_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
      case 3:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct DoodleImageType_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct DoodleShareChannel_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
      case 3:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct CustomizeDialogAction_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct VoiceSearchAction_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct VoiceSearchError_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

#pragma pack(push, 1)


class  ThemeInfo_Data {
 public:
  // Used to identify Mojom Union Data Classes.
  typedef void MojomUnionDataType;

  ThemeInfo_Data() {}
  // Do nothing in the destructor since it won't be called when it is a
  // non-inlined union.
  ~ThemeInfo_Data() {}

  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ThemeInfo_Data));
      new (data()) ThemeInfo_Data();
    }

    void AllocateInline(mojo::internal::Buffer* serialization_buffer,
                        void* ptr) {
      const char* start = static_cast<const char*>(
          serialization_buffer->data());
      const char* slot = static_cast<const char*>(ptr);
      DCHECK_GT(slot, start);
      serialization_buffer_ = serialization_buffer;
      index_ = slot - start;
      new (data()) ThemeInfo_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ThemeInfo_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ThemeInfo_Data>(index_);
    }
    ThemeInfo_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context,
                       bool inlined);

  bool is_null() const { return size == 0; }

  void set_null() {
    size = 0U;
    tag = static_cast<ThemeInfo_Tag>(0);
    data.unknown = 0U;
  }

  enum class ThemeInfo_Tag : uint32_t {

    
    CHROME_THEME_ID,
    
    AUTOGENERATED_THEME_COLORS,
    
    THIRD_PARTY_THEME_INFO,
  };

  // A note on layout:
  // "Each non-static data member is allocated as if it were the sole member of
  // a struct." - Section 9.5.2 ISO/IEC 14882:2011 (The C++ Spec)
  union MOJO_ALIGNAS(8) Union_ {
    Union_() : unknown(0) {}
    int32_t f_chrome_theme_id;
    mojo::internal::Pointer<internal::ThemeColors_Data> f_autogenerated_theme_colors;
    mojo::internal::Pointer<internal::ThirdPartyThemeInfo_Data> f_third_party_theme_info;
    uint64_t unknown;
  };

  uint32_t size;
  ThemeInfo_Tag tag;
  Union_ data;
};
static_assert(sizeof(ThemeInfo_Data) == mojo::internal::kUnionDataSize,
              "Bad sizeof(ThemeInfo_Data)");


class  DoodleContent_Data {
 public:
  // Used to identify Mojom Union Data Classes.
  typedef void MojomUnionDataType;

  DoodleContent_Data() {}
  // Do nothing in the destructor since it won't be called when it is a
  // non-inlined union.
  ~DoodleContent_Data() {}

  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DoodleContent_Data));
      new (data()) DoodleContent_Data();
    }

    void AllocateInline(mojo::internal::Buffer* serialization_buffer,
                        void* ptr) {
      const char* start = static_cast<const char*>(
          serialization_buffer->data());
      const char* slot = static_cast<const char*>(ptr);
      DCHECK_GT(slot, start);
      serialization_buffer_ = serialization_buffer;
      index_ = slot - start;
      new (data()) DoodleContent_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DoodleContent_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DoodleContent_Data>(index_);
    }
    DoodleContent_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context,
                       bool inlined);

  bool is_null() const { return size == 0; }

  void set_null() {
    size = 0U;
    tag = static_cast<DoodleContent_Tag>(0);
    data.unknown = 0U;
  }

  enum class DoodleContent_Tag : uint32_t {

    
    IMAGE_DOODLE,
    
    INTERACTIVE_DOODLE,
  };

  // A note on layout:
  // "Each non-static data member is allocated as if it were the sole member of
  // a struct." - Section 9.5.2 ISO/IEC 14882:2011 (The C++ Spec)
  union MOJO_ALIGNAS(8) Union_ {
    Union_() : unknown(0) {}
    mojo::internal::Pointer<internal::ImageDoodleContent_Data> f_image_doodle;
    mojo::internal::Pointer<internal::InteractiveDoodleContent_Data> f_interactive_doodle;
    uint64_t unknown;
  };

  uint32_t size;
  DoodleContent_Tag tag;
  Union_ data;
};
static_assert(sizeof(DoodleContent_Data) == mojo::internal::kUnionDataSize,
              "Bad sizeof(DoodleContent_Data)");
class  OneGoogleBarParts_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(OneGoogleBarParts_Data));
      new (data()) OneGoogleBarParts_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    OneGoogleBarParts_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<OneGoogleBarParts_Data>(index_);
    }
    OneGoogleBarParts_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> bar_html;
  mojo::internal::Pointer<mojo::internal::String_Data> in_head_script;
  mojo::internal::Pointer<mojo::internal::String_Data> in_head_style;
  mojo::internal::Pointer<mojo::internal::String_Data> after_bar_script;
  mojo::internal::Pointer<mojo::internal::String_Data> end_of_body_html;
  mojo::internal::Pointer<mojo::internal::String_Data> end_of_body_script;

 private:
  OneGoogleBarParts_Data();
  ~OneGoogleBarParts_Data() = delete;
};
static_assert(sizeof(OneGoogleBarParts_Data) == 56,
              "Bad sizeof(OneGoogleBarParts_Data)");
// Used by OneGoogleBarParts::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct OneGoogleBarParts_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  OneGoogleBarParts_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~OneGoogleBarParts_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    OneGoogleBarParts_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    OneGoogleBarParts_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  MostVisitedTile_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MostVisitedTile_Data));
      new (data()) MostVisitedTile_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MostVisitedTile_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MostVisitedTile_Data>(index_);
    }
    MostVisitedTile_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> title;
  int32_t title_direction;
  int32_t source;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  int32_t title_source;
  uint8_t pad4_[4];
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> data_generation_time;

 private:
  MostVisitedTile_Data();
  ~MostVisitedTile_Data() = delete;
};
static_assert(sizeof(MostVisitedTile_Data) == 48,
              "Bad sizeof(MostVisitedTile_Data)");
// Used by MostVisitedTile::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct MostVisitedTile_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  MostVisitedTile_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~MostVisitedTile_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    MostVisitedTile_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    MostVisitedTile_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  MostVisitedInfo_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MostVisitedInfo_Data));
      new (data()) MostVisitedInfo_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MostVisitedInfo_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MostVisitedInfo_Data>(index_);
    }
    MostVisitedInfo_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t custom_links_enabled : 1;
  uint8_t visible : 1;
  uint8_t pad1_[7];
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::MostVisitedTile_Data>>> tiles;

 private:
  MostVisitedInfo_Data();
  ~MostVisitedInfo_Data() = delete;
};
static_assert(sizeof(MostVisitedInfo_Data) == 24,
              "Bad sizeof(MostVisitedInfo_Data)");
// Used by MostVisitedInfo::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct MostVisitedInfo_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  MostVisitedInfo_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~MostVisitedInfo_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    MostVisitedInfo_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    MostVisitedInfo_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  ThemeColors_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ThemeColors_Data));
      new (data()) ThemeColors_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ThemeColors_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ThemeColors_Data>(index_);
    }
    ThemeColors_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::skia::mojom::internal::SkColor_Data> frame;
  mojo::internal::Pointer<::skia::mojom::internal::SkColor_Data> active_tab;

 private:
  ThemeColors_Data();
  ~ThemeColors_Data() = delete;
};
static_assert(sizeof(ThemeColors_Data) == 24,
              "Bad sizeof(ThemeColors_Data)");
// Used by ThemeColors::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct ThemeColors_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  ThemeColors_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~ThemeColors_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    ThemeColors_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    ThemeColors_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  BackgroundCollection_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(BackgroundCollection_Data));
      new (data()) BackgroundCollection_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    BackgroundCollection_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<BackgroundCollection_Data>(index_);
    }
    BackgroundCollection_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> id;
  mojo::internal::Pointer<mojo::internal::String_Data> label;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> preview_image_url;

 private:
  BackgroundCollection_Data();
  ~BackgroundCollection_Data() = delete;
};
static_assert(sizeof(BackgroundCollection_Data) == 32,
              "Bad sizeof(BackgroundCollection_Data)");
// Used by BackgroundCollection::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct BackgroundCollection_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  BackgroundCollection_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~BackgroundCollection_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    BackgroundCollection_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    BackgroundCollection_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  CollectionImage_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(CollectionImage_Data));
      new (data()) CollectionImage_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    CollectionImage_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<CollectionImage_Data>(index_);
    }
    CollectionImage_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> attribution_1;
  mojo::internal::Pointer<mojo::internal::String_Data> attribution_2;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> attribution_url;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> image_url;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> preview_image_url;

 private:
  CollectionImage_Data();
  ~CollectionImage_Data() = delete;
};
static_assert(sizeof(CollectionImage_Data) == 48,
              "Bad sizeof(CollectionImage_Data)");
// Used by CollectionImage::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct CollectionImage_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  CollectionImage_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~CollectionImage_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    CollectionImage_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    CollectionImage_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  ChromeTheme_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ChromeTheme_Data));
      new (data()) ChromeTheme_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ChromeTheme_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ChromeTheme_Data>(index_);
    }
    ChromeTheme_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t id;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> label;
  mojo::internal::Pointer<internal::ThemeColors_Data> colors;

 private:
  ChromeTheme_Data();
  ~ChromeTheme_Data() = delete;
};
static_assert(sizeof(ChromeTheme_Data) == 32,
              "Bad sizeof(ChromeTheme_Data)");
// Used by ChromeTheme::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct ChromeTheme_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  ChromeTheme_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~ChromeTheme_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    ChromeTheme_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    ChromeTheme_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  ThirdPartyThemeInfo_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ThirdPartyThemeInfo_Data));
      new (data()) ThirdPartyThemeInfo_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ThirdPartyThemeInfo_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ThirdPartyThemeInfo_Data>(index_);
    }
    ThirdPartyThemeInfo_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> id;
  mojo::internal::Pointer<mojo::internal::String_Data> name;

 private:
  ThirdPartyThemeInfo_Data();
  ~ThirdPartyThemeInfo_Data() = delete;
};
static_assert(sizeof(ThirdPartyThemeInfo_Data) == 24,
              "Bad sizeof(ThirdPartyThemeInfo_Data)");
// Used by ThirdPartyThemeInfo::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct ThirdPartyThemeInfo_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  ThirdPartyThemeInfo_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~ThirdPartyThemeInfo_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    ThirdPartyThemeInfo_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    ThirdPartyThemeInfo_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  SearchBoxTheme_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SearchBoxTheme_Data));
      new (data()) SearchBoxTheme_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SearchBoxTheme_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SearchBoxTheme_Data>(index_);
    }
    SearchBoxTheme_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::skia::mojom::internal::SkColor_Data> bg;
  mojo::internal::Pointer<::skia::mojom::internal::SkColor_Data> icon;
  mojo::internal::Pointer<::skia::mojom::internal::SkColor_Data> icon_selected;
  mojo::internal::Pointer<::skia::mojom::internal::SkColor_Data> placeholder;
  mojo::internal::Pointer<::skia::mojom::internal::SkColor_Data> results_bg;
  mojo::internal::Pointer<::skia::mojom::internal::SkColor_Data> results_bg_hovered;
  mojo::internal::Pointer<::skia::mojom::internal::SkColor_Data> results_bg_selected;
  mojo::internal::Pointer<::skia::mojom::internal::SkColor_Data> results_dim;
  mojo::internal::Pointer<::skia::mojom::internal::SkColor_Data> results_dim_selected;
  mojo::internal::Pointer<::skia::mojom::internal::SkColor_Data> results_text;
  mojo::internal::Pointer<::skia::mojom::internal::SkColor_Data> results_text_selected;
  mojo::internal::Pointer<::skia::mojom::internal::SkColor_Data> results_url;
  mojo::internal::Pointer<::skia::mojom::internal::SkColor_Data> results_url_selected;
  mojo::internal::Pointer<::skia::mojom::internal::SkColor_Data> text;

 private:
  SearchBoxTheme_Data();
  ~SearchBoxTheme_Data() = delete;
};
static_assert(sizeof(SearchBoxTheme_Data) == 120,
              "Bad sizeof(SearchBoxTheme_Data)");
// Used by SearchBoxTheme::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct SearchBoxTheme_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  SearchBoxTheme_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~SearchBoxTheme_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    SearchBoxTheme_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    SearchBoxTheme_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  BackgroundImage_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(BackgroundImage_Data));
      new (data()) BackgroundImage_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    BackgroundImage_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<BackgroundImage_Data>(index_);
    }
    BackgroundImage_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url_2x;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> attribution_url;
  mojo::internal::Pointer<mojo::internal::String_Data> size;
  mojo::internal::Pointer<mojo::internal::String_Data> repeat_x;
  mojo::internal::Pointer<mojo::internal::String_Data> repeat_y;
  mojo::internal::Pointer<mojo::internal::String_Data> position_x;
  mojo::internal::Pointer<mojo::internal::String_Data> position_y;

 private:
  BackgroundImage_Data();
  ~BackgroundImage_Data() = delete;
};
static_assert(sizeof(BackgroundImage_Data) == 72,
              "Bad sizeof(BackgroundImage_Data)");
// Used by BackgroundImage::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct BackgroundImage_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  BackgroundImage_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~BackgroundImage_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    BackgroundImage_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    BackgroundImage_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  Theme_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Theme_Data));
      new (data()) Theme_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Theme_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Theme_Data>(index_);
    }
    Theme_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t type;
  uint8_t shortcut_use_white_add_icon : 1;
  uint8_t shortcut_use_title_pill : 1;
  uint8_t is_dark : 1;
  uint8_t pad3_[3];
  mojo::internal::Pointer<::skia::mojom::internal::SkColor_Data> background_color;
  mojo::internal::Pointer<::skia::mojom::internal::SkColor_Data> shortcut_background_color;
  mojo::internal::Pointer<::skia::mojom::internal::SkColor_Data> shortcut_text_color;
  mojo::internal::Pointer<::skia::mojom::internal::SkColor_Data> logo_color;
  mojo::internal::Pointer<mojo::internal::String_Data> daily_refresh_collection_id;
  mojo::internal::Pointer<internal::BackgroundImage_Data> background_image;
  mojo::internal::Pointer<mojo::internal::String_Data> background_image_attribution_1;
  mojo::internal::Pointer<mojo::internal::String_Data> background_image_attribution_2;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> background_image_attribution_url;
  internal::ThemeInfo_Data info;
  mojo::internal::Pointer<internal::SearchBoxTheme_Data> search_box;

 private:
  Theme_Data();
  ~Theme_Data() = delete;
};
static_assert(sizeof(Theme_Data) == 112,
              "Bad sizeof(Theme_Data)");
// Used by Theme::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct Theme_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  Theme_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~Theme_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    Theme_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    Theme_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  DoodleShareButton_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DoodleShareButton_Data));
      new (data()) DoodleShareButton_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DoodleShareButton_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DoodleShareButton_Data>(index_);
    }
    DoodleShareButton_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t x;
  int32_t y;
  mojo::internal::Pointer<::skia::mojom::internal::SkColor_Data> background_color;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> icon_url;

 private:
  DoodleShareButton_Data();
  ~DoodleShareButton_Data() = delete;
};
static_assert(sizeof(DoodleShareButton_Data) == 32,
              "Bad sizeof(DoodleShareButton_Data)");
// Used by DoodleShareButton::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct DoodleShareButton_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  DoodleShareButton_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~DoodleShareButton_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    DoodleShareButton_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    DoodleShareButton_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  ImageDoodleContent_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ImageDoodleContent_Data));
      new (data()) ImageDoodleContent_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ImageDoodleContent_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ImageDoodleContent_Data>(index_);
    }
    ImageDoodleContent_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> image_url;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> on_click_url;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> animation_url;
  uint32_t width;
  uint32_t height;
  mojo::internal::Pointer<::skia::mojom::internal::SkColor_Data> background_color;
  mojo::internal::Pointer<internal::DoodleShareButton_Data> share_button;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> share_url;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> image_impression_log_url;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> animation_impression_log_url;

 private:
  ImageDoodleContent_Data();
  ~ImageDoodleContent_Data() = delete;
};
static_assert(sizeof(ImageDoodleContent_Data) == 80,
              "Bad sizeof(ImageDoodleContent_Data)");
// Used by ImageDoodleContent::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct ImageDoodleContent_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  ImageDoodleContent_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~ImageDoodleContent_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    ImageDoodleContent_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    ImageDoodleContent_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  InteractiveDoodleContent_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(InteractiveDoodleContent_Data));
      new (data()) InteractiveDoodleContent_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    InteractiveDoodleContent_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<InteractiveDoodleContent_Data>(index_);
    }
    InteractiveDoodleContent_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  uint32_t width;
  uint32_t height;

 private:
  InteractiveDoodleContent_Data();
  ~InteractiveDoodleContent_Data() = delete;
};
static_assert(sizeof(InteractiveDoodleContent_Data) == 24,
              "Bad sizeof(InteractiveDoodleContent_Data)");
// Used by InteractiveDoodleContent::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct InteractiveDoodleContent_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  InteractiveDoodleContent_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~InteractiveDoodleContent_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    InteractiveDoodleContent_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    InteractiveDoodleContent_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  Doodle_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Doodle_Data));
      new (data()) Doodle_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Doodle_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Doodle_Data>(index_);
    }
    Doodle_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  internal::DoodleContent_Data content;
  mojo::internal::Pointer<mojo::internal::String_Data> description;

 private:
  Doodle_Data();
  ~Doodle_Data() = delete;
};
static_assert(sizeof(Doodle_Data) == 32,
              "Bad sizeof(Doodle_Data)");
// Used by Doodle::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct Doodle_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  Doodle_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~Doodle_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    Doodle_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    Doodle_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace new_tab_page

#endif  // CHROME_BROWSER_UI_WEBUI_NEW_TAB_PAGE_NEW_TAB_PAGE_MOJOM_SHARED_INTERNAL_H_
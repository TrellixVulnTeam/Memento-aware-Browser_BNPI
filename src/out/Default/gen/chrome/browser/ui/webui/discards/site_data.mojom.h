// chrome/browser/ui/webui/discards/site_data.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_UI_WEBUI_DISCARDS_SITE_DATA_MOJOM_H_
#define CHROME_BROWSER_UI_WEBUI_DISCARDS_SITE_DATA_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#if BUILDFLAG(MOJO_TRACE_ENABLED)
#include "base/trace_event/trace_event.h"
#endif
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "chrome/browser/ui/webui/discards/site_data.mojom-shared.h"
#include "chrome/browser/ui/webui/discards/site_data.mojom-forward.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/associated_interface_ptr.h"
#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"
#include "mojo/public/cpp/bindings/thread_safe_interface_ptr.h"






namespace discards {
namespace mojom {

class SiteDataProviderProxy;

template <typename ImplRefTraits>
class SiteDataProviderStub;

class SiteDataProviderRequestValidator;
class SiteDataProviderResponseValidator;


class  SiteDataProvider
    : public SiteDataProviderInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = SiteDataProviderInterfaceBase;
  using Proxy_ = SiteDataProviderProxy;

  template <typename ImplRefTraits>
  using Stub_ = SiteDataProviderStub<ImplRefTraits>;

  using RequestValidator_ = SiteDataProviderRequestValidator;
  using ResponseValidator_ = SiteDataProviderResponseValidator;
  enum MethodMinVersions : uint32_t {
    kGetSiteCharacteristicsDatabaseMinVersion = 0,
    kGetSiteCharacteristicsDatabaseSizeMinVersion = 0,
  };
  virtual ~SiteDataProvider() {}


  using GetSiteCharacteristicsDatabaseCallback = base::OnceCallback<void(SiteCharacteristicsDatabasePtr)>;
  
  virtual void GetSiteCharacteristicsDatabase(const std::vector<std::string>& explicitly_requested_origins, GetSiteCharacteristicsDatabaseCallback callback) = 0;


  using GetSiteCharacteristicsDatabaseSizeCallback = base::OnceCallback<void(SiteCharacteristicsDatabaseSizePtr)>;
  
  virtual void GetSiteCharacteristicsDatabaseSize(GetSiteCharacteristicsDatabaseSizeCallback callback) = 0;
};



class  SiteDataProviderProxy
    : public SiteDataProvider {
 public:
  using InterfaceType = SiteDataProvider;

  explicit SiteDataProviderProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void GetSiteCharacteristicsDatabase(const std::vector<std::string>& explicitly_requested_origins, GetSiteCharacteristicsDatabaseCallback callback) final;
  
  void GetSiteCharacteristicsDatabaseSize(GetSiteCharacteristicsDatabaseSizeCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  SiteDataProviderStubDispatch {
 public:
  static bool Accept(SiteDataProvider* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      SiteDataProvider* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<SiteDataProvider>>
class SiteDataProviderStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  SiteDataProviderStub() {}
  ~SiteDataProviderStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return SiteDataProviderStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return SiteDataProviderStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  SiteDataProviderRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  SiteDataProviderResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





class  SiteCharacteristicsFeature {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<SiteCharacteristicsFeature, T>::value>;
  using DataView = SiteCharacteristicsFeatureDataView;
  using Data_ = internal::SiteCharacteristicsFeature_Data;

  template <typename... Args>
  static SiteCharacteristicsFeaturePtr New(Args&&... args) {
    return SiteCharacteristicsFeaturePtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static SiteCharacteristicsFeaturePtr From(const U& u) {
    return mojo::TypeConverter<SiteCharacteristicsFeaturePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, SiteCharacteristicsFeature>::Convert(*this);
  }


  SiteCharacteristicsFeature();

  SiteCharacteristicsFeature(
      int64_t observation_duration,
      int64_t use_timestamp);

  ~SiteCharacteristicsFeature();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = SiteCharacteristicsFeaturePtr>
  SiteCharacteristicsFeaturePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, SiteCharacteristicsFeature::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;
  size_t Hash(size_t seed) const;

  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        SiteCharacteristicsFeature::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        SiteCharacteristicsFeature::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::SiteCharacteristicsFeature_UnserializedMessageContext<
            UserType, SiteCharacteristicsFeature::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<SiteCharacteristicsFeature::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return SiteCharacteristicsFeature::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::SiteCharacteristicsFeature_UnserializedMessageContext<
            UserType, SiteCharacteristicsFeature::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<SiteCharacteristicsFeature::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  int64_t observation_duration;
  
  int64_t use_timestamp;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, SiteCharacteristicsFeature::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, SiteCharacteristicsFeature::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, SiteCharacteristicsFeature::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, SiteCharacteristicsFeature::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class  SiteCharacteristicsPerformanceMeasurement {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<SiteCharacteristicsPerformanceMeasurement, T>::value>;
  using DataView = SiteCharacteristicsPerformanceMeasurementDataView;
  using Data_ = internal::SiteCharacteristicsPerformanceMeasurement_Data;

  template <typename... Args>
  static SiteCharacteristicsPerformanceMeasurementPtr New(Args&&... args) {
    return SiteCharacteristicsPerformanceMeasurementPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static SiteCharacteristicsPerformanceMeasurementPtr From(const U& u) {
    return mojo::TypeConverter<SiteCharacteristicsPerformanceMeasurementPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, SiteCharacteristicsPerformanceMeasurement>::Convert(*this);
  }


  SiteCharacteristicsPerformanceMeasurement();

  SiteCharacteristicsPerformanceMeasurement(
      float avg_cpu_usage_us,
      float avg_footprint_kb,
      float avg_load_duration_us);

  ~SiteCharacteristicsPerformanceMeasurement();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = SiteCharacteristicsPerformanceMeasurementPtr>
  SiteCharacteristicsPerformanceMeasurementPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, SiteCharacteristicsPerformanceMeasurement::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;
  size_t Hash(size_t seed) const;

  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        SiteCharacteristicsPerformanceMeasurement::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        SiteCharacteristicsPerformanceMeasurement::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::SiteCharacteristicsPerformanceMeasurement_UnserializedMessageContext<
            UserType, SiteCharacteristicsPerformanceMeasurement::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<SiteCharacteristicsPerformanceMeasurement::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return SiteCharacteristicsPerformanceMeasurement::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::SiteCharacteristicsPerformanceMeasurement_UnserializedMessageContext<
            UserType, SiteCharacteristicsPerformanceMeasurement::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<SiteCharacteristicsPerformanceMeasurement::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  float avg_cpu_usage_us;
  
  float avg_footprint_kb;
  
  float avg_load_duration_us;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, SiteCharacteristicsPerformanceMeasurement::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, SiteCharacteristicsPerformanceMeasurement::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, SiteCharacteristicsPerformanceMeasurement::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, SiteCharacteristicsPerformanceMeasurement::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class  SiteCharacteristicsDatabaseSize {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<SiteCharacteristicsDatabaseSize, T>::value>;
  using DataView = SiteCharacteristicsDatabaseSizeDataView;
  using Data_ = internal::SiteCharacteristicsDatabaseSize_Data;

  template <typename... Args>
  static SiteCharacteristicsDatabaseSizePtr New(Args&&... args) {
    return SiteCharacteristicsDatabaseSizePtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static SiteCharacteristicsDatabaseSizePtr From(const U& u) {
    return mojo::TypeConverter<SiteCharacteristicsDatabaseSizePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, SiteCharacteristicsDatabaseSize>::Convert(*this);
  }


  SiteCharacteristicsDatabaseSize();

  SiteCharacteristicsDatabaseSize(
      int64_t num_rows,
      int64_t on_disk_size_kb);

  ~SiteCharacteristicsDatabaseSize();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = SiteCharacteristicsDatabaseSizePtr>
  SiteCharacteristicsDatabaseSizePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, SiteCharacteristicsDatabaseSize::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;
  size_t Hash(size_t seed) const;

  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        SiteCharacteristicsDatabaseSize::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        SiteCharacteristicsDatabaseSize::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::SiteCharacteristicsDatabaseSize_UnserializedMessageContext<
            UserType, SiteCharacteristicsDatabaseSize::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<SiteCharacteristicsDatabaseSize::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return SiteCharacteristicsDatabaseSize::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::SiteCharacteristicsDatabaseSize_UnserializedMessageContext<
            UserType, SiteCharacteristicsDatabaseSize::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<SiteCharacteristicsDatabaseSize::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  int64_t num_rows;
  
  int64_t on_disk_size_kb;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, SiteCharacteristicsDatabaseSize::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, SiteCharacteristicsDatabaseSize::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, SiteCharacteristicsDatabaseSize::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, SiteCharacteristicsDatabaseSize::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}













class  SiteCharacteristicsDatabaseValue {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<SiteCharacteristicsDatabaseValue, T>::value>;
  using DataView = SiteCharacteristicsDatabaseValueDataView;
  using Data_ = internal::SiteCharacteristicsDatabaseValue_Data;

  template <typename... Args>
  static SiteCharacteristicsDatabaseValuePtr New(Args&&... args) {
    return SiteCharacteristicsDatabaseValuePtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static SiteCharacteristicsDatabaseValuePtr From(const U& u) {
    return mojo::TypeConverter<SiteCharacteristicsDatabaseValuePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, SiteCharacteristicsDatabaseValue>::Convert(*this);
  }


  SiteCharacteristicsDatabaseValue();

  SiteCharacteristicsDatabaseValue(
      uint32_t last_loaded,
      SiteCharacteristicsFeaturePtr updates_favicon_in_background,
      SiteCharacteristicsFeaturePtr updates_title_in_background,
      SiteCharacteristicsFeaturePtr uses_audio_in_background,
      SiteCharacteristicsPerformanceMeasurementPtr load_time_estimates);

  ~SiteCharacteristicsDatabaseValue();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = SiteCharacteristicsDatabaseValuePtr>
  SiteCharacteristicsDatabaseValuePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, SiteCharacteristicsDatabaseValue::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        SiteCharacteristicsDatabaseValue::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        SiteCharacteristicsDatabaseValue::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::SiteCharacteristicsDatabaseValue_UnserializedMessageContext<
            UserType, SiteCharacteristicsDatabaseValue::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<SiteCharacteristicsDatabaseValue::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return SiteCharacteristicsDatabaseValue::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::SiteCharacteristicsDatabaseValue_UnserializedMessageContext<
            UserType, SiteCharacteristicsDatabaseValue::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<SiteCharacteristicsDatabaseValue::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  uint32_t last_loaded;
  
  SiteCharacteristicsFeaturePtr updates_favicon_in_background;
  
  SiteCharacteristicsFeaturePtr updates_title_in_background;
  
  SiteCharacteristicsFeaturePtr uses_audio_in_background;
  
  SiteCharacteristicsPerformanceMeasurementPtr load_time_estimates;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(SiteCharacteristicsDatabaseValue);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, SiteCharacteristicsDatabaseValue::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, SiteCharacteristicsDatabaseValue::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, SiteCharacteristicsDatabaseValue::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, SiteCharacteristicsDatabaseValue::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class  SiteCharacteristicsDatabaseEntry {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<SiteCharacteristicsDatabaseEntry, T>::value>;
  using DataView = SiteCharacteristicsDatabaseEntryDataView;
  using Data_ = internal::SiteCharacteristicsDatabaseEntry_Data;

  template <typename... Args>
  static SiteCharacteristicsDatabaseEntryPtr New(Args&&... args) {
    return SiteCharacteristicsDatabaseEntryPtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static SiteCharacteristicsDatabaseEntryPtr From(const U& u) {
    return mojo::TypeConverter<SiteCharacteristicsDatabaseEntryPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, SiteCharacteristicsDatabaseEntry>::Convert(*this);
  }


  SiteCharacteristicsDatabaseEntry();

  SiteCharacteristicsDatabaseEntry(
      const std::string& origin,
      bool is_dirty,
      SiteCharacteristicsDatabaseValuePtr value);

  ~SiteCharacteristicsDatabaseEntry();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = SiteCharacteristicsDatabaseEntryPtr>
  SiteCharacteristicsDatabaseEntryPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, SiteCharacteristicsDatabaseEntry::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        SiteCharacteristicsDatabaseEntry::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        SiteCharacteristicsDatabaseEntry::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::SiteCharacteristicsDatabaseEntry_UnserializedMessageContext<
            UserType, SiteCharacteristicsDatabaseEntry::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<SiteCharacteristicsDatabaseEntry::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return SiteCharacteristicsDatabaseEntry::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::SiteCharacteristicsDatabaseEntry_UnserializedMessageContext<
            UserType, SiteCharacteristicsDatabaseEntry::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<SiteCharacteristicsDatabaseEntry::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  std::string origin;
  
  bool is_dirty;
  
  SiteCharacteristicsDatabaseValuePtr value;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(SiteCharacteristicsDatabaseEntry);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, SiteCharacteristicsDatabaseEntry::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, SiteCharacteristicsDatabaseEntry::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, SiteCharacteristicsDatabaseEntry::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, SiteCharacteristicsDatabaseEntry::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class  SiteCharacteristicsDatabase {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<SiteCharacteristicsDatabase, T>::value>;
  using DataView = SiteCharacteristicsDatabaseDataView;
  using Data_ = internal::SiteCharacteristicsDatabase_Data;

  template <typename... Args>
  static SiteCharacteristicsDatabasePtr New(Args&&... args) {
    return SiteCharacteristicsDatabasePtr(
        base::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static SiteCharacteristicsDatabasePtr From(const U& u) {
    return mojo::TypeConverter<SiteCharacteristicsDatabasePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, SiteCharacteristicsDatabase>::Convert(*this);
  }


  SiteCharacteristicsDatabase();

  explicit SiteCharacteristicsDatabase(
      std::vector<SiteCharacteristicsDatabaseEntryPtr> db_rows);

  ~SiteCharacteristicsDatabase();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = SiteCharacteristicsDatabasePtr>
  SiteCharacteristicsDatabasePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, SiteCharacteristicsDatabase::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        SiteCharacteristicsDatabase::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        SiteCharacteristicsDatabase::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::SiteCharacteristicsDatabase_UnserializedMessageContext<
            UserType, SiteCharacteristicsDatabase::DataView>>(0, 0, std::move(input)));
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    return mojo::internal::DeserializeImpl<SiteCharacteristicsDatabase::DataView>(
        data, data_num_bytes, std::vector<mojo::ScopedHandle>(), output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return SiteCharacteristicsDatabase::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::SiteCharacteristicsDatabase_UnserializedMessageContext<
            UserType, SiteCharacteristicsDatabase::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<SiteCharacteristicsDatabase::DataView>(
        input.payload(), input.payload_num_bytes(),
        std::move(*input.mutable_handles()), output, Validate);
  }

  
  std::vector<SiteCharacteristicsDatabaseEntryPtr> db_rows;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
  DISALLOW_COPY_AND_ASSIGN(SiteCharacteristicsDatabase);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, SiteCharacteristicsDatabase::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, SiteCharacteristicsDatabase::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, SiteCharacteristicsDatabase::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, SiteCharacteristicsDatabase::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
SiteCharacteristicsFeaturePtr SiteCharacteristicsFeature::Clone() const {
  return New(
      mojo::Clone(observation_duration),
      mojo::Clone(use_timestamp)
  );
}

template <typename T, SiteCharacteristicsFeature::EnableIfSame<T>*>
bool SiteCharacteristicsFeature::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->observation_duration, other_struct.observation_duration))
    return false;
  if (!mojo::Equals(this->use_timestamp, other_struct.use_timestamp))
    return false;
  return true;
}

template <typename T, SiteCharacteristicsFeature::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.observation_duration < rhs.observation_duration)
    return true;
  if (rhs.observation_duration < lhs.observation_duration)
    return false;
  if (lhs.use_timestamp < rhs.use_timestamp)
    return true;
  if (rhs.use_timestamp < lhs.use_timestamp)
    return false;
  return false;
}
template <typename StructPtrType>
SiteCharacteristicsPerformanceMeasurementPtr SiteCharacteristicsPerformanceMeasurement::Clone() const {
  return New(
      mojo::Clone(avg_cpu_usage_us),
      mojo::Clone(avg_footprint_kb),
      mojo::Clone(avg_load_duration_us)
  );
}

template <typename T, SiteCharacteristicsPerformanceMeasurement::EnableIfSame<T>*>
bool SiteCharacteristicsPerformanceMeasurement::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->avg_cpu_usage_us, other_struct.avg_cpu_usage_us))
    return false;
  if (!mojo::Equals(this->avg_footprint_kb, other_struct.avg_footprint_kb))
    return false;
  if (!mojo::Equals(this->avg_load_duration_us, other_struct.avg_load_duration_us))
    return false;
  return true;
}

template <typename T, SiteCharacteristicsPerformanceMeasurement::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.avg_cpu_usage_us < rhs.avg_cpu_usage_us)
    return true;
  if (rhs.avg_cpu_usage_us < lhs.avg_cpu_usage_us)
    return false;
  if (lhs.avg_footprint_kb < rhs.avg_footprint_kb)
    return true;
  if (rhs.avg_footprint_kb < lhs.avg_footprint_kb)
    return false;
  if (lhs.avg_load_duration_us < rhs.avg_load_duration_us)
    return true;
  if (rhs.avg_load_duration_us < lhs.avg_load_duration_us)
    return false;
  return false;
}
template <typename StructPtrType>
SiteCharacteristicsDatabaseSizePtr SiteCharacteristicsDatabaseSize::Clone() const {
  return New(
      mojo::Clone(num_rows),
      mojo::Clone(on_disk_size_kb)
  );
}

template <typename T, SiteCharacteristicsDatabaseSize::EnableIfSame<T>*>
bool SiteCharacteristicsDatabaseSize::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->num_rows, other_struct.num_rows))
    return false;
  if (!mojo::Equals(this->on_disk_size_kb, other_struct.on_disk_size_kb))
    return false;
  return true;
}

template <typename T, SiteCharacteristicsDatabaseSize::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.num_rows < rhs.num_rows)
    return true;
  if (rhs.num_rows < lhs.num_rows)
    return false;
  if (lhs.on_disk_size_kb < rhs.on_disk_size_kb)
    return true;
  if (rhs.on_disk_size_kb < lhs.on_disk_size_kb)
    return false;
  return false;
}
template <typename StructPtrType>
SiteCharacteristicsDatabaseValuePtr SiteCharacteristicsDatabaseValue::Clone() const {
  return New(
      mojo::Clone(last_loaded),
      mojo::Clone(updates_favicon_in_background),
      mojo::Clone(updates_title_in_background),
      mojo::Clone(uses_audio_in_background),
      mojo::Clone(load_time_estimates)
  );
}

template <typename T, SiteCharacteristicsDatabaseValue::EnableIfSame<T>*>
bool SiteCharacteristicsDatabaseValue::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->last_loaded, other_struct.last_loaded))
    return false;
  if (!mojo::Equals(this->updates_favicon_in_background, other_struct.updates_favicon_in_background))
    return false;
  if (!mojo::Equals(this->updates_title_in_background, other_struct.updates_title_in_background))
    return false;
  if (!mojo::Equals(this->uses_audio_in_background, other_struct.uses_audio_in_background))
    return false;
  if (!mojo::Equals(this->load_time_estimates, other_struct.load_time_estimates))
    return false;
  return true;
}

template <typename T, SiteCharacteristicsDatabaseValue::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.last_loaded < rhs.last_loaded)
    return true;
  if (rhs.last_loaded < lhs.last_loaded)
    return false;
  if (lhs.updates_favicon_in_background < rhs.updates_favicon_in_background)
    return true;
  if (rhs.updates_favicon_in_background < lhs.updates_favicon_in_background)
    return false;
  if (lhs.updates_title_in_background < rhs.updates_title_in_background)
    return true;
  if (rhs.updates_title_in_background < lhs.updates_title_in_background)
    return false;
  if (lhs.uses_audio_in_background < rhs.uses_audio_in_background)
    return true;
  if (rhs.uses_audio_in_background < lhs.uses_audio_in_background)
    return false;
  if (lhs.load_time_estimates < rhs.load_time_estimates)
    return true;
  if (rhs.load_time_estimates < lhs.load_time_estimates)
    return false;
  return false;
}
template <typename StructPtrType>
SiteCharacteristicsDatabaseEntryPtr SiteCharacteristicsDatabaseEntry::Clone() const {
  return New(
      mojo::Clone(origin),
      mojo::Clone(is_dirty),
      mojo::Clone(value)
  );
}

template <typename T, SiteCharacteristicsDatabaseEntry::EnableIfSame<T>*>
bool SiteCharacteristicsDatabaseEntry::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->origin, other_struct.origin))
    return false;
  if (!mojo::Equals(this->is_dirty, other_struct.is_dirty))
    return false;
  if (!mojo::Equals(this->value, other_struct.value))
    return false;
  return true;
}

template <typename T, SiteCharacteristicsDatabaseEntry::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.origin < rhs.origin)
    return true;
  if (rhs.origin < lhs.origin)
    return false;
  if (lhs.is_dirty < rhs.is_dirty)
    return true;
  if (rhs.is_dirty < lhs.is_dirty)
    return false;
  if (lhs.value < rhs.value)
    return true;
  if (rhs.value < lhs.value)
    return false;
  return false;
}
template <typename StructPtrType>
SiteCharacteristicsDatabasePtr SiteCharacteristicsDatabase::Clone() const {
  return New(
      mojo::Clone(db_rows)
  );
}

template <typename T, SiteCharacteristicsDatabase::EnableIfSame<T>*>
bool SiteCharacteristicsDatabase::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->db_rows, other_struct.db_rows))
    return false;
  return true;
}

template <typename T, SiteCharacteristicsDatabase::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.db_rows < rhs.db_rows)
    return true;
  if (rhs.db_rows < lhs.db_rows)
    return false;
  return false;
}


}  // namespace mojom
}  // namespace discards

namespace mojo {


template <>
struct  StructTraits<::discards::mojom::SiteCharacteristicsFeature::DataView,
                                         ::discards::mojom::SiteCharacteristicsFeaturePtr> {
  static bool IsNull(const ::discards::mojom::SiteCharacteristicsFeaturePtr& input) { return !input; }
  static void SetToNull(::discards::mojom::SiteCharacteristicsFeaturePtr* output) { output->reset(); }

  static decltype(::discards::mojom::SiteCharacteristicsFeature::observation_duration) observation_duration(
      const ::discards::mojom::SiteCharacteristicsFeaturePtr& input) {
    return input->observation_duration;
  }

  static decltype(::discards::mojom::SiteCharacteristicsFeature::use_timestamp) use_timestamp(
      const ::discards::mojom::SiteCharacteristicsFeaturePtr& input) {
    return input->use_timestamp;
  }

  static bool Read(::discards::mojom::SiteCharacteristicsFeature::DataView input, ::discards::mojom::SiteCharacteristicsFeaturePtr* output);
};


template <>
struct  StructTraits<::discards::mojom::SiteCharacteristicsPerformanceMeasurement::DataView,
                                         ::discards::mojom::SiteCharacteristicsPerformanceMeasurementPtr> {
  static bool IsNull(const ::discards::mojom::SiteCharacteristicsPerformanceMeasurementPtr& input) { return !input; }
  static void SetToNull(::discards::mojom::SiteCharacteristicsPerformanceMeasurementPtr* output) { output->reset(); }

  static decltype(::discards::mojom::SiteCharacteristicsPerformanceMeasurement::avg_cpu_usage_us) avg_cpu_usage_us(
      const ::discards::mojom::SiteCharacteristicsPerformanceMeasurementPtr& input) {
    return input->avg_cpu_usage_us;
  }

  static decltype(::discards::mojom::SiteCharacteristicsPerformanceMeasurement::avg_footprint_kb) avg_footprint_kb(
      const ::discards::mojom::SiteCharacteristicsPerformanceMeasurementPtr& input) {
    return input->avg_footprint_kb;
  }

  static decltype(::discards::mojom::SiteCharacteristicsPerformanceMeasurement::avg_load_duration_us) avg_load_duration_us(
      const ::discards::mojom::SiteCharacteristicsPerformanceMeasurementPtr& input) {
    return input->avg_load_duration_us;
  }

  static bool Read(::discards::mojom::SiteCharacteristicsPerformanceMeasurement::DataView input, ::discards::mojom::SiteCharacteristicsPerformanceMeasurementPtr* output);
};


template <>
struct  StructTraits<::discards::mojom::SiteCharacteristicsDatabaseSize::DataView,
                                         ::discards::mojom::SiteCharacteristicsDatabaseSizePtr> {
  static bool IsNull(const ::discards::mojom::SiteCharacteristicsDatabaseSizePtr& input) { return !input; }
  static void SetToNull(::discards::mojom::SiteCharacteristicsDatabaseSizePtr* output) { output->reset(); }

  static decltype(::discards::mojom::SiteCharacteristicsDatabaseSize::num_rows) num_rows(
      const ::discards::mojom::SiteCharacteristicsDatabaseSizePtr& input) {
    return input->num_rows;
  }

  static decltype(::discards::mojom::SiteCharacteristicsDatabaseSize::on_disk_size_kb) on_disk_size_kb(
      const ::discards::mojom::SiteCharacteristicsDatabaseSizePtr& input) {
    return input->on_disk_size_kb;
  }

  static bool Read(::discards::mojom::SiteCharacteristicsDatabaseSize::DataView input, ::discards::mojom::SiteCharacteristicsDatabaseSizePtr* output);
};


template <>
struct  StructTraits<::discards::mojom::SiteCharacteristicsDatabaseValue::DataView,
                                         ::discards::mojom::SiteCharacteristicsDatabaseValuePtr> {
  static bool IsNull(const ::discards::mojom::SiteCharacteristicsDatabaseValuePtr& input) { return !input; }
  static void SetToNull(::discards::mojom::SiteCharacteristicsDatabaseValuePtr* output) { output->reset(); }

  static decltype(::discards::mojom::SiteCharacteristicsDatabaseValue::last_loaded) last_loaded(
      const ::discards::mojom::SiteCharacteristicsDatabaseValuePtr& input) {
    return input->last_loaded;
  }

  static const decltype(::discards::mojom::SiteCharacteristicsDatabaseValue::updates_favicon_in_background)& updates_favicon_in_background(
      const ::discards::mojom::SiteCharacteristicsDatabaseValuePtr& input) {
    return input->updates_favicon_in_background;
  }

  static const decltype(::discards::mojom::SiteCharacteristicsDatabaseValue::updates_title_in_background)& updates_title_in_background(
      const ::discards::mojom::SiteCharacteristicsDatabaseValuePtr& input) {
    return input->updates_title_in_background;
  }

  static const decltype(::discards::mojom::SiteCharacteristicsDatabaseValue::uses_audio_in_background)& uses_audio_in_background(
      const ::discards::mojom::SiteCharacteristicsDatabaseValuePtr& input) {
    return input->uses_audio_in_background;
  }

  static const decltype(::discards::mojom::SiteCharacteristicsDatabaseValue::load_time_estimates)& load_time_estimates(
      const ::discards::mojom::SiteCharacteristicsDatabaseValuePtr& input) {
    return input->load_time_estimates;
  }

  static bool Read(::discards::mojom::SiteCharacteristicsDatabaseValue::DataView input, ::discards::mojom::SiteCharacteristicsDatabaseValuePtr* output);
};


template <>
struct  StructTraits<::discards::mojom::SiteCharacteristicsDatabaseEntry::DataView,
                                         ::discards::mojom::SiteCharacteristicsDatabaseEntryPtr> {
  static bool IsNull(const ::discards::mojom::SiteCharacteristicsDatabaseEntryPtr& input) { return !input; }
  static void SetToNull(::discards::mojom::SiteCharacteristicsDatabaseEntryPtr* output) { output->reset(); }

  static const decltype(::discards::mojom::SiteCharacteristicsDatabaseEntry::origin)& origin(
      const ::discards::mojom::SiteCharacteristicsDatabaseEntryPtr& input) {
    return input->origin;
  }

  static decltype(::discards::mojom::SiteCharacteristicsDatabaseEntry::is_dirty) is_dirty(
      const ::discards::mojom::SiteCharacteristicsDatabaseEntryPtr& input) {
    return input->is_dirty;
  }

  static const decltype(::discards::mojom::SiteCharacteristicsDatabaseEntry::value)& value(
      const ::discards::mojom::SiteCharacteristicsDatabaseEntryPtr& input) {
    return input->value;
  }

  static bool Read(::discards::mojom::SiteCharacteristicsDatabaseEntry::DataView input, ::discards::mojom::SiteCharacteristicsDatabaseEntryPtr* output);
};


template <>
struct  StructTraits<::discards::mojom::SiteCharacteristicsDatabase::DataView,
                                         ::discards::mojom::SiteCharacteristicsDatabasePtr> {
  static bool IsNull(const ::discards::mojom::SiteCharacteristicsDatabasePtr& input) { return !input; }
  static void SetToNull(::discards::mojom::SiteCharacteristicsDatabasePtr* output) { output->reset(); }

  static const decltype(::discards::mojom::SiteCharacteristicsDatabase::db_rows)& db_rows(
      const ::discards::mojom::SiteCharacteristicsDatabasePtr& input) {
    return input->db_rows;
  }

  static bool Read(::discards::mojom::SiteCharacteristicsDatabase::DataView input, ::discards::mojom::SiteCharacteristicsDatabasePtr* output);
};

}  // namespace mojo

#endif  // CHROME_BROWSER_UI_WEBUI_DISCARDS_SITE_DATA_MOJOM_H_
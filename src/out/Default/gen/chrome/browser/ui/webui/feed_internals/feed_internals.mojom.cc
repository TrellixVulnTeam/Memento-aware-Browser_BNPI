// chrome/browser/ui/webui/feed_internals/feed_internals.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "chrome/browser/ui/webui/feed_internals/feed_internals.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "chrome/browser/ui/webui/feed_internals/feed_internals.mojom-params-data.h"
#include "chrome/browser/ui/webui/feed_internals/feed_internals.mojom-shared-message-ids.h"

#include "chrome/browser/ui/webui/feed_internals/feed_internals.mojom-import-headers.h"


#ifndef CHROME_BROWSER_UI_WEBUI_FEED_INTERNALS_FEED_INTERNALS_MOJOM_JUMBO_H_
#define CHROME_BROWSER_UI_WEBUI_FEED_INTERNALS_FEED_INTERNALS_MOJOM_JUMBO_H_
#endif
namespace feed_internals {
namespace mojom {
Properties::Properties()
    : is_feed_enabled(),
      is_feed_visible(),
      is_feed_allowed(),
      is_prefetching_enabled(),
      load_stream_status(),
      feed_fetch_url() {}

Properties::Properties(
    bool is_feed_enabled_in,
    bool is_feed_visible_in,
    bool is_feed_allowed_in,
    bool is_prefetching_enabled_in,
    const std::string& load_stream_status_in,
    const ::GURL& feed_fetch_url_in)
    : is_feed_enabled(std::move(is_feed_enabled_in)),
      is_feed_visible(std::move(is_feed_visible_in)),
      is_feed_allowed(std::move(is_feed_allowed_in)),
      is_prefetching_enabled(std::move(is_prefetching_enabled_in)),
      load_stream_status(std::move(load_stream_status_in)),
      feed_fetch_url(std::move(feed_fetch_url_in)) {}

Properties::~Properties() = default;

bool Properties::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
UserClassifier::UserClassifier()
    : user_class_description(),
      avg_hours_between_views(),
      avg_hours_between_uses() {}

UserClassifier::UserClassifier(
    const std::string& user_class_description_in,
    float avg_hours_between_views_in,
    float avg_hours_between_uses_in)
    : user_class_description(std::move(user_class_description_in)),
      avg_hours_between_views(std::move(avg_hours_between_views_in)),
      avg_hours_between_uses(std::move(avg_hours_between_uses_in)) {}

UserClassifier::~UserClassifier() = default;
size_t UserClassifier::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->user_class_description);
  seed = mojo::internal::Hash(seed, this->avg_hours_between_views);
  seed = mojo::internal::Hash(seed, this->avg_hours_between_uses);
  return seed;
}

bool UserClassifier::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
LastFetchProperties::LastFetchProperties()
    : last_fetch_status(),
      last_fetch_trigger(),
      last_fetch_time(),
      refresh_suppress_time(),
      last_bless_nonce() {}

LastFetchProperties::LastFetchProperties(
    int32_t last_fetch_status_in,
    const std::string& last_fetch_trigger_in,
    ::base::TimeDelta last_fetch_time_in,
    ::base::TimeDelta refresh_suppress_time_in,
    const std::string& last_bless_nonce_in)
    : last_fetch_status(std::move(last_fetch_status_in)),
      last_fetch_trigger(std::move(last_fetch_trigger_in)),
      last_fetch_time(std::move(last_fetch_time_in)),
      refresh_suppress_time(std::move(refresh_suppress_time_in)),
      last_bless_nonce(std::move(last_bless_nonce_in)) {}

LastFetchProperties::~LastFetchProperties() = default;

bool LastFetchProperties::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
Suggestion::Suggestion()
    : title(),
      url(),
      publisher_name(),
      image_url(),
      favicon_url() {}

Suggestion::Suggestion(
    const std::string& title_in,
    const ::GURL& url_in,
    const std::string& publisher_name_in,
    const ::GURL& image_url_in,
    const ::GURL& favicon_url_in)
    : title(std::move(title_in)),
      url(std::move(url_in)),
      publisher_name(std::move(publisher_name_in)),
      image_url(std::move(image_url_in)),
      favicon_url(std::move(favicon_url_in)) {}

Suggestion::~Suggestion() = default;

bool Suggestion::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char PageHandler::Name_[] = "feed_internals.mojom.PageHandler";

class PageHandler_GetGeneralProperties_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  PageHandler_GetGeneralProperties_ForwardToCallback(
      PageHandler::GetGeneralPropertiesCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  PageHandler::GetGeneralPropertiesCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(PageHandler_GetGeneralProperties_ForwardToCallback);
};

class PageHandler_GetUserClassifierProperties_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  PageHandler_GetUserClassifierProperties_ForwardToCallback(
      PageHandler::GetUserClassifierPropertiesCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  PageHandler::GetUserClassifierPropertiesCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(PageHandler_GetUserClassifierProperties_ForwardToCallback);
};

class PageHandler_GetLastFetchProperties_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  PageHandler_GetLastFetchProperties_ForwardToCallback(
      PageHandler::GetLastFetchPropertiesCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  PageHandler::GetLastFetchPropertiesCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(PageHandler_GetLastFetchProperties_ForwardToCallback);
};

class PageHandler_GetCurrentContent_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  PageHandler_GetCurrentContent_ForwardToCallback(
      PageHandler::GetCurrentContentCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  PageHandler::GetCurrentContentCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(PageHandler_GetCurrentContent_ForwardToCallback);
};

class PageHandler_GetFeedProcessScopeDump_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  PageHandler_GetFeedProcessScopeDump_ForwardToCallback(
      PageHandler::GetFeedProcessScopeDumpCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  PageHandler::GetFeedProcessScopeDumpCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(PageHandler_GetFeedProcessScopeDump_ForwardToCallback);
};

class PageHandler_GetFeedHistograms_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  PageHandler_GetFeedHistograms_ForwardToCallback(
      PageHandler::GetFeedHistogramsCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  PageHandler::GetFeedHistogramsCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(PageHandler_GetFeedHistograms_ForwardToCallback);
};

PageHandlerProxy::PageHandlerProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void PageHandlerProxy::GetGeneralProperties(
    GetGeneralPropertiesCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "feed_internals::mojom::PageHandler::GetGeneralProperties");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPageHandler_GetGeneralProperties_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::feed_internals::mojom::internal::PageHandler_GetGeneralProperties_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageHandler::Name_);
  message.set_method_name("GetGeneralProperties");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new PageHandler_GetGeneralProperties_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}

void PageHandlerProxy::GetUserClassifierProperties(
    GetUserClassifierPropertiesCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "feed_internals::mojom::PageHandler::GetUserClassifierProperties");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPageHandler_GetUserClassifierProperties_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::feed_internals::mojom::internal::PageHandler_GetUserClassifierProperties_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageHandler::Name_);
  message.set_method_name("GetUserClassifierProperties");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new PageHandler_GetUserClassifierProperties_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}

void PageHandlerProxy::ClearUserClassifierProperties(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "feed_internals::mojom::PageHandler::ClearUserClassifierProperties");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPageHandler_ClearUserClassifierProperties_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::feed_internals::mojom::internal::PageHandler_ClearUserClassifierProperties_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageHandler::Name_);
  message.set_method_name("ClearUserClassifierProperties");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void PageHandlerProxy::GetLastFetchProperties(
    GetLastFetchPropertiesCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "feed_internals::mojom::PageHandler::GetLastFetchProperties");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPageHandler_GetLastFetchProperties_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::feed_internals::mojom::internal::PageHandler_GetLastFetchProperties_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageHandler::Name_);
  message.set_method_name("GetLastFetchProperties");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new PageHandler_GetLastFetchProperties_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}

void PageHandlerProxy::ClearCachedDataAndRefreshFeed(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "feed_internals::mojom::PageHandler::ClearCachedDataAndRefreshFeed");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPageHandler_ClearCachedDataAndRefreshFeed_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::feed_internals::mojom::internal::PageHandler_ClearCachedDataAndRefreshFeed_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageHandler::Name_);
  message.set_method_name("ClearCachedDataAndRefreshFeed");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void PageHandlerProxy::RefreshFeed(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "feed_internals::mojom::PageHandler::RefreshFeed");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPageHandler_RefreshFeed_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::feed_internals::mojom::internal::PageHandler_RefreshFeed_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageHandler::Name_);
  message.set_method_name("RefreshFeed");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void PageHandlerProxy::GetCurrentContent(
    GetCurrentContentCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "feed_internals::mojom::PageHandler::GetCurrentContent");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPageHandler_GetCurrentContent_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::feed_internals::mojom::internal::PageHandler_GetCurrentContent_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageHandler::Name_);
  message.set_method_name("GetCurrentContent");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new PageHandler_GetCurrentContent_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}

void PageHandlerProxy::GetFeedProcessScopeDump(
    GetFeedProcessScopeDumpCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "feed_internals::mojom::PageHandler::GetFeedProcessScopeDump");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPageHandler_GetFeedProcessScopeDump_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::feed_internals::mojom::internal::PageHandler_GetFeedProcessScopeDump_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageHandler::Name_);
  message.set_method_name("GetFeedProcessScopeDump");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new PageHandler_GetFeedProcessScopeDump_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}

void PageHandlerProxy::GetFeedHistograms(
    GetFeedHistogramsCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "feed_internals::mojom::PageHandler::GetFeedHistograms");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPageHandler_GetFeedHistograms_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::feed_internals::mojom::internal::PageHandler_GetFeedHistograms_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageHandler::Name_);
  message.set_method_name("GetFeedHistograms");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new PageHandler_GetFeedHistograms_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}

void PageHandlerProxy::OverrideFeedHost(
    const ::GURL& in_host) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "feed_internals::mojom::PageHandler::OverrideFeedHost");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPageHandler_OverrideFeedHost_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::feed_internals::mojom::internal::PageHandler_OverrideFeedHost_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->host)::BaseType::BufferWriter
      host_writer;
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_host, buffer, &host_writer, &serialization_context);
  params->host.Set(
      host_writer.is_null() ? nullptr : host_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->host.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null host in PageHandler.OverrideFeedHost request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageHandler::Name_);
  message.set_method_name("OverrideFeedHost");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}
class PageHandler_GetGeneralProperties_ProxyToResponder {
 public:
  static PageHandler::GetGeneralPropertiesCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<PageHandler_GetGeneralProperties_ProxyToResponder> proxy(
        new PageHandler_GetGeneralProperties_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&PageHandler_GetGeneralProperties_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~PageHandler_GetGeneralProperties_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  PageHandler_GetGeneralProperties_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "PageHandler::GetGeneralPropertiesCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      PropertiesPtr in_properties);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(PageHandler_GetGeneralProperties_ProxyToResponder);
};

bool PageHandler_GetGeneralProperties_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "feed_internals::mojom::PageHandler::GetGeneralPropertiesCallback",
               "message", message->name());
#endif
  mojo::internal::MessageDispatchContext dispatch_context(message);

  DCHECK(message->is_serialized());
  internal::PageHandler_GetGeneralProperties_ResponseParams_Data* params =
      reinterpret_cast<
          internal::PageHandler_GetGeneralProperties_ResponseParams_Data*>(
              message->mutable_payload());
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  
  bool success = true;
  PropertiesPtr p_properties{};
  PageHandler_GetGeneralProperties_ResponseParamsDataView input_data_view(params, &serialization_context);
  
  if (success && !input_data_view.ReadProperties(&p_properties))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        PageHandler::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_properties));
  return true;
}

void PageHandler_GetGeneralProperties_ProxyToResponder::Run(
    PropertiesPtr in_properties) {
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPageHandler_GetGeneralProperties_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::feed_internals::mojom::internal::PageHandler_GetGeneralProperties_ResponseParams_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->properties)::BaseType::BufferWriter
      properties_writer;
  mojo::internal::Serialize<::feed_internals::mojom::PropertiesDataView>(
      in_properties, buffer, &properties_writer, &serialization_context);
  params->properties.Set(
      properties_writer.is_null() ? nullptr : properties_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->properties.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null properties in ");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "(Impl)feed_internals::mojom::PageHandler::GetGeneralPropertiesCallback",
               "message", message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageHandler::Name_);
  message.set_method_name("GetGeneralProperties");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class PageHandler_GetUserClassifierProperties_ProxyToResponder {
 public:
  static PageHandler::GetUserClassifierPropertiesCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<PageHandler_GetUserClassifierProperties_ProxyToResponder> proxy(
        new PageHandler_GetUserClassifierProperties_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&PageHandler_GetUserClassifierProperties_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~PageHandler_GetUserClassifierProperties_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  PageHandler_GetUserClassifierProperties_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "PageHandler::GetUserClassifierPropertiesCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      UserClassifierPtr in_properties);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(PageHandler_GetUserClassifierProperties_ProxyToResponder);
};

bool PageHandler_GetUserClassifierProperties_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "feed_internals::mojom::PageHandler::GetUserClassifierPropertiesCallback",
               "message", message->name());
#endif
  mojo::internal::MessageDispatchContext dispatch_context(message);

  DCHECK(message->is_serialized());
  internal::PageHandler_GetUserClassifierProperties_ResponseParams_Data* params =
      reinterpret_cast<
          internal::PageHandler_GetUserClassifierProperties_ResponseParams_Data*>(
              message->mutable_payload());
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  
  bool success = true;
  UserClassifierPtr p_properties{};
  PageHandler_GetUserClassifierProperties_ResponseParamsDataView input_data_view(params, &serialization_context);
  
  if (success && !input_data_view.ReadProperties(&p_properties))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        PageHandler::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_properties));
  return true;
}

void PageHandler_GetUserClassifierProperties_ProxyToResponder::Run(
    UserClassifierPtr in_properties) {
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPageHandler_GetUserClassifierProperties_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::feed_internals::mojom::internal::PageHandler_GetUserClassifierProperties_ResponseParams_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->properties)::BaseType::BufferWriter
      properties_writer;
  mojo::internal::Serialize<::feed_internals::mojom::UserClassifierDataView>(
      in_properties, buffer, &properties_writer, &serialization_context);
  params->properties.Set(
      properties_writer.is_null() ? nullptr : properties_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->properties.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null properties in ");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "(Impl)feed_internals::mojom::PageHandler::GetUserClassifierPropertiesCallback",
               "message", message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageHandler::Name_);
  message.set_method_name("GetUserClassifierProperties");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class PageHandler_GetLastFetchProperties_ProxyToResponder {
 public:
  static PageHandler::GetLastFetchPropertiesCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<PageHandler_GetLastFetchProperties_ProxyToResponder> proxy(
        new PageHandler_GetLastFetchProperties_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&PageHandler_GetLastFetchProperties_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~PageHandler_GetLastFetchProperties_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  PageHandler_GetLastFetchProperties_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "PageHandler::GetLastFetchPropertiesCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      LastFetchPropertiesPtr in_properties);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(PageHandler_GetLastFetchProperties_ProxyToResponder);
};

bool PageHandler_GetLastFetchProperties_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "feed_internals::mojom::PageHandler::GetLastFetchPropertiesCallback",
               "message", message->name());
#endif
  mojo::internal::MessageDispatchContext dispatch_context(message);

  DCHECK(message->is_serialized());
  internal::PageHandler_GetLastFetchProperties_ResponseParams_Data* params =
      reinterpret_cast<
          internal::PageHandler_GetLastFetchProperties_ResponseParams_Data*>(
              message->mutable_payload());
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  
  bool success = true;
  LastFetchPropertiesPtr p_properties{};
  PageHandler_GetLastFetchProperties_ResponseParamsDataView input_data_view(params, &serialization_context);
  
  if (success && !input_data_view.ReadProperties(&p_properties))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        PageHandler::Name_, 3, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_properties));
  return true;
}

void PageHandler_GetLastFetchProperties_ProxyToResponder::Run(
    LastFetchPropertiesPtr in_properties) {
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPageHandler_GetLastFetchProperties_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::feed_internals::mojom::internal::PageHandler_GetLastFetchProperties_ResponseParams_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->properties)::BaseType::BufferWriter
      properties_writer;
  mojo::internal::Serialize<::feed_internals::mojom::LastFetchPropertiesDataView>(
      in_properties, buffer, &properties_writer, &serialization_context);
  params->properties.Set(
      properties_writer.is_null() ? nullptr : properties_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->properties.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null properties in ");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "(Impl)feed_internals::mojom::PageHandler::GetLastFetchPropertiesCallback",
               "message", message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageHandler::Name_);
  message.set_method_name("GetLastFetchProperties");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class PageHandler_GetCurrentContent_ProxyToResponder {
 public:
  static PageHandler::GetCurrentContentCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<PageHandler_GetCurrentContent_ProxyToResponder> proxy(
        new PageHandler_GetCurrentContent_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&PageHandler_GetCurrentContent_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~PageHandler_GetCurrentContent_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  PageHandler_GetCurrentContent_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "PageHandler::GetCurrentContentCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      std::vector<SuggestionPtr> in_suggestions);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(PageHandler_GetCurrentContent_ProxyToResponder);
};

bool PageHandler_GetCurrentContent_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "feed_internals::mojom::PageHandler::GetCurrentContentCallback",
               "message", message->name());
#endif
  mojo::internal::MessageDispatchContext dispatch_context(message);

  DCHECK(message->is_serialized());
  internal::PageHandler_GetCurrentContent_ResponseParams_Data* params =
      reinterpret_cast<
          internal::PageHandler_GetCurrentContent_ResponseParams_Data*>(
              message->mutable_payload());
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  
  bool success = true;
  std::vector<SuggestionPtr> p_suggestions{};
  PageHandler_GetCurrentContent_ResponseParamsDataView input_data_view(params, &serialization_context);
  
  if (success && !input_data_view.ReadSuggestions(&p_suggestions))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        PageHandler::Name_, 6, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_suggestions));
  return true;
}

void PageHandler_GetCurrentContent_ProxyToResponder::Run(
    std::vector<SuggestionPtr> in_suggestions) {
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPageHandler_GetCurrentContent_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::feed_internals::mojom::internal::PageHandler_GetCurrentContent_ResponseParams_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->suggestions)::BaseType::BufferWriter
      suggestions_writer;
  const mojo::internal::ContainerValidateParams suggestions_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::feed_internals::mojom::SuggestionDataView>>(
      in_suggestions, buffer, &suggestions_writer, &suggestions_validate_params,
      &serialization_context);
  params->suggestions.Set(
      suggestions_writer.is_null() ? nullptr : suggestions_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->suggestions.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null suggestions in ");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "(Impl)feed_internals::mojom::PageHandler::GetCurrentContentCallback",
               "message", message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageHandler::Name_);
  message.set_method_name("GetCurrentContent");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class PageHandler_GetFeedProcessScopeDump_ProxyToResponder {
 public:
  static PageHandler::GetFeedProcessScopeDumpCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<PageHandler_GetFeedProcessScopeDump_ProxyToResponder> proxy(
        new PageHandler_GetFeedProcessScopeDump_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&PageHandler_GetFeedProcessScopeDump_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~PageHandler_GetFeedProcessScopeDump_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  PageHandler_GetFeedProcessScopeDump_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "PageHandler::GetFeedProcessScopeDumpCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const std::string& in_dump);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(PageHandler_GetFeedProcessScopeDump_ProxyToResponder);
};

bool PageHandler_GetFeedProcessScopeDump_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "feed_internals::mojom::PageHandler::GetFeedProcessScopeDumpCallback",
               "message", message->name());
#endif
  mojo::internal::MessageDispatchContext dispatch_context(message);

  DCHECK(message->is_serialized());
  internal::PageHandler_GetFeedProcessScopeDump_ResponseParams_Data* params =
      reinterpret_cast<
          internal::PageHandler_GetFeedProcessScopeDump_ResponseParams_Data*>(
              message->mutable_payload());
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  
  bool success = true;
  std::string p_dump{};
  PageHandler_GetFeedProcessScopeDump_ResponseParamsDataView input_data_view(params, &serialization_context);
  
  if (success && !input_data_view.ReadDump(&p_dump))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        PageHandler::Name_, 7, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_dump));
  return true;
}

void PageHandler_GetFeedProcessScopeDump_ProxyToResponder::Run(
    const std::string& in_dump) {
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPageHandler_GetFeedProcessScopeDump_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::feed_internals::mojom::internal::PageHandler_GetFeedProcessScopeDump_ResponseParams_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->dump)::BaseType::BufferWriter
      dump_writer;
  mojo::internal::Serialize<mojo::StringDataView>(
      in_dump, buffer, &dump_writer, &serialization_context);
  params->dump.Set(
      dump_writer.is_null() ? nullptr : dump_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->dump.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null dump in ");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "(Impl)feed_internals::mojom::PageHandler::GetFeedProcessScopeDumpCallback",
               "message", message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageHandler::Name_);
  message.set_method_name("GetFeedProcessScopeDump");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class PageHandler_GetFeedHistograms_ProxyToResponder {
 public:
  static PageHandler::GetFeedHistogramsCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<PageHandler_GetFeedHistograms_ProxyToResponder> proxy(
        new PageHandler_GetFeedHistograms_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&PageHandler_GetFeedHistograms_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~PageHandler_GetFeedHistograms_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  PageHandler_GetFeedHistograms_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "PageHandler::GetFeedHistogramsCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const std::string& in_log);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(PageHandler_GetFeedHistograms_ProxyToResponder);
};

bool PageHandler_GetFeedHistograms_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "feed_internals::mojom::PageHandler::GetFeedHistogramsCallback",
               "message", message->name());
#endif
  mojo::internal::MessageDispatchContext dispatch_context(message);

  DCHECK(message->is_serialized());
  internal::PageHandler_GetFeedHistograms_ResponseParams_Data* params =
      reinterpret_cast<
          internal::PageHandler_GetFeedHistograms_ResponseParams_Data*>(
              message->mutable_payload());
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  
  bool success = true;
  std::string p_log{};
  PageHandler_GetFeedHistograms_ResponseParamsDataView input_data_view(params, &serialization_context);
  
  if (success && !input_data_view.ReadLog(&p_log))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        PageHandler::Name_, 8, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_log));
  return true;
}

void PageHandler_GetFeedHistograms_ProxyToResponder::Run(
    const std::string& in_log) {
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kPageHandler_GetFeedHistograms_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::feed_internals::mojom::internal::PageHandler_GetFeedHistograms_ResponseParams_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->log)::BaseType::BufferWriter
      log_writer;
  mojo::internal::Serialize<mojo::StringDataView>(
      in_log, buffer, &log_writer, &serialization_context);
  params->log.Set(
      log_writer.is_null() ? nullptr : log_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->log.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null log in ");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "(Impl)feed_internals::mojom::PageHandler::GetFeedHistogramsCallback",
               "message", message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageHandler::Name_);
  message.set_method_name("GetFeedHistograms");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool PageHandlerStubDispatch::Accept(
    PageHandler* impl,
    mojo::Message* message) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  switch (message->header()->name) {
    case internal::kPageHandler_GetGeneralProperties_Name: {
      break;
    }
    case internal::kPageHandler_GetUserClassifierProperties_Name: {
      break;
    }
    case internal::kPageHandler_ClearUserClassifierProperties_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)feed_internals::mojom::PageHandler::ClearUserClassifierProperties",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)feed_internals::mojom::PageHandler::ClearUserClassifierProperties");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::PageHandler_ClearUserClassifierProperties_Params_Data* params =
          reinterpret_cast<internal::PageHandler_ClearUserClassifierProperties_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      PageHandler_ClearUserClassifierProperties_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PageHandler::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ClearUserClassifierProperties();
      return true;
    }
    case internal::kPageHandler_GetLastFetchProperties_Name: {
      break;
    }
    case internal::kPageHandler_ClearCachedDataAndRefreshFeed_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)feed_internals::mojom::PageHandler::ClearCachedDataAndRefreshFeed",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)feed_internals::mojom::PageHandler::ClearCachedDataAndRefreshFeed");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::PageHandler_ClearCachedDataAndRefreshFeed_Params_Data* params =
          reinterpret_cast<internal::PageHandler_ClearCachedDataAndRefreshFeed_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      PageHandler_ClearCachedDataAndRefreshFeed_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PageHandler::Name_, 4, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ClearCachedDataAndRefreshFeed();
      return true;
    }
    case internal::kPageHandler_RefreshFeed_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)feed_internals::mojom::PageHandler::RefreshFeed",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)feed_internals::mojom::PageHandler::RefreshFeed");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::PageHandler_RefreshFeed_Params_Data* params =
          reinterpret_cast<internal::PageHandler_RefreshFeed_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      PageHandler_RefreshFeed_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PageHandler::Name_, 5, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->RefreshFeed();
      return true;
    }
    case internal::kPageHandler_GetCurrentContent_Name: {
      break;
    }
    case internal::kPageHandler_GetFeedProcessScopeDump_Name: {
      break;
    }
    case internal::kPageHandler_GetFeedHistograms_Name: {
      break;
    }
    case internal::kPageHandler_OverrideFeedHost_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)feed_internals::mojom::PageHandler::OverrideFeedHost",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)feed_internals::mojom::PageHandler::OverrideFeedHost");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::PageHandler_OverrideFeedHost_Params_Data* params =
          reinterpret_cast<internal::PageHandler_OverrideFeedHost_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::GURL p_host{};
      PageHandler_OverrideFeedHost_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadHost(&p_host))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PageHandler::Name_, 9, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OverrideFeedHost(
std::move(p_host));
      return true;
    }
  }
  return false;
}

// static
bool PageHandlerStubDispatch::AcceptWithResponder(
    PageHandler* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kPageHandler_GetGeneralProperties_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)feed_internals::mojom::PageHandler::GetGeneralProperties",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)feed_internals::mojom::PageHandler::GetGeneralProperties");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::PageHandler_GetGeneralProperties_Params_Data* params =
          reinterpret_cast<
              internal::PageHandler_GetGeneralProperties_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      PageHandler_GetGeneralProperties_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PageHandler::Name_, 0, false);
        return false;
      }
      PageHandler::GetGeneralPropertiesCallback callback =
          PageHandler_GetGeneralProperties_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetGeneralProperties(std::move(callback));
      return true;
    }
    case internal::kPageHandler_GetUserClassifierProperties_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)feed_internals::mojom::PageHandler::GetUserClassifierProperties",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)feed_internals::mojom::PageHandler::GetUserClassifierProperties");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::PageHandler_GetUserClassifierProperties_Params_Data* params =
          reinterpret_cast<
              internal::PageHandler_GetUserClassifierProperties_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      PageHandler_GetUserClassifierProperties_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PageHandler::Name_, 1, false);
        return false;
      }
      PageHandler::GetUserClassifierPropertiesCallback callback =
          PageHandler_GetUserClassifierProperties_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetUserClassifierProperties(std::move(callback));
      return true;
    }
    case internal::kPageHandler_ClearUserClassifierProperties_Name: {
      break;
    }
    case internal::kPageHandler_GetLastFetchProperties_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)feed_internals::mojom::PageHandler::GetLastFetchProperties",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)feed_internals::mojom::PageHandler::GetLastFetchProperties");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::PageHandler_GetLastFetchProperties_Params_Data* params =
          reinterpret_cast<
              internal::PageHandler_GetLastFetchProperties_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      PageHandler_GetLastFetchProperties_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PageHandler::Name_, 3, false);
        return false;
      }
      PageHandler::GetLastFetchPropertiesCallback callback =
          PageHandler_GetLastFetchProperties_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetLastFetchProperties(std::move(callback));
      return true;
    }
    case internal::kPageHandler_ClearCachedDataAndRefreshFeed_Name: {
      break;
    }
    case internal::kPageHandler_RefreshFeed_Name: {
      break;
    }
    case internal::kPageHandler_GetCurrentContent_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)feed_internals::mojom::PageHandler::GetCurrentContent",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)feed_internals::mojom::PageHandler::GetCurrentContent");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::PageHandler_GetCurrentContent_Params_Data* params =
          reinterpret_cast<
              internal::PageHandler_GetCurrentContent_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      PageHandler_GetCurrentContent_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PageHandler::Name_, 6, false);
        return false;
      }
      PageHandler::GetCurrentContentCallback callback =
          PageHandler_GetCurrentContent_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetCurrentContent(std::move(callback));
      return true;
    }
    case internal::kPageHandler_GetFeedProcessScopeDump_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)feed_internals::mojom::PageHandler::GetFeedProcessScopeDump",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)feed_internals::mojom::PageHandler::GetFeedProcessScopeDump");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::PageHandler_GetFeedProcessScopeDump_Params_Data* params =
          reinterpret_cast<
              internal::PageHandler_GetFeedProcessScopeDump_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      PageHandler_GetFeedProcessScopeDump_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PageHandler::Name_, 7, false);
        return false;
      }
      PageHandler::GetFeedProcessScopeDumpCallback callback =
          PageHandler_GetFeedProcessScopeDump_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetFeedProcessScopeDump(std::move(callback));
      return true;
    }
    case internal::kPageHandler_GetFeedHistograms_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)feed_internals::mojom::PageHandler::GetFeedHistograms",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)feed_internals::mojom::PageHandler::GetFeedHistograms");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::PageHandler_GetFeedHistograms_Params_Data* params =
          reinterpret_cast<
              internal::PageHandler_GetFeedHistograms_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      PageHandler_GetFeedHistograms_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PageHandler::Name_, 8, false);
        return false;
      }
      PageHandler::GetFeedHistogramsCallback callback =
          PageHandler_GetFeedHistograms_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetFeedHistograms(std::move(callback));
      return true;
    }
    case internal::kPageHandler_OverrideFeedHost_Name: {
      break;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kPageHandlerValidationInfo[] = {
    {internal::kPageHandler_GetGeneralProperties_Name,
     {&internal::PageHandler_GetGeneralProperties_Params_Data::Validate,
      &internal::PageHandler_GetGeneralProperties_ResponseParams_Data::Validate}},
    {internal::kPageHandler_GetUserClassifierProperties_Name,
     {&internal::PageHandler_GetUserClassifierProperties_Params_Data::Validate,
      &internal::PageHandler_GetUserClassifierProperties_ResponseParams_Data::Validate}},
    {internal::kPageHandler_ClearUserClassifierProperties_Name,
     {&internal::PageHandler_ClearUserClassifierProperties_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kPageHandler_GetLastFetchProperties_Name,
     {&internal::PageHandler_GetLastFetchProperties_Params_Data::Validate,
      &internal::PageHandler_GetLastFetchProperties_ResponseParams_Data::Validate}},
    {internal::kPageHandler_ClearCachedDataAndRefreshFeed_Name,
     {&internal::PageHandler_ClearCachedDataAndRefreshFeed_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kPageHandler_RefreshFeed_Name,
     {&internal::PageHandler_RefreshFeed_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kPageHandler_GetCurrentContent_Name,
     {&internal::PageHandler_GetCurrentContent_Params_Data::Validate,
      &internal::PageHandler_GetCurrentContent_ResponseParams_Data::Validate}},
    {internal::kPageHandler_GetFeedProcessScopeDump_Name,
     {&internal::PageHandler_GetFeedProcessScopeDump_Params_Data::Validate,
      &internal::PageHandler_GetFeedProcessScopeDump_ResponseParams_Data::Validate}},
    {internal::kPageHandler_GetFeedHistograms_Name,
     {&internal::PageHandler_GetFeedHistograms_Params_Data::Validate,
      &internal::PageHandler_GetFeedHistograms_ResponseParams_Data::Validate}},
    {internal::kPageHandler_OverrideFeedHost_Name,
     {&internal::PageHandler_OverrideFeedHost_Params_Data::Validate,
      nullptr /* no response */}},
};

bool PageHandlerRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::feed_internals::mojom::PageHandler::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kPageHandlerValidationInfo);
}

bool PageHandlerResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::feed_internals::mojom::PageHandler::Name_;
  return mojo::internal::ValidateResponseGeneric(message, name, kPageHandlerValidationInfo);

}
}  // namespace mojom
}  // namespace feed_internals

namespace mojo {


// static
bool StructTraits<::feed_internals::mojom::Properties::DataView, ::feed_internals::mojom::PropertiesPtr>::Read(
    ::feed_internals::mojom::Properties::DataView input,
    ::feed_internals::mojom::PropertiesPtr* output) {
  bool success = true;
  ::feed_internals::mojom::PropertiesPtr result(::feed_internals::mojom::Properties::New());
  
      if (success)
        result->is_feed_enabled = input.is_feed_enabled();
      if (success)
        result->is_feed_visible = input.is_feed_visible();
      if (success)
        result->is_feed_allowed = input.is_feed_allowed();
      if (success)
        result->is_prefetching_enabled = input.is_prefetching_enabled();
      if (success && !input.ReadLoadStreamStatus(&result->load_stream_status))
        success = false;
      if (success && !input.ReadFeedFetchUrl(&result->feed_fetch_url))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::feed_internals::mojom::UserClassifier::DataView, ::feed_internals::mojom::UserClassifierPtr>::Read(
    ::feed_internals::mojom::UserClassifier::DataView input,
    ::feed_internals::mojom::UserClassifierPtr* output) {
  bool success = true;
  ::feed_internals::mojom::UserClassifierPtr result(::feed_internals::mojom::UserClassifier::New());
  
      if (success && !input.ReadUserClassDescription(&result->user_class_description))
        success = false;
      if (success)
        result->avg_hours_between_views = input.avg_hours_between_views();
      if (success)
        result->avg_hours_between_uses = input.avg_hours_between_uses();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::feed_internals::mojom::LastFetchProperties::DataView, ::feed_internals::mojom::LastFetchPropertiesPtr>::Read(
    ::feed_internals::mojom::LastFetchProperties::DataView input,
    ::feed_internals::mojom::LastFetchPropertiesPtr* output) {
  bool success = true;
  ::feed_internals::mojom::LastFetchPropertiesPtr result(::feed_internals::mojom::LastFetchProperties::New());
  
      if (success)
        result->last_fetch_status = input.last_fetch_status();
      if (success && !input.ReadLastFetchTrigger(&result->last_fetch_trigger))
        success = false;
      if (success && !input.ReadLastFetchTime(&result->last_fetch_time))
        success = false;
      if (success && !input.ReadRefreshSuppressTime(&result->refresh_suppress_time))
        success = false;
      if (success && !input.ReadLastBlessNonce(&result->last_bless_nonce))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::feed_internals::mojom::Suggestion::DataView, ::feed_internals::mojom::SuggestionPtr>::Read(
    ::feed_internals::mojom::Suggestion::DataView input,
    ::feed_internals::mojom::SuggestionPtr* output) {
  bool success = true;
  ::feed_internals::mojom::SuggestionPtr result(::feed_internals::mojom::Suggestion::New());
  
      if (success && !input.ReadTitle(&result->title))
        success = false;
      if (success && !input.ReadUrl(&result->url))
        success = false;
      if (success && !input.ReadPublisherName(&result->publisher_name))
        success = false;
      if (success && !input.ReadImageUrl(&result->image_url))
        success = false;
      if (success && !input.ReadFaviconUrl(&result->favicon_url))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
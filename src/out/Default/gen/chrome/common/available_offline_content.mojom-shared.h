// chrome/common/available_offline_content.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_COMMON_AVAILABLE_OFFLINE_CONTENT_MOJOM_SHARED_H_
#define CHROME_COMMON_AVAILABLE_OFFLINE_CONTENT_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "chrome/common/available_offline_content.mojom-shared-internal.h"
#include "url/mojom/url.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace chrome {
namespace mojom {
class AvailableOfflineContentDataView;



}  // namespace mojom
}  // namespace chrome

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::chrome::mojom::AvailableOfflineContentDataView> {
  using Data = ::chrome::mojom::internal::AvailableOfflineContent_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace chrome {
namespace mojom {


enum class AvailableContentType : int32_t {
  
  kPrefetchedPage = 0,
  
  kVideo = 1,
  
  kAudio = 2,
  
  kOtherPage = 3,
  
  kUninteresting = 4,
  kMinValue = 0,
  kMaxValue = 4,
};

 std::ostream& operator<<(std::ostream& os, AvailableContentType value);
inline bool IsKnownEnumValue(AvailableContentType value) {
  return internal::AvailableContentType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class AvailableOfflineContentProviderInterfaceBase {};

using AvailableOfflineContentProviderPtrDataView =
    mojo::InterfacePtrDataView<AvailableOfflineContentProviderInterfaceBase>;
using AvailableOfflineContentProviderRequestDataView =
    mojo::InterfaceRequestDataView<AvailableOfflineContentProviderInterfaceBase>;
using AvailableOfflineContentProviderAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<AvailableOfflineContentProviderInterfaceBase>;
using AvailableOfflineContentProviderAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<AvailableOfflineContentProviderInterfaceBase>;
class AvailableOfflineContentDataView {
 public:
  AvailableOfflineContentDataView() {}

  AvailableOfflineContentDataView(
      internal::AvailableOfflineContent_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadId(UserType* output) {
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetNameSpaceDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadNameSpace(UserType* output) {
    auto* pointer = data_->name_space.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetTitleDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTitle(UserType* output) {
    auto* pointer = data_->title.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetSnippetDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSnippet(UserType* output) {
    auto* pointer = data_->snippet.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetDateModifiedDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDateModified(UserType* output) {
    auto* pointer = data_->date_modified.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetAttributionDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAttribution(UserType* output) {
    auto* pointer = data_->attribution.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetThumbnailDataUriDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadThumbnailDataUri(UserType* output) {
    auto* pointer = data_->thumbnail_data_uri.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  inline void GetFaviconDataUriDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFaviconDataUri(UserType* output) {
    auto* pointer = data_->favicon_data_uri.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadContentType(UserType* output) const {
    auto data_value = data_->content_type;
    return mojo::internal::Deserialize<::chrome::mojom::AvailableContentType>(
        data_value, output);
  }

  AvailableContentType content_type() const {
    return static_cast<AvailableContentType>(data_->content_type);
  }
 private:
  internal::AvailableOfflineContent_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};



}  // namespace mojom
}  // namespace chrome

namespace std {

template <>
struct hash<::chrome::mojom::AvailableContentType>
    : public mojo::internal::EnumHashImpl<::chrome::mojom::AvailableContentType> {};

}  // namespace std

namespace mojo {


template <>
struct EnumTraits<::chrome::mojom::AvailableContentType, ::chrome::mojom::AvailableContentType> {
  static ::chrome::mojom::AvailableContentType ToMojom(::chrome::mojom::AvailableContentType input) { return input; }
  static bool FromMojom(::chrome::mojom::AvailableContentType input, ::chrome::mojom::AvailableContentType* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::chrome::mojom::AvailableContentType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::chrome::mojom::AvailableContentType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::chrome::mojom::AvailableContentType>(input), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::chrome::mojom::AvailableOfflineContentDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::chrome::mojom::AvailableOfflineContentDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::chrome::mojom::internal::AvailableOfflineContent_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::id(input)) in_id = Traits::id(input);
    typename decltype((*output)->id)::BaseType::BufferWriter
        id_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_id, buffer, &id_writer, context);
    (*output)->id.Set(
        id_writer.is_null() ? nullptr : id_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null id in AvailableOfflineContent struct");
    decltype(Traits::name_space(input)) in_name_space = Traits::name_space(input);
    typename decltype((*output)->name_space)::BaseType::BufferWriter
        name_space_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_name_space, buffer, &name_space_writer, context);
    (*output)->name_space.Set(
        name_space_writer.is_null() ? nullptr : name_space_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->name_space.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null name_space in AvailableOfflineContent struct");
    decltype(Traits::title(input)) in_title = Traits::title(input);
    typename decltype((*output)->title)::BaseType::BufferWriter
        title_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_title, buffer, &title_writer, context);
    (*output)->title.Set(
        title_writer.is_null() ? nullptr : title_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->title.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null title in AvailableOfflineContent struct");
    decltype(Traits::snippet(input)) in_snippet = Traits::snippet(input);
    typename decltype((*output)->snippet)::BaseType::BufferWriter
        snippet_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_snippet, buffer, &snippet_writer, context);
    (*output)->snippet.Set(
        snippet_writer.is_null() ? nullptr : snippet_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->snippet.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null snippet in AvailableOfflineContent struct");
    decltype(Traits::date_modified(input)) in_date_modified = Traits::date_modified(input);
    typename decltype((*output)->date_modified)::BaseType::BufferWriter
        date_modified_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_date_modified, buffer, &date_modified_writer, context);
    (*output)->date_modified.Set(
        date_modified_writer.is_null() ? nullptr : date_modified_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->date_modified.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null date_modified in AvailableOfflineContent struct");
    decltype(Traits::attribution(input)) in_attribution = Traits::attribution(input);
    typename decltype((*output)->attribution)::BaseType::BufferWriter
        attribution_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_attribution, buffer, &attribution_writer, context);
    (*output)->attribution.Set(
        attribution_writer.is_null() ? nullptr : attribution_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->attribution.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null attribution in AvailableOfflineContent struct");
    decltype(Traits::thumbnail_data_uri(input)) in_thumbnail_data_uri = Traits::thumbnail_data_uri(input);
    typename decltype((*output)->thumbnail_data_uri)::BaseType::BufferWriter
        thumbnail_data_uri_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_thumbnail_data_uri, buffer, &thumbnail_data_uri_writer, context);
    (*output)->thumbnail_data_uri.Set(
        thumbnail_data_uri_writer.is_null() ? nullptr : thumbnail_data_uri_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->thumbnail_data_uri.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null thumbnail_data_uri in AvailableOfflineContent struct");
    decltype(Traits::favicon_data_uri(input)) in_favicon_data_uri = Traits::favicon_data_uri(input);
    typename decltype((*output)->favicon_data_uri)::BaseType::BufferWriter
        favicon_data_uri_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_favicon_data_uri, buffer, &favicon_data_uri_writer, context);
    (*output)->favicon_data_uri.Set(
        favicon_data_uri_writer.is_null() ? nullptr : favicon_data_uri_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->favicon_data_uri.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null favicon_data_uri in AvailableOfflineContent struct");
    mojo::internal::Serialize<::chrome::mojom::AvailableContentType>(
        Traits::content_type(input), &(*output)->content_type);
  }

  static bool Deserialize(::chrome::mojom::internal::AvailableOfflineContent_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::chrome::mojom::AvailableOfflineContentDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace chrome {
namespace mojom {

inline void AvailableOfflineContentDataView::GetIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->id.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void AvailableOfflineContentDataView::GetNameSpaceDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->name_space.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void AvailableOfflineContentDataView::GetTitleDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->title.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void AvailableOfflineContentDataView::GetSnippetDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->snippet.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void AvailableOfflineContentDataView::GetDateModifiedDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->date_modified.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void AvailableOfflineContentDataView::GetAttributionDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->attribution.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void AvailableOfflineContentDataView::GetThumbnailDataUriDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->thumbnail_data_uri.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void AvailableOfflineContentDataView::GetFaviconDataUriDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->favicon_data_uri.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}



}  // namespace mojom
}  // namespace chrome

#endif  // CHROME_COMMON_AVAILABLE_OFFLINE_CONTENT_MOJOM_SHARED_H_
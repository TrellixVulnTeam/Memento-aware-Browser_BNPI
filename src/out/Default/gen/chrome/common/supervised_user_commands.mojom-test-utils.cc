// chrome/common/supervised_user_commands.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "chrome/common/supervised_user_commands.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"


#ifndef CHROME_COMMON_SUPERVISED_USER_COMMANDS_MOJOM_JUMBO_H_
#define CHROME_COMMON_SUPERVISED_USER_COMMANDS_MOJOM_JUMBO_H_
#endif


namespace supervised_user {
namespace mojom {


void SupervisedUserCommandsInterceptorForTesting::GoBack() {
  GetForwardingInterface()->GoBack();
}
void SupervisedUserCommandsInterceptorForTesting::RequestPermission(RequestPermissionCallback callback) {
  GetForwardingInterface()->RequestPermission(std::move(callback));
}
void SupervisedUserCommandsInterceptorForTesting::Feedback() {
  GetForwardingInterface()->Feedback();
}
SupervisedUserCommandsAsyncWaiter::SupervisedUserCommandsAsyncWaiter(
    SupervisedUserCommands* proxy) : proxy_(proxy) {}

SupervisedUserCommandsAsyncWaiter::~SupervisedUserCommandsAsyncWaiter() = default;

void SupervisedUserCommandsAsyncWaiter::RequestPermission(
    bool* out_success) {
  base::RunLoop loop;
  proxy_->RequestPermission(
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             bool success) {*out_success = std::move(success);
            loop->Quit();
          },
          &loop,
          out_success));
  loop.Run();
}





}  // namespace mojom
}  // namespace supervised_user

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
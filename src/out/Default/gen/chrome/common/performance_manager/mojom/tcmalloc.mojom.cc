// chrome/common/performance_manager/mojom/tcmalloc.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "chrome/common/performance_manager/mojom/tcmalloc.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "chrome/common/performance_manager/mojom/tcmalloc.mojom-params-data.h"
#include "chrome/common/performance_manager/mojom/tcmalloc.mojom-shared-message-ids.h"

#include "chrome/common/performance_manager/mojom/tcmalloc.mojom-import-headers.h"


#ifndef CHROME_COMMON_PERFORMANCE_MANAGER_MOJOM_TCMALLOC_MOJOM_JUMBO_H_
#define CHROME_COMMON_PERFORMANCE_MANAGER_MOJOM_TCMALLOC_MOJOM_JUMBO_H_
#endif
namespace tcmalloc {
namespace mojom {
const char TcmallocTunables::Name_[] = "tcmalloc.mojom.TcmallocTunables";

TcmallocTunablesProxy::TcmallocTunablesProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void TcmallocTunablesProxy::SetMaxTotalThreadCacheBytes(
    uint32_t in_size_bytes) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "tcmalloc::mojom::TcmallocTunables::SetMaxTotalThreadCacheBytes");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kTcmallocTunables_SetMaxTotalThreadCacheBytes_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::tcmalloc::mojom::internal::TcmallocTunables_SetMaxTotalThreadCacheBytes_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  params->size_bytes = in_size_bytes;
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(TcmallocTunables::Name_);
  message.set_method_name("SetMaxTotalThreadCacheBytes");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool TcmallocTunablesStubDispatch::Accept(
    TcmallocTunables* impl,
    mojo::Message* message) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  switch (message->header()->name) {
    case internal::kTcmallocTunables_SetMaxTotalThreadCacheBytes_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)tcmalloc::mojom::TcmallocTunables::SetMaxTotalThreadCacheBytes",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)tcmalloc::mojom::TcmallocTunables::SetMaxTotalThreadCacheBytes");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::TcmallocTunables_SetMaxTotalThreadCacheBytes_Params_Data* params =
          reinterpret_cast<internal::TcmallocTunables_SetMaxTotalThreadCacheBytes_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      uint32_t p_size_bytes{};
      TcmallocTunables_SetMaxTotalThreadCacheBytes_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success)
        p_size_bytes = input_data_view.size_bytes();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            TcmallocTunables::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetMaxTotalThreadCacheBytes(
std::move(p_size_bytes));
      return true;
    }
  }
  return false;
}

// static
bool TcmallocTunablesStubDispatch::AcceptWithResponder(
    TcmallocTunables* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kTcmallocTunables_SetMaxTotalThreadCacheBytes_Name: {
      break;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kTcmallocTunablesValidationInfo[] = {
    {internal::kTcmallocTunables_SetMaxTotalThreadCacheBytes_Name,
     {&internal::TcmallocTunables_SetMaxTotalThreadCacheBytes_Params_Data::Validate,
      nullptr /* no response */}},
};

bool TcmallocTunablesRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::tcmalloc::mojom::TcmallocTunables::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kTcmallocTunablesValidationInfo);
}

}  // namespace mojom
}  // namespace tcmalloc

namespace mojo {

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
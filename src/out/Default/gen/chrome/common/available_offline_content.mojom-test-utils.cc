// chrome/common/available_offline_content.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "chrome/common/available_offline_content.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "url/mojom/url.mojom.h"


#ifndef CHROME_COMMON_AVAILABLE_OFFLINE_CONTENT_MOJOM_JUMBO_H_
#define CHROME_COMMON_AVAILABLE_OFFLINE_CONTENT_MOJOM_JUMBO_H_
#endif


namespace chrome {
namespace mojom {


void AvailableOfflineContentProviderInterceptorForTesting::List(ListCallback callback) {
  GetForwardingInterface()->List(std::move(callback));
}
void AvailableOfflineContentProviderInterceptorForTesting::LaunchItem(const std::string& item_id, const std::string& name_space) {
  GetForwardingInterface()->LaunchItem(std::move(item_id), std::move(name_space));
}
void AvailableOfflineContentProviderInterceptorForTesting::LaunchDownloadsPage(bool open_prefetched_articles_tab) {
  GetForwardingInterface()->LaunchDownloadsPage(std::move(open_prefetched_articles_tab));
}
void AvailableOfflineContentProviderInterceptorForTesting::ListVisibilityChanged(bool is_visible) {
  GetForwardingInterface()->ListVisibilityChanged(std::move(is_visible));
}
AvailableOfflineContentProviderAsyncWaiter::AvailableOfflineContentProviderAsyncWaiter(
    AvailableOfflineContentProvider* proxy) : proxy_(proxy) {}

AvailableOfflineContentProviderAsyncWaiter::~AvailableOfflineContentProviderAsyncWaiter() = default;

void AvailableOfflineContentProviderAsyncWaiter::List(
    bool* out_list_visible_by_prefs, std::vector<AvailableOfflineContentPtr>* out_out) {
  base::RunLoop loop;
  proxy_->List(
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_list_visible_by_prefs
,
             std::vector<AvailableOfflineContentPtr>* out_out
,
             bool list_visible_by_prefs,
             std::vector<AvailableOfflineContentPtr> out) {*out_list_visible_by_prefs = std::move(list_visible_by_prefs);*out_out = std::move(out);
            loop->Quit();
          },
          &loop,
          out_list_visible_by_prefs,
          out_out));
  loop.Run();
}





}  // namespace mojom
}  // namespace chrome

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
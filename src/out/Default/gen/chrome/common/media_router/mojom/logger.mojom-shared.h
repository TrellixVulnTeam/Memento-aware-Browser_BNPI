// chrome/common/media_router/mojom/logger.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_COMMON_MEDIA_ROUTER_MOJOM_LOGGER_MOJOM_SHARED_H_
#define CHROME_COMMON_MEDIA_ROUTER_MOJOM_LOGGER_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "chrome/common/media_router/mojom/logger.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace media_router {
namespace mojom {


}  // namespace mojom
}  // namespace media_router

namespace mojo {
namespace internal {

}  // namespace internal
}  // namespace mojo


namespace media_router {
namespace mojom {


enum class LogCategory : int32_t {
  
  kDiscovery = 0,
  
  kRoute = 1,
  
  kMirroring = 2,
  
  kUi = 3,
  kMinValue = 0,
  kMaxValue = 3,
};

 std::ostream& operator<<(std::ostream& os, LogCategory value);
inline bool IsKnownEnumValue(LogCategory value) {
  return internal::LogCategory_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class LoggerInterfaceBase {};

using LoggerPtrDataView =
    mojo::InterfacePtrDataView<LoggerInterfaceBase>;
using LoggerRequestDataView =
    mojo::InterfaceRequestDataView<LoggerInterfaceBase>;
using LoggerAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<LoggerInterfaceBase>;
using LoggerAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<LoggerInterfaceBase>;


}  // namespace mojom
}  // namespace media_router

namespace std {

template <>
struct hash<::media_router::mojom::LogCategory>
    : public mojo::internal::EnumHashImpl<::media_router::mojom::LogCategory> {};

}  // namespace std

namespace mojo {


template <>
struct EnumTraits<::media_router::mojom::LogCategory, ::media_router::mojom::LogCategory> {
  static ::media_router::mojom::LogCategory ToMojom(::media_router::mojom::LogCategory input) { return input; }
  static bool FromMojom(::media_router::mojom::LogCategory input, ::media_router::mojom::LogCategory* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::media_router::mojom::LogCategory, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::media_router::mojom::LogCategory, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::media_router::mojom::LogCategory>(input), output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace media_router {
namespace mojom {


}  // namespace mojom
}  // namespace media_router

#endif  // CHROME_COMMON_MEDIA_ROUTER_MOJOM_LOGGER_MOJOM_SHARED_H_
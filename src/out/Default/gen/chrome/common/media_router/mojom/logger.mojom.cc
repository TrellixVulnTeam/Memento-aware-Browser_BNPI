// chrome/common/media_router/mojom/logger.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "chrome/common/media_router/mojom/logger.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "chrome/common/media_router/mojom/logger.mojom-params-data.h"
#include "chrome/common/media_router/mojom/logger.mojom-shared-message-ids.h"

#include "chrome/common/media_router/mojom/logger.mojom-import-headers.h"


#ifndef CHROME_COMMON_MEDIA_ROUTER_MOJOM_LOGGER_MOJOM_JUMBO_H_
#define CHROME_COMMON_MEDIA_ROUTER_MOJOM_LOGGER_MOJOM_JUMBO_H_
#endif
namespace media_router {
namespace mojom {
const char Logger::Name_[] = "media_router.mojom.Logger";

LoggerProxy::LoggerProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void LoggerProxy::LogInfo(
    LogCategory in_category, const std::string& in_component, const std::string& in_message, const std::string& in_sink_id, const std::string& in_media_source, const std::string& in_session_id) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "media_router::mojom::Logger::LogInfo");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kLogger_LogInfo_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::media_router::mojom::internal::Logger_LogInfo_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  mojo::internal::Serialize<::media_router::mojom::LogCategory>(
      in_category, &params->category);
  typename decltype(params->component)::BaseType::BufferWriter
      component_writer;
  mojo::internal::Serialize<mojo::StringDataView>(
      in_component, buffer, &component_writer, &serialization_context);
  params->component.Set(
      component_writer.is_null() ? nullptr : component_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->component.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null component in Logger.LogInfo request");
  typename decltype(params->message)::BaseType::BufferWriter
      message_writer;
  mojo::internal::Serialize<mojo::StringDataView>(
      in_message, buffer, &message_writer, &serialization_context);
  params->message.Set(
      message_writer.is_null() ? nullptr : message_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->message.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null message in Logger.LogInfo request");
  typename decltype(params->sink_id)::BaseType::BufferWriter
      sink_id_writer;
  mojo::internal::Serialize<mojo::StringDataView>(
      in_sink_id, buffer, &sink_id_writer, &serialization_context);
  params->sink_id.Set(
      sink_id_writer.is_null() ? nullptr : sink_id_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->sink_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null sink_id in Logger.LogInfo request");
  typename decltype(params->media_source)::BaseType::BufferWriter
      media_source_writer;
  mojo::internal::Serialize<mojo::StringDataView>(
      in_media_source, buffer, &media_source_writer, &serialization_context);
  params->media_source.Set(
      media_source_writer.is_null() ? nullptr : media_source_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->media_source.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null media_source in Logger.LogInfo request");
  typename decltype(params->session_id)::BaseType::BufferWriter
      session_id_writer;
  mojo::internal::Serialize<mojo::StringDataView>(
      in_session_id, buffer, &session_id_writer, &serialization_context);
  params->session_id.Set(
      session_id_writer.is_null() ? nullptr : session_id_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->session_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null session_id in Logger.LogInfo request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Logger::Name_);
  message.set_method_name("LogInfo");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void LoggerProxy::LogWarning(
    LogCategory in_category, const std::string& in_component, const std::string& in_message, const std::string& in_sink_id, const std::string& in_media_source, const std::string& in_session_id) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "media_router::mojom::Logger::LogWarning");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kLogger_LogWarning_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::media_router::mojom::internal::Logger_LogWarning_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  mojo::internal::Serialize<::media_router::mojom::LogCategory>(
      in_category, &params->category);
  typename decltype(params->component)::BaseType::BufferWriter
      component_writer;
  mojo::internal::Serialize<mojo::StringDataView>(
      in_component, buffer, &component_writer, &serialization_context);
  params->component.Set(
      component_writer.is_null() ? nullptr : component_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->component.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null component in Logger.LogWarning request");
  typename decltype(params->message)::BaseType::BufferWriter
      message_writer;
  mojo::internal::Serialize<mojo::StringDataView>(
      in_message, buffer, &message_writer, &serialization_context);
  params->message.Set(
      message_writer.is_null() ? nullptr : message_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->message.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null message in Logger.LogWarning request");
  typename decltype(params->sink_id)::BaseType::BufferWriter
      sink_id_writer;
  mojo::internal::Serialize<mojo::StringDataView>(
      in_sink_id, buffer, &sink_id_writer, &serialization_context);
  params->sink_id.Set(
      sink_id_writer.is_null() ? nullptr : sink_id_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->sink_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null sink_id in Logger.LogWarning request");
  typename decltype(params->media_source)::BaseType::BufferWriter
      media_source_writer;
  mojo::internal::Serialize<mojo::StringDataView>(
      in_media_source, buffer, &media_source_writer, &serialization_context);
  params->media_source.Set(
      media_source_writer.is_null() ? nullptr : media_source_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->media_source.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null media_source in Logger.LogWarning request");
  typename decltype(params->session_id)::BaseType::BufferWriter
      session_id_writer;
  mojo::internal::Serialize<mojo::StringDataView>(
      in_session_id, buffer, &session_id_writer, &serialization_context);
  params->session_id.Set(
      session_id_writer.is_null() ? nullptr : session_id_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->session_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null session_id in Logger.LogWarning request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Logger::Name_);
  message.set_method_name("LogWarning");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

void LoggerProxy::LogError(
    LogCategory in_category, const std::string& in_component, const std::string& in_message, const std::string& in_sink_id, const std::string& in_media_source, const std::string& in_session_id) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "media_router::mojom::Logger::LogError");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kLogger_LogError_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::media_router::mojom::internal::Logger_LogError_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  mojo::internal::Serialize<::media_router::mojom::LogCategory>(
      in_category, &params->category);
  typename decltype(params->component)::BaseType::BufferWriter
      component_writer;
  mojo::internal::Serialize<mojo::StringDataView>(
      in_component, buffer, &component_writer, &serialization_context);
  params->component.Set(
      component_writer.is_null() ? nullptr : component_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->component.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null component in Logger.LogError request");
  typename decltype(params->message)::BaseType::BufferWriter
      message_writer;
  mojo::internal::Serialize<mojo::StringDataView>(
      in_message, buffer, &message_writer, &serialization_context);
  params->message.Set(
      message_writer.is_null() ? nullptr : message_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->message.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null message in Logger.LogError request");
  typename decltype(params->sink_id)::BaseType::BufferWriter
      sink_id_writer;
  mojo::internal::Serialize<mojo::StringDataView>(
      in_sink_id, buffer, &sink_id_writer, &serialization_context);
  params->sink_id.Set(
      sink_id_writer.is_null() ? nullptr : sink_id_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->sink_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null sink_id in Logger.LogError request");
  typename decltype(params->media_source)::BaseType::BufferWriter
      media_source_writer;
  mojo::internal::Serialize<mojo::StringDataView>(
      in_media_source, buffer, &media_source_writer, &serialization_context);
  params->media_source.Set(
      media_source_writer.is_null() ? nullptr : media_source_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->media_source.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null media_source in Logger.LogError request");
  typename decltype(params->session_id)::BaseType::BufferWriter
      session_id_writer;
  mojo::internal::Serialize<mojo::StringDataView>(
      in_session_id, buffer, &session_id_writer, &serialization_context);
  params->session_id.Set(
      session_id_writer.is_null() ? nullptr : session_id_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->session_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null session_id in Logger.LogError request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Logger::Name_);
  message.set_method_name("LogError");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool LoggerStubDispatch::Accept(
    Logger* impl,
    mojo::Message* message) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  switch (message->header()->name) {
    case internal::kLogger_LogInfo_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)media_router::mojom::Logger::LogInfo",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)media_router::mojom::Logger::LogInfo");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::Logger_LogInfo_Params_Data* params =
          reinterpret_cast<internal::Logger_LogInfo_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      LogCategory p_category{};
      std::string p_component{};
      std::string p_message{};
      std::string p_sink_id{};
      std::string p_media_source{};
      std::string p_session_id{};
      Logger_LogInfo_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadCategory(&p_category))
        success = false;
      if (success && !input_data_view.ReadComponent(&p_component))
        success = false;
      if (success && !input_data_view.ReadMessage(&p_message))
        success = false;
      if (success && !input_data_view.ReadSinkId(&p_sink_id))
        success = false;
      if (success && !input_data_view.ReadMediaSource(&p_media_source))
        success = false;
      if (success && !input_data_view.ReadSessionId(&p_session_id))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Logger::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->LogInfo(
std::move(p_category), 
std::move(p_component), 
std::move(p_message), 
std::move(p_sink_id), 
std::move(p_media_source), 
std::move(p_session_id));
      return true;
    }
    case internal::kLogger_LogWarning_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)media_router::mojom::Logger::LogWarning",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)media_router::mojom::Logger::LogWarning");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::Logger_LogWarning_Params_Data* params =
          reinterpret_cast<internal::Logger_LogWarning_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      LogCategory p_category{};
      std::string p_component{};
      std::string p_message{};
      std::string p_sink_id{};
      std::string p_media_source{};
      std::string p_session_id{};
      Logger_LogWarning_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadCategory(&p_category))
        success = false;
      if (success && !input_data_view.ReadComponent(&p_component))
        success = false;
      if (success && !input_data_view.ReadMessage(&p_message))
        success = false;
      if (success && !input_data_view.ReadSinkId(&p_sink_id))
        success = false;
      if (success && !input_data_view.ReadMediaSource(&p_media_source))
        success = false;
      if (success && !input_data_view.ReadSessionId(&p_session_id))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Logger::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->LogWarning(
std::move(p_category), 
std::move(p_component), 
std::move(p_message), 
std::move(p_sink_id), 
std::move(p_media_source), 
std::move(p_session_id));
      return true;
    }
    case internal::kLogger_LogError_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)media_router::mojom::Logger::LogError",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)media_router::mojom::Logger::LogError");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::Logger_LogError_Params_Data* params =
          reinterpret_cast<internal::Logger_LogError_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      LogCategory p_category{};
      std::string p_component{};
      std::string p_message{};
      std::string p_sink_id{};
      std::string p_media_source{};
      std::string p_session_id{};
      Logger_LogError_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadCategory(&p_category))
        success = false;
      if (success && !input_data_view.ReadComponent(&p_component))
        success = false;
      if (success && !input_data_view.ReadMessage(&p_message))
        success = false;
      if (success && !input_data_view.ReadSinkId(&p_sink_id))
        success = false;
      if (success && !input_data_view.ReadMediaSource(&p_media_source))
        success = false;
      if (success && !input_data_view.ReadSessionId(&p_session_id))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Logger::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->LogError(
std::move(p_category), 
std::move(p_component), 
std::move(p_message), 
std::move(p_sink_id), 
std::move(p_media_source), 
std::move(p_session_id));
      return true;
    }
  }
  return false;
}

// static
bool LoggerStubDispatch::AcceptWithResponder(
    Logger* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kLogger_LogInfo_Name: {
      break;
    }
    case internal::kLogger_LogWarning_Name: {
      break;
    }
    case internal::kLogger_LogError_Name: {
      break;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kLoggerValidationInfo[] = {
    {internal::kLogger_LogInfo_Name,
     {&internal::Logger_LogInfo_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kLogger_LogWarning_Name,
     {&internal::Logger_LogWarning_Params_Data::Validate,
      nullptr /* no response */}},
    {internal::kLogger_LogError_Name,
     {&internal::Logger_LogError_Params_Data::Validate,
      nullptr /* no response */}},
};

bool LoggerRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::media_router::mojom::Logger::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kLoggerValidationInfo);
}

}  // namespace mojom
}  // namespace media_router

namespace mojo {

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
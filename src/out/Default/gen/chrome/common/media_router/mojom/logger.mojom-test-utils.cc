// chrome/common/media_router/mojom/logger.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "chrome/common/media_router/mojom/logger.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/mojom/base/time.mojom.h"


#ifndef CHROME_COMMON_MEDIA_ROUTER_MOJOM_LOGGER_MOJOM_JUMBO_H_
#define CHROME_COMMON_MEDIA_ROUTER_MOJOM_LOGGER_MOJOM_JUMBO_H_
#endif


namespace media_router {
namespace mojom {


void LoggerInterceptorForTesting::LogInfo(LogCategory category, const std::string& component, const std::string& message, const std::string& sink_id, const std::string& media_source, const std::string& session_id) {
  GetForwardingInterface()->LogInfo(std::move(category), std::move(component), std::move(message), std::move(sink_id), std::move(media_source), std::move(session_id));
}
void LoggerInterceptorForTesting::LogWarning(LogCategory category, const std::string& component, const std::string& message, const std::string& sink_id, const std::string& media_source, const std::string& session_id) {
  GetForwardingInterface()->LogWarning(std::move(category), std::move(component), std::move(message), std::move(sink_id), std::move(media_source), std::move(session_id));
}
void LoggerInterceptorForTesting::LogError(LogCategory category, const std::string& component, const std::string& message, const std::string& sink_id, const std::string& media_source, const std::string& session_id) {
  GetForwardingInterface()->LogError(std::move(category), std::move(component), std::move(message), std::move(sink_id), std::move(media_source), std::move(session_id));
}
LoggerAsyncWaiter::LoggerAsyncWaiter(
    Logger* proxy) : proxy_(proxy) {}

LoggerAsyncWaiter::~LoggerAsyncWaiter() = default;






}  // namespace mojom
}  // namespace media_router

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
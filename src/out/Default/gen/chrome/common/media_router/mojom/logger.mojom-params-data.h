// chrome/common/media_router/mojom/logger.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_COMMON_MEDIA_ROUTER_MOJOM_LOGGER_MOJOM_PARAMS_DATA_H_
#define CHROME_COMMON_MEDIA_ROUTER_MOJOM_LOGGER_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace media_router {
namespace mojom {
namespace internal {
class  Logger_LogInfo_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Logger_LogInfo_Params_Data));
      new (data()) Logger_LogInfo_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Logger_LogInfo_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Logger_LogInfo_Params_Data>(index_);
    }
    Logger_LogInfo_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t category;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> component;
  mojo::internal::Pointer<mojo::internal::String_Data> message;
  mojo::internal::Pointer<mojo::internal::String_Data> sink_id;
  mojo::internal::Pointer<mojo::internal::String_Data> media_source;
  mojo::internal::Pointer<mojo::internal::String_Data> session_id;

 private:
  Logger_LogInfo_Params_Data();
  ~Logger_LogInfo_Params_Data() = delete;
};
static_assert(sizeof(Logger_LogInfo_Params_Data) == 56,
              "Bad sizeof(Logger_LogInfo_Params_Data)");
class  Logger_LogWarning_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Logger_LogWarning_Params_Data));
      new (data()) Logger_LogWarning_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Logger_LogWarning_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Logger_LogWarning_Params_Data>(index_);
    }
    Logger_LogWarning_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t category;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> component;
  mojo::internal::Pointer<mojo::internal::String_Data> message;
  mojo::internal::Pointer<mojo::internal::String_Data> sink_id;
  mojo::internal::Pointer<mojo::internal::String_Data> media_source;
  mojo::internal::Pointer<mojo::internal::String_Data> session_id;

 private:
  Logger_LogWarning_Params_Data();
  ~Logger_LogWarning_Params_Data() = delete;
};
static_assert(sizeof(Logger_LogWarning_Params_Data) == 56,
              "Bad sizeof(Logger_LogWarning_Params_Data)");
class  Logger_LogError_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Logger_LogError_Params_Data));
      new (data()) Logger_LogError_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Logger_LogError_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Logger_LogError_Params_Data>(index_);
    }
    Logger_LogError_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t category;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> component;
  mojo::internal::Pointer<mojo::internal::String_Data> message;
  mojo::internal::Pointer<mojo::internal::String_Data> sink_id;
  mojo::internal::Pointer<mojo::internal::String_Data> media_source;
  mojo::internal::Pointer<mojo::internal::String_Data> session_id;

 private:
  Logger_LogError_Params_Data();
  ~Logger_LogError_Params_Data() = delete;
};
static_assert(sizeof(Logger_LogError_Params_Data) == 56,
              "Bad sizeof(Logger_LogError_Params_Data)");

}  // namespace internal
class Logger_LogInfo_ParamsDataView {
 public:
  Logger_LogInfo_ParamsDataView() {}

  Logger_LogInfo_ParamsDataView(
      internal::Logger_LogInfo_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadCategory(UserType* output) const {
    auto data_value = data_->category;
    return mojo::internal::Deserialize<::media_router::mojom::LogCategory>(
        data_value, output);
  }

  LogCategory category() const {
    return static_cast<LogCategory>(data_->category);
  }
  inline void GetComponentDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadComponent(UserType* output) {
    auto* pointer = data_->component.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetMessageDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadMessage(UserType* output) {
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetSinkIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSinkId(UserType* output) {
    auto* pointer = data_->sink_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetMediaSourceDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadMediaSource(UserType* output) {
    auto* pointer = data_->media_source.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetSessionIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSessionId(UserType* output) {
    auto* pointer = data_->session_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::Logger_LogInfo_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class Logger_LogWarning_ParamsDataView {
 public:
  Logger_LogWarning_ParamsDataView() {}

  Logger_LogWarning_ParamsDataView(
      internal::Logger_LogWarning_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadCategory(UserType* output) const {
    auto data_value = data_->category;
    return mojo::internal::Deserialize<::media_router::mojom::LogCategory>(
        data_value, output);
  }

  LogCategory category() const {
    return static_cast<LogCategory>(data_->category);
  }
  inline void GetComponentDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadComponent(UserType* output) {
    auto* pointer = data_->component.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetMessageDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadMessage(UserType* output) {
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetSinkIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSinkId(UserType* output) {
    auto* pointer = data_->sink_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetMediaSourceDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadMediaSource(UserType* output) {
    auto* pointer = data_->media_source.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetSessionIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSessionId(UserType* output) {
    auto* pointer = data_->session_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::Logger_LogWarning_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class Logger_LogError_ParamsDataView {
 public:
  Logger_LogError_ParamsDataView() {}

  Logger_LogError_ParamsDataView(
      internal::Logger_LogError_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadCategory(UserType* output) const {
    auto data_value = data_->category;
    return mojo::internal::Deserialize<::media_router::mojom::LogCategory>(
        data_value, output);
  }

  LogCategory category() const {
    return static_cast<LogCategory>(data_->category);
  }
  inline void GetComponentDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadComponent(UserType* output) {
    auto* pointer = data_->component.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetMessageDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadMessage(UserType* output) {
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetSinkIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSinkId(UserType* output) {
    auto* pointer = data_->sink_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetMediaSourceDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadMediaSource(UserType* output) {
    auto* pointer = data_->media_source.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetSessionIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSessionId(UserType* output) {
    auto* pointer = data_->session_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::Logger_LogError_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};


inline void Logger_LogInfo_ParamsDataView::GetComponentDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->component.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void Logger_LogInfo_ParamsDataView::GetMessageDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->message.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void Logger_LogInfo_ParamsDataView::GetSinkIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->sink_id.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void Logger_LogInfo_ParamsDataView::GetMediaSourceDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->media_source.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void Logger_LogInfo_ParamsDataView::GetSessionIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->session_id.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void Logger_LogWarning_ParamsDataView::GetComponentDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->component.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void Logger_LogWarning_ParamsDataView::GetMessageDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->message.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void Logger_LogWarning_ParamsDataView::GetSinkIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->sink_id.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void Logger_LogWarning_ParamsDataView::GetMediaSourceDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->media_source.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void Logger_LogWarning_ParamsDataView::GetSessionIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->session_id.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void Logger_LogError_ParamsDataView::GetComponentDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->component.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void Logger_LogError_ParamsDataView::GetMessageDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->message.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void Logger_LogError_ParamsDataView::GetSinkIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->sink_id.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void Logger_LogError_ParamsDataView::GetMediaSourceDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->media_source.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void Logger_LogError_ParamsDataView::GetSessionIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->session_id.Get();
  *output = mojo::StringDataView(pointer, context_);
}

}  // namespace mojom
}  // namespace media_router

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CHROME_COMMON_MEDIA_ROUTER_MOJOM_LOGGER_MOJOM_PARAMS_DATA_H_
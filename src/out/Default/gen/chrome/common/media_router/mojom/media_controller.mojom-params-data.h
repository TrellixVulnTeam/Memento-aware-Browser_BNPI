// chrome/common/media_router/mojom/media_controller.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_COMMON_MEDIA_ROUTER_MOJOM_MEDIA_CONTROLLER_MOJOM_PARAMS_DATA_H_
#define CHROME_COMMON_MEDIA_ROUTER_MOJOM_MEDIA_CONTROLLER_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace media_router {
namespace mojom {
namespace internal {
class  MediaController_Play_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaController_Play_Params_Data));
      new (data()) MediaController_Play_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaController_Play_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaController_Play_Params_Data>(index_);
    }
    MediaController_Play_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  MediaController_Play_Params_Data();
  ~MediaController_Play_Params_Data() = delete;
};
static_assert(sizeof(MediaController_Play_Params_Data) == 8,
              "Bad sizeof(MediaController_Play_Params_Data)");
class  MediaController_Pause_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaController_Pause_Params_Data));
      new (data()) MediaController_Pause_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaController_Pause_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaController_Pause_Params_Data>(index_);
    }
    MediaController_Pause_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  MediaController_Pause_Params_Data();
  ~MediaController_Pause_Params_Data() = delete;
};
static_assert(sizeof(MediaController_Pause_Params_Data) == 8,
              "Bad sizeof(MediaController_Pause_Params_Data)");
class  MediaController_SetMute_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaController_SetMute_Params_Data));
      new (data()) MediaController_SetMute_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaController_SetMute_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaController_SetMute_Params_Data>(index_);
    }
    MediaController_SetMute_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t mute : 1;
  uint8_t padfinal_[7];

 private:
  MediaController_SetMute_Params_Data();
  ~MediaController_SetMute_Params_Data() = delete;
};
static_assert(sizeof(MediaController_SetMute_Params_Data) == 16,
              "Bad sizeof(MediaController_SetMute_Params_Data)");
class  MediaController_SetVolume_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaController_SetVolume_Params_Data));
      new (data()) MediaController_SetVolume_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaController_SetVolume_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaController_SetVolume_Params_Data>(index_);
    }
    MediaController_SetVolume_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  float volume;
  uint8_t padfinal_[4];

 private:
  MediaController_SetVolume_Params_Data();
  ~MediaController_SetVolume_Params_Data() = delete;
};
static_assert(sizeof(MediaController_SetVolume_Params_Data) == 16,
              "Bad sizeof(MediaController_SetVolume_Params_Data)");
class  MediaController_Seek_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaController_Seek_Params_Data));
      new (data()) MediaController_Seek_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaController_Seek_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaController_Seek_Params_Data>(index_);
    }
    MediaController_Seek_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> time;

 private:
  MediaController_Seek_Params_Data();
  ~MediaController_Seek_Params_Data() = delete;
};
static_assert(sizeof(MediaController_Seek_Params_Data) == 16,
              "Bad sizeof(MediaController_Seek_Params_Data)");
class  MediaController_NextTrack_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaController_NextTrack_Params_Data));
      new (data()) MediaController_NextTrack_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaController_NextTrack_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaController_NextTrack_Params_Data>(index_);
    }
    MediaController_NextTrack_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  MediaController_NextTrack_Params_Data();
  ~MediaController_NextTrack_Params_Data() = delete;
};
static_assert(sizeof(MediaController_NextTrack_Params_Data) == 8,
              "Bad sizeof(MediaController_NextTrack_Params_Data)");
class  MediaController_PreviousTrack_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MediaController_PreviousTrack_Params_Data));
      new (data()) MediaController_PreviousTrack_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MediaController_PreviousTrack_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MediaController_PreviousTrack_Params_Data>(index_);
    }
    MediaController_PreviousTrack_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  MediaController_PreviousTrack_Params_Data();
  ~MediaController_PreviousTrack_Params_Data() = delete;
};
static_assert(sizeof(MediaController_PreviousTrack_Params_Data) == 8,
              "Bad sizeof(MediaController_PreviousTrack_Params_Data)");

}  // namespace internal
class MediaController_Play_ParamsDataView {
 public:
  MediaController_Play_ParamsDataView() {}

  MediaController_Play_ParamsDataView(
      internal::MediaController_Play_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::MediaController_Play_Params_Data* data_ = nullptr;
};

class MediaController_Pause_ParamsDataView {
 public:
  MediaController_Pause_ParamsDataView() {}

  MediaController_Pause_ParamsDataView(
      internal::MediaController_Pause_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::MediaController_Pause_Params_Data* data_ = nullptr;
};

class MediaController_SetMute_ParamsDataView {
 public:
  MediaController_SetMute_ParamsDataView() {}

  MediaController_SetMute_ParamsDataView(
      internal::MediaController_SetMute_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool mute() const {
    return data_->mute;
  }
 private:
  internal::MediaController_SetMute_Params_Data* data_ = nullptr;
};

class MediaController_SetVolume_ParamsDataView {
 public:
  MediaController_SetVolume_ParamsDataView() {}

  MediaController_SetVolume_ParamsDataView(
      internal::MediaController_SetVolume_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  float volume() const {
    return data_->volume;
  }
 private:
  internal::MediaController_SetVolume_Params_Data* data_ = nullptr;
};

class MediaController_Seek_ParamsDataView {
 public:
  MediaController_Seek_ParamsDataView() {}

  MediaController_Seek_ParamsDataView(
      internal::MediaController_Seek_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetTimeDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTime(UserType* output) {
    auto* pointer = data_->time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, context_);
  }
 private:
  internal::MediaController_Seek_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class MediaController_NextTrack_ParamsDataView {
 public:
  MediaController_NextTrack_ParamsDataView() {}

  MediaController_NextTrack_ParamsDataView(
      internal::MediaController_NextTrack_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::MediaController_NextTrack_Params_Data* data_ = nullptr;
};

class MediaController_PreviousTrack_ParamsDataView {
 public:
  MediaController_PreviousTrack_ParamsDataView() {}

  MediaController_PreviousTrack_ParamsDataView(
      internal::MediaController_PreviousTrack_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::MediaController_PreviousTrack_Params_Data* data_ = nullptr;
};










inline void MediaController_Seek_ParamsDataView::GetTimeDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->time.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, context_);
}





}  // namespace mojom
}  // namespace media_router

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CHROME_COMMON_MEDIA_ROUTER_MOJOM_MEDIA_CONTROLLER_MOJOM_PARAMS_DATA_H_
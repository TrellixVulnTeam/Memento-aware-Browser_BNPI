// chrome/common/service_process.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "chrome/common/service_process.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"


#ifndef CHROME_COMMON_SERVICE_PROCESS_MOJOM_JUMBO_H_
#define CHROME_COMMON_SERVICE_PROCESS_MOJOM_JUMBO_H_
#endif


namespace chrome {
namespace mojom {


void ServiceProcessInterceptorForTesting::Hello(HelloCallback callback) {
  GetForwardingInterface()->Hello(std::move(callback));
}
void ServiceProcessInterceptorForTesting::GetHistograms(GetHistogramsCallback callback) {
  GetForwardingInterface()->GetHistograms(std::move(callback));
}
void ServiceProcessInterceptorForTesting::UpdateAvailable() {
  GetForwardingInterface()->UpdateAvailable();
}
void ServiceProcessInterceptorForTesting::ShutDown() {
  GetForwardingInterface()->ShutDown();
}
ServiceProcessAsyncWaiter::ServiceProcessAsyncWaiter(
    ServiceProcess* proxy) : proxy_(proxy) {}

ServiceProcessAsyncWaiter::~ServiceProcessAsyncWaiter() = default;

void ServiceProcessAsyncWaiter::Hello(
    ) {
  base::RunLoop loop;
  proxy_->Hello(
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}
void ServiceProcessAsyncWaiter::GetHistograms(
    std::vector<std::string>* out_histograms) {
  base::RunLoop loop;
  proxy_->GetHistograms(
      base::BindOnce(
          [](base::RunLoop* loop,
             std::vector<std::string>* out_histograms
,
             const std::vector<std::string>& histograms) {*out_histograms = std::move(histograms);
            loop->Quit();
          },
          &loop,
          out_histograms));
  loop.Run();
}





}  // namespace mojom
}  // namespace chrome

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
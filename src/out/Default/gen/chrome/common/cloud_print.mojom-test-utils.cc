// chrome/common/cloud_print.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "chrome/common/cloud_print.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/mojom/base/values.mojom.h"


#ifndef CHROME_COMMON_CLOUD_PRINT_MOJOM_JUMBO_H_
#define CHROME_COMMON_CLOUD_PRINT_MOJOM_JUMBO_H_
#endif


namespace cloud_print {
namespace mojom {


void CloudPrintInterceptorForTesting::EnableCloudPrintProxyWithRobot(const std::string& robot_auth_code, const std::string& robot_email, const std::string& user_email, ::base::Value user_settings) {
  GetForwardingInterface()->EnableCloudPrintProxyWithRobot(std::move(robot_auth_code), std::move(robot_email), std::move(user_email), std::move(user_settings));
}
void CloudPrintInterceptorForTesting::DisableCloudPrintProxy() {
  GetForwardingInterface()->DisableCloudPrintProxy();
}
void CloudPrintInterceptorForTesting::GetCloudPrintProxyInfo(GetCloudPrintProxyInfoCallback callback) {
  GetForwardingInterface()->GetCloudPrintProxyInfo(std::move(callback));
}
void CloudPrintInterceptorForTesting::GetPrinters(GetPrintersCallback callback) {
  GetForwardingInterface()->GetPrinters(std::move(callback));
}
CloudPrintAsyncWaiter::CloudPrintAsyncWaiter(
    CloudPrint* proxy) : proxy_(proxy) {}

CloudPrintAsyncWaiter::~CloudPrintAsyncWaiter() = default;

void CloudPrintAsyncWaiter::GetCloudPrintProxyInfo(
    bool* out_enabled, std::string* out_email, std::string* out_proxy_id) {
  base::RunLoop loop;
  proxy_->GetCloudPrintProxyInfo(
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_enabled
,
             std::string* out_email
,
             std::string* out_proxy_id
,
             bool enabled,
             const std::string& email,
             const std::string& proxy_id) {*out_enabled = std::move(enabled);*out_email = std::move(email);*out_proxy_id = std::move(proxy_id);
            loop->Quit();
          },
          &loop,
          out_enabled,
          out_email,
          out_proxy_id));
  loop.Run();
}
void CloudPrintAsyncWaiter::GetPrinters(
    std::vector<std::string>* out_printers) {
  base::RunLoop loop;
  proxy_->GetPrinters(
      base::BindOnce(
          [](base::RunLoop* loop,
             std::vector<std::string>* out_printers
,
             const std::vector<std::string>& printers) {*out_printers = std::move(printers);
            loop->Quit();
          },
          &loop,
          out_printers));
  loop.Run();
}





}  // namespace mojom
}  // namespace cloud_print

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
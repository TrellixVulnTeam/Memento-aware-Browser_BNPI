// chrome/common/search/search.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_COMMON_SEARCH_SEARCH_MOJOM_TEST_UTILS_H_
#define CHROME_COMMON_SEARCH_SEARCH_MOJOM_TEST_UTILS_H_

#include "chrome/common/search/search.mojom.h"


namespace search {
namespace mojom {


class  EmbeddedSearchConnectorInterceptorForTesting : public EmbeddedSearchConnector {
  virtual EmbeddedSearchConnector* GetForwardingInterface() = 0;
  void Connect(::mojo::PendingAssociatedReceiver<EmbeddedSearch> embedded_search, ::mojo::PendingAssociatedRemote<EmbeddedSearchClient> client) override;
};
class  EmbeddedSearchConnectorAsyncWaiter {
 public:
  explicit EmbeddedSearchConnectorAsyncWaiter(EmbeddedSearchConnector* proxy);
  ~EmbeddedSearchConnectorAsyncWaiter();

 private:
  EmbeddedSearchConnector* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(EmbeddedSearchConnectorAsyncWaiter);
};


class  EmbeddedSearchInterceptorForTesting : public EmbeddedSearch {
  virtual EmbeddedSearch* GetForwardingInterface() = 0;
  void FocusOmnibox(int32_t page_seq_no, bool focus) override;
  void DeleteMostVisitedItem(int32_t page_seq_no, const ::GURL& url) override;
  void UndoAllMostVisitedDeletions(int32_t page_seq_no) override;
  void UndoMostVisitedDeletion(int32_t page_seq_no, const ::GURL& url) override;
  void AddCustomLink(int32_t page_seq_no, const ::GURL& url, const std::string& title, AddCustomLinkCallback callback) override;
  void UpdateCustomLink(int32_t page_seq_no, const ::GURL& url, const ::GURL& new_url, const std::string& new_title, UpdateCustomLinkCallback callback) override;
  void ReorderCustomLink(int32_t page_seq_no, const ::GURL& url, int32_t new_pos) override;
  void DeleteCustomLink(int32_t page_seq_no, const ::GURL& url, DeleteCustomLinkCallback callback) override;
  void UndoCustomLinkAction(int32_t page_seq_no) override;
  void ResetCustomLinks(int32_t page_seq_no) override;
  void ToggleMostVisitedOrCustomLinks(int32_t page_seq_no) override;
  void ToggleShortcutsVisibility(int32_t page_seq_no, bool do_notify) override;
  void LogEvent(int32_t page_seq_no, ::NTPLoggingEventType event, ::base::TimeDelta time) override;
  void LogSuggestionEventWithValue(int32_t page_seq_no, ::NTPSuggestionsLoggingEventType event, int32_t data, ::base::TimeDelta time) override;
  void LogMostVisitedImpression(int32_t page_seq_no, const ::ntp_tiles::NTPTileImpression& impression) override;
  void LogMostVisitedNavigation(int32_t page_seq_no, const ::ntp_tiles::NTPTileImpression& impression) override;
  void PasteAndOpenDropdown(int32_t page_seq_no, const ::base::string16& text_to_be_pasted) override;
  void SetCustomBackgroundInfo(const ::GURL& background_url, const std::string& attribution_line_1, const std::string& attribution_line_2, const ::GURL& action_url, const std::string& collection_id) override;
  void SelectLocalBackgroundImage() override;
  void BlocklistSearchSuggestion(int32_t task_version, int64_t task_id) override;
  void BlocklistSearchSuggestionWithHash(int32_t task_version, int64_t task_id, const std::vector<uint8_t>& hash) override;
  void SearchSuggestionSelected(int32_t task_version, int64_t task_id, const std::vector<uint8_t>& hash) override;
  void OptOutOfSearchSuggestions() override;
  void ApplyDefaultTheme() override;
  void ApplyAutogeneratedTheme(uint32_t color) override;
  void RevertThemeChanges() override;
  void ConfirmThemeChanges() override;
  void QueryAutocomplete(const ::base::string16& input, bool prevent_inline_autocomplete) override;
  void DeleteAutocompleteMatch(uint8_t line) override;
  void StopAutocomplete(bool clear_result) override;
  void LogCharTypedToRepaintLatency(uint32_t latency_ms) override;
  void BlocklistPromo(const std::string& promo_id) override;
  void OpenExtensionsPage(double button, bool alt_key, bool ctrl_key, bool meta_key, bool shift_key) override;
  void OpenAutocompleteMatch(uint8_t line, const ::GURL& url, bool are_matches_showing, double time_elapsed_since_last_focus, double button, bool alt_key, bool ctrl_key, bool meta_key, bool shift_key) override;
  void ToggleSuggestionGroupIdVisibility(int32_t suggestion_group_id) override;
};
class  EmbeddedSearchAsyncWaiter {
 public:
  explicit EmbeddedSearchAsyncWaiter(EmbeddedSearch* proxy);
  ~EmbeddedSearchAsyncWaiter();
  void AddCustomLink(
      int32_t page_seq_no, const ::GURL& url, const std::string& title, bool* out_success);
  void UpdateCustomLink(
      int32_t page_seq_no, const ::GURL& url, const ::GURL& new_url, const std::string& new_title, bool* out_success);
  void DeleteCustomLink(
      int32_t page_seq_no, const ::GURL& url, bool* out_success);

 private:
  EmbeddedSearch* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(EmbeddedSearchAsyncWaiter);
};


class  EmbeddedSearchClientInterceptorForTesting : public EmbeddedSearchClient {
  virtual EmbeddedSearchClient* GetForwardingInterface() = 0;
  void AutocompleteResultChanged(::search::mojom::AutocompleteResultPtr result) override;
  void AutocompleteMatchImageAvailable(uint32_t match_index, const std::string& url, const std::string& data_url) override;
  void SetPageSequenceNumber(int32_t page_seq_no) override;
  void FocusChanged(::OmniboxFocusState new_focus_state, ::OmniboxFocusChangeReason reason) override;
  void MostVisitedInfoChanged(const ::InstantMostVisitedInfo& most_visited_info) override;
  void SetInputInProgress(bool input_in_progress) override;
  void ThemeChanged(const ::NtpTheme& theme) override;
  void LocalBackgroundSelected() override;
};
class  EmbeddedSearchClientAsyncWaiter {
 public:
  explicit EmbeddedSearchClientAsyncWaiter(EmbeddedSearchClient* proxy);
  ~EmbeddedSearchClientAsyncWaiter();

 private:
  EmbeddedSearchClient* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(EmbeddedSearchClientAsyncWaiter);
};


class  SearchBouncerInterceptorForTesting : public SearchBouncer {
  virtual SearchBouncer* GetForwardingInterface() = 0;
  void SetNewTabPageURL(const ::GURL& new_tab_page_url) override;
};
class  SearchBouncerAsyncWaiter {
 public:
  explicit SearchBouncerAsyncWaiter(SearchBouncer* proxy);
  ~SearchBouncerAsyncWaiter();

 private:
  SearchBouncer* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(SearchBouncerAsyncWaiter);
};




}  // namespace mojom
}  // namespace search

#endif  // CHROME_COMMON_SEARCH_SEARCH_MOJOM_TEST_UTILS_H_
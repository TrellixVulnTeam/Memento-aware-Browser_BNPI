// chrome/common/search/omnibox.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_COMMON_SEARCH_OMNIBOX_MOJOM_SHARED_INTERNAL_H_
#define CHROME_COMMON_SEARCH_OMNIBOX_MOJOM_SHARED_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/mojom/base/string16.mojom-shared-internal.h"
#include "url/mojom/url.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace search {
namespace mojom {
namespace internal {
class ACMatchClassification_Data;
class AutocompleteMatch_Data;
class SuggestionGroup_Data;
class AutocompleteResult_Data;

#pragma pack(push, 1)
class  ACMatchClassification_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ACMatchClassification_Data));
      new (data()) ACMatchClassification_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ACMatchClassification_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ACMatchClassification_Data>(index_);
    }
    ACMatchClassification_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t offset;
  int32_t style;

 private:
  ACMatchClassification_Data();
  ~ACMatchClassification_Data() = delete;
};
static_assert(sizeof(ACMatchClassification_Data) == 16,
              "Bad sizeof(ACMatchClassification_Data)");
// Used by ACMatchClassification::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct ACMatchClassification_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  ACMatchClassification_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~ACMatchClassification_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    ACMatchClassification_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    ACMatchClassification_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  AutocompleteMatch_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(AutocompleteMatch_Data));
      new (data()) AutocompleteMatch_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    AutocompleteMatch_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<AutocompleteMatch_Data>(index_);
    }
    AutocompleteMatch_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t allowed_to_be_default_match : 1;
  uint8_t is_search_type : 1;
  uint8_t swap_contents_and_description : 1;
  uint8_t supports_deletion : 1;
  uint8_t pad3_[3];
  int32_t suggestion_group_id;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> contents;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::ACMatchClassification_Data>>> contents_class;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> description;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::ACMatchClassification_Data>>> description_class;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> destination_url;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> inline_autocompletion;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> fill_into_edit;
  mojo::internal::Pointer<mojo::internal::String_Data> icon_url;
  mojo::internal::Pointer<mojo::internal::String_Data> image_dominant_color;
  mojo::internal::Pointer<mojo::internal::String_Data> image_url;
  mojo::internal::Pointer<mojo::internal::String_Data> type;

 private:
  AutocompleteMatch_Data();
  ~AutocompleteMatch_Data() = delete;
};
static_assert(sizeof(AutocompleteMatch_Data) == 104,
              "Bad sizeof(AutocompleteMatch_Data)");
// Used by AutocompleteMatch::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct AutocompleteMatch_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  AutocompleteMatch_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~AutocompleteMatch_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    AutocompleteMatch_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    AutocompleteMatch_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  SuggestionGroup_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SuggestionGroup_Data));
      new (data()) SuggestionGroup_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SuggestionGroup_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SuggestionGroup_Data>(index_);
    }
    SuggestionGroup_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> header;
  uint8_t hidden : 1;
  uint8_t padfinal_[7];

 private:
  SuggestionGroup_Data();
  ~SuggestionGroup_Data() = delete;
};
static_assert(sizeof(SuggestionGroup_Data) == 24,
              "Bad sizeof(SuggestionGroup_Data)");
// Used by SuggestionGroup::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct SuggestionGroup_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  SuggestionGroup_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~SuggestionGroup_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    SuggestionGroup_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    SuggestionGroup_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  AutocompleteResult_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(AutocompleteResult_Data));
      new (data()) AutocompleteResult_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    AutocompleteResult_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<AutocompleteResult_Data>(index_);
    }
    AutocompleteResult_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> input;
  mojo::internal::Pointer<mojo::internal::Map_Data<int32_t, mojo::internal::Pointer<internal::SuggestionGroup_Data>>> suggestion_groups_map;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::AutocompleteMatch_Data>>> matches;

 private:
  AutocompleteResult_Data();
  ~AutocompleteResult_Data() = delete;
};
static_assert(sizeof(AutocompleteResult_Data) == 32,
              "Bad sizeof(AutocompleteResult_Data)");
// Used by AutocompleteResult::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct AutocompleteResult_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  AutocompleteResult_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~AutocompleteResult_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    AutocompleteResult_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    AutocompleteResult_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace search

#endif  // CHROME_COMMON_SEARCH_OMNIBOX_MOJOM_SHARED_INTERNAL_H_
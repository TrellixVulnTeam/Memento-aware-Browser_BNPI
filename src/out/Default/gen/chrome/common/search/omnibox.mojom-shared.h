// chrome/common/search/omnibox.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_COMMON_SEARCH_OMNIBOX_MOJOM_SHARED_H_
#define CHROME_COMMON_SEARCH_OMNIBOX_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "chrome/common/search/omnibox.mojom-shared-internal.h"
#include "mojo/public/mojom/base/string16.mojom-shared.h"
#include "url/mojom/url.mojom-shared.h"







namespace search {
namespace mojom {
class ACMatchClassificationDataView;

class AutocompleteMatchDataView;

class SuggestionGroupDataView;

class AutocompleteResultDataView;



}  // namespace mojom
}  // namespace search

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::search::mojom::ACMatchClassificationDataView> {
  using Data = ::search::mojom::internal::ACMatchClassification_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::search::mojom::AutocompleteMatchDataView> {
  using Data = ::search::mojom::internal::AutocompleteMatch_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::search::mojom::SuggestionGroupDataView> {
  using Data = ::search::mojom::internal::SuggestionGroup_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::search::mojom::AutocompleteResultDataView> {
  using Data = ::search::mojom::internal::AutocompleteResult_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace search {
namespace mojom {
class ACMatchClassificationDataView {
 public:
  ACMatchClassificationDataView() {}

  ACMatchClassificationDataView(
      internal::ACMatchClassification_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t offset() const {
    return data_->offset;
  }
  int32_t style() const {
    return data_->style;
  }
 private:
  internal::ACMatchClassification_Data* data_ = nullptr;
};

class AutocompleteMatchDataView {
 public:
  AutocompleteMatchDataView() {}

  AutocompleteMatchDataView(
      internal::AutocompleteMatch_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  bool allowed_to_be_default_match() const {
    return data_->allowed_to_be_default_match;
  }
  inline void GetContentsDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadContents(UserType* output) {
    auto* pointer = data_->contents.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
  inline void GetContentsClassDataView(
      mojo::ArrayDataView<ACMatchClassificationDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadContentsClass(UserType* output) {
    auto* pointer = data_->contents_class.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::search::mojom::ACMatchClassificationDataView>>(
        pointer, output, context_);
  }
  inline void GetDescriptionDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDescription(UserType* output) {
    auto* pointer = data_->description.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
  inline void GetDescriptionClassDataView(
      mojo::ArrayDataView<ACMatchClassificationDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDescriptionClass(UserType* output) {
    auto* pointer = data_->description_class.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::search::mojom::ACMatchClassificationDataView>>(
        pointer, output, context_);
  }
  inline void GetDestinationUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDestinationUrl(UserType* output) {
    auto* pointer = data_->destination_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  inline void GetInlineAutocompletionDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadInlineAutocompletion(UserType* output) {
    auto* pointer = data_->inline_autocompletion.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
  inline void GetFillIntoEditDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFillIntoEdit(UserType* output) {
    auto* pointer = data_->fill_into_edit.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
  inline void GetIconUrlDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadIconUrl(UserType* output) {
    auto* pointer = data_->icon_url.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetImageDominantColorDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadImageDominantColor(UserType* output) {
    auto* pointer = data_->image_dominant_color.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetImageUrlDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadImageUrl(UserType* output) {
    auto* pointer = data_->image_url.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  bool is_search_type() const {
    return data_->is_search_type;
  }
  inline void GetTypeDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadType(UserType* output) {
    auto* pointer = data_->type.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  bool swap_contents_and_description() const {
    return data_->swap_contents_and_description;
  }
  int32_t suggestion_group_id() const {
    return data_->suggestion_group_id;
  }
  bool supports_deletion() const {
    return data_->supports_deletion;
  }
 private:
  internal::AutocompleteMatch_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class SuggestionGroupDataView {
 public:
  SuggestionGroupDataView() {}

  SuggestionGroupDataView(
      internal::SuggestionGroup_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetHeaderDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadHeader(UserType* output) {
    auto* pointer = data_->header.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
  bool hidden() const {
    return data_->hidden;
  }
 private:
  internal::SuggestionGroup_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class AutocompleteResultDataView {
 public:
  AutocompleteResultDataView() {}

  AutocompleteResultDataView(
      internal::AutocompleteResult_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetInputDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadInput(UserType* output) {
    auto* pointer = data_->input.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, context_);
  }
  inline void GetSuggestionGroupsMapDataView(
      mojo::MapDataView<int32_t, SuggestionGroupDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSuggestionGroupsMap(UserType* output) {
    auto* pointer = data_->suggestion_groups_map.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<int32_t, ::search::mojom::SuggestionGroupDataView>>(
        pointer, output, context_);
  }
  inline void GetMatchesDataView(
      mojo::ArrayDataView<AutocompleteMatchDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadMatches(UserType* output) {
    auto* pointer = data_->matches.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::search::mojom::AutocompleteMatchDataView>>(
        pointer, output, context_);
  }
 private:
  internal::AutocompleteResult_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};



}  // namespace mojom
}  // namespace search

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::search::mojom::ACMatchClassificationDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::search::mojom::ACMatchClassificationDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::search::mojom::internal::ACMatchClassification_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->offset = Traits::offset(input);
    (*output)->style = Traits::style(input);
  }

  static bool Deserialize(::search::mojom::internal::ACMatchClassification_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::search::mojom::ACMatchClassificationDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::search::mojom::AutocompleteMatchDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::search::mojom::AutocompleteMatchDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::search::mojom::internal::AutocompleteMatch_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->allowed_to_be_default_match = Traits::allowed_to_be_default_match(input);
    decltype(Traits::contents(input)) in_contents = Traits::contents(input);
    typename decltype((*output)->contents)::BaseType::BufferWriter
        contents_writer;
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_contents, buffer, &contents_writer, context);
    (*output)->contents.Set(
        contents_writer.is_null() ? nullptr : contents_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->contents.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null contents in AutocompleteMatch struct");
    decltype(Traits::contents_class(input)) in_contents_class = Traits::contents_class(input);
    typename decltype((*output)->contents_class)::BaseType::BufferWriter
        contents_class_writer;
    const mojo::internal::ContainerValidateParams contents_class_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::search::mojom::ACMatchClassificationDataView>>(
        in_contents_class, buffer, &contents_class_writer, &contents_class_validate_params,
        context);
    (*output)->contents_class.Set(
        contents_class_writer.is_null() ? nullptr : contents_class_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->contents_class.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null contents_class in AutocompleteMatch struct");
    decltype(Traits::description(input)) in_description = Traits::description(input);
    typename decltype((*output)->description)::BaseType::BufferWriter
        description_writer;
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_description, buffer, &description_writer, context);
    (*output)->description.Set(
        description_writer.is_null() ? nullptr : description_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->description.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null description in AutocompleteMatch struct");
    decltype(Traits::description_class(input)) in_description_class = Traits::description_class(input);
    typename decltype((*output)->description_class)::BaseType::BufferWriter
        description_class_writer;
    const mojo::internal::ContainerValidateParams description_class_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::search::mojom::ACMatchClassificationDataView>>(
        in_description_class, buffer, &description_class_writer, &description_class_validate_params,
        context);
    (*output)->description_class.Set(
        description_class_writer.is_null() ? nullptr : description_class_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->description_class.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null description_class in AutocompleteMatch struct");
    decltype(Traits::destination_url(input)) in_destination_url = Traits::destination_url(input);
    typename decltype((*output)->destination_url)::BaseType::BufferWriter
        destination_url_writer;
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_destination_url, buffer, &destination_url_writer, context);
    (*output)->destination_url.Set(
        destination_url_writer.is_null() ? nullptr : destination_url_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->destination_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null destination_url in AutocompleteMatch struct");
    decltype(Traits::inline_autocompletion(input)) in_inline_autocompletion = Traits::inline_autocompletion(input);
    typename decltype((*output)->inline_autocompletion)::BaseType::BufferWriter
        inline_autocompletion_writer;
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_inline_autocompletion, buffer, &inline_autocompletion_writer, context);
    (*output)->inline_autocompletion.Set(
        inline_autocompletion_writer.is_null() ? nullptr : inline_autocompletion_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->inline_autocompletion.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null inline_autocompletion in AutocompleteMatch struct");
    decltype(Traits::fill_into_edit(input)) in_fill_into_edit = Traits::fill_into_edit(input);
    typename decltype((*output)->fill_into_edit)::BaseType::BufferWriter
        fill_into_edit_writer;
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_fill_into_edit, buffer, &fill_into_edit_writer, context);
    (*output)->fill_into_edit.Set(
        fill_into_edit_writer.is_null() ? nullptr : fill_into_edit_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->fill_into_edit.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null fill_into_edit in AutocompleteMatch struct");
    decltype(Traits::icon_url(input)) in_icon_url = Traits::icon_url(input);
    typename decltype((*output)->icon_url)::BaseType::BufferWriter
        icon_url_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_icon_url, buffer, &icon_url_writer, context);
    (*output)->icon_url.Set(
        icon_url_writer.is_null() ? nullptr : icon_url_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->icon_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null icon_url in AutocompleteMatch struct");
    decltype(Traits::image_dominant_color(input)) in_image_dominant_color = Traits::image_dominant_color(input);
    typename decltype((*output)->image_dominant_color)::BaseType::BufferWriter
        image_dominant_color_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_image_dominant_color, buffer, &image_dominant_color_writer, context);
    (*output)->image_dominant_color.Set(
        image_dominant_color_writer.is_null() ? nullptr : image_dominant_color_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->image_dominant_color.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null image_dominant_color in AutocompleteMatch struct");
    decltype(Traits::image_url(input)) in_image_url = Traits::image_url(input);
    typename decltype((*output)->image_url)::BaseType::BufferWriter
        image_url_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_image_url, buffer, &image_url_writer, context);
    (*output)->image_url.Set(
        image_url_writer.is_null() ? nullptr : image_url_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->image_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null image_url in AutocompleteMatch struct");
    (*output)->is_search_type = Traits::is_search_type(input);
    decltype(Traits::type(input)) in_type = Traits::type(input);
    typename decltype((*output)->type)::BaseType::BufferWriter
        type_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_type, buffer, &type_writer, context);
    (*output)->type.Set(
        type_writer.is_null() ? nullptr : type_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->type.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null type in AutocompleteMatch struct");
    (*output)->swap_contents_and_description = Traits::swap_contents_and_description(input);
    (*output)->suggestion_group_id = Traits::suggestion_group_id(input);
    (*output)->supports_deletion = Traits::supports_deletion(input);
  }

  static bool Deserialize(::search::mojom::internal::AutocompleteMatch_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::search::mojom::AutocompleteMatchDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::search::mojom::SuggestionGroupDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::search::mojom::SuggestionGroupDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::search::mojom::internal::SuggestionGroup_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::header(input)) in_header = Traits::header(input);
    typename decltype((*output)->header)::BaseType::BufferWriter
        header_writer;
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_header, buffer, &header_writer, context);
    (*output)->header.Set(
        header_writer.is_null() ? nullptr : header_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->header.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null header in SuggestionGroup struct");
    (*output)->hidden = Traits::hidden(input);
  }

  static bool Deserialize(::search::mojom::internal::SuggestionGroup_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::search::mojom::SuggestionGroupDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::search::mojom::AutocompleteResultDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::search::mojom::AutocompleteResultDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::search::mojom::internal::AutocompleteResult_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::input(input)) in_input = Traits::input(input);
    typename decltype((*output)->input)::BaseType::BufferWriter
        input_writer;
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_input, buffer, &input_writer, context);
    (*output)->input.Set(
        input_writer.is_null() ? nullptr : input_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->input.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null input in AutocompleteResult struct");
    decltype(Traits::suggestion_groups_map(input)) in_suggestion_groups_map = Traits::suggestion_groups_map(input);
    typename decltype((*output)->suggestion_groups_map)::BaseType::BufferWriter
        suggestion_groups_map_writer;
    const mojo::internal::ContainerValidateParams suggestion_groups_map_validate_params(
        new mojo::internal::ContainerValidateParams(0, false, nullptr), new mojo::internal::ContainerValidateParams(0, false, nullptr));
    mojo::internal::Serialize<mojo::MapDataView<int32_t, ::search::mojom::SuggestionGroupDataView>>(
        in_suggestion_groups_map, buffer, &suggestion_groups_map_writer, &suggestion_groups_map_validate_params,
        context);
    (*output)->suggestion_groups_map.Set(
        suggestion_groups_map_writer.is_null() ? nullptr : suggestion_groups_map_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->suggestion_groups_map.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null suggestion_groups_map in AutocompleteResult struct");
    decltype(Traits::matches(input)) in_matches = Traits::matches(input);
    typename decltype((*output)->matches)::BaseType::BufferWriter
        matches_writer;
    const mojo::internal::ContainerValidateParams matches_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::search::mojom::AutocompleteMatchDataView>>(
        in_matches, buffer, &matches_writer, &matches_validate_params,
        context);
    (*output)->matches.Set(
        matches_writer.is_null() ? nullptr : matches_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->matches.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null matches in AutocompleteResult struct");
  }

  static bool Deserialize(::search::mojom::internal::AutocompleteResult_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::search::mojom::AutocompleteResultDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace search {
namespace mojom {



inline void AutocompleteMatchDataView::GetContentsDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->contents.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}
inline void AutocompleteMatchDataView::GetContentsClassDataView(
    mojo::ArrayDataView<ACMatchClassificationDataView>* output) {
  auto pointer = data_->contents_class.Get();
  *output = mojo::ArrayDataView<ACMatchClassificationDataView>(pointer, context_);
}
inline void AutocompleteMatchDataView::GetDescriptionDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->description.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}
inline void AutocompleteMatchDataView::GetDescriptionClassDataView(
    mojo::ArrayDataView<ACMatchClassificationDataView>* output) {
  auto pointer = data_->description_class.Get();
  *output = mojo::ArrayDataView<ACMatchClassificationDataView>(pointer, context_);
}
inline void AutocompleteMatchDataView::GetDestinationUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->destination_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}
inline void AutocompleteMatchDataView::GetInlineAutocompletionDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->inline_autocompletion.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}
inline void AutocompleteMatchDataView::GetFillIntoEditDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->fill_into_edit.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}
inline void AutocompleteMatchDataView::GetIconUrlDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->icon_url.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void AutocompleteMatchDataView::GetImageDominantColorDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->image_dominant_color.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void AutocompleteMatchDataView::GetImageUrlDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->image_url.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void AutocompleteMatchDataView::GetTypeDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->type.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void SuggestionGroupDataView::GetHeaderDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->header.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}


inline void AutocompleteResultDataView::GetInputDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->input.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, context_);
}
inline void AutocompleteResultDataView::GetSuggestionGroupsMapDataView(
    mojo::MapDataView<int32_t, SuggestionGroupDataView>* output) {
  auto pointer = data_->suggestion_groups_map.Get();
  *output = mojo::MapDataView<int32_t, SuggestionGroupDataView>(pointer, context_);
}
inline void AutocompleteResultDataView::GetMatchesDataView(
    mojo::ArrayDataView<AutocompleteMatchDataView>* output) {
  auto pointer = data_->matches.Get();
  *output = mojo::ArrayDataView<AutocompleteMatchDataView>(pointer, context_);
}



}  // namespace mojom
}  // namespace search

#endif  // CHROME_COMMON_SEARCH_OMNIBOX_MOJOM_SHARED_H_
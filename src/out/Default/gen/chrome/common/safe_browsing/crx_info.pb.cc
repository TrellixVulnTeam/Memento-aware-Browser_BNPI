// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crx_info.proto

#include "crx_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_crx_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientCRXListInfoResponse_UserMessage_crx_5finfo_2eproto;
namespace extensions {
class ClientCRXListInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientCRXListInfoRequest> _instance;
} _ClientCRXListInfoRequest_default_instance_;
class ClientCRXListInfoResponse_UserMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientCRXListInfoResponse_UserMessage> _instance;
} _ClientCRXListInfoResponse_UserMessage_default_instance_;
class ClientCRXListInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClientCRXListInfoResponse> _instance;
} _ClientCRXListInfoResponse_default_instance_;
}  // namespace extensions
static void InitDefaultsscc_info_ClientCRXListInfoRequest_crx_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::extensions::_ClientCRXListInfoRequest_default_instance_;
    new (ptr) ::extensions::ClientCRXListInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::extensions::ClientCRXListInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientCRXListInfoRequest_crx_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ClientCRXListInfoRequest_crx_5finfo_2eproto}, {}};

static void InitDefaultsscc_info_ClientCRXListInfoResponse_crx_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::extensions::_ClientCRXListInfoResponse_default_instance_;
    new (ptr) ::extensions::ClientCRXListInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::extensions::ClientCRXListInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientCRXListInfoResponse_crx_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ClientCRXListInfoResponse_crx_5finfo_2eproto}, {
      &scc_info_ClientCRXListInfoResponse_UserMessage_crx_5finfo_2eproto.base,}};

static void InitDefaultsscc_info_ClientCRXListInfoResponse_UserMessage_crx_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::extensions::_ClientCRXListInfoResponse_UserMessage_default_instance_;
    new (ptr) ::extensions::ClientCRXListInfoResponse_UserMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::extensions::ClientCRXListInfoResponse_UserMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClientCRXListInfoResponse_UserMessage_crx_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ClientCRXListInfoResponse_UserMessage_crx_5finfo_2eproto}, {}};

namespace extensions {
bool ClientCRXListInfoResponse_Verdict_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ClientCRXListInfoResponse_Verdict_strings[5] = {};

static const char ClientCRXListInfoResponse_Verdict_names[] =
  "CWS_POLICY_VIOLATION"
  "MALWARE"
  "NOT_IN_BLACKLIST"
  "POTENTIALLY_UNWANTED"
  "SECURITY_VULNERABILITY";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ClientCRXListInfoResponse_Verdict_entries[] = {
  { {ClientCRXListInfoResponse_Verdict_names + 0, 20}, 3 },
  { {ClientCRXListInfoResponse_Verdict_names + 20, 7}, 1 },
  { {ClientCRXListInfoResponse_Verdict_names + 27, 16}, 0 },
  { {ClientCRXListInfoResponse_Verdict_names + 43, 20}, 4 },
  { {ClientCRXListInfoResponse_Verdict_names + 63, 22}, 2 },
};

static const int ClientCRXListInfoResponse_Verdict_entries_by_number[] = {
  2, // 0 -> NOT_IN_BLACKLIST
  1, // 1 -> MALWARE
  4, // 2 -> SECURITY_VULNERABILITY
  0, // 3 -> CWS_POLICY_VIOLATION
  3, // 4 -> POTENTIALLY_UNWANTED
};

const std::string& ClientCRXListInfoResponse_Verdict_Name(
    ClientCRXListInfoResponse_Verdict value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ClientCRXListInfoResponse_Verdict_entries,
          ClientCRXListInfoResponse_Verdict_entries_by_number,
          5, ClientCRXListInfoResponse_Verdict_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ClientCRXListInfoResponse_Verdict_entries,
      ClientCRXListInfoResponse_Verdict_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ClientCRXListInfoResponse_Verdict_strings[idx].get();
}
bool ClientCRXListInfoResponse_Verdict_Parse(
    const std::string& name, ClientCRXListInfoResponse_Verdict* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ClientCRXListInfoResponse_Verdict_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<ClientCRXListInfoResponse_Verdict>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ClientCRXListInfoResponse_Verdict ClientCRXListInfoResponse::NOT_IN_BLACKLIST;
constexpr ClientCRXListInfoResponse_Verdict ClientCRXListInfoResponse::MALWARE;
constexpr ClientCRXListInfoResponse_Verdict ClientCRXListInfoResponse::SECURITY_VULNERABILITY;
constexpr ClientCRXListInfoResponse_Verdict ClientCRXListInfoResponse::CWS_POLICY_VIOLATION;
constexpr ClientCRXListInfoResponse_Verdict ClientCRXListInfoResponse::POTENTIALLY_UNWANTED;
constexpr ClientCRXListInfoResponse_Verdict ClientCRXListInfoResponse::Verdict_MIN;
constexpr ClientCRXListInfoResponse_Verdict ClientCRXListInfoResponse::Verdict_MAX;
constexpr int ClientCRXListInfoResponse::Verdict_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ClientCRXListInfoRequest::InitAsDefaultInstance() {
}
class ClientCRXListInfoRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientCRXListInfoRequest>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_locale(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ClientCRXListInfoRequest::ClientCRXListInfoRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:extensions.ClientCRXListInfoRequest)
}
ClientCRXListInfoRequest::ClientCRXListInfoRequest(const ClientCRXListInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_locale()) {
    locale_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locale_);
  }
  // @@protoc_insertion_point(copy_constructor:extensions.ClientCRXListInfoRequest)
}

void ClientCRXListInfoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientCRXListInfoRequest_crx_5finfo_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ClientCRXListInfoRequest::~ClientCRXListInfoRequest() {
  // @@protoc_insertion_point(destructor:extensions.ClientCRXListInfoRequest)
  SharedDtor();
}

void ClientCRXListInfoRequest::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locale_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientCRXListInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientCRXListInfoRequest& ClientCRXListInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientCRXListInfoRequest_crx_5finfo_2eproto.base);
  return *internal_default_instance();
}


void ClientCRXListInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:extensions.ClientCRXListInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      locale_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientCRXListInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string locale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_locale(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientCRXListInfoRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:extensions.ClientCRXListInfoRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string locale = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_locale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:extensions.ClientCRXListInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:extensions.ClientCRXListInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientCRXListInfoRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:extensions.ClientCRXListInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string locale = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->locale(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:extensions.ClientCRXListInfoRequest)
}

size_t ClientCRXListInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:extensions.ClientCRXListInfoRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required string id = 1;
  if (has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string locale = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->locale());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientCRXListInfoRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ClientCRXListInfoRequest*>(
      &from));
}

void ClientCRXListInfoRequest::MergeFrom(const ClientCRXListInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:extensions.ClientCRXListInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      locale_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.locale_);
    }
  }
}

void ClientCRXListInfoRequest::CopyFrom(const ClientCRXListInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:extensions.ClientCRXListInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCRXListInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ClientCRXListInfoRequest::InternalSwap(ClientCRXListInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  locale_.Swap(&other->locale_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string ClientCRXListInfoRequest::GetTypeName() const {
  return "extensions.ClientCRXListInfoRequest";
}


// ===================================================================

void ClientCRXListInfoResponse_UserMessage::InitAsDefaultInstance() {
}
class ClientCRXListInfoResponse_UserMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientCRXListInfoResponse_UserMessage>()._has_bits_);
  static void set_has_detail_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ClientCRXListInfoResponse_UserMessage::ClientCRXListInfoResponse_UserMessage()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:extensions.ClientCRXListInfoResponse.UserMessage)
}
ClientCRXListInfoResponse_UserMessage::ClientCRXListInfoResponse_UserMessage(const ClientCRXListInfoResponse_UserMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  detail_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_detail_message()) {
    detail_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.detail_message_);
  }
  // @@protoc_insertion_point(copy_constructor:extensions.ClientCRXListInfoResponse.UserMessage)
}

void ClientCRXListInfoResponse_UserMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientCRXListInfoResponse_UserMessage_crx_5finfo_2eproto.base);
  detail_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ClientCRXListInfoResponse_UserMessage::~ClientCRXListInfoResponse_UserMessage() {
  // @@protoc_insertion_point(destructor:extensions.ClientCRXListInfoResponse.UserMessage)
  SharedDtor();
}

void ClientCRXListInfoResponse_UserMessage::SharedDtor() {
  detail_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClientCRXListInfoResponse_UserMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientCRXListInfoResponse_UserMessage& ClientCRXListInfoResponse_UserMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientCRXListInfoResponse_UserMessage_crx_5finfo_2eproto.base);
  return *internal_default_instance();
}


void ClientCRXListInfoResponse_UserMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:extensions.ClientCRXListInfoResponse.UserMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    detail_message_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientCRXListInfoResponse_UserMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string detail_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_detail_message(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientCRXListInfoResponse_UserMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:extensions.ClientCRXListInfoResponse.UserMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string detail_message = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_detail_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:extensions.ClientCRXListInfoResponse.UserMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:extensions.ClientCRXListInfoResponse.UserMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientCRXListInfoResponse_UserMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:extensions.ClientCRXListInfoResponse.UserMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string detail_message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->detail_message(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:extensions.ClientCRXListInfoResponse.UserMessage)
}

size_t ClientCRXListInfoResponse_UserMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:extensions.ClientCRXListInfoResponse.UserMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string detail_message = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->detail_message());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientCRXListInfoResponse_UserMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ClientCRXListInfoResponse_UserMessage*>(
      &from));
}

void ClientCRXListInfoResponse_UserMessage::MergeFrom(const ClientCRXListInfoResponse_UserMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:extensions.ClientCRXListInfoResponse.UserMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_detail_message()) {
    _has_bits_[0] |= 0x00000001u;
    detail_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.detail_message_);
  }
}

void ClientCRXListInfoResponse_UserMessage::CopyFrom(const ClientCRXListInfoResponse_UserMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:extensions.ClientCRXListInfoResponse.UserMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCRXListInfoResponse_UserMessage::IsInitialized() const {
  return true;
}

void ClientCRXListInfoResponse_UserMessage::InternalSwap(ClientCRXListInfoResponse_UserMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  detail_message_.Swap(&other->detail_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string ClientCRXListInfoResponse_UserMessage::GetTypeName() const {
  return "extensions.ClientCRXListInfoResponse.UserMessage";
}


// ===================================================================

void ClientCRXListInfoResponse::InitAsDefaultInstance() {
  ::extensions::_ClientCRXListInfoResponse_default_instance_._instance.get_mutable()->user_message_ = const_cast< ::extensions::ClientCRXListInfoResponse_UserMessage*>(
      ::extensions::ClientCRXListInfoResponse_UserMessage::internal_default_instance());
}
class ClientCRXListInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientCRXListInfoResponse>()._has_bits_);
  static void set_has_verdict(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::extensions::ClientCRXListInfoResponse_UserMessage& user_message(const ClientCRXListInfoResponse* msg);
  static void set_has_user_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::extensions::ClientCRXListInfoResponse_UserMessage&
ClientCRXListInfoResponse::_Internal::user_message(const ClientCRXListInfoResponse* msg) {
  return *msg->user_message_;
}
ClientCRXListInfoResponse::ClientCRXListInfoResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:extensions.ClientCRXListInfoResponse)
}
ClientCRXListInfoResponse::ClientCRXListInfoResponse(const ClientCRXListInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user_message()) {
    user_message_ = new ::extensions::ClientCRXListInfoResponse_UserMessage(*from.user_message_);
  } else {
    user_message_ = nullptr;
  }
  verdict_ = from.verdict_;
  // @@protoc_insertion_point(copy_constructor:extensions.ClientCRXListInfoResponse)
}

void ClientCRXListInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClientCRXListInfoResponse_crx_5finfo_2eproto.base);
  ::memset(&user_message_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&verdict_) -
      reinterpret_cast<char*>(&user_message_)) + sizeof(verdict_));
}

ClientCRXListInfoResponse::~ClientCRXListInfoResponse() {
  // @@protoc_insertion_point(destructor:extensions.ClientCRXListInfoResponse)
  SharedDtor();
}

void ClientCRXListInfoResponse::SharedDtor() {
  if (this != internal_default_instance()) delete user_message_;
}

void ClientCRXListInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClientCRXListInfoResponse& ClientCRXListInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClientCRXListInfoResponse_crx_5finfo_2eproto.base);
  return *internal_default_instance();
}


void ClientCRXListInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:extensions.ClientCRXListInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(user_message_ != nullptr);
    user_message_->Clear();
  }
  verdict_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ClientCRXListInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .extensions.ClientCRXListInfoResponse.Verdict verdict = 1 [default = NOT_IN_BLACKLIST];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::extensions::ClientCRXListInfoResponse_Verdict_IsValid(val))) {
            set_verdict(static_cast<::extensions::ClientCRXListInfoResponse_Verdict>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .extensions.ClientCRXListInfoResponse.UserMessage user_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_user_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ClientCRXListInfoResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:extensions.ClientCRXListInfoResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .extensions.ClientCRXListInfoResponse.Verdict verdict = 1 [default = NOT_IN_BLACKLIST];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::extensions::ClientCRXListInfoResponse_Verdict_IsValid(value)) {
            set_verdict(static_cast< ::extensions::ClientCRXListInfoResponse_Verdict >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .extensions.ClientCRXListInfoResponse.UserMessage user_message = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_user_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:extensions.ClientCRXListInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:extensions.ClientCRXListInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ClientCRXListInfoResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:extensions.ClientCRXListInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .extensions.ClientCRXListInfoResponse.Verdict verdict = 1 [default = NOT_IN_BLACKLIST];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->verdict(), output);
  }

  // optional .extensions.ClientCRXListInfoResponse.UserMessage user_message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::user_message(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:extensions.ClientCRXListInfoResponse)
}

size_t ClientCRXListInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:extensions.ClientCRXListInfoResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .extensions.ClientCRXListInfoResponse.UserMessage user_message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_message_);
    }

    // optional .extensions.ClientCRXListInfoResponse.Verdict verdict = 1 [default = NOT_IN_BLACKLIST];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->verdict());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientCRXListInfoResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ClientCRXListInfoResponse*>(
      &from));
}

void ClientCRXListInfoResponse::MergeFrom(const ClientCRXListInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:extensions.ClientCRXListInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_user_message()->::extensions::ClientCRXListInfoResponse_UserMessage::MergeFrom(from.user_message());
    }
    if (cached_has_bits & 0x00000002u) {
      verdict_ = from.verdict_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ClientCRXListInfoResponse::CopyFrom(const ClientCRXListInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:extensions.ClientCRXListInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCRXListInfoResponse::IsInitialized() const {
  return true;
}

void ClientCRXListInfoResponse::InternalSwap(ClientCRXListInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(user_message_, other->user_message_);
  swap(verdict_, other->verdict_);
}

std::string ClientCRXListInfoResponse::GetTypeName() const {
  return "extensions.ClientCRXListInfoResponse";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace extensions
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::extensions::ClientCRXListInfoRequest* Arena::CreateMaybeMessage< ::extensions::ClientCRXListInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::extensions::ClientCRXListInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::extensions::ClientCRXListInfoResponse_UserMessage* Arena::CreateMaybeMessage< ::extensions::ClientCRXListInfoResponse_UserMessage >(Arena* arena) {
  return Arena::CreateInternal< ::extensions::ClientCRXListInfoResponse_UserMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::extensions::ClientCRXListInfoResponse* Arena::CreateMaybeMessage< ::extensions::ClientCRXListInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::extensions::ClientCRXListInfoResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

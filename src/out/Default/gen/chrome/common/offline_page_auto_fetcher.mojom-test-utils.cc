// chrome/common/offline_page_auto_fetcher.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "chrome/common/offline_page_auto_fetcher.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "url/mojom/url.mojom.h"


#ifndef CHROME_COMMON_OFFLINE_PAGE_AUTO_FETCHER_MOJOM_JUMBO_H_
#define CHROME_COMMON_OFFLINE_PAGE_AUTO_FETCHER_MOJOM_JUMBO_H_
#endif


namespace chrome {
namespace mojom {


void OfflinePageAutoFetcherInterceptorForTesting::TrySchedule(bool user_requested, TryScheduleCallback callback) {
  GetForwardingInterface()->TrySchedule(std::move(user_requested), std::move(callback));
}
void OfflinePageAutoFetcherInterceptorForTesting::CancelSchedule() {
  GetForwardingInterface()->CancelSchedule();
}
OfflinePageAutoFetcherAsyncWaiter::OfflinePageAutoFetcherAsyncWaiter(
    OfflinePageAutoFetcher* proxy) : proxy_(proxy) {}

OfflinePageAutoFetcherAsyncWaiter::~OfflinePageAutoFetcherAsyncWaiter() = default;

void OfflinePageAutoFetcherAsyncWaiter::TrySchedule(
    bool user_requested, OfflinePageAutoFetcherScheduleResult* out_out) {
  base::RunLoop loop;
  proxy_->TrySchedule(std::move(user_requested),
      base::BindOnce(
          [](base::RunLoop* loop,
             OfflinePageAutoFetcherScheduleResult* out_out
,
             OfflinePageAutoFetcherScheduleResult out) {*out_out = std::move(out);
            loop->Quit();
          },
          &loop,
          out_out));
  loop.Run();
}





}  // namespace mojom
}  // namespace chrome

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
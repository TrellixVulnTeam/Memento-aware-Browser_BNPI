// chrome/services/file_util/public/mojom/safe_archive_analyzer.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "chrome/services/file_util/public/mojom/safe_archive_analyzer.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/mojom/base/file.mojom.h"


#ifndef CHROME_SERVICES_FILE_UTIL_PUBLIC_MOJOM_SAFE_ARCHIVE_ANALYZER_MOJOM_JUMBO_H_
#define CHROME_SERVICES_FILE_UTIL_PUBLIC_MOJOM_SAFE_ARCHIVE_ANALYZER_MOJOM_JUMBO_H_
#include "chrome/services/file_util/public/mojom/safe_archive_analyzer_param_traits.h"
#endif


namespace chrome {
namespace mojom {


void SafeArchiveAnalyzerInterceptorForTesting::AnalyzeZipFile(::base::File zip_file, ::base::File temporary_file, AnalyzeZipFileCallback callback) {
  GetForwardingInterface()->AnalyzeZipFile(std::move(zip_file), std::move(temporary_file), std::move(callback));
}
void SafeArchiveAnalyzerInterceptorForTesting::AnalyzeDmgFile(::base::File dmg_file, AnalyzeDmgFileCallback callback) {
  GetForwardingInterface()->AnalyzeDmgFile(std::move(dmg_file), std::move(callback));
}
void SafeArchiveAnalyzerInterceptorForTesting::AnalyzeRarFile(::base::File rar_file, ::base::File temporary_file, AnalyzeRarFileCallback callback) {
  GetForwardingInterface()->AnalyzeRarFile(std::move(rar_file), std::move(temporary_file), std::move(callback));
}
SafeArchiveAnalyzerAsyncWaiter::SafeArchiveAnalyzerAsyncWaiter(
    SafeArchiveAnalyzer* proxy) : proxy_(proxy) {}

SafeArchiveAnalyzerAsyncWaiter::~SafeArchiveAnalyzerAsyncWaiter() = default;

void SafeArchiveAnalyzerAsyncWaiter::AnalyzeZipFile(
    ::base::File zip_file, ::base::File temporary_file, ::safe_browsing::ArchiveAnalyzerResults* out_results) {
  base::RunLoop loop;
  proxy_->AnalyzeZipFile(std::move(zip_file),std::move(temporary_file),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::safe_browsing::ArchiveAnalyzerResults* out_results
,
             const ::safe_browsing::ArchiveAnalyzerResults& results) {*out_results = std::move(results);
            loop->Quit();
          },
          &loop,
          out_results));
  loop.Run();
}
void SafeArchiveAnalyzerAsyncWaiter::AnalyzeDmgFile(
    ::base::File dmg_file, ::safe_browsing::ArchiveAnalyzerResults* out_results) {
  base::RunLoop loop;
  proxy_->AnalyzeDmgFile(std::move(dmg_file),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::safe_browsing::ArchiveAnalyzerResults* out_results
,
             const ::safe_browsing::ArchiveAnalyzerResults& results) {*out_results = std::move(results);
            loop->Quit();
          },
          &loop,
          out_results));
  loop.Run();
}
void SafeArchiveAnalyzerAsyncWaiter::AnalyzeRarFile(
    ::base::File rar_file, ::base::File temporary_file, ::safe_browsing::ArchiveAnalyzerResults* out_results) {
  base::RunLoop loop;
  proxy_->AnalyzeRarFile(std::move(rar_file),std::move(temporary_file),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::safe_browsing::ArchiveAnalyzerResults* out_results
,
             const ::safe_browsing::ArchiveAnalyzerResults& results) {*out_results = std::move(results);
            loop->Quit();
          },
          &loop,
          out_results));
  loop.Run();
}





}  // namespace mojom
}  // namespace chrome

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
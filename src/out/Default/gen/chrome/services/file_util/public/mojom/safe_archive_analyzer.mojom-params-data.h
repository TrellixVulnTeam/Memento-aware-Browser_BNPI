// chrome/services/file_util/public/mojom/safe_archive_analyzer.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_SERVICES_FILE_UTIL_PUBLIC_MOJOM_SAFE_ARCHIVE_ANALYZER_MOJOM_PARAMS_DATA_H_
#define CHROME_SERVICES_FILE_UTIL_PUBLIC_MOJOM_SAFE_ARCHIVE_ANALYZER_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace chrome {
namespace mojom {
namespace internal {
class  SafeArchiveAnalyzer_AnalyzeZipFile_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SafeArchiveAnalyzer_AnalyzeZipFile_Params_Data));
      new (data()) SafeArchiveAnalyzer_AnalyzeZipFile_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SafeArchiveAnalyzer_AnalyzeZipFile_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SafeArchiveAnalyzer_AnalyzeZipFile_Params_Data>(index_);
    }
    SafeArchiveAnalyzer_AnalyzeZipFile_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::File_Data> zip_file;
  mojo::internal::Pointer<::mojo_base::mojom::internal::File_Data> temporary_file;

 private:
  SafeArchiveAnalyzer_AnalyzeZipFile_Params_Data();
  ~SafeArchiveAnalyzer_AnalyzeZipFile_Params_Data() = delete;
};
static_assert(sizeof(SafeArchiveAnalyzer_AnalyzeZipFile_Params_Data) == 24,
              "Bad sizeof(SafeArchiveAnalyzer_AnalyzeZipFile_Params_Data)");
class  SafeArchiveAnalyzer_AnalyzeZipFile_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SafeArchiveAnalyzer_AnalyzeZipFile_ResponseParams_Data));
      new (data()) SafeArchiveAnalyzer_AnalyzeZipFile_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SafeArchiveAnalyzer_AnalyzeZipFile_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SafeArchiveAnalyzer_AnalyzeZipFile_ResponseParams_Data>(index_);
    }
    SafeArchiveAnalyzer_AnalyzeZipFile_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::SafeArchiveAnalyzerResults_Data> results;

 private:
  SafeArchiveAnalyzer_AnalyzeZipFile_ResponseParams_Data();
  ~SafeArchiveAnalyzer_AnalyzeZipFile_ResponseParams_Data() = delete;
};
static_assert(sizeof(SafeArchiveAnalyzer_AnalyzeZipFile_ResponseParams_Data) == 16,
              "Bad sizeof(SafeArchiveAnalyzer_AnalyzeZipFile_ResponseParams_Data)");
class  SafeArchiveAnalyzer_AnalyzeDmgFile_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SafeArchiveAnalyzer_AnalyzeDmgFile_Params_Data));
      new (data()) SafeArchiveAnalyzer_AnalyzeDmgFile_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SafeArchiveAnalyzer_AnalyzeDmgFile_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SafeArchiveAnalyzer_AnalyzeDmgFile_Params_Data>(index_);
    }
    SafeArchiveAnalyzer_AnalyzeDmgFile_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::File_Data> dmg_file;

 private:
  SafeArchiveAnalyzer_AnalyzeDmgFile_Params_Data();
  ~SafeArchiveAnalyzer_AnalyzeDmgFile_Params_Data() = delete;
};
static_assert(sizeof(SafeArchiveAnalyzer_AnalyzeDmgFile_Params_Data) == 16,
              "Bad sizeof(SafeArchiveAnalyzer_AnalyzeDmgFile_Params_Data)");
class  SafeArchiveAnalyzer_AnalyzeDmgFile_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SafeArchiveAnalyzer_AnalyzeDmgFile_ResponseParams_Data));
      new (data()) SafeArchiveAnalyzer_AnalyzeDmgFile_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SafeArchiveAnalyzer_AnalyzeDmgFile_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SafeArchiveAnalyzer_AnalyzeDmgFile_ResponseParams_Data>(index_);
    }
    SafeArchiveAnalyzer_AnalyzeDmgFile_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::SafeArchiveAnalyzerResults_Data> results;

 private:
  SafeArchiveAnalyzer_AnalyzeDmgFile_ResponseParams_Data();
  ~SafeArchiveAnalyzer_AnalyzeDmgFile_ResponseParams_Data() = delete;
};
static_assert(sizeof(SafeArchiveAnalyzer_AnalyzeDmgFile_ResponseParams_Data) == 16,
              "Bad sizeof(SafeArchiveAnalyzer_AnalyzeDmgFile_ResponseParams_Data)");
class  SafeArchiveAnalyzer_AnalyzeRarFile_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SafeArchiveAnalyzer_AnalyzeRarFile_Params_Data));
      new (data()) SafeArchiveAnalyzer_AnalyzeRarFile_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SafeArchiveAnalyzer_AnalyzeRarFile_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SafeArchiveAnalyzer_AnalyzeRarFile_Params_Data>(index_);
    }
    SafeArchiveAnalyzer_AnalyzeRarFile_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::File_Data> rar_file;
  mojo::internal::Pointer<::mojo_base::mojom::internal::File_Data> temporary_file;

 private:
  SafeArchiveAnalyzer_AnalyzeRarFile_Params_Data();
  ~SafeArchiveAnalyzer_AnalyzeRarFile_Params_Data() = delete;
};
static_assert(sizeof(SafeArchiveAnalyzer_AnalyzeRarFile_Params_Data) == 24,
              "Bad sizeof(SafeArchiveAnalyzer_AnalyzeRarFile_Params_Data)");
class  SafeArchiveAnalyzer_AnalyzeRarFile_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SafeArchiveAnalyzer_AnalyzeRarFile_ResponseParams_Data));
      new (data()) SafeArchiveAnalyzer_AnalyzeRarFile_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SafeArchiveAnalyzer_AnalyzeRarFile_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SafeArchiveAnalyzer_AnalyzeRarFile_ResponseParams_Data>(index_);
    }
    SafeArchiveAnalyzer_AnalyzeRarFile_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::SafeArchiveAnalyzerResults_Data> results;

 private:
  SafeArchiveAnalyzer_AnalyzeRarFile_ResponseParams_Data();
  ~SafeArchiveAnalyzer_AnalyzeRarFile_ResponseParams_Data() = delete;
};
static_assert(sizeof(SafeArchiveAnalyzer_AnalyzeRarFile_ResponseParams_Data) == 16,
              "Bad sizeof(SafeArchiveAnalyzer_AnalyzeRarFile_ResponseParams_Data)");

}  // namespace internal
class SafeArchiveAnalyzer_AnalyzeZipFile_ParamsDataView {
 public:
  SafeArchiveAnalyzer_AnalyzeZipFile_ParamsDataView() {}

  SafeArchiveAnalyzer_AnalyzeZipFile_ParamsDataView(
      internal::SafeArchiveAnalyzer_AnalyzeZipFile_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetZipFileDataView(
      ::mojo_base::mojom::FileDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadZipFile(UserType* output) {
    auto* pointer = data_->zip_file.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FileDataView>(
        pointer, output, context_);
  }
  inline void GetTemporaryFileDataView(
      ::mojo_base::mojom::FileDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTemporaryFile(UserType* output) {
    auto* pointer = data_->temporary_file.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FileDataView>(
        pointer, output, context_);
  }
 private:
  internal::SafeArchiveAnalyzer_AnalyzeZipFile_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class SafeArchiveAnalyzer_AnalyzeZipFile_ResponseParamsDataView {
 public:
  SafeArchiveAnalyzer_AnalyzeZipFile_ResponseParamsDataView() {}

  SafeArchiveAnalyzer_AnalyzeZipFile_ResponseParamsDataView(
      internal::SafeArchiveAnalyzer_AnalyzeZipFile_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetResultsDataView(
      SafeArchiveAnalyzerResultsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadResults(UserType* output) {
    auto* pointer = data_->results.Get();
    return mojo::internal::Deserialize<::chrome::mojom::SafeArchiveAnalyzerResultsDataView>(
        pointer, output, context_);
  }
 private:
  internal::SafeArchiveAnalyzer_AnalyzeZipFile_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class SafeArchiveAnalyzer_AnalyzeDmgFile_ParamsDataView {
 public:
  SafeArchiveAnalyzer_AnalyzeDmgFile_ParamsDataView() {}

  SafeArchiveAnalyzer_AnalyzeDmgFile_ParamsDataView(
      internal::SafeArchiveAnalyzer_AnalyzeDmgFile_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDmgFileDataView(
      ::mojo_base::mojom::FileDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDmgFile(UserType* output) {
    auto* pointer = data_->dmg_file.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FileDataView>(
        pointer, output, context_);
  }
 private:
  internal::SafeArchiveAnalyzer_AnalyzeDmgFile_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class SafeArchiveAnalyzer_AnalyzeDmgFile_ResponseParamsDataView {
 public:
  SafeArchiveAnalyzer_AnalyzeDmgFile_ResponseParamsDataView() {}

  SafeArchiveAnalyzer_AnalyzeDmgFile_ResponseParamsDataView(
      internal::SafeArchiveAnalyzer_AnalyzeDmgFile_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetResultsDataView(
      SafeArchiveAnalyzerResultsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadResults(UserType* output) {
    auto* pointer = data_->results.Get();
    return mojo::internal::Deserialize<::chrome::mojom::SafeArchiveAnalyzerResultsDataView>(
        pointer, output, context_);
  }
 private:
  internal::SafeArchiveAnalyzer_AnalyzeDmgFile_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class SafeArchiveAnalyzer_AnalyzeRarFile_ParamsDataView {
 public:
  SafeArchiveAnalyzer_AnalyzeRarFile_ParamsDataView() {}

  SafeArchiveAnalyzer_AnalyzeRarFile_ParamsDataView(
      internal::SafeArchiveAnalyzer_AnalyzeRarFile_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetRarFileDataView(
      ::mojo_base::mojom::FileDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadRarFile(UserType* output) {
    auto* pointer = data_->rar_file.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FileDataView>(
        pointer, output, context_);
  }
  inline void GetTemporaryFileDataView(
      ::mojo_base::mojom::FileDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTemporaryFile(UserType* output) {
    auto* pointer = data_->temporary_file.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FileDataView>(
        pointer, output, context_);
  }
 private:
  internal::SafeArchiveAnalyzer_AnalyzeRarFile_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class SafeArchiveAnalyzer_AnalyzeRarFile_ResponseParamsDataView {
 public:
  SafeArchiveAnalyzer_AnalyzeRarFile_ResponseParamsDataView() {}

  SafeArchiveAnalyzer_AnalyzeRarFile_ResponseParamsDataView(
      internal::SafeArchiveAnalyzer_AnalyzeRarFile_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetResultsDataView(
      SafeArchiveAnalyzerResultsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadResults(UserType* output) {
    auto* pointer = data_->results.Get();
    return mojo::internal::Deserialize<::chrome::mojom::SafeArchiveAnalyzerResultsDataView>(
        pointer, output, context_);
  }
 private:
  internal::SafeArchiveAnalyzer_AnalyzeRarFile_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};


inline void SafeArchiveAnalyzer_AnalyzeZipFile_ParamsDataView::GetZipFileDataView(
    ::mojo_base::mojom::FileDataView* output) {
  auto pointer = data_->zip_file.Get();
  *output = ::mojo_base::mojom::FileDataView(pointer, context_);
}
inline void SafeArchiveAnalyzer_AnalyzeZipFile_ParamsDataView::GetTemporaryFileDataView(
    ::mojo_base::mojom::FileDataView* output) {
  auto pointer = data_->temporary_file.Get();
  *output = ::mojo_base::mojom::FileDataView(pointer, context_);
}


inline void SafeArchiveAnalyzer_AnalyzeZipFile_ResponseParamsDataView::GetResultsDataView(
    SafeArchiveAnalyzerResultsDataView* output) {
  auto pointer = data_->results.Get();
  *output = SafeArchiveAnalyzerResultsDataView(pointer, context_);
}


inline void SafeArchiveAnalyzer_AnalyzeDmgFile_ParamsDataView::GetDmgFileDataView(
    ::mojo_base::mojom::FileDataView* output) {
  auto pointer = data_->dmg_file.Get();
  *output = ::mojo_base::mojom::FileDataView(pointer, context_);
}


inline void SafeArchiveAnalyzer_AnalyzeDmgFile_ResponseParamsDataView::GetResultsDataView(
    SafeArchiveAnalyzerResultsDataView* output) {
  auto pointer = data_->results.Get();
  *output = SafeArchiveAnalyzerResultsDataView(pointer, context_);
}


inline void SafeArchiveAnalyzer_AnalyzeRarFile_ParamsDataView::GetRarFileDataView(
    ::mojo_base::mojom::FileDataView* output) {
  auto pointer = data_->rar_file.Get();
  *output = ::mojo_base::mojom::FileDataView(pointer, context_);
}
inline void SafeArchiveAnalyzer_AnalyzeRarFile_ParamsDataView::GetTemporaryFileDataView(
    ::mojo_base::mojom::FileDataView* output) {
  auto pointer = data_->temporary_file.Get();
  *output = ::mojo_base::mojom::FileDataView(pointer, context_);
}


inline void SafeArchiveAnalyzer_AnalyzeRarFile_ResponseParamsDataView::GetResultsDataView(
    SafeArchiveAnalyzerResultsDataView* output) {
  auto pointer = data_->results.Get();
  *output = SafeArchiveAnalyzerResultsDataView(pointer, context_);
}

}  // namespace mojom
}  // namespace chrome

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CHROME_SERVICES_FILE_UTIL_PUBLIC_MOJOM_SAFE_ARCHIVE_ANALYZER_MOJOM_PARAMS_DATA_H_
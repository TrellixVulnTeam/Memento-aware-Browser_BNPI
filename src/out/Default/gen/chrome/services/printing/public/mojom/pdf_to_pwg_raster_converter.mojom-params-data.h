// chrome/services/printing/public/mojom/pdf_to_pwg_raster_converter.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_SERVICES_PRINTING_PUBLIC_MOJOM_PDF_TO_PWG_RASTER_CONVERTER_MOJOM_PARAMS_DATA_H_
#define CHROME_SERVICES_PRINTING_PUBLIC_MOJOM_PDF_TO_PWG_RASTER_CONVERTER_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace printing {
namespace mojom {
namespace internal {
class  PdfToPwgRasterConverter_Convert_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PdfToPwgRasterConverter_Convert_Params_Data));
      new (data()) PdfToPwgRasterConverter_Convert_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PdfToPwgRasterConverter_Convert_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PdfToPwgRasterConverter_Convert_Params_Data>(index_);
    }
    PdfToPwgRasterConverter_Convert_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::ReadOnlySharedMemoryRegion_Data> pdf_region;
  mojo::internal::Pointer<::printing::mojom::internal::PdfRenderSettings_Data> pdf_settings;
  mojo::internal::Pointer<internal::PwgRasterSettings_Data> pwg_raster_settings;

 private:
  PdfToPwgRasterConverter_Convert_Params_Data();
  ~PdfToPwgRasterConverter_Convert_Params_Data() = delete;
};
static_assert(sizeof(PdfToPwgRasterConverter_Convert_Params_Data) == 32,
              "Bad sizeof(PdfToPwgRasterConverter_Convert_Params_Data)");
class  PdfToPwgRasterConverter_Convert_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PdfToPwgRasterConverter_Convert_ResponseParams_Data));
      new (data()) PdfToPwgRasterConverter_Convert_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PdfToPwgRasterConverter_Convert_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PdfToPwgRasterConverter_Convert_ResponseParams_Data>(index_);
    }
    PdfToPwgRasterConverter_Convert_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::ReadOnlySharedMemoryRegion_Data> pwg_raster_region;
  uint32_t page_count;
  uint8_t padfinal_[4];

 private:
  PdfToPwgRasterConverter_Convert_ResponseParams_Data();
  ~PdfToPwgRasterConverter_Convert_ResponseParams_Data() = delete;
};
static_assert(sizeof(PdfToPwgRasterConverter_Convert_ResponseParams_Data) == 24,
              "Bad sizeof(PdfToPwgRasterConverter_Convert_ResponseParams_Data)");

}  // namespace internal
class PdfToPwgRasterConverter_Convert_ParamsDataView {
 public:
  PdfToPwgRasterConverter_Convert_ParamsDataView() {}

  PdfToPwgRasterConverter_Convert_ParamsDataView(
      internal::PdfToPwgRasterConverter_Convert_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetPdfRegionDataView(
      ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPdfRegion(UserType* output) {
    auto* pointer = data_->pdf_region.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView>(
        pointer, output, context_);
  }
  inline void GetPdfSettingsDataView(
      ::printing::mojom::PdfRenderSettingsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPdfSettings(UserType* output) {
    auto* pointer = data_->pdf_settings.Get();
    return mojo::internal::Deserialize<::printing::mojom::PdfRenderSettingsDataView>(
        pointer, output, context_);
  }
  inline void GetPwgRasterSettingsDataView(
      PwgRasterSettingsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPwgRasterSettings(UserType* output) {
    auto* pointer = data_->pwg_raster_settings.Get();
    return mojo::internal::Deserialize<::printing::mojom::PwgRasterSettingsDataView>(
        pointer, output, context_);
  }
 private:
  internal::PdfToPwgRasterConverter_Convert_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PdfToPwgRasterConverter_Convert_ResponseParamsDataView {
 public:
  PdfToPwgRasterConverter_Convert_ResponseParamsDataView() {}

  PdfToPwgRasterConverter_Convert_ResponseParamsDataView(
      internal::PdfToPwgRasterConverter_Convert_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetPwgRasterRegionDataView(
      ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPwgRasterRegion(UserType* output) {
    auto* pointer = data_->pwg_raster_region.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView>(
        pointer, output, context_);
  }
  uint32_t page_count() const {
    return data_->page_count;
  }
 private:
  internal::PdfToPwgRasterConverter_Convert_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};


inline void PdfToPwgRasterConverter_Convert_ParamsDataView::GetPdfRegionDataView(
    ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView* output) {
  auto pointer = data_->pdf_region.Get();
  *output = ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView(pointer, context_);
}
inline void PdfToPwgRasterConverter_Convert_ParamsDataView::GetPdfSettingsDataView(
    ::printing::mojom::PdfRenderSettingsDataView* output) {
  auto pointer = data_->pdf_settings.Get();
  *output = ::printing::mojom::PdfRenderSettingsDataView(pointer, context_);
}
inline void PdfToPwgRasterConverter_Convert_ParamsDataView::GetPwgRasterSettingsDataView(
    PwgRasterSettingsDataView* output) {
  auto pointer = data_->pwg_raster_settings.Get();
  *output = PwgRasterSettingsDataView(pointer, context_);
}


inline void PdfToPwgRasterConverter_Convert_ResponseParamsDataView::GetPwgRasterRegionDataView(
    ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView* output) {
  auto pointer = data_->pwg_raster_region.Get();
  *output = ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView(pointer, context_);
}

}  // namespace mojom
}  // namespace printing

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CHROME_SERVICES_PRINTING_PUBLIC_MOJOM_PDF_TO_PWG_RASTER_CONVERTER_MOJOM_PARAMS_DATA_H_
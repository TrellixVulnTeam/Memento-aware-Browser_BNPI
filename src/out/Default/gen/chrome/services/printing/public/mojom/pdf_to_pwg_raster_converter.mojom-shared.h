// chrome/services/printing/public/mojom/pdf_to_pwg_raster_converter.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_SERVICES_PRINTING_PUBLIC_MOJOM_PDF_TO_PWG_RASTER_CONVERTER_MOJOM_SHARED_H_
#define CHROME_SERVICES_PRINTING_PUBLIC_MOJOM_PDF_TO_PWG_RASTER_CONVERTER_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "chrome/services/printing/public/mojom/pdf_to_pwg_raster_converter.mojom-shared-internal.h"
#include "chrome/services/printing/public/mojom/pdf_render_settings.mojom-shared.h"
#include "mojo/public/mojom/base/shared_memory.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace printing {
namespace mojom {
class PwgRasterSettingsDataView;



}  // namespace mojom
}  // namespace printing

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::printing::mojom::PwgRasterSettingsDataView> {
  using Data = ::printing::mojom::internal::PwgRasterSettings_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace printing {
namespace mojom {


enum class PwgRasterSettings_TransformType : int32_t {
  
  TRANSFORM_NORMAL = 0,
  
  TRANSFORM_ROTATE_180 = 1,
  
  TRANSFORM_FLIP_HORIZONTAL = 2,
  
  TRANSFORM_FLIP_VERTICAL = 3,
  kMinValue = 0,
  kMaxValue = 3,
};

 std::ostream& operator<<(std::ostream& os, PwgRasterSettings_TransformType value);
inline bool IsKnownEnumValue(PwgRasterSettings_TransformType value) {
  return internal::PwgRasterSettings_TransformType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class PwgRasterSettings_DuplexMode : int32_t {
  
  SIMPLEX = 0,
  
  LONG_EDGE = 1,
  
  SHORT_EDGE = 2,
  kMinValue = 0,
  kMaxValue = 2,
};

 std::ostream& operator<<(std::ostream& os, PwgRasterSettings_DuplexMode value);
inline bool IsKnownEnumValue(PwgRasterSettings_DuplexMode value) {
  return internal::PwgRasterSettings_DuplexMode_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class PdfToPwgRasterConverterInterfaceBase {};

using PdfToPwgRasterConverterPtrDataView =
    mojo::InterfacePtrDataView<PdfToPwgRasterConverterInterfaceBase>;
using PdfToPwgRasterConverterRequestDataView =
    mojo::InterfaceRequestDataView<PdfToPwgRasterConverterInterfaceBase>;
using PdfToPwgRasterConverterAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<PdfToPwgRasterConverterInterfaceBase>;
using PdfToPwgRasterConverterAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<PdfToPwgRasterConverterInterfaceBase>;
class PwgRasterSettingsDataView {
 public:
  PwgRasterSettingsDataView() {}

  PwgRasterSettingsDataView(
      internal::PwgRasterSettings_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDuplexMode(UserType* output) const {
    auto data_value = data_->duplex_mode;
    return mojo::internal::Deserialize<::printing::mojom::PwgRasterSettings_DuplexMode>(
        data_value, output);
  }

  PwgRasterSettings_DuplexMode duplex_mode() const {
    return static_cast<PwgRasterSettings_DuplexMode>(data_->duplex_mode);
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadOddPageTransform(UserType* output) const {
    auto data_value = data_->odd_page_transform;
    return mojo::internal::Deserialize<::printing::mojom::PwgRasterSettings_TransformType>(
        data_value, output);
  }

  PwgRasterSettings_TransformType odd_page_transform() const {
    return static_cast<PwgRasterSettings_TransformType>(data_->odd_page_transform);
  }
  bool rotate_all_pages() const {
    return data_->rotate_all_pages;
  }
  bool reverse_page_order() const {
    return data_->reverse_page_order;
  }
  bool use_color() const {
    return data_->use_color;
  }
 private:
  internal::PwgRasterSettings_Data* data_ = nullptr;
};



}  // namespace mojom
}  // namespace printing

namespace std {

template <>
struct hash<::printing::mojom::PwgRasterSettings_TransformType>
    : public mojo::internal::EnumHashImpl<::printing::mojom::PwgRasterSettings_TransformType> {};

template <>
struct hash<::printing::mojom::PwgRasterSettings_DuplexMode>
    : public mojo::internal::EnumHashImpl<::printing::mojom::PwgRasterSettings_DuplexMode> {};

}  // namespace std

namespace mojo {


template <>
struct EnumTraits<::printing::mojom::PwgRasterSettings_TransformType, ::printing::mojom::PwgRasterSettings_TransformType> {
  static ::printing::mojom::PwgRasterSettings_TransformType ToMojom(::printing::mojom::PwgRasterSettings_TransformType input) { return input; }
  static bool FromMojom(::printing::mojom::PwgRasterSettings_TransformType input, ::printing::mojom::PwgRasterSettings_TransformType* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::printing::mojom::PwgRasterSettings_TransformType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::printing::mojom::PwgRasterSettings_TransformType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::printing::mojom::PwgRasterSettings_TransformType>(input), output);
  }
};

}  // namespace internal


template <>
struct EnumTraits<::printing::mojom::PwgRasterSettings_DuplexMode, ::printing::mojom::PwgRasterSettings_DuplexMode> {
  static ::printing::mojom::PwgRasterSettings_DuplexMode ToMojom(::printing::mojom::PwgRasterSettings_DuplexMode input) { return input; }
  static bool FromMojom(::printing::mojom::PwgRasterSettings_DuplexMode input, ::printing::mojom::PwgRasterSettings_DuplexMode* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::printing::mojom::PwgRasterSettings_DuplexMode, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::printing::mojom::PwgRasterSettings_DuplexMode, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::printing::mojom::PwgRasterSettings_DuplexMode>(input), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::printing::mojom::PwgRasterSettingsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::printing::mojom::PwgRasterSettingsDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::printing::mojom::internal::PwgRasterSettings_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    mojo::internal::Serialize<::printing::mojom::PwgRasterSettings_DuplexMode>(
        Traits::duplex_mode(input), &(*output)->duplex_mode);
    mojo::internal::Serialize<::printing::mojom::PwgRasterSettings_TransformType>(
        Traits::odd_page_transform(input), &(*output)->odd_page_transform);
    (*output)->rotate_all_pages = Traits::rotate_all_pages(input);
    (*output)->reverse_page_order = Traits::reverse_page_order(input);
    (*output)->use_color = Traits::use_color(input);
  }

  static bool Deserialize(::printing::mojom::internal::PwgRasterSettings_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::printing::mojom::PwgRasterSettingsDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace printing {
namespace mojom {




}  // namespace mojom
}  // namespace printing

#endif  // CHROME_SERVICES_PRINTING_PUBLIC_MOJOM_PDF_TO_PWG_RASTER_CONVERTER_MOJOM_SHARED_H_
// chrome/services/sharing/public/mojom/webrtc.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_SERVICES_SHARING_PUBLIC_MOJOM_WEBRTC_MOJOM_SHARED_H_
#define CHROME_SERVICES_SHARING_PUBLIC_MOJOM_WEBRTC_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "chrome/services/sharing/public/mojom/webrtc.mojom-shared-internal.h"
#include "url/mojom/url.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace sharing {
namespace mojom {
class IceCandidateDataView;

class IceServerDataView;



}  // namespace mojom
}  // namespace sharing

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::sharing::mojom::IceCandidateDataView> {
  using Data = ::sharing::mojom::internal::IceCandidate_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::sharing::mojom::IceServerDataView> {
  using Data = ::sharing::mojom::internal::IceServer_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace sharing {
namespace mojom {


enum class SendMessageResult : int32_t {
  
  kSuccess = 0,
  
  kError = 1,
  kMinValue = 0,
  kMaxValue = 1,
};

 std::ostream& operator<<(std::ostream& os, SendMessageResult value);
inline bool IsKnownEnumValue(SendMessageResult value) {
  return internal::SendMessageResult_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class SignallingSenderInterfaceBase {};

using SignallingSenderPtrDataView =
    mojo::InterfacePtrDataView<SignallingSenderInterfaceBase>;
using SignallingSenderRequestDataView =
    mojo::InterfaceRequestDataView<SignallingSenderInterfaceBase>;
using SignallingSenderAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<SignallingSenderInterfaceBase>;
using SignallingSenderAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<SignallingSenderInterfaceBase>;
class SignallingReceiverInterfaceBase {};

using SignallingReceiverPtrDataView =
    mojo::InterfacePtrDataView<SignallingReceiverInterfaceBase>;
using SignallingReceiverRequestDataView =
    mojo::InterfaceRequestDataView<SignallingReceiverInterfaceBase>;
using SignallingReceiverAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<SignallingReceiverInterfaceBase>;
using SignallingReceiverAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<SignallingReceiverInterfaceBase>;
class SharingWebRtcConnectionDelegateInterfaceBase {};

using SharingWebRtcConnectionDelegatePtrDataView =
    mojo::InterfacePtrDataView<SharingWebRtcConnectionDelegateInterfaceBase>;
using SharingWebRtcConnectionDelegateRequestDataView =
    mojo::InterfaceRequestDataView<SharingWebRtcConnectionDelegateInterfaceBase>;
using SharingWebRtcConnectionDelegateAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<SharingWebRtcConnectionDelegateInterfaceBase>;
using SharingWebRtcConnectionDelegateAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<SharingWebRtcConnectionDelegateInterfaceBase>;
class SharingWebRtcConnectionInterfaceBase {};

using SharingWebRtcConnectionPtrDataView =
    mojo::InterfacePtrDataView<SharingWebRtcConnectionInterfaceBase>;
using SharingWebRtcConnectionRequestDataView =
    mojo::InterfaceRequestDataView<SharingWebRtcConnectionInterfaceBase>;
using SharingWebRtcConnectionAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<SharingWebRtcConnectionInterfaceBase>;
using SharingWebRtcConnectionAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<SharingWebRtcConnectionInterfaceBase>;
class IceCandidateDataView {
 public:
  IceCandidateDataView() {}

  IceCandidateDataView(
      internal::IceCandidate_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetCandidateDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadCandidate(UserType* output) {
    auto* pointer = data_->candidate.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetSdpMidDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSdpMid(UserType* output) {
    auto* pointer = data_->sdp_mid.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  int32_t sdp_mline_index() const {
    return data_->sdp_mline_index;
  }
 private:
  internal::IceCandidate_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class IceServerDataView {
 public:
  IceServerDataView() {}

  IceServerDataView(
      internal::IceServer_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetUrlsDataView(
      mojo::ArrayDataView<::url::mojom::UrlDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUrls(UserType* output) {
    auto* pointer = data_->urls.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::url::mojom::UrlDataView>>(
        pointer, output, context_);
  }
  inline void GetUsernameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadUsername(UserType* output) {
    auto* pointer = data_->username.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetCredentialDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadCredential(UserType* output) {
    auto* pointer = data_->credential.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::IceServer_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};



}  // namespace mojom
}  // namespace sharing

namespace std {

template <>
struct hash<::sharing::mojom::SendMessageResult>
    : public mojo::internal::EnumHashImpl<::sharing::mojom::SendMessageResult> {};

}  // namespace std

namespace mojo {


template <>
struct EnumTraits<::sharing::mojom::SendMessageResult, ::sharing::mojom::SendMessageResult> {
  static ::sharing::mojom::SendMessageResult ToMojom(::sharing::mojom::SendMessageResult input) { return input; }
  static bool FromMojom(::sharing::mojom::SendMessageResult input, ::sharing::mojom::SendMessageResult* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::sharing::mojom::SendMessageResult, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::sharing::mojom::SendMessageResult, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::sharing::mojom::SendMessageResult>(input), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::sharing::mojom::IceCandidateDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::sharing::mojom::IceCandidateDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::sharing::mojom::internal::IceCandidate_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::candidate(input)) in_candidate = Traits::candidate(input);
    typename decltype((*output)->candidate)::BaseType::BufferWriter
        candidate_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_candidate, buffer, &candidate_writer, context);
    (*output)->candidate.Set(
        candidate_writer.is_null() ? nullptr : candidate_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->candidate.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null candidate in IceCandidate struct");
    decltype(Traits::sdp_mid(input)) in_sdp_mid = Traits::sdp_mid(input);
    typename decltype((*output)->sdp_mid)::BaseType::BufferWriter
        sdp_mid_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_sdp_mid, buffer, &sdp_mid_writer, context);
    (*output)->sdp_mid.Set(
        sdp_mid_writer.is_null() ? nullptr : sdp_mid_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->sdp_mid.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null sdp_mid in IceCandidate struct");
    (*output)->sdp_mline_index = Traits::sdp_mline_index(input);
  }

  static bool Deserialize(::sharing::mojom::internal::IceCandidate_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::sharing::mojom::IceCandidateDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::sharing::mojom::IceServerDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::sharing::mojom::IceServerDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::sharing::mojom::internal::IceServer_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::urls(input)) in_urls = Traits::urls(input);
    typename decltype((*output)->urls)::BaseType::BufferWriter
        urls_writer;
    const mojo::internal::ContainerValidateParams urls_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::url::mojom::UrlDataView>>(
        in_urls, buffer, &urls_writer, &urls_validate_params,
        context);
    (*output)->urls.Set(
        urls_writer.is_null() ? nullptr : urls_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->urls.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null urls in IceServer struct");
    decltype(Traits::username(input)) in_username = Traits::username(input);
    typename decltype((*output)->username)::BaseType::BufferWriter
        username_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_username, buffer, &username_writer, context);
    (*output)->username.Set(
        username_writer.is_null() ? nullptr : username_writer.data());
    decltype(Traits::credential(input)) in_credential = Traits::credential(input);
    typename decltype((*output)->credential)::BaseType::BufferWriter
        credential_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_credential, buffer, &credential_writer, context);
    (*output)->credential.Set(
        credential_writer.is_null() ? nullptr : credential_writer.data());
  }

  static bool Deserialize(::sharing::mojom::internal::IceServer_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::sharing::mojom::IceServerDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace sharing {
namespace mojom {

inline void IceCandidateDataView::GetCandidateDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->candidate.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void IceCandidateDataView::GetSdpMidDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->sdp_mid.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void IceServerDataView::GetUrlsDataView(
    mojo::ArrayDataView<::url::mojom::UrlDataView>* output) {
  auto pointer = data_->urls.Get();
  *output = mojo::ArrayDataView<::url::mojom::UrlDataView>(pointer, context_);
}
inline void IceServerDataView::GetUsernameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->username.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void IceServerDataView::GetCredentialDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->credential.Get();
  *output = mojo::StringDataView(pointer, context_);
}



}  // namespace mojom
}  // namespace sharing

#endif  // CHROME_SERVICES_SHARING_PUBLIC_MOJOM_WEBRTC_MOJOM_SHARED_H_
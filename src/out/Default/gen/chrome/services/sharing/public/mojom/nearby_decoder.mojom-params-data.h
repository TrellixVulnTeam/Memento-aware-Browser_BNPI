// chrome/services/sharing/public/mojom/nearby_decoder.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_SERVICES_SHARING_PUBLIC_MOJOM_NEARBY_DECODER_MOJOM_PARAMS_DATA_H_
#define CHROME_SERVICES_SHARING_PUBLIC_MOJOM_NEARBY_DECODER_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace sharing {
namespace mojom {
namespace internal {
class  NearbySharingDecoder_DecodeAdvertisement_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NearbySharingDecoder_DecodeAdvertisement_Params_Data));
      new (data()) NearbySharingDecoder_DecodeAdvertisement_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NearbySharingDecoder_DecodeAdvertisement_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NearbySharingDecoder_DecodeAdvertisement_Params_Data>(index_);
    }
    NearbySharingDecoder_DecodeAdvertisement_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>> data;

 private:
  NearbySharingDecoder_DecodeAdvertisement_Params_Data();
  ~NearbySharingDecoder_DecodeAdvertisement_Params_Data() = delete;
};
static_assert(sizeof(NearbySharingDecoder_DecodeAdvertisement_Params_Data) == 16,
              "Bad sizeof(NearbySharingDecoder_DecodeAdvertisement_Params_Data)");
class  NearbySharingDecoder_DecodeAdvertisement_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NearbySharingDecoder_DecodeAdvertisement_ResponseParams_Data));
      new (data()) NearbySharingDecoder_DecodeAdvertisement_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NearbySharingDecoder_DecodeAdvertisement_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NearbySharingDecoder_DecodeAdvertisement_ResponseParams_Data>(index_);
    }
    NearbySharingDecoder_DecodeAdvertisement_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::sharing::mojom::internal::Advertisement_Data> advertisement;

 private:
  NearbySharingDecoder_DecodeAdvertisement_ResponseParams_Data();
  ~NearbySharingDecoder_DecodeAdvertisement_ResponseParams_Data() = delete;
};
static_assert(sizeof(NearbySharingDecoder_DecodeAdvertisement_ResponseParams_Data) == 16,
              "Bad sizeof(NearbySharingDecoder_DecodeAdvertisement_ResponseParams_Data)");
class  NearbySharingDecoder_DecodeFrame_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NearbySharingDecoder_DecodeFrame_Params_Data));
      new (data()) NearbySharingDecoder_DecodeFrame_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NearbySharingDecoder_DecodeFrame_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NearbySharingDecoder_DecodeFrame_Params_Data>(index_);
    }
    NearbySharingDecoder_DecodeFrame_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>> data;

 private:
  NearbySharingDecoder_DecodeFrame_Params_Data();
  ~NearbySharingDecoder_DecodeFrame_Params_Data() = delete;
};
static_assert(sizeof(NearbySharingDecoder_DecodeFrame_Params_Data) == 16,
              "Bad sizeof(NearbySharingDecoder_DecodeFrame_Params_Data)");
class  NearbySharingDecoder_DecodeFrame_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(NearbySharingDecoder_DecodeFrame_ResponseParams_Data));
      new (data()) NearbySharingDecoder_DecodeFrame_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    NearbySharingDecoder_DecodeFrame_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<NearbySharingDecoder_DecodeFrame_ResponseParams_Data>(index_);
    }
    NearbySharingDecoder_DecodeFrame_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  ::sharing::mojom::internal::Frame_Data frame;

 private:
  NearbySharingDecoder_DecodeFrame_ResponseParams_Data();
  ~NearbySharingDecoder_DecodeFrame_ResponseParams_Data() = delete;
};
static_assert(sizeof(NearbySharingDecoder_DecodeFrame_ResponseParams_Data) == 24,
              "Bad sizeof(NearbySharingDecoder_DecodeFrame_ResponseParams_Data)");

}  // namespace internal
class NearbySharingDecoder_DecodeAdvertisement_ParamsDataView {
 public:
  NearbySharingDecoder_DecodeAdvertisement_ParamsDataView() {}

  NearbySharingDecoder_DecodeAdvertisement_ParamsDataView(
      internal::NearbySharingDecoder_DecodeAdvertisement_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDataDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadData(UserType* output) {
    auto* pointer = data_->data.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, context_);
  }
 private:
  internal::NearbySharingDecoder_DecodeAdvertisement_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class NearbySharingDecoder_DecodeAdvertisement_ResponseParamsDataView {
 public:
  NearbySharingDecoder_DecodeAdvertisement_ResponseParamsDataView() {}

  NearbySharingDecoder_DecodeAdvertisement_ResponseParamsDataView(
      internal::NearbySharingDecoder_DecodeAdvertisement_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetAdvertisementDataView(
      ::sharing::mojom::AdvertisementDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAdvertisement(UserType* output) {
    auto* pointer = data_->advertisement.Get();
    return mojo::internal::Deserialize<::sharing::mojom::AdvertisementDataView>(
        pointer, output, context_);
  }
 private:
  internal::NearbySharingDecoder_DecodeAdvertisement_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class NearbySharingDecoder_DecodeFrame_ParamsDataView {
 public:
  NearbySharingDecoder_DecodeFrame_ParamsDataView() {}

  NearbySharingDecoder_DecodeFrame_ParamsDataView(
      internal::NearbySharingDecoder_DecodeFrame_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDataDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadData(UserType* output) {
    auto* pointer = data_->data.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, context_);
  }
 private:
  internal::NearbySharingDecoder_DecodeFrame_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class NearbySharingDecoder_DecodeFrame_ResponseParamsDataView {
 public:
  NearbySharingDecoder_DecodeFrame_ResponseParamsDataView() {}

  NearbySharingDecoder_DecodeFrame_ResponseParamsDataView(
      internal::NearbySharingDecoder_DecodeFrame_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetFrameDataView(
      ::sharing::mojom::FrameDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFrame(UserType* output) {
    auto* pointer = !data_->frame.is_null() ? &data_->frame : nullptr;
    return mojo::internal::Deserialize<::sharing::mojom::FrameDataView>(
        pointer, output, context_);
  }
 private:
  internal::NearbySharingDecoder_DecodeFrame_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};


inline void NearbySharingDecoder_DecodeAdvertisement_ParamsDataView::GetDataDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->data.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, context_);
}


inline void NearbySharingDecoder_DecodeAdvertisement_ResponseParamsDataView::GetAdvertisementDataView(
    ::sharing::mojom::AdvertisementDataView* output) {
  auto pointer = data_->advertisement.Get();
  *output = ::sharing::mojom::AdvertisementDataView(pointer, context_);
}


inline void NearbySharingDecoder_DecodeFrame_ParamsDataView::GetDataDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->data.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, context_);
}


inline void NearbySharingDecoder_DecodeFrame_ResponseParamsDataView::GetFrameDataView(
    ::sharing::mojom::FrameDataView* output) {
  auto pointer = &data_->frame;
  *output = ::sharing::mojom::FrameDataView(pointer, context_);
}

}  // namespace mojom
}  // namespace sharing

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CHROME_SERVICES_SHARING_PUBLIC_MOJOM_NEARBY_DECODER_MOJOM_PARAMS_DATA_H_
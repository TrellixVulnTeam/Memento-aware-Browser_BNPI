// chrome/services/sharing/public/mojom/nearby_connections_types.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_SERVICES_SHARING_PUBLIC_MOJOM_NEARBY_CONNECTIONS_TYPES_MOJOM_SHARED_H_
#define CHROME_SERVICES_SHARING_PUBLIC_MOJOM_NEARBY_CONNECTIONS_TYPES_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "chrome/services/sharing/public/mojom/nearby_connections_types.mojom-shared-internal.h"
#include "mojo/public/mojom/base/file.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace location {
namespace nearby {
namespace connections {
namespace mojom {
class ConnectionInfoDataView;

class DiscoveredEndpointInfoDataView;

class AdvertisingOptionsDataView;

class DiscoveryOptionsDataView;

class BytesPayloadDataView;

class FilePayloadDataView;

class PayloadDataView;

class PayloadTransferUpdateDataView;

class PayloadContentDataView;


}  // namespace mojom
}  // namespace connections
}  // namespace nearby
}  // namespace location

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::location::nearby::connections::mojom::ConnectionInfoDataView> {
  using Data = ::location::nearby::connections::mojom::internal::ConnectionInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::location::nearby::connections::mojom::DiscoveredEndpointInfoDataView> {
  using Data = ::location::nearby::connections::mojom::internal::DiscoveredEndpointInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::location::nearby::connections::mojom::AdvertisingOptionsDataView> {
  using Data = ::location::nearby::connections::mojom::internal::AdvertisingOptions_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::location::nearby::connections::mojom::DiscoveryOptionsDataView> {
  using Data = ::location::nearby::connections::mojom::internal::DiscoveryOptions_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::location::nearby::connections::mojom::BytesPayloadDataView> {
  using Data = ::location::nearby::connections::mojom::internal::BytesPayload_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::location::nearby::connections::mojom::FilePayloadDataView> {
  using Data = ::location::nearby::connections::mojom::internal::FilePayload_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::location::nearby::connections::mojom::PayloadDataView> {
  using Data = ::location::nearby::connections::mojom::internal::Payload_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::location::nearby::connections::mojom::PayloadTransferUpdateDataView> {
  using Data = ::location::nearby::connections::mojom::internal::PayloadTransferUpdate_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::location::nearby::connections::mojom::PayloadContentDataView> {
  using Data = ::location::nearby::connections::mojom::internal::PayloadContent_Data;
  using DataAsArrayElement = Data;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kUnion;
};

}  // namespace internal
}  // namespace mojo


namespace location {
namespace nearby {
namespace connections {
namespace mojom {


enum class Status : int32_t {
  
  kSuccess = 0,
  
  kError = 1,
  
  kOutOfOrderApiCall = 2,
  
  kAlreadyHaveActiveStrategy = 3,
  
  kAlreadyAdvertising = 4,
  
  kAlreadyDiscovering = 5,
  
  kEndpointIOError = 6,
  
  kEndpointUnknown = 7,
  
  kConnectionRejected = 8,
  
  kAlreadyConnectedToEndpoint = 9,
  
  kNotConnectedToEndpoint = 10,
  
  kRadioError = 11,
  
  kPayloadUnknown = 12,
  kMinValue = 0,
  kMaxValue = 12,
};

 std::ostream& operator<<(std::ostream& os, Status value);
inline bool IsKnownEnumValue(Status value) {
  return internal::Status_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class Strategy : int32_t {
  
  kP2pCluster = 0,
  
  kP2pStar = 1,
  
  kP2pPointToPoint = 2,
  kMinValue = 0,
  kMaxValue = 2,
};

 std::ostream& operator<<(std::ostream& os, Strategy value);
inline bool IsKnownEnumValue(Strategy value) {
  return internal::Strategy_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class PayloadStatus : int32_t {
  
  kSuccess = 0,
  
  kFailure = 1,
  
  kInProgress = 2,
  
  kCanceled = 3,
  kMinValue = 0,
  kMaxValue = 3,
};

 std::ostream& operator<<(std::ostream& os, PayloadStatus value);
inline bool IsKnownEnumValue(PayloadStatus value) {
  return internal::PayloadStatus_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class BandwidthQuality : int32_t {
  
  kUnknown = 0,
  
  kLow = 1,
  
  kMedium = 2,
  
  kHigh = 3,
  kMinValue = 0,
  kMaxValue = 3,
};

 std::ostream& operator<<(std::ostream& os, BandwidthQuality value);
inline bool IsKnownEnumValue(BandwidthQuality value) {
  return internal::BandwidthQuality_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
class ConnectionInfoDataView {
 public:
  ConnectionInfoDataView() {}

  ConnectionInfoDataView(
      internal::ConnectionInfo_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetRemoteEndpointNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadRemoteEndpointName(UserType* output) {
    auto* pointer = data_->remote_endpoint_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetAuthenticationTokenDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAuthenticationToken(UserType* output) {
    auto* pointer = data_->authentication_token.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetRawAuthenticationTokenDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadRawAuthenticationToken(UserType* output) {
    auto* pointer = data_->raw_authentication_token.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, context_);
  }
  bool is_incoming_connection() const {
    return data_->is_incoming_connection;
  }
  inline void GetEndpointInfoDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadEndpointInfo(UserType* output) {
    auto* pointer = data_->endpoint_info.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, context_);
  }
 private:
  internal::ConnectionInfo_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class DiscoveredEndpointInfoDataView {
 public:
  DiscoveredEndpointInfoDataView() {}

  DiscoveredEndpointInfoDataView(
      internal::DiscoveredEndpointInfo_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetServiceIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadServiceId(UserType* output) {
    auto* pointer = data_->service_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetEndpointNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadEndpointName(UserType* output) {
    auto* pointer = data_->endpoint_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetEndpointInfoDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadEndpointInfo(UserType* output) {
    auto* pointer = data_->endpoint_info.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, context_);
  }
 private:
  internal::DiscoveredEndpointInfo_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class AdvertisingOptionsDataView {
 public:
  AdvertisingOptionsDataView() {}

  AdvertisingOptionsDataView(
      internal::AdvertisingOptions_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadStrategy(UserType* output) const {
    auto data_value = data_->strategy;
    return mojo::internal::Deserialize<::location::nearby::connections::mojom::Strategy>(
        data_value, output);
  }

  Strategy strategy() const {
    return static_cast<Strategy>(data_->strategy);
  }
  bool auto_upgrade_bandwidth() const {
    return data_->auto_upgrade_bandwidth;
  }
  bool enforce_topology_constraints() const {
    return data_->enforce_topology_constraints;
  }
 private:
  internal::AdvertisingOptions_Data* data_ = nullptr;
};

class DiscoveryOptionsDataView {
 public:
  DiscoveryOptionsDataView() {}

  DiscoveryOptionsDataView(
      internal::DiscoveryOptions_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadStrategy(UserType* output) const {
    auto data_value = data_->strategy;
    return mojo::internal::Deserialize<::location::nearby::connections::mojom::Strategy>(
        data_value, output);
  }

  Strategy strategy() const {
    return static_cast<Strategy>(data_->strategy);
  }
 private:
  internal::DiscoveryOptions_Data* data_ = nullptr;
};

class BytesPayloadDataView {
 public:
  BytesPayloadDataView() {}

  BytesPayloadDataView(
      internal::BytesPayload_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetBytesDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadBytes(UserType* output) {
    auto* pointer = data_->bytes.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, context_);
  }
 private:
  internal::BytesPayload_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FilePayloadDataView {
 public:
  FilePayloadDataView() {}

  FilePayloadDataView(
      internal::FilePayload_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetFileDataView(
      ::mojo_base::mojom::FileDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFile(UserType* output) {
    auto* pointer = data_->file.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FileDataView>(
        pointer, output, context_);
  }
 private:
  internal::FilePayload_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PayloadDataView {
 public:
  PayloadDataView() {}

  PayloadDataView(
      internal::Payload_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int64_t id() const {
    return data_->id;
  }
  inline void GetContentDataView(
      PayloadContentDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadContent(UserType* output) {
    auto* pointer = !data_->content.is_null() ? &data_->content : nullptr;
    return mojo::internal::Deserialize<::location::nearby::connections::mojom::PayloadContentDataView>(
        pointer, output, context_);
  }
 private:
  internal::Payload_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PayloadTransferUpdateDataView {
 public:
  PayloadTransferUpdateDataView() {}

  PayloadTransferUpdateDataView(
      internal::PayloadTransferUpdate_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int64_t payload_id() const {
    return data_->payload_id;
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::location::nearby::connections::mojom::PayloadStatus>(
        data_value, output);
  }

  PayloadStatus status() const {
    return static_cast<PayloadStatus>(data_->status);
  }
  uint64_t total_bytes() const {
    return data_->total_bytes;
  }
  uint64_t bytes_transferred() const {
    return data_->bytes_transferred;
  }
 private:
  internal::PayloadTransferUpdate_Data* data_ = nullptr;
};

class PayloadContentDataView {
 public:
  using Tag = internal::PayloadContent_Data::PayloadContent_Tag;

  PayloadContentDataView() {}

  PayloadContentDataView(
      internal::PayloadContent_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const {
    // For inlined unions, |data_| is always non-null. In that case we need to
    // check |data_->is_null()|.
    return !data_ || data_->is_null();
  }

  Tag tag() const { return data_->tag; }
  bool is_bytes() const { return data_->tag == Tag::BYTES; }
  inline void GetBytesDataView(
      BytesPayloadDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadBytes(UserType* output) {
    DCHECK(is_bytes());
    return mojo::internal::Deserialize<::location::nearby::connections::mojom::BytesPayloadDataView>(
        data_->data.f_bytes.Get(), output, context_);
  }
  bool is_file() const { return data_->tag == Tag::FILE; }
  inline void GetFileDataView(
      FilePayloadDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFile(UserType* output) {
    DCHECK(is_file());
    return mojo::internal::Deserialize<::location::nearby::connections::mojom::FilePayloadDataView>(
        data_->data.f_file.Get(), output, context_);
  }

 private:
  internal::PayloadContent_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};



}  // namespace mojom
}  // namespace connections
}  // namespace nearby
}  // namespace location

namespace std {

template <>
struct hash<::location::nearby::connections::mojom::Status>
    : public mojo::internal::EnumHashImpl<::location::nearby::connections::mojom::Status> {};

template <>
struct hash<::location::nearby::connections::mojom::Strategy>
    : public mojo::internal::EnumHashImpl<::location::nearby::connections::mojom::Strategy> {};

template <>
struct hash<::location::nearby::connections::mojom::PayloadStatus>
    : public mojo::internal::EnumHashImpl<::location::nearby::connections::mojom::PayloadStatus> {};

template <>
struct hash<::location::nearby::connections::mojom::BandwidthQuality>
    : public mojo::internal::EnumHashImpl<::location::nearby::connections::mojom::BandwidthQuality> {};

}  // namespace std

namespace mojo {


template <>
struct EnumTraits<::location::nearby::connections::mojom::Status, ::location::nearby::connections::mojom::Status> {
  static ::location::nearby::connections::mojom::Status ToMojom(::location::nearby::connections::mojom::Status input) { return input; }
  static bool FromMojom(::location::nearby::connections::mojom::Status input, ::location::nearby::connections::mojom::Status* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::location::nearby::connections::mojom::Status, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::location::nearby::connections::mojom::Status, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::location::nearby::connections::mojom::Status>(input), output);
  }
};

}  // namespace internal


template <>
struct EnumTraits<::location::nearby::connections::mojom::Strategy, ::location::nearby::connections::mojom::Strategy> {
  static ::location::nearby::connections::mojom::Strategy ToMojom(::location::nearby::connections::mojom::Strategy input) { return input; }
  static bool FromMojom(::location::nearby::connections::mojom::Strategy input, ::location::nearby::connections::mojom::Strategy* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::location::nearby::connections::mojom::Strategy, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::location::nearby::connections::mojom::Strategy, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::location::nearby::connections::mojom::Strategy>(input), output);
  }
};

}  // namespace internal


template <>
struct EnumTraits<::location::nearby::connections::mojom::PayloadStatus, ::location::nearby::connections::mojom::PayloadStatus> {
  static ::location::nearby::connections::mojom::PayloadStatus ToMojom(::location::nearby::connections::mojom::PayloadStatus input) { return input; }
  static bool FromMojom(::location::nearby::connections::mojom::PayloadStatus input, ::location::nearby::connections::mojom::PayloadStatus* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::location::nearby::connections::mojom::PayloadStatus, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::location::nearby::connections::mojom::PayloadStatus, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::location::nearby::connections::mojom::PayloadStatus>(input), output);
  }
};

}  // namespace internal


template <>
struct EnumTraits<::location::nearby::connections::mojom::BandwidthQuality, ::location::nearby::connections::mojom::BandwidthQuality> {
  static ::location::nearby::connections::mojom::BandwidthQuality ToMojom(::location::nearby::connections::mojom::BandwidthQuality input) { return input; }
  static bool FromMojom(::location::nearby::connections::mojom::BandwidthQuality input, ::location::nearby::connections::mojom::BandwidthQuality* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::location::nearby::connections::mojom::BandwidthQuality, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::location::nearby::connections::mojom::BandwidthQuality, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::location::nearby::connections::mojom::BandwidthQuality>(input), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::location::nearby::connections::mojom::ConnectionInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::location::nearby::connections::mojom::ConnectionInfoDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::location::nearby::connections::mojom::internal::ConnectionInfo_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::remote_endpoint_name(input)) in_remote_endpoint_name = Traits::remote_endpoint_name(input);
    typename decltype((*output)->remote_endpoint_name)::BaseType::BufferWriter
        remote_endpoint_name_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_remote_endpoint_name, buffer, &remote_endpoint_name_writer, context);
    (*output)->remote_endpoint_name.Set(
        remote_endpoint_name_writer.is_null() ? nullptr : remote_endpoint_name_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->remote_endpoint_name.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null remote_endpoint_name in ConnectionInfo struct");
    decltype(Traits::authentication_token(input)) in_authentication_token = Traits::authentication_token(input);
    typename decltype((*output)->authentication_token)::BaseType::BufferWriter
        authentication_token_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_authentication_token, buffer, &authentication_token_writer, context);
    (*output)->authentication_token.Set(
        authentication_token_writer.is_null() ? nullptr : authentication_token_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->authentication_token.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null authentication_token in ConnectionInfo struct");
    decltype(Traits::raw_authentication_token(input)) in_raw_authentication_token = Traits::raw_authentication_token(input);
    typename decltype((*output)->raw_authentication_token)::BaseType::BufferWriter
        raw_authentication_token_writer;
    const mojo::internal::ContainerValidateParams raw_authentication_token_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<uint8_t>>(
        in_raw_authentication_token, buffer, &raw_authentication_token_writer, &raw_authentication_token_validate_params,
        context);
    (*output)->raw_authentication_token.Set(
        raw_authentication_token_writer.is_null() ? nullptr : raw_authentication_token_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->raw_authentication_token.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null raw_authentication_token in ConnectionInfo struct");
    (*output)->is_incoming_connection = Traits::is_incoming_connection(input);
    decltype(Traits::endpoint_info(input)) in_endpoint_info = Traits::endpoint_info(input);
    typename decltype((*output)->endpoint_info)::BaseType::BufferWriter
        endpoint_info_writer;
    const mojo::internal::ContainerValidateParams endpoint_info_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<uint8_t>>(
        in_endpoint_info, buffer, &endpoint_info_writer, &endpoint_info_validate_params,
        context);
    (*output)->endpoint_info.Set(
        endpoint_info_writer.is_null() ? nullptr : endpoint_info_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->endpoint_info.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null endpoint_info in ConnectionInfo struct");
  }

  static bool Deserialize(::location::nearby::connections::mojom::internal::ConnectionInfo_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::location::nearby::connections::mojom::ConnectionInfoDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::location::nearby::connections::mojom::DiscoveredEndpointInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::location::nearby::connections::mojom::DiscoveredEndpointInfoDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::location::nearby::connections::mojom::internal::DiscoveredEndpointInfo_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::service_id(input)) in_service_id = Traits::service_id(input);
    typename decltype((*output)->service_id)::BaseType::BufferWriter
        service_id_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_service_id, buffer, &service_id_writer, context);
    (*output)->service_id.Set(
        service_id_writer.is_null() ? nullptr : service_id_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->service_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null service_id in DiscoveredEndpointInfo struct");
    decltype(Traits::endpoint_name(input)) in_endpoint_name = Traits::endpoint_name(input);
    typename decltype((*output)->endpoint_name)::BaseType::BufferWriter
        endpoint_name_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_endpoint_name, buffer, &endpoint_name_writer, context);
    (*output)->endpoint_name.Set(
        endpoint_name_writer.is_null() ? nullptr : endpoint_name_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->endpoint_name.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null endpoint_name in DiscoveredEndpointInfo struct");
    decltype(Traits::endpoint_info(input)) in_endpoint_info = Traits::endpoint_info(input);
    typename decltype((*output)->endpoint_info)::BaseType::BufferWriter
        endpoint_info_writer;
    const mojo::internal::ContainerValidateParams endpoint_info_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<uint8_t>>(
        in_endpoint_info, buffer, &endpoint_info_writer, &endpoint_info_validate_params,
        context);
    (*output)->endpoint_info.Set(
        endpoint_info_writer.is_null() ? nullptr : endpoint_info_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->endpoint_info.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null endpoint_info in DiscoveredEndpointInfo struct");
  }

  static bool Deserialize(::location::nearby::connections::mojom::internal::DiscoveredEndpointInfo_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::location::nearby::connections::mojom::DiscoveredEndpointInfoDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::location::nearby::connections::mojom::AdvertisingOptionsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::location::nearby::connections::mojom::AdvertisingOptionsDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::location::nearby::connections::mojom::internal::AdvertisingOptions_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    mojo::internal::Serialize<::location::nearby::connections::mojom::Strategy>(
        Traits::strategy(input), &(*output)->strategy);
    (*output)->auto_upgrade_bandwidth = Traits::auto_upgrade_bandwidth(input);
    (*output)->enforce_topology_constraints = Traits::enforce_topology_constraints(input);
  }

  static bool Deserialize(::location::nearby::connections::mojom::internal::AdvertisingOptions_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::location::nearby::connections::mojom::AdvertisingOptionsDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::location::nearby::connections::mojom::DiscoveryOptionsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::location::nearby::connections::mojom::DiscoveryOptionsDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::location::nearby::connections::mojom::internal::DiscoveryOptions_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    mojo::internal::Serialize<::location::nearby::connections::mojom::Strategy>(
        Traits::strategy(input), &(*output)->strategy);
  }

  static bool Deserialize(::location::nearby::connections::mojom::internal::DiscoveryOptions_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::location::nearby::connections::mojom::DiscoveryOptionsDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::location::nearby::connections::mojom::BytesPayloadDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::location::nearby::connections::mojom::BytesPayloadDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::location::nearby::connections::mojom::internal::BytesPayload_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::bytes(input)) in_bytes = Traits::bytes(input);
    typename decltype((*output)->bytes)::BaseType::BufferWriter
        bytes_writer;
    const mojo::internal::ContainerValidateParams bytes_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<uint8_t>>(
        in_bytes, buffer, &bytes_writer, &bytes_validate_params,
        context);
    (*output)->bytes.Set(
        bytes_writer.is_null() ? nullptr : bytes_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->bytes.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null bytes in BytesPayload struct");
  }

  static bool Deserialize(::location::nearby::connections::mojom::internal::BytesPayload_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::location::nearby::connections::mojom::BytesPayloadDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::location::nearby::connections::mojom::FilePayloadDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::location::nearby::connections::mojom::FilePayloadDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::location::nearby::connections::mojom::internal::FilePayload_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::file(input)) in_file = Traits::file(input);
    typename decltype((*output)->file)::BaseType::BufferWriter
        file_writer;
    mojo::internal::Serialize<::mojo_base::mojom::FileDataView>(
        in_file, buffer, &file_writer, context);
    (*output)->file.Set(
        file_writer.is_null() ? nullptr : file_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->file.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null file in FilePayload struct");
  }

  static bool Deserialize(::location::nearby::connections::mojom::internal::FilePayload_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::location::nearby::connections::mojom::FilePayloadDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::location::nearby::connections::mojom::PayloadDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::location::nearby::connections::mojom::PayloadDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::location::nearby::connections::mojom::internal::Payload_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->id = Traits::id(input);
    decltype(Traits::content(input)) in_content = Traits::content(input);
    typename decltype((*output)->content)::BufferWriter content_writer;
    content_writer.AllocateInline(buffer, &(*output)->content);
    mojo::internal::Serialize<::location::nearby::connections::mojom::PayloadContentDataView>(
        in_content, buffer, &content_writer, true, context);
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->content.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null content in Payload struct");
  }

  static bool Deserialize(::location::nearby::connections::mojom::internal::Payload_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::location::nearby::connections::mojom::PayloadDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::location::nearby::connections::mojom::PayloadTransferUpdateDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::location::nearby::connections::mojom::PayloadTransferUpdateDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::location::nearby::connections::mojom::internal::PayloadTransferUpdate_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->payload_id = Traits::payload_id(input);
    mojo::internal::Serialize<::location::nearby::connections::mojom::PayloadStatus>(
        Traits::status(input), &(*output)->status);
    (*output)->total_bytes = Traits::total_bytes(input);
    (*output)->bytes_transferred = Traits::bytes_transferred(input);
  }

  static bool Deserialize(::location::nearby::connections::mojom::internal::PayloadTransferUpdate_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::location::nearby::connections::mojom::PayloadTransferUpdateDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::location::nearby::connections::mojom::PayloadContentDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = UnionTraits<::location::nearby::connections::mojom::PayloadContentDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::location::nearby::connections::mojom::internal::PayloadContent_Data::BufferWriter* writer,
                        bool inlined,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input)) {
       if (inlined)
         writer->data()->set_null();
      return;
    }
    if (!inlined)
      writer->Allocate(buffer);

    ::location::nearby::connections::mojom::internal::PayloadContent_Data::BufferWriter& result = *writer;
    ALLOW_UNUSED_LOCAL(result);
    // TODO(azani): Handle unknown and objects.
    // Set the not-null flag.
    result->size = kUnionDataSize;
    result->tag = Traits::GetTag(input);
    switch (result->tag) {
      case ::location::nearby::connections::mojom::PayloadContentDataView::Tag::BYTES: {
        decltype(Traits::bytes(input))
            in_bytes = Traits::bytes(input);
        typename decltype(result->data.f_bytes)::BaseType::BufferWriter
            value_writer;
        mojo::internal::Serialize<::location::nearby::connections::mojom::BytesPayloadDataView>(
            in_bytes, buffer, &value_writer, context);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_writer.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null bytes in PayloadContent union");
        result->data.f_bytes.Set(
            value_writer.is_null() ? nullptr : value_writer.data());
        break;
      }
      case ::location::nearby::connections::mojom::PayloadContentDataView::Tag::FILE: {
        decltype(Traits::file(input))
            in_file = Traits::file(input);
        typename decltype(result->data.f_file)::BaseType::BufferWriter
            value_writer;
        mojo::internal::Serialize<::location::nearby::connections::mojom::FilePayloadDataView>(
            in_file, buffer, &value_writer, context);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_writer.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null file in PayloadContent union");
        result->data.f_file.Set(
            value_writer.is_null() ? nullptr : value_writer.data());
        break;
      }
    }
  }

  static bool Deserialize(::location::nearby::connections::mojom::internal::PayloadContent_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input || input->is_null())
      return CallSetToNullIfExists<Traits>(output);

    ::location::nearby::connections::mojom::PayloadContentDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace location {
namespace nearby {
namespace connections {
namespace mojom {

inline void ConnectionInfoDataView::GetRemoteEndpointNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->remote_endpoint_name.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void ConnectionInfoDataView::GetAuthenticationTokenDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->authentication_token.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void ConnectionInfoDataView::GetRawAuthenticationTokenDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->raw_authentication_token.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, context_);
}
inline void ConnectionInfoDataView::GetEndpointInfoDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->endpoint_info.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, context_);
}


inline void DiscoveredEndpointInfoDataView::GetServiceIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->service_id.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void DiscoveredEndpointInfoDataView::GetEndpointNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->endpoint_name.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void DiscoveredEndpointInfoDataView::GetEndpointInfoDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->endpoint_info.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, context_);
}






inline void BytesPayloadDataView::GetBytesDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->bytes.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, context_);
}


inline void FilePayloadDataView::GetFileDataView(
    ::mojo_base::mojom::FileDataView* output) {
  auto pointer = data_->file.Get();
  *output = ::mojo_base::mojom::FileDataView(pointer, context_);
}


inline void PayloadDataView::GetContentDataView(
    PayloadContentDataView* output) {
  auto pointer = &data_->content;
  *output = PayloadContentDataView(pointer, context_);
}




inline void PayloadContentDataView::GetBytesDataView(
    BytesPayloadDataView* output) {
  DCHECK(is_bytes());
  *output = BytesPayloadDataView(data_->data.f_bytes.Get(), context_);
}
inline void PayloadContentDataView::GetFileDataView(
    FilePayloadDataView* output) {
  DCHECK(is_file());
  *output = FilePayloadDataView(data_->data.f_file.Get(), context_);
}


}  // namespace mojom
}  // namespace connections
}  // namespace nearby
}  // namespace location

#endif  // CHROME_SERVICES_SHARING_PUBLIC_MOJOM_NEARBY_CONNECTIONS_TYPES_MOJOM_SHARED_H_
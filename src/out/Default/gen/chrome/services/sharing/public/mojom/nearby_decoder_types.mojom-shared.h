// chrome/services/sharing/public/mojom/nearby_decoder_types.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_SERVICES_SHARING_PUBLIC_MOJOM_NEARBY_DECODER_TYPES_MOJOM_SHARED_H_
#define CHROME_SERVICES_SHARING_PUBLIC_MOJOM_NEARBY_DECODER_TYPES_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "chrome/services/sharing/public/mojom/nearby_decoder_types.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"







namespace sharing {
namespace mojom {
class AdvertisementDataView;

class IntroductionFrameDataView;

class FileMetadataDataView;

class TextMetadataDataView;

class WifiCredentialsMetadataDataView;

class ConnectionResponseFrameDataView;

class PairedKeyEncryptionFrameDataView;

class PairedKeyResultFrameDataView;

class CertificateInfoFrameDataView;

class PublicCertificateDataView;

class FrameDataView;
class V1FrameDataView;


}  // namespace mojom
}  // namespace sharing

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::sharing::mojom::AdvertisementDataView> {
  using Data = ::sharing::mojom::internal::Advertisement_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::sharing::mojom::IntroductionFrameDataView> {
  using Data = ::sharing::mojom::internal::IntroductionFrame_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::sharing::mojom::FileMetadataDataView> {
  using Data = ::sharing::mojom::internal::FileMetadata_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::sharing::mojom::TextMetadataDataView> {
  using Data = ::sharing::mojom::internal::TextMetadata_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::sharing::mojom::WifiCredentialsMetadataDataView> {
  using Data = ::sharing::mojom::internal::WifiCredentialsMetadata_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::sharing::mojom::ConnectionResponseFrameDataView> {
  using Data = ::sharing::mojom::internal::ConnectionResponseFrame_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::sharing::mojom::PairedKeyEncryptionFrameDataView> {
  using Data = ::sharing::mojom::internal::PairedKeyEncryptionFrame_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::sharing::mojom::PairedKeyResultFrameDataView> {
  using Data = ::sharing::mojom::internal::PairedKeyResultFrame_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::sharing::mojom::CertificateInfoFrameDataView> {
  using Data = ::sharing::mojom::internal::CertificateInfoFrame_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::sharing::mojom::PublicCertificateDataView> {
  using Data = ::sharing::mojom::internal::PublicCertificate_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::sharing::mojom::FrameDataView> {
  using Data = ::sharing::mojom::internal::Frame_Data;
  using DataAsArrayElement = Data;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kUnion;
};

template <>
struct MojomTypeTraits<::sharing::mojom::V1FrameDataView> {
  using Data = ::sharing::mojom::internal::V1Frame_Data;
  using DataAsArrayElement = Data;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kUnion;
};

}  // namespace internal
}  // namespace mojo


namespace sharing {
namespace mojom {


enum class FileMetadata_Type : int32_t {
  
  kUnknown = 0,
  
  kImage = 1,
  
  kVideo = 2,
  
  kApp = 3,
  
  kAudio = 4,
  kMinValue = 0,
  kMaxValue = 4,
};

 std::ostream& operator<<(std::ostream& os, FileMetadata_Type value);
inline bool IsKnownEnumValue(FileMetadata_Type value) {
  return internal::FileMetadata_Type_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class TextMetadata_Type : int32_t {
  
  kUnknown = 0,
  
  kText = 1,
  
  kUrl = 2,
  
  kAddress = 3,
  
  kPhoneNumber = 4,
  kMinValue = 0,
  kMaxValue = 4,
};

 std::ostream& operator<<(std::ostream& os, TextMetadata_Type value);
inline bool IsKnownEnumValue(TextMetadata_Type value) {
  return internal::TextMetadata_Type_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class WifiCredentialsMetadata_SecurityType : int32_t {
  
  kUnknownSecurityType = 0,
  
  kOpen = 1,
  
  kWpaPsk = 2,
  
  kWep = 3,
  kMinValue = 0,
  kMaxValue = 3,
};

 std::ostream& operator<<(std::ostream& os, WifiCredentialsMetadata_SecurityType value);
inline bool IsKnownEnumValue(WifiCredentialsMetadata_SecurityType value) {
  return internal::WifiCredentialsMetadata_SecurityType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class ConnectionResponseFrame_Status : int32_t {
  
  kUnknown = 0,
  
  kAccept = 1,
  
  kReject = 2,
  
  kNotEnoughSpace = 3,
  
  kUnsupportedAttachmentType = 4,
  
  kTimedOut = 5,
  kMinValue = 0,
  kMaxValue = 5,
};

 std::ostream& operator<<(std::ostream& os, ConnectionResponseFrame_Status value);
inline bool IsKnownEnumValue(ConnectionResponseFrame_Status value) {
  return internal::ConnectionResponseFrame_Status_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class PairedKeyResultFrame_Status : int32_t {
  
  kUnknown = 0,
  
  kSuccess = 1,
  
  kFail = 2,
  
  kUnable = 3,
  kMinValue = 0,
  kMaxValue = 3,
};

 std::ostream& operator<<(std::ostream& os, PairedKeyResultFrame_Status value);
inline bool IsKnownEnumValue(PairedKeyResultFrame_Status value) {
  return internal::PairedKeyResultFrame_Status_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
class AdvertisementDataView {
 public:
  AdvertisementDataView() {}

  AdvertisementDataView(
      internal::Advertisement_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetSaltDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSalt(UserType* output) {
    auto* pointer = data_->salt.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, context_);
  }
  inline void GetEncryptedMetadataDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadEncryptedMetadata(UserType* output) {
    auto* pointer = data_->encrypted_metadata.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, context_);
  }
  inline void GetDeviceNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDeviceName(UserType* output) {
    auto* pointer = data_->device_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::Advertisement_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class IntroductionFrameDataView {
 public:
  IntroductionFrameDataView() {}

  IntroductionFrameDataView(
      internal::IntroductionFrame_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetFileMetadataDataView(
      mojo::ArrayDataView<FileMetadataDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFileMetadata(UserType* output) {
    auto* pointer = data_->file_metadata.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::sharing::mojom::FileMetadataDataView>>(
        pointer, output, context_);
  }
  inline void GetTextMetadataDataView(
      mojo::ArrayDataView<TextMetadataDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTextMetadata(UserType* output) {
    auto* pointer = data_->text_metadata.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::sharing::mojom::TextMetadataDataView>>(
        pointer, output, context_);
  }
  inline void GetRequiredPackageDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadRequiredPackage(UserType* output) {
    auto* pointer = data_->required_package.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetWifiCredentialsMetadataDataView(
      mojo::ArrayDataView<WifiCredentialsMetadataDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadWifiCredentialsMetadata(UserType* output) {
    auto* pointer = data_->wifi_credentials_metadata.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::sharing::mojom::WifiCredentialsMetadataDataView>>(
        pointer, output, context_);
  }
 private:
  internal::IntroductionFrame_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FileMetadataDataView {
 public:
  FileMetadataDataView() {}

  FileMetadataDataView(
      internal::FileMetadata_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadName(UserType* output) {
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadType(UserType* output) const {
    auto data_value = data_->type;
    return mojo::internal::Deserialize<::sharing::mojom::FileMetadata_Type>(
        data_value, output);
  }

  FileMetadata_Type type() const {
    return static_cast<FileMetadata_Type>(data_->type);
  }
  int64_t payload_id() const {
    return data_->payload_id;
  }
  uint64_t size() const {
    return data_->size;
  }
  inline void GetMimeTypeDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadMimeType(UserType* output) {
    auto* pointer = data_->mime_type.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::FileMetadata_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class TextMetadataDataView {
 public:
  TextMetadataDataView() {}

  TextMetadataDataView(
      internal::TextMetadata_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetTextTitleDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTextTitle(UserType* output) {
    auto* pointer = data_->text_title.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadType(UserType* output) const {
    auto data_value = data_->type;
    return mojo::internal::Deserialize<::sharing::mojom::TextMetadata_Type>(
        data_value, output);
  }

  TextMetadata_Type type() const {
    return static_cast<TextMetadata_Type>(data_->type);
  }
  int64_t payload_id() const {
    return data_->payload_id;
  }
  uint64_t size() const {
    return data_->size;
  }
 private:
  internal::TextMetadata_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class WifiCredentialsMetadataDataView {
 public:
  WifiCredentialsMetadataDataView() {}

  WifiCredentialsMetadataDataView(
      internal::WifiCredentialsMetadata_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetSsidDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSsid(UserType* output) {
    auto* pointer = data_->ssid.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSecurityType(UserType* output) const {
    auto data_value = data_->security_type;
    return mojo::internal::Deserialize<::sharing::mojom::WifiCredentialsMetadata_SecurityType>(
        data_value, output);
  }

  WifiCredentialsMetadata_SecurityType security_type() const {
    return static_cast<WifiCredentialsMetadata_SecurityType>(data_->security_type);
  }
  int64_t payload_id() const {
    return data_->payload_id;
  }
 private:
  internal::WifiCredentialsMetadata_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class ConnectionResponseFrameDataView {
 public:
  ConnectionResponseFrameDataView() {}

  ConnectionResponseFrameDataView(
      internal::ConnectionResponseFrame_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::sharing::mojom::ConnectionResponseFrame_Status>(
        data_value, output);
  }

  ConnectionResponseFrame_Status status() const {
    return static_cast<ConnectionResponseFrame_Status>(data_->status);
  }
 private:
  internal::ConnectionResponseFrame_Data* data_ = nullptr;
};

class PairedKeyEncryptionFrameDataView {
 public:
  PairedKeyEncryptionFrameDataView() {}

  PairedKeyEncryptionFrameDataView(
      internal::PairedKeyEncryptionFrame_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetSignedDataDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSignedData(UserType* output) {
    auto* pointer = data_->signed_data.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, context_);
  }
  inline void GetSecretIdHashDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSecretIdHash(UserType* output) {
    auto* pointer = data_->secret_id_hash.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, context_);
  }
 private:
  internal::PairedKeyEncryptionFrame_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PairedKeyResultFrameDataView {
 public:
  PairedKeyResultFrameDataView() {}

  PairedKeyResultFrameDataView(
      internal::PairedKeyResultFrame_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::sharing::mojom::PairedKeyResultFrame_Status>(
        data_value, output);
  }

  PairedKeyResultFrame_Status status() const {
    return static_cast<PairedKeyResultFrame_Status>(data_->status);
  }
 private:
  internal::PairedKeyResultFrame_Data* data_ = nullptr;
};

class CertificateInfoFrameDataView {
 public:
  CertificateInfoFrameDataView() {}

  CertificateInfoFrameDataView(
      internal::CertificateInfoFrame_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetPublicCertificateDataView(
      mojo::ArrayDataView<PublicCertificateDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPublicCertificate(UserType* output) {
    auto* pointer = data_->public_certificate.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::sharing::mojom::PublicCertificateDataView>>(
        pointer, output, context_);
  }
 private:
  internal::CertificateInfoFrame_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PublicCertificateDataView {
 public:
  PublicCertificateDataView() {}

  PublicCertificateDataView(
      internal::PublicCertificate_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetSecretIdDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSecretId(UserType* output) {
    auto* pointer = data_->secret_id.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, context_);
  }
  inline void GetAuthenticityKeyDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAuthenticityKey(UserType* output) {
    auto* pointer = data_->authenticity_key.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, context_);
  }
  inline void GetPublicKeyDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPublicKey(UserType* output) {
    auto* pointer = data_->public_key.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, context_);
  }
  inline void GetStartTimeDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadStartTime(UserType* output) {
    auto* pointer = data_->start_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, context_);
  }
  inline void GetEndTimeDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadEndTime(UserType* output) {
    auto* pointer = data_->end_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, context_);
  }
  inline void GetEncryptedMetadataBytesDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadEncryptedMetadataBytes(UserType* output) {
    auto* pointer = data_->encrypted_metadata_bytes.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, context_);
  }
  inline void GetMetadataEncryptionKeyTagDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadMetadataEncryptionKeyTag(UserType* output) {
    auto* pointer = data_->metadata_encryption_key_tag.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, context_);
  }
 private:
  internal::PublicCertificate_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameDataView {
 public:
  using Tag = internal::Frame_Data::Frame_Tag;

  FrameDataView() {}

  FrameDataView(
      internal::Frame_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const {
    // For inlined unions, |data_| is always non-null. In that case we need to
    // check |data_->is_null()|.
    return !data_ || data_->is_null();
  }

  Tag tag() const { return data_->tag; }
  bool is_v1() const { return data_->tag == Tag::V1; }
  inline void GetV1DataView(
      V1FrameDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadV1(UserType* output) {
    DCHECK(is_v1());
    return mojo::internal::Deserialize<::sharing::mojom::V1FrameDataView>(
        data_->data.f_v1.Get(), output, context_);
  }

 private:
  internal::Frame_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class V1FrameDataView {
 public:
  using Tag = internal::V1Frame_Data::V1Frame_Tag;

  V1FrameDataView() {}

  V1FrameDataView(
      internal::V1Frame_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const {
    // For inlined unions, |data_| is always non-null. In that case we need to
    // check |data_->is_null()|.
    return !data_ || data_->is_null();
  }

  Tag tag() const { return data_->tag; }
  bool is_introduction() const { return data_->tag == Tag::INTRODUCTION; }
  inline void GetIntroductionDataView(
      IntroductionFrameDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadIntroduction(UserType* output) {
    DCHECK(is_introduction());
    return mojo::internal::Deserialize<::sharing::mojom::IntroductionFrameDataView>(
        data_->data.f_introduction.Get(), output, context_);
  }
  bool is_connection_response() const { return data_->tag == Tag::CONNECTION_RESPONSE; }
  inline void GetConnectionResponseDataView(
      ConnectionResponseFrameDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadConnectionResponse(UserType* output) {
    DCHECK(is_connection_response());
    return mojo::internal::Deserialize<::sharing::mojom::ConnectionResponseFrameDataView>(
        data_->data.f_connection_response.Get(), output, context_);
  }
  bool is_paired_key_encryption() const { return data_->tag == Tag::PAIRED_KEY_ENCRYPTION; }
  inline void GetPairedKeyEncryptionDataView(
      PairedKeyEncryptionFrameDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPairedKeyEncryption(UserType* output) {
    DCHECK(is_paired_key_encryption());
    return mojo::internal::Deserialize<::sharing::mojom::PairedKeyEncryptionFrameDataView>(
        data_->data.f_paired_key_encryption.Get(), output, context_);
  }
  bool is_paired_key_result() const { return data_->tag == Tag::PAIRED_KEY_RESULT; }
  inline void GetPairedKeyResultDataView(
      PairedKeyResultFrameDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPairedKeyResult(UserType* output) {
    DCHECK(is_paired_key_result());
    return mojo::internal::Deserialize<::sharing::mojom::PairedKeyResultFrameDataView>(
        data_->data.f_paired_key_result.Get(), output, context_);
  }
  bool is_certificate_info() const { return data_->tag == Tag::CERTIFICATE_INFO; }
  inline void GetCertificateInfoDataView(
      CertificateInfoFrameDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadCertificateInfo(UserType* output) {
    DCHECK(is_certificate_info());
    return mojo::internal::Deserialize<::sharing::mojom::CertificateInfoFrameDataView>(
        data_->data.f_certificate_info.Get(), output, context_);
  }

 private:
  internal::V1Frame_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};



}  // namespace mojom
}  // namespace sharing

namespace std {

template <>
struct hash<::sharing::mojom::FileMetadata_Type>
    : public mojo::internal::EnumHashImpl<::sharing::mojom::FileMetadata_Type> {};

template <>
struct hash<::sharing::mojom::TextMetadata_Type>
    : public mojo::internal::EnumHashImpl<::sharing::mojom::TextMetadata_Type> {};

template <>
struct hash<::sharing::mojom::WifiCredentialsMetadata_SecurityType>
    : public mojo::internal::EnumHashImpl<::sharing::mojom::WifiCredentialsMetadata_SecurityType> {};

template <>
struct hash<::sharing::mojom::ConnectionResponseFrame_Status>
    : public mojo::internal::EnumHashImpl<::sharing::mojom::ConnectionResponseFrame_Status> {};

template <>
struct hash<::sharing::mojom::PairedKeyResultFrame_Status>
    : public mojo::internal::EnumHashImpl<::sharing::mojom::PairedKeyResultFrame_Status> {};

}  // namespace std

namespace mojo {


template <>
struct EnumTraits<::sharing::mojom::FileMetadata_Type, ::sharing::mojom::FileMetadata_Type> {
  static ::sharing::mojom::FileMetadata_Type ToMojom(::sharing::mojom::FileMetadata_Type input) { return input; }
  static bool FromMojom(::sharing::mojom::FileMetadata_Type input, ::sharing::mojom::FileMetadata_Type* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::sharing::mojom::FileMetadata_Type, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::sharing::mojom::FileMetadata_Type, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::sharing::mojom::FileMetadata_Type>(input), output);
  }
};

}  // namespace internal


template <>
struct EnumTraits<::sharing::mojom::TextMetadata_Type, ::sharing::mojom::TextMetadata_Type> {
  static ::sharing::mojom::TextMetadata_Type ToMojom(::sharing::mojom::TextMetadata_Type input) { return input; }
  static bool FromMojom(::sharing::mojom::TextMetadata_Type input, ::sharing::mojom::TextMetadata_Type* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::sharing::mojom::TextMetadata_Type, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::sharing::mojom::TextMetadata_Type, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::sharing::mojom::TextMetadata_Type>(input), output);
  }
};

}  // namespace internal


template <>
struct EnumTraits<::sharing::mojom::WifiCredentialsMetadata_SecurityType, ::sharing::mojom::WifiCredentialsMetadata_SecurityType> {
  static ::sharing::mojom::WifiCredentialsMetadata_SecurityType ToMojom(::sharing::mojom::WifiCredentialsMetadata_SecurityType input) { return input; }
  static bool FromMojom(::sharing::mojom::WifiCredentialsMetadata_SecurityType input, ::sharing::mojom::WifiCredentialsMetadata_SecurityType* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::sharing::mojom::WifiCredentialsMetadata_SecurityType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::sharing::mojom::WifiCredentialsMetadata_SecurityType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::sharing::mojom::WifiCredentialsMetadata_SecurityType>(input), output);
  }
};

}  // namespace internal


template <>
struct EnumTraits<::sharing::mojom::ConnectionResponseFrame_Status, ::sharing::mojom::ConnectionResponseFrame_Status> {
  static ::sharing::mojom::ConnectionResponseFrame_Status ToMojom(::sharing::mojom::ConnectionResponseFrame_Status input) { return input; }
  static bool FromMojom(::sharing::mojom::ConnectionResponseFrame_Status input, ::sharing::mojom::ConnectionResponseFrame_Status* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::sharing::mojom::ConnectionResponseFrame_Status, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::sharing::mojom::ConnectionResponseFrame_Status, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::sharing::mojom::ConnectionResponseFrame_Status>(input), output);
  }
};

}  // namespace internal


template <>
struct EnumTraits<::sharing::mojom::PairedKeyResultFrame_Status, ::sharing::mojom::PairedKeyResultFrame_Status> {
  static ::sharing::mojom::PairedKeyResultFrame_Status ToMojom(::sharing::mojom::PairedKeyResultFrame_Status input) { return input; }
  static bool FromMojom(::sharing::mojom::PairedKeyResultFrame_Status input, ::sharing::mojom::PairedKeyResultFrame_Status* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::sharing::mojom::PairedKeyResultFrame_Status, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::sharing::mojom::PairedKeyResultFrame_Status, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::sharing::mojom::PairedKeyResultFrame_Status>(input), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::sharing::mojom::AdvertisementDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::sharing::mojom::AdvertisementDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::sharing::mojom::internal::Advertisement_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::salt(input)) in_salt = Traits::salt(input);
    typename decltype((*output)->salt)::BaseType::BufferWriter
        salt_writer;
    const mojo::internal::ContainerValidateParams salt_validate_params(
        2, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<uint8_t>>(
        in_salt, buffer, &salt_writer, &salt_validate_params,
        context);
    (*output)->salt.Set(
        salt_writer.is_null() ? nullptr : salt_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->salt.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null salt in Advertisement struct");
    decltype(Traits::encrypted_metadata(input)) in_encrypted_metadata = Traits::encrypted_metadata(input);
    typename decltype((*output)->encrypted_metadata)::BaseType::BufferWriter
        encrypted_metadata_writer;
    const mojo::internal::ContainerValidateParams encrypted_metadata_validate_params(
        14, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<uint8_t>>(
        in_encrypted_metadata, buffer, &encrypted_metadata_writer, &encrypted_metadata_validate_params,
        context);
    (*output)->encrypted_metadata.Set(
        encrypted_metadata_writer.is_null() ? nullptr : encrypted_metadata_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->encrypted_metadata.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null encrypted_metadata in Advertisement struct");
    decltype(Traits::device_name(input)) in_device_name = Traits::device_name(input);
    typename decltype((*output)->device_name)::BaseType::BufferWriter
        device_name_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_device_name, buffer, &device_name_writer, context);
    (*output)->device_name.Set(
        device_name_writer.is_null() ? nullptr : device_name_writer.data());
  }

  static bool Deserialize(::sharing::mojom::internal::Advertisement_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::sharing::mojom::AdvertisementDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::sharing::mojom::IntroductionFrameDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::sharing::mojom::IntroductionFrameDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::sharing::mojom::internal::IntroductionFrame_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::file_metadata(input)) in_file_metadata = Traits::file_metadata(input);
    typename decltype((*output)->file_metadata)::BaseType::BufferWriter
        file_metadata_writer;
    const mojo::internal::ContainerValidateParams file_metadata_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::sharing::mojom::FileMetadataDataView>>(
        in_file_metadata, buffer, &file_metadata_writer, &file_metadata_validate_params,
        context);
    (*output)->file_metadata.Set(
        file_metadata_writer.is_null() ? nullptr : file_metadata_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->file_metadata.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null file_metadata in IntroductionFrame struct");
    decltype(Traits::text_metadata(input)) in_text_metadata = Traits::text_metadata(input);
    typename decltype((*output)->text_metadata)::BaseType::BufferWriter
        text_metadata_writer;
    const mojo::internal::ContainerValidateParams text_metadata_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::sharing::mojom::TextMetadataDataView>>(
        in_text_metadata, buffer, &text_metadata_writer, &text_metadata_validate_params,
        context);
    (*output)->text_metadata.Set(
        text_metadata_writer.is_null() ? nullptr : text_metadata_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->text_metadata.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null text_metadata in IntroductionFrame struct");
    decltype(Traits::required_package(input)) in_required_package = Traits::required_package(input);
    typename decltype((*output)->required_package)::BaseType::BufferWriter
        required_package_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_required_package, buffer, &required_package_writer, context);
    (*output)->required_package.Set(
        required_package_writer.is_null() ? nullptr : required_package_writer.data());
    decltype(Traits::wifi_credentials_metadata(input)) in_wifi_credentials_metadata = Traits::wifi_credentials_metadata(input);
    typename decltype((*output)->wifi_credentials_metadata)::BaseType::BufferWriter
        wifi_credentials_metadata_writer;
    const mojo::internal::ContainerValidateParams wifi_credentials_metadata_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::sharing::mojom::WifiCredentialsMetadataDataView>>(
        in_wifi_credentials_metadata, buffer, &wifi_credentials_metadata_writer, &wifi_credentials_metadata_validate_params,
        context);
    (*output)->wifi_credentials_metadata.Set(
        wifi_credentials_metadata_writer.is_null() ? nullptr : wifi_credentials_metadata_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->wifi_credentials_metadata.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null wifi_credentials_metadata in IntroductionFrame struct");
  }

  static bool Deserialize(::sharing::mojom::internal::IntroductionFrame_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::sharing::mojom::IntroductionFrameDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::sharing::mojom::FileMetadataDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::sharing::mojom::FileMetadataDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::sharing::mojom::internal::FileMetadata_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::name(input)) in_name = Traits::name(input);
    typename decltype((*output)->name)::BaseType::BufferWriter
        name_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_name, buffer, &name_writer, context);
    (*output)->name.Set(
        name_writer.is_null() ? nullptr : name_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->name.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null name in FileMetadata struct");
    mojo::internal::Serialize<::sharing::mojom::FileMetadata_Type>(
        Traits::type(input), &(*output)->type);
    (*output)->payload_id = Traits::payload_id(input);
    (*output)->size = Traits::size(input);
    decltype(Traits::mime_type(input)) in_mime_type = Traits::mime_type(input);
    typename decltype((*output)->mime_type)::BaseType::BufferWriter
        mime_type_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_mime_type, buffer, &mime_type_writer, context);
    (*output)->mime_type.Set(
        mime_type_writer.is_null() ? nullptr : mime_type_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->mime_type.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null mime_type in FileMetadata struct");
  }

  static bool Deserialize(::sharing::mojom::internal::FileMetadata_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::sharing::mojom::FileMetadataDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::sharing::mojom::TextMetadataDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::sharing::mojom::TextMetadataDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::sharing::mojom::internal::TextMetadata_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::text_title(input)) in_text_title = Traits::text_title(input);
    typename decltype((*output)->text_title)::BaseType::BufferWriter
        text_title_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_text_title, buffer, &text_title_writer, context);
    (*output)->text_title.Set(
        text_title_writer.is_null() ? nullptr : text_title_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->text_title.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null text_title in TextMetadata struct");
    mojo::internal::Serialize<::sharing::mojom::TextMetadata_Type>(
        Traits::type(input), &(*output)->type);
    (*output)->payload_id = Traits::payload_id(input);
    (*output)->size = Traits::size(input);
  }

  static bool Deserialize(::sharing::mojom::internal::TextMetadata_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::sharing::mojom::TextMetadataDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::sharing::mojom::WifiCredentialsMetadataDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::sharing::mojom::WifiCredentialsMetadataDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::sharing::mojom::internal::WifiCredentialsMetadata_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::ssid(input)) in_ssid = Traits::ssid(input);
    typename decltype((*output)->ssid)::BaseType::BufferWriter
        ssid_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_ssid, buffer, &ssid_writer, context);
    (*output)->ssid.Set(
        ssid_writer.is_null() ? nullptr : ssid_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->ssid.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null ssid in WifiCredentialsMetadata struct");
    mojo::internal::Serialize<::sharing::mojom::WifiCredentialsMetadata_SecurityType>(
        Traits::security_type(input), &(*output)->security_type);
    (*output)->payload_id = Traits::payload_id(input);
  }

  static bool Deserialize(::sharing::mojom::internal::WifiCredentialsMetadata_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::sharing::mojom::WifiCredentialsMetadataDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::sharing::mojom::ConnectionResponseFrameDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::sharing::mojom::ConnectionResponseFrameDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::sharing::mojom::internal::ConnectionResponseFrame_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    mojo::internal::Serialize<::sharing::mojom::ConnectionResponseFrame_Status>(
        Traits::status(input), &(*output)->status);
  }

  static bool Deserialize(::sharing::mojom::internal::ConnectionResponseFrame_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::sharing::mojom::ConnectionResponseFrameDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::sharing::mojom::PairedKeyEncryptionFrameDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::sharing::mojom::PairedKeyEncryptionFrameDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::sharing::mojom::internal::PairedKeyEncryptionFrame_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::signed_data(input)) in_signed_data = Traits::signed_data(input);
    typename decltype((*output)->signed_data)::BaseType::BufferWriter
        signed_data_writer;
    const mojo::internal::ContainerValidateParams signed_data_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<uint8_t>>(
        in_signed_data, buffer, &signed_data_writer, &signed_data_validate_params,
        context);
    (*output)->signed_data.Set(
        signed_data_writer.is_null() ? nullptr : signed_data_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->signed_data.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null signed_data in PairedKeyEncryptionFrame struct");
    decltype(Traits::secret_id_hash(input)) in_secret_id_hash = Traits::secret_id_hash(input);
    typename decltype((*output)->secret_id_hash)::BaseType::BufferWriter
        secret_id_hash_writer;
    const mojo::internal::ContainerValidateParams secret_id_hash_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<uint8_t>>(
        in_secret_id_hash, buffer, &secret_id_hash_writer, &secret_id_hash_validate_params,
        context);
    (*output)->secret_id_hash.Set(
        secret_id_hash_writer.is_null() ? nullptr : secret_id_hash_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->secret_id_hash.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null secret_id_hash in PairedKeyEncryptionFrame struct");
  }

  static bool Deserialize(::sharing::mojom::internal::PairedKeyEncryptionFrame_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::sharing::mojom::PairedKeyEncryptionFrameDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::sharing::mojom::PairedKeyResultFrameDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::sharing::mojom::PairedKeyResultFrameDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::sharing::mojom::internal::PairedKeyResultFrame_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    mojo::internal::Serialize<::sharing::mojom::PairedKeyResultFrame_Status>(
        Traits::status(input), &(*output)->status);
  }

  static bool Deserialize(::sharing::mojom::internal::PairedKeyResultFrame_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::sharing::mojom::PairedKeyResultFrameDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::sharing::mojom::CertificateInfoFrameDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::sharing::mojom::CertificateInfoFrameDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::sharing::mojom::internal::CertificateInfoFrame_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::public_certificate(input)) in_public_certificate = Traits::public_certificate(input);
    typename decltype((*output)->public_certificate)::BaseType::BufferWriter
        public_certificate_writer;
    const mojo::internal::ContainerValidateParams public_certificate_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::sharing::mojom::PublicCertificateDataView>>(
        in_public_certificate, buffer, &public_certificate_writer, &public_certificate_validate_params,
        context);
    (*output)->public_certificate.Set(
        public_certificate_writer.is_null() ? nullptr : public_certificate_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->public_certificate.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null public_certificate in CertificateInfoFrame struct");
  }

  static bool Deserialize(::sharing::mojom::internal::CertificateInfoFrame_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::sharing::mojom::CertificateInfoFrameDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::sharing::mojom::PublicCertificateDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::sharing::mojom::PublicCertificateDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::sharing::mojom::internal::PublicCertificate_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::secret_id(input)) in_secret_id = Traits::secret_id(input);
    typename decltype((*output)->secret_id)::BaseType::BufferWriter
        secret_id_writer;
    const mojo::internal::ContainerValidateParams secret_id_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<uint8_t>>(
        in_secret_id, buffer, &secret_id_writer, &secret_id_validate_params,
        context);
    (*output)->secret_id.Set(
        secret_id_writer.is_null() ? nullptr : secret_id_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->secret_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null secret_id in PublicCertificate struct");
    decltype(Traits::authenticity_key(input)) in_authenticity_key = Traits::authenticity_key(input);
    typename decltype((*output)->authenticity_key)::BaseType::BufferWriter
        authenticity_key_writer;
    const mojo::internal::ContainerValidateParams authenticity_key_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<uint8_t>>(
        in_authenticity_key, buffer, &authenticity_key_writer, &authenticity_key_validate_params,
        context);
    (*output)->authenticity_key.Set(
        authenticity_key_writer.is_null() ? nullptr : authenticity_key_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->authenticity_key.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null authenticity_key in PublicCertificate struct");
    decltype(Traits::public_key(input)) in_public_key = Traits::public_key(input);
    typename decltype((*output)->public_key)::BaseType::BufferWriter
        public_key_writer;
    const mojo::internal::ContainerValidateParams public_key_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<uint8_t>>(
        in_public_key, buffer, &public_key_writer, &public_key_validate_params,
        context);
    (*output)->public_key.Set(
        public_key_writer.is_null() ? nullptr : public_key_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->public_key.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null public_key in PublicCertificate struct");
    decltype(Traits::start_time(input)) in_start_time = Traits::start_time(input);
    typename decltype((*output)->start_time)::BaseType::BufferWriter
        start_time_writer;
    mojo::internal::Serialize<::mojo_base::mojom::TimeDataView>(
        in_start_time, buffer, &start_time_writer, context);
    (*output)->start_time.Set(
        start_time_writer.is_null() ? nullptr : start_time_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->start_time.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null start_time in PublicCertificate struct");
    decltype(Traits::end_time(input)) in_end_time = Traits::end_time(input);
    typename decltype((*output)->end_time)::BaseType::BufferWriter
        end_time_writer;
    mojo::internal::Serialize<::mojo_base::mojom::TimeDataView>(
        in_end_time, buffer, &end_time_writer, context);
    (*output)->end_time.Set(
        end_time_writer.is_null() ? nullptr : end_time_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->end_time.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null end_time in PublicCertificate struct");
    decltype(Traits::encrypted_metadata_bytes(input)) in_encrypted_metadata_bytes = Traits::encrypted_metadata_bytes(input);
    typename decltype((*output)->encrypted_metadata_bytes)::BaseType::BufferWriter
        encrypted_metadata_bytes_writer;
    const mojo::internal::ContainerValidateParams encrypted_metadata_bytes_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<uint8_t>>(
        in_encrypted_metadata_bytes, buffer, &encrypted_metadata_bytes_writer, &encrypted_metadata_bytes_validate_params,
        context);
    (*output)->encrypted_metadata_bytes.Set(
        encrypted_metadata_bytes_writer.is_null() ? nullptr : encrypted_metadata_bytes_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->encrypted_metadata_bytes.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null encrypted_metadata_bytes in PublicCertificate struct");
    decltype(Traits::metadata_encryption_key_tag(input)) in_metadata_encryption_key_tag = Traits::metadata_encryption_key_tag(input);
    typename decltype((*output)->metadata_encryption_key_tag)::BaseType::BufferWriter
        metadata_encryption_key_tag_writer;
    const mojo::internal::ContainerValidateParams metadata_encryption_key_tag_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<uint8_t>>(
        in_metadata_encryption_key_tag, buffer, &metadata_encryption_key_tag_writer, &metadata_encryption_key_tag_validate_params,
        context);
    (*output)->metadata_encryption_key_tag.Set(
        metadata_encryption_key_tag_writer.is_null() ? nullptr : metadata_encryption_key_tag_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->metadata_encryption_key_tag.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null metadata_encryption_key_tag in PublicCertificate struct");
  }

  static bool Deserialize(::sharing::mojom::internal::PublicCertificate_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::sharing::mojom::PublicCertificateDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::sharing::mojom::FrameDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = UnionTraits<::sharing::mojom::FrameDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::sharing::mojom::internal::Frame_Data::BufferWriter* writer,
                        bool inlined,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input)) {
       if (inlined)
         writer->data()->set_null();
      return;
    }
    if (!inlined)
      writer->Allocate(buffer);

    ::sharing::mojom::internal::Frame_Data::BufferWriter& result = *writer;
    ALLOW_UNUSED_LOCAL(result);
    // TODO(azani): Handle unknown and objects.
    // Set the not-null flag.
    result->size = kUnionDataSize;
    result->tag = Traits::GetTag(input);
    switch (result->tag) {
      case ::sharing::mojom::FrameDataView::Tag::V1: {
        decltype(Traits::v1(input))
            in_v1 = Traits::v1(input);
        typename decltype(result->data.f_v1)::BaseType::BufferWriter
            value_writer;
        mojo::internal::Serialize<::sharing::mojom::V1FrameDataView>(
            in_v1, buffer, &value_writer, false, context);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_writer.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null v1 in Frame union");
        result->data.f_v1.Set(
            value_writer.is_null() ? nullptr : value_writer.data());
        break;
      }
    }
  }

  static bool Deserialize(::sharing::mojom::internal::Frame_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input || input->is_null())
      return CallSetToNullIfExists<Traits>(output);

    ::sharing::mojom::FrameDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::sharing::mojom::V1FrameDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = UnionTraits<::sharing::mojom::V1FrameDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::sharing::mojom::internal::V1Frame_Data::BufferWriter* writer,
                        bool inlined,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input)) {
       if (inlined)
         writer->data()->set_null();
      return;
    }
    if (!inlined)
      writer->Allocate(buffer);

    ::sharing::mojom::internal::V1Frame_Data::BufferWriter& result = *writer;
    ALLOW_UNUSED_LOCAL(result);
    // TODO(azani): Handle unknown and objects.
    // Set the not-null flag.
    result->size = kUnionDataSize;
    result->tag = Traits::GetTag(input);
    switch (result->tag) {
      case ::sharing::mojom::V1FrameDataView::Tag::INTRODUCTION: {
        decltype(Traits::introduction(input))
            in_introduction = Traits::introduction(input);
        typename decltype(result->data.f_introduction)::BaseType::BufferWriter
            value_writer;
        mojo::internal::Serialize<::sharing::mojom::IntroductionFrameDataView>(
            in_introduction, buffer, &value_writer, context);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_writer.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null introduction in V1Frame union");
        result->data.f_introduction.Set(
            value_writer.is_null() ? nullptr : value_writer.data());
        break;
      }
      case ::sharing::mojom::V1FrameDataView::Tag::CONNECTION_RESPONSE: {
        decltype(Traits::connection_response(input))
            in_connection_response = Traits::connection_response(input);
        typename decltype(result->data.f_connection_response)::BaseType::BufferWriter
            value_writer;
        mojo::internal::Serialize<::sharing::mojom::ConnectionResponseFrameDataView>(
            in_connection_response, buffer, &value_writer, context);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_writer.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null connection_response in V1Frame union");
        result->data.f_connection_response.Set(
            value_writer.is_null() ? nullptr : value_writer.data());
        break;
      }
      case ::sharing::mojom::V1FrameDataView::Tag::PAIRED_KEY_ENCRYPTION: {
        decltype(Traits::paired_key_encryption(input))
            in_paired_key_encryption = Traits::paired_key_encryption(input);
        typename decltype(result->data.f_paired_key_encryption)::BaseType::BufferWriter
            value_writer;
        mojo::internal::Serialize<::sharing::mojom::PairedKeyEncryptionFrameDataView>(
            in_paired_key_encryption, buffer, &value_writer, context);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_writer.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null paired_key_encryption in V1Frame union");
        result->data.f_paired_key_encryption.Set(
            value_writer.is_null() ? nullptr : value_writer.data());
        break;
      }
      case ::sharing::mojom::V1FrameDataView::Tag::PAIRED_KEY_RESULT: {
        decltype(Traits::paired_key_result(input))
            in_paired_key_result = Traits::paired_key_result(input);
        typename decltype(result->data.f_paired_key_result)::BaseType::BufferWriter
            value_writer;
        mojo::internal::Serialize<::sharing::mojom::PairedKeyResultFrameDataView>(
            in_paired_key_result, buffer, &value_writer, context);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_writer.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null paired_key_result in V1Frame union");
        result->data.f_paired_key_result.Set(
            value_writer.is_null() ? nullptr : value_writer.data());
        break;
      }
      case ::sharing::mojom::V1FrameDataView::Tag::CERTIFICATE_INFO: {
        decltype(Traits::certificate_info(input))
            in_certificate_info = Traits::certificate_info(input);
        typename decltype(result->data.f_certificate_info)::BaseType::BufferWriter
            value_writer;
        mojo::internal::Serialize<::sharing::mojom::CertificateInfoFrameDataView>(
            in_certificate_info, buffer, &value_writer, context);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_writer.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null certificate_info in V1Frame union");
        result->data.f_certificate_info.Set(
            value_writer.is_null() ? nullptr : value_writer.data());
        break;
      }
    }
  }

  static bool Deserialize(::sharing::mojom::internal::V1Frame_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input || input->is_null())
      return CallSetToNullIfExists<Traits>(output);

    ::sharing::mojom::V1FrameDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace sharing {
namespace mojom {

inline void AdvertisementDataView::GetSaltDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->salt.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, context_);
}
inline void AdvertisementDataView::GetEncryptedMetadataDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->encrypted_metadata.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, context_);
}
inline void AdvertisementDataView::GetDeviceNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->device_name.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void IntroductionFrameDataView::GetFileMetadataDataView(
    mojo::ArrayDataView<FileMetadataDataView>* output) {
  auto pointer = data_->file_metadata.Get();
  *output = mojo::ArrayDataView<FileMetadataDataView>(pointer, context_);
}
inline void IntroductionFrameDataView::GetTextMetadataDataView(
    mojo::ArrayDataView<TextMetadataDataView>* output) {
  auto pointer = data_->text_metadata.Get();
  *output = mojo::ArrayDataView<TextMetadataDataView>(pointer, context_);
}
inline void IntroductionFrameDataView::GetRequiredPackageDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->required_package.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void IntroductionFrameDataView::GetWifiCredentialsMetadataDataView(
    mojo::ArrayDataView<WifiCredentialsMetadataDataView>* output) {
  auto pointer = data_->wifi_credentials_metadata.Get();
  *output = mojo::ArrayDataView<WifiCredentialsMetadataDataView>(pointer, context_);
}


inline void FileMetadataDataView::GetNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->name.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void FileMetadataDataView::GetMimeTypeDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->mime_type.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void TextMetadataDataView::GetTextTitleDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->text_title.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void WifiCredentialsMetadataDataView::GetSsidDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->ssid.Get();
  *output = mojo::StringDataView(pointer, context_);
}




inline void PairedKeyEncryptionFrameDataView::GetSignedDataDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->signed_data.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, context_);
}
inline void PairedKeyEncryptionFrameDataView::GetSecretIdHashDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->secret_id_hash.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, context_);
}




inline void CertificateInfoFrameDataView::GetPublicCertificateDataView(
    mojo::ArrayDataView<PublicCertificateDataView>* output) {
  auto pointer = data_->public_certificate.Get();
  *output = mojo::ArrayDataView<PublicCertificateDataView>(pointer, context_);
}


inline void PublicCertificateDataView::GetSecretIdDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->secret_id.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, context_);
}
inline void PublicCertificateDataView::GetAuthenticityKeyDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->authenticity_key.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, context_);
}
inline void PublicCertificateDataView::GetPublicKeyDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->public_key.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, context_);
}
inline void PublicCertificateDataView::GetStartTimeDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->start_time.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, context_);
}
inline void PublicCertificateDataView::GetEndTimeDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->end_time.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, context_);
}
inline void PublicCertificateDataView::GetEncryptedMetadataBytesDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->encrypted_metadata_bytes.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, context_);
}
inline void PublicCertificateDataView::GetMetadataEncryptionKeyTagDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->metadata_encryption_key_tag.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, context_);
}


inline void FrameDataView::GetV1DataView(
    V1FrameDataView* output) {
  DCHECK(is_v1());
  *output = V1FrameDataView(data_->data.f_v1.Get(), context_);
}

inline void V1FrameDataView::GetIntroductionDataView(
    IntroductionFrameDataView* output) {
  DCHECK(is_introduction());
  *output = IntroductionFrameDataView(data_->data.f_introduction.Get(), context_);
}
inline void V1FrameDataView::GetConnectionResponseDataView(
    ConnectionResponseFrameDataView* output) {
  DCHECK(is_connection_response());
  *output = ConnectionResponseFrameDataView(data_->data.f_connection_response.Get(), context_);
}
inline void V1FrameDataView::GetPairedKeyEncryptionDataView(
    PairedKeyEncryptionFrameDataView* output) {
  DCHECK(is_paired_key_encryption());
  *output = PairedKeyEncryptionFrameDataView(data_->data.f_paired_key_encryption.Get(), context_);
}
inline void V1FrameDataView::GetPairedKeyResultDataView(
    PairedKeyResultFrameDataView* output) {
  DCHECK(is_paired_key_result());
  *output = PairedKeyResultFrameDataView(data_->data.f_paired_key_result.Get(), context_);
}
inline void V1FrameDataView::GetCertificateInfoDataView(
    CertificateInfoFrameDataView* output) {
  DCHECK(is_certificate_info());
  *output = CertificateInfoFrameDataView(data_->data.f_certificate_info.Get(), context_);
}


}  // namespace mojom
}  // namespace sharing

#endif  // CHROME_SERVICES_SHARING_PUBLIC_MOJOM_NEARBY_DECODER_TYPES_MOJOM_SHARED_H_
// chrome/services/sharing/public/mojom/nearby_connections_types.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "chrome/services/sharing/public/mojom/nearby_connections_types.mojom-shared.h"

#include <utility>

#include "base/logging.h"
#include "base/stl_util.h"  // for base::size()
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"

#include "chrome/services/sharing/public/mojom/nearby_connections_types.mojom-params-data.h"
namespace location {
namespace nearby {
namespace connections {
namespace mojom {

std::ostream& operator<<(std::ostream& os, Status value) {
  switch(value) {
    case Status::kSuccess:
      return os << "Status::kSuccess";
    case Status::kError:
      return os << "Status::kError";
    case Status::kOutOfOrderApiCall:
      return os << "Status::kOutOfOrderApiCall";
    case Status::kAlreadyHaveActiveStrategy:
      return os << "Status::kAlreadyHaveActiveStrategy";
    case Status::kAlreadyAdvertising:
      return os << "Status::kAlreadyAdvertising";
    case Status::kAlreadyDiscovering:
      return os << "Status::kAlreadyDiscovering";
    case Status::kEndpointIOError:
      return os << "Status::kEndpointIOError";
    case Status::kEndpointUnknown:
      return os << "Status::kEndpointUnknown";
    case Status::kConnectionRejected:
      return os << "Status::kConnectionRejected";
    case Status::kAlreadyConnectedToEndpoint:
      return os << "Status::kAlreadyConnectedToEndpoint";
    case Status::kNotConnectedToEndpoint:
      return os << "Status::kNotConnectedToEndpoint";
    case Status::kRadioError:
      return os << "Status::kRadioError";
    case Status::kPayloadUnknown:
      return os << "Status::kPayloadUnknown";
    default:
      return os << "Unknown Status value: " << static_cast<int32_t>(value);
  }
}

std::ostream& operator<<(std::ostream& os, Strategy value) {
  switch(value) {
    case Strategy::kP2pCluster:
      return os << "Strategy::kP2pCluster";
    case Strategy::kP2pStar:
      return os << "Strategy::kP2pStar";
    case Strategy::kP2pPointToPoint:
      return os << "Strategy::kP2pPointToPoint";
    default:
      return os << "Unknown Strategy value: " << static_cast<int32_t>(value);
  }
}

std::ostream& operator<<(std::ostream& os, PayloadStatus value) {
  switch(value) {
    case PayloadStatus::kSuccess:
      return os << "PayloadStatus::kSuccess";
    case PayloadStatus::kFailure:
      return os << "PayloadStatus::kFailure";
    case PayloadStatus::kInProgress:
      return os << "PayloadStatus::kInProgress";
    case PayloadStatus::kCanceled:
      return os << "PayloadStatus::kCanceled";
    default:
      return os << "Unknown PayloadStatus value: " << static_cast<int32_t>(value);
  }
}

std::ostream& operator<<(std::ostream& os, BandwidthQuality value) {
  switch(value) {
    case BandwidthQuality::kUnknown:
      return os << "BandwidthQuality::kUnknown";
    case BandwidthQuality::kLow:
      return os << "BandwidthQuality::kLow";
    case BandwidthQuality::kMedium:
      return os << "BandwidthQuality::kMedium";
    case BandwidthQuality::kHigh:
      return os << "BandwidthQuality::kHigh";
    default:
      return os << "Unknown BandwidthQuality value: " << static_cast<int32_t>(value);
  }
}

namespace internal {
// static
bool PayloadContent_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context,
    bool inlined) {
  if (!data) {
    DCHECK(!inlined);
    return true;
  }

  // If it is inlined, the alignment is already enforced by its enclosing
  // object. We don't have to validate that.
  DCHECK(!inlined || mojo::internal::IsAligned(data));

  if (!inlined &&
      !mojo::internal::ValidateNonInlinedUnionHeaderAndClaimMemory(
          data, validation_context)) {
    return false;
  }

  const PayloadContent_Data* object = static_cast<const PayloadContent_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (inlined && object->is_null())
    return true;

  switch (object->tag) {

    case PayloadContent_Tag::BYTES: {

      if (!mojo::internal::ValidatePointerNonNullable(
              object->data.f_bytes, 1, validation_context)) {
        return false;
      }
      if (!mojo::internal::ValidateStruct(object->data.f_bytes, validation_context))
        return false;
      return true;
    }
    case PayloadContent_Tag::FILE: {

      if (!mojo::internal::ValidatePointerNonNullable(
              object->data.f_file, 2, validation_context)) {
        return false;
      }
      if (!mojo::internal::ValidateStruct(object->data.f_file, validation_context))
        return false;
      return true;
    }
    default: {
      ReportValidationError(
          validation_context,
          mojo::internal::VALIDATION_ERROR_UNKNOWN_UNION_TAG,
          "unknown tag in PayloadContent");
      return false;
    }
  }
}


// static
bool ConnectionInfo_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;

  if (!ValidateStructHeaderAndClaimMemory(data, validation_context))
    return false;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ConnectionInfo_Data* object = static_cast<const ConnectionInfo_Data*>(data);

  static constexpr struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 48 }};

  if (object->header_.version <=
          kVersionSizes[base::size(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = base::size(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        ReportValidationError(
            validation_context,
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
        return false;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[base::size(kVersionSizes) - 1].num_bytes) {
    ReportValidationError(
        validation_context,
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->remote_endpoint_name, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams remote_endpoint_name_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->remote_endpoint_name, validation_context,
                                         &remote_endpoint_name_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->authentication_token, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams authentication_token_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->authentication_token, validation_context,
                                         &authentication_token_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->raw_authentication_token, 3, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams raw_authentication_token_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->raw_authentication_token, validation_context,
                                         &raw_authentication_token_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->endpoint_info, 5, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams endpoint_info_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->endpoint_info, validation_context,
                                         &endpoint_info_validate_params)) {
    return false;
  }

  return true;
}

ConnectionInfo_Data::ConnectionInfo_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool DiscoveredEndpointInfo_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;

  if (!ValidateStructHeaderAndClaimMemory(data, validation_context))
    return false;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const DiscoveredEndpointInfo_Data* object = static_cast<const DiscoveredEndpointInfo_Data*>(data);

  static constexpr struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 32 }};

  if (object->header_.version <=
          kVersionSizes[base::size(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = base::size(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        ReportValidationError(
            validation_context,
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
        return false;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[base::size(kVersionSizes) - 1].num_bytes) {
    ReportValidationError(
        validation_context,
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->service_id, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams service_id_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->service_id, validation_context,
                                         &service_id_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->endpoint_name, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams endpoint_name_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->endpoint_name, validation_context,
                                         &endpoint_name_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->endpoint_info, 3, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams endpoint_info_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->endpoint_info, validation_context,
                                         &endpoint_info_validate_params)) {
    return false;
  }

  return true;
}

DiscoveredEndpointInfo_Data::DiscoveredEndpointInfo_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool AdvertisingOptions_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;

  if (!ValidateStructHeaderAndClaimMemory(data, validation_context))
    return false;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const AdvertisingOptions_Data* object = static_cast<const AdvertisingOptions_Data*>(data);

  static constexpr struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[base::size(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = base::size(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        ReportValidationError(
            validation_context,
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
        return false;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[base::size(kVersionSizes) - 1].num_bytes) {
    ReportValidationError(
        validation_context,
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
    return false;
  }


  if (!::location::nearby::connections::mojom::internal::Strategy_Data
        ::Validate(object->strategy, validation_context))
    return false;

  return true;
}

AdvertisingOptions_Data::AdvertisingOptions_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool DiscoveryOptions_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;

  if (!ValidateStructHeaderAndClaimMemory(data, validation_context))
    return false;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const DiscoveryOptions_Data* object = static_cast<const DiscoveryOptions_Data*>(data);

  static constexpr struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[base::size(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = base::size(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        ReportValidationError(
            validation_context,
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
        return false;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[base::size(kVersionSizes) - 1].num_bytes) {
    ReportValidationError(
        validation_context,
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
    return false;
  }


  if (!::location::nearby::connections::mojom::internal::Strategy_Data
        ::Validate(object->strategy, validation_context))
    return false;

  return true;
}

DiscoveryOptions_Data::DiscoveryOptions_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool BytesPayload_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;

  if (!ValidateStructHeaderAndClaimMemory(data, validation_context))
    return false;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const BytesPayload_Data* object = static_cast<const BytesPayload_Data*>(data);

  static constexpr struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[base::size(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = base::size(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        ReportValidationError(
            validation_context,
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
        return false;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[base::size(kVersionSizes) - 1].num_bytes) {
    ReportValidationError(
        validation_context,
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->bytes, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams bytes_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->bytes, validation_context,
                                         &bytes_validate_params)) {
    return false;
  }

  return true;
}

BytesPayload_Data::BytesPayload_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool FilePayload_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;

  if (!ValidateStructHeaderAndClaimMemory(data, validation_context))
    return false;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const FilePayload_Data* object = static_cast<const FilePayload_Data*>(data);

  static constexpr struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[base::size(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = base::size(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        ReportValidationError(
            validation_context,
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
        return false;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[base::size(kVersionSizes) - 1].num_bytes) {
    ReportValidationError(
        validation_context,
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->file, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->file, validation_context))
    return false;

  return true;
}

FilePayload_Data::FilePayload_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Payload_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;

  if (!ValidateStructHeaderAndClaimMemory(data, validation_context))
    return false;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Payload_Data* object = static_cast<const Payload_Data*>(data);

  static constexpr struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 32 }};

  if (object->header_.version <=
          kVersionSizes[base::size(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = base::size(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        ReportValidationError(
            validation_context,
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
        return false;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[base::size(kVersionSizes) - 1].num_bytes) {
    ReportValidationError(
        validation_context,
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
    return false;
  }

  if (!mojo::internal::ValidateInlinedUnionNonNullable(
          object->content, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateInlinedUnion(object->content, validation_context))
    return false;

  return true;
}

Payload_Data::Payload_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool PayloadTransferUpdate_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;

  if (!ValidateStructHeaderAndClaimMemory(data, validation_context))
    return false;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PayloadTransferUpdate_Data* object = static_cast<const PayloadTransferUpdate_Data*>(data);

  static constexpr struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 40 }};

  if (object->header_.version <=
          kVersionSizes[base::size(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = base::size(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        ReportValidationError(
            validation_context,
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
        return false;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[base::size(kVersionSizes) - 1].num_bytes) {
    ReportValidationError(
        validation_context,
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
    return false;
  }


  if (!::location::nearby::connections::mojom::internal::PayloadStatus_Data
        ::Validate(object->status, validation_context))
    return false;

  return true;
}

PayloadTransferUpdate_Data::PayloadTransferUpdate_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace connections
}  // namespace nearby
}  // namespace location
// chrome/services/sharing/public/mojom/webrtc.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_SERVICES_SHARING_PUBLIC_MOJOM_WEBRTC_MOJOM_PARAMS_DATA_H_
#define CHROME_SERVICES_SHARING_PUBLIC_MOJOM_WEBRTC_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace sharing {
namespace mojom {
namespace internal {
class  SignallingSender_SendOffer_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SignallingSender_SendOffer_Params_Data));
      new (data()) SignallingSender_SendOffer_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SignallingSender_SendOffer_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SignallingSender_SendOffer_Params_Data>(index_);
    }
    SignallingSender_SendOffer_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> offer;

 private:
  SignallingSender_SendOffer_Params_Data();
  ~SignallingSender_SendOffer_Params_Data() = delete;
};
static_assert(sizeof(SignallingSender_SendOffer_Params_Data) == 16,
              "Bad sizeof(SignallingSender_SendOffer_Params_Data)");
class  SignallingSender_SendOffer_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SignallingSender_SendOffer_ResponseParams_Data));
      new (data()) SignallingSender_SendOffer_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SignallingSender_SendOffer_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SignallingSender_SendOffer_ResponseParams_Data>(index_);
    }
    SignallingSender_SendOffer_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> answer;

 private:
  SignallingSender_SendOffer_ResponseParams_Data();
  ~SignallingSender_SendOffer_ResponseParams_Data() = delete;
};
static_assert(sizeof(SignallingSender_SendOffer_ResponseParams_Data) == 16,
              "Bad sizeof(SignallingSender_SendOffer_ResponseParams_Data)");
class  SignallingSender_SendIceCandidates_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SignallingSender_SendIceCandidates_Params_Data));
      new (data()) SignallingSender_SendIceCandidates_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SignallingSender_SendIceCandidates_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SignallingSender_SendIceCandidates_Params_Data>(index_);
    }
    SignallingSender_SendIceCandidates_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::IceCandidate_Data>>> ice_candidates;

 private:
  SignallingSender_SendIceCandidates_Params_Data();
  ~SignallingSender_SendIceCandidates_Params_Data() = delete;
};
static_assert(sizeof(SignallingSender_SendIceCandidates_Params_Data) == 16,
              "Bad sizeof(SignallingSender_SendIceCandidates_Params_Data)");
class  SignallingReceiver_OnOfferReceived_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SignallingReceiver_OnOfferReceived_Params_Data));
      new (data()) SignallingReceiver_OnOfferReceived_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SignallingReceiver_OnOfferReceived_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SignallingReceiver_OnOfferReceived_Params_Data>(index_);
    }
    SignallingReceiver_OnOfferReceived_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> offer;

 private:
  SignallingReceiver_OnOfferReceived_Params_Data();
  ~SignallingReceiver_OnOfferReceived_Params_Data() = delete;
};
static_assert(sizeof(SignallingReceiver_OnOfferReceived_Params_Data) == 16,
              "Bad sizeof(SignallingReceiver_OnOfferReceived_Params_Data)");
class  SignallingReceiver_OnOfferReceived_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SignallingReceiver_OnOfferReceived_ResponseParams_Data));
      new (data()) SignallingReceiver_OnOfferReceived_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SignallingReceiver_OnOfferReceived_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SignallingReceiver_OnOfferReceived_ResponseParams_Data>(index_);
    }
    SignallingReceiver_OnOfferReceived_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> answer;

 private:
  SignallingReceiver_OnOfferReceived_ResponseParams_Data();
  ~SignallingReceiver_OnOfferReceived_ResponseParams_Data() = delete;
};
static_assert(sizeof(SignallingReceiver_OnOfferReceived_ResponseParams_Data) == 16,
              "Bad sizeof(SignallingReceiver_OnOfferReceived_ResponseParams_Data)");
class  SignallingReceiver_OnIceCandidatesReceived_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SignallingReceiver_OnIceCandidatesReceived_Params_Data));
      new (data()) SignallingReceiver_OnIceCandidatesReceived_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SignallingReceiver_OnIceCandidatesReceived_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SignallingReceiver_OnIceCandidatesReceived_Params_Data>(index_);
    }
    SignallingReceiver_OnIceCandidatesReceived_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::IceCandidate_Data>>> ice_candidates;

 private:
  SignallingReceiver_OnIceCandidatesReceived_Params_Data();
  ~SignallingReceiver_OnIceCandidatesReceived_Params_Data() = delete;
};
static_assert(sizeof(SignallingReceiver_OnIceCandidatesReceived_Params_Data) == 16,
              "Bad sizeof(SignallingReceiver_OnIceCandidatesReceived_Params_Data)");
class  SharingWebRtcConnectionDelegate_OnMessageReceived_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SharingWebRtcConnectionDelegate_OnMessageReceived_Params_Data));
      new (data()) SharingWebRtcConnectionDelegate_OnMessageReceived_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SharingWebRtcConnectionDelegate_OnMessageReceived_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SharingWebRtcConnectionDelegate_OnMessageReceived_Params_Data>(index_);
    }
    SharingWebRtcConnectionDelegate_OnMessageReceived_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>> message;

 private:
  SharingWebRtcConnectionDelegate_OnMessageReceived_Params_Data();
  ~SharingWebRtcConnectionDelegate_OnMessageReceived_Params_Data() = delete;
};
static_assert(sizeof(SharingWebRtcConnectionDelegate_OnMessageReceived_Params_Data) == 16,
              "Bad sizeof(SharingWebRtcConnectionDelegate_OnMessageReceived_Params_Data)");
class  SharingWebRtcConnection_SendMessage_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SharingWebRtcConnection_SendMessage_Params_Data));
      new (data()) SharingWebRtcConnection_SendMessage_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SharingWebRtcConnection_SendMessage_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SharingWebRtcConnection_SendMessage_Params_Data>(index_);
    }
    SharingWebRtcConnection_SendMessage_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>> message;

 private:
  SharingWebRtcConnection_SendMessage_Params_Data();
  ~SharingWebRtcConnection_SendMessage_Params_Data() = delete;
};
static_assert(sizeof(SharingWebRtcConnection_SendMessage_Params_Data) == 16,
              "Bad sizeof(SharingWebRtcConnection_SendMessage_Params_Data)");
class  SharingWebRtcConnection_SendMessage_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(SharingWebRtcConnection_SendMessage_ResponseParams_Data));
      new (data()) SharingWebRtcConnection_SendMessage_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    SharingWebRtcConnection_SendMessage_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<SharingWebRtcConnection_SendMessage_ResponseParams_Data>(index_);
    }
    SharingWebRtcConnection_SendMessage_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t result;
  uint8_t padfinal_[4];

 private:
  SharingWebRtcConnection_SendMessage_ResponseParams_Data();
  ~SharingWebRtcConnection_SendMessage_ResponseParams_Data() = delete;
};
static_assert(sizeof(SharingWebRtcConnection_SendMessage_ResponseParams_Data) == 16,
              "Bad sizeof(SharingWebRtcConnection_SendMessage_ResponseParams_Data)");

}  // namespace internal
class SignallingSender_SendOffer_ParamsDataView {
 public:
  SignallingSender_SendOffer_ParamsDataView() {}

  SignallingSender_SendOffer_ParamsDataView(
      internal::SignallingSender_SendOffer_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetOfferDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadOffer(UserType* output) {
    auto* pointer = data_->offer.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::SignallingSender_SendOffer_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class SignallingSender_SendOffer_ResponseParamsDataView {
 public:
  SignallingSender_SendOffer_ResponseParamsDataView() {}

  SignallingSender_SendOffer_ResponseParamsDataView(
      internal::SignallingSender_SendOffer_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetAnswerDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAnswer(UserType* output) {
    auto* pointer = data_->answer.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::SignallingSender_SendOffer_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class SignallingSender_SendIceCandidates_ParamsDataView {
 public:
  SignallingSender_SendIceCandidates_ParamsDataView() {}

  SignallingSender_SendIceCandidates_ParamsDataView(
      internal::SignallingSender_SendIceCandidates_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetIceCandidatesDataView(
      mojo::ArrayDataView<IceCandidateDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadIceCandidates(UserType* output) {
    auto* pointer = data_->ice_candidates.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::sharing::mojom::IceCandidateDataView>>(
        pointer, output, context_);
  }
 private:
  internal::SignallingSender_SendIceCandidates_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class SignallingReceiver_OnOfferReceived_ParamsDataView {
 public:
  SignallingReceiver_OnOfferReceived_ParamsDataView() {}

  SignallingReceiver_OnOfferReceived_ParamsDataView(
      internal::SignallingReceiver_OnOfferReceived_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetOfferDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadOffer(UserType* output) {
    auto* pointer = data_->offer.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::SignallingReceiver_OnOfferReceived_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class SignallingReceiver_OnOfferReceived_ResponseParamsDataView {
 public:
  SignallingReceiver_OnOfferReceived_ResponseParamsDataView() {}

  SignallingReceiver_OnOfferReceived_ResponseParamsDataView(
      internal::SignallingReceiver_OnOfferReceived_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetAnswerDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAnswer(UserType* output) {
    auto* pointer = data_->answer.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::SignallingReceiver_OnOfferReceived_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class SignallingReceiver_OnIceCandidatesReceived_ParamsDataView {
 public:
  SignallingReceiver_OnIceCandidatesReceived_ParamsDataView() {}

  SignallingReceiver_OnIceCandidatesReceived_ParamsDataView(
      internal::SignallingReceiver_OnIceCandidatesReceived_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetIceCandidatesDataView(
      mojo::ArrayDataView<IceCandidateDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadIceCandidates(UserType* output) {
    auto* pointer = data_->ice_candidates.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::sharing::mojom::IceCandidateDataView>>(
        pointer, output, context_);
  }
 private:
  internal::SignallingReceiver_OnIceCandidatesReceived_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class SharingWebRtcConnectionDelegate_OnMessageReceived_ParamsDataView {
 public:
  SharingWebRtcConnectionDelegate_OnMessageReceived_ParamsDataView() {}

  SharingWebRtcConnectionDelegate_OnMessageReceived_ParamsDataView(
      internal::SharingWebRtcConnectionDelegate_OnMessageReceived_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetMessageDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadMessage(UserType* output) {
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, context_);
  }
 private:
  internal::SharingWebRtcConnectionDelegate_OnMessageReceived_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class SharingWebRtcConnection_SendMessage_ParamsDataView {
 public:
  SharingWebRtcConnection_SendMessage_ParamsDataView() {}

  SharingWebRtcConnection_SendMessage_ParamsDataView(
      internal::SharingWebRtcConnection_SendMessage_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetMessageDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadMessage(UserType* output) {
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, context_);
  }
 private:
  internal::SharingWebRtcConnection_SendMessage_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class SharingWebRtcConnection_SendMessage_ResponseParamsDataView {
 public:
  SharingWebRtcConnection_SendMessage_ResponseParamsDataView() {}

  SharingWebRtcConnection_SendMessage_ResponseParamsDataView(
      internal::SharingWebRtcConnection_SendMessage_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadResult(UserType* output) const {
    auto data_value = data_->result;
    return mojo::internal::Deserialize<::sharing::mojom::SendMessageResult>(
        data_value, output);
  }

  SendMessageResult result() const {
    return static_cast<SendMessageResult>(data_->result);
  }
 private:
  internal::SharingWebRtcConnection_SendMessage_ResponseParams_Data* data_ = nullptr;
};


inline void SignallingSender_SendOffer_ParamsDataView::GetOfferDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->offer.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void SignallingSender_SendOffer_ResponseParamsDataView::GetAnswerDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->answer.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void SignallingSender_SendIceCandidates_ParamsDataView::GetIceCandidatesDataView(
    mojo::ArrayDataView<IceCandidateDataView>* output) {
  auto pointer = data_->ice_candidates.Get();
  *output = mojo::ArrayDataView<IceCandidateDataView>(pointer, context_);
}


inline void SignallingReceiver_OnOfferReceived_ParamsDataView::GetOfferDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->offer.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void SignallingReceiver_OnOfferReceived_ResponseParamsDataView::GetAnswerDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->answer.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void SignallingReceiver_OnIceCandidatesReceived_ParamsDataView::GetIceCandidatesDataView(
    mojo::ArrayDataView<IceCandidateDataView>* output) {
  auto pointer = data_->ice_candidates.Get();
  *output = mojo::ArrayDataView<IceCandidateDataView>(pointer, context_);
}


inline void SharingWebRtcConnectionDelegate_OnMessageReceived_ParamsDataView::GetMessageDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->message.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, context_);
}


inline void SharingWebRtcConnection_SendMessage_ParamsDataView::GetMessageDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->message.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, context_);
}



}  // namespace mojom
}  // namespace sharing

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CHROME_SERVICES_SHARING_PUBLIC_MOJOM_WEBRTC_MOJOM_PARAMS_DATA_H_
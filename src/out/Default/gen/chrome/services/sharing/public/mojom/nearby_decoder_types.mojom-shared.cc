// chrome/services/sharing/public/mojom/nearby_decoder_types.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "chrome/services/sharing/public/mojom/nearby_decoder_types.mojom-shared.h"

#include <utility>

#include "base/logging.h"
#include "base/stl_util.h"  // for base::size()
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"

#include "chrome/services/sharing/public/mojom/nearby_decoder_types.mojom-params-data.h"
namespace sharing {
namespace mojom {

std::ostream& operator<<(std::ostream& os, FileMetadata_Type value) {
  switch(value) {
    case FileMetadata_Type::kUnknown:
      return os << "FileMetadata_Type::kUnknown";
    case FileMetadata_Type::kImage:
      return os << "FileMetadata_Type::kImage";
    case FileMetadata_Type::kVideo:
      return os << "FileMetadata_Type::kVideo";
    case FileMetadata_Type::kApp:
      return os << "FileMetadata_Type::kApp";
    case FileMetadata_Type::kAudio:
      return os << "FileMetadata_Type::kAudio";
    default:
      return os << "Unknown FileMetadata_Type value: " << static_cast<int32_t>(value);
  }
}

std::ostream& operator<<(std::ostream& os, TextMetadata_Type value) {
  switch(value) {
    case TextMetadata_Type::kUnknown:
      return os << "TextMetadata_Type::kUnknown";
    case TextMetadata_Type::kText:
      return os << "TextMetadata_Type::kText";
    case TextMetadata_Type::kUrl:
      return os << "TextMetadata_Type::kUrl";
    case TextMetadata_Type::kAddress:
      return os << "TextMetadata_Type::kAddress";
    case TextMetadata_Type::kPhoneNumber:
      return os << "TextMetadata_Type::kPhoneNumber";
    default:
      return os << "Unknown TextMetadata_Type value: " << static_cast<int32_t>(value);
  }
}

std::ostream& operator<<(std::ostream& os, WifiCredentialsMetadata_SecurityType value) {
  switch(value) {
    case WifiCredentialsMetadata_SecurityType::kUnknownSecurityType:
      return os << "WifiCredentialsMetadata_SecurityType::kUnknownSecurityType";
    case WifiCredentialsMetadata_SecurityType::kOpen:
      return os << "WifiCredentialsMetadata_SecurityType::kOpen";
    case WifiCredentialsMetadata_SecurityType::kWpaPsk:
      return os << "WifiCredentialsMetadata_SecurityType::kWpaPsk";
    case WifiCredentialsMetadata_SecurityType::kWep:
      return os << "WifiCredentialsMetadata_SecurityType::kWep";
    default:
      return os << "Unknown WifiCredentialsMetadata_SecurityType value: " << static_cast<int32_t>(value);
  }
}

std::ostream& operator<<(std::ostream& os, ConnectionResponseFrame_Status value) {
  switch(value) {
    case ConnectionResponseFrame_Status::kUnknown:
      return os << "ConnectionResponseFrame_Status::kUnknown";
    case ConnectionResponseFrame_Status::kAccept:
      return os << "ConnectionResponseFrame_Status::kAccept";
    case ConnectionResponseFrame_Status::kReject:
      return os << "ConnectionResponseFrame_Status::kReject";
    case ConnectionResponseFrame_Status::kNotEnoughSpace:
      return os << "ConnectionResponseFrame_Status::kNotEnoughSpace";
    case ConnectionResponseFrame_Status::kUnsupportedAttachmentType:
      return os << "ConnectionResponseFrame_Status::kUnsupportedAttachmentType";
    case ConnectionResponseFrame_Status::kTimedOut:
      return os << "ConnectionResponseFrame_Status::kTimedOut";
    default:
      return os << "Unknown ConnectionResponseFrame_Status value: " << static_cast<int32_t>(value);
  }
}

std::ostream& operator<<(std::ostream& os, PairedKeyResultFrame_Status value) {
  switch(value) {
    case PairedKeyResultFrame_Status::kUnknown:
      return os << "PairedKeyResultFrame_Status::kUnknown";
    case PairedKeyResultFrame_Status::kSuccess:
      return os << "PairedKeyResultFrame_Status::kSuccess";
    case PairedKeyResultFrame_Status::kFail:
      return os << "PairedKeyResultFrame_Status::kFail";
    case PairedKeyResultFrame_Status::kUnable:
      return os << "PairedKeyResultFrame_Status::kUnable";
    default:
      return os << "Unknown PairedKeyResultFrame_Status value: " << static_cast<int32_t>(value);
  }
}

namespace internal {
// static
bool Frame_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context,
    bool inlined) {
  if (!data) {
    DCHECK(!inlined);
    return true;
  }

  // If it is inlined, the alignment is already enforced by its enclosing
  // object. We don't have to validate that.
  DCHECK(!inlined || mojo::internal::IsAligned(data));

  if (!inlined &&
      !mojo::internal::ValidateNonInlinedUnionHeaderAndClaimMemory(
          data, validation_context)) {
    return false;
  }

  const Frame_Data* object = static_cast<const Frame_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (inlined && object->is_null())
    return true;

  switch (object->tag) {

    case Frame_Tag::V1: {

      if (!mojo::internal::ValidatePointerNonNullable(
              object->data.f_v1, 1, validation_context)) {
        return false;
      }
      if (!mojo::internal::ValidateNonInlinedUnion(object->data.f_v1,
                                                   validation_context))
        return false;
      return true;
    }
    default: {
      ReportValidationError(
          validation_context,
          mojo::internal::VALIDATION_ERROR_UNKNOWN_UNION_TAG,
          "unknown tag in Frame");
      return false;
    }
  }
}
// static
bool V1Frame_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context,
    bool inlined) {
  if (!data) {
    DCHECK(!inlined);
    return true;
  }

  // If it is inlined, the alignment is already enforced by its enclosing
  // object. We don't have to validate that.
  DCHECK(!inlined || mojo::internal::IsAligned(data));

  if (!inlined &&
      !mojo::internal::ValidateNonInlinedUnionHeaderAndClaimMemory(
          data, validation_context)) {
    return false;
  }

  const V1Frame_Data* object = static_cast<const V1Frame_Data*>(data);
  ALLOW_UNUSED_LOCAL(object);

  if (inlined && object->is_null())
    return true;

  switch (object->tag) {

    case V1Frame_Tag::INTRODUCTION: {

      if (!mojo::internal::ValidatePointerNonNullable(
              object->data.f_introduction, 1, validation_context)) {
        return false;
      }
      if (!mojo::internal::ValidateStruct(object->data.f_introduction, validation_context))
        return false;
      return true;
    }
    case V1Frame_Tag::CONNECTION_RESPONSE: {

      if (!mojo::internal::ValidatePointerNonNullable(
              object->data.f_connection_response, 2, validation_context)) {
        return false;
      }
      if (!mojo::internal::ValidateStruct(object->data.f_connection_response, validation_context))
        return false;
      return true;
    }
    case V1Frame_Tag::PAIRED_KEY_ENCRYPTION: {

      if (!mojo::internal::ValidatePointerNonNullable(
              object->data.f_paired_key_encryption, 3, validation_context)) {
        return false;
      }
      if (!mojo::internal::ValidateStruct(object->data.f_paired_key_encryption, validation_context))
        return false;
      return true;
    }
    case V1Frame_Tag::PAIRED_KEY_RESULT: {

      if (!mojo::internal::ValidatePointerNonNullable(
              object->data.f_paired_key_result, 4, validation_context)) {
        return false;
      }
      if (!mojo::internal::ValidateStruct(object->data.f_paired_key_result, validation_context))
        return false;
      return true;
    }
    case V1Frame_Tag::CERTIFICATE_INFO: {

      if (!mojo::internal::ValidatePointerNonNullable(
              object->data.f_certificate_info, 5, validation_context)) {
        return false;
      }
      if (!mojo::internal::ValidateStruct(object->data.f_certificate_info, validation_context))
        return false;
      return true;
    }
    default: {
      ReportValidationError(
          validation_context,
          mojo::internal::VALIDATION_ERROR_UNKNOWN_UNION_TAG,
          "unknown tag in V1Frame");
      return false;
    }
  }
}


// static
bool Advertisement_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;

  if (!ValidateStructHeaderAndClaimMemory(data, validation_context))
    return false;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Advertisement_Data* object = static_cast<const Advertisement_Data*>(data);

  static constexpr struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 32 }};

  if (object->header_.version <=
          kVersionSizes[base::size(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = base::size(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        ReportValidationError(
            validation_context,
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
        return false;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[base::size(kVersionSizes) - 1].num_bytes) {
    ReportValidationError(
        validation_context,
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->salt, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams salt_validate_params(
      2, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->salt, validation_context,
                                         &salt_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->encrypted_metadata, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams encrypted_metadata_validate_params(
      14, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->encrypted_metadata, validation_context,
                                         &encrypted_metadata_validate_params)) {
    return false;
  }

  const mojo::internal::ContainerValidateParams device_name_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->device_name, validation_context,
                                         &device_name_validate_params)) {
    return false;
  }

  return true;
}

Advertisement_Data::Advertisement_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool IntroductionFrame_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;

  if (!ValidateStructHeaderAndClaimMemory(data, validation_context))
    return false;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const IntroductionFrame_Data* object = static_cast<const IntroductionFrame_Data*>(data);

  static constexpr struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 40 }};

  if (object->header_.version <=
          kVersionSizes[base::size(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = base::size(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        ReportValidationError(
            validation_context,
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
        return false;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[base::size(kVersionSizes) - 1].num_bytes) {
    ReportValidationError(
        validation_context,
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->file_metadata, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams file_metadata_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->file_metadata, validation_context,
                                         &file_metadata_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->text_metadata, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams text_metadata_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->text_metadata, validation_context,
                                         &text_metadata_validate_params)) {
    return false;
  }

  const mojo::internal::ContainerValidateParams required_package_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->required_package, validation_context,
                                         &required_package_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->wifi_credentials_metadata, 4, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams wifi_credentials_metadata_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->wifi_credentials_metadata, validation_context,
                                         &wifi_credentials_metadata_validate_params)) {
    return false;
  }

  return true;
}

IntroductionFrame_Data::IntroductionFrame_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool FileMetadata_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;

  if (!ValidateStructHeaderAndClaimMemory(data, validation_context))
    return false;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const FileMetadata_Data* object = static_cast<const FileMetadata_Data*>(data);

  static constexpr struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 48 }};

  if (object->header_.version <=
          kVersionSizes[base::size(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = base::size(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        ReportValidationError(
            validation_context,
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
        return false;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[base::size(kVersionSizes) - 1].num_bytes) {
    ReportValidationError(
        validation_context,
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->name, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams name_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->name, validation_context,
                                         &name_validate_params)) {
    return false;
  }


  if (!::sharing::mojom::internal::FileMetadata_Type_Data
        ::Validate(object->type, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->mime_type, 5, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams mime_type_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->mime_type, validation_context,
                                         &mime_type_validate_params)) {
    return false;
  }

  return true;
}

FileMetadata_Data::FileMetadata_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool TextMetadata_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;

  if (!ValidateStructHeaderAndClaimMemory(data, validation_context))
    return false;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TextMetadata_Data* object = static_cast<const TextMetadata_Data*>(data);

  static constexpr struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 40 }};

  if (object->header_.version <=
          kVersionSizes[base::size(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = base::size(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        ReportValidationError(
            validation_context,
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
        return false;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[base::size(kVersionSizes) - 1].num_bytes) {
    ReportValidationError(
        validation_context,
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->text_title, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams text_title_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->text_title, validation_context,
                                         &text_title_validate_params)) {
    return false;
  }


  if (!::sharing::mojom::internal::TextMetadata_Type_Data
        ::Validate(object->type, validation_context))
    return false;

  return true;
}

TextMetadata_Data::TextMetadata_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool WifiCredentialsMetadata_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;

  if (!ValidateStructHeaderAndClaimMemory(data, validation_context))
    return false;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const WifiCredentialsMetadata_Data* object = static_cast<const WifiCredentialsMetadata_Data*>(data);

  static constexpr struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 32 }};

  if (object->header_.version <=
          kVersionSizes[base::size(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = base::size(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        ReportValidationError(
            validation_context,
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
        return false;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[base::size(kVersionSizes) - 1].num_bytes) {
    ReportValidationError(
        validation_context,
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->ssid, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams ssid_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->ssid, validation_context,
                                         &ssid_validate_params)) {
    return false;
  }


  if (!::sharing::mojom::internal::WifiCredentialsMetadata_SecurityType_Data
        ::Validate(object->security_type, validation_context))
    return false;

  return true;
}

WifiCredentialsMetadata_Data::WifiCredentialsMetadata_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ConnectionResponseFrame_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;

  if (!ValidateStructHeaderAndClaimMemory(data, validation_context))
    return false;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ConnectionResponseFrame_Data* object = static_cast<const ConnectionResponseFrame_Data*>(data);

  static constexpr struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[base::size(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = base::size(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        ReportValidationError(
            validation_context,
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
        return false;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[base::size(kVersionSizes) - 1].num_bytes) {
    ReportValidationError(
        validation_context,
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
    return false;
  }


  if (!::sharing::mojom::internal::ConnectionResponseFrame_Status_Data
        ::Validate(object->status, validation_context))
    return false;

  return true;
}

ConnectionResponseFrame_Data::ConnectionResponseFrame_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool PairedKeyEncryptionFrame_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;

  if (!ValidateStructHeaderAndClaimMemory(data, validation_context))
    return false;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PairedKeyEncryptionFrame_Data* object = static_cast<const PairedKeyEncryptionFrame_Data*>(data);

  static constexpr struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[base::size(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = base::size(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        ReportValidationError(
            validation_context,
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
        return false;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[base::size(kVersionSizes) - 1].num_bytes) {
    ReportValidationError(
        validation_context,
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->signed_data, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams signed_data_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->signed_data, validation_context,
                                         &signed_data_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->secret_id_hash, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams secret_id_hash_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->secret_id_hash, validation_context,
                                         &secret_id_hash_validate_params)) {
    return false;
  }

  return true;
}

PairedKeyEncryptionFrame_Data::PairedKeyEncryptionFrame_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool PairedKeyResultFrame_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;

  if (!ValidateStructHeaderAndClaimMemory(data, validation_context))
    return false;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PairedKeyResultFrame_Data* object = static_cast<const PairedKeyResultFrame_Data*>(data);

  static constexpr struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[base::size(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = base::size(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        ReportValidationError(
            validation_context,
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
        return false;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[base::size(kVersionSizes) - 1].num_bytes) {
    ReportValidationError(
        validation_context,
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
    return false;
  }


  if (!::sharing::mojom::internal::PairedKeyResultFrame_Status_Data
        ::Validate(object->status, validation_context))
    return false;

  return true;
}

PairedKeyResultFrame_Data::PairedKeyResultFrame_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool CertificateInfoFrame_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;

  if (!ValidateStructHeaderAndClaimMemory(data, validation_context))
    return false;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const CertificateInfoFrame_Data* object = static_cast<const CertificateInfoFrame_Data*>(data);

  static constexpr struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[base::size(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = base::size(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        ReportValidationError(
            validation_context,
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
        return false;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[base::size(kVersionSizes) - 1].num_bytes) {
    ReportValidationError(
        validation_context,
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->public_certificate, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams public_certificate_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->public_certificate, validation_context,
                                         &public_certificate_validate_params)) {
    return false;
  }

  return true;
}

CertificateInfoFrame_Data::CertificateInfoFrame_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool PublicCertificate_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;

  if (!ValidateStructHeaderAndClaimMemory(data, validation_context))
    return false;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PublicCertificate_Data* object = static_cast<const PublicCertificate_Data*>(data);

  static constexpr struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 64 }};

  if (object->header_.version <=
          kVersionSizes[base::size(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = base::size(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        ReportValidationError(
            validation_context,
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
        return false;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[base::size(kVersionSizes) - 1].num_bytes) {
    ReportValidationError(
        validation_context,
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->secret_id, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams secret_id_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->secret_id, validation_context,
                                         &secret_id_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->authenticity_key, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams authenticity_key_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->authenticity_key, validation_context,
                                         &authenticity_key_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->public_key, 3, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams public_key_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->public_key, validation_context,
                                         &public_key_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->start_time, 4, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->start_time, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->end_time, 5, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->end_time, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->encrypted_metadata_bytes, 6, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams encrypted_metadata_bytes_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->encrypted_metadata_bytes, validation_context,
                                         &encrypted_metadata_bytes_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->metadata_encryption_key_tag, 7, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams metadata_encryption_key_tag_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->metadata_encryption_key_tag, validation_context,
                                         &metadata_encryption_key_tag_validate_params)) {
    return false;
  }

  return true;
}

PublicCertificate_Data::PublicCertificate_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace sharing
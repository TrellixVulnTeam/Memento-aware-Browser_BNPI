// chrome/services/sharing/public/mojom/sharing.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_SERVICES_SHARING_PUBLIC_MOJOM_SHARING_MOJOM_PARAMS_DATA_H_
#define CHROME_SERVICES_SHARING_PUBLIC_MOJOM_SHARING_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace sharing {
namespace mojom {
namespace internal {
class  Sharing_CreateSharingWebRtcConnection_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Sharing_CreateSharingWebRtcConnection_Params_Data));
      new (data()) Sharing_CreateSharingWebRtcConnection_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Sharing_CreateSharingWebRtcConnection_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Sharing_CreateSharingWebRtcConnection_Params_Data>(index_);
    }
    Sharing_CreateSharingWebRtcConnection_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data signalling_sender;
  mojo::internal::Handle_Data signalling_receiver;
  mojo::internal::Interface_Data delegate;
  mojo::internal::Handle_Data connection;
  mojo::internal::Interface_Data socket_manager;
  mojo::internal::Interface_Data mdns_responder;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::sharing::mojom::internal::IceServer_Data>>> ice_servers;

 private:
  Sharing_CreateSharingWebRtcConnection_Params_Data();
  ~Sharing_CreateSharingWebRtcConnection_Params_Data() = delete;
};
static_assert(sizeof(Sharing_CreateSharingWebRtcConnection_Params_Data) == 56,
              "Bad sizeof(Sharing_CreateSharingWebRtcConnection_Params_Data)");
class  Sharing_CreateNearbyConnections_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Sharing_CreateNearbyConnections_Params_Data));
      new (data()) Sharing_CreateNearbyConnections_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Sharing_CreateNearbyConnections_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Sharing_CreateNearbyConnections_Params_Data>(index_);
    }
    Sharing_CreateNearbyConnections_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data host;

 private:
  Sharing_CreateNearbyConnections_Params_Data();
  ~Sharing_CreateNearbyConnections_Params_Data() = delete;
};
static_assert(sizeof(Sharing_CreateNearbyConnections_Params_Data) == 16,
              "Bad sizeof(Sharing_CreateNearbyConnections_Params_Data)");
class  Sharing_CreateNearbyConnections_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Sharing_CreateNearbyConnections_ResponseParams_Data));
      new (data()) Sharing_CreateNearbyConnections_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Sharing_CreateNearbyConnections_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Sharing_CreateNearbyConnections_ResponseParams_Data>(index_);
    }
    Sharing_CreateNearbyConnections_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data connections;

 private:
  Sharing_CreateNearbyConnections_ResponseParams_Data();
  ~Sharing_CreateNearbyConnections_ResponseParams_Data() = delete;
};
static_assert(sizeof(Sharing_CreateNearbyConnections_ResponseParams_Data) == 16,
              "Bad sizeof(Sharing_CreateNearbyConnections_ResponseParams_Data)");
class  Sharing_CreateNearbySharingDecoder_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Sharing_CreateNearbySharingDecoder_Params_Data));
      new (data()) Sharing_CreateNearbySharingDecoder_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Sharing_CreateNearbySharingDecoder_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Sharing_CreateNearbySharingDecoder_Params_Data>(index_);
    }
    Sharing_CreateNearbySharingDecoder_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  Sharing_CreateNearbySharingDecoder_Params_Data();
  ~Sharing_CreateNearbySharingDecoder_Params_Data() = delete;
};
static_assert(sizeof(Sharing_CreateNearbySharingDecoder_Params_Data) == 8,
              "Bad sizeof(Sharing_CreateNearbySharingDecoder_Params_Data)");
class  Sharing_CreateNearbySharingDecoder_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Sharing_CreateNearbySharingDecoder_ResponseParams_Data));
      new (data()) Sharing_CreateNearbySharingDecoder_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Sharing_CreateNearbySharingDecoder_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Sharing_CreateNearbySharingDecoder_ResponseParams_Data>(index_);
    }
    Sharing_CreateNearbySharingDecoder_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data decoder;

 private:
  Sharing_CreateNearbySharingDecoder_ResponseParams_Data();
  ~Sharing_CreateNearbySharingDecoder_ResponseParams_Data() = delete;
};
static_assert(sizeof(Sharing_CreateNearbySharingDecoder_ResponseParams_Data) == 16,
              "Bad sizeof(Sharing_CreateNearbySharingDecoder_ResponseParams_Data)");

}  // namespace internal
class Sharing_CreateSharingWebRtcConnection_ParamsDataView {
 public:
  Sharing_CreateSharingWebRtcConnection_ParamsDataView() {}

  Sharing_CreateSharingWebRtcConnection_ParamsDataView(
      internal::Sharing_CreateSharingWebRtcConnection_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeSignallingSender() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::sharing::mojom::SignallingSenderInterfaceBase>>(
            &data_->signalling_sender, &result, context_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeSignallingReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::sharing::mojom::SignallingReceiverInterfaceBase>>(
            &data_->signalling_receiver, &result, context_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeDelegate() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::sharing::mojom::SharingWebRtcConnectionDelegateInterfaceBase>>(
            &data_->delegate, &result, context_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeConnection() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::sharing::mojom::SharingWebRtcConnectionInterfaceBase>>(
            &data_->connection, &result, context_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeSocketManager() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::network::mojom::P2PSocketManagerInterfaceBase>>(
            &data_->socket_manager, &result, context_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeMdnsResponder() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::network::mojom::MdnsResponderInterfaceBase>>(
            &data_->mdns_responder, &result, context_);
    DCHECK(ret);
    return result;
  }
  inline void GetIceServersDataView(
      mojo::ArrayDataView<::sharing::mojom::IceServerDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadIceServers(UserType* output) {
    auto* pointer = data_->ice_servers.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::sharing::mojom::IceServerDataView>>(
        pointer, output, context_);
  }
 private:
  internal::Sharing_CreateSharingWebRtcConnection_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class Sharing_CreateNearbyConnections_ParamsDataView {
 public:
  Sharing_CreateNearbyConnections_ParamsDataView() {}

  Sharing_CreateNearbyConnections_ParamsDataView(
      internal::Sharing_CreateNearbyConnections_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeHost() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::location::nearby::connections::mojom::NearbyConnectionsHostInterfaceBase>>(
            &data_->host, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::Sharing_CreateNearbyConnections_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class Sharing_CreateNearbyConnections_ResponseParamsDataView {
 public:
  Sharing_CreateNearbyConnections_ResponseParamsDataView() {}

  Sharing_CreateNearbyConnections_ResponseParamsDataView(
      internal::Sharing_CreateNearbyConnections_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeConnections() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::location::nearby::connections::mojom::NearbyConnectionsInterfaceBase>>(
            &data_->connections, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::Sharing_CreateNearbyConnections_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class Sharing_CreateNearbySharingDecoder_ParamsDataView {
 public:
  Sharing_CreateNearbySharingDecoder_ParamsDataView() {}

  Sharing_CreateNearbySharingDecoder_ParamsDataView(
      internal::Sharing_CreateNearbySharingDecoder_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::Sharing_CreateNearbySharingDecoder_Params_Data* data_ = nullptr;
};

class Sharing_CreateNearbySharingDecoder_ResponseParamsDataView {
 public:
  Sharing_CreateNearbySharingDecoder_ResponseParamsDataView() {}

  Sharing_CreateNearbySharingDecoder_ResponseParamsDataView(
      internal::Sharing_CreateNearbySharingDecoder_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeDecoder() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::sharing::mojom::NearbySharingDecoderInterfaceBase>>(
            &data_->decoder, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::Sharing_CreateNearbySharingDecoder_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};


inline void Sharing_CreateSharingWebRtcConnection_ParamsDataView::GetIceServersDataView(
    mojo::ArrayDataView<::sharing::mojom::IceServerDataView>* output) {
  auto pointer = data_->ice_servers.Get();
  *output = mojo::ArrayDataView<::sharing::mojom::IceServerDataView>(pointer, context_);
}









}  // namespace mojom
}  // namespace sharing

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CHROME_SERVICES_SHARING_PUBLIC_MOJOM_SHARING_MOJOM_PARAMS_DATA_H_
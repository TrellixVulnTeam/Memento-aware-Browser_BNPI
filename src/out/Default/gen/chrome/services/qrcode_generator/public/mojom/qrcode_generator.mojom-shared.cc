// chrome/services/qrcode_generator/public/mojom/qrcode_generator.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "chrome/services/qrcode_generator/public/mojom/qrcode_generator.mojom-shared.h"

#include <utility>

#include "base/logging.h"
#include "base/stl_util.h"  // for base::size()
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"

#include "chrome/services/qrcode_generator/public/mojom/qrcode_generator.mojom-params-data.h"
namespace qrcode_generator {
namespace mojom {

std::ostream& operator<<(std::ostream& os, QRCodeGeneratorError value) {
  switch(value) {
    case QRCodeGeneratorError::NONE:
      return os << "QRCodeGeneratorError::NONE";
    case QRCodeGeneratorError::INPUT_TOO_LONG:
      return os << "QRCodeGeneratorError::INPUT_TOO_LONG";
    case QRCodeGeneratorError::UNKNOWN_ERROR:
      return os << "QRCodeGeneratorError::UNKNOWN_ERROR";
    default:
      return os << "Unknown QRCodeGeneratorError value: " << static_cast<int32_t>(value);
  }
}

std::ostream& operator<<(std::ostream& os, ModuleStyle value) {
  switch(value) {
    case ModuleStyle::DEFAULT_SQUARES:
      return os << "ModuleStyle::DEFAULT_SQUARES";
    case ModuleStyle::CIRCLES:
      return os << "ModuleStyle::CIRCLES";
    default:
      return os << "Unknown ModuleStyle value: " << static_cast<int32_t>(value);
  }
}

std::ostream& operator<<(std::ostream& os, LocatorStyle value) {
  switch(value) {
    case LocatorStyle::DEFAULT_SQUARE:
      return os << "LocatorStyle::DEFAULT_SQUARE";
    case LocatorStyle::ROUNDED:
      return os << "LocatorStyle::ROUNDED";
    default:
      return os << "Unknown LocatorStyle value: " << static_cast<int32_t>(value);
  }
}

namespace internal {


// static
bool GenerateQRCodeRequest_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;

  if (!ValidateStructHeaderAndClaimMemory(data, validation_context))
    return false;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const GenerateQRCodeRequest_Data* object = static_cast<const GenerateQRCodeRequest_Data*>(data);

  static constexpr struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 32 }};

  if (object->header_.version <=
          kVersionSizes[base::size(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = base::size(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        ReportValidationError(
            validation_context,
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
        return false;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[base::size(kVersionSizes) - 1].num_bytes) {
    ReportValidationError(
        validation_context,
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->data, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams data_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->data, validation_context,
                                         &data_validate_params)) {
    return false;
  }


  if (!::qrcode_generator::mojom::internal::ModuleStyle_Data
        ::Validate(object->render_module_style, validation_context))
    return false;


  if (!::qrcode_generator::mojom::internal::LocatorStyle_Data
        ::Validate(object->render_locator_style, validation_context))
    return false;

  return true;
}

GenerateQRCodeRequest_Data::GenerateQRCodeRequest_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool GenerateQRCodeResponse_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;

  if (!ValidateStructHeaderAndClaimMemory(data, validation_context))
    return false;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const GenerateQRCodeResponse_Data* object = static_cast<const GenerateQRCodeResponse_Data*>(data);

  static constexpr struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 40 }};

  if (object->header_.version <=
          kVersionSizes[base::size(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = base::size(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        ReportValidationError(
            validation_context,
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
        return false;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[base::size(kVersionSizes) - 1].num_bytes) {
    ReportValidationError(
        validation_context,
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
    return false;
  }


  if (!::qrcode_generator::mojom::internal::QRCodeGeneratorError_Data
        ::Validate(object->error_code, validation_context))
    return false;

  if (!mojo::internal::ValidateStruct(object->bitmap, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->data, 3, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams data_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->data, validation_context,
                                         &data_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->data_size, 4, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->data_size, validation_context))
    return false;

  return true;
}

GenerateQRCodeResponse_Data::GenerateQRCodeResponse_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool QRCodeGeneratorService_GenerateQRCode_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;

  if (!ValidateStructHeaderAndClaimMemory(data, validation_context))
    return false;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const QRCodeGeneratorService_GenerateQRCode_Params_Data* object = static_cast<const QRCodeGeneratorService_GenerateQRCode_Params_Data*>(data);

  static constexpr struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[base::size(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = base::size(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        ReportValidationError(
            validation_context,
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
        return false;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[base::size(kVersionSizes) - 1].num_bytes) {
    ReportValidationError(
        validation_context,
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->request, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->request, validation_context))
    return false;

  return true;
}

QRCodeGeneratorService_GenerateQRCode_Params_Data::QRCodeGeneratorService_GenerateQRCode_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool QRCodeGeneratorService_GenerateQRCode_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;

  if (!ValidateStructHeaderAndClaimMemory(data, validation_context))
    return false;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const QRCodeGeneratorService_GenerateQRCode_ResponseParams_Data* object = static_cast<const QRCodeGeneratorService_GenerateQRCode_ResponseParams_Data*>(data);

  static constexpr struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[base::size(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = base::size(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        ReportValidationError(
            validation_context,
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
        return false;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[base::size(kVersionSizes) - 1].num_bytes) {
    ReportValidationError(
        validation_context,
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->response, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->response, validation_context))
    return false;

  return true;
}

QRCodeGeneratorService_GenerateQRCode_ResponseParams_Data::QRCodeGeneratorService_GenerateQRCode_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace qrcode_generator
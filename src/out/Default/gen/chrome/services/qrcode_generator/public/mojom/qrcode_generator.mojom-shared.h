// chrome/services/qrcode_generator/public/mojom/qrcode_generator.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_SERVICES_QRCODE_GENERATOR_PUBLIC_MOJOM_QRCODE_GENERATOR_MOJOM_SHARED_H_
#define CHROME_SERVICES_QRCODE_GENERATOR_PUBLIC_MOJOM_QRCODE_GENERATOR_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "chrome/services/qrcode_generator/public/mojom/qrcode_generator.mojom-shared-internal.h"
#include "skia/public/mojom/bitmap.mojom-shared.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace qrcode_generator {
namespace mojom {
class GenerateQRCodeRequestDataView;

class GenerateQRCodeResponseDataView;



}  // namespace mojom
}  // namespace qrcode_generator

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::qrcode_generator::mojom::GenerateQRCodeRequestDataView> {
  using Data = ::qrcode_generator::mojom::internal::GenerateQRCodeRequest_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::qrcode_generator::mojom::GenerateQRCodeResponseDataView> {
  using Data = ::qrcode_generator::mojom::internal::GenerateQRCodeResponse_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace qrcode_generator {
namespace mojom {


enum class QRCodeGeneratorError : int32_t {
  
  NONE = 0,
  
  INPUT_TOO_LONG = 1,
  
  UNKNOWN_ERROR = 2,
  kMinValue = 0,
  kMaxValue = 2,
};

 std::ostream& operator<<(std::ostream& os, QRCodeGeneratorError value);
inline bool IsKnownEnumValue(QRCodeGeneratorError value) {
  return internal::QRCodeGeneratorError_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class ModuleStyle : int32_t {
  
  DEFAULT_SQUARES = 0,
  
  CIRCLES = 1,
  kMinValue = 0,
  kMaxValue = 1,
};

 std::ostream& operator<<(std::ostream& os, ModuleStyle value);
inline bool IsKnownEnumValue(ModuleStyle value) {
  return internal::ModuleStyle_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class LocatorStyle : int32_t {
  
  DEFAULT_SQUARE = 0,
  
  ROUNDED = 1,
  kMinValue = 0,
  kMaxValue = 1,
};

 std::ostream& operator<<(std::ostream& os, LocatorStyle value);
inline bool IsKnownEnumValue(LocatorStyle value) {
  return internal::LocatorStyle_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class QRCodeGeneratorServiceInterfaceBase {};

using QRCodeGeneratorServicePtrDataView =
    mojo::InterfacePtrDataView<QRCodeGeneratorServiceInterfaceBase>;
using QRCodeGeneratorServiceRequestDataView =
    mojo::InterfaceRequestDataView<QRCodeGeneratorServiceInterfaceBase>;
using QRCodeGeneratorServiceAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<QRCodeGeneratorServiceInterfaceBase>;
using QRCodeGeneratorServiceAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<QRCodeGeneratorServiceInterfaceBase>;
class GenerateQRCodeRequestDataView {
 public:
  GenerateQRCodeRequestDataView() {}

  GenerateQRCodeRequestDataView(
      internal::GenerateQRCodeRequest_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDataDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadData(UserType* output) {
    auto* pointer = data_->data.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  bool should_render() const {
    return data_->should_render;
  }
  bool render_dino() const {
    return data_->render_dino;
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadRenderModuleStyle(UserType* output) const {
    auto data_value = data_->render_module_style;
    return mojo::internal::Deserialize<::qrcode_generator::mojom::ModuleStyle>(
        data_value, output);
  }

  ModuleStyle render_module_style() const {
    return static_cast<ModuleStyle>(data_->render_module_style);
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadRenderLocatorStyle(UserType* output) const {
    auto data_value = data_->render_locator_style;
    return mojo::internal::Deserialize<::qrcode_generator::mojom::LocatorStyle>(
        data_value, output);
  }

  LocatorStyle render_locator_style() const {
    return static_cast<LocatorStyle>(data_->render_locator_style);
  }
 private:
  internal::GenerateQRCodeRequest_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class GenerateQRCodeResponseDataView {
 public:
  GenerateQRCodeResponseDataView() {}

  GenerateQRCodeResponseDataView(
      internal::GenerateQRCodeResponse_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadErrorCode(UserType* output) const {
    auto data_value = data_->error_code;
    return mojo::internal::Deserialize<::qrcode_generator::mojom::QRCodeGeneratorError>(
        data_value, output);
  }

  QRCodeGeneratorError error_code() const {
    return static_cast<QRCodeGeneratorError>(data_->error_code);
  }
  inline void GetBitmapDataView(
      ::skia::mojom::BitmapDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadBitmap(UserType* output) {
    auto* pointer = data_->bitmap.Get();
    return mojo::internal::Deserialize<::skia::mojom::BitmapDataView>(
        pointer, output, context_);
  }
  inline void GetDataDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadData(UserType* output) {
    auto* pointer = data_->data.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, context_);
  }
  inline void GetDataSizeDataView(
      ::gfx::mojom::SizeDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDataSize(UserType* output) {
    auto* pointer = data_->data_size.Get();
    return mojo::internal::Deserialize<::gfx::mojom::SizeDataView>(
        pointer, output, context_);
  }
 private:
  internal::GenerateQRCodeResponse_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};



}  // namespace mojom
}  // namespace qrcode_generator

namespace std {

template <>
struct hash<::qrcode_generator::mojom::QRCodeGeneratorError>
    : public mojo::internal::EnumHashImpl<::qrcode_generator::mojom::QRCodeGeneratorError> {};

template <>
struct hash<::qrcode_generator::mojom::ModuleStyle>
    : public mojo::internal::EnumHashImpl<::qrcode_generator::mojom::ModuleStyle> {};

template <>
struct hash<::qrcode_generator::mojom::LocatorStyle>
    : public mojo::internal::EnumHashImpl<::qrcode_generator::mojom::LocatorStyle> {};

}  // namespace std

namespace mojo {


template <>
struct EnumTraits<::qrcode_generator::mojom::QRCodeGeneratorError, ::qrcode_generator::mojom::QRCodeGeneratorError> {
  static ::qrcode_generator::mojom::QRCodeGeneratorError ToMojom(::qrcode_generator::mojom::QRCodeGeneratorError input) { return input; }
  static bool FromMojom(::qrcode_generator::mojom::QRCodeGeneratorError input, ::qrcode_generator::mojom::QRCodeGeneratorError* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::qrcode_generator::mojom::QRCodeGeneratorError, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::qrcode_generator::mojom::QRCodeGeneratorError, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::qrcode_generator::mojom::QRCodeGeneratorError>(input), output);
  }
};

}  // namespace internal


template <>
struct EnumTraits<::qrcode_generator::mojom::ModuleStyle, ::qrcode_generator::mojom::ModuleStyle> {
  static ::qrcode_generator::mojom::ModuleStyle ToMojom(::qrcode_generator::mojom::ModuleStyle input) { return input; }
  static bool FromMojom(::qrcode_generator::mojom::ModuleStyle input, ::qrcode_generator::mojom::ModuleStyle* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::qrcode_generator::mojom::ModuleStyle, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::qrcode_generator::mojom::ModuleStyle, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::qrcode_generator::mojom::ModuleStyle>(input), output);
  }
};

}  // namespace internal


template <>
struct EnumTraits<::qrcode_generator::mojom::LocatorStyle, ::qrcode_generator::mojom::LocatorStyle> {
  static ::qrcode_generator::mojom::LocatorStyle ToMojom(::qrcode_generator::mojom::LocatorStyle input) { return input; }
  static bool FromMojom(::qrcode_generator::mojom::LocatorStyle input, ::qrcode_generator::mojom::LocatorStyle* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::qrcode_generator::mojom::LocatorStyle, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::qrcode_generator::mojom::LocatorStyle, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::qrcode_generator::mojom::LocatorStyle>(input), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::qrcode_generator::mojom::GenerateQRCodeRequestDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::qrcode_generator::mojom::GenerateQRCodeRequestDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::qrcode_generator::mojom::internal::GenerateQRCodeRequest_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::data(input)) in_data = Traits::data(input);
    typename decltype((*output)->data)::BaseType::BufferWriter
        data_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_data, buffer, &data_writer, context);
    (*output)->data.Set(
        data_writer.is_null() ? nullptr : data_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->data.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null data in GenerateQRCodeRequest struct");
    (*output)->should_render = Traits::should_render(input);
    (*output)->render_dino = Traits::render_dino(input);
    mojo::internal::Serialize<::qrcode_generator::mojom::ModuleStyle>(
        Traits::render_module_style(input), &(*output)->render_module_style);
    mojo::internal::Serialize<::qrcode_generator::mojom::LocatorStyle>(
        Traits::render_locator_style(input), &(*output)->render_locator_style);
  }

  static bool Deserialize(::qrcode_generator::mojom::internal::GenerateQRCodeRequest_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::qrcode_generator::mojom::GenerateQRCodeRequestDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::qrcode_generator::mojom::GenerateQRCodeResponseDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::qrcode_generator::mojom::GenerateQRCodeResponseDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::qrcode_generator::mojom::internal::GenerateQRCodeResponse_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    mojo::internal::Serialize<::qrcode_generator::mojom::QRCodeGeneratorError>(
        Traits::error_code(input), &(*output)->error_code);
    decltype(Traits::bitmap(input)) in_bitmap = Traits::bitmap(input);
    typename decltype((*output)->bitmap)::BaseType::BufferWriter
        bitmap_writer;
    mojo::internal::Serialize<::skia::mojom::BitmapDataView>(
        in_bitmap, buffer, &bitmap_writer, context);
    (*output)->bitmap.Set(
        bitmap_writer.is_null() ? nullptr : bitmap_writer.data());
    decltype(Traits::data(input)) in_data = Traits::data(input);
    typename decltype((*output)->data)::BaseType::BufferWriter
        data_writer;
    const mojo::internal::ContainerValidateParams data_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<uint8_t>>(
        in_data, buffer, &data_writer, &data_validate_params,
        context);
    (*output)->data.Set(
        data_writer.is_null() ? nullptr : data_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->data.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null data in GenerateQRCodeResponse struct");
    decltype(Traits::data_size(input)) in_data_size = Traits::data_size(input);
    typename decltype((*output)->data_size)::BaseType::BufferWriter
        data_size_writer;
    mojo::internal::Serialize<::gfx::mojom::SizeDataView>(
        in_data_size, buffer, &data_size_writer, context);
    (*output)->data_size.Set(
        data_size_writer.is_null() ? nullptr : data_size_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->data_size.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null data_size in GenerateQRCodeResponse struct");
  }

  static bool Deserialize(::qrcode_generator::mojom::internal::GenerateQRCodeResponse_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::qrcode_generator::mojom::GenerateQRCodeResponseDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace qrcode_generator {
namespace mojom {

inline void GenerateQRCodeRequestDataView::GetDataDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->data.Get();
  *output = mojo::StringDataView(pointer, context_);
}


inline void GenerateQRCodeResponseDataView::GetBitmapDataView(
    ::skia::mojom::BitmapDataView* output) {
  auto pointer = data_->bitmap.Get();
  *output = ::skia::mojom::BitmapDataView(pointer, context_);
}
inline void GenerateQRCodeResponseDataView::GetDataDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->data.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, context_);
}
inline void GenerateQRCodeResponseDataView::GetDataSizeDataView(
    ::gfx::mojom::SizeDataView* output) {
  auto pointer = data_->data_size.Get();
  *output = ::gfx::mojom::SizeDataView(pointer, context_);
}



}  // namespace mojom
}  // namespace qrcode_generator

#endif  // CHROME_SERVICES_QRCODE_GENERATOR_PUBLIC_MOJOM_QRCODE_GENERATOR_MOJOM_SHARED_H_
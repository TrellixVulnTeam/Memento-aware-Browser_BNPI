// chrome/services/removable_storage_writer/public/mojom/removable_storage_writer.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "chrome/services/removable_storage_writer/public/mojom/removable_storage_writer.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/mojom/base/file_path.mojom.h"


#ifndef CHROME_SERVICES_REMOVABLE_STORAGE_WRITER_PUBLIC_MOJOM_REMOVABLE_STORAGE_WRITER_MOJOM_JUMBO_H_
#define CHROME_SERVICES_REMOVABLE_STORAGE_WRITER_PUBLIC_MOJOM_REMOVABLE_STORAGE_WRITER_MOJOM_JUMBO_H_
#endif


namespace chrome {
namespace mojom {


void RemovableStorageWriterInterceptorForTesting::Write(const ::base::FilePath& source, const ::base::FilePath& target, ::mojo::PendingRemote<RemovableStorageWriterClient> client) {
  GetForwardingInterface()->Write(std::move(source), std::move(target), std::move(client));
}
void RemovableStorageWriterInterceptorForTesting::Verify(const ::base::FilePath& source, const ::base::FilePath& target, ::mojo::PendingRemote<RemovableStorageWriterClient> client) {
  GetForwardingInterface()->Verify(std::move(source), std::move(target), std::move(client));
}
RemovableStorageWriterAsyncWaiter::RemovableStorageWriterAsyncWaiter(
    RemovableStorageWriter* proxy) : proxy_(proxy) {}

RemovableStorageWriterAsyncWaiter::~RemovableStorageWriterAsyncWaiter() = default;




void RemovableStorageWriterClientInterceptorForTesting::Progress(int64_t progress) {
  GetForwardingInterface()->Progress(std::move(progress));
}
void RemovableStorageWriterClientInterceptorForTesting::Complete(const base::Optional<std::string>& error) {
  GetForwardingInterface()->Complete(std::move(error));
}
RemovableStorageWriterClientAsyncWaiter::RemovableStorageWriterClientAsyncWaiter(
    RemovableStorageWriterClient* proxy) : proxy_(proxy) {}

RemovableStorageWriterClientAsyncWaiter::~RemovableStorageWriterClientAsyncWaiter() = default;






}  // namespace mojom
}  // namespace chrome

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
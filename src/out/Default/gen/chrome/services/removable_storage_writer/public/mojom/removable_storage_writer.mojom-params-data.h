// chrome/services/removable_storage_writer/public/mojom/removable_storage_writer.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_SERVICES_REMOVABLE_STORAGE_WRITER_PUBLIC_MOJOM_REMOVABLE_STORAGE_WRITER_MOJOM_PARAMS_DATA_H_
#define CHROME_SERVICES_REMOVABLE_STORAGE_WRITER_PUBLIC_MOJOM_REMOVABLE_STORAGE_WRITER_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace chrome {
namespace mojom {
namespace internal {
class  RemovableStorageWriter_Write_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(RemovableStorageWriter_Write_Params_Data));
      new (data()) RemovableStorageWriter_Write_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    RemovableStorageWriter_Write_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<RemovableStorageWriter_Write_Params_Data>(index_);
    }
    RemovableStorageWriter_Write_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::FilePath_Data> source;
  mojo::internal::Pointer<::mojo_base::mojom::internal::FilePath_Data> target;
  mojo::internal::Interface_Data client;

 private:
  RemovableStorageWriter_Write_Params_Data();
  ~RemovableStorageWriter_Write_Params_Data() = delete;
};
static_assert(sizeof(RemovableStorageWriter_Write_Params_Data) == 32,
              "Bad sizeof(RemovableStorageWriter_Write_Params_Data)");
class  RemovableStorageWriter_Verify_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(RemovableStorageWriter_Verify_Params_Data));
      new (data()) RemovableStorageWriter_Verify_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    RemovableStorageWriter_Verify_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<RemovableStorageWriter_Verify_Params_Data>(index_);
    }
    RemovableStorageWriter_Verify_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::FilePath_Data> source;
  mojo::internal::Pointer<::mojo_base::mojom::internal::FilePath_Data> target;
  mojo::internal::Interface_Data client;

 private:
  RemovableStorageWriter_Verify_Params_Data();
  ~RemovableStorageWriter_Verify_Params_Data() = delete;
};
static_assert(sizeof(RemovableStorageWriter_Verify_Params_Data) == 32,
              "Bad sizeof(RemovableStorageWriter_Verify_Params_Data)");
class  RemovableStorageWriterClient_Progress_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(RemovableStorageWriterClient_Progress_Params_Data));
      new (data()) RemovableStorageWriterClient_Progress_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    RemovableStorageWriterClient_Progress_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<RemovableStorageWriterClient_Progress_Params_Data>(index_);
    }
    RemovableStorageWriterClient_Progress_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t progress;

 private:
  RemovableStorageWriterClient_Progress_Params_Data();
  ~RemovableStorageWriterClient_Progress_Params_Data() = delete;
};
static_assert(sizeof(RemovableStorageWriterClient_Progress_Params_Data) == 16,
              "Bad sizeof(RemovableStorageWriterClient_Progress_Params_Data)");
class  RemovableStorageWriterClient_Complete_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(RemovableStorageWriterClient_Complete_Params_Data));
      new (data()) RemovableStorageWriterClient_Complete_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    RemovableStorageWriterClient_Complete_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<RemovableStorageWriterClient_Complete_Params_Data>(index_);
    }
    RemovableStorageWriterClient_Complete_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> error;

 private:
  RemovableStorageWriterClient_Complete_Params_Data();
  ~RemovableStorageWriterClient_Complete_Params_Data() = delete;
};
static_assert(sizeof(RemovableStorageWriterClient_Complete_Params_Data) == 16,
              "Bad sizeof(RemovableStorageWriterClient_Complete_Params_Data)");

}  // namespace internal
class RemovableStorageWriter_Write_ParamsDataView {
 public:
  RemovableStorageWriter_Write_ParamsDataView() {}

  RemovableStorageWriter_Write_ParamsDataView(
      internal::RemovableStorageWriter_Write_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetSourceDataView(
      ::mojo_base::mojom::FilePathDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSource(UserType* output) {
    auto* pointer = data_->source.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FilePathDataView>(
        pointer, output, context_);
  }
  inline void GetTargetDataView(
      ::mojo_base::mojom::FilePathDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTarget(UserType* output) {
    auto* pointer = data_->target.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FilePathDataView>(
        pointer, output, context_);
  }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::chrome::mojom::RemovableStorageWriterClientInterfaceBase>>(
            &data_->client, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::RemovableStorageWriter_Write_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class RemovableStorageWriter_Verify_ParamsDataView {
 public:
  RemovableStorageWriter_Verify_ParamsDataView() {}

  RemovableStorageWriter_Verify_ParamsDataView(
      internal::RemovableStorageWriter_Verify_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetSourceDataView(
      ::mojo_base::mojom::FilePathDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSource(UserType* output) {
    auto* pointer = data_->source.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FilePathDataView>(
        pointer, output, context_);
  }
  inline void GetTargetDataView(
      ::mojo_base::mojom::FilePathDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTarget(UserType* output) {
    auto* pointer = data_->target.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FilePathDataView>(
        pointer, output, context_);
  }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::chrome::mojom::RemovableStorageWriterClientInterfaceBase>>(
            &data_->client, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::RemovableStorageWriter_Verify_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class RemovableStorageWriterClient_Progress_ParamsDataView {
 public:
  RemovableStorageWriterClient_Progress_ParamsDataView() {}

  RemovableStorageWriterClient_Progress_ParamsDataView(
      internal::RemovableStorageWriterClient_Progress_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int64_t progress() const {
    return data_->progress;
  }
 private:
  internal::RemovableStorageWriterClient_Progress_Params_Data* data_ = nullptr;
};

class RemovableStorageWriterClient_Complete_ParamsDataView {
 public:
  RemovableStorageWriterClient_Complete_ParamsDataView() {}

  RemovableStorageWriterClient_Complete_ParamsDataView(
      internal::RemovableStorageWriterClient_Complete_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetErrorDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadError(UserType* output) {
    auto* pointer = data_->error.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::RemovableStorageWriterClient_Complete_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};


inline void RemovableStorageWriter_Write_ParamsDataView::GetSourceDataView(
    ::mojo_base::mojom::FilePathDataView* output) {
  auto pointer = data_->source.Get();
  *output = ::mojo_base::mojom::FilePathDataView(pointer, context_);
}
inline void RemovableStorageWriter_Write_ParamsDataView::GetTargetDataView(
    ::mojo_base::mojom::FilePathDataView* output) {
  auto pointer = data_->target.Get();
  *output = ::mojo_base::mojom::FilePathDataView(pointer, context_);
}


inline void RemovableStorageWriter_Verify_ParamsDataView::GetSourceDataView(
    ::mojo_base::mojom::FilePathDataView* output) {
  auto pointer = data_->source.Get();
  *output = ::mojo_base::mojom::FilePathDataView(pointer, context_);
}
inline void RemovableStorageWriter_Verify_ParamsDataView::GetTargetDataView(
    ::mojo_base::mojom::FilePathDataView* output) {
  auto pointer = data_->target.Get();
  *output = ::mojo_base::mojom::FilePathDataView(pointer, context_);
}




inline void RemovableStorageWriterClient_Complete_ParamsDataView::GetErrorDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->error.Get();
  *output = mojo::StringDataView(pointer, context_);
}

}  // namespace mojom
}  // namespace chrome

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CHROME_SERVICES_REMOVABLE_STORAGE_WRITER_PUBLIC_MOJOM_REMOVABLE_STORAGE_WRITER_MOJOM_PARAMS_DATA_H_
// chrome/test/data/webui/mojo/foobar.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_TEST_DATA_WEBUI_MOJO_FOOBAR_MOJOM_H_
#define CHROME_TEST_DATA_WEBUI_MOJO_FOOBAR_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "base/callback.h"
#include "base/macros.h"
#include "base/optional.h"

#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#if BUILDFLAG(MOJO_TRACE_ENABLED)
#include "base/trace_event/trace_event.h"
#endif
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"
#include "chrome/test/data/webui/mojo/foobar.mojom-shared.h"
#include "chrome/test/data/webui/mojo/foobar.mojom-forward.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/associated_interface_ptr.h"
#include "mojo/public/cpp/bindings/associated_interface_ptr_info.h"
#include "mojo/public/cpp/bindings/associated_interface_request.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"
#include "mojo/public/cpp/bindings/thread_safe_interface_ptr.h"






namespace test {
namespace mojom {

class FooProxy;

template <typename ImplRefTraits>
class FooStub;

class FooRequestValidator;
class FooResponseValidator;


class  Foo
    : public FooInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = FooInterfaceBase;
  using Proxy_ = FooProxy;

  template <typename ImplRefTraits>
  using Stub_ = FooStub<ImplRefTraits>;

  using RequestValidator_ = FooRequestValidator;
  using ResponseValidator_ = FooResponseValidator;
  enum MethodMinVersions : uint32_t {
    kGetFooMinVersion = 0,
  };
  virtual ~Foo() {}


  using GetFooCallback = base::OnceCallback<void(const std::string&)>;
  
  virtual void GetFoo(GetFooCallback callback) = 0;
};

class BarProxy;

template <typename ImplRefTraits>
class BarStub;

class BarRequestValidator;
class BarResponseValidator;


class  Bar
    : public BarInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = BarInterfaceBase;
  using Proxy_ = BarProxy;

  template <typename ImplRefTraits>
  using Stub_ = BarStub<ImplRefTraits>;

  using RequestValidator_ = BarRequestValidator;
  using ResponseValidator_ = BarResponseValidator;
  enum MethodMinVersions : uint32_t {
    kGetBarMinVersion = 0,
  };
  virtual ~Bar() {}


  using GetBarCallback = base::OnceCallback<void(const std::string&)>;
  
  virtual void GetBar(GetBarCallback callback) = 0;
};

class BazProxy;

template <typename ImplRefTraits>
class BazStub;

class BazRequestValidator;
class BazResponseValidator;


class  Baz
    : public BazInterfaceBase {
 public:
  static const char Name_[];
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;

  using Base_ = BazInterfaceBase;
  using Proxy_ = BazProxy;

  template <typename ImplRefTraits>
  using Stub_ = BazStub<ImplRefTraits>;

  using RequestValidator_ = BazRequestValidator;
  using ResponseValidator_ = BazResponseValidator;
  enum MethodMinVersions : uint32_t {
    kGetBazMinVersion = 0,
  };
  virtual ~Baz() {}


  using GetBazCallback = base::OnceCallback<void(const std::string&)>;
  
  virtual void GetBaz(GetBazCallback callback) = 0;
};



class  FooProxy
    : public Foo {
 public:
  using InterfaceType = Foo;

  explicit FooProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void GetFoo(GetFooCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class  BarProxy
    : public Bar {
 public:
  using InterfaceType = Bar;

  explicit BarProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void GetBar(GetBarCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class  BazProxy
    : public Baz {
 public:
  using InterfaceType = Baz;

  explicit BazProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void GetBaz(GetBazCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  FooStubDispatch {
 public:
  static bool Accept(Foo* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      Foo* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<Foo>>
class FooStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  FooStub() {}
  ~FooStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return FooStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return FooStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  BarStubDispatch {
 public:
  static bool Accept(Bar* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      Bar* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<Bar>>
class BarStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  BarStub() {}
  ~BarStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return BarStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return BarStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  BazStubDispatch {
 public:
  static bool Accept(Baz* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      Baz* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<Baz>>
class BazStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  BazStub() {}
  ~BazStub() override {}

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return BazStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return BazStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  FooRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  BarRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  BazRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  FooResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  BarResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  BazResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace mojom
}  // namespace test

namespace mojo {

}  // namespace mojo

#endif  // CHROME_TEST_DATA_WEBUI_MOJO_FOOBAR_MOJOM_H_
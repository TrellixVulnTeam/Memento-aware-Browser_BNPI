// chrome/test/data/webui/mojo/foobar.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "chrome/test/data/webui/mojo/foobar.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "chrome/test/data/webui/mojo/foobar.mojom-params-data.h"
#include "chrome/test/data/webui/mojo/foobar.mojom-shared-message-ids.h"

#include "chrome/test/data/webui/mojo/foobar.mojom-import-headers.h"


#ifndef CHROME_TEST_DATA_WEBUI_MOJO_FOOBAR_MOJOM_JUMBO_H_
#define CHROME_TEST_DATA_WEBUI_MOJO_FOOBAR_MOJOM_JUMBO_H_
#endif
namespace test {
namespace mojom {
const char Foo::Name_[] = "test.mojom.Foo";

class Foo_GetFoo_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Foo_GetFoo_ForwardToCallback(
      Foo::GetFooCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  Foo::GetFooCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(Foo_GetFoo_ForwardToCallback);
};

FooProxy::FooProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void FooProxy::GetFoo(
    GetFooCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "test::mojom::Foo::GetFoo");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kFoo_GetFoo_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::test::mojom::internal::Foo_GetFoo_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Foo::Name_);
  message.set_method_name("GetFoo");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new Foo_GetFoo_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
class Foo_GetFoo_ProxyToResponder {
 public:
  static Foo::GetFooCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<Foo_GetFoo_ProxyToResponder> proxy(
        new Foo_GetFoo_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&Foo_GetFoo_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~Foo_GetFoo_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  Foo_GetFoo_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "Foo::GetFooCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const std::string& in_value);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(Foo_GetFoo_ProxyToResponder);
};

bool Foo_GetFoo_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "test::mojom::Foo::GetFooCallback",
               "message", message->name());
#endif
  mojo::internal::MessageDispatchContext dispatch_context(message);

  DCHECK(message->is_serialized());
  internal::Foo_GetFoo_ResponseParams_Data* params =
      reinterpret_cast<
          internal::Foo_GetFoo_ResponseParams_Data*>(
              message->mutable_payload());
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  
  bool success = true;
  std::string p_value{};
  Foo_GetFoo_ResponseParamsDataView input_data_view(params, &serialization_context);
  
  if (success && !input_data_view.ReadValue(&p_value))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        Foo::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_value));
  return true;
}

void Foo_GetFoo_ProxyToResponder::Run(
    const std::string& in_value) {
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kFoo_GetFoo_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::test::mojom::internal::Foo_GetFoo_ResponseParams_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->value)::BaseType::BufferWriter
      value_writer;
  mojo::internal::Serialize<mojo::StringDataView>(
      in_value, buffer, &value_writer, &serialization_context);
  params->value.Set(
      value_writer.is_null() ? nullptr : value_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->value.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null value in ");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "(Impl)test::mojom::Foo::GetFooCallback",
               "message", message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Foo::Name_);
  message.set_method_name("GetFoo");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool FooStubDispatch::Accept(
    Foo* impl,
    mojo::Message* message) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  switch (message->header()->name) {
    case internal::kFoo_GetFoo_Name: {
      break;
    }
  }
  return false;
}

// static
bool FooStubDispatch::AcceptWithResponder(
    Foo* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kFoo_GetFoo_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)test::mojom::Foo::GetFoo",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)test::mojom::Foo::GetFoo");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::Foo_GetFoo_Params_Data* params =
          reinterpret_cast<
              internal::Foo_GetFoo_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      Foo_GetFoo_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Foo::Name_, 0, false);
        return false;
      }
      Foo::GetFooCallback callback =
          Foo_GetFoo_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetFoo(std::move(callback));
      return true;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kFooValidationInfo[] = {
    {internal::kFoo_GetFoo_Name,
     {&internal::Foo_GetFoo_Params_Data::Validate,
      &internal::Foo_GetFoo_ResponseParams_Data::Validate}},
};

bool FooRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::test::mojom::Foo::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kFooValidationInfo);
}

bool FooResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::test::mojom::Foo::Name_;
  return mojo::internal::ValidateResponseGeneric(message, name, kFooValidationInfo);

}
const char Bar::Name_[] = "test.mojom.Bar";

class Bar_GetBar_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Bar_GetBar_ForwardToCallback(
      Bar::GetBarCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  Bar::GetBarCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(Bar_GetBar_ForwardToCallback);
};

BarProxy::BarProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void BarProxy::GetBar(
    GetBarCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "test::mojom::Bar::GetBar");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kBar_GetBar_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::test::mojom::internal::Bar_GetBar_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Bar::Name_);
  message.set_method_name("GetBar");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new Bar_GetBar_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
class Bar_GetBar_ProxyToResponder {
 public:
  static Bar::GetBarCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<Bar_GetBar_ProxyToResponder> proxy(
        new Bar_GetBar_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&Bar_GetBar_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~Bar_GetBar_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  Bar_GetBar_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "Bar::GetBarCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const std::string& in_value);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(Bar_GetBar_ProxyToResponder);
};

bool Bar_GetBar_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "test::mojom::Bar::GetBarCallback",
               "message", message->name());
#endif
  mojo::internal::MessageDispatchContext dispatch_context(message);

  DCHECK(message->is_serialized());
  internal::Bar_GetBar_ResponseParams_Data* params =
      reinterpret_cast<
          internal::Bar_GetBar_ResponseParams_Data*>(
              message->mutable_payload());
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  
  bool success = true;
  std::string p_value{};
  Bar_GetBar_ResponseParamsDataView input_data_view(params, &serialization_context);
  
  if (success && !input_data_view.ReadValue(&p_value))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        Bar::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_value));
  return true;
}

void Bar_GetBar_ProxyToResponder::Run(
    const std::string& in_value) {
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kBar_GetBar_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::test::mojom::internal::Bar_GetBar_ResponseParams_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->value)::BaseType::BufferWriter
      value_writer;
  mojo::internal::Serialize<mojo::StringDataView>(
      in_value, buffer, &value_writer, &serialization_context);
  params->value.Set(
      value_writer.is_null() ? nullptr : value_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->value.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null value in ");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "(Impl)test::mojom::Bar::GetBarCallback",
               "message", message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Bar::Name_);
  message.set_method_name("GetBar");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool BarStubDispatch::Accept(
    Bar* impl,
    mojo::Message* message) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  switch (message->header()->name) {
    case internal::kBar_GetBar_Name: {
      break;
    }
  }
  return false;
}

// static
bool BarStubDispatch::AcceptWithResponder(
    Bar* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kBar_GetBar_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)test::mojom::Bar::GetBar",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)test::mojom::Bar::GetBar");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::Bar_GetBar_Params_Data* params =
          reinterpret_cast<
              internal::Bar_GetBar_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      Bar_GetBar_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Bar::Name_, 0, false);
        return false;
      }
      Bar::GetBarCallback callback =
          Bar_GetBar_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetBar(std::move(callback));
      return true;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kBarValidationInfo[] = {
    {internal::kBar_GetBar_Name,
     {&internal::Bar_GetBar_Params_Data::Validate,
      &internal::Bar_GetBar_ResponseParams_Data::Validate}},
};

bool BarRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::test::mojom::Bar::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kBarValidationInfo);
}

bool BarResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::test::mojom::Bar::Name_;
  return mojo::internal::ValidateResponseGeneric(message, name, kBarValidationInfo);

}
const char Baz::Name_[] = "test.mojom.Baz";

class Baz_GetBaz_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Baz_GetBaz_ForwardToCallback(
      Baz::GetBazCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  Baz::GetBazCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(Baz_GetBaz_ForwardToCallback);
};

BazProxy::BazProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void BazProxy::GetBaz(
    GetBazCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "test::mojom::Baz::GetBaz");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kBaz_GetBaz_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::test::mojom::internal::Baz_GetBaz_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Baz::Name_);
  message.set_method_name("GetBaz");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new Baz_GetBaz_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}
class Baz_GetBaz_ProxyToResponder {
 public:
  static Baz::GetBazCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<Baz_GetBaz_ProxyToResponder> proxy(
        new Baz_GetBaz_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&Baz_GetBaz_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~Baz_GetBaz_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  Baz_GetBaz_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "Baz::GetBazCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const std::string& in_value);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(Baz_GetBaz_ProxyToResponder);
};

bool Baz_GetBaz_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "test::mojom::Baz::GetBazCallback",
               "message", message->name());
#endif
  mojo::internal::MessageDispatchContext dispatch_context(message);

  DCHECK(message->is_serialized());
  internal::Baz_GetBaz_ResponseParams_Data* params =
      reinterpret_cast<
          internal::Baz_GetBaz_ResponseParams_Data*>(
              message->mutable_payload());
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  
  bool success = true;
  std::string p_value{};
  Baz_GetBaz_ResponseParamsDataView input_data_view(params, &serialization_context);
  
  if (success && !input_data_view.ReadValue(&p_value))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        Baz::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_value));
  return true;
}

void Baz_GetBaz_ProxyToResponder::Run(
    const std::string& in_value) {
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kBaz_GetBaz_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::test::mojom::internal::Baz_GetBaz_ResponseParams_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->value)::BaseType::BufferWriter
      value_writer;
  mojo::internal::Serialize<mojo::StringDataView>(
      in_value, buffer, &value_writer, &serialization_context);
  params->value.Set(
      value_writer.is_null() ? nullptr : value_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->value.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null value in ");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "(Impl)test::mojom::Baz::GetBazCallback",
               "message", message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(Baz::Name_);
  message.set_method_name("GetBaz");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool BazStubDispatch::Accept(
    Baz* impl,
    mojo::Message* message) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  switch (message->header()->name) {
    case internal::kBaz_GetBaz_Name: {
      break;
    }
  }
  return false;
}

// static
bool BazStubDispatch::AcceptWithResponder(
    Baz* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kBaz_GetBaz_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)test::mojom::Baz::GetBaz",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)test::mojom::Baz::GetBaz");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::Baz_GetBaz_Params_Data* params =
          reinterpret_cast<
              internal::Baz_GetBaz_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      Baz_GetBaz_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            Baz::Name_, 0, false);
        return false;
      }
      Baz::GetBazCallback callback =
          Baz_GetBaz_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetBaz(std::move(callback));
      return true;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kBazValidationInfo[] = {
    {internal::kBaz_GetBaz_Name,
     {&internal::Baz_GetBaz_Params_Data::Validate,
      &internal::Baz_GetBaz_ResponseParams_Data::Validate}},
};

bool BazRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::test::mojom::Baz::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kBazValidationInfo);
}

bool BazResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::test::mojom::Baz::Name_;
  return mojo::internal::ValidateResponseGeneric(message, name, kBazValidationInfo);

}
}  // namespace mojom
}  // namespace test

namespace mojo {

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
// chrome/test/data/webui/mojo/foobar.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "chrome/test/data/webui/mojo/foobar.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"


#ifndef CHROME_TEST_DATA_WEBUI_MOJO_FOOBAR_MOJOM_JUMBO_H_
#define CHROME_TEST_DATA_WEBUI_MOJO_FOOBAR_MOJOM_JUMBO_H_
#endif


namespace test {
namespace mojom {


void FooInterceptorForTesting::GetFoo(GetFooCallback callback) {
  GetForwardingInterface()->GetFoo(std::move(callback));
}
FooAsyncWaiter::FooAsyncWaiter(
    Foo* proxy) : proxy_(proxy) {}

FooAsyncWaiter::~FooAsyncWaiter() = default;

void FooAsyncWaiter::GetFoo(
    std::string* out_value) {
  base::RunLoop loop;
  proxy_->GetFoo(
      base::BindOnce(
          [](base::RunLoop* loop,
             std::string* out_value
,
             const std::string& value) {*out_value = std::move(value);
            loop->Quit();
          },
          &loop,
          out_value));
  loop.Run();
}



void BarInterceptorForTesting::GetBar(GetBarCallback callback) {
  GetForwardingInterface()->GetBar(std::move(callback));
}
BarAsyncWaiter::BarAsyncWaiter(
    Bar* proxy) : proxy_(proxy) {}

BarAsyncWaiter::~BarAsyncWaiter() = default;

void BarAsyncWaiter::GetBar(
    std::string* out_value) {
  base::RunLoop loop;
  proxy_->GetBar(
      base::BindOnce(
          [](base::RunLoop* loop,
             std::string* out_value
,
             const std::string& value) {*out_value = std::move(value);
            loop->Quit();
          },
          &loop,
          out_value));
  loop.Run();
}



void BazInterceptorForTesting::GetBaz(GetBazCallback callback) {
  GetForwardingInterface()->GetBaz(std::move(callback));
}
BazAsyncWaiter::BazAsyncWaiter(
    Baz* proxy) : proxy_(proxy) {}

BazAsyncWaiter::~BazAsyncWaiter() = default;

void BazAsyncWaiter::GetBaz(
    std::string* out_value) {
  base::RunLoop loop;
  proxy_->GetBaz(
      base::BindOnce(
          [](base::RunLoop* loop,
             std::string* out_value
,
             const std::string& value) {*out_value = std::move(value);
            loop->Quit();
          },
          &loop,
          out_value));
  loop.Run();
}





}  // namespace mojom
}  // namespace test

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
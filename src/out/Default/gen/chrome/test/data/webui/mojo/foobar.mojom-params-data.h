// chrome/test/data/webui/mojo/foobar.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_TEST_DATA_WEBUI_MOJO_FOOBAR_MOJOM_PARAMS_DATA_H_
#define CHROME_TEST_DATA_WEBUI_MOJO_FOOBAR_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace test {
namespace mojom {
namespace internal {
class  Foo_GetFoo_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Foo_GetFoo_Params_Data));
      new (data()) Foo_GetFoo_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Foo_GetFoo_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Foo_GetFoo_Params_Data>(index_);
    }
    Foo_GetFoo_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  Foo_GetFoo_Params_Data();
  ~Foo_GetFoo_Params_Data() = delete;
};
static_assert(sizeof(Foo_GetFoo_Params_Data) == 8,
              "Bad sizeof(Foo_GetFoo_Params_Data)");
class  Foo_GetFoo_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Foo_GetFoo_ResponseParams_Data));
      new (data()) Foo_GetFoo_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Foo_GetFoo_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Foo_GetFoo_ResponseParams_Data>(index_);
    }
    Foo_GetFoo_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> value;

 private:
  Foo_GetFoo_ResponseParams_Data();
  ~Foo_GetFoo_ResponseParams_Data() = delete;
};
static_assert(sizeof(Foo_GetFoo_ResponseParams_Data) == 16,
              "Bad sizeof(Foo_GetFoo_ResponseParams_Data)");
class  Bar_GetBar_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Bar_GetBar_Params_Data));
      new (data()) Bar_GetBar_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Bar_GetBar_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Bar_GetBar_Params_Data>(index_);
    }
    Bar_GetBar_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  Bar_GetBar_Params_Data();
  ~Bar_GetBar_Params_Data() = delete;
};
static_assert(sizeof(Bar_GetBar_Params_Data) == 8,
              "Bad sizeof(Bar_GetBar_Params_Data)");
class  Bar_GetBar_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Bar_GetBar_ResponseParams_Data));
      new (data()) Bar_GetBar_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Bar_GetBar_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Bar_GetBar_ResponseParams_Data>(index_);
    }
    Bar_GetBar_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> value;

 private:
  Bar_GetBar_ResponseParams_Data();
  ~Bar_GetBar_ResponseParams_Data() = delete;
};
static_assert(sizeof(Bar_GetBar_ResponseParams_Data) == 16,
              "Bad sizeof(Bar_GetBar_ResponseParams_Data)");
class  Baz_GetBaz_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Baz_GetBaz_Params_Data));
      new (data()) Baz_GetBaz_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Baz_GetBaz_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Baz_GetBaz_Params_Data>(index_);
    }
    Baz_GetBaz_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  Baz_GetBaz_Params_Data();
  ~Baz_GetBaz_Params_Data() = delete;
};
static_assert(sizeof(Baz_GetBaz_Params_Data) == 8,
              "Bad sizeof(Baz_GetBaz_Params_Data)");
class  Baz_GetBaz_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Baz_GetBaz_ResponseParams_Data));
      new (data()) Baz_GetBaz_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Baz_GetBaz_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Baz_GetBaz_ResponseParams_Data>(index_);
    }
    Baz_GetBaz_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> value;

 private:
  Baz_GetBaz_ResponseParams_Data();
  ~Baz_GetBaz_ResponseParams_Data() = delete;
};
static_assert(sizeof(Baz_GetBaz_ResponseParams_Data) == 16,
              "Bad sizeof(Baz_GetBaz_ResponseParams_Data)");

}  // namespace internal
class Foo_GetFoo_ParamsDataView {
 public:
  Foo_GetFoo_ParamsDataView() {}

  Foo_GetFoo_ParamsDataView(
      internal::Foo_GetFoo_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::Foo_GetFoo_Params_Data* data_ = nullptr;
};

class Foo_GetFoo_ResponseParamsDataView {
 public:
  Foo_GetFoo_ResponseParamsDataView() {}

  Foo_GetFoo_ResponseParamsDataView(
      internal::Foo_GetFoo_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetValueDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadValue(UserType* output) {
    auto* pointer = data_->value.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::Foo_GetFoo_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class Bar_GetBar_ParamsDataView {
 public:
  Bar_GetBar_ParamsDataView() {}

  Bar_GetBar_ParamsDataView(
      internal::Bar_GetBar_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::Bar_GetBar_Params_Data* data_ = nullptr;
};

class Bar_GetBar_ResponseParamsDataView {
 public:
  Bar_GetBar_ResponseParamsDataView() {}

  Bar_GetBar_ResponseParamsDataView(
      internal::Bar_GetBar_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetValueDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadValue(UserType* output) {
    auto* pointer = data_->value.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::Bar_GetBar_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class Baz_GetBaz_ParamsDataView {
 public:
  Baz_GetBaz_ParamsDataView() {}

  Baz_GetBaz_ParamsDataView(
      internal::Baz_GetBaz_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::Baz_GetBaz_Params_Data* data_ = nullptr;
};

class Baz_GetBaz_ResponseParamsDataView {
 public:
  Baz_GetBaz_ResponseParamsDataView() {}

  Baz_GetBaz_ResponseParamsDataView(
      internal::Baz_GetBaz_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetValueDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadValue(UserType* output) {
    auto* pointer = data_->value.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::Baz_GetBaz_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};




inline void Foo_GetFoo_ResponseParamsDataView::GetValueDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->value.Get();
  *output = mojo::StringDataView(pointer, context_);
}




inline void Bar_GetBar_ResponseParamsDataView::GetValueDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->value.Get();
  *output = mojo::StringDataView(pointer, context_);
}




inline void Baz_GetBaz_ResponseParamsDataView::GetValueDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->value.Get();
  *output = mojo::StringDataView(pointer, context_);
}

}  // namespace mojom
}  // namespace test

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CHROME_TEST_DATA_WEBUI_MOJO_FOOBAR_MOJOM_PARAMS_DATA_H_
// extensions/common/api/mime_handler.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef EXTENSIONS_COMMON_API_MIME_HANDLER_MOJOM_PARAMS_DATA_H_
#define EXTENSIONS_COMMON_API_MIME_HANDLER_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace extensions {
namespace mime_handler {
namespace internal {
class  MimeHandlerService_GetStreamInfo_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MimeHandlerService_GetStreamInfo_Params_Data));
      new (data()) MimeHandlerService_GetStreamInfo_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MimeHandlerService_GetStreamInfo_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MimeHandlerService_GetStreamInfo_Params_Data>(index_);
    }
    MimeHandlerService_GetStreamInfo_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  MimeHandlerService_GetStreamInfo_Params_Data();
  ~MimeHandlerService_GetStreamInfo_Params_Data() = delete;
};
static_assert(sizeof(MimeHandlerService_GetStreamInfo_Params_Data) == 8,
              "Bad sizeof(MimeHandlerService_GetStreamInfo_Params_Data)");
class  MimeHandlerService_GetStreamInfo_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MimeHandlerService_GetStreamInfo_ResponseParams_Data));
      new (data()) MimeHandlerService_GetStreamInfo_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MimeHandlerService_GetStreamInfo_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MimeHandlerService_GetStreamInfo_ResponseParams_Data>(index_);
    }
    MimeHandlerService_GetStreamInfo_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::StreamInfo_Data> stream_info;

 private:
  MimeHandlerService_GetStreamInfo_ResponseParams_Data();
  ~MimeHandlerService_GetStreamInfo_ResponseParams_Data() = delete;
};
static_assert(sizeof(MimeHandlerService_GetStreamInfo_ResponseParams_Data) == 16,
              "Bad sizeof(MimeHandlerService_GetStreamInfo_ResponseParams_Data)");
class  BeforeUnloadControl_SetShowBeforeUnloadDialog_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(BeforeUnloadControl_SetShowBeforeUnloadDialog_Params_Data));
      new (data()) BeforeUnloadControl_SetShowBeforeUnloadDialog_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    BeforeUnloadControl_SetShowBeforeUnloadDialog_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<BeforeUnloadControl_SetShowBeforeUnloadDialog_Params_Data>(index_);
    }
    BeforeUnloadControl_SetShowBeforeUnloadDialog_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t show_dialog : 1;
  uint8_t padfinal_[7];

 private:
  BeforeUnloadControl_SetShowBeforeUnloadDialog_Params_Data();
  ~BeforeUnloadControl_SetShowBeforeUnloadDialog_Params_Data() = delete;
};
static_assert(sizeof(BeforeUnloadControl_SetShowBeforeUnloadDialog_Params_Data) == 16,
              "Bad sizeof(BeforeUnloadControl_SetShowBeforeUnloadDialog_Params_Data)");
class  BeforeUnloadControl_SetShowBeforeUnloadDialog_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(BeforeUnloadControl_SetShowBeforeUnloadDialog_ResponseParams_Data));
      new (data()) BeforeUnloadControl_SetShowBeforeUnloadDialog_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    BeforeUnloadControl_SetShowBeforeUnloadDialog_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<BeforeUnloadControl_SetShowBeforeUnloadDialog_ResponseParams_Data>(index_);
    }
    BeforeUnloadControl_SetShowBeforeUnloadDialog_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  BeforeUnloadControl_SetShowBeforeUnloadDialog_ResponseParams_Data();
  ~BeforeUnloadControl_SetShowBeforeUnloadDialog_ResponseParams_Data() = delete;
};
static_assert(sizeof(BeforeUnloadControl_SetShowBeforeUnloadDialog_ResponseParams_Data) == 8,
              "Bad sizeof(BeforeUnloadControl_SetShowBeforeUnloadDialog_ResponseParams_Data)");

}  // namespace internal
class MimeHandlerService_GetStreamInfo_ParamsDataView {
 public:
  MimeHandlerService_GetStreamInfo_ParamsDataView() {}

  MimeHandlerService_GetStreamInfo_ParamsDataView(
      internal::MimeHandlerService_GetStreamInfo_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::MimeHandlerService_GetStreamInfo_Params_Data* data_ = nullptr;
};

class MimeHandlerService_GetStreamInfo_ResponseParamsDataView {
 public:
  MimeHandlerService_GetStreamInfo_ResponseParamsDataView() {}

  MimeHandlerService_GetStreamInfo_ResponseParamsDataView(
      internal::MimeHandlerService_GetStreamInfo_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetStreamInfoDataView(
      StreamInfoDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadStreamInfo(UserType* output) {
    auto* pointer = data_->stream_info.Get();
    return mojo::internal::Deserialize<::extensions::mime_handler::StreamInfoDataView>(
        pointer, output, context_);
  }
 private:
  internal::MimeHandlerService_GetStreamInfo_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class BeforeUnloadControl_SetShowBeforeUnloadDialog_ParamsDataView {
 public:
  BeforeUnloadControl_SetShowBeforeUnloadDialog_ParamsDataView() {}

  BeforeUnloadControl_SetShowBeforeUnloadDialog_ParamsDataView(
      internal::BeforeUnloadControl_SetShowBeforeUnloadDialog_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool show_dialog() const {
    return data_->show_dialog;
  }
 private:
  internal::BeforeUnloadControl_SetShowBeforeUnloadDialog_Params_Data* data_ = nullptr;
};

class BeforeUnloadControl_SetShowBeforeUnloadDialog_ResponseParamsDataView {
 public:
  BeforeUnloadControl_SetShowBeforeUnloadDialog_ResponseParamsDataView() {}

  BeforeUnloadControl_SetShowBeforeUnloadDialog_ResponseParamsDataView(
      internal::BeforeUnloadControl_SetShowBeforeUnloadDialog_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::BeforeUnloadControl_SetShowBeforeUnloadDialog_ResponseParams_Data* data_ = nullptr;
};




inline void MimeHandlerService_GetStreamInfo_ResponseParamsDataView::GetStreamInfoDataView(
    StreamInfoDataView* output) {
  auto pointer = data_->stream_info.Get();
  *output = StreamInfoDataView(pointer, context_);
}





}  // namespace mime_handler
}  // namespace extensions

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // EXTENSIONS_COMMON_API_MIME_HANDLER_MOJOM_PARAMS_DATA_H_
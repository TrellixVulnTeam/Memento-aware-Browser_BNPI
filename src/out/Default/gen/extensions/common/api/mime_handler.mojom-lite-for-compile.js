// extensions/common/api/mime_handler.mojom-lite-for-compile.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';

goog.require('mojo.internal');
goog.require('mojo.internal.interfaceSupport');







goog.provide('extensions.mimeHandler.MimeHandlerService');
goog.provide('extensions.mimeHandler.MimeHandlerServiceReceiver');
goog.provide('extensions.mimeHandler.MimeHandlerServiceCallbackRouter');
goog.provide('extensions.mimeHandler.MimeHandlerServiceInterface');
goog.provide('extensions.mimeHandler.MimeHandlerServiceRemote');
goog.provide('extensions.mimeHandler.MimeHandlerServicePendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
extensions.mimeHandler.MimeHandlerServicePendingReceiver = class {
  /** @param {!MojoHandle} handle */
  constructor(handle) {
    /** @public {!MojoHandle} */
    this.handle = handle;
  }
};

/** @interface */
extensions.mimeHandler.MimeHandlerServiceInterface = class {
  
  /**
   * @return {Promise<{
        streamInfo: ?extensions.mimeHandler.StreamInfo,
   *  }>}
   */

  getStreamInfo() {}
};

/**
 * @export
 * @implements { extensions.mimeHandler.MimeHandlerServiceInterface }
 */
extensions.mimeHandler.MimeHandlerServiceRemote = class {
  /** @param {MojoHandle=} opt_handle */
  constructor(opt_handle) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!extensions.mimeHandler.MimeHandlerServicePendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          extensions.mimeHandler.MimeHandlerServicePendingReceiver,
          opt_handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!extensions.mimeHandler.MimeHandlerServicePendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @return {Promise<{
        streamInfo: ?extensions.mimeHandler.StreamInfo,
   *  }>}
   */

  getStreamInfo() {
    return this.proxy.sendMessage(
        488234966,
        extensions.mimeHandler.MimeHandlerService_GetStreamInfo_ParamsSpec.$,
        extensions.mimeHandler.MimeHandlerService_GetStreamInfo_ResponseParamsSpec.$,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the MimeHandlerService
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
extensions.mimeHandler.MimeHandlerServiceReceiver = class {
  /**
   * @param {!extensions.mimeHandler.MimeHandlerServiceInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!extensions.mimeHandler.MimeHandlerServiceRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        extensions.mimeHandler.MimeHandlerServiceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!extensions.mimeHandler.MimeHandlerServiceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        488234966,
        extensions.mimeHandler.MimeHandlerService_GetStreamInfo_ParamsSpec.$,
        extensions.mimeHandler.MimeHandlerService_GetStreamInfo_ResponseParamsSpec.$,
        impl.getStreamInfo.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
extensions.mimeHandler.MimeHandlerService = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "extensions.mime_handler.MimeHandlerService";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!extensions.mimeHandler.MimeHandlerServiceRemote}
   * @export
   */
  static getRemote() {
    let remote = new extensions.mimeHandler.MimeHandlerServiceRemote;
    Mojo.bindInterface(this.$interfaceName,
                       remote.$.bindNewPipeAndPassReceiver().handle);
    return remote;
  }
};


/**
 * An object which receives request messages for the MimeHandlerService
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
extensions.mimeHandler.MimeHandlerServiceCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      extensions.mimeHandler.MimeHandlerServiceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!extensions.mimeHandler.MimeHandlerServiceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getStreamInfo =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        488234966,
        extensions.mimeHandler.MimeHandlerService_GetStreamInfo_ParamsSpec.$,
        extensions.mimeHandler.MimeHandlerService_GetStreamInfo_ResponseParamsSpec.$,
        this.getStreamInfo.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('extensions.mimeHandler.BeforeUnloadControl');
goog.provide('extensions.mimeHandler.BeforeUnloadControlReceiver');
goog.provide('extensions.mimeHandler.BeforeUnloadControlCallbackRouter');
goog.provide('extensions.mimeHandler.BeforeUnloadControlInterface');
goog.provide('extensions.mimeHandler.BeforeUnloadControlRemote');
goog.provide('extensions.mimeHandler.BeforeUnloadControlPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
extensions.mimeHandler.BeforeUnloadControlPendingReceiver = class {
  /** @param {!MojoHandle} handle */
  constructor(handle) {
    /** @public {!MojoHandle} */
    this.handle = handle;
  }
};

/** @interface */
extensions.mimeHandler.BeforeUnloadControlInterface = class {
  
  /**
   * @param { !boolean } showDialog
   * @return {Promise}
   */

  setShowBeforeUnloadDialog(showDialog) {}
};

/**
 * @export
 * @implements { extensions.mimeHandler.BeforeUnloadControlInterface }
 */
extensions.mimeHandler.BeforeUnloadControlRemote = class {
  /** @param {MojoHandle=} opt_handle */
  constructor(opt_handle) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!extensions.mimeHandler.BeforeUnloadControlPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          extensions.mimeHandler.BeforeUnloadControlPendingReceiver,
          opt_handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!extensions.mimeHandler.BeforeUnloadControlPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !boolean } showDialog
   * @return {Promise}
   */

  setShowBeforeUnloadDialog(
      showDialog) {
    return this.proxy.sendMessage(
        965740532,
        extensions.mimeHandler.BeforeUnloadControl_SetShowBeforeUnloadDialog_ParamsSpec.$,
        extensions.mimeHandler.BeforeUnloadControl_SetShowBeforeUnloadDialog_ResponseParamsSpec.$,
        [
          showDialog
        ]);
  }
};

/**
 * An object which receives request messages for the BeforeUnloadControl
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
extensions.mimeHandler.BeforeUnloadControlReceiver = class {
  /**
   * @param {!extensions.mimeHandler.BeforeUnloadControlInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!extensions.mimeHandler.BeforeUnloadControlRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        extensions.mimeHandler.BeforeUnloadControlRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!extensions.mimeHandler.BeforeUnloadControlRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        965740532,
        extensions.mimeHandler.BeforeUnloadControl_SetShowBeforeUnloadDialog_ParamsSpec.$,
        extensions.mimeHandler.BeforeUnloadControl_SetShowBeforeUnloadDialog_ResponseParamsSpec.$,
        impl.setShowBeforeUnloadDialog.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
extensions.mimeHandler.BeforeUnloadControl = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "extensions.mime_handler.BeforeUnloadControl";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!extensions.mimeHandler.BeforeUnloadControlRemote}
   * @export
   */
  static getRemote() {
    let remote = new extensions.mimeHandler.BeforeUnloadControlRemote;
    Mojo.bindInterface(this.$interfaceName,
                       remote.$.bindNewPipeAndPassReceiver().handle);
    return remote;
  }
};


/**
 * An object which receives request messages for the BeforeUnloadControl
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
extensions.mimeHandler.BeforeUnloadControlCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      extensions.mimeHandler.BeforeUnloadControlRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!extensions.mimeHandler.BeforeUnloadControlRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.setShowBeforeUnloadDialog =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        965740532,
        extensions.mimeHandler.BeforeUnloadControl_SetShowBeforeUnloadDialog_ParamsSpec.$,
        extensions.mimeHandler.BeforeUnloadControl_SetShowBeforeUnloadDialog_ResponseParamsSpec.$,
        this.setShowBeforeUnloadDialog.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('extensions.mimeHandler.StreamInfoSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
extensions.mimeHandler.StreamInfoSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('extensions.mimeHandler.MimeHandlerService_GetStreamInfo_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
extensions.mimeHandler.MimeHandlerService_GetStreamInfo_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('extensions.mimeHandler.MimeHandlerService_GetStreamInfo_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
extensions.mimeHandler.MimeHandlerService_GetStreamInfo_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('extensions.mimeHandler.BeforeUnloadControl_SetShowBeforeUnloadDialog_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
extensions.mimeHandler.BeforeUnloadControl_SetShowBeforeUnloadDialog_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('extensions.mimeHandler.BeforeUnloadControl_SetShowBeforeUnloadDialog_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
extensions.mimeHandler.BeforeUnloadControl_SetShowBeforeUnloadDialog_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    extensions.mimeHandler.StreamInfoSpec.$,
    'StreamInfo',
    40,
    [
      mojo.internal.StructField(
        'mimeType', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'originalUrl', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'streamUrl', 16,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'tabId', 24,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'responseHeaders', 32,
        0,
        mojo.internal.Map(mojo.internal.String, mojo.internal.String, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'embedded', 28,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ]);



goog.provide('extensions.mimeHandler.StreamInfo');

/** @record */
extensions.mimeHandler.StreamInfo = class {
  constructor() {
    /** @type { !string } */
    this.mimeType;
    /** @type { !string } */
    this.originalUrl;
    /** @type { !string } */
    this.streamUrl;
    /** @type { !number } */
    this.tabId;
    /** @type { !boolean } */
    this.embedded;
    /** @type { !Object<!string, !string> } */
    this.responseHeaders;
  }
};



mojo.internal.Struct(
    extensions.mimeHandler.MimeHandlerService_GetStreamInfo_ParamsSpec.$,
    'MimeHandlerService_GetStreamInfo_Params',
    0,
    [
    ]);



goog.provide('extensions.mimeHandler.MimeHandlerService_GetStreamInfo_Params');

/** @record */
extensions.mimeHandler.MimeHandlerService_GetStreamInfo_Params = class {
  constructor() {
  }
};



mojo.internal.Struct(
    extensions.mimeHandler.MimeHandlerService_GetStreamInfo_ResponseParamsSpec.$,
    'MimeHandlerService_GetStreamInfo_ResponseParams',
    8,
    [
      mojo.internal.StructField(
        'streamInfo', 0,
        0,
        extensions.mimeHandler.StreamInfoSpec.$,
        null,
        true /* nullable */),
    ]);



goog.provide('extensions.mimeHandler.MimeHandlerService_GetStreamInfo_ResponseParams');

/** @record */
extensions.mimeHandler.MimeHandlerService_GetStreamInfo_ResponseParams = class {
  constructor() {
    /** @type { (extensions.mimeHandler.StreamInfo|undefined) } */
    this.streamInfo;
  }
};



mojo.internal.Struct(
    extensions.mimeHandler.BeforeUnloadControl_SetShowBeforeUnloadDialog_ParamsSpec.$,
    'BeforeUnloadControl_SetShowBeforeUnloadDialog_Params',
    8,
    [
      mojo.internal.StructField(
        'showDialog', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ]);



goog.provide('extensions.mimeHandler.BeforeUnloadControl_SetShowBeforeUnloadDialog_Params');

/** @record */
extensions.mimeHandler.BeforeUnloadControl_SetShowBeforeUnloadDialog_Params = class {
  constructor() {
    /** @type { !boolean } */
    this.showDialog;
  }
};



mojo.internal.Struct(
    extensions.mimeHandler.BeforeUnloadControl_SetShowBeforeUnloadDialog_ResponseParamsSpec.$,
    'BeforeUnloadControl_SetShowBeforeUnloadDialog_ResponseParams',
    0,
    [
    ]);



goog.provide('extensions.mimeHandler.BeforeUnloadControl_SetShowBeforeUnloadDialog_ResponseParams');

/** @record */
extensions.mimeHandler.BeforeUnloadControl_SetShowBeforeUnloadDialog_ResponseParams = class {
  constructor() {
  }
};


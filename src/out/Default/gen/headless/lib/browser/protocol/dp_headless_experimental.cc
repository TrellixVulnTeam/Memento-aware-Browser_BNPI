// This file is generated by TypeBuilder_cpp.template.

// Copyright (c) 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "headless/lib/browser/protocol/dp_headless_experimental.h"

#include "headless/lib/browser/protocol/protocol.h"

#include "third_party/inspector_protocol/crdtp/cbor.h"
#include "third_party/inspector_protocol/crdtp/find_by_first.h"
#include "third_party/inspector_protocol/crdtp/serializer_traits.h"
#include "third_party/inspector_protocol/crdtp/span.h"

namespace headless {
namespace protocol {
namespace HeadlessExperimental {

// ------------- Enum values from types.

const char Metainfo::domainName[] = "HeadlessExperimental";
const char Metainfo::commandPrefix[] = "HeadlessExperimental.";
const char Metainfo::version[] = "1.3";

const char* ScreenshotParams::FormatEnum::Jpeg = "jpeg";
const char* ScreenshotParams::FormatEnum::Png = "png";

std::unique_ptr<ScreenshotParams> ScreenshotParams::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<ScreenshotParams> result(new ScreenshotParams());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* formatValue = object->get("format");
    if (formatValue) {
        errors->SetName("format");
        result->m_format = ValueConversions<String>::fromValue(formatValue, errors);
    }
    protocol::Value* qualityValue = object->get("quality");
    if (qualityValue) {
        errors->SetName("quality");
        result->m_quality = ValueConversions<int>::fromValue(qualityValue, errors);
    }
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> ScreenshotParams::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    if (m_format.isJust())
        result->setValue("format", ValueConversions<String>::toValue(m_format.fromJust()));
    if (m_quality.isJust())
        result->setValue("quality", ValueConversions<int>::toValue(m_quality.fromJust()));
    return result;
}

void ScreenshotParams::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("format"), m_format, out);
      crdtp::SerializeField(crdtp::SpanFrom("quality"), m_quality, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<ScreenshotParams> ScreenshotParams::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<NeedsBeginFramesChangedNotification> NeedsBeginFramesChangedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<NeedsBeginFramesChangedNotification> result(new NeedsBeginFramesChangedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* needsBeginFramesValue = object->get("needsBeginFrames");
    errors->SetName("needsBeginFrames");
    result->m_needsBeginFrames = ValueConversions<bool>::fromValue(needsBeginFramesValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> NeedsBeginFramesChangedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("needsBeginFrames", ValueConversions<bool>::toValue(m_needsBeginFrames));
    return result;
}

void NeedsBeginFramesChangedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("needsBeginFrames"), m_needsBeginFrames, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<NeedsBeginFramesChangedNotification> NeedsBeginFramesChangedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

// ------------- Enum values from params.


// ------------- Frontend notifications.

void Frontend::NeedsBeginFramesChanged(bool needsBeginFrames)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<NeedsBeginFramesChangedNotification> messageData = NeedsBeginFramesChangedNotification::Create()
        .SetNeedsBeginFrames(needsBeginFrames)
        .Build();
    frontend_channel_->SendProtocolNotification(crdtp::CreateNotification("HeadlessExperimental.needsBeginFramesChanged", std::move(messageData)));
}

void Frontend::flush()
{
    frontend_channel_->FlushProtocolNotifications();
}

void Frontend::sendRawNotification(std::unique_ptr<Serializable> notification)
{
    frontend_channel_->SendProtocolNotification(std::move(notification));
}

// --------------------- Dispatcher.

class DomainDispatcherImpl : public protocol::DomainDispatcher {
public:
    DomainDispatcherImpl(FrontendChannel* frontendChannel, Backend* backend)
        : DomainDispatcher(frontendChannel)
        , m_backend(backend) {}
    ~DomainDispatcherImpl() override { }

    using CallHandler = void (DomainDispatcherImpl::*)(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);

    std::function<void(const crdtp::Dispatchable&)> Dispatch(crdtp::span<uint8_t> command_name) override;

    void beginFrame(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void disable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void enable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
 protected:
    Backend* m_backend;
};

namespace {
// This helper method with a static map of command methods (instance methods
// of DomainDispatcherImpl declared just above) by their name is used immediately below,
// in the DomainDispatcherImpl::Dispatch method.
DomainDispatcherImpl::CallHandler CommandByName(crdtp::span<uint8_t> command_name) {
  static auto* commands = [](){
    auto* commands = new std::vector<std::pair<crdtp::span<uint8_t>,
                              DomainDispatcherImpl::CallHandler>>{
    {
          crdtp::SpanFrom("beginFrame"),
          &DomainDispatcherImpl::beginFrame
    },
    {
          crdtp::SpanFrom("disable"),
          &DomainDispatcherImpl::disable
    },
    {
          crdtp::SpanFrom("enable"),
          &DomainDispatcherImpl::enable
    },
    };
    return commands;
  }();
  return crdtp::FindByFirst<DomainDispatcherImpl::CallHandler>(*commands, command_name, nullptr);
}
}  // namespace

std::function<void(const crdtp::Dispatchable&)> DomainDispatcherImpl::Dispatch(crdtp::span<uint8_t> command_name) {
  CallHandler handler = CommandByName(command_name);
  if (!handler) return nullptr;
  return [this, handler](const crdtp::Dispatchable& dispatchable){
    std::unique_ptr<DictionaryValue> params =
        DictionaryValue::cast(protocol::Value::parseBinary(dispatchable.Params().data(),
        dispatchable.Params().size()));
    ErrorSupport errors;
    errors.Push();
    (this->*handler)(dispatchable, params.get(), &errors);
  };
}


class BeginFrameCallbackImpl : public Backend::BeginFrameCallback, public DomainDispatcher::Callback {
public:
    BeginFrameCallbackImpl(std::unique_ptr<DomainDispatcher::WeakPtr> backendImpl, int callId, crdtp::span<uint8_t> message)
        : DomainDispatcher::Callback(std::move(backendImpl), callId,
crdtp::SpanFrom("HeadlessExperimental.beginFrame"), message) { }

    void sendSuccess(bool hasDamage, Maybe<Binary> screenshotData) override
    {
        std::vector<uint8_t> result_buffer;
        crdtp::cbor::EnvelopeEncoder envelope_encoder;
        envelope_encoder.EncodeStart(&result_buffer);
        result_buffer.push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
          crdtp::SerializeField(crdtp::SpanFrom("hasDamage"), hasDamage, &result_buffer);
          crdtp::SerializeField(crdtp::SpanFrom("screenshotData"), screenshotData, &result_buffer);
        result_buffer.push_back(crdtp::cbor::EncodeStop());
        envelope_encoder.EncodeStop(&result_buffer);
        sendIfActive(crdtp::Serializable::From(std::move(result_buffer)), DispatchResponse::Success());
    }

    void fallThrough() override
    {
        fallThroughIfActive();
    }

    void sendFailure(const DispatchResponse& response) override
    {
        DCHECK(response.IsError());
        sendIfActive(nullptr, response);
    }
};

void DomainDispatcherImpl::beginFrame(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* frameTimeTicksValue = params ? params->get("frameTimeTicks") : nullptr;
    Maybe<double> in_frameTimeTicks;
    if (frameTimeTicksValue) {
        errors->SetName("frameTimeTicks");
        in_frameTimeTicks = ValueConversions<double>::fromValue(frameTimeTicksValue, errors);
    }
    protocol::Value* intervalValue = params ? params->get("interval") : nullptr;
    Maybe<double> in_interval;
    if (intervalValue) {
        errors->SetName("interval");
        in_interval = ValueConversions<double>::fromValue(intervalValue, errors);
    }
    protocol::Value* noDisplayUpdatesValue = params ? params->get("noDisplayUpdates") : nullptr;
    Maybe<bool> in_noDisplayUpdates;
    if (noDisplayUpdatesValue) {
        errors->SetName("noDisplayUpdates");
        in_noDisplayUpdates = ValueConversions<bool>::fromValue(noDisplayUpdatesValue, errors);
    }
    protocol::Value* screenshotValue = params ? params->get("screenshot") : nullptr;
    Maybe<protocol::HeadlessExperimental::ScreenshotParams> in_screenshot;
    if (screenshotValue) {
        errors->SetName("screenshot");
        in_screenshot = ValueConversions<protocol::HeadlessExperimental::ScreenshotParams>::fromValue(screenshotValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    m_backend->BeginFrame(std::move(in_frameTimeTicks), std::move(in_interval), std::move(in_noDisplayUpdates), std::move(in_screenshot), std::make_unique<BeginFrameCallbackImpl>(weakPtr(), dispatchable.CallId(), dispatchable.Serialized()));
}

void DomainDispatcherImpl::disable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->Disable();
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("HeadlessExperimental.disable"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::enable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->Enable();
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("HeadlessExperimental.enable"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

namespace {
// This helper method (with a static map of redirects) is used from Dispatcher::wire
// immediately below.
const std::vector<std::pair<crdtp::span<uint8_t>, crdtp::span<uint8_t>>>& SortedRedirects() {
  static auto* redirects = [](){
    auto* redirects = new std::vector<std::pair<crdtp::span<uint8_t>, crdtp::span<uint8_t>>>{
    };
    return redirects;
  }();
  return *redirects;
}
}  // namespace

// static
void Dispatcher::wire(UberDispatcher* uber, Backend* backend)
{
    auto dispatcher = std::make_unique<DomainDispatcherImpl>(uber->channel(), backend);
    uber->WireBackend(crdtp::SpanFrom("HeadlessExperimental"), SortedRedirects(), std::move(dispatcher));
}

} // HeadlessExperimental
} // namespace headless
} // namespace protocol

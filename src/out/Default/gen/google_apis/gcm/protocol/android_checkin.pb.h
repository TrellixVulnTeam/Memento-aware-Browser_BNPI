// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: android_checkin.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_android_5fcheckin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_android_5fcheckin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include "google_apis/gcm/base/gcm_export.h"
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_android_5fcheckin_2eproto GCM_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct GCM_EXPORT TableStruct_android_5fcheckin_2eproto {
static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
PROTOBUF_SECTION_VARIABLE(protodesc_cold);
static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
PROTOBUF_SECTION_VARIABLE(protodesc_cold);
static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
PROTOBUF_SECTION_VARIABLE(protodesc_cold);
static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace checkin_proto {
class AndroidCheckinProto;
class AndroidCheckinProtoDefaultTypeInternal;
GCM_EXPORT extern AndroidCheckinProtoDefaultTypeInternal _AndroidCheckinProto_default_instance_;
class ChromeBuildProto;
class ChromeBuildProtoDefaultTypeInternal;
GCM_EXPORT extern ChromeBuildProtoDefaultTypeInternal _ChromeBuildProto_default_instance_;
}  // namespace checkin_proto
PROTOBUF_NAMESPACE_OPEN
template<> GCM_EXPORT ::checkin_proto::AndroidCheckinProto* Arena::CreateMaybeMessage<::checkin_proto::AndroidCheckinProto>(Arena*);
template<> GCM_EXPORT ::checkin_proto::ChromeBuildProto* Arena::CreateMaybeMessage<::checkin_proto::ChromeBuildProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace checkin_proto {

enum ChromeBuildProto_Platform : int {
ChromeBuildProto_Platform_PLATFORM_WIN = 1,
ChromeBuildProto_Platform_PLATFORM_MAC = 2,
ChromeBuildProto_Platform_PLATFORM_LINUX = 3,
ChromeBuildProto_Platform_PLATFORM_CROS = 4,
ChromeBuildProto_Platform_PLATFORM_IOS = 5,
ChromeBuildProto_Platform_PLATFORM_ANDROID = 6
};
GCM_EXPORT bool ChromeBuildProto_Platform_IsValid(int value);
constexpr ChromeBuildProto_Platform ChromeBuildProto_Platform_Platform_MIN = ChromeBuildProto_Platform_PLATFORM_WIN;
constexpr ChromeBuildProto_Platform ChromeBuildProto_Platform_Platform_MAX = ChromeBuildProto_Platform_PLATFORM_ANDROID;
constexpr int ChromeBuildProto_Platform_Platform_ARRAYSIZE = ChromeBuildProto_Platform_Platform_MAX + 1;

const std::string& ChromeBuildProto_Platform_Name(ChromeBuildProto_Platform value);
template<typename T>
inline const std::string& ChromeBuildProto_Platform_Name(T enum_t_value) {
static_assert(::std::is_same<T, ChromeBuildProto_Platform>::value ||
::std::is_integral<T>::value,
"Incorrect type passed to function ChromeBuildProto_Platform_Name.");
return ChromeBuildProto_Platform_Name(static_cast<ChromeBuildProto_Platform>(enum_t_value));
}
bool ChromeBuildProto_Platform_Parse(
const std::string& name, ChromeBuildProto_Platform* value);
enum ChromeBuildProto_Channel : int {
ChromeBuildProto_Channel_CHANNEL_STABLE = 1,
ChromeBuildProto_Channel_CHANNEL_BETA = 2,
ChromeBuildProto_Channel_CHANNEL_DEV = 3,
ChromeBuildProto_Channel_CHANNEL_CANARY = 4,
ChromeBuildProto_Channel_CHANNEL_UNKNOWN = 5
};
GCM_EXPORT bool ChromeBuildProto_Channel_IsValid(int value);
constexpr ChromeBuildProto_Channel ChromeBuildProto_Channel_Channel_MIN = ChromeBuildProto_Channel_CHANNEL_STABLE;
constexpr ChromeBuildProto_Channel ChromeBuildProto_Channel_Channel_MAX = ChromeBuildProto_Channel_CHANNEL_UNKNOWN;
constexpr int ChromeBuildProto_Channel_Channel_ARRAYSIZE = ChromeBuildProto_Channel_Channel_MAX + 1;

const std::string& ChromeBuildProto_Channel_Name(ChromeBuildProto_Channel value);
template<typename T>
inline const std::string& ChromeBuildProto_Channel_Name(T enum_t_value) {
static_assert(::std::is_same<T, ChromeBuildProto_Channel>::value ||
::std::is_integral<T>::value,
"Incorrect type passed to function ChromeBuildProto_Channel_Name.");
return ChromeBuildProto_Channel_Name(static_cast<ChromeBuildProto_Channel>(enum_t_value));
}
bool ChromeBuildProto_Channel_Parse(
const std::string& name, ChromeBuildProto_Channel* value);
enum DeviceType : int {
DEVICE_ANDROID_OS = 1,
DEVICE_IOS_OS = 2,
DEVICE_CHROME_BROWSER = 3,
DEVICE_CHROME_OS = 4
};
GCM_EXPORT bool DeviceType_IsValid(int value);
constexpr DeviceType DeviceType_MIN = DEVICE_ANDROID_OS;
constexpr DeviceType DeviceType_MAX = DEVICE_CHROME_OS;
constexpr int DeviceType_ARRAYSIZE = DeviceType_MAX + 1;

const std::string& DeviceType_Name(DeviceType value);
template<typename T>
inline const std::string& DeviceType_Name(T enum_t_value) {
static_assert(::std::is_same<T, DeviceType>::value ||
::std::is_integral<T>::value,
"Incorrect type passed to function DeviceType_Name.");
return DeviceType_Name(static_cast<DeviceType>(enum_t_value));
}
bool DeviceType_Parse(
const std::string& name, DeviceType* value);
// ===================================================================

class GCM_EXPORT ChromeBuildProto :
public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:checkin_proto.ChromeBuildProto) */ {
public:
ChromeBuildProto();
virtual ~ChromeBuildProto();

ChromeBuildProto(const ChromeBuildProto& from);
ChromeBuildProto(ChromeBuildProto&& from) noexcept
: ChromeBuildProto() {
*this = ::std::move(from);
}

inline ChromeBuildProto& operator=(const ChromeBuildProto& from) {
CopyFrom(from);
return *this;
}
inline ChromeBuildProto& operator=(ChromeBuildProto&& from) noexcept {
if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
if (this != &from) InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}
inline std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const ChromeBuildProto& default_instance();

static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
static inline const ChromeBuildProto* internal_default_instance() {
return reinterpret_cast<const ChromeBuildProto*>(
&_ChromeBuildProto_default_instance_);
}
static constexpr int kIndexInFileMessages =
0;

friend void swap(ChromeBuildProto& a, ChromeBuildProto& b) {
a.Swap(&b);
}
inline void Swap(ChromeBuildProto* other) {
if (other == this) return;
InternalSwap(other);
}

// implements Message ----------------------------------------------

inline ChromeBuildProto* New() const final {
return CreateMaybeMessage<ChromeBuildProto>(nullptr);
}

ChromeBuildProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
return CreateMaybeMessage<ChromeBuildProto>(arena);
}
void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
final;
void CopyFrom(const ChromeBuildProto& from);
void MergeFrom(const ChromeBuildProto& from);
PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
#else
bool MergePartialFromCodedStream(
::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
void SerializeWithCachedSizes(
::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
void DiscardUnknownFields();
int GetCachedSize() const final { return _cached_size_.Get(); }

private:
inline void SharedCtor();
inline void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(ChromeBuildProto* other);
friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
return "checkin_proto.ChromeBuildProto";
}
private:
inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
return nullptr;
}
inline void* MaybeArenaPtr() const {
return nullptr;
}
public:

std::string GetTypeName() const final;

// nested types ----------------------------------------------------

typedef ChromeBuildProto_Platform Platform;
static constexpr Platform PLATFORM_WIN =
ChromeBuildProto_Platform_PLATFORM_WIN;
static constexpr Platform PLATFORM_MAC =
ChromeBuildProto_Platform_PLATFORM_MAC;
static constexpr Platform PLATFORM_LINUX =
ChromeBuildProto_Platform_PLATFORM_LINUX;
static constexpr Platform PLATFORM_CROS =
ChromeBuildProto_Platform_PLATFORM_CROS;
static constexpr Platform PLATFORM_IOS =
ChromeBuildProto_Platform_PLATFORM_IOS;
static constexpr Platform PLATFORM_ANDROID =
ChromeBuildProto_Platform_PLATFORM_ANDROID;
static inline bool Platform_IsValid(int value) {
return ChromeBuildProto_Platform_IsValid(value);
}
static constexpr Platform Platform_MIN =
ChromeBuildProto_Platform_Platform_MIN;
static constexpr Platform Platform_MAX =
ChromeBuildProto_Platform_Platform_MAX;
static constexpr int Platform_ARRAYSIZE =
ChromeBuildProto_Platform_Platform_ARRAYSIZE;
template<typename T>
static inline const std::string& Platform_Name(T enum_t_value) {
static_assert(::std::is_same<T, Platform>::value ||
::std::is_integral<T>::value,
"Incorrect type passed to function Platform_Name.");
return ChromeBuildProto_Platform_Name(enum_t_value);
}
static inline bool Platform_Parse(const std::string& name,
Platform* value) {
return ChromeBuildProto_Platform_Parse(name, value);
}

typedef ChromeBuildProto_Channel Channel;
static constexpr Channel CHANNEL_STABLE =
ChromeBuildProto_Channel_CHANNEL_STABLE;
static constexpr Channel CHANNEL_BETA =
ChromeBuildProto_Channel_CHANNEL_BETA;
static constexpr Channel CHANNEL_DEV =
ChromeBuildProto_Channel_CHANNEL_DEV;
static constexpr Channel CHANNEL_CANARY =
ChromeBuildProto_Channel_CHANNEL_CANARY;
static constexpr Channel CHANNEL_UNKNOWN =
ChromeBuildProto_Channel_CHANNEL_UNKNOWN;
static inline bool Channel_IsValid(int value) {
return ChromeBuildProto_Channel_IsValid(value);
}
static constexpr Channel Channel_MIN =
ChromeBuildProto_Channel_Channel_MIN;
static constexpr Channel Channel_MAX =
ChromeBuildProto_Channel_Channel_MAX;
static constexpr int Channel_ARRAYSIZE =
ChromeBuildProto_Channel_Channel_ARRAYSIZE;
template<typename T>
static inline const std::string& Channel_Name(T enum_t_value) {
static_assert(::std::is_same<T, Channel>::value ||
::std::is_integral<T>::value,
"Incorrect type passed to function Channel_Name.");
return ChromeBuildProto_Channel_Name(enum_t_value);
}
static inline bool Channel_Parse(const std::string& name,
Channel* value) {
return ChromeBuildProto_Channel_Parse(name, value);
}

// accessors -------------------------------------------------------

enum : int {
kChromeVersionFieldNumber = 2,
kPlatformFieldNumber = 1,
kChannelFieldNumber = 3,
};
// optional string chrome_version = 2;
bool has_chrome_version() const;
void clear_chrome_version();
const std::string& chrome_version() const;
void set_chrome_version(const std::string& value);
void set_chrome_version(std::string&& value);
void set_chrome_version(const char* value);
void set_chrome_version(const char* value, size_t size);
std::string* mutable_chrome_version();
std::string* release_chrome_version();
void set_allocated_chrome_version(std::string* chrome_version);

// optional .checkin_proto.ChromeBuildProto.Platform platform = 1;
bool has_platform() const;
void clear_platform();
::checkin_proto::ChromeBuildProto_Platform platform() const;
void set_platform(::checkin_proto::ChromeBuildProto_Platform value);

// optional .checkin_proto.ChromeBuildProto.Channel channel = 3;
bool has_channel() const;
void clear_channel();
::checkin_proto::ChromeBuildProto_Channel channel() const;
void set_channel(::checkin_proto::ChromeBuildProto_Channel value);

// @@protoc_insertion_point(class_scope:checkin_proto.ChromeBuildProto)
private:
class _Internal;

::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chrome_version_;
int platform_;
int channel_;
friend struct ::TableStruct_android_5fcheckin_2eproto;
};
// -------------------------------------------------------------------

class GCM_EXPORT AndroidCheckinProto :
public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:checkin_proto.AndroidCheckinProto) */ {
public:
AndroidCheckinProto();
virtual ~AndroidCheckinProto();

AndroidCheckinProto(const AndroidCheckinProto& from);
AndroidCheckinProto(AndroidCheckinProto&& from) noexcept
: AndroidCheckinProto() {
*this = ::std::move(from);
}

inline AndroidCheckinProto& operator=(const AndroidCheckinProto& from) {
CopyFrom(from);
return *this;
}
inline AndroidCheckinProto& operator=(AndroidCheckinProto&& from) noexcept {
if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
if (this != &from) InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}
inline std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const AndroidCheckinProto& default_instance();

static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
static inline const AndroidCheckinProto* internal_default_instance() {
return reinterpret_cast<const AndroidCheckinProto*>(
&_AndroidCheckinProto_default_instance_);
}
static constexpr int kIndexInFileMessages =
1;

friend void swap(AndroidCheckinProto& a, AndroidCheckinProto& b) {
a.Swap(&b);
}
inline void Swap(AndroidCheckinProto* other) {
if (other == this) return;
InternalSwap(other);
}

// implements Message ----------------------------------------------

inline AndroidCheckinProto* New() const final {
return CreateMaybeMessage<AndroidCheckinProto>(nullptr);
}

AndroidCheckinProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
return CreateMaybeMessage<AndroidCheckinProto>(arena);
}
void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
final;
void CopyFrom(const AndroidCheckinProto& from);
void MergeFrom(const AndroidCheckinProto& from);
PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
#else
bool MergePartialFromCodedStream(
::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
void SerializeWithCachedSizes(
::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
void DiscardUnknownFields();
int GetCachedSize() const final { return _cached_size_.Get(); }

private:
inline void SharedCtor();
inline void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(AndroidCheckinProto* other);
friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
return "checkin_proto.AndroidCheckinProto";
}
private:
inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
return nullptr;
}
inline void* MaybeArenaPtr() const {
return nullptr;
}
public:

std::string GetTypeName() const final;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

enum : int {
kCellOperatorFieldNumber = 6,
kSimOperatorFieldNumber = 7,
kRoamingFieldNumber = 8,
kChromeBuildFieldNumber = 13,
kLastCheckinMsecFieldNumber = 2,
kUserNumberFieldNumber = 9,
kTypeFieldNumber = 12,
};
// optional string cell_operator = 6;
bool has_cell_operator() const;
void clear_cell_operator();
const std::string& cell_operator() const;
void set_cell_operator(const std::string& value);
void set_cell_operator(std::string&& value);
void set_cell_operator(const char* value);
void set_cell_operator(const char* value, size_t size);
std::string* mutable_cell_operator();
std::string* release_cell_operator();
void set_allocated_cell_operator(std::string* cell_operator);

// optional string sim_operator = 7;
bool has_sim_operator() const;
void clear_sim_operator();
const std::string& sim_operator() const;
void set_sim_operator(const std::string& value);
void set_sim_operator(std::string&& value);
void set_sim_operator(const char* value);
void set_sim_operator(const char* value, size_t size);
std::string* mutable_sim_operator();
std::string* release_sim_operator();
void set_allocated_sim_operator(std::string* sim_operator);

// optional string roaming = 8;
bool has_roaming() const;
void clear_roaming();
const std::string& roaming() const;
void set_roaming(const std::string& value);
void set_roaming(std::string&& value);
void set_roaming(const char* value);
void set_roaming(const char* value, size_t size);
std::string* mutable_roaming();
std::string* release_roaming();
void set_allocated_roaming(std::string* roaming);

// optional .checkin_proto.ChromeBuildProto chrome_build = 13;
bool has_chrome_build() const;
void clear_chrome_build();
const ::checkin_proto::ChromeBuildProto& chrome_build() const;
::checkin_proto::ChromeBuildProto* release_chrome_build();
::checkin_proto::ChromeBuildProto* mutable_chrome_build();
void set_allocated_chrome_build(::checkin_proto::ChromeBuildProto* chrome_build);

// optional int64 last_checkin_msec = 2;
bool has_last_checkin_msec() const;
void clear_last_checkin_msec();
::PROTOBUF_NAMESPACE_ID::int64 last_checkin_msec() const;
void set_last_checkin_msec(::PROTOBUF_NAMESPACE_ID::int64 value);

// optional int32 user_number = 9;
bool has_user_number() const;
void clear_user_number();
::PROTOBUF_NAMESPACE_ID::int32 user_number() const;
void set_user_number(::PROTOBUF_NAMESPACE_ID::int32 value);

// optional .checkin_proto.DeviceType type = 12 [default = DEVICE_ANDROID_OS];
bool has_type() const;
void clear_type();
::checkin_proto::DeviceType type() const;
void set_type(::checkin_proto::DeviceType value);

// @@protoc_insertion_point(class_scope:checkin_proto.AndroidCheckinProto)
private:
class _Internal;

::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cell_operator_;
::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sim_operator_;
::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roaming_;
::checkin_proto::ChromeBuildProto* chrome_build_;
::PROTOBUF_NAMESPACE_ID::int64 last_checkin_msec_;
::PROTOBUF_NAMESPACE_ID::int32 user_number_;
int type_;
friend struct ::TableStruct_android_5fcheckin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChromeBuildProto

// optional .checkin_proto.ChromeBuildProto.Platform platform = 1;
inline bool ChromeBuildProto::has_platform() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChromeBuildProto::clear_platform() {
platform_ = 1;
_has_bits_[0] &= ~0x00000002u;
}
inline ::checkin_proto::ChromeBuildProto_Platform ChromeBuildProto::platform() const {
// @@protoc_insertion_point(field_get:checkin_proto.ChromeBuildProto.platform)
return static_cast< ::checkin_proto::ChromeBuildProto_Platform >(platform_);
}
inline void ChromeBuildProto::set_platform(::checkin_proto::ChromeBuildProto_Platform value) {
assert(::checkin_proto::ChromeBuildProto_Platform_IsValid(value));
_has_bits_[0] |= 0x00000002u;
platform_ = value;
// @@protoc_insertion_point(field_set:checkin_proto.ChromeBuildProto.platform)
}

// optional string chrome_version = 2;
inline bool ChromeBuildProto::has_chrome_version() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChromeBuildProto::clear_chrome_version() {
chrome_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
_has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChromeBuildProto::chrome_version() const {
// @@protoc_insertion_point(field_get:checkin_proto.ChromeBuildProto.chrome_version)
return chrome_version_.GetNoArena();
}
inline void ChromeBuildProto::set_chrome_version(const std::string& value) {
_has_bits_[0] |= 0x00000001u;
chrome_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:checkin_proto.ChromeBuildProto.chrome_version)
}
inline void ChromeBuildProto::set_chrome_version(std::string&& value) {
_has_bits_[0] |= 0x00000001u;
chrome_version_.SetNoArena(
&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:checkin_proto.ChromeBuildProto.chrome_version)
}
inline void ChromeBuildProto::set_chrome_version(const char* value) {
GOOGLE_DCHECK(value != nullptr);
_has_bits_[0] |= 0x00000001u;
chrome_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:checkin_proto.ChromeBuildProto.chrome_version)
}
inline void ChromeBuildProto::set_chrome_version(const char* value, size_t size) {
_has_bits_[0] |= 0x00000001u;
chrome_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:checkin_proto.ChromeBuildProto.chrome_version)
}
inline std::string* ChromeBuildProto::mutable_chrome_version() {
_has_bits_[0] |= 0x00000001u;
// @@protoc_insertion_point(field_mutable:checkin_proto.ChromeBuildProto.chrome_version)
return chrome_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChromeBuildProto::release_chrome_version() {
// @@protoc_insertion_point(field_release:checkin_proto.ChromeBuildProto.chrome_version)
if (!has_chrome_version()) {
return nullptr;
}
_has_bits_[0] &= ~0x00000001u;
return chrome_version_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeBuildProto::set_allocated_chrome_version(std::string* chrome_version) {
if (chrome_version != nullptr) {
_has_bits_[0] |= 0x00000001u;
} else {
_has_bits_[0] &= ~0x00000001u;
}
chrome_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chrome_version);
// @@protoc_insertion_point(field_set_allocated:checkin_proto.ChromeBuildProto.chrome_version)
}

// optional .checkin_proto.ChromeBuildProto.Channel channel = 3;
inline bool ChromeBuildProto::has_channel() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChromeBuildProto::clear_channel() {
channel_ = 1;
_has_bits_[0] &= ~0x00000004u;
}
inline ::checkin_proto::ChromeBuildProto_Channel ChromeBuildProto::channel() const {
// @@protoc_insertion_point(field_get:checkin_proto.ChromeBuildProto.channel)
return static_cast< ::checkin_proto::ChromeBuildProto_Channel >(channel_);
}
inline void ChromeBuildProto::set_channel(::checkin_proto::ChromeBuildProto_Channel value) {
assert(::checkin_proto::ChromeBuildProto_Channel_IsValid(value));
_has_bits_[0] |= 0x00000004u;
channel_ = value;
// @@protoc_insertion_point(field_set:checkin_proto.ChromeBuildProto.channel)
}

// -------------------------------------------------------------------

// AndroidCheckinProto

// optional int64 last_checkin_msec = 2;
inline bool AndroidCheckinProto::has_last_checkin_msec() const {
return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AndroidCheckinProto::clear_last_checkin_msec() {
last_checkin_msec_ = PROTOBUF_LONGLONG(0);
_has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AndroidCheckinProto::last_checkin_msec() const {
// @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinProto.last_checkin_msec)
return last_checkin_msec_;
}
inline void AndroidCheckinProto::set_last_checkin_msec(::PROTOBUF_NAMESPACE_ID::int64 value) {
_has_bits_[0] |= 0x00000010u;
last_checkin_msec_ = value;
// @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinProto.last_checkin_msec)
}

// optional string cell_operator = 6;
inline bool AndroidCheckinProto::has_cell_operator() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AndroidCheckinProto::clear_cell_operator() {
cell_operator_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
_has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AndroidCheckinProto::cell_operator() const {
// @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinProto.cell_operator)
return cell_operator_.GetNoArena();
}
inline void AndroidCheckinProto::set_cell_operator(const std::string& value) {
_has_bits_[0] |= 0x00000001u;
cell_operator_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinProto.cell_operator)
}
inline void AndroidCheckinProto::set_cell_operator(std::string&& value) {
_has_bits_[0] |= 0x00000001u;
cell_operator_.SetNoArena(
&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinProto.cell_operator)
}
inline void AndroidCheckinProto::set_cell_operator(const char* value) {
GOOGLE_DCHECK(value != nullptr);
_has_bits_[0] |= 0x00000001u;
cell_operator_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinProto.cell_operator)
}
inline void AndroidCheckinProto::set_cell_operator(const char* value, size_t size) {
_has_bits_[0] |= 0x00000001u;
cell_operator_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinProto.cell_operator)
}
inline std::string* AndroidCheckinProto::mutable_cell_operator() {
_has_bits_[0] |= 0x00000001u;
// @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinProto.cell_operator)
return cell_operator_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AndroidCheckinProto::release_cell_operator() {
// @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinProto.cell_operator)
if (!has_cell_operator()) {
return nullptr;
}
_has_bits_[0] &= ~0x00000001u;
return cell_operator_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AndroidCheckinProto::set_allocated_cell_operator(std::string* cell_operator) {
if (cell_operator != nullptr) {
_has_bits_[0] |= 0x00000001u;
} else {
_has_bits_[0] &= ~0x00000001u;
}
cell_operator_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cell_operator);
// @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinProto.cell_operator)
}

// optional string sim_operator = 7;
inline bool AndroidCheckinProto::has_sim_operator() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AndroidCheckinProto::clear_sim_operator() {
sim_operator_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
_has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AndroidCheckinProto::sim_operator() const {
// @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinProto.sim_operator)
return sim_operator_.GetNoArena();
}
inline void AndroidCheckinProto::set_sim_operator(const std::string& value) {
_has_bits_[0] |= 0x00000002u;
sim_operator_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinProto.sim_operator)
}
inline void AndroidCheckinProto::set_sim_operator(std::string&& value) {
_has_bits_[0] |= 0x00000002u;
sim_operator_.SetNoArena(
&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinProto.sim_operator)
}
inline void AndroidCheckinProto::set_sim_operator(const char* value) {
GOOGLE_DCHECK(value != nullptr);
_has_bits_[0] |= 0x00000002u;
sim_operator_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinProto.sim_operator)
}
inline void AndroidCheckinProto::set_sim_operator(const char* value, size_t size) {
_has_bits_[0] |= 0x00000002u;
sim_operator_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinProto.sim_operator)
}
inline std::string* AndroidCheckinProto::mutable_sim_operator() {
_has_bits_[0] |= 0x00000002u;
// @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinProto.sim_operator)
return sim_operator_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AndroidCheckinProto::release_sim_operator() {
// @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinProto.sim_operator)
if (!has_sim_operator()) {
return nullptr;
}
_has_bits_[0] &= ~0x00000002u;
return sim_operator_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AndroidCheckinProto::set_allocated_sim_operator(std::string* sim_operator) {
if (sim_operator != nullptr) {
_has_bits_[0] |= 0x00000002u;
} else {
_has_bits_[0] &= ~0x00000002u;
}
sim_operator_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sim_operator);
// @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinProto.sim_operator)
}

// optional string roaming = 8;
inline bool AndroidCheckinProto::has_roaming() const {
return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AndroidCheckinProto::clear_roaming() {
roaming_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
_has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AndroidCheckinProto::roaming() const {
// @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinProto.roaming)
return roaming_.GetNoArena();
}
inline void AndroidCheckinProto::set_roaming(const std::string& value) {
_has_bits_[0] |= 0x00000004u;
roaming_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinProto.roaming)
}
inline void AndroidCheckinProto::set_roaming(std::string&& value) {
_has_bits_[0] |= 0x00000004u;
roaming_.SetNoArena(
&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:checkin_proto.AndroidCheckinProto.roaming)
}
inline void AndroidCheckinProto::set_roaming(const char* value) {
GOOGLE_DCHECK(value != nullptr);
_has_bits_[0] |= 0x00000004u;
roaming_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:checkin_proto.AndroidCheckinProto.roaming)
}
inline void AndroidCheckinProto::set_roaming(const char* value, size_t size) {
_has_bits_[0] |= 0x00000004u;
roaming_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:checkin_proto.AndroidCheckinProto.roaming)
}
inline std::string* AndroidCheckinProto::mutable_roaming() {
_has_bits_[0] |= 0x00000004u;
// @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinProto.roaming)
return roaming_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AndroidCheckinProto::release_roaming() {
// @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinProto.roaming)
if (!has_roaming()) {
return nullptr;
}
_has_bits_[0] &= ~0x00000004u;
return roaming_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AndroidCheckinProto::set_allocated_roaming(std::string* roaming) {
if (roaming != nullptr) {
_has_bits_[0] |= 0x00000004u;
} else {
_has_bits_[0] &= ~0x00000004u;
}
roaming_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), roaming);
// @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinProto.roaming)
}

// optional int32 user_number = 9;
inline bool AndroidCheckinProto::has_user_number() const {
return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AndroidCheckinProto::clear_user_number() {
user_number_ = 0;
_has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AndroidCheckinProto::user_number() const {
// @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinProto.user_number)
return user_number_;
}
inline void AndroidCheckinProto::set_user_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
_has_bits_[0] |= 0x00000020u;
user_number_ = value;
// @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinProto.user_number)
}

// optional .checkin_proto.DeviceType type = 12 [default = DEVICE_ANDROID_OS];
inline bool AndroidCheckinProto::has_type() const {
return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AndroidCheckinProto::clear_type() {
type_ = 1;
_has_bits_[0] &= ~0x00000040u;
}
inline ::checkin_proto::DeviceType AndroidCheckinProto::type() const {
// @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinProto.type)
return static_cast< ::checkin_proto::DeviceType >(type_);
}
inline void AndroidCheckinProto::set_type(::checkin_proto::DeviceType value) {
assert(::checkin_proto::DeviceType_IsValid(value));
_has_bits_[0] |= 0x00000040u;
type_ = value;
// @@protoc_insertion_point(field_set:checkin_proto.AndroidCheckinProto.type)
}

// optional .checkin_proto.ChromeBuildProto chrome_build = 13;
inline bool AndroidCheckinProto::has_chrome_build() const {
return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AndroidCheckinProto::clear_chrome_build() {
if (chrome_build_ != nullptr) chrome_build_->Clear();
_has_bits_[0] &= ~0x00000008u;
}
inline const ::checkin_proto::ChromeBuildProto& AndroidCheckinProto::chrome_build() const {
const ::checkin_proto::ChromeBuildProto* p = chrome_build_;
// @@protoc_insertion_point(field_get:checkin_proto.AndroidCheckinProto.chrome_build)
return p != nullptr ? *p : *reinterpret_cast<const ::checkin_proto::ChromeBuildProto*>(
&::checkin_proto::_ChromeBuildProto_default_instance_);
}
inline ::checkin_proto::ChromeBuildProto* AndroidCheckinProto::release_chrome_build() {
// @@protoc_insertion_point(field_release:checkin_proto.AndroidCheckinProto.chrome_build)
_has_bits_[0] &= ~0x00000008u;
::checkin_proto::ChromeBuildProto* temp = chrome_build_;
chrome_build_ = nullptr;
return temp;
}
inline ::checkin_proto::ChromeBuildProto* AndroidCheckinProto::mutable_chrome_build() {
_has_bits_[0] |= 0x00000008u;
if (chrome_build_ == nullptr) {
auto* p = CreateMaybeMessage<::checkin_proto::ChromeBuildProto>(GetArenaNoVirtual());
chrome_build_ = p;
}
// @@protoc_insertion_point(field_mutable:checkin_proto.AndroidCheckinProto.chrome_build)
return chrome_build_;
}
inline void AndroidCheckinProto::set_allocated_chrome_build(::checkin_proto::ChromeBuildProto* chrome_build) {
::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
if (message_arena == nullptr) {
delete chrome_build_;
}
if (chrome_build) {
::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
if (message_arena != submessage_arena) {
chrome_build = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
message_arena, chrome_build, submessage_arena);
}
_has_bits_[0] |= 0x00000008u;
} else {
_has_bits_[0] &= ~0x00000008u;
}
chrome_build_ = chrome_build;
// @@protoc_insertion_point(field_set_allocated:checkin_proto.AndroidCheckinProto.chrome_build)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace checkin_proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::checkin_proto::ChromeBuildProto_Platform> : ::std::true_type {};
template <> struct is_proto_enum< ::checkin_proto::ChromeBuildProto_Channel> : ::std::true_type {};
template <> struct is_proto_enum< ::checkin_proto::DeviceType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_android_5fcheckin_2eproto

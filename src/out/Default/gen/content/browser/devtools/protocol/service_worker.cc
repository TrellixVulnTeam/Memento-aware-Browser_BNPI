// This file is generated by TypeBuilder_cpp.template.

// Copyright (c) 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "content/browser/devtools/protocol/service_worker.h"

#include "content/browser/devtools/protocol/protocol.h"

#include "third_party/inspector_protocol/crdtp/cbor.h"
#include "third_party/inspector_protocol/crdtp/find_by_first.h"
#include "third_party/inspector_protocol/crdtp/serializer_traits.h"
#include "third_party/inspector_protocol/crdtp/span.h"

namespace content {
namespace protocol {
namespace ServiceWorker {

// ------------- Enum values from types.

const char Metainfo::domainName[] = "ServiceWorker";
const char Metainfo::commandPrefix[] = "ServiceWorker.";
const char Metainfo::version[] = "1.3";

std::unique_ptr<ServiceWorkerRegistration> ServiceWorkerRegistration::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<ServiceWorkerRegistration> result(new ServiceWorkerRegistration());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* registrationIdValue = object->get("registrationId");
    errors->SetName("registrationId");
    result->m_registrationId = ValueConversions<String>::fromValue(registrationIdValue, errors);
    protocol::Value* scopeURLValue = object->get("scopeURL");
    errors->SetName("scopeURL");
    result->m_scopeURL = ValueConversions<String>::fromValue(scopeURLValue, errors);
    protocol::Value* isDeletedValue = object->get("isDeleted");
    errors->SetName("isDeleted");
    result->m_isDeleted = ValueConversions<bool>::fromValue(isDeletedValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> ServiceWorkerRegistration::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("registrationId", ValueConversions<String>::toValue(m_registrationId));
    result->setValue("scopeURL", ValueConversions<String>::toValue(m_scopeURL));
    result->setValue("isDeleted", ValueConversions<bool>::toValue(m_isDeleted));
    return result;
}

void ServiceWorkerRegistration::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("registrationId"), m_registrationId, out);
      crdtp::SerializeField(crdtp::SpanFrom("scopeURL"), m_scopeURL, out);
      crdtp::SerializeField(crdtp::SpanFrom("isDeleted"), m_isDeleted, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<ServiceWorkerRegistration> ServiceWorkerRegistration::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

namespace ServiceWorkerVersionRunningStatusEnum {
const char Stopped[] = "stopped";
const char Starting[] = "starting";
const char Running[] = "running";
const char Stopping[] = "stopping";
} // namespace ServiceWorkerVersionRunningStatusEnum

namespace ServiceWorkerVersionStatusEnum {
const char New[] = "new";
const char Installing[] = "installing";
const char Installed[] = "installed";
const char Activating[] = "activating";
const char Activated[] = "activated";
const char Redundant[] = "redundant";
} // namespace ServiceWorkerVersionStatusEnum

std::unique_ptr<ServiceWorkerVersion> ServiceWorkerVersion::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<ServiceWorkerVersion> result(new ServiceWorkerVersion());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* versionIdValue = object->get("versionId");
    errors->SetName("versionId");
    result->m_versionId = ValueConversions<String>::fromValue(versionIdValue, errors);
    protocol::Value* registrationIdValue = object->get("registrationId");
    errors->SetName("registrationId");
    result->m_registrationId = ValueConversions<String>::fromValue(registrationIdValue, errors);
    protocol::Value* scriptURLValue = object->get("scriptURL");
    errors->SetName("scriptURL");
    result->m_scriptURL = ValueConversions<String>::fromValue(scriptURLValue, errors);
    protocol::Value* runningStatusValue = object->get("runningStatus");
    errors->SetName("runningStatus");
    result->m_runningStatus = ValueConversions<String>::fromValue(runningStatusValue, errors);
    protocol::Value* statusValue = object->get("status");
    errors->SetName("status");
    result->m_status = ValueConversions<String>::fromValue(statusValue, errors);
    protocol::Value* scriptLastModifiedValue = object->get("scriptLastModified");
    if (scriptLastModifiedValue) {
        errors->SetName("scriptLastModified");
        result->m_scriptLastModified = ValueConversions<double>::fromValue(scriptLastModifiedValue, errors);
    }
    protocol::Value* scriptResponseTimeValue = object->get("scriptResponseTime");
    if (scriptResponseTimeValue) {
        errors->SetName("scriptResponseTime");
        result->m_scriptResponseTime = ValueConversions<double>::fromValue(scriptResponseTimeValue, errors);
    }
    protocol::Value* controlledClientsValue = object->get("controlledClients");
    if (controlledClientsValue) {
        errors->SetName("controlledClients");
        result->m_controlledClients = ValueConversions<protocol::Array<String>>::fromValue(controlledClientsValue, errors);
    }
    protocol::Value* targetIdValue = object->get("targetId");
    if (targetIdValue) {
        errors->SetName("targetId");
        result->m_targetId = ValueConversions<String>::fromValue(targetIdValue, errors);
    }
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> ServiceWorkerVersion::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("versionId", ValueConversions<String>::toValue(m_versionId));
    result->setValue("registrationId", ValueConversions<String>::toValue(m_registrationId));
    result->setValue("scriptURL", ValueConversions<String>::toValue(m_scriptURL));
    result->setValue("runningStatus", ValueConversions<String>::toValue(m_runningStatus));
    result->setValue("status", ValueConversions<String>::toValue(m_status));
    if (m_scriptLastModified.isJust())
        result->setValue("scriptLastModified", ValueConversions<double>::toValue(m_scriptLastModified.fromJust()));
    if (m_scriptResponseTime.isJust())
        result->setValue("scriptResponseTime", ValueConversions<double>::toValue(m_scriptResponseTime.fromJust()));
    if (m_controlledClients.isJust())
        result->setValue("controlledClients", ValueConversions<protocol::Array<String>>::toValue(m_controlledClients.fromJust()));
    if (m_targetId.isJust())
        result->setValue("targetId", ValueConversions<String>::toValue(m_targetId.fromJust()));
    return result;
}

void ServiceWorkerVersion::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("versionId"), m_versionId, out);
      crdtp::SerializeField(crdtp::SpanFrom("registrationId"), m_registrationId, out);
      crdtp::SerializeField(crdtp::SpanFrom("scriptURL"), m_scriptURL, out);
      crdtp::SerializeField(crdtp::SpanFrom("runningStatus"), m_runningStatus, out);
      crdtp::SerializeField(crdtp::SpanFrom("status"), m_status, out);
      crdtp::SerializeField(crdtp::SpanFrom("scriptLastModified"), m_scriptLastModified, out);
      crdtp::SerializeField(crdtp::SpanFrom("scriptResponseTime"), m_scriptResponseTime, out);
      crdtp::SerializeField(crdtp::SpanFrom("controlledClients"), m_controlledClients, out);
      crdtp::SerializeField(crdtp::SpanFrom("targetId"), m_targetId, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<ServiceWorkerVersion> ServiceWorkerVersion::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<ServiceWorkerErrorMessage> ServiceWorkerErrorMessage::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<ServiceWorkerErrorMessage> result(new ServiceWorkerErrorMessage());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* errorMessageValue = object->get("errorMessage");
    errors->SetName("errorMessage");
    result->m_errorMessage = ValueConversions<String>::fromValue(errorMessageValue, errors);
    protocol::Value* registrationIdValue = object->get("registrationId");
    errors->SetName("registrationId");
    result->m_registrationId = ValueConversions<String>::fromValue(registrationIdValue, errors);
    protocol::Value* versionIdValue = object->get("versionId");
    errors->SetName("versionId");
    result->m_versionId = ValueConversions<String>::fromValue(versionIdValue, errors);
    protocol::Value* sourceURLValue = object->get("sourceURL");
    errors->SetName("sourceURL");
    result->m_sourceURL = ValueConversions<String>::fromValue(sourceURLValue, errors);
    protocol::Value* lineNumberValue = object->get("lineNumber");
    errors->SetName("lineNumber");
    result->m_lineNumber = ValueConversions<int>::fromValue(lineNumberValue, errors);
    protocol::Value* columnNumberValue = object->get("columnNumber");
    errors->SetName("columnNumber");
    result->m_columnNumber = ValueConversions<int>::fromValue(columnNumberValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> ServiceWorkerErrorMessage::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("errorMessage", ValueConversions<String>::toValue(m_errorMessage));
    result->setValue("registrationId", ValueConversions<String>::toValue(m_registrationId));
    result->setValue("versionId", ValueConversions<String>::toValue(m_versionId));
    result->setValue("sourceURL", ValueConversions<String>::toValue(m_sourceURL));
    result->setValue("lineNumber", ValueConversions<int>::toValue(m_lineNumber));
    result->setValue("columnNumber", ValueConversions<int>::toValue(m_columnNumber));
    return result;
}

void ServiceWorkerErrorMessage::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("errorMessage"), m_errorMessage, out);
      crdtp::SerializeField(crdtp::SpanFrom("registrationId"), m_registrationId, out);
      crdtp::SerializeField(crdtp::SpanFrom("versionId"), m_versionId, out);
      crdtp::SerializeField(crdtp::SpanFrom("sourceURL"), m_sourceURL, out);
      crdtp::SerializeField(crdtp::SpanFrom("lineNumber"), m_lineNumber, out);
      crdtp::SerializeField(crdtp::SpanFrom("columnNumber"), m_columnNumber, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<ServiceWorkerErrorMessage> ServiceWorkerErrorMessage::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<WorkerErrorReportedNotification> WorkerErrorReportedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<WorkerErrorReportedNotification> result(new WorkerErrorReportedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* errorMessageValue = object->get("errorMessage");
    errors->SetName("errorMessage");
    result->m_errorMessage = ValueConversions<protocol::ServiceWorker::ServiceWorkerErrorMessage>::fromValue(errorMessageValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> WorkerErrorReportedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("errorMessage", ValueConversions<protocol::ServiceWorker::ServiceWorkerErrorMessage>::toValue(m_errorMessage.get()));
    return result;
}

void WorkerErrorReportedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("errorMessage"), m_errorMessage, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<WorkerErrorReportedNotification> WorkerErrorReportedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<WorkerRegistrationUpdatedNotification> WorkerRegistrationUpdatedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<WorkerRegistrationUpdatedNotification> result(new WorkerRegistrationUpdatedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* registrationsValue = object->get("registrations");
    errors->SetName("registrations");
    result->m_registrations = ValueConversions<protocol::Array<protocol::ServiceWorker::ServiceWorkerRegistration>>::fromValue(registrationsValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> WorkerRegistrationUpdatedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("registrations", ValueConversions<protocol::Array<protocol::ServiceWorker::ServiceWorkerRegistration>>::toValue(m_registrations.get()));
    return result;
}

void WorkerRegistrationUpdatedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("registrations"), m_registrations, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<WorkerRegistrationUpdatedNotification> WorkerRegistrationUpdatedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<WorkerVersionUpdatedNotification> WorkerVersionUpdatedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<WorkerVersionUpdatedNotification> result(new WorkerVersionUpdatedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* versionsValue = object->get("versions");
    errors->SetName("versions");
    result->m_versions = ValueConversions<protocol::Array<protocol::ServiceWorker::ServiceWorkerVersion>>::fromValue(versionsValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> WorkerVersionUpdatedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("versions", ValueConversions<protocol::Array<protocol::ServiceWorker::ServiceWorkerVersion>>::toValue(m_versions.get()));
    return result;
}

void WorkerVersionUpdatedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("versions"), m_versions, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<WorkerVersionUpdatedNotification> WorkerVersionUpdatedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

// ------------- Enum values from params.


// ------------- Frontend notifications.

void Frontend::WorkerErrorReported(std::unique_ptr<protocol::ServiceWorker::ServiceWorkerErrorMessage> errorMessage)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<WorkerErrorReportedNotification> messageData = WorkerErrorReportedNotification::Create()
        .SetErrorMessage(std::move(errorMessage))
        .Build();
    frontend_channel_->SendProtocolNotification(crdtp::CreateNotification("ServiceWorker.workerErrorReported", std::move(messageData)));
}

void Frontend::WorkerRegistrationUpdated(std::unique_ptr<protocol::Array<protocol::ServiceWorker::ServiceWorkerRegistration>> registrations)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<WorkerRegistrationUpdatedNotification> messageData = WorkerRegistrationUpdatedNotification::Create()
        .SetRegistrations(std::move(registrations))
        .Build();
    frontend_channel_->SendProtocolNotification(crdtp::CreateNotification("ServiceWorker.workerRegistrationUpdated", std::move(messageData)));
}

void Frontend::WorkerVersionUpdated(std::unique_ptr<protocol::Array<protocol::ServiceWorker::ServiceWorkerVersion>> versions)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<WorkerVersionUpdatedNotification> messageData = WorkerVersionUpdatedNotification::Create()
        .SetVersions(std::move(versions))
        .Build();
    frontend_channel_->SendProtocolNotification(crdtp::CreateNotification("ServiceWorker.workerVersionUpdated", std::move(messageData)));
}

void Frontend::flush()
{
    frontend_channel_->FlushProtocolNotifications();
}

void Frontend::sendRawNotification(std::unique_ptr<Serializable> notification)
{
    frontend_channel_->SendProtocolNotification(std::move(notification));
}

// --------------------- Dispatcher.

class DomainDispatcherImpl : public protocol::DomainDispatcher {
public:
    DomainDispatcherImpl(FrontendChannel* frontendChannel, Backend* backend)
        : DomainDispatcher(frontendChannel)
        , m_backend(backend) {}
    ~DomainDispatcherImpl() override { }

    using CallHandler = void (DomainDispatcherImpl::*)(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);

    std::function<void(const crdtp::Dispatchable&)> Dispatch(crdtp::span<uint8_t> command_name) override;

    void deliverPushMessage(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void disable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void dispatchSyncEvent(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void dispatchPeriodicSyncEvent(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void enable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void inspectWorker(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setForceUpdateOnPageLoad(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void skipWaiting(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void startWorker(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void stopAllWorkers(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void stopWorker(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void unregister(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void updateRegistration(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
 protected:
    Backend* m_backend;
};

namespace {
// This helper method with a static map of command methods (instance methods
// of DomainDispatcherImpl declared just above) by their name is used immediately below,
// in the DomainDispatcherImpl::Dispatch method.
DomainDispatcherImpl::CallHandler CommandByName(crdtp::span<uint8_t> command_name) {
  static auto* commands = [](){
    auto* commands = new std::vector<std::pair<crdtp::span<uint8_t>,
                              DomainDispatcherImpl::CallHandler>>{
    {
          crdtp::SpanFrom("deliverPushMessage"),
          &DomainDispatcherImpl::deliverPushMessage
    },
    {
          crdtp::SpanFrom("disable"),
          &DomainDispatcherImpl::disable
    },
    {
          crdtp::SpanFrom("dispatchPeriodicSyncEvent"),
          &DomainDispatcherImpl::dispatchPeriodicSyncEvent
    },
    {
          crdtp::SpanFrom("dispatchSyncEvent"),
          &DomainDispatcherImpl::dispatchSyncEvent
    },
    {
          crdtp::SpanFrom("enable"),
          &DomainDispatcherImpl::enable
    },
    {
          crdtp::SpanFrom("inspectWorker"),
          &DomainDispatcherImpl::inspectWorker
    },
    {
          crdtp::SpanFrom("setForceUpdateOnPageLoad"),
          &DomainDispatcherImpl::setForceUpdateOnPageLoad
    },
    {
          crdtp::SpanFrom("skipWaiting"),
          &DomainDispatcherImpl::skipWaiting
    },
    {
          crdtp::SpanFrom("startWorker"),
          &DomainDispatcherImpl::startWorker
    },
    {
          crdtp::SpanFrom("stopAllWorkers"),
          &DomainDispatcherImpl::stopAllWorkers
    },
    {
          crdtp::SpanFrom("stopWorker"),
          &DomainDispatcherImpl::stopWorker
    },
    {
          crdtp::SpanFrom("unregister"),
          &DomainDispatcherImpl::unregister
    },
    {
          crdtp::SpanFrom("updateRegistration"),
          &DomainDispatcherImpl::updateRegistration
    },
    };
    return commands;
  }();
  return crdtp::FindByFirst<DomainDispatcherImpl::CallHandler>(*commands, command_name, nullptr);
}
}  // namespace

std::function<void(const crdtp::Dispatchable&)> DomainDispatcherImpl::Dispatch(crdtp::span<uint8_t> command_name) {
  CallHandler handler = CommandByName(command_name);
  if (!handler) return nullptr;
  return [this, handler](const crdtp::Dispatchable& dispatchable){
    std::unique_ptr<DictionaryValue> params =
        DictionaryValue::cast(protocol::Value::parseBinary(dispatchable.Params().data(),
        dispatchable.Params().size()));
    ErrorSupport errors;
    errors.Push();
    (this->*handler)(dispatchable, params.get(), &errors);
  };
}


void DomainDispatcherImpl::deliverPushMessage(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* originValue = params ? params->get("origin") : nullptr;
    errors->SetName("origin");
    String in_origin = ValueConversions<String>::fromValue(originValue, errors);
    protocol::Value* registrationIdValue = params ? params->get("registrationId") : nullptr;
    errors->SetName("registrationId");
    String in_registrationId = ValueConversions<String>::fromValue(registrationIdValue, errors);
    protocol::Value* dataValue = params ? params->get("data") : nullptr;
    errors->SetName("data");
    String in_data = ValueConversions<String>::fromValue(dataValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->DeliverPushMessage(in_origin, in_registrationId, in_data);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("ServiceWorker.deliverPushMessage"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::disable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->Disable();
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("ServiceWorker.disable"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::dispatchSyncEvent(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* originValue = params ? params->get("origin") : nullptr;
    errors->SetName("origin");
    String in_origin = ValueConversions<String>::fromValue(originValue, errors);
    protocol::Value* registrationIdValue = params ? params->get("registrationId") : nullptr;
    errors->SetName("registrationId");
    String in_registrationId = ValueConversions<String>::fromValue(registrationIdValue, errors);
    protocol::Value* tagValue = params ? params->get("tag") : nullptr;
    errors->SetName("tag");
    String in_tag = ValueConversions<String>::fromValue(tagValue, errors);
    protocol::Value* lastChanceValue = params ? params->get("lastChance") : nullptr;
    errors->SetName("lastChance");
    bool in_lastChance = ValueConversions<bool>::fromValue(lastChanceValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->DispatchSyncEvent(in_origin, in_registrationId, in_tag, in_lastChance);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("ServiceWorker.dispatchSyncEvent"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::dispatchPeriodicSyncEvent(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* originValue = params ? params->get("origin") : nullptr;
    errors->SetName("origin");
    String in_origin = ValueConversions<String>::fromValue(originValue, errors);
    protocol::Value* registrationIdValue = params ? params->get("registrationId") : nullptr;
    errors->SetName("registrationId");
    String in_registrationId = ValueConversions<String>::fromValue(registrationIdValue, errors);
    protocol::Value* tagValue = params ? params->get("tag") : nullptr;
    errors->SetName("tag");
    String in_tag = ValueConversions<String>::fromValue(tagValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->DispatchPeriodicSyncEvent(in_origin, in_registrationId, in_tag);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("ServiceWorker.dispatchPeriodicSyncEvent"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::enable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->Enable();
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("ServiceWorker.enable"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::inspectWorker(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* versionIdValue = params ? params->get("versionId") : nullptr;
    errors->SetName("versionId");
    String in_versionId = ValueConversions<String>::fromValue(versionIdValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->InspectWorker(in_versionId);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("ServiceWorker.inspectWorker"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setForceUpdateOnPageLoad(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* forceUpdateOnPageLoadValue = params ? params->get("forceUpdateOnPageLoad") : nullptr;
    errors->SetName("forceUpdateOnPageLoad");
    bool in_forceUpdateOnPageLoad = ValueConversions<bool>::fromValue(forceUpdateOnPageLoadValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->SetForceUpdateOnPageLoad(in_forceUpdateOnPageLoad);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("ServiceWorker.setForceUpdateOnPageLoad"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::skipWaiting(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* scopeURLValue = params ? params->get("scopeURL") : nullptr;
    errors->SetName("scopeURL");
    String in_scopeURL = ValueConversions<String>::fromValue(scopeURLValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->SkipWaiting(in_scopeURL);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("ServiceWorker.skipWaiting"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::startWorker(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* scopeURLValue = params ? params->get("scopeURL") : nullptr;
    errors->SetName("scopeURL");
    String in_scopeURL = ValueConversions<String>::fromValue(scopeURLValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->StartWorker(in_scopeURL);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("ServiceWorker.startWorker"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

class StopAllWorkersCallbackImpl : public Backend::StopAllWorkersCallback, public DomainDispatcher::Callback {
public:
    StopAllWorkersCallbackImpl(std::unique_ptr<DomainDispatcher::WeakPtr> backendImpl, int callId, crdtp::span<uint8_t> message)
        : DomainDispatcher::Callback(std::move(backendImpl), callId,
crdtp::SpanFrom("ServiceWorker.stopAllWorkers"), message) { }

    void sendSuccess() override
    {
        std::vector<uint8_t> result_buffer;
        crdtp::cbor::EnvelopeEncoder envelope_encoder;
        envelope_encoder.EncodeStart(&result_buffer);
        result_buffer.push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
        result_buffer.push_back(crdtp::cbor::EncodeStop());
        envelope_encoder.EncodeStop(&result_buffer);
        sendIfActive(crdtp::Serializable::From(std::move(result_buffer)), DispatchResponse::Success());
    }

    void fallThrough() override
    {
        fallThroughIfActive();
    }

    void sendFailure(const DispatchResponse& response) override
    {
        DCHECK(response.IsError());
        sendIfActive(nullptr, response);
    }
};

void DomainDispatcherImpl::stopAllWorkers(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{

    m_backend->StopAllWorkers(std::make_unique<StopAllWorkersCallbackImpl>(weakPtr(), dispatchable.CallId(), dispatchable.Serialized()));
}

void DomainDispatcherImpl::stopWorker(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* versionIdValue = params ? params->get("versionId") : nullptr;
    errors->SetName("versionId");
    String in_versionId = ValueConversions<String>::fromValue(versionIdValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->StopWorker(in_versionId);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("ServiceWorker.stopWorker"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::unregister(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* scopeURLValue = params ? params->get("scopeURL") : nullptr;
    errors->SetName("scopeURL");
    String in_scopeURL = ValueConversions<String>::fromValue(scopeURLValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->Unregister(in_scopeURL);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("ServiceWorker.unregister"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::updateRegistration(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* scopeURLValue = params ? params->get("scopeURL") : nullptr;
    errors->SetName("scopeURL");
    String in_scopeURL = ValueConversions<String>::fromValue(scopeURLValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->UpdateRegistration(in_scopeURL);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("ServiceWorker.updateRegistration"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

namespace {
// This helper method (with a static map of redirects) is used from Dispatcher::wire
// immediately below.
const std::vector<std::pair<crdtp::span<uint8_t>, crdtp::span<uint8_t>>>& SortedRedirects() {
  static auto* redirects = [](){
    auto* redirects = new std::vector<std::pair<crdtp::span<uint8_t>, crdtp::span<uint8_t>>>{
    };
    return redirects;
  }();
  return *redirects;
}
}  // namespace

// static
void Dispatcher::wire(UberDispatcher* uber, Backend* backend)
{
    auto dispatcher = std::make_unique<DomainDispatcherImpl>(uber->channel(), backend);
    uber->WireBackend(crdtp::SpanFrom("ServiceWorker"), SortedRedirects(), std::move(dispatcher));
}

} // ServiceWorker
} // namespace content
} // namespace protocol

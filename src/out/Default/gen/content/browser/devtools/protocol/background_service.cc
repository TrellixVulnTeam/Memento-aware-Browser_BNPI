// This file is generated by TypeBuilder_cpp.template.

// Copyright (c) 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "content/browser/devtools/protocol/background_service.h"

#include "content/browser/devtools/protocol/protocol.h"

#include "third_party/inspector_protocol/crdtp/cbor.h"
#include "third_party/inspector_protocol/crdtp/find_by_first.h"
#include "third_party/inspector_protocol/crdtp/serializer_traits.h"
#include "third_party/inspector_protocol/crdtp/span.h"

namespace content {
namespace protocol {
namespace BackgroundService {

// ------------- Enum values from types.

const char Metainfo::domainName[] = "BackgroundService";
const char Metainfo::commandPrefix[] = "BackgroundService.";
const char Metainfo::version[] = "1.3";

namespace ServiceNameEnum {
const char BackgroundFetch[] = "backgroundFetch";
const char BackgroundSync[] = "backgroundSync";
const char PushMessaging[] = "pushMessaging";
const char Notifications[] = "notifications";
const char PaymentHandler[] = "paymentHandler";
const char PeriodicBackgroundSync[] = "periodicBackgroundSync";
} // namespace ServiceNameEnum

std::unique_ptr<EventMetadata> EventMetadata::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<EventMetadata> result(new EventMetadata());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* keyValue = object->get("key");
    errors->SetName("key");
    result->m_key = ValueConversions<String>::fromValue(keyValue, errors);
    protocol::Value* valueValue = object->get("value");
    errors->SetName("value");
    result->m_value = ValueConversions<String>::fromValue(valueValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> EventMetadata::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("key", ValueConversions<String>::toValue(m_key));
    result->setValue("value", ValueConversions<String>::toValue(m_value));
    return result;
}

void EventMetadata::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("key"), m_key, out);
      crdtp::SerializeField(crdtp::SpanFrom("value"), m_value, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<EventMetadata> EventMetadata::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<BackgroundServiceEvent> BackgroundServiceEvent::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<BackgroundServiceEvent> result(new BackgroundServiceEvent());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* timestampValue = object->get("timestamp");
    errors->SetName("timestamp");
    result->m_timestamp = ValueConversions<double>::fromValue(timestampValue, errors);
    protocol::Value* originValue = object->get("origin");
    errors->SetName("origin");
    result->m_origin = ValueConversions<String>::fromValue(originValue, errors);
    protocol::Value* serviceWorkerRegistrationIdValue = object->get("serviceWorkerRegistrationId");
    errors->SetName("serviceWorkerRegistrationId");
    result->m_serviceWorkerRegistrationId = ValueConversions<String>::fromValue(serviceWorkerRegistrationIdValue, errors);
    protocol::Value* serviceValue = object->get("service");
    errors->SetName("service");
    result->m_service = ValueConversions<String>::fromValue(serviceValue, errors);
    protocol::Value* eventNameValue = object->get("eventName");
    errors->SetName("eventName");
    result->m_eventName = ValueConversions<String>::fromValue(eventNameValue, errors);
    protocol::Value* instanceIdValue = object->get("instanceId");
    errors->SetName("instanceId");
    result->m_instanceId = ValueConversions<String>::fromValue(instanceIdValue, errors);
    protocol::Value* eventMetadataValue = object->get("eventMetadata");
    errors->SetName("eventMetadata");
    result->m_eventMetadata = ValueConversions<protocol::Array<protocol::BackgroundService::EventMetadata>>::fromValue(eventMetadataValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> BackgroundServiceEvent::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("timestamp", ValueConversions<double>::toValue(m_timestamp));
    result->setValue("origin", ValueConversions<String>::toValue(m_origin));
    result->setValue("serviceWorkerRegistrationId", ValueConversions<String>::toValue(m_serviceWorkerRegistrationId));
    result->setValue("service", ValueConversions<String>::toValue(m_service));
    result->setValue("eventName", ValueConversions<String>::toValue(m_eventName));
    result->setValue("instanceId", ValueConversions<String>::toValue(m_instanceId));
    result->setValue("eventMetadata", ValueConversions<protocol::Array<protocol::BackgroundService::EventMetadata>>::toValue(m_eventMetadata.get()));
    return result;
}

void BackgroundServiceEvent::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("timestamp"), m_timestamp, out);
      crdtp::SerializeField(crdtp::SpanFrom("origin"), m_origin, out);
      crdtp::SerializeField(crdtp::SpanFrom("serviceWorkerRegistrationId"), m_serviceWorkerRegistrationId, out);
      crdtp::SerializeField(crdtp::SpanFrom("service"), m_service, out);
      crdtp::SerializeField(crdtp::SpanFrom("eventName"), m_eventName, out);
      crdtp::SerializeField(crdtp::SpanFrom("instanceId"), m_instanceId, out);
      crdtp::SerializeField(crdtp::SpanFrom("eventMetadata"), m_eventMetadata, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<BackgroundServiceEvent> BackgroundServiceEvent::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<RecordingStateChangedNotification> RecordingStateChangedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<RecordingStateChangedNotification> result(new RecordingStateChangedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* isRecordingValue = object->get("isRecording");
    errors->SetName("isRecording");
    result->m_isRecording = ValueConversions<bool>::fromValue(isRecordingValue, errors);
    protocol::Value* serviceValue = object->get("service");
    errors->SetName("service");
    result->m_service = ValueConversions<String>::fromValue(serviceValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> RecordingStateChangedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("isRecording", ValueConversions<bool>::toValue(m_isRecording));
    result->setValue("service", ValueConversions<String>::toValue(m_service));
    return result;
}

void RecordingStateChangedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("isRecording"), m_isRecording, out);
      crdtp::SerializeField(crdtp::SpanFrom("service"), m_service, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<RecordingStateChangedNotification> RecordingStateChangedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<BackgroundServiceEventReceivedNotification> BackgroundServiceEventReceivedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<BackgroundServiceEventReceivedNotification> result(new BackgroundServiceEventReceivedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* backgroundServiceEventValue = object->get("backgroundServiceEvent");
    errors->SetName("backgroundServiceEvent");
    result->m_backgroundServiceEvent = ValueConversions<protocol::BackgroundService::BackgroundServiceEvent>::fromValue(backgroundServiceEventValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> BackgroundServiceEventReceivedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("backgroundServiceEvent", ValueConversions<protocol::BackgroundService::BackgroundServiceEvent>::toValue(m_backgroundServiceEvent.get()));
    return result;
}

void BackgroundServiceEventReceivedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("backgroundServiceEvent"), m_backgroundServiceEvent, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<BackgroundServiceEventReceivedNotification> BackgroundServiceEventReceivedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

// ------------- Enum values from params.


// ------------- Frontend notifications.

void Frontend::RecordingStateChanged(bool isRecording, const String& service)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<RecordingStateChangedNotification> messageData = RecordingStateChangedNotification::Create()
        .SetIsRecording(isRecording)
        .SetService(service)
        .Build();
    frontend_channel_->SendProtocolNotification(crdtp::CreateNotification("BackgroundService.recordingStateChanged", std::move(messageData)));
}

void Frontend::BackgroundServiceEventReceived(std::unique_ptr<protocol::BackgroundService::BackgroundServiceEvent> backgroundServiceEvent)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<BackgroundServiceEventReceivedNotification> messageData = BackgroundServiceEventReceivedNotification::Create()
        .SetBackgroundServiceEvent(std::move(backgroundServiceEvent))
        .Build();
    frontend_channel_->SendProtocolNotification(crdtp::CreateNotification("BackgroundService.backgroundServiceEventReceived", std::move(messageData)));
}

void Frontend::flush()
{
    frontend_channel_->FlushProtocolNotifications();
}

void Frontend::sendRawNotification(std::unique_ptr<Serializable> notification)
{
    frontend_channel_->SendProtocolNotification(std::move(notification));
}

// --------------------- Dispatcher.

class DomainDispatcherImpl : public protocol::DomainDispatcher {
public:
    DomainDispatcherImpl(FrontendChannel* frontendChannel, Backend* backend)
        : DomainDispatcher(frontendChannel)
        , m_backend(backend) {}
    ~DomainDispatcherImpl() override { }

    using CallHandler = void (DomainDispatcherImpl::*)(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);

    std::function<void(const crdtp::Dispatchable&)> Dispatch(crdtp::span<uint8_t> command_name) override;

    void startObserving(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void stopObserving(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setRecording(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void clearEvents(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
 protected:
    Backend* m_backend;
};

namespace {
// This helper method with a static map of command methods (instance methods
// of DomainDispatcherImpl declared just above) by their name is used immediately below,
// in the DomainDispatcherImpl::Dispatch method.
DomainDispatcherImpl::CallHandler CommandByName(crdtp::span<uint8_t> command_name) {
  static auto* commands = [](){
    auto* commands = new std::vector<std::pair<crdtp::span<uint8_t>,
                              DomainDispatcherImpl::CallHandler>>{
    {
          crdtp::SpanFrom("clearEvents"),
          &DomainDispatcherImpl::clearEvents
    },
    {
          crdtp::SpanFrom("setRecording"),
          &DomainDispatcherImpl::setRecording
    },
    {
          crdtp::SpanFrom("startObserving"),
          &DomainDispatcherImpl::startObserving
    },
    {
          crdtp::SpanFrom("stopObserving"),
          &DomainDispatcherImpl::stopObserving
    },
    };
    return commands;
  }();
  return crdtp::FindByFirst<DomainDispatcherImpl::CallHandler>(*commands, command_name, nullptr);
}
}  // namespace

std::function<void(const crdtp::Dispatchable&)> DomainDispatcherImpl::Dispatch(crdtp::span<uint8_t> command_name) {
  CallHandler handler = CommandByName(command_name);
  if (!handler) return nullptr;
  return [this, handler](const crdtp::Dispatchable& dispatchable){
    std::unique_ptr<DictionaryValue> params =
        DictionaryValue::cast(protocol::Value::parseBinary(dispatchable.Params().data(),
        dispatchable.Params().size()));
    ErrorSupport errors;
    errors.Push();
    (this->*handler)(dispatchable, params.get(), &errors);
  };
}


class StartObservingCallbackImpl : public Backend::StartObservingCallback, public DomainDispatcher::Callback {
public:
    StartObservingCallbackImpl(std::unique_ptr<DomainDispatcher::WeakPtr> backendImpl, int callId, crdtp::span<uint8_t> message)
        : DomainDispatcher::Callback(std::move(backendImpl), callId,
crdtp::SpanFrom("BackgroundService.startObserving"), message) { }

    void sendSuccess() override
    {
        std::vector<uint8_t> result_buffer;
        crdtp::cbor::EnvelopeEncoder envelope_encoder;
        envelope_encoder.EncodeStart(&result_buffer);
        result_buffer.push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
        result_buffer.push_back(crdtp::cbor::EncodeStop());
        envelope_encoder.EncodeStop(&result_buffer);
        sendIfActive(crdtp::Serializable::From(std::move(result_buffer)), DispatchResponse::Success());
    }

    void fallThrough() override
    {
        fallThroughIfActive();
    }

    void sendFailure(const DispatchResponse& response) override
    {
        DCHECK(response.IsError());
        sendIfActive(nullptr, response);
    }
};

void DomainDispatcherImpl::startObserving(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* serviceValue = params ? params->get("service") : nullptr;
    errors->SetName("service");
    String in_service = ValueConversions<String>::fromValue(serviceValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    m_backend->StartObserving(in_service, std::make_unique<StartObservingCallbackImpl>(weakPtr(), dispatchable.CallId(), dispatchable.Serialized()));
}

void DomainDispatcherImpl::stopObserving(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* serviceValue = params ? params->get("service") : nullptr;
    errors->SetName("service");
    String in_service = ValueConversions<String>::fromValue(serviceValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->StopObserving(in_service);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("BackgroundService.stopObserving"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setRecording(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* shouldRecordValue = params ? params->get("shouldRecord") : nullptr;
    errors->SetName("shouldRecord");
    bool in_shouldRecord = ValueConversions<bool>::fromValue(shouldRecordValue, errors);
    protocol::Value* serviceValue = params ? params->get("service") : nullptr;
    errors->SetName("service");
    String in_service = ValueConversions<String>::fromValue(serviceValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->SetRecording(in_shouldRecord, in_service);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("BackgroundService.setRecording"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::clearEvents(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* serviceValue = params ? params->get("service") : nullptr;
    errors->SetName("service");
    String in_service = ValueConversions<String>::fromValue(serviceValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->ClearEvents(in_service);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("BackgroundService.clearEvents"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

namespace {
// This helper method (with a static map of redirects) is used from Dispatcher::wire
// immediately below.
const std::vector<std::pair<crdtp::span<uint8_t>, crdtp::span<uint8_t>>>& SortedRedirects() {
  static auto* redirects = [](){
    auto* redirects = new std::vector<std::pair<crdtp::span<uint8_t>, crdtp::span<uint8_t>>>{
    };
    return redirects;
  }();
  return *redirects;
}
}  // namespace

// static
void Dispatcher::wire(UberDispatcher* uber, Backend* backend)
{
    auto dispatcher = std::make_unique<DomainDispatcherImpl>(uber->channel(), backend);
    uber->WireBackend(crdtp::SpanFrom("BackgroundService"), SortedRedirects(), std::move(dispatcher));
}

} // BackgroundService
} // namespace content
} // namespace protocol

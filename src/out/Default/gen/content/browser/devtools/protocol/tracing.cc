// This file is generated by TypeBuilder_cpp.template.

// Copyright (c) 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "content/browser/devtools/protocol/tracing.h"

#include "content/browser/devtools/protocol/protocol.h"

#include "third_party/inspector_protocol/crdtp/cbor.h"
#include "third_party/inspector_protocol/crdtp/find_by_first.h"
#include "third_party/inspector_protocol/crdtp/serializer_traits.h"
#include "third_party/inspector_protocol/crdtp/span.h"

namespace content {
namespace protocol {
namespace Tracing {

// ------------- Enum values from types.

const char Metainfo::domainName[] = "Tracing";
const char Metainfo::commandPrefix[] = "Tracing.";
const char Metainfo::version[] = "1.3";

const char* TraceConfig::RecordModeEnum::RecordUntilFull = "recordUntilFull";
const char* TraceConfig::RecordModeEnum::RecordContinuously = "recordContinuously";
const char* TraceConfig::RecordModeEnum::RecordAsMuchAsPossible = "recordAsMuchAsPossible";
const char* TraceConfig::RecordModeEnum::EchoToConsole = "echoToConsole";

std::unique_ptr<TraceConfig> TraceConfig::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<TraceConfig> result(new TraceConfig());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* recordModeValue = object->get("recordMode");
    if (recordModeValue) {
        errors->SetName("recordMode");
        result->m_recordMode = ValueConversions<String>::fromValue(recordModeValue, errors);
    }
    protocol::Value* enableSamplingValue = object->get("enableSampling");
    if (enableSamplingValue) {
        errors->SetName("enableSampling");
        result->m_enableSampling = ValueConversions<bool>::fromValue(enableSamplingValue, errors);
    }
    protocol::Value* enableSystraceValue = object->get("enableSystrace");
    if (enableSystraceValue) {
        errors->SetName("enableSystrace");
        result->m_enableSystrace = ValueConversions<bool>::fromValue(enableSystraceValue, errors);
    }
    protocol::Value* enableArgumentFilterValue = object->get("enableArgumentFilter");
    if (enableArgumentFilterValue) {
        errors->SetName("enableArgumentFilter");
        result->m_enableArgumentFilter = ValueConversions<bool>::fromValue(enableArgumentFilterValue, errors);
    }
    protocol::Value* includedCategoriesValue = object->get("includedCategories");
    if (includedCategoriesValue) {
        errors->SetName("includedCategories");
        result->m_includedCategories = ValueConversions<protocol::Array<String>>::fromValue(includedCategoriesValue, errors);
    }
    protocol::Value* excludedCategoriesValue = object->get("excludedCategories");
    if (excludedCategoriesValue) {
        errors->SetName("excludedCategories");
        result->m_excludedCategories = ValueConversions<protocol::Array<String>>::fromValue(excludedCategoriesValue, errors);
    }
    protocol::Value* syntheticDelaysValue = object->get("syntheticDelays");
    if (syntheticDelaysValue) {
        errors->SetName("syntheticDelays");
        result->m_syntheticDelays = ValueConversions<protocol::Array<String>>::fromValue(syntheticDelaysValue, errors);
    }
    protocol::Value* memoryDumpConfigValue = object->get("memoryDumpConfig");
    if (memoryDumpConfigValue) {
        errors->SetName("memoryDumpConfig");
        result->m_memoryDumpConfig = ValueConversions<protocol::Tracing::MemoryDumpConfig>::fromValue(memoryDumpConfigValue, errors);
    }
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> TraceConfig::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    if (m_recordMode.isJust())
        result->setValue("recordMode", ValueConversions<String>::toValue(m_recordMode.fromJust()));
    if (m_enableSampling.isJust())
        result->setValue("enableSampling", ValueConversions<bool>::toValue(m_enableSampling.fromJust()));
    if (m_enableSystrace.isJust())
        result->setValue("enableSystrace", ValueConversions<bool>::toValue(m_enableSystrace.fromJust()));
    if (m_enableArgumentFilter.isJust())
        result->setValue("enableArgumentFilter", ValueConversions<bool>::toValue(m_enableArgumentFilter.fromJust()));
    if (m_includedCategories.isJust())
        result->setValue("includedCategories", ValueConversions<protocol::Array<String>>::toValue(m_includedCategories.fromJust()));
    if (m_excludedCategories.isJust())
        result->setValue("excludedCategories", ValueConversions<protocol::Array<String>>::toValue(m_excludedCategories.fromJust()));
    if (m_syntheticDelays.isJust())
        result->setValue("syntheticDelays", ValueConversions<protocol::Array<String>>::toValue(m_syntheticDelays.fromJust()));
    if (m_memoryDumpConfig.isJust())
        result->setValue("memoryDumpConfig", ValueConversions<protocol::Tracing::MemoryDumpConfig>::toValue(m_memoryDumpConfig.fromJust()));
    return result;
}

void TraceConfig::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("recordMode"), m_recordMode, out);
      crdtp::SerializeField(crdtp::SpanFrom("enableSampling"), m_enableSampling, out);
      crdtp::SerializeField(crdtp::SpanFrom("enableSystrace"), m_enableSystrace, out);
      crdtp::SerializeField(crdtp::SpanFrom("enableArgumentFilter"), m_enableArgumentFilter, out);
      crdtp::SerializeField(crdtp::SpanFrom("includedCategories"), m_includedCategories, out);
      crdtp::SerializeField(crdtp::SpanFrom("excludedCategories"), m_excludedCategories, out);
      crdtp::SerializeField(crdtp::SpanFrom("syntheticDelays"), m_syntheticDelays, out);
      crdtp::SerializeField(crdtp::SpanFrom("memoryDumpConfig"), m_memoryDumpConfig, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<TraceConfig> TraceConfig::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

namespace StreamFormatEnum {
const char Json[] = "json";
const char Proto[] = "proto";
} // namespace StreamFormatEnum

namespace StreamCompressionEnum {
const char None[] = "none";
const char Gzip[] = "gzip";
} // namespace StreamCompressionEnum

std::unique_ptr<BufferUsageNotification> BufferUsageNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<BufferUsageNotification> result(new BufferUsageNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* percentFullValue = object->get("percentFull");
    if (percentFullValue) {
        errors->SetName("percentFull");
        result->m_percentFull = ValueConversions<double>::fromValue(percentFullValue, errors);
    }
    protocol::Value* eventCountValue = object->get("eventCount");
    if (eventCountValue) {
        errors->SetName("eventCount");
        result->m_eventCount = ValueConversions<double>::fromValue(eventCountValue, errors);
    }
    protocol::Value* valueValue = object->get("value");
    if (valueValue) {
        errors->SetName("value");
        result->m_value = ValueConversions<double>::fromValue(valueValue, errors);
    }
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> BufferUsageNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    if (m_percentFull.isJust())
        result->setValue("percentFull", ValueConversions<double>::toValue(m_percentFull.fromJust()));
    if (m_eventCount.isJust())
        result->setValue("eventCount", ValueConversions<double>::toValue(m_eventCount.fromJust()));
    if (m_value.isJust())
        result->setValue("value", ValueConversions<double>::toValue(m_value.fromJust()));
    return result;
}

void BufferUsageNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("percentFull"), m_percentFull, out);
      crdtp::SerializeField(crdtp::SpanFrom("eventCount"), m_eventCount, out);
      crdtp::SerializeField(crdtp::SpanFrom("value"), m_value, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<BufferUsageNotification> BufferUsageNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<DataCollectedNotification> DataCollectedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<DataCollectedNotification> result(new DataCollectedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* valueValue = object->get("value");
    errors->SetName("value");
    result->m_value = ValueConversions<protocol::Array<protocol::DictionaryValue>>::fromValue(valueValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> DataCollectedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("value", ValueConversions<protocol::Array<protocol::DictionaryValue>>::toValue(m_value.get()));
    return result;
}

void DataCollectedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("value"), m_value, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<DataCollectedNotification> DataCollectedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<TracingCompleteNotification> TracingCompleteNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<TracingCompleteNotification> result(new TracingCompleteNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* dataLossOccurredValue = object->get("dataLossOccurred");
    errors->SetName("dataLossOccurred");
    result->m_dataLossOccurred = ValueConversions<bool>::fromValue(dataLossOccurredValue, errors);
    protocol::Value* streamValue = object->get("stream");
    if (streamValue) {
        errors->SetName("stream");
        result->m_stream = ValueConversions<String>::fromValue(streamValue, errors);
    }
    protocol::Value* traceFormatValue = object->get("traceFormat");
    if (traceFormatValue) {
        errors->SetName("traceFormat");
        result->m_traceFormat = ValueConversions<String>::fromValue(traceFormatValue, errors);
    }
    protocol::Value* streamCompressionValue = object->get("streamCompression");
    if (streamCompressionValue) {
        errors->SetName("streamCompression");
        result->m_streamCompression = ValueConversions<String>::fromValue(streamCompressionValue, errors);
    }
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> TracingCompleteNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("dataLossOccurred", ValueConversions<bool>::toValue(m_dataLossOccurred));
    if (m_stream.isJust())
        result->setValue("stream", ValueConversions<String>::toValue(m_stream.fromJust()));
    if (m_traceFormat.isJust())
        result->setValue("traceFormat", ValueConversions<String>::toValue(m_traceFormat.fromJust()));
    if (m_streamCompression.isJust())
        result->setValue("streamCompression", ValueConversions<String>::toValue(m_streamCompression.fromJust()));
    return result;
}

void TracingCompleteNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("dataLossOccurred"), m_dataLossOccurred, out);
      crdtp::SerializeField(crdtp::SpanFrom("stream"), m_stream, out);
      crdtp::SerializeField(crdtp::SpanFrom("traceFormat"), m_traceFormat, out);
      crdtp::SerializeField(crdtp::SpanFrom("streamCompression"), m_streamCompression, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<TracingCompleteNotification> TracingCompleteNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

// ------------- Enum values from params.


namespace Start {
namespace TransferModeEnum {
const char* ReportEvents = "ReportEvents";
const char* ReturnAsStream = "ReturnAsStream";
} // namespace TransferModeEnum
} // namespace Start

// ------------- Frontend notifications.

void Frontend::BufferUsage(Maybe<double> percentFull, Maybe<double> eventCount, Maybe<double> value)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<BufferUsageNotification> messageData = BufferUsageNotification::Create()
        .Build();
    if (percentFull.isJust())
        messageData->SetPercentFull(std::move(percentFull).takeJust());
    if (eventCount.isJust())
        messageData->SetEventCount(std::move(eventCount).takeJust());
    if (value.isJust())
        messageData->SetValue(std::move(value).takeJust());
    frontend_channel_->SendProtocolNotification(crdtp::CreateNotification("Tracing.bufferUsage", std::move(messageData)));
}

void Frontend::DataCollected(std::unique_ptr<protocol::Array<protocol::DictionaryValue>> value)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<DataCollectedNotification> messageData = DataCollectedNotification::Create()
        .SetValue(std::move(value))
        .Build();
    frontend_channel_->SendProtocolNotification(crdtp::CreateNotification("Tracing.dataCollected", std::move(messageData)));
}

void Frontend::TracingComplete(bool dataLossOccurred, Maybe<String> stream, Maybe<String> traceFormat, Maybe<String> streamCompression)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<TracingCompleteNotification> messageData = TracingCompleteNotification::Create()
        .SetDataLossOccurred(dataLossOccurred)
        .Build();
    if (stream.isJust())
        messageData->SetStream(std::move(stream).takeJust());
    if (traceFormat.isJust())
        messageData->SetTraceFormat(std::move(traceFormat).takeJust());
    if (streamCompression.isJust())
        messageData->SetStreamCompression(std::move(streamCompression).takeJust());
    frontend_channel_->SendProtocolNotification(crdtp::CreateNotification("Tracing.tracingComplete", std::move(messageData)));
}

void Frontend::flush()
{
    frontend_channel_->FlushProtocolNotifications();
}

void Frontend::sendRawNotification(std::unique_ptr<Serializable> notification)
{
    frontend_channel_->SendProtocolNotification(std::move(notification));
}

// --------------------- Dispatcher.

class DomainDispatcherImpl : public protocol::DomainDispatcher {
public:
    DomainDispatcherImpl(FrontendChannel* frontendChannel, Backend* backend)
        : DomainDispatcher(frontendChannel)
        , m_backend(backend) {}
    ~DomainDispatcherImpl() override { }

    using CallHandler = void (DomainDispatcherImpl::*)(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);

    std::function<void(const crdtp::Dispatchable&)> Dispatch(crdtp::span<uint8_t> command_name) override;

    void end(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void getCategories(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void recordClockSyncMarker(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void requestMemoryDump(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void start(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
 protected:
    Backend* m_backend;
};

namespace {
// This helper method with a static map of command methods (instance methods
// of DomainDispatcherImpl declared just above) by their name is used immediately below,
// in the DomainDispatcherImpl::Dispatch method.
DomainDispatcherImpl::CallHandler CommandByName(crdtp::span<uint8_t> command_name) {
  static auto* commands = [](){
    auto* commands = new std::vector<std::pair<crdtp::span<uint8_t>,
                              DomainDispatcherImpl::CallHandler>>{
    {
          crdtp::SpanFrom("end"),
          &DomainDispatcherImpl::end
    },
    {
          crdtp::SpanFrom("getCategories"),
          &DomainDispatcherImpl::getCategories
    },
    {
          crdtp::SpanFrom("recordClockSyncMarker"),
          &DomainDispatcherImpl::recordClockSyncMarker
    },
    {
          crdtp::SpanFrom("requestMemoryDump"),
          &DomainDispatcherImpl::requestMemoryDump
    },
    {
          crdtp::SpanFrom("start"),
          &DomainDispatcherImpl::start
    },
    };
    return commands;
  }();
  return crdtp::FindByFirst<DomainDispatcherImpl::CallHandler>(*commands, command_name, nullptr);
}
}  // namespace

std::function<void(const crdtp::Dispatchable&)> DomainDispatcherImpl::Dispatch(crdtp::span<uint8_t> command_name) {
  CallHandler handler = CommandByName(command_name);
  if (!handler) return nullptr;
  return [this, handler](const crdtp::Dispatchable& dispatchable){
    std::unique_ptr<DictionaryValue> params =
        DictionaryValue::cast(protocol::Value::parseBinary(dispatchable.Params().data(),
        dispatchable.Params().size()));
    ErrorSupport errors;
    errors.Push();
    (this->*handler)(dispatchable, params.get(), &errors);
  };
}


void DomainDispatcherImpl::end(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->End();
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Tracing.end"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

class GetCategoriesCallbackImpl : public Backend::GetCategoriesCallback, public DomainDispatcher::Callback {
public:
    GetCategoriesCallbackImpl(std::unique_ptr<DomainDispatcher::WeakPtr> backendImpl, int callId, crdtp::span<uint8_t> message)
        : DomainDispatcher::Callback(std::move(backendImpl), callId,
crdtp::SpanFrom("Tracing.getCategories"), message) { }

    void sendSuccess(std::unique_ptr<protocol::Array<String>> categories) override
    {
        std::vector<uint8_t> result_buffer;
        crdtp::cbor::EnvelopeEncoder envelope_encoder;
        envelope_encoder.EncodeStart(&result_buffer);
        result_buffer.push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
          crdtp::SerializeField(crdtp::SpanFrom("categories"), categories, &result_buffer);
        result_buffer.push_back(crdtp::cbor::EncodeStop());
        envelope_encoder.EncodeStop(&result_buffer);
        sendIfActive(crdtp::Serializable::From(std::move(result_buffer)), DispatchResponse::Success());
    }

    void fallThrough() override
    {
        fallThroughIfActive();
    }

    void sendFailure(const DispatchResponse& response) override
    {
        DCHECK(response.IsError());
        sendIfActive(nullptr, response);
    }
};

void DomainDispatcherImpl::getCategories(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{

    m_backend->GetCategories(std::make_unique<GetCategoriesCallbackImpl>(weakPtr(), dispatchable.CallId(), dispatchable.Serialized()));
}

void DomainDispatcherImpl::recordClockSyncMarker(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* syncIdValue = params ? params->get("syncId") : nullptr;
    errors->SetName("syncId");
    String in_syncId = ValueConversions<String>::fromValue(syncIdValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->RecordClockSyncMarker(in_syncId);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Tracing.recordClockSyncMarker"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

class RequestMemoryDumpCallbackImpl : public Backend::RequestMemoryDumpCallback, public DomainDispatcher::Callback {
public:
    RequestMemoryDumpCallbackImpl(std::unique_ptr<DomainDispatcher::WeakPtr> backendImpl, int callId, crdtp::span<uint8_t> message)
        : DomainDispatcher::Callback(std::move(backendImpl), callId,
crdtp::SpanFrom("Tracing.requestMemoryDump"), message) { }

    void sendSuccess(const String& dumpGuid, bool success) override
    {
        std::vector<uint8_t> result_buffer;
        crdtp::cbor::EnvelopeEncoder envelope_encoder;
        envelope_encoder.EncodeStart(&result_buffer);
        result_buffer.push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
          crdtp::SerializeField(crdtp::SpanFrom("dumpGuid"), dumpGuid, &result_buffer);
          crdtp::SerializeField(crdtp::SpanFrom("success"), success, &result_buffer);
        result_buffer.push_back(crdtp::cbor::EncodeStop());
        envelope_encoder.EncodeStop(&result_buffer);
        sendIfActive(crdtp::Serializable::From(std::move(result_buffer)), DispatchResponse::Success());
    }

    void fallThrough() override
    {
        fallThroughIfActive();
    }

    void sendFailure(const DispatchResponse& response) override
    {
        DCHECK(response.IsError());
        sendIfActive(nullptr, response);
    }
};

void DomainDispatcherImpl::requestMemoryDump(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* deterministicValue = params ? params->get("deterministic") : nullptr;
    Maybe<bool> in_deterministic;
    if (deterministicValue) {
        errors->SetName("deterministic");
        in_deterministic = ValueConversions<bool>::fromValue(deterministicValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    m_backend->RequestMemoryDump(std::move(in_deterministic), std::make_unique<RequestMemoryDumpCallbackImpl>(weakPtr(), dispatchable.CallId(), dispatchable.Serialized()));
}

class StartCallbackImpl : public Backend::StartCallback, public DomainDispatcher::Callback {
public:
    StartCallbackImpl(std::unique_ptr<DomainDispatcher::WeakPtr> backendImpl, int callId, crdtp::span<uint8_t> message)
        : DomainDispatcher::Callback(std::move(backendImpl), callId,
crdtp::SpanFrom("Tracing.start"), message) { }

    void sendSuccess() override
    {
        std::vector<uint8_t> result_buffer;
        crdtp::cbor::EnvelopeEncoder envelope_encoder;
        envelope_encoder.EncodeStart(&result_buffer);
        result_buffer.push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
        result_buffer.push_back(crdtp::cbor::EncodeStop());
        envelope_encoder.EncodeStop(&result_buffer);
        sendIfActive(crdtp::Serializable::From(std::move(result_buffer)), DispatchResponse::Success());
    }

    void fallThrough() override
    {
        fallThroughIfActive();
    }

    void sendFailure(const DispatchResponse& response) override
    {
        DCHECK(response.IsError());
        sendIfActive(nullptr, response);
    }
};

void DomainDispatcherImpl::start(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* categoriesValue = params ? params->get("categories") : nullptr;
    Maybe<String> in_categories;
    if (categoriesValue) {
        errors->SetName("categories");
        in_categories = ValueConversions<String>::fromValue(categoriesValue, errors);
    }
    protocol::Value* optionsValue = params ? params->get("options") : nullptr;
    Maybe<String> in_options;
    if (optionsValue) {
        errors->SetName("options");
        in_options = ValueConversions<String>::fromValue(optionsValue, errors);
    }
    protocol::Value* bufferUsageReportingIntervalValue = params ? params->get("bufferUsageReportingInterval") : nullptr;
    Maybe<double> in_bufferUsageReportingInterval;
    if (bufferUsageReportingIntervalValue) {
        errors->SetName("bufferUsageReportingInterval");
        in_bufferUsageReportingInterval = ValueConversions<double>::fromValue(bufferUsageReportingIntervalValue, errors);
    }
    protocol::Value* transferModeValue = params ? params->get("transferMode") : nullptr;
    Maybe<String> in_transferMode;
    if (transferModeValue) {
        errors->SetName("transferMode");
        in_transferMode = ValueConversions<String>::fromValue(transferModeValue, errors);
    }
    protocol::Value* streamFormatValue = params ? params->get("streamFormat") : nullptr;
    Maybe<String> in_streamFormat;
    if (streamFormatValue) {
        errors->SetName("streamFormat");
        in_streamFormat = ValueConversions<String>::fromValue(streamFormatValue, errors);
    }
    protocol::Value* streamCompressionValue = params ? params->get("streamCompression") : nullptr;
    Maybe<String> in_streamCompression;
    if (streamCompressionValue) {
        errors->SetName("streamCompression");
        in_streamCompression = ValueConversions<String>::fromValue(streamCompressionValue, errors);
    }
    protocol::Value* traceConfigValue = params ? params->get("traceConfig") : nullptr;
    Maybe<protocol::Tracing::TraceConfig> in_traceConfig;
    if (traceConfigValue) {
        errors->SetName("traceConfig");
        in_traceConfig = ValueConversions<protocol::Tracing::TraceConfig>::fromValue(traceConfigValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    m_backend->Start(std::move(in_categories), std::move(in_options), std::move(in_bufferUsageReportingInterval), std::move(in_transferMode), std::move(in_streamFormat), std::move(in_streamCompression), std::move(in_traceConfig), std::make_unique<StartCallbackImpl>(weakPtr(), dispatchable.CallId(), dispatchable.Serialized()));
}

namespace {
// This helper method (with a static map of redirects) is used from Dispatcher::wire
// immediately below.
const std::vector<std::pair<crdtp::span<uint8_t>, crdtp::span<uint8_t>>>& SortedRedirects() {
  static auto* redirects = [](){
    auto* redirects = new std::vector<std::pair<crdtp::span<uint8_t>, crdtp::span<uint8_t>>>{
    };
    return redirects;
  }();
  return *redirects;
}
}  // namespace

// static
void Dispatcher::wire(UberDispatcher* uber, Backend* backend)
{
    auto dispatcher = std::make_unique<DomainDispatcherImpl>(uber->channel(), backend);
    uber->WireBackend(crdtp::SpanFrom("Tracing"), SortedRedirects(), std::move(dispatcher));
}

} // Tracing
} // namespace content
} // namespace protocol

// This file is generated by TypeBuilder_cpp.template.

// Copyright (c) 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "content/browser/devtools/protocol/browser.h"

#include "content/browser/devtools/protocol/protocol.h"

#include "third_party/inspector_protocol/crdtp/cbor.h"
#include "third_party/inspector_protocol/crdtp/find_by_first.h"
#include "third_party/inspector_protocol/crdtp/serializer_traits.h"
#include "third_party/inspector_protocol/crdtp/span.h"

namespace content {
namespace protocol {
namespace Browser {

// ------------- Enum values from types.

const char Metainfo::domainName[] = "Browser";
const char Metainfo::commandPrefix[] = "Browser.";
const char Metainfo::version[] = "1.3";

namespace PermissionTypeEnum {
const char AccessibilityEvents[] = "accessibilityEvents";
const char AudioCapture[] = "audioCapture";
const char BackgroundSync[] = "backgroundSync";
const char BackgroundFetch[] = "backgroundFetch";
const char ClipboardReadWrite[] = "clipboardReadWrite";
const char ClipboardSanitizedWrite[] = "clipboardSanitizedWrite";
const char DurableStorage[] = "durableStorage";
const char Flash[] = "flash";
const char Geolocation[] = "geolocation";
const char Midi[] = "midi";
const char MidiSysex[] = "midiSysex";
const char Nfc[] = "nfc";
const char Notifications[] = "notifications";
const char PaymentHandler[] = "paymentHandler";
const char PeriodicBackgroundSync[] = "periodicBackgroundSync";
const char ProtectedMediaIdentifier[] = "protectedMediaIdentifier";
const char Sensors[] = "sensors";
const char VideoCapture[] = "videoCapture";
const char IdleDetection[] = "idleDetection";
const char WakeLockScreen[] = "wakeLockScreen";
const char WakeLockSystem[] = "wakeLockSystem";
} // namespace PermissionTypeEnum

namespace PermissionSettingEnum {
const char Granted[] = "granted";
const char Denied[] = "denied";
const char Prompt[] = "prompt";
} // namespace PermissionSettingEnum

std::unique_ptr<PermissionDescriptor> PermissionDescriptor::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<PermissionDescriptor> result(new PermissionDescriptor());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* nameValue = object->get("name");
    errors->SetName("name");
    result->m_name = ValueConversions<String>::fromValue(nameValue, errors);
    protocol::Value* sysexValue = object->get("sysex");
    if (sysexValue) {
        errors->SetName("sysex");
        result->m_sysex = ValueConversions<bool>::fromValue(sysexValue, errors);
    }
    protocol::Value* userVisibleOnlyValue = object->get("userVisibleOnly");
    if (userVisibleOnlyValue) {
        errors->SetName("userVisibleOnly");
        result->m_userVisibleOnly = ValueConversions<bool>::fromValue(userVisibleOnlyValue, errors);
    }
    protocol::Value* typeValue = object->get("type");
    if (typeValue) {
        errors->SetName("type");
        result->m_type = ValueConversions<String>::fromValue(typeValue, errors);
    }
    protocol::Value* allowWithoutSanitizationValue = object->get("allowWithoutSanitization");
    if (allowWithoutSanitizationValue) {
        errors->SetName("allowWithoutSanitization");
        result->m_allowWithoutSanitization = ValueConversions<bool>::fromValue(allowWithoutSanitizationValue, errors);
    }
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> PermissionDescriptor::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("name", ValueConversions<String>::toValue(m_name));
    if (m_sysex.isJust())
        result->setValue("sysex", ValueConversions<bool>::toValue(m_sysex.fromJust()));
    if (m_userVisibleOnly.isJust())
        result->setValue("userVisibleOnly", ValueConversions<bool>::toValue(m_userVisibleOnly.fromJust()));
    if (m_type.isJust())
        result->setValue("type", ValueConversions<String>::toValue(m_type.fromJust()));
    if (m_allowWithoutSanitization.isJust())
        result->setValue("allowWithoutSanitization", ValueConversions<bool>::toValue(m_allowWithoutSanitization.fromJust()));
    return result;
}

void PermissionDescriptor::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("name"), m_name, out);
      crdtp::SerializeField(crdtp::SpanFrom("sysex"), m_sysex, out);
      crdtp::SerializeField(crdtp::SpanFrom("userVisibleOnly"), m_userVisibleOnly, out);
      crdtp::SerializeField(crdtp::SpanFrom("type"), m_type, out);
      crdtp::SerializeField(crdtp::SpanFrom("allowWithoutSanitization"), m_allowWithoutSanitization, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<PermissionDescriptor> PermissionDescriptor::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<Bucket> Bucket::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<Bucket> result(new Bucket());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* lowValue = object->get("low");
    errors->SetName("low");
    result->m_low = ValueConversions<int>::fromValue(lowValue, errors);
    protocol::Value* highValue = object->get("high");
    errors->SetName("high");
    result->m_high = ValueConversions<int>::fromValue(highValue, errors);
    protocol::Value* countValue = object->get("count");
    errors->SetName("count");
    result->m_count = ValueConversions<int>::fromValue(countValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> Bucket::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("low", ValueConversions<int>::toValue(m_low));
    result->setValue("high", ValueConversions<int>::toValue(m_high));
    result->setValue("count", ValueConversions<int>::toValue(m_count));
    return result;
}

void Bucket::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("low"), m_low, out);
      crdtp::SerializeField(crdtp::SpanFrom("high"), m_high, out);
      crdtp::SerializeField(crdtp::SpanFrom("count"), m_count, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<Bucket> Bucket::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<Histogram> Histogram::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<Histogram> result(new Histogram());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* nameValue = object->get("name");
    errors->SetName("name");
    result->m_name = ValueConversions<String>::fromValue(nameValue, errors);
    protocol::Value* sumValue = object->get("sum");
    errors->SetName("sum");
    result->m_sum = ValueConversions<int>::fromValue(sumValue, errors);
    protocol::Value* countValue = object->get("count");
    errors->SetName("count");
    result->m_count = ValueConversions<int>::fromValue(countValue, errors);
    protocol::Value* bucketsValue = object->get("buckets");
    errors->SetName("buckets");
    result->m_buckets = ValueConversions<protocol::Array<protocol::Browser::Bucket>>::fromValue(bucketsValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> Histogram::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("name", ValueConversions<String>::toValue(m_name));
    result->setValue("sum", ValueConversions<int>::toValue(m_sum));
    result->setValue("count", ValueConversions<int>::toValue(m_count));
    result->setValue("buckets", ValueConversions<protocol::Array<protocol::Browser::Bucket>>::toValue(m_buckets.get()));
    return result;
}

void Histogram::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("name"), m_name, out);
      crdtp::SerializeField(crdtp::SpanFrom("sum"), m_sum, out);
      crdtp::SerializeField(crdtp::SpanFrom("count"), m_count, out);
      crdtp::SerializeField(crdtp::SpanFrom("buckets"), m_buckets, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<Histogram> Histogram::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

// ------------- Enum values from params.


namespace SetDownloadBehavior {
namespace BehaviorEnum {
const char* Deny = "deny";
const char* Allow = "allow";
const char* AllowAndName = "allowAndName";
const char* Default = "default";
} // namespace BehaviorEnum
} // namespace SetDownloadBehavior

// ------------- Frontend notifications.

void Frontend::flush()
{
    frontend_channel_->FlushProtocolNotifications();
}

void Frontend::sendRawNotification(std::unique_ptr<Serializable> notification)
{
    frontend_channel_->SendProtocolNotification(std::move(notification));
}

// --------------------- Dispatcher.

class DomainDispatcherImpl : public protocol::DomainDispatcher {
public:
    DomainDispatcherImpl(FrontendChannel* frontendChannel, Backend* backend)
        : DomainDispatcher(frontendChannel)
        , m_backend(backend) {}
    ~DomainDispatcherImpl() override { }

    using CallHandler = void (DomainDispatcherImpl::*)(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);

    std::function<void(const crdtp::Dispatchable&)> Dispatch(crdtp::span<uint8_t> command_name) override;

    void setPermission(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void grantPermissions(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void resetPermissions(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setDownloadBehavior(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void crash(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void crashGpuProcess(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void getVersion(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void getBrowserCommandLine(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void getHistograms(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void getHistogram(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
 protected:
    Backend* m_backend;
};

namespace {
// This helper method with a static map of command methods (instance methods
// of DomainDispatcherImpl declared just above) by their name is used immediately below,
// in the DomainDispatcherImpl::Dispatch method.
DomainDispatcherImpl::CallHandler CommandByName(crdtp::span<uint8_t> command_name) {
  static auto* commands = [](){
    auto* commands = new std::vector<std::pair<crdtp::span<uint8_t>,
                              DomainDispatcherImpl::CallHandler>>{
    {
          crdtp::SpanFrom("crash"),
          &DomainDispatcherImpl::crash
    },
    {
          crdtp::SpanFrom("crashGpuProcess"),
          &DomainDispatcherImpl::crashGpuProcess
    },
    {
          crdtp::SpanFrom("getBrowserCommandLine"),
          &DomainDispatcherImpl::getBrowserCommandLine
    },
    {
          crdtp::SpanFrom("getHistogram"),
          &DomainDispatcherImpl::getHistogram
    },
    {
          crdtp::SpanFrom("getHistograms"),
          &DomainDispatcherImpl::getHistograms
    },
    {
          crdtp::SpanFrom("getVersion"),
          &DomainDispatcherImpl::getVersion
    },
    {
          crdtp::SpanFrom("grantPermissions"),
          &DomainDispatcherImpl::grantPermissions
    },
    {
          crdtp::SpanFrom("resetPermissions"),
          &DomainDispatcherImpl::resetPermissions
    },
    {
          crdtp::SpanFrom("setDownloadBehavior"),
          &DomainDispatcherImpl::setDownloadBehavior
    },
    {
          crdtp::SpanFrom("setPermission"),
          &DomainDispatcherImpl::setPermission
    },
    };
    return commands;
  }();
  return crdtp::FindByFirst<DomainDispatcherImpl::CallHandler>(*commands, command_name, nullptr);
}
}  // namespace

std::function<void(const crdtp::Dispatchable&)> DomainDispatcherImpl::Dispatch(crdtp::span<uint8_t> command_name) {
  CallHandler handler = CommandByName(command_name);
  if (!handler) return nullptr;
  return [this, handler](const crdtp::Dispatchable& dispatchable){
    std::unique_ptr<DictionaryValue> params =
        DictionaryValue::cast(protocol::Value::parseBinary(dispatchable.Params().data(),
        dispatchable.Params().size()));
    ErrorSupport errors;
    errors.Push();
    (this->*handler)(dispatchable, params.get(), &errors);
  };
}


void DomainDispatcherImpl::setPermission(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* permissionValue = params ? params->get("permission") : nullptr;
    errors->SetName("permission");
    std::unique_ptr<protocol::Browser::PermissionDescriptor> in_permission = ValueConversions<protocol::Browser::PermissionDescriptor>::fromValue(permissionValue, errors);
    protocol::Value* settingValue = params ? params->get("setting") : nullptr;
    errors->SetName("setting");
    String in_setting = ValueConversions<String>::fromValue(settingValue, errors);
    protocol::Value* originValue = params ? params->get("origin") : nullptr;
    Maybe<String> in_origin;
    if (originValue) {
        errors->SetName("origin");
        in_origin = ValueConversions<String>::fromValue(originValue, errors);
    }
    protocol::Value* browserContextIdValue = params ? params->get("browserContextId") : nullptr;
    Maybe<String> in_browserContextId;
    if (browserContextIdValue) {
        errors->SetName("browserContextId");
        in_browserContextId = ValueConversions<String>::fromValue(browserContextIdValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->SetPermission(std::move(in_permission), in_setting, std::move(in_origin), std::move(in_browserContextId));
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Browser.setPermission"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::grantPermissions(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* permissionsValue = params ? params->get("permissions") : nullptr;
    errors->SetName("permissions");
    std::unique_ptr<protocol::Array<String>> in_permissions = ValueConversions<protocol::Array<String>>::fromValue(permissionsValue, errors);
    protocol::Value* originValue = params ? params->get("origin") : nullptr;
    Maybe<String> in_origin;
    if (originValue) {
        errors->SetName("origin");
        in_origin = ValueConversions<String>::fromValue(originValue, errors);
    }
    protocol::Value* browserContextIdValue = params ? params->get("browserContextId") : nullptr;
    Maybe<String> in_browserContextId;
    if (browserContextIdValue) {
        errors->SetName("browserContextId");
        in_browserContextId = ValueConversions<String>::fromValue(browserContextIdValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->GrantPermissions(std::move(in_permissions), std::move(in_origin), std::move(in_browserContextId));
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Browser.grantPermissions"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::resetPermissions(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* browserContextIdValue = params ? params->get("browserContextId") : nullptr;
    Maybe<String> in_browserContextId;
    if (browserContextIdValue) {
        errors->SetName("browserContextId");
        in_browserContextId = ValueConversions<String>::fromValue(browserContextIdValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->ResetPermissions(std::move(in_browserContextId));
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Browser.resetPermissions"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setDownloadBehavior(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* behaviorValue = params ? params->get("behavior") : nullptr;
    errors->SetName("behavior");
    String in_behavior = ValueConversions<String>::fromValue(behaviorValue, errors);
    protocol::Value* browserContextIdValue = params ? params->get("browserContextId") : nullptr;
    Maybe<String> in_browserContextId;
    if (browserContextIdValue) {
        errors->SetName("browserContextId");
        in_browserContextId = ValueConversions<String>::fromValue(browserContextIdValue, errors);
    }
    protocol::Value* downloadPathValue = params ? params->get("downloadPath") : nullptr;
    Maybe<String> in_downloadPath;
    if (downloadPathValue) {
        errors->SetName("downloadPath");
        in_downloadPath = ValueConversions<String>::fromValue(downloadPathValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->SetDownloadBehavior(in_behavior, std::move(in_browserContextId), std::move(in_downloadPath));
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Browser.setDownloadBehavior"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::crash(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->Crash();
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Browser.crash"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::crashGpuProcess(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->CrashGpuProcess();
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Browser.crashGpuProcess"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::getVersion(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Declare output parameters.
    String out_protocolVersion;
    String out_product;
    String out_revision;
    String out_userAgent;
    String out_jsVersion;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->GetVersion(&out_protocolVersion, &out_product, &out_revision, &out_userAgent, &out_jsVersion);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Browser.getVersion"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
            crdtp::SerializeField(crdtp::SpanFrom("protocolVersion"), out_protocolVersion, &result);
            crdtp::SerializeField(crdtp::SpanFrom("product"), out_product, &result);
            crdtp::SerializeField(crdtp::SpanFrom("revision"), out_revision, &result);
            crdtp::SerializeField(crdtp::SpanFrom("userAgent"), out_userAgent, &result);
            crdtp::SerializeField(crdtp::SpanFrom("jsVersion"), out_jsVersion, &result);
          result.push_back(crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::getBrowserCommandLine(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Declare output parameters.
    std::unique_ptr<protocol::Array<String>> out_arguments;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->GetBrowserCommandLine(&out_arguments);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Browser.getBrowserCommandLine"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
            crdtp::SerializeField(crdtp::SpanFrom("arguments"), out_arguments, &result);
          result.push_back(crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::getHistograms(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* queryValue = params ? params->get("query") : nullptr;
    Maybe<String> in_query;
    if (queryValue) {
        errors->SetName("query");
        in_query = ValueConversions<String>::fromValue(queryValue, errors);
    }
    protocol::Value* deltaValue = params ? params->get("delta") : nullptr;
    Maybe<bool> in_delta;
    if (deltaValue) {
        errors->SetName("delta");
        in_delta = ValueConversions<bool>::fromValue(deltaValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    std::unique_ptr<protocol::Array<protocol::Browser::Histogram>> out_histograms;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->GetHistograms(std::move(in_query), std::move(in_delta), &out_histograms);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Browser.getHistograms"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
            crdtp::SerializeField(crdtp::SpanFrom("histograms"), out_histograms, &result);
          result.push_back(crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::getHistogram(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* nameValue = params ? params->get("name") : nullptr;
    errors->SetName("name");
    String in_name = ValueConversions<String>::fromValue(nameValue, errors);
    protocol::Value* deltaValue = params ? params->get("delta") : nullptr;
    Maybe<bool> in_delta;
    if (deltaValue) {
        errors->SetName("delta");
        in_delta = ValueConversions<bool>::fromValue(deltaValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    std::unique_ptr<protocol::Browser::Histogram> out_histogram;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->GetHistogram(in_name, std::move(in_delta), &out_histogram);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Browser.getHistogram"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
            crdtp::SerializeField(crdtp::SpanFrom("histogram"), out_histogram, &result);
          result.push_back(crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, crdtp::Serializable::From(std::move(result)));
      }
    return;
}

namespace {
// This helper method (with a static map of redirects) is used from Dispatcher::wire
// immediately below.
const std::vector<std::pair<crdtp::span<uint8_t>, crdtp::span<uint8_t>>>& SortedRedirects() {
  static auto* redirects = [](){
    auto* redirects = new std::vector<std::pair<crdtp::span<uint8_t>, crdtp::span<uint8_t>>>{
    };
    return redirects;
  }();
  return *redirects;
}
}  // namespace

// static
void Dispatcher::wire(UberDispatcher* uber, Backend* backend)
{
    auto dispatcher = std::make_unique<DomainDispatcherImpl>(uber->channel(), backend);
    uber->WireBackend(crdtp::SpanFrom("Browser"), SortedRedirects(), std::move(dispatcher));
}

} // Browser
} // namespace content
} // namespace protocol

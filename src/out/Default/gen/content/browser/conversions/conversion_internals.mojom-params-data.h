// content/browser/conversions/conversion_internals.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_BROWSER_CONVERSIONS_CONVERSION_INTERNALS_MOJOM_PARAMS_DATA_H_
#define CONTENT_BROWSER_CONVERSIONS_CONVERSION_INTERNALS_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace mojom {
namespace internal {
class  ConversionInternalsHandler_IsMeasurementEnabled_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ConversionInternalsHandler_IsMeasurementEnabled_Params_Data));
      new (data()) ConversionInternalsHandler_IsMeasurementEnabled_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ConversionInternalsHandler_IsMeasurementEnabled_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ConversionInternalsHandler_IsMeasurementEnabled_Params_Data>(index_);
    }
    ConversionInternalsHandler_IsMeasurementEnabled_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  ConversionInternalsHandler_IsMeasurementEnabled_Params_Data();
  ~ConversionInternalsHandler_IsMeasurementEnabled_Params_Data() = delete;
};
static_assert(sizeof(ConversionInternalsHandler_IsMeasurementEnabled_Params_Data) == 8,
              "Bad sizeof(ConversionInternalsHandler_IsMeasurementEnabled_Params_Data)");
class  ConversionInternalsHandler_IsMeasurementEnabled_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ConversionInternalsHandler_IsMeasurementEnabled_ResponseParams_Data));
      new (data()) ConversionInternalsHandler_IsMeasurementEnabled_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ConversionInternalsHandler_IsMeasurementEnabled_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ConversionInternalsHandler_IsMeasurementEnabled_ResponseParams_Data>(index_);
    }
    ConversionInternalsHandler_IsMeasurementEnabled_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t enabled : 1;
  uint8_t padfinal_[7];

 private:
  ConversionInternalsHandler_IsMeasurementEnabled_ResponseParams_Data();
  ~ConversionInternalsHandler_IsMeasurementEnabled_ResponseParams_Data() = delete;
};
static_assert(sizeof(ConversionInternalsHandler_IsMeasurementEnabled_ResponseParams_Data) == 16,
              "Bad sizeof(ConversionInternalsHandler_IsMeasurementEnabled_ResponseParams_Data)");
class  ConversionInternalsHandler_GetActiveImpressions_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ConversionInternalsHandler_GetActiveImpressions_Params_Data));
      new (data()) ConversionInternalsHandler_GetActiveImpressions_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ConversionInternalsHandler_GetActiveImpressions_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ConversionInternalsHandler_GetActiveImpressions_Params_Data>(index_);
    }
    ConversionInternalsHandler_GetActiveImpressions_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  ConversionInternalsHandler_GetActiveImpressions_Params_Data();
  ~ConversionInternalsHandler_GetActiveImpressions_Params_Data() = delete;
};
static_assert(sizeof(ConversionInternalsHandler_GetActiveImpressions_Params_Data) == 8,
              "Bad sizeof(ConversionInternalsHandler_GetActiveImpressions_Params_Data)");
class  ConversionInternalsHandler_GetActiveImpressions_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ConversionInternalsHandler_GetActiveImpressions_ResponseParams_Data));
      new (data()) ConversionInternalsHandler_GetActiveImpressions_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ConversionInternalsHandler_GetActiveImpressions_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ConversionInternalsHandler_GetActiveImpressions_ResponseParams_Data>(index_);
    }
    ConversionInternalsHandler_GetActiveImpressions_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::WebUIImpression_Data>>> impressions;

 private:
  ConversionInternalsHandler_GetActiveImpressions_ResponseParams_Data();
  ~ConversionInternalsHandler_GetActiveImpressions_ResponseParams_Data() = delete;
};
static_assert(sizeof(ConversionInternalsHandler_GetActiveImpressions_ResponseParams_Data) == 16,
              "Bad sizeof(ConversionInternalsHandler_GetActiveImpressions_ResponseParams_Data)");
class  ConversionInternalsHandler_GetPendingReports_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ConversionInternalsHandler_GetPendingReports_Params_Data));
      new (data()) ConversionInternalsHandler_GetPendingReports_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ConversionInternalsHandler_GetPendingReports_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ConversionInternalsHandler_GetPendingReports_Params_Data>(index_);
    }
    ConversionInternalsHandler_GetPendingReports_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  ConversionInternalsHandler_GetPendingReports_Params_Data();
  ~ConversionInternalsHandler_GetPendingReports_Params_Data() = delete;
};
static_assert(sizeof(ConversionInternalsHandler_GetPendingReports_Params_Data) == 8,
              "Bad sizeof(ConversionInternalsHandler_GetPendingReports_Params_Data)");
class  ConversionInternalsHandler_GetPendingReports_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ConversionInternalsHandler_GetPendingReports_ResponseParams_Data));
      new (data()) ConversionInternalsHandler_GetPendingReports_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ConversionInternalsHandler_GetPendingReports_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ConversionInternalsHandler_GetPendingReports_ResponseParams_Data>(index_);
    }
    ConversionInternalsHandler_GetPendingReports_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::WebUIConversionReport_Data>>> reports;

 private:
  ConversionInternalsHandler_GetPendingReports_ResponseParams_Data();
  ~ConversionInternalsHandler_GetPendingReports_ResponseParams_Data() = delete;
};
static_assert(sizeof(ConversionInternalsHandler_GetPendingReports_ResponseParams_Data) == 16,
              "Bad sizeof(ConversionInternalsHandler_GetPendingReports_ResponseParams_Data)");
class  ConversionInternalsHandler_SendPendingReports_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ConversionInternalsHandler_SendPendingReports_Params_Data));
      new (data()) ConversionInternalsHandler_SendPendingReports_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ConversionInternalsHandler_SendPendingReports_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ConversionInternalsHandler_SendPendingReports_Params_Data>(index_);
    }
    ConversionInternalsHandler_SendPendingReports_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  ConversionInternalsHandler_SendPendingReports_Params_Data();
  ~ConversionInternalsHandler_SendPendingReports_Params_Data() = delete;
};
static_assert(sizeof(ConversionInternalsHandler_SendPendingReports_Params_Data) == 8,
              "Bad sizeof(ConversionInternalsHandler_SendPendingReports_Params_Data)");
class  ConversionInternalsHandler_SendPendingReports_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ConversionInternalsHandler_SendPendingReports_ResponseParams_Data));
      new (data()) ConversionInternalsHandler_SendPendingReports_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ConversionInternalsHandler_SendPendingReports_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ConversionInternalsHandler_SendPendingReports_ResponseParams_Data>(index_);
    }
    ConversionInternalsHandler_SendPendingReports_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  ConversionInternalsHandler_SendPendingReports_ResponseParams_Data();
  ~ConversionInternalsHandler_SendPendingReports_ResponseParams_Data() = delete;
};
static_assert(sizeof(ConversionInternalsHandler_SendPendingReports_ResponseParams_Data) == 8,
              "Bad sizeof(ConversionInternalsHandler_SendPendingReports_ResponseParams_Data)");
class  ConversionInternalsHandler_ClearStorage_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ConversionInternalsHandler_ClearStorage_Params_Data));
      new (data()) ConversionInternalsHandler_ClearStorage_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ConversionInternalsHandler_ClearStorage_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ConversionInternalsHandler_ClearStorage_Params_Data>(index_);
    }
    ConversionInternalsHandler_ClearStorage_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  ConversionInternalsHandler_ClearStorage_Params_Data();
  ~ConversionInternalsHandler_ClearStorage_Params_Data() = delete;
};
static_assert(sizeof(ConversionInternalsHandler_ClearStorage_Params_Data) == 8,
              "Bad sizeof(ConversionInternalsHandler_ClearStorage_Params_Data)");
class  ConversionInternalsHandler_ClearStorage_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ConversionInternalsHandler_ClearStorage_ResponseParams_Data));
      new (data()) ConversionInternalsHandler_ClearStorage_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ConversionInternalsHandler_ClearStorage_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ConversionInternalsHandler_ClearStorage_ResponseParams_Data>(index_);
    }
    ConversionInternalsHandler_ClearStorage_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  ConversionInternalsHandler_ClearStorage_ResponseParams_Data();
  ~ConversionInternalsHandler_ClearStorage_ResponseParams_Data() = delete;
};
static_assert(sizeof(ConversionInternalsHandler_ClearStorage_ResponseParams_Data) == 8,
              "Bad sizeof(ConversionInternalsHandler_ClearStorage_ResponseParams_Data)");

}  // namespace internal
class ConversionInternalsHandler_IsMeasurementEnabled_ParamsDataView {
 public:
  ConversionInternalsHandler_IsMeasurementEnabled_ParamsDataView() {}

  ConversionInternalsHandler_IsMeasurementEnabled_ParamsDataView(
      internal::ConversionInternalsHandler_IsMeasurementEnabled_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ConversionInternalsHandler_IsMeasurementEnabled_Params_Data* data_ = nullptr;
};

class ConversionInternalsHandler_IsMeasurementEnabled_ResponseParamsDataView {
 public:
  ConversionInternalsHandler_IsMeasurementEnabled_ResponseParamsDataView() {}

  ConversionInternalsHandler_IsMeasurementEnabled_ResponseParamsDataView(
      internal::ConversionInternalsHandler_IsMeasurementEnabled_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool enabled() const {
    return data_->enabled;
  }
 private:
  internal::ConversionInternalsHandler_IsMeasurementEnabled_ResponseParams_Data* data_ = nullptr;
};

class ConversionInternalsHandler_GetActiveImpressions_ParamsDataView {
 public:
  ConversionInternalsHandler_GetActiveImpressions_ParamsDataView() {}

  ConversionInternalsHandler_GetActiveImpressions_ParamsDataView(
      internal::ConversionInternalsHandler_GetActiveImpressions_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ConversionInternalsHandler_GetActiveImpressions_Params_Data* data_ = nullptr;
};

class ConversionInternalsHandler_GetActiveImpressions_ResponseParamsDataView {
 public:
  ConversionInternalsHandler_GetActiveImpressions_ResponseParamsDataView() {}

  ConversionInternalsHandler_GetActiveImpressions_ResponseParamsDataView(
      internal::ConversionInternalsHandler_GetActiveImpressions_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetImpressionsDataView(
      mojo::ArrayDataView<WebUIImpressionDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadImpressions(UserType* output) {
    auto* pointer = data_->impressions.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::mojom::WebUIImpressionDataView>>(
        pointer, output, context_);
  }
 private:
  internal::ConversionInternalsHandler_GetActiveImpressions_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class ConversionInternalsHandler_GetPendingReports_ParamsDataView {
 public:
  ConversionInternalsHandler_GetPendingReports_ParamsDataView() {}

  ConversionInternalsHandler_GetPendingReports_ParamsDataView(
      internal::ConversionInternalsHandler_GetPendingReports_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ConversionInternalsHandler_GetPendingReports_Params_Data* data_ = nullptr;
};

class ConversionInternalsHandler_GetPendingReports_ResponseParamsDataView {
 public:
  ConversionInternalsHandler_GetPendingReports_ResponseParamsDataView() {}

  ConversionInternalsHandler_GetPendingReports_ResponseParamsDataView(
      internal::ConversionInternalsHandler_GetPendingReports_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetReportsDataView(
      mojo::ArrayDataView<WebUIConversionReportDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadReports(UserType* output) {
    auto* pointer = data_->reports.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::mojom::WebUIConversionReportDataView>>(
        pointer, output, context_);
  }
 private:
  internal::ConversionInternalsHandler_GetPendingReports_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class ConversionInternalsHandler_SendPendingReports_ParamsDataView {
 public:
  ConversionInternalsHandler_SendPendingReports_ParamsDataView() {}

  ConversionInternalsHandler_SendPendingReports_ParamsDataView(
      internal::ConversionInternalsHandler_SendPendingReports_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ConversionInternalsHandler_SendPendingReports_Params_Data* data_ = nullptr;
};

class ConversionInternalsHandler_SendPendingReports_ResponseParamsDataView {
 public:
  ConversionInternalsHandler_SendPendingReports_ResponseParamsDataView() {}

  ConversionInternalsHandler_SendPendingReports_ResponseParamsDataView(
      internal::ConversionInternalsHandler_SendPendingReports_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ConversionInternalsHandler_SendPendingReports_ResponseParams_Data* data_ = nullptr;
};

class ConversionInternalsHandler_ClearStorage_ParamsDataView {
 public:
  ConversionInternalsHandler_ClearStorage_ParamsDataView() {}

  ConversionInternalsHandler_ClearStorage_ParamsDataView(
      internal::ConversionInternalsHandler_ClearStorage_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ConversionInternalsHandler_ClearStorage_Params_Data* data_ = nullptr;
};

class ConversionInternalsHandler_ClearStorage_ResponseParamsDataView {
 public:
  ConversionInternalsHandler_ClearStorage_ResponseParamsDataView() {}

  ConversionInternalsHandler_ClearStorage_ResponseParamsDataView(
      internal::ConversionInternalsHandler_ClearStorage_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ConversionInternalsHandler_ClearStorage_ResponseParams_Data* data_ = nullptr;
};








inline void ConversionInternalsHandler_GetActiveImpressions_ResponseParamsDataView::GetImpressionsDataView(
    mojo::ArrayDataView<WebUIImpressionDataView>* output) {
  auto pointer = data_->impressions.Get();
  *output = mojo::ArrayDataView<WebUIImpressionDataView>(pointer, context_);
}




inline void ConversionInternalsHandler_GetPendingReports_ResponseParamsDataView::GetReportsDataView(
    mojo::ArrayDataView<WebUIConversionReportDataView>* output) {
  auto pointer = data_->reports.Get();
  *output = mojo::ArrayDataView<WebUIConversionReportDataView>(pointer, context_);
}









}  // namespace mojom

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CONTENT_BROWSER_CONVERSIONS_CONVERSION_INTERNALS_MOJOM_PARAMS_DATA_H_
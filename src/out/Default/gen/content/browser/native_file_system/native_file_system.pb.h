// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: native_file_system.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_native_5ffile_5fsystem_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_native_5ffile_5fsystem_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_native_5ffile_5fsystem_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_native_5ffile_5fsystem_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace content {
class NativeFileData;
class NativeFileDataDefaultTypeInternal;
extern NativeFileDataDefaultTypeInternal _NativeFileData_default_instance_;
class NativeFileSystemHandleData;
class NativeFileSystemHandleDataDefaultTypeInternal;
extern NativeFileSystemHandleDataDefaultTypeInternal _NativeFileSystemHandleData_default_instance_;
class SandboxedFileData;
class SandboxedFileDataDefaultTypeInternal;
extern SandboxedFileDataDefaultTypeInternal _SandboxedFileData_default_instance_;
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> ::content::NativeFileData* Arena::CreateMaybeMessage<::content::NativeFileData>(Arena*);
template<> ::content::NativeFileSystemHandleData* Arena::CreateMaybeMessage<::content::NativeFileSystemHandleData>(Arena*);
template<> ::content::SandboxedFileData* Arena::CreateMaybeMessage<::content::SandboxedFileData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace content {

enum NativeFileSystemHandleData_HandleType : int {
  NativeFileSystemHandleData_HandleType_kFile = 0,
  NativeFileSystemHandleData_HandleType_kDirectory = 1
};
bool NativeFileSystemHandleData_HandleType_IsValid(int value);
constexpr NativeFileSystemHandleData_HandleType NativeFileSystemHandleData_HandleType_HandleType_MIN = NativeFileSystemHandleData_HandleType_kFile;
constexpr NativeFileSystemHandleData_HandleType NativeFileSystemHandleData_HandleType_HandleType_MAX = NativeFileSystemHandleData_HandleType_kDirectory;
constexpr int NativeFileSystemHandleData_HandleType_HandleType_ARRAYSIZE = NativeFileSystemHandleData_HandleType_HandleType_MAX + 1;

const std::string& NativeFileSystemHandleData_HandleType_Name(NativeFileSystemHandleData_HandleType value);
template<typename T>
inline const std::string& NativeFileSystemHandleData_HandleType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NativeFileSystemHandleData_HandleType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NativeFileSystemHandleData_HandleType_Name.");
  return NativeFileSystemHandleData_HandleType_Name(static_cast<NativeFileSystemHandleData_HandleType>(enum_t_value));
}
bool NativeFileSystemHandleData_HandleType_Parse(
    const std::string& name, NativeFileSystemHandleData_HandleType* value);
// ===================================================================

class NativeFileData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.NativeFileData) */ {
 public:
  NativeFileData();
  virtual ~NativeFileData();

  NativeFileData(const NativeFileData& from);
  NativeFileData(NativeFileData&& from) noexcept
    : NativeFileData() {
    *this = ::std::move(from);
  }

  inline NativeFileData& operator=(const NativeFileData& from) {
    CopyFrom(from);
    return *this;
  }
  inline NativeFileData& operator=(NativeFileData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const NativeFileData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NativeFileData* internal_default_instance() {
    return reinterpret_cast<const NativeFileData*>(
               &_NativeFileData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NativeFileData& a, NativeFileData& b) {
    a.Swap(&b);
  }
  inline void Swap(NativeFileData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NativeFileData* New() const final {
    return CreateMaybeMessage<NativeFileData>(nullptr);
  }

  NativeFileData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NativeFileData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NativeFileData& from);
  void MergeFrom(const NativeFileData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NativeFileData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.NativeFileData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRootPathFieldNumber = 1,
    kRelativePathFieldNumber = 2,
  };
  // required bytes root_path = 1;
  bool has_root_path() const;
  void clear_root_path();
  const std::string& root_path() const;
  void set_root_path(const std::string& value);
  void set_root_path(std::string&& value);
  void set_root_path(const char* value);
  void set_root_path(const void* value, size_t size);
  std::string* mutable_root_path();
  std::string* release_root_path();
  void set_allocated_root_path(std::string* root_path);

  // required bytes relative_path = 2;
  bool has_relative_path() const;
  void clear_relative_path();
  const std::string& relative_path() const;
  void set_relative_path(const std::string& value);
  void set_relative_path(std::string&& value);
  void set_relative_path(const char* value);
  void set_relative_path(const void* value, size_t size);
  std::string* mutable_relative_path();
  std::string* release_relative_path();
  void set_allocated_relative_path(std::string* relative_path);

  // @@protoc_insertion_point(class_scope:content.NativeFileData)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relative_path_;
  friend struct ::TableStruct_native_5ffile_5fsystem_2eproto;
};
// -------------------------------------------------------------------

class SandboxedFileData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.SandboxedFileData) */ {
 public:
  SandboxedFileData();
  virtual ~SandboxedFileData();

  SandboxedFileData(const SandboxedFileData& from);
  SandboxedFileData(SandboxedFileData&& from) noexcept
    : SandboxedFileData() {
    *this = ::std::move(from);
  }

  inline SandboxedFileData& operator=(const SandboxedFileData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SandboxedFileData& operator=(SandboxedFileData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SandboxedFileData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SandboxedFileData* internal_default_instance() {
    return reinterpret_cast<const SandboxedFileData*>(
               &_SandboxedFileData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SandboxedFileData& a, SandboxedFileData& b) {
    a.Swap(&b);
  }
  inline void Swap(SandboxedFileData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SandboxedFileData* New() const final {
    return CreateMaybeMessage<SandboxedFileData>(nullptr);
  }

  SandboxedFileData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SandboxedFileData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SandboxedFileData& from);
  void MergeFrom(const SandboxedFileData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SandboxedFileData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.SandboxedFileData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtualPathFieldNumber = 1,
  };
  // required bytes virtual_path = 1;
  bool has_virtual_path() const;
  void clear_virtual_path();
  const std::string& virtual_path() const;
  void set_virtual_path(const std::string& value);
  void set_virtual_path(std::string&& value);
  void set_virtual_path(const char* value);
  void set_virtual_path(const void* value, size_t size);
  std::string* mutable_virtual_path();
  std::string* release_virtual_path();
  void set_allocated_virtual_path(std::string* virtual_path);

  // @@protoc_insertion_point(class_scope:content.SandboxedFileData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr virtual_path_;
  friend struct ::TableStruct_native_5ffile_5fsystem_2eproto;
};
// -------------------------------------------------------------------

class NativeFileSystemHandleData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.NativeFileSystemHandleData) */ {
 public:
  NativeFileSystemHandleData();
  virtual ~NativeFileSystemHandleData();

  NativeFileSystemHandleData(const NativeFileSystemHandleData& from);
  NativeFileSystemHandleData(NativeFileSystemHandleData&& from) noexcept
    : NativeFileSystemHandleData() {
    *this = ::std::move(from);
  }

  inline NativeFileSystemHandleData& operator=(const NativeFileSystemHandleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline NativeFileSystemHandleData& operator=(NativeFileSystemHandleData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const NativeFileSystemHandleData& default_instance();

  enum DataCase {
    kSandboxed = 2,
    kNative = 3,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NativeFileSystemHandleData* internal_default_instance() {
    return reinterpret_cast<const NativeFileSystemHandleData*>(
               &_NativeFileSystemHandleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NativeFileSystemHandleData& a, NativeFileSystemHandleData& b) {
    a.Swap(&b);
  }
  inline void Swap(NativeFileSystemHandleData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NativeFileSystemHandleData* New() const final {
    return CreateMaybeMessage<NativeFileSystemHandleData>(nullptr);
  }

  NativeFileSystemHandleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NativeFileSystemHandleData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NativeFileSystemHandleData& from);
  void MergeFrom(const NativeFileSystemHandleData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NativeFileSystemHandleData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.NativeFileSystemHandleData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef NativeFileSystemHandleData_HandleType HandleType;
  static constexpr HandleType kFile =
    NativeFileSystemHandleData_HandleType_kFile;
  static constexpr HandleType kDirectory =
    NativeFileSystemHandleData_HandleType_kDirectory;
  static inline bool HandleType_IsValid(int value) {
    return NativeFileSystemHandleData_HandleType_IsValid(value);
  }
  static constexpr HandleType HandleType_MIN =
    NativeFileSystemHandleData_HandleType_HandleType_MIN;
  static constexpr HandleType HandleType_MAX =
    NativeFileSystemHandleData_HandleType_HandleType_MAX;
  static constexpr int HandleType_ARRAYSIZE =
    NativeFileSystemHandleData_HandleType_HandleType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& HandleType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, HandleType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function HandleType_Name.");
    return NativeFileSystemHandleData_HandleType_Name(enum_t_value);
  }
  static inline bool HandleType_Parse(const std::string& name,
      HandleType* value) {
    return NativeFileSystemHandleData_HandleType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHandleTypeFieldNumber = 1,
    kSandboxedFieldNumber = 2,
    kNativeFieldNumber = 3,
  };
  // required .content.NativeFileSystemHandleData.HandleType handle_type = 1;
  bool has_handle_type() const;
  void clear_handle_type();
  ::content::NativeFileSystemHandleData_HandleType handle_type() const;
  void set_handle_type(::content::NativeFileSystemHandleData_HandleType value);

  // optional .content.SandboxedFileData sandboxed = 2;
  bool has_sandboxed() const;
  void clear_sandboxed();
  const ::content::SandboxedFileData& sandboxed() const;
  ::content::SandboxedFileData* release_sandboxed();
  ::content::SandboxedFileData* mutable_sandboxed();
  void set_allocated_sandboxed(::content::SandboxedFileData* sandboxed);

  // optional .content.NativeFileData native = 3;
  bool has_native() const;
  void clear_native();
  const ::content::NativeFileData& native() const;
  ::content::NativeFileData* release_native();
  ::content::NativeFileData* mutable_native();
  void set_allocated_native(::content::NativeFileData* native);

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:content.NativeFileSystemHandleData)
 private:
  class _Internal;
  void set_has_sandboxed();
  void set_has_native();

  inline bool has_data() const;
  inline void clear_has_data();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int handle_type_;
  union DataUnion {
    DataUnion() {}
    ::content::SandboxedFileData* sandboxed_;
    ::content::NativeFileData* native_;
  } data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_native_5ffile_5fsystem_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NativeFileData

// required bytes root_path = 1;
inline bool NativeFileData::has_root_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NativeFileData::clear_root_path() {
  root_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NativeFileData::root_path() const {
  // @@protoc_insertion_point(field_get:content.NativeFileData.root_path)
  return root_path_.GetNoArena();
}
inline void NativeFileData::set_root_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  root_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.NativeFileData.root_path)
}
inline void NativeFileData::set_root_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  root_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.NativeFileData.root_path)
}
inline void NativeFileData::set_root_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  root_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.NativeFileData.root_path)
}
inline void NativeFileData::set_root_path(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  root_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.NativeFileData.root_path)
}
inline std::string* NativeFileData::mutable_root_path() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:content.NativeFileData.root_path)
  return root_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NativeFileData::release_root_path() {
  // @@protoc_insertion_point(field_release:content.NativeFileData.root_path)
  if (!has_root_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return root_path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NativeFileData::set_allocated_root_path(std::string* root_path) {
  if (root_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  root_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), root_path);
  // @@protoc_insertion_point(field_set_allocated:content.NativeFileData.root_path)
}

// required bytes relative_path = 2;
inline bool NativeFileData::has_relative_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NativeFileData::clear_relative_path() {
  relative_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NativeFileData::relative_path() const {
  // @@protoc_insertion_point(field_get:content.NativeFileData.relative_path)
  return relative_path_.GetNoArena();
}
inline void NativeFileData::set_relative_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  relative_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.NativeFileData.relative_path)
}
inline void NativeFileData::set_relative_path(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  relative_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.NativeFileData.relative_path)
}
inline void NativeFileData::set_relative_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  relative_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.NativeFileData.relative_path)
}
inline void NativeFileData::set_relative_path(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  relative_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.NativeFileData.relative_path)
}
inline std::string* NativeFileData::mutable_relative_path() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:content.NativeFileData.relative_path)
  return relative_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NativeFileData::release_relative_path() {
  // @@protoc_insertion_point(field_release:content.NativeFileData.relative_path)
  if (!has_relative_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return relative_path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NativeFileData::set_allocated_relative_path(std::string* relative_path) {
  if (relative_path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  relative_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), relative_path);
  // @@protoc_insertion_point(field_set_allocated:content.NativeFileData.relative_path)
}

// -------------------------------------------------------------------

// SandboxedFileData

// required bytes virtual_path = 1;
inline bool SandboxedFileData::has_virtual_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SandboxedFileData::clear_virtual_path() {
  virtual_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SandboxedFileData::virtual_path() const {
  // @@protoc_insertion_point(field_get:content.SandboxedFileData.virtual_path)
  return virtual_path_.GetNoArena();
}
inline void SandboxedFileData::set_virtual_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  virtual_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:content.SandboxedFileData.virtual_path)
}
inline void SandboxedFileData::set_virtual_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  virtual_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:content.SandboxedFileData.virtual_path)
}
inline void SandboxedFileData::set_virtual_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  virtual_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:content.SandboxedFileData.virtual_path)
}
inline void SandboxedFileData::set_virtual_path(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  virtual_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:content.SandboxedFileData.virtual_path)
}
inline std::string* SandboxedFileData::mutable_virtual_path() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:content.SandboxedFileData.virtual_path)
  return virtual_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SandboxedFileData::release_virtual_path() {
  // @@protoc_insertion_point(field_release:content.SandboxedFileData.virtual_path)
  if (!has_virtual_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return virtual_path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SandboxedFileData::set_allocated_virtual_path(std::string* virtual_path) {
  if (virtual_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  virtual_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), virtual_path);
  // @@protoc_insertion_point(field_set_allocated:content.SandboxedFileData.virtual_path)
}

// -------------------------------------------------------------------

// NativeFileSystemHandleData

// required .content.NativeFileSystemHandleData.HandleType handle_type = 1;
inline bool NativeFileSystemHandleData::has_handle_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NativeFileSystemHandleData::clear_handle_type() {
  handle_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::content::NativeFileSystemHandleData_HandleType NativeFileSystemHandleData::handle_type() const {
  // @@protoc_insertion_point(field_get:content.NativeFileSystemHandleData.handle_type)
  return static_cast< ::content::NativeFileSystemHandleData_HandleType >(handle_type_);
}
inline void NativeFileSystemHandleData::set_handle_type(::content::NativeFileSystemHandleData_HandleType value) {
  assert(::content::NativeFileSystemHandleData_HandleType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  handle_type_ = value;
  // @@protoc_insertion_point(field_set:content.NativeFileSystemHandleData.handle_type)
}

// optional .content.SandboxedFileData sandboxed = 2;
inline bool NativeFileSystemHandleData::has_sandboxed() const {
  return data_case() == kSandboxed;
}
inline void NativeFileSystemHandleData::set_has_sandboxed() {
  _oneof_case_[0] = kSandboxed;
}
inline void NativeFileSystemHandleData::clear_sandboxed() {
  if (has_sandboxed()) {
    delete data_.sandboxed_;
    clear_has_data();
  }
}
inline ::content::SandboxedFileData* NativeFileSystemHandleData::release_sandboxed() {
  // @@protoc_insertion_point(field_release:content.NativeFileSystemHandleData.sandboxed)
  if (has_sandboxed()) {
    clear_has_data();
      ::content::SandboxedFileData* temp = data_.sandboxed_;
    data_.sandboxed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::content::SandboxedFileData& NativeFileSystemHandleData::sandboxed() const {
  // @@protoc_insertion_point(field_get:content.NativeFileSystemHandleData.sandboxed)
  return has_sandboxed()
      ? *data_.sandboxed_
      : *reinterpret_cast< ::content::SandboxedFileData*>(&::content::_SandboxedFileData_default_instance_);
}
inline ::content::SandboxedFileData* NativeFileSystemHandleData::mutable_sandboxed() {
  if (!has_sandboxed()) {
    clear_data();
    set_has_sandboxed();
    data_.sandboxed_ = CreateMaybeMessage< ::content::SandboxedFileData >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:content.NativeFileSystemHandleData.sandboxed)
  return data_.sandboxed_;
}

// optional .content.NativeFileData native = 3;
inline bool NativeFileSystemHandleData::has_native() const {
  return data_case() == kNative;
}
inline void NativeFileSystemHandleData::set_has_native() {
  _oneof_case_[0] = kNative;
}
inline void NativeFileSystemHandleData::clear_native() {
  if (has_native()) {
    delete data_.native_;
    clear_has_data();
  }
}
inline ::content::NativeFileData* NativeFileSystemHandleData::release_native() {
  // @@protoc_insertion_point(field_release:content.NativeFileSystemHandleData.native)
  if (has_native()) {
    clear_has_data();
      ::content::NativeFileData* temp = data_.native_;
    data_.native_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::content::NativeFileData& NativeFileSystemHandleData::native() const {
  // @@protoc_insertion_point(field_get:content.NativeFileSystemHandleData.native)
  return has_native()
      ? *data_.native_
      : *reinterpret_cast< ::content::NativeFileData*>(&::content::_NativeFileData_default_instance_);
}
inline ::content::NativeFileData* NativeFileSystemHandleData::mutable_native() {
  if (!has_native()) {
    clear_data();
    set_has_native();
    data_.native_ = CreateMaybeMessage< ::content::NativeFileData >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:content.NativeFileSystemHandleData.native)
  return data_.native_;
}

inline bool NativeFileSystemHandleData::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void NativeFileSystemHandleData::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline NativeFileSystemHandleData::DataCase NativeFileSystemHandleData::data_case() const {
  return NativeFileSystemHandleData::DataCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace content

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::content::NativeFileSystemHandleData_HandleType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_native_5ffile_5fsystem_2eproto

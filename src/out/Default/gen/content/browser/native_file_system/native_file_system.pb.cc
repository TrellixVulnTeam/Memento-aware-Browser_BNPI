// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: native_file_system.proto

#include "native_file_system.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_native_5ffile_5fsystem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NativeFileData_native_5ffile_5fsystem_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_native_5ffile_5fsystem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SandboxedFileData_native_5ffile_5fsystem_2eproto;
namespace content {
class NativeFileDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NativeFileData> _instance;
} _NativeFileData_default_instance_;
class SandboxedFileDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SandboxedFileData> _instance;
} _SandboxedFileData_default_instance_;
class NativeFileSystemHandleDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NativeFileSystemHandleData> _instance;
  const ::content::SandboxedFileData* sandboxed_;
  const ::content::NativeFileData* native_;
} _NativeFileSystemHandleData_default_instance_;
}  // namespace content
static void InitDefaultsscc_info_NativeFileData_native_5ffile_5fsystem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::content::_NativeFileData_default_instance_;
    new (ptr) ::content::NativeFileData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::content::NativeFileData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NativeFileData_native_5ffile_5fsystem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NativeFileData_native_5ffile_5fsystem_2eproto}, {}};

static void InitDefaultsscc_info_NativeFileSystemHandleData_native_5ffile_5fsystem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::content::_NativeFileSystemHandleData_default_instance_;
    new (ptr) ::content::NativeFileSystemHandleData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::content::NativeFileSystemHandleData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NativeFileSystemHandleData_native_5ffile_5fsystem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_NativeFileSystemHandleData_native_5ffile_5fsystem_2eproto}, {
      &scc_info_SandboxedFileData_native_5ffile_5fsystem_2eproto.base,
      &scc_info_NativeFileData_native_5ffile_5fsystem_2eproto.base,}};

static void InitDefaultsscc_info_SandboxedFileData_native_5ffile_5fsystem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::content::_SandboxedFileData_default_instance_;
    new (ptr) ::content::SandboxedFileData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::content::SandboxedFileData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SandboxedFileData_native_5ffile_5fsystem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SandboxedFileData_native_5ffile_5fsystem_2eproto}, {}};

namespace content {
bool NativeFileSystemHandleData_HandleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NativeFileSystemHandleData_HandleType_strings[2] = {};

static const char NativeFileSystemHandleData_HandleType_names[] =
  "kDirectory"
  "kFile";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry NativeFileSystemHandleData_HandleType_entries[] = {
  { {NativeFileSystemHandleData_HandleType_names + 0, 10}, 1 },
  { {NativeFileSystemHandleData_HandleType_names + 10, 5}, 0 },
};

static const int NativeFileSystemHandleData_HandleType_entries_by_number[] = {
  1, // 0 -> kFile
  0, // 1 -> kDirectory
};

const std::string& NativeFileSystemHandleData_HandleType_Name(
    NativeFileSystemHandleData_HandleType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          NativeFileSystemHandleData_HandleType_entries,
          NativeFileSystemHandleData_HandleType_entries_by_number,
          2, NativeFileSystemHandleData_HandleType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      NativeFileSystemHandleData_HandleType_entries,
      NativeFileSystemHandleData_HandleType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     NativeFileSystemHandleData_HandleType_strings[idx].get();
}
bool NativeFileSystemHandleData_HandleType_Parse(
    const std::string& name, NativeFileSystemHandleData_HandleType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      NativeFileSystemHandleData_HandleType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<NativeFileSystemHandleData_HandleType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NativeFileSystemHandleData_HandleType NativeFileSystemHandleData::kFile;
constexpr NativeFileSystemHandleData_HandleType NativeFileSystemHandleData::kDirectory;
constexpr NativeFileSystemHandleData_HandleType NativeFileSystemHandleData::HandleType_MIN;
constexpr NativeFileSystemHandleData_HandleType NativeFileSystemHandleData::HandleType_MAX;
constexpr int NativeFileSystemHandleData::HandleType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void NativeFileData::InitAsDefaultInstance() {
}
class NativeFileData::_Internal {
 public:
  using HasBits = decltype(std::declval<NativeFileData>()._has_bits_);
  static void set_has_root_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_relative_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

NativeFileData::NativeFileData()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.NativeFileData)
}
NativeFileData::NativeFileData(const NativeFileData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  root_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_root_path()) {
    root_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.root_path_);
  }
  relative_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_relative_path()) {
    relative_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.relative_path_);
  }
  // @@protoc_insertion_point(copy_constructor:content.NativeFileData)
}

void NativeFileData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NativeFileData_native_5ffile_5fsystem_2eproto.base);
  root_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  relative_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NativeFileData::~NativeFileData() {
  // @@protoc_insertion_point(destructor:content.NativeFileData)
  SharedDtor();
}

void NativeFileData::SharedDtor() {
  root_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  relative_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NativeFileData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NativeFileData& NativeFileData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NativeFileData_native_5ffile_5fsystem_2eproto.base);
  return *internal_default_instance();
}


void NativeFileData::Clear() {
// @@protoc_insertion_point(message_clear_start:content.NativeFileData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      root_path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      relative_path_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NativeFileData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes root_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_root_path(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes relative_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_relative_path(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NativeFileData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:content.NativeFileData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes root_path = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_root_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes relative_path = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_relative_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.NativeFileData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.NativeFileData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NativeFileData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.NativeFileData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes root_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->root_path(), output);
  }

  // required bytes relative_path = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->relative_path(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:content.NativeFileData)
}

size_t NativeFileData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:content.NativeFileData)
  size_t total_size = 0;

  if (has_root_path()) {
    // required bytes root_path = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->root_path());
  }

  if (has_relative_path()) {
    // required bytes relative_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->relative_path());
  }

  return total_size;
}
size_t NativeFileData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.NativeFileData)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes root_path = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->root_path());

    // required bytes relative_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->relative_path());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NativeFileData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NativeFileData*>(
      &from));
}

void NativeFileData::MergeFrom(const NativeFileData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.NativeFileData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      root_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.root_path_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      relative_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.relative_path_);
    }
  }
}

void NativeFileData::CopyFrom(const NativeFileData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.NativeFileData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeFileData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void NativeFileData::InternalSwap(NativeFileData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  root_path_.Swap(&other->root_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  relative_path_.Swap(&other->relative_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string NativeFileData::GetTypeName() const {
  return "content.NativeFileData";
}


// ===================================================================

void SandboxedFileData::InitAsDefaultInstance() {
}
class SandboxedFileData::_Internal {
 public:
  using HasBits = decltype(std::declval<SandboxedFileData>()._has_bits_);
  static void set_has_virtual_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SandboxedFileData::SandboxedFileData()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.SandboxedFileData)
}
SandboxedFileData::SandboxedFileData(const SandboxedFileData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  virtual_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_virtual_path()) {
    virtual_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.virtual_path_);
  }
  // @@protoc_insertion_point(copy_constructor:content.SandboxedFileData)
}

void SandboxedFileData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SandboxedFileData_native_5ffile_5fsystem_2eproto.base);
  virtual_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SandboxedFileData::~SandboxedFileData() {
  // @@protoc_insertion_point(destructor:content.SandboxedFileData)
  SharedDtor();
}

void SandboxedFileData::SharedDtor() {
  virtual_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SandboxedFileData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SandboxedFileData& SandboxedFileData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SandboxedFileData_native_5ffile_5fsystem_2eproto.base);
  return *internal_default_instance();
}


void SandboxedFileData::Clear() {
// @@protoc_insertion_point(message_clear_start:content.SandboxedFileData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    virtual_path_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SandboxedFileData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bytes virtual_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_virtual_path(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SandboxedFileData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:content.SandboxedFileData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes virtual_path = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_virtual_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.SandboxedFileData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.SandboxedFileData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SandboxedFileData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.SandboxedFileData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes virtual_path = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->virtual_path(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:content.SandboxedFileData)
}

size_t SandboxedFileData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.SandboxedFileData)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required bytes virtual_path = 1;
  if (has_virtual_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->virtual_path());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SandboxedFileData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SandboxedFileData*>(
      &from));
}

void SandboxedFileData::MergeFrom(const SandboxedFileData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.SandboxedFileData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_virtual_path()) {
    _has_bits_[0] |= 0x00000001u;
    virtual_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.virtual_path_);
  }
}

void SandboxedFileData::CopyFrom(const SandboxedFileData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.SandboxedFileData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SandboxedFileData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SandboxedFileData::InternalSwap(SandboxedFileData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  virtual_path_.Swap(&other->virtual_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string SandboxedFileData::GetTypeName() const {
  return "content.SandboxedFileData";
}


// ===================================================================

void NativeFileSystemHandleData::InitAsDefaultInstance() {
}
class NativeFileSystemHandleData::_Internal {
 public:
  using HasBits = decltype(std::declval<NativeFileSystemHandleData>()._has_bits_);
  static void set_has_handle_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::content::SandboxedFileData& sandboxed(const NativeFileSystemHandleData* msg);
  static const ::content::NativeFileData& native(const NativeFileSystemHandleData* msg);
};

const ::content::SandboxedFileData&
NativeFileSystemHandleData::_Internal::sandboxed(const NativeFileSystemHandleData* msg) {
  return *msg->data_.sandboxed_;
}
const ::content::NativeFileData&
NativeFileSystemHandleData::_Internal::native(const NativeFileSystemHandleData* msg) {
  return *msg->data_.native_;
}
void NativeFileSystemHandleData::set_allocated_sandboxed(::content::SandboxedFileData* sandboxed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (sandboxed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sandboxed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sandboxed, submessage_arena);
    }
    set_has_sandboxed();
    data_.sandboxed_ = sandboxed;
  }
  // @@protoc_insertion_point(field_set_allocated:content.NativeFileSystemHandleData.sandboxed)
}
void NativeFileSystemHandleData::set_allocated_native(::content::NativeFileData* native) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_data();
  if (native) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      native = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, native, submessage_arena);
    }
    set_has_native();
    data_.native_ = native;
  }
  // @@protoc_insertion_point(field_set_allocated:content.NativeFileSystemHandleData.native)
}
NativeFileSystemHandleData::NativeFileSystemHandleData()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:content.NativeFileSystemHandleData)
}
NativeFileSystemHandleData::NativeFileSystemHandleData(const NativeFileSystemHandleData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  handle_type_ = from.handle_type_;
  clear_has_data();
  switch (from.data_case()) {
    case kSandboxed: {
      mutable_sandboxed()->::content::SandboxedFileData::MergeFrom(from.sandboxed());
      break;
    }
    case kNative: {
      mutable_native()->::content::NativeFileData::MergeFrom(from.native());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:content.NativeFileSystemHandleData)
}

void NativeFileSystemHandleData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NativeFileSystemHandleData_native_5ffile_5fsystem_2eproto.base);
  handle_type_ = 0;
  clear_has_data();
}

NativeFileSystemHandleData::~NativeFileSystemHandleData() {
  // @@protoc_insertion_point(destructor:content.NativeFileSystemHandleData)
  SharedDtor();
}

void NativeFileSystemHandleData::SharedDtor() {
  if (has_data()) {
    clear_data();
  }
}

void NativeFileSystemHandleData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NativeFileSystemHandleData& NativeFileSystemHandleData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NativeFileSystemHandleData_native_5ffile_5fsystem_2eproto.base);
  return *internal_default_instance();
}


void NativeFileSystemHandleData::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:content.NativeFileSystemHandleData)
  switch (data_case()) {
    case kSandboxed: {
      delete data_.sandboxed_;
      break;
    }
    case kNative: {
      delete data_.native_;
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void NativeFileSystemHandleData::Clear() {
// @@protoc_insertion_point(message_clear_start:content.NativeFileSystemHandleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  handle_type_ = 0;
  clear_data();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NativeFileSystemHandleData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .content.NativeFileSystemHandleData.HandleType handle_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::content::NativeFileSystemHandleData_HandleType_IsValid(val))) {
            set_handle_type(static_cast<::content::NativeFileSystemHandleData_HandleType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .content.SandboxedFileData sandboxed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_sandboxed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .content.NativeFileData native = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_native(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NativeFileSystemHandleData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:content.NativeFileSystemHandleData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .content.NativeFileSystemHandleData.HandleType handle_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::content::NativeFileSystemHandleData_HandleType_IsValid(value)) {
            set_handle_type(static_cast< ::content::NativeFileSystemHandleData_HandleType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .content.SandboxedFileData sandboxed = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sandboxed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .content.NativeFileData native = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_native()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:content.NativeFileSystemHandleData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:content.NativeFileSystemHandleData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NativeFileSystemHandleData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:content.NativeFileSystemHandleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .content.NativeFileSystemHandleData.HandleType handle_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->handle_type(), output);
  }

  switch (data_case()) {
    case kSandboxed:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        2, _Internal::sandboxed(this), output);
      break;
    case kNative:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        3, _Internal::native(this), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:content.NativeFileSystemHandleData)
}

size_t NativeFileSystemHandleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.NativeFileSystemHandleData)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required .content.NativeFileSystemHandleData.HandleType handle_type = 1;
  if (has_handle_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->handle_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // optional .content.SandboxedFileData sandboxed = 2;
    case kSandboxed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.sandboxed_);
      break;
    }
    // optional .content.NativeFileData native = 3;
    case kNative: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.native_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NativeFileSystemHandleData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NativeFileSystemHandleData*>(
      &from));
}

void NativeFileSystemHandleData::MergeFrom(const NativeFileSystemHandleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.NativeFileSystemHandleData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_handle_type()) {
    set_handle_type(from.handle_type());
  }
  switch (from.data_case()) {
    case kSandboxed: {
      mutable_sandboxed()->::content::SandboxedFileData::MergeFrom(from.sandboxed());
      break;
    }
    case kNative: {
      mutable_native()->::content::NativeFileData::MergeFrom(from.native());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void NativeFileSystemHandleData::CopyFrom(const NativeFileSystemHandleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.NativeFileSystemHandleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NativeFileSystemHandleData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  switch (data_case()) {
    case kSandboxed: {
      if (has_sandboxed()) {
        if (!this->sandboxed().IsInitialized()) return false;
      }
      break;
    }
    case kNative: {
      if (has_native()) {
        if (!this->native().IsInitialized()) return false;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return true;
}

void NativeFileSystemHandleData::InternalSwap(NativeFileSystemHandleData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(handle_type_, other->handle_type_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string NativeFileSystemHandleData::GetTypeName() const {
  return "content.NativeFileSystemHandleData";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::content::NativeFileData* Arena::CreateMaybeMessage< ::content::NativeFileData >(Arena* arena) {
  return Arena::CreateInternal< ::content::NativeFileData >(arena);
}
template<> PROTOBUF_NOINLINE ::content::SandboxedFileData* Arena::CreateMaybeMessage< ::content::SandboxedFileData >(Arena* arena) {
  return Arena::CreateInternal< ::content::SandboxedFileData >(arena);
}
template<> PROTOBUF_NOINLINE ::content::NativeFileSystemHandleData* Arena::CreateMaybeMessage< ::content::NativeFileSystemHandleData >(Arena* arena) {
  return Arena::CreateInternal< ::content::NativeFileSystemHandleData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channel_common.proto

#include "channel_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace ipc {
namespace invalidation {
class ChannelMessageEncodingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelMessageEncoding> _instance;
} _ChannelMessageEncoding_default_instance_;
class NetworkEndpointIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkEndpointId> _instance;
} _NetworkEndpointId_default_instance_;
}  // namespace invalidation
}  // namespace ipc
static void InitDefaultsscc_info_ChannelMessageEncoding_channel_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipc::invalidation::_ChannelMessageEncoding_default_instance_;
    new (ptr) ::ipc::invalidation::ChannelMessageEncoding();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipc::invalidation::ChannelMessageEncoding::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelMessageEncoding_channel_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ChannelMessageEncoding_channel_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_NetworkEndpointId_channel_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ipc::invalidation::_NetworkEndpointId_default_instance_;
    new (ptr) ::ipc::invalidation::NetworkEndpointId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ipc::invalidation::NetworkEndpointId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkEndpointId_channel_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NetworkEndpointId_channel_5fcommon_2eproto}, {}};

namespace ipc {
namespace invalidation {
bool ChannelMessageEncoding_MessageEncoding_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChannelMessageEncoding_MessageEncoding_strings[2] = {};

static const char ChannelMessageEncoding_MessageEncoding_names[] =
  "PROTOBUF_BINARY_FORMAT"
  "PROTOBUF_JSON_FORMAT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChannelMessageEncoding_MessageEncoding_entries[] = {
  { {ChannelMessageEncoding_MessageEncoding_names + 0, 22}, 1 },
  { {ChannelMessageEncoding_MessageEncoding_names + 22, 20}, 2 },
};

static const int ChannelMessageEncoding_MessageEncoding_entries_by_number[] = {
  0, // 1 -> PROTOBUF_BINARY_FORMAT
  1, // 2 -> PROTOBUF_JSON_FORMAT
};

const std::string& ChannelMessageEncoding_MessageEncoding_Name(
    ChannelMessageEncoding_MessageEncoding value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChannelMessageEncoding_MessageEncoding_entries,
          ChannelMessageEncoding_MessageEncoding_entries_by_number,
          2, ChannelMessageEncoding_MessageEncoding_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChannelMessageEncoding_MessageEncoding_entries,
      ChannelMessageEncoding_MessageEncoding_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChannelMessageEncoding_MessageEncoding_strings[idx].get();
}
bool ChannelMessageEncoding_MessageEncoding_Parse(
    const std::string& name, ChannelMessageEncoding_MessageEncoding* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChannelMessageEncoding_MessageEncoding_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<ChannelMessageEncoding_MessageEncoding>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChannelMessageEncoding_MessageEncoding ChannelMessageEncoding::PROTOBUF_BINARY_FORMAT;
constexpr ChannelMessageEncoding_MessageEncoding ChannelMessageEncoding::PROTOBUF_JSON_FORMAT;
constexpr ChannelMessageEncoding_MessageEncoding ChannelMessageEncoding::MessageEncoding_MIN;
constexpr ChannelMessageEncoding_MessageEncoding ChannelMessageEncoding::MessageEncoding_MAX;
constexpr int ChannelMessageEncoding::MessageEncoding_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool NetworkEndpointId_NetworkAddress_IsValid(int value) {
  switch (value) {
    case 1:
    case 113:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NetworkEndpointId_NetworkAddress_strings[2] = {};

static const char NetworkEndpointId_NetworkAddress_names[] =
  "ANDROID"
  "TEST";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry NetworkEndpointId_NetworkAddress_entries[] = {
  { {NetworkEndpointId_NetworkAddress_names + 0, 7}, 113 },
  { {NetworkEndpointId_NetworkAddress_names + 7, 4}, 1 },
};

static const int NetworkEndpointId_NetworkAddress_entries_by_number[] = {
  1, // 1 -> TEST
  0, // 113 -> ANDROID
};

const std::string& NetworkEndpointId_NetworkAddress_Name(
    NetworkEndpointId_NetworkAddress value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          NetworkEndpointId_NetworkAddress_entries,
          NetworkEndpointId_NetworkAddress_entries_by_number,
          2, NetworkEndpointId_NetworkAddress_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      NetworkEndpointId_NetworkAddress_entries,
      NetworkEndpointId_NetworkAddress_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     NetworkEndpointId_NetworkAddress_strings[idx].get();
}
bool NetworkEndpointId_NetworkAddress_Parse(
    const std::string& name, NetworkEndpointId_NetworkAddress* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      NetworkEndpointId_NetworkAddress_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<NetworkEndpointId_NetworkAddress>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NetworkEndpointId_NetworkAddress NetworkEndpointId::TEST;
constexpr NetworkEndpointId_NetworkAddress NetworkEndpointId::ANDROID;
constexpr NetworkEndpointId_NetworkAddress NetworkEndpointId::NetworkAddress_MIN;
constexpr NetworkEndpointId_NetworkAddress NetworkEndpointId::NetworkAddress_MAX;
constexpr int NetworkEndpointId::NetworkAddress_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ChannelMessageEncoding::InitAsDefaultInstance() {
}
class ChannelMessageEncoding::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelMessageEncoding>()._has_bits_);
};

ChannelMessageEncoding::ChannelMessageEncoding()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipc.invalidation.ChannelMessageEncoding)
}
ChannelMessageEncoding::ChannelMessageEncoding(const ChannelMessageEncoding& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ipc.invalidation.ChannelMessageEncoding)
}

void ChannelMessageEncoding::SharedCtor() {
}

ChannelMessageEncoding::~ChannelMessageEncoding() {
  // @@protoc_insertion_point(destructor:ipc.invalidation.ChannelMessageEncoding)
  SharedDtor();
}

void ChannelMessageEncoding::SharedDtor() {
}

void ChannelMessageEncoding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelMessageEncoding& ChannelMessageEncoding::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelMessageEncoding_channel_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void ChannelMessageEncoding::Clear() {
// @@protoc_insertion_point(message_clear_start:ipc.invalidation.ChannelMessageEncoding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChannelMessageEncoding::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChannelMessageEncoding::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ipc.invalidation.ChannelMessageEncoding)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:ipc.invalidation.ChannelMessageEncoding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ipc.invalidation.ChannelMessageEncoding)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChannelMessageEncoding::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ipc.invalidation.ChannelMessageEncoding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ipc.invalidation.ChannelMessageEncoding)
}

size_t ChannelMessageEncoding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipc.invalidation.ChannelMessageEncoding)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelMessageEncoding::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChannelMessageEncoding*>(
      &from));
}

void ChannelMessageEncoding::MergeFrom(const ChannelMessageEncoding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipc.invalidation.ChannelMessageEncoding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ChannelMessageEncoding::CopyFrom(const ChannelMessageEncoding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipc.invalidation.ChannelMessageEncoding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelMessageEncoding::IsInitialized() const {
  return true;
}

void ChannelMessageEncoding::InternalSwap(ChannelMessageEncoding* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

std::string ChannelMessageEncoding::GetTypeName() const {
  return "ipc.invalidation.ChannelMessageEncoding";
}


// ===================================================================

void NetworkEndpointId::InitAsDefaultInstance() {
}
class NetworkEndpointId::_Internal {
 public:
  using HasBits = decltype(std::declval<NetworkEndpointId>()._has_bits_);
  static void set_has_network_address(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_offline(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

NetworkEndpointId::NetworkEndpointId()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ipc.invalidation.NetworkEndpointId)
}
NetworkEndpointId::NetworkEndpointId(const NetworkEndpointId& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_address()) {
    client_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_address_);
  }
  ::memcpy(&is_offline_, &from.is_offline_,
    static_cast<size_t>(reinterpret_cast<char*>(&network_address_) -
    reinterpret_cast<char*>(&is_offline_)) + sizeof(network_address_));
  // @@protoc_insertion_point(copy_constructor:ipc.invalidation.NetworkEndpointId)
}

void NetworkEndpointId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkEndpointId_channel_5fcommon_2eproto.base);
  client_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_offline_ = false;
  network_address_ = 1;
}

NetworkEndpointId::~NetworkEndpointId() {
  // @@protoc_insertion_point(destructor:ipc.invalidation.NetworkEndpointId)
  SharedDtor();
}

void NetworkEndpointId::SharedDtor() {
  client_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NetworkEndpointId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkEndpointId& NetworkEndpointId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkEndpointId_channel_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void NetworkEndpointId::Clear() {
// @@protoc_insertion_point(message_clear_start:ipc.invalidation.NetworkEndpointId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    client_address_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    is_offline_ = false;
    network_address_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NetworkEndpointId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ipc.invalidation.NetworkEndpointId.NetworkAddress network_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ipc::invalidation::NetworkEndpointId_NetworkAddress_IsValid(val))) {
            set_network_address(static_cast<::ipc::invalidation::NetworkEndpointId_NetworkAddress>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes client_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_client_address(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_offline = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_offline(&has_bits);
          is_offline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NetworkEndpointId::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:ipc.invalidation.NetworkEndpointId)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ipc.invalidation.NetworkEndpointId.NetworkAddress network_address = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ipc::invalidation::NetworkEndpointId_NetworkAddress_IsValid(value)) {
            set_network_address(static_cast< ::ipc::invalidation::NetworkEndpointId_NetworkAddress >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes client_address = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_offline = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_is_offline(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_offline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ipc.invalidation.NetworkEndpointId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ipc.invalidation.NetworkEndpointId)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NetworkEndpointId::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ipc.invalidation.NetworkEndpointId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ipc.invalidation.NetworkEndpointId.NetworkAddress network_address = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->network_address(), output);
  }

  // optional bytes client_address = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->client_address(), output);
  }

  // optional bool is_offline = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->is_offline(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:ipc.invalidation.NetworkEndpointId)
}

size_t NetworkEndpointId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ipc.invalidation.NetworkEndpointId)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes client_address = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->client_address());
    }

    // optional bool is_offline = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional .ipc.invalidation.NetworkEndpointId.NetworkAddress network_address = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->network_address());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkEndpointId::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NetworkEndpointId*>(
      &from));
}

void NetworkEndpointId::MergeFrom(const NetworkEndpointId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ipc.invalidation.NetworkEndpointId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      client_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_address_);
    }
    if (cached_has_bits & 0x00000002u) {
      is_offline_ = from.is_offline_;
    }
    if (cached_has_bits & 0x00000004u) {
      network_address_ = from.network_address_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetworkEndpointId::CopyFrom(const NetworkEndpointId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ipc.invalidation.NetworkEndpointId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkEndpointId::IsInitialized() const {
  return true;
}

void NetworkEndpointId::InternalSwap(NetworkEndpointId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  client_address_.Swap(&other->client_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_offline_, other->is_offline_);
  swap(network_address_, other->network_address_);
}

std::string NetworkEndpointId::GetTypeName() const {
  return "ipc.invalidation.NetworkEndpointId";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace invalidation
}  // namespace ipc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ipc::invalidation::ChannelMessageEncoding* Arena::CreateMaybeMessage< ::ipc::invalidation::ChannelMessageEncoding >(Arena* arena) {
  return Arena::CreateInternal< ::ipc::invalidation::ChannelMessageEncoding >(arena);
}
template<> PROTOBUF_NOINLINE ::ipc::invalidation::NetworkEndpointId* Arena::CreateMaybeMessage< ::ipc::invalidation::NetworkEndpointId >(Arena* arena) {
  return Arena::CreateInternal< ::ipc::invalidation::NetworkEndpointId >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: android_channel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_android_5fchannel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_android_5fchannel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "client_protocol.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_android_5fchannel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_android_5fchannel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace ipc {
namespace invalidation {
class AddressedAndroidMessage;
class AddressedAndroidMessageDefaultTypeInternal;
extern AddressedAndroidMessageDefaultTypeInternal _AddressedAndroidMessage_default_instance_;
class AddressedAndroidMessageBatch;
class AddressedAndroidMessageBatchDefaultTypeInternal;
extern AddressedAndroidMessageBatchDefaultTypeInternal _AddressedAndroidMessageBatch_default_instance_;
class EndpointId;
class EndpointIdDefaultTypeInternal;
extern EndpointIdDefaultTypeInternal _EndpointId_default_instance_;
}  // namespace invalidation
}  // namespace ipc
PROTOBUF_NAMESPACE_OPEN
template<> ::ipc::invalidation::AddressedAndroidMessage* Arena::CreateMaybeMessage<::ipc::invalidation::AddressedAndroidMessage>(Arena*);
template<> ::ipc::invalidation::AddressedAndroidMessageBatch* Arena::CreateMaybeMessage<::ipc::invalidation::AddressedAndroidMessageBatch>(Arena*);
template<> ::ipc::invalidation::EndpointId* Arena::CreateMaybeMessage<::ipc::invalidation::EndpointId>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ipc {
namespace invalidation {

enum MajorVersion : int {
  INITIAL = 0,
  BATCH = 1,
  DEFAULT = 0,
  MIN_SUPPORTED = 0,
  MAX_SUPPORTED = 1
};
bool MajorVersion_IsValid(int value);
constexpr MajorVersion MajorVersion_MIN = INITIAL;
constexpr MajorVersion MajorVersion_MAX = BATCH;
constexpr int MajorVersion_ARRAYSIZE = MajorVersion_MAX + 1;

const std::string& MajorVersion_Name(MajorVersion value);
template<typename T>
inline const std::string& MajorVersion_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MajorVersion>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MajorVersion_Name.");
  return MajorVersion_Name(static_cast<MajorVersion>(enum_t_value));
}
bool MajorVersion_Parse(
    const std::string& name, MajorVersion* value);
// ===================================================================

class EndpointId :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ipc.invalidation.EndpointId) */ {
 public:
  EndpointId();
  virtual ~EndpointId();

  EndpointId(const EndpointId& from);
  EndpointId(EndpointId&& from) noexcept
    : EndpointId() {
    *this = ::std::move(from);
  }

  inline EndpointId& operator=(const EndpointId& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndpointId& operator=(EndpointId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const EndpointId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndpointId* internal_default_instance() {
    return reinterpret_cast<const EndpointId*>(
               &_EndpointId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EndpointId& a, EndpointId& b) {
    a.Swap(&b);
  }
  inline void Swap(EndpointId* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EndpointId* New() const final {
    return CreateMaybeMessage<EndpointId>(nullptr);
  }

  EndpointId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndpointId>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EndpointId& from);
  void MergeFrom(const EndpointId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EndpointId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipc.invalidation.EndpointId";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kC2DmRegistrationIdFieldNumber = 2,
    kClientKeyFieldNumber = 3,
    kSenderIdFieldNumber = 4,
    kPackageNameFieldNumber = 6,
    kChannelVersionFieldNumber = 5,
  };
  // optional string c2dm_registration_id = 2;
  bool has_c2dm_registration_id() const;
  void clear_c2dm_registration_id();
  const std::string& c2dm_registration_id() const;
  void set_c2dm_registration_id(const std::string& value);
  void set_c2dm_registration_id(std::string&& value);
  void set_c2dm_registration_id(const char* value);
  void set_c2dm_registration_id(const char* value, size_t size);
  std::string* mutable_c2dm_registration_id();
  std::string* release_c2dm_registration_id();
  void set_allocated_c2dm_registration_id(std::string* c2dm_registration_id);

  // optional string client_key = 3;
  bool has_client_key() const;
  void clear_client_key();
  const std::string& client_key() const;
  void set_client_key(const std::string& value);
  void set_client_key(std::string&& value);
  void set_client_key(const char* value);
  void set_client_key(const char* value, size_t size);
  std::string* mutable_client_key();
  std::string* release_client_key();
  void set_allocated_client_key(std::string* client_key);

  // optional string sender_id = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_sender_id() const;
  PROTOBUF_DEPRECATED void clear_sender_id();
  PROTOBUF_DEPRECATED const std::string& sender_id() const;
  PROTOBUF_DEPRECATED void set_sender_id(const std::string& value);
  PROTOBUF_DEPRECATED void set_sender_id(std::string&& value);
  PROTOBUF_DEPRECATED void set_sender_id(const char* value);
  PROTOBUF_DEPRECATED void set_sender_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_sender_id();
  PROTOBUF_DEPRECATED std::string* release_sender_id();
  PROTOBUF_DEPRECATED void set_allocated_sender_id(std::string* sender_id);

  // optional string package_name = 6;
  bool has_package_name() const;
  void clear_package_name();
  const std::string& package_name() const;
  void set_package_name(const std::string& value);
  void set_package_name(std::string&& value);
  void set_package_name(const char* value);
  void set_package_name(const char* value, size_t size);
  std::string* mutable_package_name();
  std::string* release_package_name();
  void set_allocated_package_name(std::string* package_name);

  // optional .ipc.invalidation.Version channel_version = 5;
  bool has_channel_version() const;
  void clear_channel_version();
  const ::ipc::invalidation::Version& channel_version() const;
  ::ipc::invalidation::Version* release_channel_version();
  ::ipc::invalidation::Version* mutable_channel_version();
  void set_allocated_channel_version(::ipc::invalidation::Version* channel_version);

  // @@protoc_insertion_point(class_scope:ipc.invalidation.EndpointId)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr c2dm_registration_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr package_name_;
  ::ipc::invalidation::Version* channel_version_;
  friend struct ::TableStruct_android_5fchannel_2eproto;
};
// -------------------------------------------------------------------

class AddressedAndroidMessage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ipc.invalidation.AddressedAndroidMessage) */ {
 public:
  AddressedAndroidMessage();
  virtual ~AddressedAndroidMessage();

  AddressedAndroidMessage(const AddressedAndroidMessage& from);
  AddressedAndroidMessage(AddressedAndroidMessage&& from) noexcept
    : AddressedAndroidMessage() {
    *this = ::std::move(from);
  }

  inline AddressedAndroidMessage& operator=(const AddressedAndroidMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddressedAndroidMessage& operator=(AddressedAndroidMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AddressedAndroidMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressedAndroidMessage* internal_default_instance() {
    return reinterpret_cast<const AddressedAndroidMessage*>(
               &_AddressedAndroidMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddressedAndroidMessage& a, AddressedAndroidMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AddressedAndroidMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddressedAndroidMessage* New() const final {
    return CreateMaybeMessage<AddressedAndroidMessage>(nullptr);
  }

  AddressedAndroidMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddressedAndroidMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AddressedAndroidMessage& from);
  void MergeFrom(const AddressedAndroidMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddressedAndroidMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipc.invalidation.AddressedAndroidMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientKeyFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // optional string client_key = 1;
  bool has_client_key() const;
  void clear_client_key();
  const std::string& client_key() const;
  void set_client_key(const std::string& value);
  void set_client_key(std::string&& value);
  void set_client_key(const char* value);
  void set_client_key(const char* value, size_t size);
  std::string* mutable_client_key();
  std::string* release_client_key();
  void set_allocated_client_key(std::string* client_key);

  // optional bytes message = 2;
  bool has_message() const;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);

  // @@protoc_insertion_point(class_scope:ipc.invalidation.AddressedAndroidMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  friend struct ::TableStruct_android_5fchannel_2eproto;
};
// -------------------------------------------------------------------

class AddressedAndroidMessageBatch :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ipc.invalidation.AddressedAndroidMessageBatch) */ {
 public:
  AddressedAndroidMessageBatch();
  virtual ~AddressedAndroidMessageBatch();

  AddressedAndroidMessageBatch(const AddressedAndroidMessageBatch& from);
  AddressedAndroidMessageBatch(AddressedAndroidMessageBatch&& from) noexcept
    : AddressedAndroidMessageBatch() {
    *this = ::std::move(from);
  }

  inline AddressedAndroidMessageBatch& operator=(const AddressedAndroidMessageBatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddressedAndroidMessageBatch& operator=(AddressedAndroidMessageBatch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AddressedAndroidMessageBatch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddressedAndroidMessageBatch* internal_default_instance() {
    return reinterpret_cast<const AddressedAndroidMessageBatch*>(
               &_AddressedAndroidMessageBatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AddressedAndroidMessageBatch& a, AddressedAndroidMessageBatch& b) {
    a.Swap(&b);
  }
  inline void Swap(AddressedAndroidMessageBatch* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddressedAndroidMessageBatch* New() const final {
    return CreateMaybeMessage<AddressedAndroidMessageBatch>(nullptr);
  }

  AddressedAndroidMessageBatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddressedAndroidMessageBatch>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AddressedAndroidMessageBatch& from);
  void MergeFrom(const AddressedAndroidMessageBatch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddressedAndroidMessageBatch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipc.invalidation.AddressedAndroidMessageBatch";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressedMessageFieldNumber = 1,
  };
  // repeated .ipc.invalidation.AddressedAndroidMessage addressed_message = 1;
  int addressed_message_size() const;
  void clear_addressed_message();
  ::ipc::invalidation::AddressedAndroidMessage* mutable_addressed_message(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipc::invalidation::AddressedAndroidMessage >*
      mutable_addressed_message();
  const ::ipc::invalidation::AddressedAndroidMessage& addressed_message(int index) const;
  ::ipc::invalidation::AddressedAndroidMessage* add_addressed_message();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipc::invalidation::AddressedAndroidMessage >&
      addressed_message() const;

  // @@protoc_insertion_point(class_scope:ipc.invalidation.AddressedAndroidMessageBatch)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipc::invalidation::AddressedAndroidMessage > addressed_message_;
  friend struct ::TableStruct_android_5fchannel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EndpointId

// optional string c2dm_registration_id = 2;
inline bool EndpointId::has_c2dm_registration_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EndpointId::clear_c2dm_registration_id() {
  c2dm_registration_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EndpointId::c2dm_registration_id() const {
  // @@protoc_insertion_point(field_get:ipc.invalidation.EndpointId.c2dm_registration_id)
  return c2dm_registration_id_.GetNoArena();
}
inline void EndpointId::set_c2dm_registration_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  c2dm_registration_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ipc.invalidation.EndpointId.c2dm_registration_id)
}
inline void EndpointId::set_c2dm_registration_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  c2dm_registration_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipc.invalidation.EndpointId.c2dm_registration_id)
}
inline void EndpointId::set_c2dm_registration_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  c2dm_registration_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipc.invalidation.EndpointId.c2dm_registration_id)
}
inline void EndpointId::set_c2dm_registration_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  c2dm_registration_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipc.invalidation.EndpointId.c2dm_registration_id)
}
inline std::string* EndpointId::mutable_c2dm_registration_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:ipc.invalidation.EndpointId.c2dm_registration_id)
  return c2dm_registration_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EndpointId::release_c2dm_registration_id() {
  // @@protoc_insertion_point(field_release:ipc.invalidation.EndpointId.c2dm_registration_id)
  if (!has_c2dm_registration_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return c2dm_registration_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EndpointId::set_allocated_c2dm_registration_id(std::string* c2dm_registration_id) {
  if (c2dm_registration_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  c2dm_registration_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), c2dm_registration_id);
  // @@protoc_insertion_point(field_set_allocated:ipc.invalidation.EndpointId.c2dm_registration_id)
}

// optional string client_key = 3;
inline bool EndpointId::has_client_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EndpointId::clear_client_key() {
  client_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& EndpointId::client_key() const {
  // @@protoc_insertion_point(field_get:ipc.invalidation.EndpointId.client_key)
  return client_key_.GetNoArena();
}
inline void EndpointId::set_client_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  client_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ipc.invalidation.EndpointId.client_key)
}
inline void EndpointId::set_client_key(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  client_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipc.invalidation.EndpointId.client_key)
}
inline void EndpointId::set_client_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  client_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipc.invalidation.EndpointId.client_key)
}
inline void EndpointId::set_client_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  client_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipc.invalidation.EndpointId.client_key)
}
inline std::string* EndpointId::mutable_client_key() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:ipc.invalidation.EndpointId.client_key)
  return client_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EndpointId::release_client_key() {
  // @@protoc_insertion_point(field_release:ipc.invalidation.EndpointId.client_key)
  if (!has_client_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return client_key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EndpointId::set_allocated_client_key(std::string* client_key) {
  if (client_key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  client_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_key);
  // @@protoc_insertion_point(field_set_allocated:ipc.invalidation.EndpointId.client_key)
}

// optional string sender_id = 4 [deprecated = true];
inline bool EndpointId::has_sender_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EndpointId::clear_sender_id() {
  sender_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& EndpointId::sender_id() const {
  // @@protoc_insertion_point(field_get:ipc.invalidation.EndpointId.sender_id)
  return sender_id_.GetNoArena();
}
inline void EndpointId::set_sender_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  sender_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ipc.invalidation.EndpointId.sender_id)
}
inline void EndpointId::set_sender_id(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  sender_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipc.invalidation.EndpointId.sender_id)
}
inline void EndpointId::set_sender_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  sender_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipc.invalidation.EndpointId.sender_id)
}
inline void EndpointId::set_sender_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  sender_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipc.invalidation.EndpointId.sender_id)
}
inline std::string* EndpointId::mutable_sender_id() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:ipc.invalidation.EndpointId.sender_id)
  return sender_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EndpointId::release_sender_id() {
  // @@protoc_insertion_point(field_release:ipc.invalidation.EndpointId.sender_id)
  if (!has_sender_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return sender_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EndpointId::set_allocated_sender_id(std::string* sender_id) {
  if (sender_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sender_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender_id);
  // @@protoc_insertion_point(field_set_allocated:ipc.invalidation.EndpointId.sender_id)
}

// optional .ipc.invalidation.Version channel_version = 5;
inline bool EndpointId::has_channel_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::ipc::invalidation::Version& EndpointId::channel_version() const {
  const ::ipc::invalidation::Version* p = channel_version_;
  // @@protoc_insertion_point(field_get:ipc.invalidation.EndpointId.channel_version)
  return p != nullptr ? *p : *reinterpret_cast<const ::ipc::invalidation::Version*>(
      &::ipc::invalidation::_Version_default_instance_);
}
inline ::ipc::invalidation::Version* EndpointId::release_channel_version() {
  // @@protoc_insertion_point(field_release:ipc.invalidation.EndpointId.channel_version)
  _has_bits_[0] &= ~0x00000010u;
  ::ipc::invalidation::Version* temp = channel_version_;
  channel_version_ = nullptr;
  return temp;
}
inline ::ipc::invalidation::Version* EndpointId::mutable_channel_version() {
  _has_bits_[0] |= 0x00000010u;
  if (channel_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::ipc::invalidation::Version>(GetArenaNoVirtual());
    channel_version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ipc.invalidation.EndpointId.channel_version)
  return channel_version_;
}
inline void EndpointId::set_allocated_channel_version(::ipc::invalidation::Version* channel_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_version_);
  }
  if (channel_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      channel_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_version, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  channel_version_ = channel_version;
  // @@protoc_insertion_point(field_set_allocated:ipc.invalidation.EndpointId.channel_version)
}

// optional string package_name = 6;
inline bool EndpointId::has_package_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EndpointId::clear_package_name() {
  package_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& EndpointId::package_name() const {
  // @@protoc_insertion_point(field_get:ipc.invalidation.EndpointId.package_name)
  return package_name_.GetNoArena();
}
inline void EndpointId::set_package_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ipc.invalidation.EndpointId.package_name)
}
inline void EndpointId::set_package_name(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  package_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipc.invalidation.EndpointId.package_name)
}
inline void EndpointId::set_package_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipc.invalidation.EndpointId.package_name)
}
inline void EndpointId::set_package_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  package_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipc.invalidation.EndpointId.package_name)
}
inline std::string* EndpointId::mutable_package_name() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:ipc.invalidation.EndpointId.package_name)
  return package_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EndpointId::release_package_name() {
  // @@protoc_insertion_point(field_release:ipc.invalidation.EndpointId.package_name)
  if (!has_package_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return package_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EndpointId::set_allocated_package_name(std::string* package_name) {
  if (package_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  package_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), package_name);
  // @@protoc_insertion_point(field_set_allocated:ipc.invalidation.EndpointId.package_name)
}

// -------------------------------------------------------------------

// AddressedAndroidMessage

// optional string client_key = 1;
inline bool AddressedAndroidMessage::has_client_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddressedAndroidMessage::clear_client_key() {
  client_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AddressedAndroidMessage::client_key() const {
  // @@protoc_insertion_point(field_get:ipc.invalidation.AddressedAndroidMessage.client_key)
  return client_key_.GetNoArena();
}
inline void AddressedAndroidMessage::set_client_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  client_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ipc.invalidation.AddressedAndroidMessage.client_key)
}
inline void AddressedAndroidMessage::set_client_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  client_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipc.invalidation.AddressedAndroidMessage.client_key)
}
inline void AddressedAndroidMessage::set_client_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  client_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipc.invalidation.AddressedAndroidMessage.client_key)
}
inline void AddressedAndroidMessage::set_client_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  client_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipc.invalidation.AddressedAndroidMessage.client_key)
}
inline std::string* AddressedAndroidMessage::mutable_client_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:ipc.invalidation.AddressedAndroidMessage.client_key)
  return client_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddressedAndroidMessage::release_client_key() {
  // @@protoc_insertion_point(field_release:ipc.invalidation.AddressedAndroidMessage.client_key)
  if (!has_client_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return client_key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddressedAndroidMessage::set_allocated_client_key(std::string* client_key) {
  if (client_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  client_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_key);
  // @@protoc_insertion_point(field_set_allocated:ipc.invalidation.AddressedAndroidMessage.client_key)
}

// optional bytes message = 2;
inline bool AddressedAndroidMessage::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddressedAndroidMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AddressedAndroidMessage::message() const {
  // @@protoc_insertion_point(field_get:ipc.invalidation.AddressedAndroidMessage.message)
  return message_.GetNoArena();
}
inline void AddressedAndroidMessage::set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ipc.invalidation.AddressedAndroidMessage.message)
}
inline void AddressedAndroidMessage::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipc.invalidation.AddressedAndroidMessage.message)
}
inline void AddressedAndroidMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipc.invalidation.AddressedAndroidMessage.message)
}
inline void AddressedAndroidMessage::set_message(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipc.invalidation.AddressedAndroidMessage.message)
}
inline std::string* AddressedAndroidMessage::mutable_message() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:ipc.invalidation.AddressedAndroidMessage.message)
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddressedAndroidMessage::release_message() {
  // @@protoc_insertion_point(field_release:ipc.invalidation.AddressedAndroidMessage.message)
  if (!has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddressedAndroidMessage::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ipc.invalidation.AddressedAndroidMessage.message)
}

// -------------------------------------------------------------------

// AddressedAndroidMessageBatch

// repeated .ipc.invalidation.AddressedAndroidMessage addressed_message = 1;
inline int AddressedAndroidMessageBatch::addressed_message_size() const {
  return addressed_message_.size();
}
inline void AddressedAndroidMessageBatch::clear_addressed_message() {
  addressed_message_.Clear();
}
inline ::ipc::invalidation::AddressedAndroidMessage* AddressedAndroidMessageBatch::mutable_addressed_message(int index) {
  // @@protoc_insertion_point(field_mutable:ipc.invalidation.AddressedAndroidMessageBatch.addressed_message)
  return addressed_message_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipc::invalidation::AddressedAndroidMessage >*
AddressedAndroidMessageBatch::mutable_addressed_message() {
  // @@protoc_insertion_point(field_mutable_list:ipc.invalidation.AddressedAndroidMessageBatch.addressed_message)
  return &addressed_message_;
}
inline const ::ipc::invalidation::AddressedAndroidMessage& AddressedAndroidMessageBatch::addressed_message(int index) const {
  // @@protoc_insertion_point(field_get:ipc.invalidation.AddressedAndroidMessageBatch.addressed_message)
  return addressed_message_.Get(index);
}
inline ::ipc::invalidation::AddressedAndroidMessage* AddressedAndroidMessageBatch::add_addressed_message() {
  // @@protoc_insertion_point(field_add:ipc.invalidation.AddressedAndroidMessageBatch.addressed_message)
  return addressed_message_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ipc::invalidation::AddressedAndroidMessage >&
AddressedAndroidMessageBatch::addressed_message() const {
  // @@protoc_insertion_point(field_list:ipc.invalidation.AddressedAndroidMessageBatch.addressed_message)
  return addressed_message_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace invalidation
}  // namespace ipc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ipc::invalidation::MajorVersion> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_android_5fchannel_2eproto

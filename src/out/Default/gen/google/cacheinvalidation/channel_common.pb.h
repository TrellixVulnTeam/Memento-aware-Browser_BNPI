// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channel_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_channel_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_channel_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_channel_5fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_channel_5fcommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace ipc {
namespace invalidation {
class ChannelMessageEncoding;
class ChannelMessageEncodingDefaultTypeInternal;
extern ChannelMessageEncodingDefaultTypeInternal _ChannelMessageEncoding_default_instance_;
class NetworkEndpointId;
class NetworkEndpointIdDefaultTypeInternal;
extern NetworkEndpointIdDefaultTypeInternal _NetworkEndpointId_default_instance_;
}  // namespace invalidation
}  // namespace ipc
PROTOBUF_NAMESPACE_OPEN
template<> ::ipc::invalidation::ChannelMessageEncoding* Arena::CreateMaybeMessage<::ipc::invalidation::ChannelMessageEncoding>(Arena*);
template<> ::ipc::invalidation::NetworkEndpointId* Arena::CreateMaybeMessage<::ipc::invalidation::NetworkEndpointId>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ipc {
namespace invalidation {

enum ChannelMessageEncoding_MessageEncoding : int {
  ChannelMessageEncoding_MessageEncoding_PROTOBUF_BINARY_FORMAT = 1,
  ChannelMessageEncoding_MessageEncoding_PROTOBUF_JSON_FORMAT = 2
};
bool ChannelMessageEncoding_MessageEncoding_IsValid(int value);
constexpr ChannelMessageEncoding_MessageEncoding ChannelMessageEncoding_MessageEncoding_MessageEncoding_MIN = ChannelMessageEncoding_MessageEncoding_PROTOBUF_BINARY_FORMAT;
constexpr ChannelMessageEncoding_MessageEncoding ChannelMessageEncoding_MessageEncoding_MessageEncoding_MAX = ChannelMessageEncoding_MessageEncoding_PROTOBUF_JSON_FORMAT;
constexpr int ChannelMessageEncoding_MessageEncoding_MessageEncoding_ARRAYSIZE = ChannelMessageEncoding_MessageEncoding_MessageEncoding_MAX + 1;

const std::string& ChannelMessageEncoding_MessageEncoding_Name(ChannelMessageEncoding_MessageEncoding value);
template<typename T>
inline const std::string& ChannelMessageEncoding_MessageEncoding_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChannelMessageEncoding_MessageEncoding>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChannelMessageEncoding_MessageEncoding_Name.");
  return ChannelMessageEncoding_MessageEncoding_Name(static_cast<ChannelMessageEncoding_MessageEncoding>(enum_t_value));
}
bool ChannelMessageEncoding_MessageEncoding_Parse(
    const std::string& name, ChannelMessageEncoding_MessageEncoding* value);
enum NetworkEndpointId_NetworkAddress : int {
  NetworkEndpointId_NetworkAddress_TEST = 1,
  NetworkEndpointId_NetworkAddress_ANDROID = 113
};
bool NetworkEndpointId_NetworkAddress_IsValid(int value);
constexpr NetworkEndpointId_NetworkAddress NetworkEndpointId_NetworkAddress_NetworkAddress_MIN = NetworkEndpointId_NetworkAddress_TEST;
constexpr NetworkEndpointId_NetworkAddress NetworkEndpointId_NetworkAddress_NetworkAddress_MAX = NetworkEndpointId_NetworkAddress_ANDROID;
constexpr int NetworkEndpointId_NetworkAddress_NetworkAddress_ARRAYSIZE = NetworkEndpointId_NetworkAddress_NetworkAddress_MAX + 1;

const std::string& NetworkEndpointId_NetworkAddress_Name(NetworkEndpointId_NetworkAddress value);
template<typename T>
inline const std::string& NetworkEndpointId_NetworkAddress_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetworkEndpointId_NetworkAddress>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetworkEndpointId_NetworkAddress_Name.");
  return NetworkEndpointId_NetworkAddress_Name(static_cast<NetworkEndpointId_NetworkAddress>(enum_t_value));
}
bool NetworkEndpointId_NetworkAddress_Parse(
    const std::string& name, NetworkEndpointId_NetworkAddress* value);
// ===================================================================

class ChannelMessageEncoding :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ipc.invalidation.ChannelMessageEncoding) */ {
 public:
  ChannelMessageEncoding();
  virtual ~ChannelMessageEncoding();

  ChannelMessageEncoding(const ChannelMessageEncoding& from);
  ChannelMessageEncoding(ChannelMessageEncoding&& from) noexcept
    : ChannelMessageEncoding() {
    *this = ::std::move(from);
  }

  inline ChannelMessageEncoding& operator=(const ChannelMessageEncoding& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelMessageEncoding& operator=(ChannelMessageEncoding&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ChannelMessageEncoding& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelMessageEncoding* internal_default_instance() {
    return reinterpret_cast<const ChannelMessageEncoding*>(
               &_ChannelMessageEncoding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChannelMessageEncoding& a, ChannelMessageEncoding& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelMessageEncoding* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelMessageEncoding* New() const final {
    return CreateMaybeMessage<ChannelMessageEncoding>(nullptr);
  }

  ChannelMessageEncoding* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelMessageEncoding>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ChannelMessageEncoding& from);
  void MergeFrom(const ChannelMessageEncoding& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChannelMessageEncoding* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipc.invalidation.ChannelMessageEncoding";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ChannelMessageEncoding_MessageEncoding MessageEncoding;
  static constexpr MessageEncoding PROTOBUF_BINARY_FORMAT =
    ChannelMessageEncoding_MessageEncoding_PROTOBUF_BINARY_FORMAT;
  static constexpr MessageEncoding PROTOBUF_JSON_FORMAT =
    ChannelMessageEncoding_MessageEncoding_PROTOBUF_JSON_FORMAT;
  static inline bool MessageEncoding_IsValid(int value) {
    return ChannelMessageEncoding_MessageEncoding_IsValid(value);
  }
  static constexpr MessageEncoding MessageEncoding_MIN =
    ChannelMessageEncoding_MessageEncoding_MessageEncoding_MIN;
  static constexpr MessageEncoding MessageEncoding_MAX =
    ChannelMessageEncoding_MessageEncoding_MessageEncoding_MAX;
  static constexpr int MessageEncoding_ARRAYSIZE =
    ChannelMessageEncoding_MessageEncoding_MessageEncoding_ARRAYSIZE;
  template<typename T>
  static inline const std::string& MessageEncoding_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MessageEncoding>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MessageEncoding_Name.");
    return ChannelMessageEncoding_MessageEncoding_Name(enum_t_value);
  }
  static inline bool MessageEncoding_Parse(const std::string& name,
      MessageEncoding* value) {
    return ChannelMessageEncoding_MessageEncoding_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ipc.invalidation.ChannelMessageEncoding)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_channel_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class NetworkEndpointId :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ipc.invalidation.NetworkEndpointId) */ {
 public:
  NetworkEndpointId();
  virtual ~NetworkEndpointId();

  NetworkEndpointId(const NetworkEndpointId& from);
  NetworkEndpointId(NetworkEndpointId&& from) noexcept
    : NetworkEndpointId() {
    *this = ::std::move(from);
  }

  inline NetworkEndpointId& operator=(const NetworkEndpointId& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkEndpointId& operator=(NetworkEndpointId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const NetworkEndpointId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkEndpointId* internal_default_instance() {
    return reinterpret_cast<const NetworkEndpointId*>(
               &_NetworkEndpointId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NetworkEndpointId& a, NetworkEndpointId& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkEndpointId* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkEndpointId* New() const final {
    return CreateMaybeMessage<NetworkEndpointId>(nullptr);
  }

  NetworkEndpointId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkEndpointId>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NetworkEndpointId& from);
  void MergeFrom(const NetworkEndpointId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetworkEndpointId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ipc.invalidation.NetworkEndpointId";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef NetworkEndpointId_NetworkAddress NetworkAddress;
  static constexpr NetworkAddress TEST =
    NetworkEndpointId_NetworkAddress_TEST;
  static constexpr NetworkAddress ANDROID =
    NetworkEndpointId_NetworkAddress_ANDROID;
  static inline bool NetworkAddress_IsValid(int value) {
    return NetworkEndpointId_NetworkAddress_IsValid(value);
  }
  static constexpr NetworkAddress NetworkAddress_MIN =
    NetworkEndpointId_NetworkAddress_NetworkAddress_MIN;
  static constexpr NetworkAddress NetworkAddress_MAX =
    NetworkEndpointId_NetworkAddress_NetworkAddress_MAX;
  static constexpr int NetworkAddress_ARRAYSIZE =
    NetworkEndpointId_NetworkAddress_NetworkAddress_ARRAYSIZE;
  template<typename T>
  static inline const std::string& NetworkAddress_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NetworkAddress>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NetworkAddress_Name.");
    return NetworkEndpointId_NetworkAddress_Name(enum_t_value);
  }
  static inline bool NetworkAddress_Parse(const std::string& name,
      NetworkAddress* value) {
    return NetworkEndpointId_NetworkAddress_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kClientAddressFieldNumber = 2,
    kIsOfflineFieldNumber = 3,
    kNetworkAddressFieldNumber = 1,
  };
  // optional bytes client_address = 2;
  bool has_client_address() const;
  void clear_client_address();
  const std::string& client_address() const;
  void set_client_address(const std::string& value);
  void set_client_address(std::string&& value);
  void set_client_address(const char* value);
  void set_client_address(const void* value, size_t size);
  std::string* mutable_client_address();
  std::string* release_client_address();
  void set_allocated_client_address(std::string* client_address);

  // optional bool is_offline = 3;
  bool has_is_offline() const;
  void clear_is_offline();
  bool is_offline() const;
  void set_is_offline(bool value);

  // optional .ipc.invalidation.NetworkEndpointId.NetworkAddress network_address = 1;
  bool has_network_address() const;
  void clear_network_address();
  ::ipc::invalidation::NetworkEndpointId_NetworkAddress network_address() const;
  void set_network_address(::ipc::invalidation::NetworkEndpointId_NetworkAddress value);

  // @@protoc_insertion_point(class_scope:ipc.invalidation.NetworkEndpointId)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_address_;
  bool is_offline_;
  int network_address_;
  friend struct ::TableStruct_channel_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChannelMessageEncoding

// -------------------------------------------------------------------

// NetworkEndpointId

// optional .ipc.invalidation.NetworkEndpointId.NetworkAddress network_address = 1;
inline bool NetworkEndpointId::has_network_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetworkEndpointId::clear_network_address() {
  network_address_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::ipc::invalidation::NetworkEndpointId_NetworkAddress NetworkEndpointId::network_address() const {
  // @@protoc_insertion_point(field_get:ipc.invalidation.NetworkEndpointId.network_address)
  return static_cast< ::ipc::invalidation::NetworkEndpointId_NetworkAddress >(network_address_);
}
inline void NetworkEndpointId::set_network_address(::ipc::invalidation::NetworkEndpointId_NetworkAddress value) {
  assert(::ipc::invalidation::NetworkEndpointId_NetworkAddress_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  network_address_ = value;
  // @@protoc_insertion_point(field_set:ipc.invalidation.NetworkEndpointId.network_address)
}

// optional bytes client_address = 2;
inline bool NetworkEndpointId::has_client_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetworkEndpointId::clear_client_address() {
  client_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NetworkEndpointId::client_address() const {
  // @@protoc_insertion_point(field_get:ipc.invalidation.NetworkEndpointId.client_address)
  return client_address_.GetNoArena();
}
inline void NetworkEndpointId::set_client_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  client_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ipc.invalidation.NetworkEndpointId.client_address)
}
inline void NetworkEndpointId::set_client_address(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  client_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ipc.invalidation.NetworkEndpointId.client_address)
}
inline void NetworkEndpointId::set_client_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  client_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ipc.invalidation.NetworkEndpointId.client_address)
}
inline void NetworkEndpointId::set_client_address(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  client_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ipc.invalidation.NetworkEndpointId.client_address)
}
inline std::string* NetworkEndpointId::mutable_client_address() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:ipc.invalidation.NetworkEndpointId.client_address)
  return client_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NetworkEndpointId::release_client_address() {
  // @@protoc_insertion_point(field_release:ipc.invalidation.NetworkEndpointId.client_address)
  if (!has_client_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return client_address_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkEndpointId::set_allocated_client_address(std::string* client_address) {
  if (client_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  client_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_address);
  // @@protoc_insertion_point(field_set_allocated:ipc.invalidation.NetworkEndpointId.client_address)
}

// optional bool is_offline = 3;
inline bool NetworkEndpointId::has_is_offline() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetworkEndpointId::clear_is_offline() {
  is_offline_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool NetworkEndpointId::is_offline() const {
  // @@protoc_insertion_point(field_get:ipc.invalidation.NetworkEndpointId.is_offline)
  return is_offline_;
}
inline void NetworkEndpointId::set_is_offline(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_offline_ = value;
  // @@protoc_insertion_point(field_set:ipc.invalidation.NetworkEndpointId.is_offline)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace invalidation
}  // namespace ipc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ipc::invalidation::ChannelMessageEncoding_MessageEncoding> : ::std::true_type {};
template <> struct is_proto_enum< ::ipc::invalidation::NetworkEndpointId_NetworkAddress> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_channel_5fcommon_2eproto

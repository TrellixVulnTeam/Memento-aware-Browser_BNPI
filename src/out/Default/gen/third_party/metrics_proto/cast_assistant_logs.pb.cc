// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cast_assistant_logs.proto

#include "cast_assistant_logs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_cast_5fassistant_5flogs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CastAssistantLogsProto_CastAssistantEventProto_cast_5fassistant_5flogs_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cast_5fassistant_5flogs_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CastAssistantLogsProto_CastAssistantEventProto_Metadata_cast_5fassistant_5flogs_2eproto;
namespace metrics {
class CastAssistantLogsProto_CastAssistantEventProto_MetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CastAssistantLogsProto_CastAssistantEventProto_Metadata> _instance;
} _CastAssistantLogsProto_CastAssistantEventProto_Metadata_default_instance_;
class CastAssistantLogsProto_CastAssistantEventProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CastAssistantLogsProto_CastAssistantEventProto> _instance;
} _CastAssistantLogsProto_CastAssistantEventProto_default_instance_;
class CastAssistantLogsProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CastAssistantLogsProto> _instance;
} _CastAssistantLogsProto_default_instance_;
}  // namespace metrics
static void InitDefaultsscc_info_CastAssistantLogsProto_cast_5fassistant_5flogs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_CastAssistantLogsProto_default_instance_;
    new (ptr) ::metrics::CastAssistantLogsProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::CastAssistantLogsProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CastAssistantLogsProto_cast_5fassistant_5flogs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CastAssistantLogsProto_cast_5fassistant_5flogs_2eproto}, {
      &scc_info_CastAssistantLogsProto_CastAssistantEventProto_cast_5fassistant_5flogs_2eproto.base,}};

static void InitDefaultsscc_info_CastAssistantLogsProto_CastAssistantEventProto_cast_5fassistant_5flogs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_CastAssistantLogsProto_CastAssistantEventProto_default_instance_;
    new (ptr) ::metrics::CastAssistantLogsProto_CastAssistantEventProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::CastAssistantLogsProto_CastAssistantEventProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CastAssistantLogsProto_CastAssistantEventProto_cast_5fassistant_5flogs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CastAssistantLogsProto_CastAssistantEventProto_cast_5fassistant_5flogs_2eproto}, {
      &scc_info_CastAssistantLogsProto_CastAssistantEventProto_Metadata_cast_5fassistant_5flogs_2eproto.base,}};

static void InitDefaultsscc_info_CastAssistantLogsProto_CastAssistantEventProto_Metadata_cast_5fassistant_5flogs_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::metrics::_CastAssistantLogsProto_CastAssistantEventProto_Metadata_default_instance_;
    new (ptr) ::metrics::CastAssistantLogsProto_CastAssistantEventProto_Metadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::metrics::CastAssistantLogsProto_CastAssistantEventProto_Metadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CastAssistantLogsProto_CastAssistantEventProto_Metadata_cast_5fassistant_5flogs_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CastAssistantLogsProto_CastAssistantEventProto_Metadata_cast_5fassistant_5flogs_2eproto}, {}};

namespace metrics {

// ===================================================================

void CastAssistantLogsProto_CastAssistantEventProto_Metadata::InitAsDefaultInstance() {
}
class CastAssistantLogsProto_CastAssistantEventProto_Metadata::_Internal {
 public:
  using HasBits = decltype(std::declval<CastAssistantLogsProto_CastAssistantEventProto_Metadata>()._has_bits_);
  static void set_has_name_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CastAssistantLogsProto_CastAssistantEventProto_Metadata::CastAssistantLogsProto_CastAssistantEventProto_Metadata()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata)
}
CastAssistantLogsProto_CastAssistantEventProto_Metadata::CastAssistantLogsProto_CastAssistantEventProto_Metadata(const CastAssistantLogsProto_CastAssistantEventProto_Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&name_hash_, &from.name_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&name_hash_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata)
}

void CastAssistantLogsProto_CastAssistantEventProto_Metadata::SharedCtor() {
  ::memset(&name_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&name_hash_)) + sizeof(value_));
}

CastAssistantLogsProto_CastAssistantEventProto_Metadata::~CastAssistantLogsProto_CastAssistantEventProto_Metadata() {
  // @@protoc_insertion_point(destructor:metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata)
  SharedDtor();
}

void CastAssistantLogsProto_CastAssistantEventProto_Metadata::SharedDtor() {
}

void CastAssistantLogsProto_CastAssistantEventProto_Metadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CastAssistantLogsProto_CastAssistantEventProto_Metadata& CastAssistantLogsProto_CastAssistantEventProto_Metadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CastAssistantLogsProto_CastAssistantEventProto_Metadata_cast_5fassistant_5flogs_2eproto.base);
  return *internal_default_instance();
}


void CastAssistantLogsProto_CastAssistantEventProto_Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&name_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&name_hash_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CastAssistantLogsProto_CastAssistantEventProto_Metadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 name_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_name_hash(&has_bits);
          name_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CastAssistantLogsProto_CastAssistantEventProto_Metadata::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 name_hash = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_name_hash(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &name_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_value(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CastAssistantLogsProto_CastAssistantEventProto_Metadata::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 name_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(1, this->name_hash(), output);
  }

  // optional int64 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata)
}

size_t CastAssistantLogsProto_CastAssistantEventProto_Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 name_hash = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int64 value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->value());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CastAssistantLogsProto_CastAssistantEventProto_Metadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CastAssistantLogsProto_CastAssistantEventProto_Metadata*>(
      &from));
}

void CastAssistantLogsProto_CastAssistantEventProto_Metadata::MergeFrom(const CastAssistantLogsProto_CastAssistantEventProto_Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_hash_ = from.name_hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CastAssistantLogsProto_CastAssistantEventProto_Metadata::CopyFrom(const CastAssistantLogsProto_CastAssistantEventProto_Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastAssistantLogsProto_CastAssistantEventProto_Metadata::IsInitialized() const {
  return true;
}

void CastAssistantLogsProto_CastAssistantEventProto_Metadata::InternalSwap(CastAssistantLogsProto_CastAssistantEventProto_Metadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(name_hash_, other->name_hash_);
  swap(value_, other->value_);
}

std::string CastAssistantLogsProto_CastAssistantEventProto_Metadata::GetTypeName() const {
  return "metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata";
}


// ===================================================================

void CastAssistantLogsProto_CastAssistantEventProto::InitAsDefaultInstance() {
}
class CastAssistantLogsProto_CastAssistantEventProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CastAssistantLogsProto_CastAssistantEventProto>()._has_bits_);
  static void set_has_name_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_msec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_duo_core_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hotword_model_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CastAssistantLogsProto_CastAssistantEventProto::CastAssistantLogsProto_CastAssistantEventProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CastAssistantLogsProto.CastAssistantEventProto)
}
CastAssistantLogsProto_CastAssistantEventProto::CastAssistantLogsProto_CastAssistantEventProto(const CastAssistantLogsProto_CastAssistantEventProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      metadata_(from.metadata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hotword_model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_hotword_model_id()) {
    hotword_model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hotword_model_id_);
  }
  ::memcpy(&name_hash_, &from.name_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&duo_core_version_) -
    reinterpret_cast<char*>(&name_hash_)) + sizeof(duo_core_version_));
  // @@protoc_insertion_point(copy_constructor:metrics.CastAssistantLogsProto.CastAssistantEventProto)
}

void CastAssistantLogsProto_CastAssistantEventProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CastAssistantLogsProto_CastAssistantEventProto_cast_5fassistant_5flogs_2eproto.base);
  hotword_model_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&name_hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duo_core_version_) -
      reinterpret_cast<char*>(&name_hash_)) + sizeof(duo_core_version_));
}

CastAssistantLogsProto_CastAssistantEventProto::~CastAssistantLogsProto_CastAssistantEventProto() {
  // @@protoc_insertion_point(destructor:metrics.CastAssistantLogsProto.CastAssistantEventProto)
  SharedDtor();
}

void CastAssistantLogsProto_CastAssistantEventProto::SharedDtor() {
  hotword_model_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CastAssistantLogsProto_CastAssistantEventProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CastAssistantLogsProto_CastAssistantEventProto& CastAssistantLogsProto_CastAssistantEventProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CastAssistantLogsProto_CastAssistantEventProto_cast_5fassistant_5flogs_2eproto.base);
  return *internal_default_instance();
}


void CastAssistantLogsProto_CastAssistantEventProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastAssistantLogsProto.CastAssistantEventProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    hotword_model_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&name_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duo_core_version_) -
        reinterpret_cast<char*>(&name_hash_)) + sizeof(duo_core_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CastAssistantLogsProto_CastAssistantEventProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 name_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_name_hash(&has_bits);
          name_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int64 time_msec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_time_msec(&has_bits);
          time_msec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 value = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata metadata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // optional fixed64 duo_core_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_duo_core_version(&has_bits);
          duo_core_version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string hotword_model_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_hotword_model_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CastAssistantLogsProto_CastAssistantEventProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.CastAssistantLogsProto.CastAssistantEventProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 name_hash = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          _Internal::set_has_name_hash(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &name_hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_msec = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_time_msec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_msec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 value = 3 [deprecated = true];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_value(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata metadata = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 duo_core_version = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {
          _Internal::set_has_duo_core_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &duo_core_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hotword_model_id = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_hotword_model_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CastAssistantLogsProto.CastAssistantEventProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CastAssistantLogsProto.CastAssistantEventProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CastAssistantLogsProto_CastAssistantEventProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CastAssistantLogsProto.CastAssistantEventProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 name_hash = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(1, this->name_hash(), output);
  }

  // optional int64 time_msec = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->time_msec(), output);
  }

  // optional int64 value = 3 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->value(), output);
  }

  // repeated .metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata metadata = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metadata_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->metadata(static_cast<int>(i)),
      output);
  }

  // optional fixed64 duo_core_version = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(5, this->duo_core_version(), output);
  }

  // optional string hotword_model_id = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->hotword_model_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.CastAssistantLogsProto.CastAssistantEventProto)
}

size_t CastAssistantLogsProto_CastAssistantEventProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastAssistantLogsProto.CastAssistantEventProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata metadata = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->metadata_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->metadata(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string hotword_model_id = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->hotword_model_id());
    }

    // optional fixed64 name_hash = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int64 time_msec = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->time_msec());
    }

    // optional int64 value = 3 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->value());
    }

    // optional fixed64 duo_core_version = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CastAssistantLogsProto_CastAssistantEventProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CastAssistantLogsProto_CastAssistantEventProto*>(
      &from));
}

void CastAssistantLogsProto_CastAssistantEventProto::MergeFrom(const CastAssistantLogsProto_CastAssistantEventProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastAssistantLogsProto.CastAssistantEventProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      hotword_model_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hotword_model_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      name_hash_ = from.name_hash_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_msec_ = from.time_msec_;
    }
    if (cached_has_bits & 0x00000008u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000010u) {
      duo_core_version_ = from.duo_core_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CastAssistantLogsProto_CastAssistantEventProto::CopyFrom(const CastAssistantLogsProto_CastAssistantEventProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastAssistantLogsProto.CastAssistantEventProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastAssistantLogsProto_CastAssistantEventProto::IsInitialized() const {
  return true;
}

void CastAssistantLogsProto_CastAssistantEventProto::InternalSwap(CastAssistantLogsProto_CastAssistantEventProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&metadata_)->InternalSwap(CastToBase(&other->metadata_));
  hotword_model_id_.Swap(&other->hotword_model_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(name_hash_, other->name_hash_);
  swap(time_msec_, other->time_msec_);
  swap(value_, other->value_);
  swap(duo_core_version_, other->duo_core_version_);
}

std::string CastAssistantLogsProto_CastAssistantEventProto::GetTypeName() const {
  return "metrics.CastAssistantLogsProto.CastAssistantEventProto";
}


// ===================================================================

void CastAssistantLogsProto::InitAsDefaultInstance() {
}
class CastAssistantLogsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<CastAssistantLogsProto>()._has_bits_);
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_conversation_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gaia_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_virtual_release_track(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_backdrop_app_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CastAssistantLogsProto::CastAssistantLogsProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:metrics.CastAssistantLogsProto)
}
CastAssistantLogsProto::CastAssistantLogsProto(const CastAssistantLogsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      cast_assistant_event_(from.cast_assistant_event_),
      experiment_id_(from.experiment_id_),
      event_id_list_(from.event_id_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_id()) {
    event_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_id_);
  }
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_id()) {
    request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
  }
  conversation_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_conversation_key()) {
    conversation_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.conversation_key_);
  }
  backdrop_app_device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_backdrop_app_device_id()) {
    backdrop_app_device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.backdrop_app_device_id_);
  }
  ::memcpy(&gaia_id_, &from.gaia_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&virtual_release_track_) -
    reinterpret_cast<char*>(&gaia_id_)) + sizeof(virtual_release_track_));
  // @@protoc_insertion_point(copy_constructor:metrics.CastAssistantLogsProto)
}

void CastAssistantLogsProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CastAssistantLogsProto_cast_5fassistant_5flogs_2eproto.base);
  event_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  conversation_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  backdrop_app_device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gaia_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&virtual_release_track_) -
      reinterpret_cast<char*>(&gaia_id_)) + sizeof(virtual_release_track_));
}

CastAssistantLogsProto::~CastAssistantLogsProto() {
  // @@protoc_insertion_point(destructor:metrics.CastAssistantLogsProto)
  SharedDtor();
}

void CastAssistantLogsProto::SharedDtor() {
  event_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  conversation_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  backdrop_app_device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CastAssistantLogsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CastAssistantLogsProto& CastAssistantLogsProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CastAssistantLogsProto_cast_5fassistant_5flogs_2eproto.base);
  return *internal_default_instance();
}


void CastAssistantLogsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:metrics.CastAssistantLogsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cast_assistant_event_.Clear();
  experiment_id_.Clear();
  event_id_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      event_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      request_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      conversation_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      backdrop_app_device_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&gaia_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&virtual_release_track_) -
        reinterpret_cast<char*>(&gaia_id_)) + sizeof(virtual_release_track_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CastAssistantLogsProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_event_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .metrics.CastAssistantLogsProto.CastAssistantEventProto cast_assistant_event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_cast_assistant_event(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // optional int64 gaia_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_gaia_id(&has_bits);
          gaia_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 client_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_client_id(&has_bits);
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string request_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_request_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string conversation_key = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_conversation_key(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string experiment_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_experiment_id(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // optional fixed32 virtual_release_track = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_virtual_release_track(&has_bits);
          virtual_release_track_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional string backdrop_app_device_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_backdrop_app_device_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string event_id_list = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_event_id_list(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 98);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CastAssistantLogsProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:metrics.CastAssistantLogsProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string event_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_event_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .metrics.CastAssistantLogsProto.CastAssistantEventProto cast_assistant_event = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_cast_assistant_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 gaia_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_gaia_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &gaia_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 client_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {
          _Internal::set_has_client_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &client_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_request_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string conversation_key = 6 [deprecated = true];
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_conversation_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string experiment_id = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_experiment_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 virtual_release_track = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {
          _Internal::set_has_virtual_release_track(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &virtual_release_track_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string backdrop_app_device_id = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_backdrop_app_device_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string event_id_list = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_event_id_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:metrics.CastAssistantLogsProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:metrics.CastAssistantLogsProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CastAssistantLogsProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:metrics.CastAssistantLogsProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->event_id(), output);
  }

  // repeated .metrics.CastAssistantLogsProto.CastAssistantEventProto cast_assistant_event = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cast_assistant_event_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->cast_assistant_event(static_cast<int>(i)),
      output);
  }

  // optional int64 gaia_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->gaia_id(), output);
  }

  // optional fixed64 client_id = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(4, this->client_id(), output);
  }

  // optional string request_id = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->request_id(), output);
  }

  // optional string conversation_key = 6 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->conversation_key(), output);
  }

  // repeated string experiment_id = 8;
  for (int i = 0, n = this->experiment_id_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      8, this->experiment_id(i), output);
  }

  // optional fixed32 virtual_release_track = 9;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32(9, this->virtual_release_track(), output);
  }

  // optional string backdrop_app_device_id = 10;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->backdrop_app_device_id(), output);
  }

  // repeated string event_id_list = 12;
  for (int i = 0, n = this->event_id_list_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      12, this->event_id_list(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:metrics.CastAssistantLogsProto)
}

size_t CastAssistantLogsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:metrics.CastAssistantLogsProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .metrics.CastAssistantLogsProto.CastAssistantEventProto cast_assistant_event = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->cast_assistant_event_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->cast_assistant_event(static_cast<int>(i)));
    }
  }

  // repeated string experiment_id = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->experiment_id_size());
  for (int i = 0, n = this->experiment_id_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->experiment_id(i));
  }

  // repeated string event_id_list = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->event_id_list_size());
  for (int i = 0, n = this->event_id_list_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->event_id_list(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string event_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->event_id());
    }

    // optional string request_id = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->request_id());
    }

    // optional string conversation_key = 6 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->conversation_key());
    }

    // optional string backdrop_app_device_id = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->backdrop_app_device_id());
    }

    // optional int64 gaia_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->gaia_id());
    }

    // optional fixed64 client_id = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional fixed32 virtual_release_track = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CastAssistantLogsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CastAssistantLogsProto*>(
      &from));
}

void CastAssistantLogsProto::MergeFrom(const CastAssistantLogsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:metrics.CastAssistantLogsProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cast_assistant_event_.MergeFrom(from.cast_assistant_event_);
  experiment_id_.MergeFrom(from.experiment_id_);
  event_id_list_.MergeFrom(from.event_id_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      event_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      request_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      conversation_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.conversation_key_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      backdrop_app_device_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.backdrop_app_device_id_);
    }
    if (cached_has_bits & 0x00000010u) {
      gaia_id_ = from.gaia_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      client_id_ = from.client_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      virtual_release_track_ = from.virtual_release_track_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CastAssistantLogsProto::CopyFrom(const CastAssistantLogsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:metrics.CastAssistantLogsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastAssistantLogsProto::IsInitialized() const {
  return true;
}

void CastAssistantLogsProto::InternalSwap(CastAssistantLogsProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&cast_assistant_event_)->InternalSwap(CastToBase(&other->cast_assistant_event_));
  experiment_id_.InternalSwap(CastToBase(&other->experiment_id_));
  event_id_list_.InternalSwap(CastToBase(&other->event_id_list_));
  event_id_.Swap(&other->event_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  conversation_key_.Swap(&other->conversation_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  backdrop_app_device_id_.Swap(&other->backdrop_app_device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gaia_id_, other->gaia_id_);
  swap(client_id_, other->client_id_);
  swap(virtual_release_track_, other->virtual_release_track_);
}

std::string CastAssistantLogsProto::GetTypeName() const {
  return "metrics.CastAssistantLogsProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::metrics::CastAssistantLogsProto_CastAssistantEventProto_Metadata* Arena::CreateMaybeMessage< ::metrics::CastAssistantLogsProto_CastAssistantEventProto_Metadata >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::CastAssistantLogsProto_CastAssistantEventProto_Metadata >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::CastAssistantLogsProto_CastAssistantEventProto* Arena::CreateMaybeMessage< ::metrics::CastAssistantLogsProto_CastAssistantEventProto >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::CastAssistantLogsProto_CastAssistantEventProto >(arena);
}
template<> PROTOBUF_NOINLINE ::metrics::CastAssistantLogsProto* Arena::CreateMaybeMessage< ::metrics::CastAssistantLogsProto >(Arena* arena) {
  return Arena::CreateInternal< ::metrics::CastAssistantLogsProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

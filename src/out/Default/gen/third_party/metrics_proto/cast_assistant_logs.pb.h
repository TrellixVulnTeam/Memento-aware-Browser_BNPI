// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cast_assistant_logs.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cast_5fassistant_5flogs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cast_5fassistant_5flogs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cast_5fassistant_5flogs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cast_5fassistant_5flogs_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace metrics {
class CastAssistantLogsProto;
class CastAssistantLogsProtoDefaultTypeInternal;
extern CastAssistantLogsProtoDefaultTypeInternal _CastAssistantLogsProto_default_instance_;
class CastAssistantLogsProto_CastAssistantEventProto;
class CastAssistantLogsProto_CastAssistantEventProtoDefaultTypeInternal;
extern CastAssistantLogsProto_CastAssistantEventProtoDefaultTypeInternal _CastAssistantLogsProto_CastAssistantEventProto_default_instance_;
class CastAssistantLogsProto_CastAssistantEventProto_Metadata;
class CastAssistantLogsProto_CastAssistantEventProto_MetadataDefaultTypeInternal;
extern CastAssistantLogsProto_CastAssistantEventProto_MetadataDefaultTypeInternal _CastAssistantLogsProto_CastAssistantEventProto_Metadata_default_instance_;
}  // namespace metrics
PROTOBUF_NAMESPACE_OPEN
template<> ::metrics::CastAssistantLogsProto* Arena::CreateMaybeMessage<::metrics::CastAssistantLogsProto>(Arena*);
template<> ::metrics::CastAssistantLogsProto_CastAssistantEventProto* Arena::CreateMaybeMessage<::metrics::CastAssistantLogsProto_CastAssistantEventProto>(Arena*);
template<> ::metrics::CastAssistantLogsProto_CastAssistantEventProto_Metadata* Arena::CreateMaybeMessage<::metrics::CastAssistantLogsProto_CastAssistantEventProto_Metadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace metrics {

// ===================================================================

class CastAssistantLogsProto_CastAssistantEventProto_Metadata :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata) */ {
 public:
  CastAssistantLogsProto_CastAssistantEventProto_Metadata();
  virtual ~CastAssistantLogsProto_CastAssistantEventProto_Metadata();

  CastAssistantLogsProto_CastAssistantEventProto_Metadata(const CastAssistantLogsProto_CastAssistantEventProto_Metadata& from);
  CastAssistantLogsProto_CastAssistantEventProto_Metadata(CastAssistantLogsProto_CastAssistantEventProto_Metadata&& from) noexcept
    : CastAssistantLogsProto_CastAssistantEventProto_Metadata() {
    *this = ::std::move(from);
  }

  inline CastAssistantLogsProto_CastAssistantEventProto_Metadata& operator=(const CastAssistantLogsProto_CastAssistantEventProto_Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline CastAssistantLogsProto_CastAssistantEventProto_Metadata& operator=(CastAssistantLogsProto_CastAssistantEventProto_Metadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CastAssistantLogsProto_CastAssistantEventProto_Metadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CastAssistantLogsProto_CastAssistantEventProto_Metadata* internal_default_instance() {
    return reinterpret_cast<const CastAssistantLogsProto_CastAssistantEventProto_Metadata*>(
               &_CastAssistantLogsProto_CastAssistantEventProto_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CastAssistantLogsProto_CastAssistantEventProto_Metadata& a, CastAssistantLogsProto_CastAssistantEventProto_Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(CastAssistantLogsProto_CastAssistantEventProto_Metadata* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CastAssistantLogsProto_CastAssistantEventProto_Metadata* New() const final {
    return CreateMaybeMessage<CastAssistantLogsProto_CastAssistantEventProto_Metadata>(nullptr);
  }

  CastAssistantLogsProto_CastAssistantEventProto_Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CastAssistantLogsProto_CastAssistantEventProto_Metadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CastAssistantLogsProto_CastAssistantEventProto_Metadata& from);
  void MergeFrom(const CastAssistantLogsProto_CastAssistantEventProto_Metadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CastAssistantLogsProto_CastAssistantEventProto_Metadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameHashFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional fixed64 name_hash = 1;
  bool has_name_hash() const;
  void clear_name_hash();
  ::PROTOBUF_NAMESPACE_ID::uint64 name_hash() const;
  void set_name_hash(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 value = 2;
  bool has_value() const;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 name_hash_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  friend struct ::TableStruct_cast_5fassistant_5flogs_2eproto;
};
// -------------------------------------------------------------------

class CastAssistantLogsProto_CastAssistantEventProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.CastAssistantLogsProto.CastAssistantEventProto) */ {
 public:
  CastAssistantLogsProto_CastAssistantEventProto();
  virtual ~CastAssistantLogsProto_CastAssistantEventProto();

  CastAssistantLogsProto_CastAssistantEventProto(const CastAssistantLogsProto_CastAssistantEventProto& from);
  CastAssistantLogsProto_CastAssistantEventProto(CastAssistantLogsProto_CastAssistantEventProto&& from) noexcept
    : CastAssistantLogsProto_CastAssistantEventProto() {
    *this = ::std::move(from);
  }

  inline CastAssistantLogsProto_CastAssistantEventProto& operator=(const CastAssistantLogsProto_CastAssistantEventProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CastAssistantLogsProto_CastAssistantEventProto& operator=(CastAssistantLogsProto_CastAssistantEventProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CastAssistantLogsProto_CastAssistantEventProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CastAssistantLogsProto_CastAssistantEventProto* internal_default_instance() {
    return reinterpret_cast<const CastAssistantLogsProto_CastAssistantEventProto*>(
               &_CastAssistantLogsProto_CastAssistantEventProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CastAssistantLogsProto_CastAssistantEventProto& a, CastAssistantLogsProto_CastAssistantEventProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CastAssistantLogsProto_CastAssistantEventProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CastAssistantLogsProto_CastAssistantEventProto* New() const final {
    return CreateMaybeMessage<CastAssistantLogsProto_CastAssistantEventProto>(nullptr);
  }

  CastAssistantLogsProto_CastAssistantEventProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CastAssistantLogsProto_CastAssistantEventProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CastAssistantLogsProto_CastAssistantEventProto& from);
  void MergeFrom(const CastAssistantLogsProto_CastAssistantEventProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CastAssistantLogsProto_CastAssistantEventProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.CastAssistantLogsProto.CastAssistantEventProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef CastAssistantLogsProto_CastAssistantEventProto_Metadata Metadata;

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 4,
    kHotwordModelIdFieldNumber = 6,
    kNameHashFieldNumber = 1,
    kTimeMsecFieldNumber = 2,
    kValueFieldNumber = 3,
    kDuoCoreVersionFieldNumber = 5,
  };
  // repeated .metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata metadata = 4;
  int metadata_size() const;
  void clear_metadata();
  ::metrics::CastAssistantLogsProto_CastAssistantEventProto_Metadata* mutable_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CastAssistantLogsProto_CastAssistantEventProto_Metadata >*
      mutable_metadata();
  const ::metrics::CastAssistantLogsProto_CastAssistantEventProto_Metadata& metadata(int index) const;
  ::metrics::CastAssistantLogsProto_CastAssistantEventProto_Metadata* add_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CastAssistantLogsProto_CastAssistantEventProto_Metadata >&
      metadata() const;

  // optional string hotword_model_id = 6;
  bool has_hotword_model_id() const;
  void clear_hotword_model_id();
  const std::string& hotword_model_id() const;
  void set_hotword_model_id(const std::string& value);
  void set_hotword_model_id(std::string&& value);
  void set_hotword_model_id(const char* value);
  void set_hotword_model_id(const char* value, size_t size);
  std::string* mutable_hotword_model_id();
  std::string* release_hotword_model_id();
  void set_allocated_hotword_model_id(std::string* hotword_model_id);

  // optional fixed64 name_hash = 1;
  bool has_name_hash() const;
  void clear_name_hash();
  ::PROTOBUF_NAMESPACE_ID::uint64 name_hash() const;
  void set_name_hash(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 time_msec = 2;
  bool has_time_msec() const;
  void clear_time_msec();
  ::PROTOBUF_NAMESPACE_ID::int64 time_msec() const;
  void set_time_msec(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 value = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_value() const;
  PROTOBUF_DEPRECATED void clear_value();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  PROTOBUF_DEPRECATED void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional fixed64 duo_core_version = 5;
  bool has_duo_core_version() const;
  void clear_duo_core_version();
  ::PROTOBUF_NAMESPACE_ID::uint64 duo_core_version() const;
  void set_duo_core_version(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:metrics.CastAssistantLogsProto.CastAssistantEventProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CastAssistantLogsProto_CastAssistantEventProto_Metadata > metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hotword_model_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 name_hash_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_msec_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  ::PROTOBUF_NAMESPACE_ID::uint64 duo_core_version_;
  friend struct ::TableStruct_cast_5fassistant_5flogs_2eproto;
};
// -------------------------------------------------------------------

class CastAssistantLogsProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:metrics.CastAssistantLogsProto) */ {
 public:
  CastAssistantLogsProto();
  virtual ~CastAssistantLogsProto();

  CastAssistantLogsProto(const CastAssistantLogsProto& from);
  CastAssistantLogsProto(CastAssistantLogsProto&& from) noexcept
    : CastAssistantLogsProto() {
    *this = ::std::move(from);
  }

  inline CastAssistantLogsProto& operator=(const CastAssistantLogsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CastAssistantLogsProto& operator=(CastAssistantLogsProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CastAssistantLogsProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CastAssistantLogsProto* internal_default_instance() {
    return reinterpret_cast<const CastAssistantLogsProto*>(
               &_CastAssistantLogsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CastAssistantLogsProto& a, CastAssistantLogsProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CastAssistantLogsProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CastAssistantLogsProto* New() const final {
    return CreateMaybeMessage<CastAssistantLogsProto>(nullptr);
  }

  CastAssistantLogsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CastAssistantLogsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CastAssistantLogsProto& from);
  void MergeFrom(const CastAssistantLogsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CastAssistantLogsProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "metrics.CastAssistantLogsProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef CastAssistantLogsProto_CastAssistantEventProto CastAssistantEventProto;

  // accessors -------------------------------------------------------

  enum : int {
    kCastAssistantEventFieldNumber = 2,
    kExperimentIdFieldNumber = 8,
    kEventIdListFieldNumber = 12,
    kEventIdFieldNumber = 1,
    kRequestIdFieldNumber = 5,
    kConversationKeyFieldNumber = 6,
    kBackdropAppDeviceIdFieldNumber = 10,
    kGaiaIdFieldNumber = 3,
    kClientIdFieldNumber = 4,
    kVirtualReleaseTrackFieldNumber = 9,
  };
  // repeated .metrics.CastAssistantLogsProto.CastAssistantEventProto cast_assistant_event = 2;
  int cast_assistant_event_size() const;
  void clear_cast_assistant_event();
  ::metrics::CastAssistantLogsProto_CastAssistantEventProto* mutable_cast_assistant_event(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CastAssistantLogsProto_CastAssistantEventProto >*
      mutable_cast_assistant_event();
  const ::metrics::CastAssistantLogsProto_CastAssistantEventProto& cast_assistant_event(int index) const;
  ::metrics::CastAssistantLogsProto_CastAssistantEventProto* add_cast_assistant_event();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CastAssistantLogsProto_CastAssistantEventProto >&
      cast_assistant_event() const;

  // repeated string experiment_id = 8;
  int experiment_id_size() const;
  void clear_experiment_id();
  const std::string& experiment_id(int index) const;
  std::string* mutable_experiment_id(int index);
  void set_experiment_id(int index, const std::string& value);
  void set_experiment_id(int index, std::string&& value);
  void set_experiment_id(int index, const char* value);
  void set_experiment_id(int index, const char* value, size_t size);
  std::string* add_experiment_id();
  void add_experiment_id(const std::string& value);
  void add_experiment_id(std::string&& value);
  void add_experiment_id(const char* value);
  void add_experiment_id(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& experiment_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_experiment_id();

  // repeated string event_id_list = 12;
  int event_id_list_size() const;
  void clear_event_id_list();
  const std::string& event_id_list(int index) const;
  std::string* mutable_event_id_list(int index);
  void set_event_id_list(int index, const std::string& value);
  void set_event_id_list(int index, std::string&& value);
  void set_event_id_list(int index, const char* value);
  void set_event_id_list(int index, const char* value, size_t size);
  std::string* add_event_id_list();
  void add_event_id_list(const std::string& value);
  void add_event_id_list(std::string&& value);
  void add_event_id_list(const char* value);
  void add_event_id_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& event_id_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_event_id_list();

  // optional string event_id = 1;
  bool has_event_id() const;
  void clear_event_id();
  const std::string& event_id() const;
  void set_event_id(const std::string& value);
  void set_event_id(std::string&& value);
  void set_event_id(const char* value);
  void set_event_id(const char* value, size_t size);
  std::string* mutable_event_id();
  std::string* release_event_id();
  void set_allocated_event_id(std::string* event_id);

  // optional string request_id = 5;
  bool has_request_id() const;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);

  // optional string conversation_key = 6 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_conversation_key() const;
  PROTOBUF_DEPRECATED void clear_conversation_key();
  PROTOBUF_DEPRECATED const std::string& conversation_key() const;
  PROTOBUF_DEPRECATED void set_conversation_key(const std::string& value);
  PROTOBUF_DEPRECATED void set_conversation_key(std::string&& value);
  PROTOBUF_DEPRECATED void set_conversation_key(const char* value);
  PROTOBUF_DEPRECATED void set_conversation_key(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_conversation_key();
  PROTOBUF_DEPRECATED std::string* release_conversation_key();
  PROTOBUF_DEPRECATED void set_allocated_conversation_key(std::string* conversation_key);

  // optional string backdrop_app_device_id = 10;
  bool has_backdrop_app_device_id() const;
  void clear_backdrop_app_device_id();
  const std::string& backdrop_app_device_id() const;
  void set_backdrop_app_device_id(const std::string& value);
  void set_backdrop_app_device_id(std::string&& value);
  void set_backdrop_app_device_id(const char* value);
  void set_backdrop_app_device_id(const char* value, size_t size);
  std::string* mutable_backdrop_app_device_id();
  std::string* release_backdrop_app_device_id();
  void set_allocated_backdrop_app_device_id(std::string* backdrop_app_device_id);

  // optional int64 gaia_id = 3;
  bool has_gaia_id() const;
  void clear_gaia_id();
  ::PROTOBUF_NAMESPACE_ID::int64 gaia_id() const;
  void set_gaia_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional fixed64 client_id = 4;
  bool has_client_id() const;
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional fixed32 virtual_release_track = 9;
  bool has_virtual_release_track() const;
  void clear_virtual_release_track();
  ::PROTOBUF_NAMESPACE_ID::uint32 virtual_release_track() const;
  void set_virtual_release_track(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:metrics.CastAssistantLogsProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CastAssistantLogsProto_CastAssistantEventProto > cast_assistant_event_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> experiment_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> event_id_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr conversation_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr backdrop_app_device_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 gaia_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 client_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 virtual_release_track_;
  friend struct ::TableStruct_cast_5fassistant_5flogs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CastAssistantLogsProto_CastAssistantEventProto_Metadata

// optional fixed64 name_hash = 1;
inline bool CastAssistantLogsProto_CastAssistantEventProto_Metadata::has_name_hash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CastAssistantLogsProto_CastAssistantEventProto_Metadata::clear_name_hash() {
  name_hash_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CastAssistantLogsProto_CastAssistantEventProto_Metadata::name_hash() const {
  // @@protoc_insertion_point(field_get:metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata.name_hash)
  return name_hash_;
}
inline void CastAssistantLogsProto_CastAssistantEventProto_Metadata::set_name_hash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  name_hash_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata.name_hash)
}

// optional int64 value = 2;
inline bool CastAssistantLogsProto_CastAssistantEventProto_Metadata::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CastAssistantLogsProto_CastAssistantEventProto_Metadata::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CastAssistantLogsProto_CastAssistantEventProto_Metadata::value() const {
  // @@protoc_insertion_point(field_get:metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata.value)
  return value_;
}
inline void CastAssistantLogsProto_CastAssistantEventProto_Metadata::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata.value)
}

// -------------------------------------------------------------------

// CastAssistantLogsProto_CastAssistantEventProto

// optional fixed64 name_hash = 1;
inline bool CastAssistantLogsProto_CastAssistantEventProto::has_name_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CastAssistantLogsProto_CastAssistantEventProto::clear_name_hash() {
  name_hash_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CastAssistantLogsProto_CastAssistantEventProto::name_hash() const {
  // @@protoc_insertion_point(field_get:metrics.CastAssistantLogsProto.CastAssistantEventProto.name_hash)
  return name_hash_;
}
inline void CastAssistantLogsProto_CastAssistantEventProto::set_name_hash(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  name_hash_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastAssistantLogsProto.CastAssistantEventProto.name_hash)
}

// optional int64 time_msec = 2;
inline bool CastAssistantLogsProto_CastAssistantEventProto::has_time_msec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CastAssistantLogsProto_CastAssistantEventProto::clear_time_msec() {
  time_msec_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CastAssistantLogsProto_CastAssistantEventProto::time_msec() const {
  // @@protoc_insertion_point(field_get:metrics.CastAssistantLogsProto.CastAssistantEventProto.time_msec)
  return time_msec_;
}
inline void CastAssistantLogsProto_CastAssistantEventProto::set_time_msec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  time_msec_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastAssistantLogsProto.CastAssistantEventProto.time_msec)
}

// optional int64 value = 3 [deprecated = true];
inline bool CastAssistantLogsProto_CastAssistantEventProto::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CastAssistantLogsProto_CastAssistantEventProto::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CastAssistantLogsProto_CastAssistantEventProto::value() const {
  // @@protoc_insertion_point(field_get:metrics.CastAssistantLogsProto.CastAssistantEventProto.value)
  return value_;
}
inline void CastAssistantLogsProto_CastAssistantEventProto::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  value_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastAssistantLogsProto.CastAssistantEventProto.value)
}

// repeated .metrics.CastAssistantLogsProto.CastAssistantEventProto.Metadata metadata = 4;
inline int CastAssistantLogsProto_CastAssistantEventProto::metadata_size() const {
  return metadata_.size();
}
inline void CastAssistantLogsProto_CastAssistantEventProto::clear_metadata() {
  metadata_.Clear();
}
inline ::metrics::CastAssistantLogsProto_CastAssistantEventProto_Metadata* CastAssistantLogsProto_CastAssistantEventProto::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.CastAssistantLogsProto.CastAssistantEventProto.metadata)
  return metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CastAssistantLogsProto_CastAssistantEventProto_Metadata >*
CastAssistantLogsProto_CastAssistantEventProto::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CastAssistantLogsProto.CastAssistantEventProto.metadata)
  return &metadata_;
}
inline const ::metrics::CastAssistantLogsProto_CastAssistantEventProto_Metadata& CastAssistantLogsProto_CastAssistantEventProto::metadata(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CastAssistantLogsProto.CastAssistantEventProto.metadata)
  return metadata_.Get(index);
}
inline ::metrics::CastAssistantLogsProto_CastAssistantEventProto_Metadata* CastAssistantLogsProto_CastAssistantEventProto::add_metadata() {
  // @@protoc_insertion_point(field_add:metrics.CastAssistantLogsProto.CastAssistantEventProto.metadata)
  return metadata_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CastAssistantLogsProto_CastAssistantEventProto_Metadata >&
CastAssistantLogsProto_CastAssistantEventProto::metadata() const {
  // @@protoc_insertion_point(field_list:metrics.CastAssistantLogsProto.CastAssistantEventProto.metadata)
  return metadata_;
}

// optional fixed64 duo_core_version = 5;
inline bool CastAssistantLogsProto_CastAssistantEventProto::has_duo_core_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CastAssistantLogsProto_CastAssistantEventProto::clear_duo_core_version() {
  duo_core_version_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CastAssistantLogsProto_CastAssistantEventProto::duo_core_version() const {
  // @@protoc_insertion_point(field_get:metrics.CastAssistantLogsProto.CastAssistantEventProto.duo_core_version)
  return duo_core_version_;
}
inline void CastAssistantLogsProto_CastAssistantEventProto::set_duo_core_version(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  duo_core_version_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastAssistantLogsProto.CastAssistantEventProto.duo_core_version)
}

// optional string hotword_model_id = 6;
inline bool CastAssistantLogsProto_CastAssistantEventProto::has_hotword_model_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CastAssistantLogsProto_CastAssistantEventProto::clear_hotword_model_id() {
  hotword_model_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CastAssistantLogsProto_CastAssistantEventProto::hotword_model_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastAssistantLogsProto.CastAssistantEventProto.hotword_model_id)
  return hotword_model_id_.GetNoArena();
}
inline void CastAssistantLogsProto_CastAssistantEventProto::set_hotword_model_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hotword_model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastAssistantLogsProto.CastAssistantEventProto.hotword_model_id)
}
inline void CastAssistantLogsProto_CastAssistantEventProto::set_hotword_model_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  hotword_model_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastAssistantLogsProto.CastAssistantEventProto.hotword_model_id)
}
inline void CastAssistantLogsProto_CastAssistantEventProto::set_hotword_model_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  hotword_model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastAssistantLogsProto.CastAssistantEventProto.hotword_model_id)
}
inline void CastAssistantLogsProto_CastAssistantEventProto::set_hotword_model_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  hotword_model_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastAssistantLogsProto.CastAssistantEventProto.hotword_model_id)
}
inline std::string* CastAssistantLogsProto_CastAssistantEventProto::mutable_hotword_model_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:metrics.CastAssistantLogsProto.CastAssistantEventProto.hotword_model_id)
  return hotword_model_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CastAssistantLogsProto_CastAssistantEventProto::release_hotword_model_id() {
  // @@protoc_insertion_point(field_release:metrics.CastAssistantLogsProto.CastAssistantEventProto.hotword_model_id)
  if (!has_hotword_model_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hotword_model_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CastAssistantLogsProto_CastAssistantEventProto::set_allocated_hotword_model_id(std::string* hotword_model_id) {
  if (hotword_model_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hotword_model_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hotword_model_id);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastAssistantLogsProto.CastAssistantEventProto.hotword_model_id)
}

// -------------------------------------------------------------------

// CastAssistantLogsProto

// optional string request_id = 5;
inline bool CastAssistantLogsProto::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CastAssistantLogsProto::clear_request_id() {
  request_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CastAssistantLogsProto::request_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastAssistantLogsProto.request_id)
  return request_id_.GetNoArena();
}
inline void CastAssistantLogsProto::set_request_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastAssistantLogsProto.request_id)
}
inline void CastAssistantLogsProto::set_request_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  request_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastAssistantLogsProto.request_id)
}
inline void CastAssistantLogsProto::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastAssistantLogsProto.request_id)
}
inline void CastAssistantLogsProto::set_request_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  request_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastAssistantLogsProto.request_id)
}
inline std::string* CastAssistantLogsProto::mutable_request_id() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:metrics.CastAssistantLogsProto.request_id)
  return request_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CastAssistantLogsProto::release_request_id() {
  // @@protoc_insertion_point(field_release:metrics.CastAssistantLogsProto.request_id)
  if (!has_request_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return request_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CastAssistantLogsProto::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  request_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastAssistantLogsProto.request_id)
}

// optional string event_id = 1;
inline bool CastAssistantLogsProto::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CastAssistantLogsProto::clear_event_id() {
  event_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CastAssistantLogsProto::event_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastAssistantLogsProto.event_id)
  return event_id_.GetNoArena();
}
inline void CastAssistantLogsProto::set_event_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  event_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastAssistantLogsProto.event_id)
}
inline void CastAssistantLogsProto::set_event_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  event_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastAssistantLogsProto.event_id)
}
inline void CastAssistantLogsProto::set_event_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  event_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastAssistantLogsProto.event_id)
}
inline void CastAssistantLogsProto::set_event_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  event_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastAssistantLogsProto.event_id)
}
inline std::string* CastAssistantLogsProto::mutable_event_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:metrics.CastAssistantLogsProto.event_id)
  return event_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CastAssistantLogsProto::release_event_id() {
  // @@protoc_insertion_point(field_release:metrics.CastAssistantLogsProto.event_id)
  if (!has_event_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return event_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CastAssistantLogsProto::set_allocated_event_id(std::string* event_id) {
  if (event_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_id);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastAssistantLogsProto.event_id)
}

// optional string conversation_key = 6 [deprecated = true];
inline bool CastAssistantLogsProto::has_conversation_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CastAssistantLogsProto::clear_conversation_key() {
  conversation_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CastAssistantLogsProto::conversation_key() const {
  // @@protoc_insertion_point(field_get:metrics.CastAssistantLogsProto.conversation_key)
  return conversation_key_.GetNoArena();
}
inline void CastAssistantLogsProto::set_conversation_key(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  conversation_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastAssistantLogsProto.conversation_key)
}
inline void CastAssistantLogsProto::set_conversation_key(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  conversation_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastAssistantLogsProto.conversation_key)
}
inline void CastAssistantLogsProto::set_conversation_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  conversation_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastAssistantLogsProto.conversation_key)
}
inline void CastAssistantLogsProto::set_conversation_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  conversation_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastAssistantLogsProto.conversation_key)
}
inline std::string* CastAssistantLogsProto::mutable_conversation_key() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:metrics.CastAssistantLogsProto.conversation_key)
  return conversation_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CastAssistantLogsProto::release_conversation_key() {
  // @@protoc_insertion_point(field_release:metrics.CastAssistantLogsProto.conversation_key)
  if (!has_conversation_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return conversation_key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CastAssistantLogsProto::set_allocated_conversation_key(std::string* conversation_key) {
  if (conversation_key != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  conversation_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), conversation_key);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastAssistantLogsProto.conversation_key)
}

// optional int64 gaia_id = 3;
inline bool CastAssistantLogsProto::has_gaia_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CastAssistantLogsProto::clear_gaia_id() {
  gaia_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CastAssistantLogsProto::gaia_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastAssistantLogsProto.gaia_id)
  return gaia_id_;
}
inline void CastAssistantLogsProto::set_gaia_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  gaia_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastAssistantLogsProto.gaia_id)
}

// optional fixed64 client_id = 4;
inline bool CastAssistantLogsProto::has_client_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CastAssistantLogsProto::clear_client_id() {
  client_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CastAssistantLogsProto::client_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastAssistantLogsProto.client_id)
  return client_id_;
}
inline void CastAssistantLogsProto::set_client_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  client_id_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastAssistantLogsProto.client_id)
}

// repeated string experiment_id = 8;
inline int CastAssistantLogsProto::experiment_id_size() const {
  return experiment_id_.size();
}
inline void CastAssistantLogsProto::clear_experiment_id() {
  experiment_id_.Clear();
}
inline const std::string& CastAssistantLogsProto::experiment_id(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CastAssistantLogsProto.experiment_id)
  return experiment_id_.Get(index);
}
inline std::string* CastAssistantLogsProto::mutable_experiment_id(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.CastAssistantLogsProto.experiment_id)
  return experiment_id_.Mutable(index);
}
inline void CastAssistantLogsProto::set_experiment_id(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:metrics.CastAssistantLogsProto.experiment_id)
  experiment_id_.Mutable(index)->assign(value);
}
inline void CastAssistantLogsProto::set_experiment_id(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:metrics.CastAssistantLogsProto.experiment_id)
  experiment_id_.Mutable(index)->assign(std::move(value));
}
inline void CastAssistantLogsProto::set_experiment_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  experiment_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:metrics.CastAssistantLogsProto.experiment_id)
}
inline void CastAssistantLogsProto::set_experiment_id(int index, const char* value, size_t size) {
  experiment_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:metrics.CastAssistantLogsProto.experiment_id)
}
inline std::string* CastAssistantLogsProto::add_experiment_id() {
  // @@protoc_insertion_point(field_add_mutable:metrics.CastAssistantLogsProto.experiment_id)
  return experiment_id_.Add();
}
inline void CastAssistantLogsProto::add_experiment_id(const std::string& value) {
  experiment_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:metrics.CastAssistantLogsProto.experiment_id)
}
inline void CastAssistantLogsProto::add_experiment_id(std::string&& value) {
  experiment_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:metrics.CastAssistantLogsProto.experiment_id)
}
inline void CastAssistantLogsProto::add_experiment_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  experiment_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:metrics.CastAssistantLogsProto.experiment_id)
}
inline void CastAssistantLogsProto::add_experiment_id(const char* value, size_t size) {
  experiment_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:metrics.CastAssistantLogsProto.experiment_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CastAssistantLogsProto::experiment_id() const {
  // @@protoc_insertion_point(field_list:metrics.CastAssistantLogsProto.experiment_id)
  return experiment_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CastAssistantLogsProto::mutable_experiment_id() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CastAssistantLogsProto.experiment_id)
  return &experiment_id_;
}

// optional fixed32 virtual_release_track = 9;
inline bool CastAssistantLogsProto::has_virtual_release_track() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CastAssistantLogsProto::clear_virtual_release_track() {
  virtual_release_track_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CastAssistantLogsProto::virtual_release_track() const {
  // @@protoc_insertion_point(field_get:metrics.CastAssistantLogsProto.virtual_release_track)
  return virtual_release_track_;
}
inline void CastAssistantLogsProto::set_virtual_release_track(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  virtual_release_track_ = value;
  // @@protoc_insertion_point(field_set:metrics.CastAssistantLogsProto.virtual_release_track)
}

// repeated .metrics.CastAssistantLogsProto.CastAssistantEventProto cast_assistant_event = 2;
inline int CastAssistantLogsProto::cast_assistant_event_size() const {
  return cast_assistant_event_.size();
}
inline void CastAssistantLogsProto::clear_cast_assistant_event() {
  cast_assistant_event_.Clear();
}
inline ::metrics::CastAssistantLogsProto_CastAssistantEventProto* CastAssistantLogsProto::mutable_cast_assistant_event(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.CastAssistantLogsProto.cast_assistant_event)
  return cast_assistant_event_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CastAssistantLogsProto_CastAssistantEventProto >*
CastAssistantLogsProto::mutable_cast_assistant_event() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CastAssistantLogsProto.cast_assistant_event)
  return &cast_assistant_event_;
}
inline const ::metrics::CastAssistantLogsProto_CastAssistantEventProto& CastAssistantLogsProto::cast_assistant_event(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CastAssistantLogsProto.cast_assistant_event)
  return cast_assistant_event_.Get(index);
}
inline ::metrics::CastAssistantLogsProto_CastAssistantEventProto* CastAssistantLogsProto::add_cast_assistant_event() {
  // @@protoc_insertion_point(field_add:metrics.CastAssistantLogsProto.cast_assistant_event)
  return cast_assistant_event_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::metrics::CastAssistantLogsProto_CastAssistantEventProto >&
CastAssistantLogsProto::cast_assistant_event() const {
  // @@protoc_insertion_point(field_list:metrics.CastAssistantLogsProto.cast_assistant_event)
  return cast_assistant_event_;
}

// optional string backdrop_app_device_id = 10;
inline bool CastAssistantLogsProto::has_backdrop_app_device_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CastAssistantLogsProto::clear_backdrop_app_device_id() {
  backdrop_app_device_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CastAssistantLogsProto::backdrop_app_device_id() const {
  // @@protoc_insertion_point(field_get:metrics.CastAssistantLogsProto.backdrop_app_device_id)
  return backdrop_app_device_id_.GetNoArena();
}
inline void CastAssistantLogsProto::set_backdrop_app_device_id(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  backdrop_app_device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:metrics.CastAssistantLogsProto.backdrop_app_device_id)
}
inline void CastAssistantLogsProto::set_backdrop_app_device_id(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  backdrop_app_device_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:metrics.CastAssistantLogsProto.backdrop_app_device_id)
}
inline void CastAssistantLogsProto::set_backdrop_app_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  backdrop_app_device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:metrics.CastAssistantLogsProto.backdrop_app_device_id)
}
inline void CastAssistantLogsProto::set_backdrop_app_device_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  backdrop_app_device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:metrics.CastAssistantLogsProto.backdrop_app_device_id)
}
inline std::string* CastAssistantLogsProto::mutable_backdrop_app_device_id() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:metrics.CastAssistantLogsProto.backdrop_app_device_id)
  return backdrop_app_device_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CastAssistantLogsProto::release_backdrop_app_device_id() {
  // @@protoc_insertion_point(field_release:metrics.CastAssistantLogsProto.backdrop_app_device_id)
  if (!has_backdrop_app_device_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return backdrop_app_device_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CastAssistantLogsProto::set_allocated_backdrop_app_device_id(std::string* backdrop_app_device_id) {
  if (backdrop_app_device_id != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  backdrop_app_device_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), backdrop_app_device_id);
  // @@protoc_insertion_point(field_set_allocated:metrics.CastAssistantLogsProto.backdrop_app_device_id)
}

// repeated string event_id_list = 12;
inline int CastAssistantLogsProto::event_id_list_size() const {
  return event_id_list_.size();
}
inline void CastAssistantLogsProto::clear_event_id_list() {
  event_id_list_.Clear();
}
inline const std::string& CastAssistantLogsProto::event_id_list(int index) const {
  // @@protoc_insertion_point(field_get:metrics.CastAssistantLogsProto.event_id_list)
  return event_id_list_.Get(index);
}
inline std::string* CastAssistantLogsProto::mutable_event_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:metrics.CastAssistantLogsProto.event_id_list)
  return event_id_list_.Mutable(index);
}
inline void CastAssistantLogsProto::set_event_id_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:metrics.CastAssistantLogsProto.event_id_list)
  event_id_list_.Mutable(index)->assign(value);
}
inline void CastAssistantLogsProto::set_event_id_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:metrics.CastAssistantLogsProto.event_id_list)
  event_id_list_.Mutable(index)->assign(std::move(value));
}
inline void CastAssistantLogsProto::set_event_id_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  event_id_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:metrics.CastAssistantLogsProto.event_id_list)
}
inline void CastAssistantLogsProto::set_event_id_list(int index, const char* value, size_t size) {
  event_id_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:metrics.CastAssistantLogsProto.event_id_list)
}
inline std::string* CastAssistantLogsProto::add_event_id_list() {
  // @@protoc_insertion_point(field_add_mutable:metrics.CastAssistantLogsProto.event_id_list)
  return event_id_list_.Add();
}
inline void CastAssistantLogsProto::add_event_id_list(const std::string& value) {
  event_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:metrics.CastAssistantLogsProto.event_id_list)
}
inline void CastAssistantLogsProto::add_event_id_list(std::string&& value) {
  event_id_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:metrics.CastAssistantLogsProto.event_id_list)
}
inline void CastAssistantLogsProto::add_event_id_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  event_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:metrics.CastAssistantLogsProto.event_id_list)
}
inline void CastAssistantLogsProto::add_event_id_list(const char* value, size_t size) {
  event_id_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:metrics.CastAssistantLogsProto.event_id_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CastAssistantLogsProto::event_id_list() const {
  // @@protoc_insertion_point(field_list:metrics.CastAssistantLogsProto.event_id_list)
  return event_id_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CastAssistantLogsProto::mutable_event_id_list() {
  // @@protoc_insertion_point(field_mutable_list:metrics.CastAssistantLogsProto.event_id_list)
  return &event_id_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cast_5fassistant_5flogs_2eproto

{"src/dawn/dawn_proc.c": "\n#include \"dawn/dawn_proc.h\"\n\nstatic DawnProcTable procs;\n\nstatic DawnProcTable nullProcs;\n\nvoid dawnProcSetProcs(const DawnProcTable* procs_) {\n    if (procs_) {\n        procs = *procs_;\n    } else {\n        procs = nullProcs;\n    }\n}\n\nWGPUInstance wgpuCreateInstance(WGPUInstanceDescriptor const * descriptor) {\n    return procs.createInstance(descriptor);\n}\n\nWGPUProc wgpuGetProcAddress(WGPUDevice device, const char* procName) {\n    return procs.getProcAddress(device, procName);\n}\n\nvoid wgpuBindGroupReference(WGPUBindGroup bindGroup) {\n    procs.bindGroupReference(bindGroup);\n}\nvoid wgpuBindGroupRelease(WGPUBindGroup bindGroup) {\n    procs.bindGroupRelease(bindGroup);\n}\n\nvoid wgpuBindGroupLayoutReference(WGPUBindGroupLayout bindGroupLayout) {\n    procs.bindGroupLayoutReference(bindGroupLayout);\n}\nvoid wgpuBindGroupLayoutRelease(WGPUBindGroupLayout bindGroupLayout) {\n    procs.bindGroupLayoutRelease(bindGroupLayout);\n}\n\nvoid wgpuBufferDestroy(WGPUBuffer buffer) {\n    procs.bufferDestroy(buffer);\n}\nvoid wgpuBufferMapReadAsync(WGPUBuffer buffer, WGPUBufferMapReadCallback callback, void * userdata) {\n    procs.bufferMapReadAsync(buffer, callback, userdata);\n}\nvoid wgpuBufferMapWriteAsync(WGPUBuffer buffer, WGPUBufferMapWriteCallback callback, void * userdata) {\n    procs.bufferMapWriteAsync(buffer, callback, userdata);\n}\nvoid wgpuBufferSetSubData(WGPUBuffer buffer, uint64_t start, uint64_t count, void const * data) {\n    procs.bufferSetSubData(buffer, start, count, data);\n}\nvoid wgpuBufferUnmap(WGPUBuffer buffer) {\n    procs.bufferUnmap(buffer);\n}\nvoid wgpuBufferReference(WGPUBuffer buffer) {\n    procs.bufferReference(buffer);\n}\nvoid wgpuBufferRelease(WGPUBuffer buffer) {\n    procs.bufferRelease(buffer);\n}\n\nvoid wgpuCommandBufferReference(WGPUCommandBuffer commandBuffer) {\n    procs.commandBufferReference(commandBuffer);\n}\nvoid wgpuCommandBufferRelease(WGPUCommandBuffer commandBuffer) {\n    procs.commandBufferRelease(commandBuffer);\n}\n\nWGPUComputePassEncoder wgpuCommandEncoderBeginComputePass(WGPUCommandEncoder commandEncoder, WGPUComputePassDescriptor const * descriptor) {\nreturn     procs.commandEncoderBeginComputePass(commandEncoder, descriptor);\n}\nWGPURenderPassEncoder wgpuCommandEncoderBeginRenderPass(WGPUCommandEncoder commandEncoder, WGPURenderPassDescriptor const * descriptor) {\nreturn     procs.commandEncoderBeginRenderPass(commandEncoder, descriptor);\n}\nvoid wgpuCommandEncoderCopyBufferToBuffer(WGPUCommandEncoder commandEncoder, WGPUBuffer source, uint64_t sourceOffset, WGPUBuffer destination, uint64_t destinationOffset, uint64_t size) {\n    procs.commandEncoderCopyBufferToBuffer(commandEncoder, source, sourceOffset, destination, destinationOffset, size);\n}\nvoid wgpuCommandEncoderCopyBufferToTexture(WGPUCommandEncoder commandEncoder, WGPUBufferCopyView const * source, WGPUTextureCopyView const * destination, WGPUExtent3D const * copySize) {\n    procs.commandEncoderCopyBufferToTexture(commandEncoder, source, destination, copySize);\n}\nvoid wgpuCommandEncoderCopyTextureToBuffer(WGPUCommandEncoder commandEncoder, WGPUTextureCopyView const * source, WGPUBufferCopyView const * destination, WGPUExtent3D const * copySize) {\n    procs.commandEncoderCopyTextureToBuffer(commandEncoder, source, destination, copySize);\n}\nvoid wgpuCommandEncoderCopyTextureToTexture(WGPUCommandEncoder commandEncoder, WGPUTextureCopyView const * source, WGPUTextureCopyView const * destination, WGPUExtent3D const * copySize) {\n    procs.commandEncoderCopyTextureToTexture(commandEncoder, source, destination, copySize);\n}\nWGPUCommandBuffer wgpuCommandEncoderFinish(WGPUCommandEncoder commandEncoder, WGPUCommandBufferDescriptor const * descriptor) {\nreturn     procs.commandEncoderFinish(commandEncoder, descriptor);\n}\nvoid wgpuCommandEncoderInsertDebugMarker(WGPUCommandEncoder commandEncoder, char const * groupLabel) {\n    procs.commandEncoderInsertDebugMarker(commandEncoder, groupLabel);\n}\nvoid wgpuCommandEncoderPopDebugGroup(WGPUCommandEncoder commandEncoder) {\n    procs.commandEncoderPopDebugGroup(commandEncoder);\n}\nvoid wgpuCommandEncoderPushDebugGroup(WGPUCommandEncoder commandEncoder, char const * groupLabel) {\n    procs.commandEncoderPushDebugGroup(commandEncoder, groupLabel);\n}\nvoid wgpuCommandEncoderReference(WGPUCommandEncoder commandEncoder) {\n    procs.commandEncoderReference(commandEncoder);\n}\nvoid wgpuCommandEncoderRelease(WGPUCommandEncoder commandEncoder) {\n    procs.commandEncoderRelease(commandEncoder);\n}\n\nvoid wgpuComputePassEncoderDispatch(WGPUComputePassEncoder computePassEncoder, uint32_t x, uint32_t y, uint32_t z) {\n    procs.computePassEncoderDispatch(computePassEncoder, x, y, z);\n}\nvoid wgpuComputePassEncoderDispatchIndirect(WGPUComputePassEncoder computePassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n    procs.computePassEncoderDispatchIndirect(computePassEncoder, indirectBuffer, indirectOffset);\n}\nvoid wgpuComputePassEncoderEndPass(WGPUComputePassEncoder computePassEncoder) {\n    procs.computePassEncoderEndPass(computePassEncoder);\n}\nvoid wgpuComputePassEncoderInsertDebugMarker(WGPUComputePassEncoder computePassEncoder, char const * groupLabel) {\n    procs.computePassEncoderInsertDebugMarker(computePassEncoder, groupLabel);\n}\nvoid wgpuComputePassEncoderPopDebugGroup(WGPUComputePassEncoder computePassEncoder) {\n    procs.computePassEncoderPopDebugGroup(computePassEncoder);\n}\nvoid wgpuComputePassEncoderPushDebugGroup(WGPUComputePassEncoder computePassEncoder, char const * groupLabel) {\n    procs.computePassEncoderPushDebugGroup(computePassEncoder, groupLabel);\n}\nvoid wgpuComputePassEncoderSetBindGroup(WGPUComputePassEncoder computePassEncoder, uint32_t groupIndex, WGPUBindGroup group, uint32_t dynamicOffsetCount, uint32_t const * dynamicOffsets) {\n    procs.computePassEncoderSetBindGroup(computePassEncoder, groupIndex, group, dynamicOffsetCount, dynamicOffsets);\n}\nvoid wgpuComputePassEncoderSetPipeline(WGPUComputePassEncoder computePassEncoder, WGPUComputePipeline pipeline) {\n    procs.computePassEncoderSetPipeline(computePassEncoder, pipeline);\n}\nvoid wgpuComputePassEncoderReference(WGPUComputePassEncoder computePassEncoder) {\n    procs.computePassEncoderReference(computePassEncoder);\n}\nvoid wgpuComputePassEncoderRelease(WGPUComputePassEncoder computePassEncoder) {\n    procs.computePassEncoderRelease(computePassEncoder);\n}\n\nWGPUBindGroupLayout wgpuComputePipelineGetBindGroupLayout(WGPUComputePipeline computePipeline, uint32_t groupIndex) {\nreturn     procs.computePipelineGetBindGroupLayout(computePipeline, groupIndex);\n}\nvoid wgpuComputePipelineReference(WGPUComputePipeline computePipeline) {\n    procs.computePipelineReference(computePipeline);\n}\nvoid wgpuComputePipelineRelease(WGPUComputePipeline computePipeline) {\n    procs.computePipelineRelease(computePipeline);\n}\n\nWGPUBindGroup wgpuDeviceCreateBindGroup(WGPUDevice device, WGPUBindGroupDescriptor const * descriptor) {\nreturn     procs.deviceCreateBindGroup(device, descriptor);\n}\nWGPUBindGroupLayout wgpuDeviceCreateBindGroupLayout(WGPUDevice device, WGPUBindGroupLayoutDescriptor const * descriptor) {\nreturn     procs.deviceCreateBindGroupLayout(device, descriptor);\n}\nWGPUBuffer wgpuDeviceCreateBuffer(WGPUDevice device, WGPUBufferDescriptor const * descriptor) {\nreturn     procs.deviceCreateBuffer(device, descriptor);\n}\nWGPUCreateBufferMappedResult wgpuDeviceCreateBufferMapped(WGPUDevice device, WGPUBufferDescriptor const * descriptor) {\nreturn     procs.deviceCreateBufferMapped(device, descriptor);\n}\nWGPUCommandEncoder wgpuDeviceCreateCommandEncoder(WGPUDevice device, WGPUCommandEncoderDescriptor const * descriptor) {\nreturn     procs.deviceCreateCommandEncoder(device, descriptor);\n}\nWGPUComputePipeline wgpuDeviceCreateComputePipeline(WGPUDevice device, WGPUComputePipelineDescriptor const * descriptor) {\nreturn     procs.deviceCreateComputePipeline(device, descriptor);\n}\nWGPUBuffer wgpuDeviceCreateErrorBuffer(WGPUDevice device) {\nreturn     procs.deviceCreateErrorBuffer(device);\n}\nWGPUPipelineLayout wgpuDeviceCreatePipelineLayout(WGPUDevice device, WGPUPipelineLayoutDescriptor const * descriptor) {\nreturn     procs.deviceCreatePipelineLayout(device, descriptor);\n}\nWGPUQuerySet wgpuDeviceCreateQuerySet(WGPUDevice device, WGPUQuerySetDescriptor const * descriptor) {\nreturn     procs.deviceCreateQuerySet(device, descriptor);\n}\nWGPURenderBundleEncoder wgpuDeviceCreateRenderBundleEncoder(WGPUDevice device, WGPURenderBundleEncoderDescriptor const * descriptor) {\nreturn     procs.deviceCreateRenderBundleEncoder(device, descriptor);\n}\nWGPURenderPipeline wgpuDeviceCreateRenderPipeline(WGPUDevice device, WGPURenderPipelineDescriptor const * descriptor) {\nreturn     procs.deviceCreateRenderPipeline(device, descriptor);\n}\nWGPUSampler wgpuDeviceCreateSampler(WGPUDevice device, WGPUSamplerDescriptor const * descriptor) {\nreturn     procs.deviceCreateSampler(device, descriptor);\n}\nWGPUShaderModule wgpuDeviceCreateShaderModule(WGPUDevice device, WGPUShaderModuleDescriptor const * descriptor) {\nreturn     procs.deviceCreateShaderModule(device, descriptor);\n}\nWGPUSwapChain wgpuDeviceCreateSwapChain(WGPUDevice device, WGPUSurface surface, WGPUSwapChainDescriptor const * descriptor) {\nreturn     procs.deviceCreateSwapChain(device, surface, descriptor);\n}\nWGPUTexture wgpuDeviceCreateTexture(WGPUDevice device, WGPUTextureDescriptor const * descriptor) {\nreturn     procs.deviceCreateTexture(device, descriptor);\n}\nWGPUQueue wgpuDeviceGetDefaultQueue(WGPUDevice device) {\nreturn     procs.deviceGetDefaultQueue(device);\n}\nvoid wgpuDeviceInjectError(WGPUDevice device, WGPUErrorType type, char const * message) {\n    procs.deviceInjectError(device, type, message);\n}\nvoid wgpuDeviceLoseForTesting(WGPUDevice device) {\n    procs.deviceLoseForTesting(device);\n}\nbool wgpuDevicePopErrorScope(WGPUDevice device, WGPUErrorCallback callback, void * userdata) {\nreturn     procs.devicePopErrorScope(device, callback, userdata);\n}\nvoid wgpuDevicePushErrorScope(WGPUDevice device, WGPUErrorFilter filter) {\n    procs.devicePushErrorScope(device, filter);\n}\nvoid wgpuDeviceSetDeviceLostCallback(WGPUDevice device, WGPUDeviceLostCallback callback, void * userdata) {\n    procs.deviceSetDeviceLostCallback(device, callback, userdata);\n}\nvoid wgpuDeviceSetUncapturedErrorCallback(WGPUDevice device, WGPUErrorCallback callback, void * userdata) {\n    procs.deviceSetUncapturedErrorCallback(device, callback, userdata);\n}\nvoid wgpuDeviceTick(WGPUDevice device) {\n    procs.deviceTick(device);\n}\nvoid wgpuDeviceReference(WGPUDevice device) {\n    procs.deviceReference(device);\n}\nvoid wgpuDeviceRelease(WGPUDevice device) {\n    procs.deviceRelease(device);\n}\n\nuint64_t wgpuFenceGetCompletedValue(WGPUFence fence) {\nreturn     procs.fenceGetCompletedValue(fence);\n}\nvoid wgpuFenceOnCompletion(WGPUFence fence, uint64_t value, WGPUFenceOnCompletionCallback callback, void * userdata) {\n    procs.fenceOnCompletion(fence, value, callback, userdata);\n}\nvoid wgpuFenceReference(WGPUFence fence) {\n    procs.fenceReference(fence);\n}\nvoid wgpuFenceRelease(WGPUFence fence) {\n    procs.fenceRelease(fence);\n}\n\nWGPUSurface wgpuInstanceCreateSurface(WGPUInstance instance, WGPUSurfaceDescriptor const * descriptor) {\nreturn     procs.instanceCreateSurface(instance, descriptor);\n}\nvoid wgpuInstanceReference(WGPUInstance instance) {\n    procs.instanceReference(instance);\n}\nvoid wgpuInstanceRelease(WGPUInstance instance) {\n    procs.instanceRelease(instance);\n}\n\nvoid wgpuPipelineLayoutReference(WGPUPipelineLayout pipelineLayout) {\n    procs.pipelineLayoutReference(pipelineLayout);\n}\nvoid wgpuPipelineLayoutRelease(WGPUPipelineLayout pipelineLayout) {\n    procs.pipelineLayoutRelease(pipelineLayout);\n}\n\nvoid wgpuQuerySetDestroy(WGPUQuerySet querySet) {\n    procs.querySetDestroy(querySet);\n}\nvoid wgpuQuerySetReference(WGPUQuerySet querySet) {\n    procs.querySetReference(querySet);\n}\nvoid wgpuQuerySetRelease(WGPUQuerySet querySet) {\n    procs.querySetRelease(querySet);\n}\n\nWGPUFence wgpuQueueCreateFence(WGPUQueue queue, WGPUFenceDescriptor const * descriptor) {\nreturn     procs.queueCreateFence(queue, descriptor);\n}\nvoid wgpuQueueSignal(WGPUQueue queue, WGPUFence fence, uint64_t signalValue) {\n    procs.queueSignal(queue, fence, signalValue);\n}\nvoid wgpuQueueSubmit(WGPUQueue queue, uint32_t commandCount, WGPUCommandBuffer const * commands) {\n    procs.queueSubmit(queue, commandCount, commands);\n}\nvoid wgpuQueueWriteBuffer(WGPUQueue queue, WGPUBuffer buffer, uint64_t bufferOffset, void const * data, size_t size) {\n    procs.queueWriteBuffer(queue, buffer, bufferOffset, data, size);\n}\nvoid wgpuQueueReference(WGPUQueue queue) {\n    procs.queueReference(queue);\n}\nvoid wgpuQueueRelease(WGPUQueue queue) {\n    procs.queueRelease(queue);\n}\n\nvoid wgpuRenderBundleReference(WGPURenderBundle renderBundle) {\n    procs.renderBundleReference(renderBundle);\n}\nvoid wgpuRenderBundleRelease(WGPURenderBundle renderBundle) {\n    procs.renderBundleRelease(renderBundle);\n}\n\nvoid wgpuRenderBundleEncoderDraw(WGPURenderBundleEncoder renderBundleEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) {\n    procs.renderBundleEncoderDraw(renderBundleEncoder, vertexCount, instanceCount, firstVertex, firstInstance);\n}\nvoid wgpuRenderBundleEncoderDrawIndexed(WGPURenderBundleEncoder renderBundleEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance) {\n    procs.renderBundleEncoderDrawIndexed(renderBundleEncoder, indexCount, instanceCount, firstIndex, baseVertex, firstInstance);\n}\nvoid wgpuRenderBundleEncoderDrawIndexedIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n    procs.renderBundleEncoderDrawIndexedIndirect(renderBundleEncoder, indirectBuffer, indirectOffset);\n}\nvoid wgpuRenderBundleEncoderDrawIndirect(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n    procs.renderBundleEncoderDrawIndirect(renderBundleEncoder, indirectBuffer, indirectOffset);\n}\nWGPURenderBundle wgpuRenderBundleEncoderFinish(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderBundleDescriptor const * descriptor) {\nreturn     procs.renderBundleEncoderFinish(renderBundleEncoder, descriptor);\n}\nvoid wgpuRenderBundleEncoderInsertDebugMarker(WGPURenderBundleEncoder renderBundleEncoder, char const * groupLabel) {\n    procs.renderBundleEncoderInsertDebugMarker(renderBundleEncoder, groupLabel);\n}\nvoid wgpuRenderBundleEncoderPopDebugGroup(WGPURenderBundleEncoder renderBundleEncoder) {\n    procs.renderBundleEncoderPopDebugGroup(renderBundleEncoder);\n}\nvoid wgpuRenderBundleEncoderPushDebugGroup(WGPURenderBundleEncoder renderBundleEncoder, char const * groupLabel) {\n    procs.renderBundleEncoderPushDebugGroup(renderBundleEncoder, groupLabel);\n}\nvoid wgpuRenderBundleEncoderSetBindGroup(WGPURenderBundleEncoder renderBundleEncoder, uint32_t groupIndex, WGPUBindGroup group, uint32_t dynamicOffsetCount, uint32_t const * dynamicOffsets) {\n    procs.renderBundleEncoderSetBindGroup(renderBundleEncoder, groupIndex, group, dynamicOffsetCount, dynamicOffsets);\n}\nvoid wgpuRenderBundleEncoderSetIndexBuffer(WGPURenderBundleEncoder renderBundleEncoder, WGPUBuffer buffer, uint64_t offset, uint64_t size) {\n    procs.renderBundleEncoderSetIndexBuffer(renderBundleEncoder, buffer, offset, size);\n}\nvoid wgpuRenderBundleEncoderSetPipeline(WGPURenderBundleEncoder renderBundleEncoder, WGPURenderPipeline pipeline) {\n    procs.renderBundleEncoderSetPipeline(renderBundleEncoder, pipeline);\n}\nvoid wgpuRenderBundleEncoderSetVertexBuffer(WGPURenderBundleEncoder renderBundleEncoder, uint32_t slot, WGPUBuffer buffer, uint64_t offset, uint64_t size) {\n    procs.renderBundleEncoderSetVertexBuffer(renderBundleEncoder, slot, buffer, offset, size);\n}\nvoid wgpuRenderBundleEncoderReference(WGPURenderBundleEncoder renderBundleEncoder) {\n    procs.renderBundleEncoderReference(renderBundleEncoder);\n}\nvoid wgpuRenderBundleEncoderRelease(WGPURenderBundleEncoder renderBundleEncoder) {\n    procs.renderBundleEncoderRelease(renderBundleEncoder);\n}\n\nvoid wgpuRenderPassEncoderDraw(WGPURenderPassEncoder renderPassEncoder, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) {\n    procs.renderPassEncoderDraw(renderPassEncoder, vertexCount, instanceCount, firstVertex, firstInstance);\n}\nvoid wgpuRenderPassEncoderDrawIndexed(WGPURenderPassEncoder renderPassEncoder, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t baseVertex, uint32_t firstInstance) {\n    procs.renderPassEncoderDrawIndexed(renderPassEncoder, indexCount, instanceCount, firstIndex, baseVertex, firstInstance);\n}\nvoid wgpuRenderPassEncoderDrawIndexedIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n    procs.renderPassEncoderDrawIndexedIndirect(renderPassEncoder, indirectBuffer, indirectOffset);\n}\nvoid wgpuRenderPassEncoderDrawIndirect(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer indirectBuffer, uint64_t indirectOffset) {\n    procs.renderPassEncoderDrawIndirect(renderPassEncoder, indirectBuffer, indirectOffset);\n}\nvoid wgpuRenderPassEncoderEndPass(WGPURenderPassEncoder renderPassEncoder) {\n    procs.renderPassEncoderEndPass(renderPassEncoder);\n}\nvoid wgpuRenderPassEncoderExecuteBundles(WGPURenderPassEncoder renderPassEncoder, uint32_t bundlesCount, WGPURenderBundle const * bundles) {\n    procs.renderPassEncoderExecuteBundles(renderPassEncoder, bundlesCount, bundles);\n}\nvoid wgpuRenderPassEncoderInsertDebugMarker(WGPURenderPassEncoder renderPassEncoder, char const * groupLabel) {\n    procs.renderPassEncoderInsertDebugMarker(renderPassEncoder, groupLabel);\n}\nvoid wgpuRenderPassEncoderPopDebugGroup(WGPURenderPassEncoder renderPassEncoder) {\n    procs.renderPassEncoderPopDebugGroup(renderPassEncoder);\n}\nvoid wgpuRenderPassEncoderPushDebugGroup(WGPURenderPassEncoder renderPassEncoder, char const * groupLabel) {\n    procs.renderPassEncoderPushDebugGroup(renderPassEncoder, groupLabel);\n}\nvoid wgpuRenderPassEncoderSetBindGroup(WGPURenderPassEncoder renderPassEncoder, uint32_t groupIndex, WGPUBindGroup group, uint32_t dynamicOffsetCount, uint32_t const * dynamicOffsets) {\n    procs.renderPassEncoderSetBindGroup(renderPassEncoder, groupIndex, group, dynamicOffsetCount, dynamicOffsets);\n}\nvoid wgpuRenderPassEncoderSetBlendColor(WGPURenderPassEncoder renderPassEncoder, WGPUColor const * color) {\n    procs.renderPassEncoderSetBlendColor(renderPassEncoder, color);\n}\nvoid wgpuRenderPassEncoderSetIndexBuffer(WGPURenderPassEncoder renderPassEncoder, WGPUBuffer buffer, uint64_t offset, uint64_t size) {\n    procs.renderPassEncoderSetIndexBuffer(renderPassEncoder, buffer, offset, size);\n}\nvoid wgpuRenderPassEncoderSetPipeline(WGPURenderPassEncoder renderPassEncoder, WGPURenderPipeline pipeline) {\n    procs.renderPassEncoderSetPipeline(renderPassEncoder, pipeline);\n}\nvoid wgpuRenderPassEncoderSetScissorRect(WGPURenderPassEncoder renderPassEncoder, uint32_t x, uint32_t y, uint32_t width, uint32_t height) {\n    procs.renderPassEncoderSetScissorRect(renderPassEncoder, x, y, width, height);\n}\nvoid wgpuRenderPassEncoderSetStencilReference(WGPURenderPassEncoder renderPassEncoder, uint32_t reference) {\n    procs.renderPassEncoderSetStencilReference(renderPassEncoder, reference);\n}\nvoid wgpuRenderPassEncoderSetVertexBuffer(WGPURenderPassEncoder renderPassEncoder, uint32_t slot, WGPUBuffer buffer, uint64_t offset, uint64_t size) {\n    procs.renderPassEncoderSetVertexBuffer(renderPassEncoder, slot, buffer, offset, size);\n}\nvoid wgpuRenderPassEncoderSetViewport(WGPURenderPassEncoder renderPassEncoder, float x, float y, float width, float height, float minDepth, float maxDepth) {\n    procs.renderPassEncoderSetViewport(renderPassEncoder, x, y, width, height, minDepth, maxDepth);\n}\nvoid wgpuRenderPassEncoderReference(WGPURenderPassEncoder renderPassEncoder) {\n    procs.renderPassEncoderReference(renderPassEncoder);\n}\nvoid wgpuRenderPassEncoderRelease(WGPURenderPassEncoder renderPassEncoder) {\n    procs.renderPassEncoderRelease(renderPassEncoder);\n}\n\nWGPUBindGroupLayout wgpuRenderPipelineGetBindGroupLayout(WGPURenderPipeline renderPipeline, uint32_t groupIndex) {\nreturn     procs.renderPipelineGetBindGroupLayout(renderPipeline, groupIndex);\n}\nvoid wgpuRenderPipelineReference(WGPURenderPipeline renderPipeline) {\n    procs.renderPipelineReference(renderPipeline);\n}\nvoid wgpuRenderPipelineRelease(WGPURenderPipeline renderPipeline) {\n    procs.renderPipelineRelease(renderPipeline);\n}\n\nvoid wgpuSamplerReference(WGPUSampler sampler) {\n    procs.samplerReference(sampler);\n}\nvoid wgpuSamplerRelease(WGPUSampler sampler) {\n    procs.samplerRelease(sampler);\n}\n\nvoid wgpuShaderModuleReference(WGPUShaderModule shaderModule) {\n    procs.shaderModuleReference(shaderModule);\n}\nvoid wgpuShaderModuleRelease(WGPUShaderModule shaderModule) {\n    procs.shaderModuleRelease(shaderModule);\n}\n\nvoid wgpuSurfaceReference(WGPUSurface surface) {\n    procs.surfaceReference(surface);\n}\nvoid wgpuSurfaceRelease(WGPUSurface surface) {\n    procs.surfaceRelease(surface);\n}\n\nvoid wgpuSwapChainConfigure(WGPUSwapChain swapChain, WGPUTextureFormat format, WGPUTextureUsageFlags allowedUsage, uint32_t width, uint32_t height) {\n    procs.swapChainConfigure(swapChain, format, allowedUsage, width, height);\n}\nWGPUTextureView wgpuSwapChainGetCurrentTextureView(WGPUSwapChain swapChain) {\nreturn     procs.swapChainGetCurrentTextureView(swapChain);\n}\nvoid wgpuSwapChainPresent(WGPUSwapChain swapChain) {\n    procs.swapChainPresent(swapChain);\n}\nvoid wgpuSwapChainReference(WGPUSwapChain swapChain) {\n    procs.swapChainReference(swapChain);\n}\nvoid wgpuSwapChainRelease(WGPUSwapChain swapChain) {\n    procs.swapChainRelease(swapChain);\n}\n\nWGPUTextureView wgpuTextureCreateView(WGPUTexture texture, WGPUTextureViewDescriptor const * descriptor) {\nreturn     procs.textureCreateView(texture, descriptor);\n}\nvoid wgpuTextureDestroy(WGPUTexture texture) {\n    procs.textureDestroy(texture);\n}\nvoid wgpuTextureReference(WGPUTexture texture) {\n    procs.textureReference(texture);\n}\nvoid wgpuTextureRelease(WGPUTexture texture) {\n    procs.textureRelease(texture);\n}\n\nvoid wgpuTextureViewReference(WGPUTextureView textureView) {\n    procs.textureViewReference(textureView);\n}\nvoid wgpuTextureViewRelease(WGPUTextureView textureView) {\n    procs.textureViewRelease(textureView);\n}\n\n"}
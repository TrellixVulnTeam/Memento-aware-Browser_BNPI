// Generated by third_party/blink/renderer/build/scripts/gperf.py
/* C++ code produced by gperf version 3.1 */
/* Command-line: gperf --key-positions='*' -P -n -m 50 -D  */

#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
/* The character set is not based on ISO-646.  */
#error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
#endif


// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "third_party/blink/renderer/core/css/parser/at_rule_descriptors.h"

#include "third_party/blink/renderer/core/css/hash_tools.h"

#ifdef _MSC_VER
// Disable the warnings from casting a 64-bit pointer to 32-bit long
// warning C4302: 'type cast': truncation from 'char (*)[28]' to 'long'
// warning C4311: 'type cast': pointer truncation from 'char (*)[18]' to 'long'
#pragma warning(disable : 4302 4311)
#endif

namespace blink {

namespace {

/* maximum key range = 43, duplicates = 0 */

class AtRuleDescriptorHash
{
private:
  static inline unsigned int descriptor_hash_function (const char *str, size_t len);
public:
  static const struct Property *findDescriptorImpl (const char *str, size_t len);
};

inline unsigned int
AtRuleDescriptorHash::descriptor_hash_function (const char *str, size_t len)
{
  static const unsigned char asso_values[] =
    {
      46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
      46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
      46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
      46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
      46, 46, 46, 46, 46,  1, 46, 46, 46, 46,
      46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
      46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
      46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
      46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
      46, 46, 46, 46, 46, 46, 46,  1,  1,  1,
       1,  1,  1,  1,  1,  1, 46,  1,  3,  1,
       1,  1, 12, 46, 12,  1,  1,  1, 23,  1,
      26,  1,  1, 46, 46, 46, 46, 46, 46, 46,
      46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
      46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
      46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
      46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
      46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
      46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
      46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
      46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
      46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
      46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
      46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
      46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
      46, 46, 46, 46, 46, 46
    };
  unsigned int hval = 0;

  switch (len)
    {
      default:
        hval += asso_values[static_cast<unsigned char>(str[28])];
        FALLTHROUGH;
      case 28:
        hval += asso_values[static_cast<unsigned char>(str[27])];
        FALLTHROUGH;
      case 27:
        hval += asso_values[static_cast<unsigned char>(str[26])];
        FALLTHROUGH;
      case 26:
        hval += asso_values[static_cast<unsigned char>(str[25])];
        FALLTHROUGH;
      case 25:
        hval += asso_values[static_cast<unsigned char>(str[24])];
        FALLTHROUGH;
      case 24:
        hval += asso_values[static_cast<unsigned char>(str[23])];
        FALLTHROUGH;
      case 23:
        hval += asso_values[static_cast<unsigned char>(str[22])];
        FALLTHROUGH;
      case 22:
        hval += asso_values[static_cast<unsigned char>(str[21])];
        FALLTHROUGH;
      case 21:
        hval += asso_values[static_cast<unsigned char>(str[20])];
        FALLTHROUGH;
      case 20:
        hval += asso_values[static_cast<unsigned char>(str[19])];
        FALLTHROUGH;
      case 19:
        hval += asso_values[static_cast<unsigned char>(str[18])];
        FALLTHROUGH;
      case 18:
        hval += asso_values[static_cast<unsigned char>(str[17])];
        FALLTHROUGH;
      case 17:
        hval += asso_values[static_cast<unsigned char>(str[16])];
        FALLTHROUGH;
      case 16:
        hval += asso_values[static_cast<unsigned char>(str[15])];
        FALLTHROUGH;
      case 15:
        hval += asso_values[static_cast<unsigned char>(str[14])];
        FALLTHROUGH;
      case 14:
        hval += asso_values[static_cast<unsigned char>(str[13])];
        FALLTHROUGH;
      case 13:
        hval += asso_values[static_cast<unsigned char>(str[12])];
        FALLTHROUGH;
      case 12:
        hval += asso_values[static_cast<unsigned char>(str[11])];
        FALLTHROUGH;
      case 11:
        hval += asso_values[static_cast<unsigned char>(str[10])];
        FALLTHROUGH;
      case 10:
        hval += asso_values[static_cast<unsigned char>(str[9])];
        FALLTHROUGH;
      case 9:
        hval += asso_values[static_cast<unsigned char>(str[8])];
        FALLTHROUGH;
      case 8:
        hval += asso_values[static_cast<unsigned char>(str[7])];
        FALLTHROUGH;
      case 7:
        hval += asso_values[static_cast<unsigned char>(str[6])];
        FALLTHROUGH;
      case 6:
        hval += asso_values[static_cast<unsigned char>(str[5])];
        FALLTHROUGH;
      case 5:
        hval += asso_values[static_cast<unsigned char>(str[4])];
        FALLTHROUGH;
      case 4:
        hval += asso_values[static_cast<unsigned char>(str[3])];
        FALLTHROUGH;
      case 3:
        hval += asso_values[static_cast<unsigned char>(str[2])];
        FALLTHROUGH;
      case 2:
        hval += asso_values[static_cast<unsigned char>(str[1])];
        FALLTHROUGH;
      case 1:
        hval += asso_values[static_cast<unsigned char>(str[0])];
        break;
    }
  return hval;
}

struct stringpool_t
  {
    char stringpool_str0[sizeof("end")];
    char stringpool_str1[sizeof("zoom")];
    char stringpool_str2[sizeof("width")];
    char stringpool_str3[sizeof("height")];
    char stringpool_str4[sizeof("min-zoom")];
    char stringpool_str5[sizeof("min-width")];
    char stringpool_str6[sizeof("min-height")];
    char stringpool_str7[sizeof("font-weight")];
    char stringpool_str8[sizeof("font-style")];
    char stringpool_str9[sizeof("font-family")];
    char stringpool_str10[sizeof("src")];
    char stringpool_str11[sizeof("start")];
    char stringpool_str12[sizeof("source")];
    char stringpool_str13[sizeof("inherits")];
    char stringpool_str14[sizeof("user-zoom")];
    char stringpool_str15[sizeof("time-range")];
    char stringpool_str16[sizeof("orientation")];
    char stringpool_str17[sizeof("font-stretch")];
    char stringpool_str18[sizeof("unicode-range")];
    char stringpool_str19[sizeof("font-display")];
    char stringpool_str20[sizeof("syntax")];
    char stringpool_str21[sizeof("font-feature-settings")];
    char stringpool_str22[sizeof("max-zoom")];
    char stringpool_str23[sizeof("max-width")];
    char stringpool_str24[sizeof("max-height")];
    char stringpool_str25[sizeof("initial-value")];
    char stringpool_str26[sizeof("-webkit-font-feature-settings")];
    char stringpool_str27[sizeof("font-variant")];
  };
static const struct stringpool_t stringpool_contents =
  {
    "end",
    "zoom",
    "width",
    "height",
    "min-zoom",
    "min-width",
    "min-height",
    "font-weight",
    "font-style",
    "font-family",
    "src",
    "start",
    "source",
    "inherits",
    "user-zoom",
    "time-range",
    "orientation",
    "font-stretch",
    "unicode-range",
    "font-display",
    "syntax",
    "font-feature-settings",
    "max-zoom",
    "max-width",
    "max-height",
    "initial-value",
    "-webkit-font-feature-settings",
    "font-variant"
  };
#define stringpool ((const char *) &stringpool_contents)
const struct Property *
AtRuleDescriptorHash::findDescriptorImpl (const char *str, size_t len)
{
  enum
    {
      TOTAL_KEYWORDS = 28,
      MIN_WORD_LENGTH = 3,
      MAX_WORD_LENGTH = 29,
      MIN_HASH_VALUE = 3,
      MAX_HASH_VALUE = 45
    };

  static const struct Property descriptor_word_list[] =
    {
      {(int)(size_t)&((struct stringpool_t *)0)->stringpool_str0, static_cast<int>(AtRuleDescriptorID::End)},
      {(int)(size_t)&((struct stringpool_t *)0)->stringpool_str1, static_cast<int>(AtRuleDescriptorID::Zoom)},
      {(int)(size_t)&((struct stringpool_t *)0)->stringpool_str2, static_cast<int>(AtRuleDescriptorID::Width)},
      {(int)(size_t)&((struct stringpool_t *)0)->stringpool_str3, static_cast<int>(AtRuleDescriptorID::Height)},
      {(int)(size_t)&((struct stringpool_t *)0)->stringpool_str4, static_cast<int>(AtRuleDescriptorID::MinZoom)},
      {(int)(size_t)&((struct stringpool_t *)0)->stringpool_str5, static_cast<int>(AtRuleDescriptorID::MinWidth)},
      {(int)(size_t)&((struct stringpool_t *)0)->stringpool_str6, static_cast<int>(AtRuleDescriptorID::MinHeight)},
      {(int)(size_t)&((struct stringpool_t *)0)->stringpool_str7, static_cast<int>(AtRuleDescriptorID::FontWeight)},
      {(int)(size_t)&((struct stringpool_t *)0)->stringpool_str8, static_cast<int>(AtRuleDescriptorID::FontStyle)},
      {(int)(size_t)&((struct stringpool_t *)0)->stringpool_str9, static_cast<int>(AtRuleDescriptorID::FontFamily)},
      {(int)(size_t)&((struct stringpool_t *)0)->stringpool_str10, static_cast<int>(AtRuleDescriptorID::Src)},
      {(int)(size_t)&((struct stringpool_t *)0)->stringpool_str11, static_cast<int>(AtRuleDescriptorID::Start)},
      {(int)(size_t)&((struct stringpool_t *)0)->stringpool_str12, static_cast<int>(AtRuleDescriptorID::Source)},
      {(int)(size_t)&((struct stringpool_t *)0)->stringpool_str13, static_cast<int>(AtRuleDescriptorID::Inherits)},
      {(int)(size_t)&((struct stringpool_t *)0)->stringpool_str14, static_cast<int>(AtRuleDescriptorID::UserZoom)},
      {(int)(size_t)&((struct stringpool_t *)0)->stringpool_str15, static_cast<int>(AtRuleDescriptorID::TimeRange)},
      {(int)(size_t)&((struct stringpool_t *)0)->stringpool_str16, static_cast<int>(AtRuleDescriptorID::Orientation)},
      {(int)(size_t)&((struct stringpool_t *)0)->stringpool_str17, static_cast<int>(AtRuleDescriptorID::FontStretch)},
      {(int)(size_t)&((struct stringpool_t *)0)->stringpool_str18, static_cast<int>(AtRuleDescriptorID::UnicodeRange)},
      {(int)(size_t)&((struct stringpool_t *)0)->stringpool_str19, static_cast<int>(AtRuleDescriptorID::FontDisplay)},
      {(int)(size_t)&((struct stringpool_t *)0)->stringpool_str20, static_cast<int>(AtRuleDescriptorID::Syntax)},
      {(int)(size_t)&((struct stringpool_t *)0)->stringpool_str21, static_cast<int>(AtRuleDescriptorID::FontFeatureSettings)},
      {(int)(size_t)&((struct stringpool_t *)0)->stringpool_str22, static_cast<int>(AtRuleDescriptorID::MaxZoom)},
      {(int)(size_t)&((struct stringpool_t *)0)->stringpool_str23, static_cast<int>(AtRuleDescriptorID::MaxWidth)},
      {(int)(size_t)&((struct stringpool_t *)0)->stringpool_str24, static_cast<int>(AtRuleDescriptorID::MaxHeight)},
      {(int)(size_t)&((struct stringpool_t *)0)->stringpool_str25, static_cast<int>(AtRuleDescriptorID::InitialValue)},
      {(int)(size_t)&((struct stringpool_t *)0)->stringpool_str26, static_cast<int>(AtRuleDescriptorID::FontFeatureSettings)},
      {(int)(size_t)&((struct stringpool_t *)0)->stringpool_str27, static_cast<int>(AtRuleDescriptorID::FontVariant)}
    };

  static const signed char lookup[] =
    {
      -1, -1, -1,  0,  1,  2,  3, -1,  4,  5,  6,  7,  8,  9,
      10, -1, 11, 12, -1, 13, 14, 15, 16, 17, 18, 19, -1, -1,
      -1, -1, -1, 20, 21, 22, 23, 24, -1, -1, -1, 25, 26, -1,
      -1, -1, -1, 27
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = descriptor_hash_function (str, len);

      if (key <= MAX_HASH_VALUE)
        {
          int index = lookup[key];

          if (index >= 0)
            {
              const char *s = descriptor_word_list[index].name_offset + stringpool;

              if (*str == *s && !strncmp (str + 1, s + 1, len - 1) && s[len] == '\0')
                return &descriptor_word_list[index];
            }
        }
    }
  return 0;
}


const Property* FindDescriptor(const char* str, unsigned int len) {
  return AtRuleDescriptorHash::findDescriptorImpl(str, len);
}

template <typename CharacterType>
static AtRuleDescriptorID AsAtRuleDescriptorID(
    const CharacterType* descriptor_name,
    unsigned length) {
  if (length == 0)
    return AtRuleDescriptorID::Invalid;
  if (length > 29)
    return AtRuleDescriptorID::Invalid;

  char buffer[29 + 1];  // 1 for null character

  for (unsigned i = 0; i != length; ++i) {
    CharacterType c = descriptor_name[i];
    if (c == 0 || c >= 0x7F)
      return AtRuleDescriptorID::Invalid;  // illegal character
    buffer[i] = ToASCIILower(c);
  }
  buffer[length] = '\0';

  const char* name = buffer;
  const Property* hash_table_entry = FindDescriptor(name, length);
  if (!hash_table_entry)
    return AtRuleDescriptorID::Invalid;
  return static_cast<AtRuleDescriptorID>(hash_table_entry->id);
}

}  // namespace

AtRuleDescriptorID AsAtRuleDescriptorID(StringView string) {
  unsigned length = string.length();
  return string.Is8Bit()
             ? AsAtRuleDescriptorID(string.Characters8(), length)
             : AsAtRuleDescriptorID(string.Characters16(), length);
}

CSSPropertyID AtRuleDescriptorIDAsCSSPropertyID(AtRuleDescriptorID id) {
  switch (id) {
  case AtRuleDescriptorID::End:
    return CSSPropertyID::kEnd;
  case AtRuleDescriptorID::FontDisplay:
    return CSSPropertyID::kFontDisplay;
  case AtRuleDescriptorID::FontFamily:
    return CSSPropertyID::kFontFamily;
  case AtRuleDescriptorID::FontFeatureSettings:
    return CSSPropertyID::kFontFeatureSettings;
  case AtRuleDescriptorID::FontStretch:
    return CSSPropertyID::kFontStretch;
  case AtRuleDescriptorID::FontStyle:
    return CSSPropertyID::kFontStyle;
  case AtRuleDescriptorID::FontVariant:
    return CSSPropertyID::kFontVariant;
  case AtRuleDescriptorID::FontWeight:
    return CSSPropertyID::kFontWeight;
  case AtRuleDescriptorID::Height:
    return CSSPropertyID::kHeight;
  case AtRuleDescriptorID::Inherits:
    return CSSPropertyID::kInherits;
  case AtRuleDescriptorID::InitialValue:
    return CSSPropertyID::kInitialValue;
  case AtRuleDescriptorID::MaxHeight:
    return CSSPropertyID::kMaxHeight;
  case AtRuleDescriptorID::MaxWidth:
    return CSSPropertyID::kMaxWidth;
  case AtRuleDescriptorID::MaxZoom:
    return CSSPropertyID::kMaxZoom;
  case AtRuleDescriptorID::MinHeight:
    return CSSPropertyID::kMinHeight;
  case AtRuleDescriptorID::MinWidth:
    return CSSPropertyID::kMinWidth;
  case AtRuleDescriptorID::MinZoom:
    return CSSPropertyID::kMinZoom;
  case AtRuleDescriptorID::Orientation:
    return CSSPropertyID::kOrientation;
  case AtRuleDescriptorID::Source:
    return CSSPropertyID::kSource;
  case AtRuleDescriptorID::Src:
    return CSSPropertyID::kSrc;
  case AtRuleDescriptorID::Start:
    return CSSPropertyID::kStart;
  case AtRuleDescriptorID::Syntax:
    return CSSPropertyID::kSyntax;
  case AtRuleDescriptorID::TimeRange:
    return CSSPropertyID::kTimeRange;
  case AtRuleDescriptorID::UnicodeRange:
    return CSSPropertyID::kUnicodeRange;
  case AtRuleDescriptorID::UserZoom:
    return CSSPropertyID::kUserZoom;
  case AtRuleDescriptorID::Width:
    return CSSPropertyID::kWidth;
  case AtRuleDescriptorID::Zoom:
    return CSSPropertyID::kZoom;
  default:
    NOTREACHED();
    return CSSPropertyID::kInvalid;
  }
}

AtRuleDescriptorID CSSPropertyIDAsAtRuleDescriptor(CSSPropertyID id) {
  switch (id) {
  case CSSPropertyID::kEnd:
    return AtRuleDescriptorID::End;
  case CSSPropertyID::kFontDisplay:
    return AtRuleDescriptorID::FontDisplay;
  case CSSPropertyID::kFontFamily:
    return AtRuleDescriptorID::FontFamily;
  case CSSPropertyID::kFontFeatureSettings:
    return AtRuleDescriptorID::FontFeatureSettings;
  case CSSPropertyID::kFontStretch:
    return AtRuleDescriptorID::FontStretch;
  case CSSPropertyID::kFontStyle:
    return AtRuleDescriptorID::FontStyle;
  case CSSPropertyID::kFontVariant:
    return AtRuleDescriptorID::FontVariant;
  case CSSPropertyID::kFontWeight:
    return AtRuleDescriptorID::FontWeight;
  case CSSPropertyID::kHeight:
    return AtRuleDescriptorID::Height;
  case CSSPropertyID::kInherits:
    return AtRuleDescriptorID::Inherits;
  case CSSPropertyID::kInitialValue:
    return AtRuleDescriptorID::InitialValue;
  case CSSPropertyID::kMaxHeight:
    return AtRuleDescriptorID::MaxHeight;
  case CSSPropertyID::kMaxWidth:
    return AtRuleDescriptorID::MaxWidth;
  case CSSPropertyID::kMaxZoom:
    return AtRuleDescriptorID::MaxZoom;
  case CSSPropertyID::kMinHeight:
    return AtRuleDescriptorID::MinHeight;
  case CSSPropertyID::kMinWidth:
    return AtRuleDescriptorID::MinWidth;
  case CSSPropertyID::kMinZoom:
    return AtRuleDescriptorID::MinZoom;
  case CSSPropertyID::kOrientation:
    return AtRuleDescriptorID::Orientation;
  case CSSPropertyID::kSource:
    return AtRuleDescriptorID::Source;
  case CSSPropertyID::kSrc:
    return AtRuleDescriptorID::Src;
  case CSSPropertyID::kStart:
    return AtRuleDescriptorID::Start;
  case CSSPropertyID::kSyntax:
    return AtRuleDescriptorID::Syntax;
  case CSSPropertyID::kTimeRange:
    return AtRuleDescriptorID::TimeRange;
  case CSSPropertyID::kUnicodeRange:
    return AtRuleDescriptorID::UnicodeRange;
  case CSSPropertyID::kUserZoom:
    return AtRuleDescriptorID::UserZoom;
  case CSSPropertyID::kWidth:
    return AtRuleDescriptorID::Width;
  case CSSPropertyID::kZoom:
    return AtRuleDescriptorID::Zoom;
  default:
    return AtRuleDescriptorID::Invalid;
  }
}

}  // namespace blink

// This file is generated by TypeBuilder_cpp.template.

// Copyright (c) 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "third_party/blink/renderer/core/inspector/protocol/DOMDebugger.h"

#include "third_party/blink/renderer/core/inspector/protocol/Protocol.h"

#include "third_party/inspector_protocol/crdtp/cbor.h"
#include "third_party/inspector_protocol/crdtp/find_by_first.h"
#include "third_party/inspector_protocol/crdtp/serializer_traits.h"
#include "third_party/inspector_protocol/crdtp/span.h"

namespace blink {
namespace protocol {
namespace DOMDebugger {

// ------------- Enum values from types.

const char Metainfo::domainName[] = "DOMDebugger";
const char Metainfo::commandPrefix[] = "DOMDebugger.";
const char Metainfo::version[] = "1.3";

namespace DOMBreakpointTypeEnum {
const char SubtreeModified[] = "subtree-modified";
const char AttributeModified[] = "attribute-modified";
const char NodeRemoved[] = "node-removed";
} // namespace DOMBreakpointTypeEnum

std::unique_ptr<EventListener> EventListener::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<EventListener> result(new EventListener());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* typeValue = object->get("type");
    errors->SetName("type");
    result->m_type = ValueConversions<String>::fromValue(typeValue, errors);
    protocol::Value* useCaptureValue = object->get("useCapture");
    errors->SetName("useCapture");
    result->m_useCapture = ValueConversions<bool>::fromValue(useCaptureValue, errors);
    protocol::Value* passiveValue = object->get("passive");
    errors->SetName("passive");
    result->m_passive = ValueConversions<bool>::fromValue(passiveValue, errors);
    protocol::Value* onceValue = object->get("once");
    errors->SetName("once");
    result->m_once = ValueConversions<bool>::fromValue(onceValue, errors);
    protocol::Value* scriptIdValue = object->get("scriptId");
    errors->SetName("scriptId");
    result->m_scriptId = ValueConversions<String>::fromValue(scriptIdValue, errors);
    protocol::Value* lineNumberValue = object->get("lineNumber");
    errors->SetName("lineNumber");
    result->m_lineNumber = ValueConversions<int>::fromValue(lineNumberValue, errors);
    protocol::Value* columnNumberValue = object->get("columnNumber");
    errors->SetName("columnNumber");
    result->m_columnNumber = ValueConversions<int>::fromValue(columnNumberValue, errors);
    protocol::Value* handlerValue = object->get("handler");
    if (handlerValue) {
        errors->SetName("handler");
        result->m_handler = ValueConversions<v8_inspector::protocol::Runtime::API::RemoteObject>::fromValue(handlerValue, errors);
    }
    protocol::Value* originalHandlerValue = object->get("originalHandler");
    if (originalHandlerValue) {
        errors->SetName("originalHandler");
        result->m_originalHandler = ValueConversions<v8_inspector::protocol::Runtime::API::RemoteObject>::fromValue(originalHandlerValue, errors);
    }
    protocol::Value* backendNodeIdValue = object->get("backendNodeId");
    if (backendNodeIdValue) {
        errors->SetName("backendNodeId");
        result->m_backendNodeId = ValueConversions<int>::fromValue(backendNodeIdValue, errors);
    }
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> EventListener::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("type", ValueConversions<String>::toValue(m_type));
    result->setValue("useCapture", ValueConversions<bool>::toValue(m_useCapture));
    result->setValue("passive", ValueConversions<bool>::toValue(m_passive));
    result->setValue("once", ValueConversions<bool>::toValue(m_once));
    result->setValue("scriptId", ValueConversions<String>::toValue(m_scriptId));
    result->setValue("lineNumber", ValueConversions<int>::toValue(m_lineNumber));
    result->setValue("columnNumber", ValueConversions<int>::toValue(m_columnNumber));
    if (m_handler.isJust())
        result->setValue("handler", ValueConversions<v8_inspector::protocol::Runtime::API::RemoteObject>::toValue(m_handler.fromJust()));
    if (m_originalHandler.isJust())
        result->setValue("originalHandler", ValueConversions<v8_inspector::protocol::Runtime::API::RemoteObject>::toValue(m_originalHandler.fromJust()));
    if (m_backendNodeId.isJust())
        result->setValue("backendNodeId", ValueConversions<int>::toValue(m_backendNodeId.fromJust()));
    return result;
}

void EventListener::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("type"), m_type, out);
      crdtp::SerializeField(crdtp::SpanFrom("useCapture"), m_useCapture, out);
      crdtp::SerializeField(crdtp::SpanFrom("passive"), m_passive, out);
      crdtp::SerializeField(crdtp::SpanFrom("once"), m_once, out);
      crdtp::SerializeField(crdtp::SpanFrom("scriptId"), m_scriptId, out);
      crdtp::SerializeField(crdtp::SpanFrom("lineNumber"), m_lineNumber, out);
      crdtp::SerializeField(crdtp::SpanFrom("columnNumber"), m_columnNumber, out);
      crdtp::SerializeField(crdtp::SpanFrom("handler"), m_handler, out);
      crdtp::SerializeField(crdtp::SpanFrom("originalHandler"), m_originalHandler, out);
      crdtp::SerializeField(crdtp::SpanFrom("backendNodeId"), m_backendNodeId, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<EventListener> EventListener::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

// ------------- Enum values from params.


// ------------- Frontend notifications.

void Frontend::flush()
{
    frontend_channel_->FlushProtocolNotifications();
}

void Frontend::sendRawNotification(std::unique_ptr<Serializable> notification)
{
    frontend_channel_->SendProtocolNotification(std::move(notification));
}

// --------------------- Dispatcher.

class DomainDispatcherImpl : public protocol::DomainDispatcher {
public:
    DomainDispatcherImpl(FrontendChannel* frontendChannel, Backend* backend)
        : DomainDispatcher(frontendChannel)
        , m_backend(backend) {}
    ~DomainDispatcherImpl() override { }

    using CallHandler = void (DomainDispatcherImpl::*)(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);

    std::function<void(const crdtp::Dispatchable&)> Dispatch(crdtp::span<uint8_t> command_name) override;

    void getEventListeners(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void removeDOMBreakpoint(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void removeEventListenerBreakpoint(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void removeInstrumentationBreakpoint(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void removeXHRBreakpoint(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setDOMBreakpoint(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setEventListenerBreakpoint(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setInstrumentationBreakpoint(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setXHRBreakpoint(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
 protected:
    Backend* m_backend;
};

namespace {
// This helper method with a static map of command methods (instance methods
// of DomainDispatcherImpl declared just above) by their name is used immediately below,
// in the DomainDispatcherImpl::Dispatch method.
DomainDispatcherImpl::CallHandler CommandByName(crdtp::span<uint8_t> command_name) {
  static auto* commands = [](){
    auto* commands = new std::vector<std::pair<crdtp::span<uint8_t>,
                              DomainDispatcherImpl::CallHandler>>{
    {
          crdtp::SpanFrom("getEventListeners"),
          &DomainDispatcherImpl::getEventListeners
    },
    {
          crdtp::SpanFrom("removeDOMBreakpoint"),
          &DomainDispatcherImpl::removeDOMBreakpoint
    },
    {
          crdtp::SpanFrom("removeEventListenerBreakpoint"),
          &DomainDispatcherImpl::removeEventListenerBreakpoint
    },
    {
          crdtp::SpanFrom("removeInstrumentationBreakpoint"),
          &DomainDispatcherImpl::removeInstrumentationBreakpoint
    },
    {
          crdtp::SpanFrom("removeXHRBreakpoint"),
          &DomainDispatcherImpl::removeXHRBreakpoint
    },
    {
          crdtp::SpanFrom("setDOMBreakpoint"),
          &DomainDispatcherImpl::setDOMBreakpoint
    },
    {
          crdtp::SpanFrom("setEventListenerBreakpoint"),
          &DomainDispatcherImpl::setEventListenerBreakpoint
    },
    {
          crdtp::SpanFrom("setInstrumentationBreakpoint"),
          &DomainDispatcherImpl::setInstrumentationBreakpoint
    },
    {
          crdtp::SpanFrom("setXHRBreakpoint"),
          &DomainDispatcherImpl::setXHRBreakpoint
    },
    };
    return commands;
  }();
  return crdtp::FindByFirst<DomainDispatcherImpl::CallHandler>(*commands, command_name, nullptr);
}
}  // namespace

std::function<void(const crdtp::Dispatchable&)> DomainDispatcherImpl::Dispatch(crdtp::span<uint8_t> command_name) {
  CallHandler handler = CommandByName(command_name);
  if (!handler) return nullptr;
  return [this, handler](const crdtp::Dispatchable& dispatchable){
    std::unique_ptr<DictionaryValue> params =
        DictionaryValue::cast(protocol::Value::parseBinary(dispatchable.Params().data(),
        dispatchable.Params().size()));
    ErrorSupport errors;
    errors.Push();
    (this->*handler)(dispatchable, params.get(), &errors);
  };
}


void DomainDispatcherImpl::getEventListeners(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* objectIdValue = params ? params->get("objectId") : nullptr;
    errors->SetName("objectId");
    String in_objectId = ValueConversions<String>::fromValue(objectIdValue, errors);
    protocol::Value* depthValue = params ? params->get("depth") : nullptr;
    Maybe<int> in_depth;
    if (depthValue) {
        errors->SetName("depth");
        in_depth = ValueConversions<int>::fromValue(depthValue, errors);
    }
    protocol::Value* pierceValue = params ? params->get("pierce") : nullptr;
    Maybe<bool> in_pierce;
    if (pierceValue) {
        errors->SetName("pierce");
        in_pierce = ValueConversions<bool>::fromValue(pierceValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    std::unique_ptr<protocol::Array<protocol::DOMDebugger::EventListener>> out_listeners;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->getEventListeners(in_objectId, std::move(in_depth), std::move(in_pierce), &out_listeners);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("DOMDebugger.getEventListeners"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
            crdtp::SerializeField(crdtp::SpanFrom("listeners"), out_listeners, &result);
          result.push_back(crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::removeDOMBreakpoint(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* nodeIdValue = params ? params->get("nodeId") : nullptr;
    errors->SetName("nodeId");
    int in_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    protocol::Value* typeValue = params ? params->get("type") : nullptr;
    errors->SetName("type");
    String in_type = ValueConversions<String>::fromValue(typeValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->removeDOMBreakpoint(in_nodeId, in_type);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("DOMDebugger.removeDOMBreakpoint"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::removeEventListenerBreakpoint(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* eventNameValue = params ? params->get("eventName") : nullptr;
    errors->SetName("eventName");
    String in_eventName = ValueConversions<String>::fromValue(eventNameValue, errors);
    protocol::Value* targetNameValue = params ? params->get("targetName") : nullptr;
    Maybe<String> in_targetName;
    if (targetNameValue) {
        errors->SetName("targetName");
        in_targetName = ValueConversions<String>::fromValue(targetNameValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->removeEventListenerBreakpoint(in_eventName, std::move(in_targetName));
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("DOMDebugger.removeEventListenerBreakpoint"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::removeInstrumentationBreakpoint(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* eventNameValue = params ? params->get("eventName") : nullptr;
    errors->SetName("eventName");
    String in_eventName = ValueConversions<String>::fromValue(eventNameValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->removeInstrumentationBreakpoint(in_eventName);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("DOMDebugger.removeInstrumentationBreakpoint"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::removeXHRBreakpoint(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* urlValue = params ? params->get("url") : nullptr;
    errors->SetName("url");
    String in_url = ValueConversions<String>::fromValue(urlValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->removeXHRBreakpoint(in_url);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("DOMDebugger.removeXHRBreakpoint"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setDOMBreakpoint(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* nodeIdValue = params ? params->get("nodeId") : nullptr;
    errors->SetName("nodeId");
    int in_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    protocol::Value* typeValue = params ? params->get("type") : nullptr;
    errors->SetName("type");
    String in_type = ValueConversions<String>::fromValue(typeValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setDOMBreakpoint(in_nodeId, in_type);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("DOMDebugger.setDOMBreakpoint"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setEventListenerBreakpoint(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* eventNameValue = params ? params->get("eventName") : nullptr;
    errors->SetName("eventName");
    String in_eventName = ValueConversions<String>::fromValue(eventNameValue, errors);
    protocol::Value* targetNameValue = params ? params->get("targetName") : nullptr;
    Maybe<String> in_targetName;
    if (targetNameValue) {
        errors->SetName("targetName");
        in_targetName = ValueConversions<String>::fromValue(targetNameValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setEventListenerBreakpoint(in_eventName, std::move(in_targetName));
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("DOMDebugger.setEventListenerBreakpoint"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setInstrumentationBreakpoint(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* eventNameValue = params ? params->get("eventName") : nullptr;
    errors->SetName("eventName");
    String in_eventName = ValueConversions<String>::fromValue(eventNameValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setInstrumentationBreakpoint(in_eventName);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("DOMDebugger.setInstrumentationBreakpoint"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setXHRBreakpoint(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* urlValue = params ? params->get("url") : nullptr;
    errors->SetName("url");
    String in_url = ValueConversions<String>::fromValue(urlValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setXHRBreakpoint(in_url);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("DOMDebugger.setXHRBreakpoint"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

namespace {
// This helper method (with a static map of redirects) is used from Dispatcher::wire
// immediately below.
const std::vector<std::pair<crdtp::span<uint8_t>, crdtp::span<uint8_t>>>& SortedRedirects() {
  static auto* redirects = [](){
    auto* redirects = new std::vector<std::pair<crdtp::span<uint8_t>, crdtp::span<uint8_t>>>{
    };
    return redirects;
  }();
  return *redirects;
}
}  // namespace

// static
void Dispatcher::wire(UberDispatcher* uber, Backend* backend)
{
    auto dispatcher = std::make_unique<DomainDispatcherImpl>(uber->channel(), backend);
    uber->WireBackend(crdtp::SpanFrom("DOMDebugger"), SortedRedirects(), std::move(dispatcher));
}

} // DOMDebugger
} // namespace blink
} // namespace protocol

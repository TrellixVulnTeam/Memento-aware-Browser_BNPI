// This file is generated by TypeBuilder_cpp.template.

// Copyright (c) 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "third_party/blink/renderer/core/inspector/protocol/Animation.h"

#include "third_party/blink/renderer/core/inspector/protocol/Protocol.h"

#include "third_party/inspector_protocol/crdtp/cbor.h"
#include "third_party/inspector_protocol/crdtp/find_by_first.h"
#include "third_party/inspector_protocol/crdtp/serializer_traits.h"
#include "third_party/inspector_protocol/crdtp/span.h"

namespace blink {
namespace protocol {
namespace Animation {

// ------------- Enum values from types.

const char Metainfo::domainName[] = "Animation";
const char Metainfo::commandPrefix[] = "Animation.";
const char Metainfo::version[] = "1.3";

const char* Animation::TypeEnum::CSSTransition = "CSSTransition";
const char* Animation::TypeEnum::CSSAnimation = "CSSAnimation";
const char* Animation::TypeEnum::WebAnimation = "WebAnimation";

std::unique_ptr<Animation> Animation::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<Animation> result(new Animation());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* idValue = object->get("id");
    errors->SetName("id");
    result->m_id = ValueConversions<String>::fromValue(idValue, errors);
    protocol::Value* nameValue = object->get("name");
    errors->SetName("name");
    result->m_name = ValueConversions<String>::fromValue(nameValue, errors);
    protocol::Value* pausedStateValue = object->get("pausedState");
    errors->SetName("pausedState");
    result->m_pausedState = ValueConversions<bool>::fromValue(pausedStateValue, errors);
    protocol::Value* playStateValue = object->get("playState");
    errors->SetName("playState");
    result->m_playState = ValueConversions<String>::fromValue(playStateValue, errors);
    protocol::Value* playbackRateValue = object->get("playbackRate");
    errors->SetName("playbackRate");
    result->m_playbackRate = ValueConversions<double>::fromValue(playbackRateValue, errors);
    protocol::Value* startTimeValue = object->get("startTime");
    errors->SetName("startTime");
    result->m_startTime = ValueConversions<double>::fromValue(startTimeValue, errors);
    protocol::Value* currentTimeValue = object->get("currentTime");
    errors->SetName("currentTime");
    result->m_currentTime = ValueConversions<double>::fromValue(currentTimeValue, errors);
    protocol::Value* typeValue = object->get("type");
    errors->SetName("type");
    result->m_type = ValueConversions<String>::fromValue(typeValue, errors);
    protocol::Value* sourceValue = object->get("source");
    if (sourceValue) {
        errors->SetName("source");
        result->m_source = ValueConversions<protocol::Animation::AnimationEffect>::fromValue(sourceValue, errors);
    }
    protocol::Value* cssIdValue = object->get("cssId");
    if (cssIdValue) {
        errors->SetName("cssId");
        result->m_cssId = ValueConversions<String>::fromValue(cssIdValue, errors);
    }
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> Animation::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("id", ValueConversions<String>::toValue(m_id));
    result->setValue("name", ValueConversions<String>::toValue(m_name));
    result->setValue("pausedState", ValueConversions<bool>::toValue(m_pausedState));
    result->setValue("playState", ValueConversions<String>::toValue(m_playState));
    result->setValue("playbackRate", ValueConversions<double>::toValue(m_playbackRate));
    result->setValue("startTime", ValueConversions<double>::toValue(m_startTime));
    result->setValue("currentTime", ValueConversions<double>::toValue(m_currentTime));
    result->setValue("type", ValueConversions<String>::toValue(m_type));
    if (m_source.isJust())
        result->setValue("source", ValueConversions<protocol::Animation::AnimationEffect>::toValue(m_source.fromJust()));
    if (m_cssId.isJust())
        result->setValue("cssId", ValueConversions<String>::toValue(m_cssId.fromJust()));
    return result;
}

void Animation::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("id"), m_id, out);
      crdtp::SerializeField(crdtp::SpanFrom("name"), m_name, out);
      crdtp::SerializeField(crdtp::SpanFrom("pausedState"), m_pausedState, out);
      crdtp::SerializeField(crdtp::SpanFrom("playState"), m_playState, out);
      crdtp::SerializeField(crdtp::SpanFrom("playbackRate"), m_playbackRate, out);
      crdtp::SerializeField(crdtp::SpanFrom("startTime"), m_startTime, out);
      crdtp::SerializeField(crdtp::SpanFrom("currentTime"), m_currentTime, out);
      crdtp::SerializeField(crdtp::SpanFrom("type"), m_type, out);
      crdtp::SerializeField(crdtp::SpanFrom("source"), m_source, out);
      crdtp::SerializeField(crdtp::SpanFrom("cssId"), m_cssId, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<Animation> Animation::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<AnimationEffect> AnimationEffect::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<AnimationEffect> result(new AnimationEffect());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* delayValue = object->get("delay");
    errors->SetName("delay");
    result->m_delay = ValueConversions<double>::fromValue(delayValue, errors);
    protocol::Value* endDelayValue = object->get("endDelay");
    errors->SetName("endDelay");
    result->m_endDelay = ValueConversions<double>::fromValue(endDelayValue, errors);
    protocol::Value* iterationStartValue = object->get("iterationStart");
    errors->SetName("iterationStart");
    result->m_iterationStart = ValueConversions<double>::fromValue(iterationStartValue, errors);
    protocol::Value* iterationsValue = object->get("iterations");
    errors->SetName("iterations");
    result->m_iterations = ValueConversions<double>::fromValue(iterationsValue, errors);
    protocol::Value* durationValue = object->get("duration");
    errors->SetName("duration");
    result->m_duration = ValueConversions<double>::fromValue(durationValue, errors);
    protocol::Value* directionValue = object->get("direction");
    errors->SetName("direction");
    result->m_direction = ValueConversions<String>::fromValue(directionValue, errors);
    protocol::Value* fillValue = object->get("fill");
    errors->SetName("fill");
    result->m_fill = ValueConversions<String>::fromValue(fillValue, errors);
    protocol::Value* backendNodeIdValue = object->get("backendNodeId");
    if (backendNodeIdValue) {
        errors->SetName("backendNodeId");
        result->m_backendNodeId = ValueConversions<int>::fromValue(backendNodeIdValue, errors);
    }
    protocol::Value* keyframesRuleValue = object->get("keyframesRule");
    if (keyframesRuleValue) {
        errors->SetName("keyframesRule");
        result->m_keyframesRule = ValueConversions<protocol::Animation::KeyframesRule>::fromValue(keyframesRuleValue, errors);
    }
    protocol::Value* easingValue = object->get("easing");
    errors->SetName("easing");
    result->m_easing = ValueConversions<String>::fromValue(easingValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> AnimationEffect::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("delay", ValueConversions<double>::toValue(m_delay));
    result->setValue("endDelay", ValueConversions<double>::toValue(m_endDelay));
    result->setValue("iterationStart", ValueConversions<double>::toValue(m_iterationStart));
    result->setValue("iterations", ValueConversions<double>::toValue(m_iterations));
    result->setValue("duration", ValueConversions<double>::toValue(m_duration));
    result->setValue("direction", ValueConversions<String>::toValue(m_direction));
    result->setValue("fill", ValueConversions<String>::toValue(m_fill));
    if (m_backendNodeId.isJust())
        result->setValue("backendNodeId", ValueConversions<int>::toValue(m_backendNodeId.fromJust()));
    if (m_keyframesRule.isJust())
        result->setValue("keyframesRule", ValueConversions<protocol::Animation::KeyframesRule>::toValue(m_keyframesRule.fromJust()));
    result->setValue("easing", ValueConversions<String>::toValue(m_easing));
    return result;
}

void AnimationEffect::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("delay"), m_delay, out);
      crdtp::SerializeField(crdtp::SpanFrom("endDelay"), m_endDelay, out);
      crdtp::SerializeField(crdtp::SpanFrom("iterationStart"), m_iterationStart, out);
      crdtp::SerializeField(crdtp::SpanFrom("iterations"), m_iterations, out);
      crdtp::SerializeField(crdtp::SpanFrom("duration"), m_duration, out);
      crdtp::SerializeField(crdtp::SpanFrom("direction"), m_direction, out);
      crdtp::SerializeField(crdtp::SpanFrom("fill"), m_fill, out);
      crdtp::SerializeField(crdtp::SpanFrom("backendNodeId"), m_backendNodeId, out);
      crdtp::SerializeField(crdtp::SpanFrom("keyframesRule"), m_keyframesRule, out);
      crdtp::SerializeField(crdtp::SpanFrom("easing"), m_easing, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<AnimationEffect> AnimationEffect::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<KeyframesRule> KeyframesRule::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<KeyframesRule> result(new KeyframesRule());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* nameValue = object->get("name");
    if (nameValue) {
        errors->SetName("name");
        result->m_name = ValueConversions<String>::fromValue(nameValue, errors);
    }
    protocol::Value* keyframesValue = object->get("keyframes");
    errors->SetName("keyframes");
    result->m_keyframes = ValueConversions<protocol::Array<protocol::Animation::KeyframeStyle>>::fromValue(keyframesValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> KeyframesRule::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    if (m_name.isJust())
        result->setValue("name", ValueConversions<String>::toValue(m_name.fromJust()));
    result->setValue("keyframes", ValueConversions<protocol::Array<protocol::Animation::KeyframeStyle>>::toValue(m_keyframes.get()));
    return result;
}

void KeyframesRule::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("name"), m_name, out);
      crdtp::SerializeField(crdtp::SpanFrom("keyframes"), m_keyframes, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<KeyframesRule> KeyframesRule::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<KeyframeStyle> KeyframeStyle::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<KeyframeStyle> result(new KeyframeStyle());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* offsetValue = object->get("offset");
    errors->SetName("offset");
    result->m_offset = ValueConversions<String>::fromValue(offsetValue, errors);
    protocol::Value* easingValue = object->get("easing");
    errors->SetName("easing");
    result->m_easing = ValueConversions<String>::fromValue(easingValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> KeyframeStyle::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("offset", ValueConversions<String>::toValue(m_offset));
    result->setValue("easing", ValueConversions<String>::toValue(m_easing));
    return result;
}

void KeyframeStyle::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("offset"), m_offset, out);
      crdtp::SerializeField(crdtp::SpanFrom("easing"), m_easing, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<KeyframeStyle> KeyframeStyle::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<AnimationCanceledNotification> AnimationCanceledNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<AnimationCanceledNotification> result(new AnimationCanceledNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* idValue = object->get("id");
    errors->SetName("id");
    result->m_id = ValueConversions<String>::fromValue(idValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> AnimationCanceledNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("id", ValueConversions<String>::toValue(m_id));
    return result;
}

void AnimationCanceledNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("id"), m_id, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<AnimationCanceledNotification> AnimationCanceledNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<AnimationCreatedNotification> AnimationCreatedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<AnimationCreatedNotification> result(new AnimationCreatedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* idValue = object->get("id");
    errors->SetName("id");
    result->m_id = ValueConversions<String>::fromValue(idValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> AnimationCreatedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("id", ValueConversions<String>::toValue(m_id));
    return result;
}

void AnimationCreatedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("id"), m_id, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<AnimationCreatedNotification> AnimationCreatedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<AnimationStartedNotification> AnimationStartedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<AnimationStartedNotification> result(new AnimationStartedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* animationValue = object->get("animation");
    errors->SetName("animation");
    result->m_animation = ValueConversions<protocol::Animation::Animation>::fromValue(animationValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> AnimationStartedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("animation", ValueConversions<protocol::Animation::Animation>::toValue(m_animation.get()));
    return result;
}

void AnimationStartedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("animation"), m_animation, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<AnimationStartedNotification> AnimationStartedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

// ------------- Enum values from params.


// ------------- Frontend notifications.

void Frontend::animationCanceled(const String& id)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<AnimationCanceledNotification> messageData = AnimationCanceledNotification::create()
        .setId(id)
        .build();
    frontend_channel_->SendProtocolNotification(crdtp::CreateNotification("Animation.animationCanceled", std::move(messageData)));
}

void Frontend::animationCreated(const String& id)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<AnimationCreatedNotification> messageData = AnimationCreatedNotification::create()
        .setId(id)
        .build();
    frontend_channel_->SendProtocolNotification(crdtp::CreateNotification("Animation.animationCreated", std::move(messageData)));
}

void Frontend::animationStarted(std::unique_ptr<protocol::Animation::Animation> animation)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<AnimationStartedNotification> messageData = AnimationStartedNotification::create()
        .setAnimation(std::move(animation))
        .build();
    frontend_channel_->SendProtocolNotification(crdtp::CreateNotification("Animation.animationStarted", std::move(messageData)));
}

void Frontend::flush()
{
    frontend_channel_->FlushProtocolNotifications();
}

void Frontend::sendRawNotification(std::unique_ptr<Serializable> notification)
{
    frontend_channel_->SendProtocolNotification(std::move(notification));
}

// --------------------- Dispatcher.

class DomainDispatcherImpl : public protocol::DomainDispatcher {
public:
    DomainDispatcherImpl(FrontendChannel* frontendChannel, Backend* backend)
        : DomainDispatcher(frontendChannel)
        , m_backend(backend) {}
    ~DomainDispatcherImpl() override { }

    using CallHandler = void (DomainDispatcherImpl::*)(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);

    std::function<void(const crdtp::Dispatchable&)> Dispatch(crdtp::span<uint8_t> command_name) override;

    void disable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void enable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void getCurrentTime(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void getPlaybackRate(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void releaseAnimations(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void resolveAnimation(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void seekAnimations(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setPaused(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setPlaybackRate(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setTiming(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
 protected:
    Backend* m_backend;
};

namespace {
// This helper method with a static map of command methods (instance methods
// of DomainDispatcherImpl declared just above) by their name is used immediately below,
// in the DomainDispatcherImpl::Dispatch method.
DomainDispatcherImpl::CallHandler CommandByName(crdtp::span<uint8_t> command_name) {
  static auto* commands = [](){
    auto* commands = new std::vector<std::pair<crdtp::span<uint8_t>,
                              DomainDispatcherImpl::CallHandler>>{
    {
          crdtp::SpanFrom("disable"),
          &DomainDispatcherImpl::disable
    },
    {
          crdtp::SpanFrom("enable"),
          &DomainDispatcherImpl::enable
    },
    {
          crdtp::SpanFrom("getCurrentTime"),
          &DomainDispatcherImpl::getCurrentTime
    },
    {
          crdtp::SpanFrom("getPlaybackRate"),
          &DomainDispatcherImpl::getPlaybackRate
    },
    {
          crdtp::SpanFrom("releaseAnimations"),
          &DomainDispatcherImpl::releaseAnimations
    },
    {
          crdtp::SpanFrom("resolveAnimation"),
          &DomainDispatcherImpl::resolveAnimation
    },
    {
          crdtp::SpanFrom("seekAnimations"),
          &DomainDispatcherImpl::seekAnimations
    },
    {
          crdtp::SpanFrom("setPaused"),
          &DomainDispatcherImpl::setPaused
    },
    {
          crdtp::SpanFrom("setPlaybackRate"),
          &DomainDispatcherImpl::setPlaybackRate
    },
    {
          crdtp::SpanFrom("setTiming"),
          &DomainDispatcherImpl::setTiming
    },
    };
    return commands;
  }();
  return crdtp::FindByFirst<DomainDispatcherImpl::CallHandler>(*commands, command_name, nullptr);
}
}  // namespace

std::function<void(const crdtp::Dispatchable&)> DomainDispatcherImpl::Dispatch(crdtp::span<uint8_t> command_name) {
  CallHandler handler = CommandByName(command_name);
  if (!handler) return nullptr;
  return [this, handler](const crdtp::Dispatchable& dispatchable){
    std::unique_ptr<DictionaryValue> params =
        DictionaryValue::cast(protocol::Value::parseBinary(dispatchable.Params().data(),
        dispatchable.Params().size()));
    ErrorSupport errors;
    errors.Push();
    (this->*handler)(dispatchable, params.get(), &errors);
  };
}


void DomainDispatcherImpl::disable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->disable();
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Animation.disable"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::enable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->enable();
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Animation.enable"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::getCurrentTime(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* idValue = params ? params->get("id") : nullptr;
    errors->SetName("id");
    String in_id = ValueConversions<String>::fromValue(idValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    double out_currentTime;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->getCurrentTime(in_id, &out_currentTime);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Animation.getCurrentTime"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
            crdtp::SerializeField(crdtp::SpanFrom("currentTime"), out_currentTime, &result);
          result.push_back(crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::getPlaybackRate(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Declare output parameters.
    double out_playbackRate;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->getPlaybackRate(&out_playbackRate);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Animation.getPlaybackRate"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
            crdtp::SerializeField(crdtp::SpanFrom("playbackRate"), out_playbackRate, &result);
          result.push_back(crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::releaseAnimations(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* animationsValue = params ? params->get("animations") : nullptr;
    errors->SetName("animations");
    std::unique_ptr<protocol::Array<String>> in_animations = ValueConversions<protocol::Array<String>>::fromValue(animationsValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->releaseAnimations(std::move(in_animations));
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Animation.releaseAnimations"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::resolveAnimation(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* animationIdValue = params ? params->get("animationId") : nullptr;
    errors->SetName("animationId");
    String in_animationId = ValueConversions<String>::fromValue(animationIdValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    std::unique_ptr<v8_inspector::protocol::Runtime::API::RemoteObject> out_remoteObject;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->resolveAnimation(in_animationId, &out_remoteObject);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Animation.resolveAnimation"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
            crdtp::SerializeField(crdtp::SpanFrom("remoteObject"), out_remoteObject, &result);
          result.push_back(crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::seekAnimations(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* animationsValue = params ? params->get("animations") : nullptr;
    errors->SetName("animations");
    std::unique_ptr<protocol::Array<String>> in_animations = ValueConversions<protocol::Array<String>>::fromValue(animationsValue, errors);
    protocol::Value* currentTimeValue = params ? params->get("currentTime") : nullptr;
    errors->SetName("currentTime");
    double in_currentTime = ValueConversions<double>::fromValue(currentTimeValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->seekAnimations(std::move(in_animations), in_currentTime);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Animation.seekAnimations"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setPaused(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* animationsValue = params ? params->get("animations") : nullptr;
    errors->SetName("animations");
    std::unique_ptr<protocol::Array<String>> in_animations = ValueConversions<protocol::Array<String>>::fromValue(animationsValue, errors);
    protocol::Value* pausedValue = params ? params->get("paused") : nullptr;
    errors->SetName("paused");
    bool in_paused = ValueConversions<bool>::fromValue(pausedValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setPaused(std::move(in_animations), in_paused);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Animation.setPaused"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setPlaybackRate(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* playbackRateValue = params ? params->get("playbackRate") : nullptr;
    errors->SetName("playbackRate");
    double in_playbackRate = ValueConversions<double>::fromValue(playbackRateValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setPlaybackRate(in_playbackRate);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Animation.setPlaybackRate"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setTiming(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* animationIdValue = params ? params->get("animationId") : nullptr;
    errors->SetName("animationId");
    String in_animationId = ValueConversions<String>::fromValue(animationIdValue, errors);
    protocol::Value* durationValue = params ? params->get("duration") : nullptr;
    errors->SetName("duration");
    double in_duration = ValueConversions<double>::fromValue(durationValue, errors);
    protocol::Value* delayValue = params ? params->get("delay") : nullptr;
    errors->SetName("delay");
    double in_delay = ValueConversions<double>::fromValue(delayValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setTiming(in_animationId, in_duration, in_delay);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Animation.setTiming"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

namespace {
// This helper method (with a static map of redirects) is used from Dispatcher::wire
// immediately below.
const std::vector<std::pair<crdtp::span<uint8_t>, crdtp::span<uint8_t>>>& SortedRedirects() {
  static auto* redirects = [](){
    auto* redirects = new std::vector<std::pair<crdtp::span<uint8_t>, crdtp::span<uint8_t>>>{
    };
    return redirects;
  }();
  return *redirects;
}
}  // namespace

// static
void Dispatcher::wire(UberDispatcher* uber, Backend* backend)
{
    auto dispatcher = std::make_unique<DomainDispatcherImpl>(uber->channel(), backend);
    uber->WireBackend(crdtp::SpanFrom("Animation"), SortedRedirects(), std::move(dispatcher));
}

} // Animation
} // namespace blink
} // namespace protocol

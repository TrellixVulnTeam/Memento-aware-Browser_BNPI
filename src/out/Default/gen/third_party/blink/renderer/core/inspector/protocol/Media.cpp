// This file is generated by TypeBuilder_cpp.template.

// Copyright (c) 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "third_party/blink/renderer/core/inspector/protocol/Media.h"

#include "third_party/blink/renderer/core/inspector/protocol/Protocol.h"

#include "third_party/inspector_protocol/crdtp/cbor.h"
#include "third_party/inspector_protocol/crdtp/find_by_first.h"
#include "third_party/inspector_protocol/crdtp/serializer_traits.h"
#include "third_party/inspector_protocol/crdtp/span.h"

namespace blink {
namespace protocol {
namespace Media {

// ------------- Enum values from types.

const char Metainfo::domainName[] = "Media";
const char Metainfo::commandPrefix[] = "Media.";
const char Metainfo::version[] = "1.3";

const char* PlayerMessage::LevelEnum::Error = "error";
const char* PlayerMessage::LevelEnum::Warning = "warning";
const char* PlayerMessage::LevelEnum::Info = "info";
const char* PlayerMessage::LevelEnum::Debug = "debug";

std::unique_ptr<PlayerMessage> PlayerMessage::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<PlayerMessage> result(new PlayerMessage());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* levelValue = object->get("level");
    errors->SetName("level");
    result->m_level = ValueConversions<String>::fromValue(levelValue, errors);
    protocol::Value* messageValue = object->get("message");
    errors->SetName("message");
    result->m_message = ValueConversions<String>::fromValue(messageValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> PlayerMessage::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("level", ValueConversions<String>::toValue(m_level));
    result->setValue("message", ValueConversions<String>::toValue(m_message));
    return result;
}

void PlayerMessage::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("level"), m_level, out);
      crdtp::SerializeField(crdtp::SpanFrom("message"), m_message, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<PlayerMessage> PlayerMessage::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<PlayerProperty> PlayerProperty::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<PlayerProperty> result(new PlayerProperty());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* nameValue = object->get("name");
    errors->SetName("name");
    result->m_name = ValueConversions<String>::fromValue(nameValue, errors);
    protocol::Value* valueValue = object->get("value");
    errors->SetName("value");
    result->m_value = ValueConversions<String>::fromValue(valueValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> PlayerProperty::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("name", ValueConversions<String>::toValue(m_name));
    result->setValue("value", ValueConversions<String>::toValue(m_value));
    return result;
}

void PlayerProperty::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("name"), m_name, out);
      crdtp::SerializeField(crdtp::SpanFrom("value"), m_value, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<PlayerProperty> PlayerProperty::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<PlayerEvent> PlayerEvent::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<PlayerEvent> result(new PlayerEvent());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* timestampValue = object->get("timestamp");
    errors->SetName("timestamp");
    result->m_timestamp = ValueConversions<double>::fromValue(timestampValue, errors);
    protocol::Value* valueValue = object->get("value");
    errors->SetName("value");
    result->m_value = ValueConversions<String>::fromValue(valueValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> PlayerEvent::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("timestamp", ValueConversions<double>::toValue(m_timestamp));
    result->setValue("value", ValueConversions<String>::toValue(m_value));
    return result;
}

void PlayerEvent::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("timestamp"), m_timestamp, out);
      crdtp::SerializeField(crdtp::SpanFrom("value"), m_value, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<PlayerEvent> PlayerEvent::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

const char* PlayerError::TypeEnum::Pipeline_error = "pipeline_error";
const char* PlayerError::TypeEnum::Media_error = "media_error";

std::unique_ptr<PlayerError> PlayerError::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<PlayerError> result(new PlayerError());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* typeValue = object->get("type");
    errors->SetName("type");
    result->m_type = ValueConversions<String>::fromValue(typeValue, errors);
    protocol::Value* errorCodeValue = object->get("errorCode");
    errors->SetName("errorCode");
    result->m_errorCode = ValueConversions<String>::fromValue(errorCodeValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> PlayerError::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("type", ValueConversions<String>::toValue(m_type));
    result->setValue("errorCode", ValueConversions<String>::toValue(m_errorCode));
    return result;
}

void PlayerError::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("type"), m_type, out);
      crdtp::SerializeField(crdtp::SpanFrom("errorCode"), m_errorCode, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<PlayerError> PlayerError::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<PlayerPropertiesChangedNotification> PlayerPropertiesChangedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<PlayerPropertiesChangedNotification> result(new PlayerPropertiesChangedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* playerIdValue = object->get("playerId");
    errors->SetName("playerId");
    result->m_playerId = ValueConversions<String>::fromValue(playerIdValue, errors);
    protocol::Value* propertiesValue = object->get("properties");
    errors->SetName("properties");
    result->m_properties = ValueConversions<protocol::Array<protocol::Media::PlayerProperty>>::fromValue(propertiesValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> PlayerPropertiesChangedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("playerId", ValueConversions<String>::toValue(m_playerId));
    result->setValue("properties", ValueConversions<protocol::Array<protocol::Media::PlayerProperty>>::toValue(m_properties.get()));
    return result;
}

void PlayerPropertiesChangedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("playerId"), m_playerId, out);
      crdtp::SerializeField(crdtp::SpanFrom("properties"), m_properties, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<PlayerPropertiesChangedNotification> PlayerPropertiesChangedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<PlayerEventsAddedNotification> PlayerEventsAddedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<PlayerEventsAddedNotification> result(new PlayerEventsAddedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* playerIdValue = object->get("playerId");
    errors->SetName("playerId");
    result->m_playerId = ValueConversions<String>::fromValue(playerIdValue, errors);
    protocol::Value* eventsValue = object->get("events");
    errors->SetName("events");
    result->m_events = ValueConversions<protocol::Array<protocol::Media::PlayerEvent>>::fromValue(eventsValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> PlayerEventsAddedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("playerId", ValueConversions<String>::toValue(m_playerId));
    result->setValue("events", ValueConversions<protocol::Array<protocol::Media::PlayerEvent>>::toValue(m_events.get()));
    return result;
}

void PlayerEventsAddedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("playerId"), m_playerId, out);
      crdtp::SerializeField(crdtp::SpanFrom("events"), m_events, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<PlayerEventsAddedNotification> PlayerEventsAddedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<PlayerMessagesLoggedNotification> PlayerMessagesLoggedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<PlayerMessagesLoggedNotification> result(new PlayerMessagesLoggedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* playerIdValue = object->get("playerId");
    errors->SetName("playerId");
    result->m_playerId = ValueConversions<String>::fromValue(playerIdValue, errors);
    protocol::Value* messagesValue = object->get("messages");
    errors->SetName("messages");
    result->m_messages = ValueConversions<protocol::Array<protocol::Media::PlayerMessage>>::fromValue(messagesValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> PlayerMessagesLoggedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("playerId", ValueConversions<String>::toValue(m_playerId));
    result->setValue("messages", ValueConversions<protocol::Array<protocol::Media::PlayerMessage>>::toValue(m_messages.get()));
    return result;
}

void PlayerMessagesLoggedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("playerId"), m_playerId, out);
      crdtp::SerializeField(crdtp::SpanFrom("messages"), m_messages, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<PlayerMessagesLoggedNotification> PlayerMessagesLoggedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<PlayerErrorsRaisedNotification> PlayerErrorsRaisedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<PlayerErrorsRaisedNotification> result(new PlayerErrorsRaisedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* playerIdValue = object->get("playerId");
    errors->SetName("playerId");
    result->m_playerId = ValueConversions<String>::fromValue(playerIdValue, errors);
    protocol::Value* errorsValue = object->get("errors");
    errors->SetName("errors");
    result->m_errors = ValueConversions<protocol::Array<protocol::Media::PlayerError>>::fromValue(errorsValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> PlayerErrorsRaisedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("playerId", ValueConversions<String>::toValue(m_playerId));
    result->setValue("errors", ValueConversions<protocol::Array<protocol::Media::PlayerError>>::toValue(m_errors.get()));
    return result;
}

void PlayerErrorsRaisedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("playerId"), m_playerId, out);
      crdtp::SerializeField(crdtp::SpanFrom("errors"), m_errors, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<PlayerErrorsRaisedNotification> PlayerErrorsRaisedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<PlayersCreatedNotification> PlayersCreatedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<PlayersCreatedNotification> result(new PlayersCreatedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* playersValue = object->get("players");
    errors->SetName("players");
    result->m_players = ValueConversions<protocol::Array<String>>::fromValue(playersValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> PlayersCreatedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("players", ValueConversions<protocol::Array<String>>::toValue(m_players.get()));
    return result;
}

void PlayersCreatedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("players"), m_players, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<PlayersCreatedNotification> PlayersCreatedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

// ------------- Enum values from params.


// ------------- Frontend notifications.

void Frontend::playerPropertiesChanged(const String& playerId, std::unique_ptr<protocol::Array<protocol::Media::PlayerProperty>> properties)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<PlayerPropertiesChangedNotification> messageData = PlayerPropertiesChangedNotification::create()
        .setPlayerId(playerId)
        .setProperties(std::move(properties))
        .build();
    frontend_channel_->SendProtocolNotification(crdtp::CreateNotification("Media.playerPropertiesChanged", std::move(messageData)));
}

void Frontend::playerEventsAdded(const String& playerId, std::unique_ptr<protocol::Array<protocol::Media::PlayerEvent>> events)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<PlayerEventsAddedNotification> messageData = PlayerEventsAddedNotification::create()
        .setPlayerId(playerId)
        .setEvents(std::move(events))
        .build();
    frontend_channel_->SendProtocolNotification(crdtp::CreateNotification("Media.playerEventsAdded", std::move(messageData)));
}

void Frontend::playerMessagesLogged(const String& playerId, std::unique_ptr<protocol::Array<protocol::Media::PlayerMessage>> messages)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<PlayerMessagesLoggedNotification> messageData = PlayerMessagesLoggedNotification::create()
        .setPlayerId(playerId)
        .setMessages(std::move(messages))
        .build();
    frontend_channel_->SendProtocolNotification(crdtp::CreateNotification("Media.playerMessagesLogged", std::move(messageData)));
}

void Frontend::playerErrorsRaised(const String& playerId, std::unique_ptr<protocol::Array<protocol::Media::PlayerError>> errors)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<PlayerErrorsRaisedNotification> messageData = PlayerErrorsRaisedNotification::create()
        .setPlayerId(playerId)
        .setErrors(std::move(errors))
        .build();
    frontend_channel_->SendProtocolNotification(crdtp::CreateNotification("Media.playerErrorsRaised", std::move(messageData)));
}

void Frontend::playersCreated(std::unique_ptr<protocol::Array<String>> players)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<PlayersCreatedNotification> messageData = PlayersCreatedNotification::create()
        .setPlayers(std::move(players))
        .build();
    frontend_channel_->SendProtocolNotification(crdtp::CreateNotification("Media.playersCreated", std::move(messageData)));
}

void Frontend::flush()
{
    frontend_channel_->FlushProtocolNotifications();
}

void Frontend::sendRawNotification(std::unique_ptr<Serializable> notification)
{
    frontend_channel_->SendProtocolNotification(std::move(notification));
}

// --------------------- Dispatcher.

class DomainDispatcherImpl : public protocol::DomainDispatcher {
public:
    DomainDispatcherImpl(FrontendChannel* frontendChannel, Backend* backend)
        : DomainDispatcher(frontendChannel)
        , m_backend(backend) {}
    ~DomainDispatcherImpl() override { }

    using CallHandler = void (DomainDispatcherImpl::*)(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);

    std::function<void(const crdtp::Dispatchable&)> Dispatch(crdtp::span<uint8_t> command_name) override;

    void enable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void disable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
 protected:
    Backend* m_backend;
};

namespace {
// This helper method with a static map of command methods (instance methods
// of DomainDispatcherImpl declared just above) by their name is used immediately below,
// in the DomainDispatcherImpl::Dispatch method.
DomainDispatcherImpl::CallHandler CommandByName(crdtp::span<uint8_t> command_name) {
  static auto* commands = [](){
    auto* commands = new std::vector<std::pair<crdtp::span<uint8_t>,
                              DomainDispatcherImpl::CallHandler>>{
    {
          crdtp::SpanFrom("disable"),
          &DomainDispatcherImpl::disable
    },
    {
          crdtp::SpanFrom("enable"),
          &DomainDispatcherImpl::enable
    },
    };
    return commands;
  }();
  return crdtp::FindByFirst<DomainDispatcherImpl::CallHandler>(*commands, command_name, nullptr);
}
}  // namespace

std::function<void(const crdtp::Dispatchable&)> DomainDispatcherImpl::Dispatch(crdtp::span<uint8_t> command_name) {
  CallHandler handler = CommandByName(command_name);
  if (!handler) return nullptr;
  return [this, handler](const crdtp::Dispatchable& dispatchable){
    std::unique_ptr<DictionaryValue> params =
        DictionaryValue::cast(protocol::Value::parseBinary(dispatchable.Params().data(),
        dispatchable.Params().size()));
    ErrorSupport errors;
    errors.Push();
    (this->*handler)(dispatchable, params.get(), &errors);
  };
}


void DomainDispatcherImpl::enable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->enable();
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Media.enable"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::disable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->disable();
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Media.disable"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

namespace {
// This helper method (with a static map of redirects) is used from Dispatcher::wire
// immediately below.
const std::vector<std::pair<crdtp::span<uint8_t>, crdtp::span<uint8_t>>>& SortedRedirects() {
  static auto* redirects = [](){
    auto* redirects = new std::vector<std::pair<crdtp::span<uint8_t>, crdtp::span<uint8_t>>>{
    };
    return redirects;
  }();
  return *redirects;
}
}  // namespace

// static
void Dispatcher::wire(UberDispatcher* uber, Backend* backend)
{
    auto dispatcher = std::make_unique<DomainDispatcherImpl>(uber->channel(), backend);
    uber->WireBackend(crdtp::SpanFrom("Media"), SortedRedirects(), std::move(dispatcher));
}

} // Media
} // namespace blink
} // namespace protocol

// This file is generated by TypeBuilder_cpp.template.

// Copyright (c) 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "third_party/blink/renderer/core/inspector/protocol/DOMSnapshot.h"

#include "third_party/blink/renderer/core/inspector/protocol/Protocol.h"

#include "third_party/inspector_protocol/crdtp/cbor.h"
#include "third_party/inspector_protocol/crdtp/find_by_first.h"
#include "third_party/inspector_protocol/crdtp/serializer_traits.h"
#include "third_party/inspector_protocol/crdtp/span.h"

namespace blink {
namespace protocol {
namespace DOMSnapshot {

// ------------- Enum values from types.

const char Metainfo::domainName[] = "DOMSnapshot";
const char Metainfo::commandPrefix[] = "DOMSnapshot.";
const char Metainfo::version[] = "1.3";

std::unique_ptr<DOMNode> DOMNode::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<DOMNode> result(new DOMNode());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* nodeTypeValue = object->get("nodeType");
    errors->SetName("nodeType");
    result->m_nodeType = ValueConversions<int>::fromValue(nodeTypeValue, errors);
    protocol::Value* nodeNameValue = object->get("nodeName");
    errors->SetName("nodeName");
    result->m_nodeName = ValueConversions<String>::fromValue(nodeNameValue, errors);
    protocol::Value* nodeValueValue = object->get("nodeValue");
    errors->SetName("nodeValue");
    result->m_nodeValue = ValueConversions<String>::fromValue(nodeValueValue, errors);
    protocol::Value* textValueValue = object->get("textValue");
    if (textValueValue) {
        errors->SetName("textValue");
        result->m_textValue = ValueConversions<String>::fromValue(textValueValue, errors);
    }
    protocol::Value* inputValueValue = object->get("inputValue");
    if (inputValueValue) {
        errors->SetName("inputValue");
        result->m_inputValue = ValueConversions<String>::fromValue(inputValueValue, errors);
    }
    protocol::Value* inputCheckedValue = object->get("inputChecked");
    if (inputCheckedValue) {
        errors->SetName("inputChecked");
        result->m_inputChecked = ValueConversions<bool>::fromValue(inputCheckedValue, errors);
    }
    protocol::Value* optionSelectedValue = object->get("optionSelected");
    if (optionSelectedValue) {
        errors->SetName("optionSelected");
        result->m_optionSelected = ValueConversions<bool>::fromValue(optionSelectedValue, errors);
    }
    protocol::Value* backendNodeIdValue = object->get("backendNodeId");
    errors->SetName("backendNodeId");
    result->m_backendNodeId = ValueConversions<int>::fromValue(backendNodeIdValue, errors);
    protocol::Value* childNodeIndexesValue = object->get("childNodeIndexes");
    if (childNodeIndexesValue) {
        errors->SetName("childNodeIndexes");
        result->m_childNodeIndexes = ValueConversions<protocol::Array<int>>::fromValue(childNodeIndexesValue, errors);
    }
    protocol::Value* attributesValue = object->get("attributes");
    if (attributesValue) {
        errors->SetName("attributes");
        result->m_attributes = ValueConversions<protocol::Array<protocol::DOMSnapshot::NameValue>>::fromValue(attributesValue, errors);
    }
    protocol::Value* pseudoElementIndexesValue = object->get("pseudoElementIndexes");
    if (pseudoElementIndexesValue) {
        errors->SetName("pseudoElementIndexes");
        result->m_pseudoElementIndexes = ValueConversions<protocol::Array<int>>::fromValue(pseudoElementIndexesValue, errors);
    }
    protocol::Value* layoutNodeIndexValue = object->get("layoutNodeIndex");
    if (layoutNodeIndexValue) {
        errors->SetName("layoutNodeIndex");
        result->m_layoutNodeIndex = ValueConversions<int>::fromValue(layoutNodeIndexValue, errors);
    }
    protocol::Value* documentURLValue = object->get("documentURL");
    if (documentURLValue) {
        errors->SetName("documentURL");
        result->m_documentURL = ValueConversions<String>::fromValue(documentURLValue, errors);
    }
    protocol::Value* baseURLValue = object->get("baseURL");
    if (baseURLValue) {
        errors->SetName("baseURL");
        result->m_baseURL = ValueConversions<String>::fromValue(baseURLValue, errors);
    }
    protocol::Value* contentLanguageValue = object->get("contentLanguage");
    if (contentLanguageValue) {
        errors->SetName("contentLanguage");
        result->m_contentLanguage = ValueConversions<String>::fromValue(contentLanguageValue, errors);
    }
    protocol::Value* documentEncodingValue = object->get("documentEncoding");
    if (documentEncodingValue) {
        errors->SetName("documentEncoding");
        result->m_documentEncoding = ValueConversions<String>::fromValue(documentEncodingValue, errors);
    }
    protocol::Value* publicIdValue = object->get("publicId");
    if (publicIdValue) {
        errors->SetName("publicId");
        result->m_publicId = ValueConversions<String>::fromValue(publicIdValue, errors);
    }
    protocol::Value* systemIdValue = object->get("systemId");
    if (systemIdValue) {
        errors->SetName("systemId");
        result->m_systemId = ValueConversions<String>::fromValue(systemIdValue, errors);
    }
    protocol::Value* frameIdValue = object->get("frameId");
    if (frameIdValue) {
        errors->SetName("frameId");
        result->m_frameId = ValueConversions<String>::fromValue(frameIdValue, errors);
    }
    protocol::Value* contentDocumentIndexValue = object->get("contentDocumentIndex");
    if (contentDocumentIndexValue) {
        errors->SetName("contentDocumentIndex");
        result->m_contentDocumentIndex = ValueConversions<int>::fromValue(contentDocumentIndexValue, errors);
    }
    protocol::Value* pseudoTypeValue = object->get("pseudoType");
    if (pseudoTypeValue) {
        errors->SetName("pseudoType");
        result->m_pseudoType = ValueConversions<String>::fromValue(pseudoTypeValue, errors);
    }
    protocol::Value* shadowRootTypeValue = object->get("shadowRootType");
    if (shadowRootTypeValue) {
        errors->SetName("shadowRootType");
        result->m_shadowRootType = ValueConversions<String>::fromValue(shadowRootTypeValue, errors);
    }
    protocol::Value* isClickableValue = object->get("isClickable");
    if (isClickableValue) {
        errors->SetName("isClickable");
        result->m_isClickable = ValueConversions<bool>::fromValue(isClickableValue, errors);
    }
    protocol::Value* eventListenersValue = object->get("eventListeners");
    if (eventListenersValue) {
        errors->SetName("eventListeners");
        result->m_eventListeners = ValueConversions<protocol::Array<protocol::DOMDebugger::EventListener>>::fromValue(eventListenersValue, errors);
    }
    protocol::Value* currentSourceURLValue = object->get("currentSourceURL");
    if (currentSourceURLValue) {
        errors->SetName("currentSourceURL");
        result->m_currentSourceURL = ValueConversions<String>::fromValue(currentSourceURLValue, errors);
    }
    protocol::Value* originURLValue = object->get("originURL");
    if (originURLValue) {
        errors->SetName("originURL");
        result->m_originURL = ValueConversions<String>::fromValue(originURLValue, errors);
    }
    protocol::Value* scrollOffsetXValue = object->get("scrollOffsetX");
    if (scrollOffsetXValue) {
        errors->SetName("scrollOffsetX");
        result->m_scrollOffsetX = ValueConversions<double>::fromValue(scrollOffsetXValue, errors);
    }
    protocol::Value* scrollOffsetYValue = object->get("scrollOffsetY");
    if (scrollOffsetYValue) {
        errors->SetName("scrollOffsetY");
        result->m_scrollOffsetY = ValueConversions<double>::fromValue(scrollOffsetYValue, errors);
    }
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> DOMNode::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("nodeType", ValueConversions<int>::toValue(m_nodeType));
    result->setValue("nodeName", ValueConversions<String>::toValue(m_nodeName));
    result->setValue("nodeValue", ValueConversions<String>::toValue(m_nodeValue));
    if (m_textValue.isJust())
        result->setValue("textValue", ValueConversions<String>::toValue(m_textValue.fromJust()));
    if (m_inputValue.isJust())
        result->setValue("inputValue", ValueConversions<String>::toValue(m_inputValue.fromJust()));
    if (m_inputChecked.isJust())
        result->setValue("inputChecked", ValueConversions<bool>::toValue(m_inputChecked.fromJust()));
    if (m_optionSelected.isJust())
        result->setValue("optionSelected", ValueConversions<bool>::toValue(m_optionSelected.fromJust()));
    result->setValue("backendNodeId", ValueConversions<int>::toValue(m_backendNodeId));
    if (m_childNodeIndexes.isJust())
        result->setValue("childNodeIndexes", ValueConversions<protocol::Array<int>>::toValue(m_childNodeIndexes.fromJust()));
    if (m_attributes.isJust())
        result->setValue("attributes", ValueConversions<protocol::Array<protocol::DOMSnapshot::NameValue>>::toValue(m_attributes.fromJust()));
    if (m_pseudoElementIndexes.isJust())
        result->setValue("pseudoElementIndexes", ValueConversions<protocol::Array<int>>::toValue(m_pseudoElementIndexes.fromJust()));
    if (m_layoutNodeIndex.isJust())
        result->setValue("layoutNodeIndex", ValueConversions<int>::toValue(m_layoutNodeIndex.fromJust()));
    if (m_documentURL.isJust())
        result->setValue("documentURL", ValueConversions<String>::toValue(m_documentURL.fromJust()));
    if (m_baseURL.isJust())
        result->setValue("baseURL", ValueConversions<String>::toValue(m_baseURL.fromJust()));
    if (m_contentLanguage.isJust())
        result->setValue("contentLanguage", ValueConversions<String>::toValue(m_contentLanguage.fromJust()));
    if (m_documentEncoding.isJust())
        result->setValue("documentEncoding", ValueConversions<String>::toValue(m_documentEncoding.fromJust()));
    if (m_publicId.isJust())
        result->setValue("publicId", ValueConversions<String>::toValue(m_publicId.fromJust()));
    if (m_systemId.isJust())
        result->setValue("systemId", ValueConversions<String>::toValue(m_systemId.fromJust()));
    if (m_frameId.isJust())
        result->setValue("frameId", ValueConversions<String>::toValue(m_frameId.fromJust()));
    if (m_contentDocumentIndex.isJust())
        result->setValue("contentDocumentIndex", ValueConversions<int>::toValue(m_contentDocumentIndex.fromJust()));
    if (m_pseudoType.isJust())
        result->setValue("pseudoType", ValueConversions<String>::toValue(m_pseudoType.fromJust()));
    if (m_shadowRootType.isJust())
        result->setValue("shadowRootType", ValueConversions<String>::toValue(m_shadowRootType.fromJust()));
    if (m_isClickable.isJust())
        result->setValue("isClickable", ValueConversions<bool>::toValue(m_isClickable.fromJust()));
    if (m_eventListeners.isJust())
        result->setValue("eventListeners", ValueConversions<protocol::Array<protocol::DOMDebugger::EventListener>>::toValue(m_eventListeners.fromJust()));
    if (m_currentSourceURL.isJust())
        result->setValue("currentSourceURL", ValueConversions<String>::toValue(m_currentSourceURL.fromJust()));
    if (m_originURL.isJust())
        result->setValue("originURL", ValueConversions<String>::toValue(m_originURL.fromJust()));
    if (m_scrollOffsetX.isJust())
        result->setValue("scrollOffsetX", ValueConversions<double>::toValue(m_scrollOffsetX.fromJust()));
    if (m_scrollOffsetY.isJust())
        result->setValue("scrollOffsetY", ValueConversions<double>::toValue(m_scrollOffsetY.fromJust()));
    return result;
}

void DOMNode::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("nodeType"), m_nodeType, out);
      crdtp::SerializeField(crdtp::SpanFrom("nodeName"), m_nodeName, out);
      crdtp::SerializeField(crdtp::SpanFrom("nodeValue"), m_nodeValue, out);
      crdtp::SerializeField(crdtp::SpanFrom("textValue"), m_textValue, out);
      crdtp::SerializeField(crdtp::SpanFrom("inputValue"), m_inputValue, out);
      crdtp::SerializeField(crdtp::SpanFrom("inputChecked"), m_inputChecked, out);
      crdtp::SerializeField(crdtp::SpanFrom("optionSelected"), m_optionSelected, out);
      crdtp::SerializeField(crdtp::SpanFrom("backendNodeId"), m_backendNodeId, out);
      crdtp::SerializeField(crdtp::SpanFrom("childNodeIndexes"), m_childNodeIndexes, out);
      crdtp::SerializeField(crdtp::SpanFrom("attributes"), m_attributes, out);
      crdtp::SerializeField(crdtp::SpanFrom("pseudoElementIndexes"), m_pseudoElementIndexes, out);
      crdtp::SerializeField(crdtp::SpanFrom("layoutNodeIndex"), m_layoutNodeIndex, out);
      crdtp::SerializeField(crdtp::SpanFrom("documentURL"), m_documentURL, out);
      crdtp::SerializeField(crdtp::SpanFrom("baseURL"), m_baseURL, out);
      crdtp::SerializeField(crdtp::SpanFrom("contentLanguage"), m_contentLanguage, out);
      crdtp::SerializeField(crdtp::SpanFrom("documentEncoding"), m_documentEncoding, out);
      crdtp::SerializeField(crdtp::SpanFrom("publicId"), m_publicId, out);
      crdtp::SerializeField(crdtp::SpanFrom("systemId"), m_systemId, out);
      crdtp::SerializeField(crdtp::SpanFrom("frameId"), m_frameId, out);
      crdtp::SerializeField(crdtp::SpanFrom("contentDocumentIndex"), m_contentDocumentIndex, out);
      crdtp::SerializeField(crdtp::SpanFrom("pseudoType"), m_pseudoType, out);
      crdtp::SerializeField(crdtp::SpanFrom("shadowRootType"), m_shadowRootType, out);
      crdtp::SerializeField(crdtp::SpanFrom("isClickable"), m_isClickable, out);
      crdtp::SerializeField(crdtp::SpanFrom("eventListeners"), m_eventListeners, out);
      crdtp::SerializeField(crdtp::SpanFrom("currentSourceURL"), m_currentSourceURL, out);
      crdtp::SerializeField(crdtp::SpanFrom("originURL"), m_originURL, out);
      crdtp::SerializeField(crdtp::SpanFrom("scrollOffsetX"), m_scrollOffsetX, out);
      crdtp::SerializeField(crdtp::SpanFrom("scrollOffsetY"), m_scrollOffsetY, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<DOMNode> DOMNode::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<InlineTextBox> InlineTextBox::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<InlineTextBox> result(new InlineTextBox());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* boundingBoxValue = object->get("boundingBox");
    errors->SetName("boundingBox");
    result->m_boundingBox = ValueConversions<protocol::DOM::Rect>::fromValue(boundingBoxValue, errors);
    protocol::Value* startCharacterIndexValue = object->get("startCharacterIndex");
    errors->SetName("startCharacterIndex");
    result->m_startCharacterIndex = ValueConversions<int>::fromValue(startCharacterIndexValue, errors);
    protocol::Value* numCharactersValue = object->get("numCharacters");
    errors->SetName("numCharacters");
    result->m_numCharacters = ValueConversions<int>::fromValue(numCharactersValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> InlineTextBox::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("boundingBox", ValueConversions<protocol::DOM::Rect>::toValue(m_boundingBox.get()));
    result->setValue("startCharacterIndex", ValueConversions<int>::toValue(m_startCharacterIndex));
    result->setValue("numCharacters", ValueConversions<int>::toValue(m_numCharacters));
    return result;
}

void InlineTextBox::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("boundingBox"), m_boundingBox, out);
      crdtp::SerializeField(crdtp::SpanFrom("startCharacterIndex"), m_startCharacterIndex, out);
      crdtp::SerializeField(crdtp::SpanFrom("numCharacters"), m_numCharacters, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<InlineTextBox> InlineTextBox::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<LayoutTreeNode> LayoutTreeNode::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<LayoutTreeNode> result(new LayoutTreeNode());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* domNodeIndexValue = object->get("domNodeIndex");
    errors->SetName("domNodeIndex");
    result->m_domNodeIndex = ValueConversions<int>::fromValue(domNodeIndexValue, errors);
    protocol::Value* boundingBoxValue = object->get("boundingBox");
    errors->SetName("boundingBox");
    result->m_boundingBox = ValueConversions<protocol::DOM::Rect>::fromValue(boundingBoxValue, errors);
    protocol::Value* layoutTextValue = object->get("layoutText");
    if (layoutTextValue) {
        errors->SetName("layoutText");
        result->m_layoutText = ValueConversions<String>::fromValue(layoutTextValue, errors);
    }
    protocol::Value* inlineTextNodesValue = object->get("inlineTextNodes");
    if (inlineTextNodesValue) {
        errors->SetName("inlineTextNodes");
        result->m_inlineTextNodes = ValueConversions<protocol::Array<protocol::DOMSnapshot::InlineTextBox>>::fromValue(inlineTextNodesValue, errors);
    }
    protocol::Value* styleIndexValue = object->get("styleIndex");
    if (styleIndexValue) {
        errors->SetName("styleIndex");
        result->m_styleIndex = ValueConversions<int>::fromValue(styleIndexValue, errors);
    }
    protocol::Value* paintOrderValue = object->get("paintOrder");
    if (paintOrderValue) {
        errors->SetName("paintOrder");
        result->m_paintOrder = ValueConversions<int>::fromValue(paintOrderValue, errors);
    }
    protocol::Value* isStackingContextValue = object->get("isStackingContext");
    if (isStackingContextValue) {
        errors->SetName("isStackingContext");
        result->m_isStackingContext = ValueConversions<bool>::fromValue(isStackingContextValue, errors);
    }
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> LayoutTreeNode::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("domNodeIndex", ValueConversions<int>::toValue(m_domNodeIndex));
    result->setValue("boundingBox", ValueConversions<protocol::DOM::Rect>::toValue(m_boundingBox.get()));
    if (m_layoutText.isJust())
        result->setValue("layoutText", ValueConversions<String>::toValue(m_layoutText.fromJust()));
    if (m_inlineTextNodes.isJust())
        result->setValue("inlineTextNodes", ValueConversions<protocol::Array<protocol::DOMSnapshot::InlineTextBox>>::toValue(m_inlineTextNodes.fromJust()));
    if (m_styleIndex.isJust())
        result->setValue("styleIndex", ValueConversions<int>::toValue(m_styleIndex.fromJust()));
    if (m_paintOrder.isJust())
        result->setValue("paintOrder", ValueConversions<int>::toValue(m_paintOrder.fromJust()));
    if (m_isStackingContext.isJust())
        result->setValue("isStackingContext", ValueConversions<bool>::toValue(m_isStackingContext.fromJust()));
    return result;
}

void LayoutTreeNode::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("domNodeIndex"), m_domNodeIndex, out);
      crdtp::SerializeField(crdtp::SpanFrom("boundingBox"), m_boundingBox, out);
      crdtp::SerializeField(crdtp::SpanFrom("layoutText"), m_layoutText, out);
      crdtp::SerializeField(crdtp::SpanFrom("inlineTextNodes"), m_inlineTextNodes, out);
      crdtp::SerializeField(crdtp::SpanFrom("styleIndex"), m_styleIndex, out);
      crdtp::SerializeField(crdtp::SpanFrom("paintOrder"), m_paintOrder, out);
      crdtp::SerializeField(crdtp::SpanFrom("isStackingContext"), m_isStackingContext, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<LayoutTreeNode> LayoutTreeNode::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<ComputedStyle> ComputedStyle::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<ComputedStyle> result(new ComputedStyle());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* propertiesValue = object->get("properties");
    errors->SetName("properties");
    result->m_properties = ValueConversions<protocol::Array<protocol::DOMSnapshot::NameValue>>::fromValue(propertiesValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> ComputedStyle::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("properties", ValueConversions<protocol::Array<protocol::DOMSnapshot::NameValue>>::toValue(m_properties.get()));
    return result;
}

void ComputedStyle::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("properties"), m_properties, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<ComputedStyle> ComputedStyle::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<NameValue> NameValue::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<NameValue> result(new NameValue());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* nameValue = object->get("name");
    errors->SetName("name");
    result->m_name = ValueConversions<String>::fromValue(nameValue, errors);
    protocol::Value* valueValue = object->get("value");
    errors->SetName("value");
    result->m_value = ValueConversions<String>::fromValue(valueValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> NameValue::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("name", ValueConversions<String>::toValue(m_name));
    result->setValue("value", ValueConversions<String>::toValue(m_value));
    return result;
}

void NameValue::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("name"), m_name, out);
      crdtp::SerializeField(crdtp::SpanFrom("value"), m_value, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<NameValue> NameValue::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<RareStringData> RareStringData::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<RareStringData> result(new RareStringData());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* indexValue = object->get("index");
    errors->SetName("index");
    result->m_index = ValueConversions<protocol::Array<int>>::fromValue(indexValue, errors);
    protocol::Value* valueValue = object->get("value");
    errors->SetName("value");
    result->m_value = ValueConversions<protocol::Array<int>>::fromValue(valueValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> RareStringData::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("index", ValueConversions<protocol::Array<int>>::toValue(m_index.get()));
    result->setValue("value", ValueConversions<protocol::Array<int>>::toValue(m_value.get()));
    return result;
}

void RareStringData::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("index"), m_index, out);
      crdtp::SerializeField(crdtp::SpanFrom("value"), m_value, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<RareStringData> RareStringData::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<RareBooleanData> RareBooleanData::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<RareBooleanData> result(new RareBooleanData());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* indexValue = object->get("index");
    errors->SetName("index");
    result->m_index = ValueConversions<protocol::Array<int>>::fromValue(indexValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> RareBooleanData::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("index", ValueConversions<protocol::Array<int>>::toValue(m_index.get()));
    return result;
}

void RareBooleanData::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("index"), m_index, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<RareBooleanData> RareBooleanData::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<RareIntegerData> RareIntegerData::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<RareIntegerData> result(new RareIntegerData());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* indexValue = object->get("index");
    errors->SetName("index");
    result->m_index = ValueConversions<protocol::Array<int>>::fromValue(indexValue, errors);
    protocol::Value* valueValue = object->get("value");
    errors->SetName("value");
    result->m_value = ValueConversions<protocol::Array<int>>::fromValue(valueValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> RareIntegerData::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("index", ValueConversions<protocol::Array<int>>::toValue(m_index.get()));
    result->setValue("value", ValueConversions<protocol::Array<int>>::toValue(m_value.get()));
    return result;
}

void RareIntegerData::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("index"), m_index, out);
      crdtp::SerializeField(crdtp::SpanFrom("value"), m_value, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<RareIntegerData> RareIntegerData::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<DocumentSnapshot> DocumentSnapshot::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<DocumentSnapshot> result(new DocumentSnapshot());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* documentURLValue = object->get("documentURL");
    errors->SetName("documentURL");
    result->m_documentURL = ValueConversions<int>::fromValue(documentURLValue, errors);
    protocol::Value* titleValue = object->get("title");
    errors->SetName("title");
    result->m_title = ValueConversions<int>::fromValue(titleValue, errors);
    protocol::Value* baseURLValue = object->get("baseURL");
    errors->SetName("baseURL");
    result->m_baseURL = ValueConversions<int>::fromValue(baseURLValue, errors);
    protocol::Value* contentLanguageValue = object->get("contentLanguage");
    errors->SetName("contentLanguage");
    result->m_contentLanguage = ValueConversions<int>::fromValue(contentLanguageValue, errors);
    protocol::Value* encodingNameValue = object->get("encodingName");
    errors->SetName("encodingName");
    result->m_encodingName = ValueConversions<int>::fromValue(encodingNameValue, errors);
    protocol::Value* publicIdValue = object->get("publicId");
    errors->SetName("publicId");
    result->m_publicId = ValueConversions<int>::fromValue(publicIdValue, errors);
    protocol::Value* systemIdValue = object->get("systemId");
    errors->SetName("systemId");
    result->m_systemId = ValueConversions<int>::fromValue(systemIdValue, errors);
    protocol::Value* frameIdValue = object->get("frameId");
    errors->SetName("frameId");
    result->m_frameId = ValueConversions<int>::fromValue(frameIdValue, errors);
    protocol::Value* nodesValue = object->get("nodes");
    errors->SetName("nodes");
    result->m_nodes = ValueConversions<protocol::DOMSnapshot::NodeTreeSnapshot>::fromValue(nodesValue, errors);
    protocol::Value* layoutValue = object->get("layout");
    errors->SetName("layout");
    result->m_layout = ValueConversions<protocol::DOMSnapshot::LayoutTreeSnapshot>::fromValue(layoutValue, errors);
    protocol::Value* textBoxesValue = object->get("textBoxes");
    errors->SetName("textBoxes");
    result->m_textBoxes = ValueConversions<protocol::DOMSnapshot::TextBoxSnapshot>::fromValue(textBoxesValue, errors);
    protocol::Value* scrollOffsetXValue = object->get("scrollOffsetX");
    if (scrollOffsetXValue) {
        errors->SetName("scrollOffsetX");
        result->m_scrollOffsetX = ValueConversions<double>::fromValue(scrollOffsetXValue, errors);
    }
    protocol::Value* scrollOffsetYValue = object->get("scrollOffsetY");
    if (scrollOffsetYValue) {
        errors->SetName("scrollOffsetY");
        result->m_scrollOffsetY = ValueConversions<double>::fromValue(scrollOffsetYValue, errors);
    }
    protocol::Value* contentWidthValue = object->get("contentWidth");
    if (contentWidthValue) {
        errors->SetName("contentWidth");
        result->m_contentWidth = ValueConversions<double>::fromValue(contentWidthValue, errors);
    }
    protocol::Value* contentHeightValue = object->get("contentHeight");
    if (contentHeightValue) {
        errors->SetName("contentHeight");
        result->m_contentHeight = ValueConversions<double>::fromValue(contentHeightValue, errors);
    }
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> DocumentSnapshot::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("documentURL", ValueConversions<int>::toValue(m_documentURL));
    result->setValue("title", ValueConversions<int>::toValue(m_title));
    result->setValue("baseURL", ValueConversions<int>::toValue(m_baseURL));
    result->setValue("contentLanguage", ValueConversions<int>::toValue(m_contentLanguage));
    result->setValue("encodingName", ValueConversions<int>::toValue(m_encodingName));
    result->setValue("publicId", ValueConversions<int>::toValue(m_publicId));
    result->setValue("systemId", ValueConversions<int>::toValue(m_systemId));
    result->setValue("frameId", ValueConversions<int>::toValue(m_frameId));
    result->setValue("nodes", ValueConversions<protocol::DOMSnapshot::NodeTreeSnapshot>::toValue(m_nodes.get()));
    result->setValue("layout", ValueConversions<protocol::DOMSnapshot::LayoutTreeSnapshot>::toValue(m_layout.get()));
    result->setValue("textBoxes", ValueConversions<protocol::DOMSnapshot::TextBoxSnapshot>::toValue(m_textBoxes.get()));
    if (m_scrollOffsetX.isJust())
        result->setValue("scrollOffsetX", ValueConversions<double>::toValue(m_scrollOffsetX.fromJust()));
    if (m_scrollOffsetY.isJust())
        result->setValue("scrollOffsetY", ValueConversions<double>::toValue(m_scrollOffsetY.fromJust()));
    if (m_contentWidth.isJust())
        result->setValue("contentWidth", ValueConversions<double>::toValue(m_contentWidth.fromJust()));
    if (m_contentHeight.isJust())
        result->setValue("contentHeight", ValueConversions<double>::toValue(m_contentHeight.fromJust()));
    return result;
}

void DocumentSnapshot::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("documentURL"), m_documentURL, out);
      crdtp::SerializeField(crdtp::SpanFrom("title"), m_title, out);
      crdtp::SerializeField(crdtp::SpanFrom("baseURL"), m_baseURL, out);
      crdtp::SerializeField(crdtp::SpanFrom("contentLanguage"), m_contentLanguage, out);
      crdtp::SerializeField(crdtp::SpanFrom("encodingName"), m_encodingName, out);
      crdtp::SerializeField(crdtp::SpanFrom("publicId"), m_publicId, out);
      crdtp::SerializeField(crdtp::SpanFrom("systemId"), m_systemId, out);
      crdtp::SerializeField(crdtp::SpanFrom("frameId"), m_frameId, out);
      crdtp::SerializeField(crdtp::SpanFrom("nodes"), m_nodes, out);
      crdtp::SerializeField(crdtp::SpanFrom("layout"), m_layout, out);
      crdtp::SerializeField(crdtp::SpanFrom("textBoxes"), m_textBoxes, out);
      crdtp::SerializeField(crdtp::SpanFrom("scrollOffsetX"), m_scrollOffsetX, out);
      crdtp::SerializeField(crdtp::SpanFrom("scrollOffsetY"), m_scrollOffsetY, out);
      crdtp::SerializeField(crdtp::SpanFrom("contentWidth"), m_contentWidth, out);
      crdtp::SerializeField(crdtp::SpanFrom("contentHeight"), m_contentHeight, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<DocumentSnapshot> DocumentSnapshot::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<NodeTreeSnapshot> NodeTreeSnapshot::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<NodeTreeSnapshot> result(new NodeTreeSnapshot());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* parentIndexValue = object->get("parentIndex");
    if (parentIndexValue) {
        errors->SetName("parentIndex");
        result->m_parentIndex = ValueConversions<protocol::Array<int>>::fromValue(parentIndexValue, errors);
    }
    protocol::Value* nodeTypeValue = object->get("nodeType");
    if (nodeTypeValue) {
        errors->SetName("nodeType");
        result->m_nodeType = ValueConversions<protocol::Array<int>>::fromValue(nodeTypeValue, errors);
    }
    protocol::Value* nodeNameValue = object->get("nodeName");
    if (nodeNameValue) {
        errors->SetName("nodeName");
        result->m_nodeName = ValueConversions<protocol::Array<int>>::fromValue(nodeNameValue, errors);
    }
    protocol::Value* nodeValueValue = object->get("nodeValue");
    if (nodeValueValue) {
        errors->SetName("nodeValue");
        result->m_nodeValue = ValueConversions<protocol::Array<int>>::fromValue(nodeValueValue, errors);
    }
    protocol::Value* backendNodeIdValue = object->get("backendNodeId");
    if (backendNodeIdValue) {
        errors->SetName("backendNodeId");
        result->m_backendNodeId = ValueConversions<protocol::Array<int>>::fromValue(backendNodeIdValue, errors);
    }
    protocol::Value* attributesValue = object->get("attributes");
    if (attributesValue) {
        errors->SetName("attributes");
        result->m_attributes = ValueConversions<protocol::Array<protocol::Array<int>>>::fromValue(attributesValue, errors);
    }
    protocol::Value* textValueValue = object->get("textValue");
    if (textValueValue) {
        errors->SetName("textValue");
        result->m_textValue = ValueConversions<protocol::DOMSnapshot::RareStringData>::fromValue(textValueValue, errors);
    }
    protocol::Value* inputValueValue = object->get("inputValue");
    if (inputValueValue) {
        errors->SetName("inputValue");
        result->m_inputValue = ValueConversions<protocol::DOMSnapshot::RareStringData>::fromValue(inputValueValue, errors);
    }
    protocol::Value* inputCheckedValue = object->get("inputChecked");
    if (inputCheckedValue) {
        errors->SetName("inputChecked");
        result->m_inputChecked = ValueConversions<protocol::DOMSnapshot::RareBooleanData>::fromValue(inputCheckedValue, errors);
    }
    protocol::Value* optionSelectedValue = object->get("optionSelected");
    if (optionSelectedValue) {
        errors->SetName("optionSelected");
        result->m_optionSelected = ValueConversions<protocol::DOMSnapshot::RareBooleanData>::fromValue(optionSelectedValue, errors);
    }
    protocol::Value* contentDocumentIndexValue = object->get("contentDocumentIndex");
    if (contentDocumentIndexValue) {
        errors->SetName("contentDocumentIndex");
        result->m_contentDocumentIndex = ValueConversions<protocol::DOMSnapshot::RareIntegerData>::fromValue(contentDocumentIndexValue, errors);
    }
    protocol::Value* pseudoTypeValue = object->get("pseudoType");
    if (pseudoTypeValue) {
        errors->SetName("pseudoType");
        result->m_pseudoType = ValueConversions<protocol::DOMSnapshot::RareStringData>::fromValue(pseudoTypeValue, errors);
    }
    protocol::Value* isClickableValue = object->get("isClickable");
    if (isClickableValue) {
        errors->SetName("isClickable");
        result->m_isClickable = ValueConversions<protocol::DOMSnapshot::RareBooleanData>::fromValue(isClickableValue, errors);
    }
    protocol::Value* currentSourceURLValue = object->get("currentSourceURL");
    if (currentSourceURLValue) {
        errors->SetName("currentSourceURL");
        result->m_currentSourceURL = ValueConversions<protocol::DOMSnapshot::RareStringData>::fromValue(currentSourceURLValue, errors);
    }
    protocol::Value* originURLValue = object->get("originURL");
    if (originURLValue) {
        errors->SetName("originURL");
        result->m_originURL = ValueConversions<protocol::DOMSnapshot::RareStringData>::fromValue(originURLValue, errors);
    }
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> NodeTreeSnapshot::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    if (m_parentIndex.isJust())
        result->setValue("parentIndex", ValueConversions<protocol::Array<int>>::toValue(m_parentIndex.fromJust()));
    if (m_nodeType.isJust())
        result->setValue("nodeType", ValueConversions<protocol::Array<int>>::toValue(m_nodeType.fromJust()));
    if (m_nodeName.isJust())
        result->setValue("nodeName", ValueConversions<protocol::Array<int>>::toValue(m_nodeName.fromJust()));
    if (m_nodeValue.isJust())
        result->setValue("nodeValue", ValueConversions<protocol::Array<int>>::toValue(m_nodeValue.fromJust()));
    if (m_backendNodeId.isJust())
        result->setValue("backendNodeId", ValueConversions<protocol::Array<int>>::toValue(m_backendNodeId.fromJust()));
    if (m_attributes.isJust())
        result->setValue("attributes", ValueConversions<protocol::Array<protocol::Array<int>>>::toValue(m_attributes.fromJust()));
    if (m_textValue.isJust())
        result->setValue("textValue", ValueConversions<protocol::DOMSnapshot::RareStringData>::toValue(m_textValue.fromJust()));
    if (m_inputValue.isJust())
        result->setValue("inputValue", ValueConversions<protocol::DOMSnapshot::RareStringData>::toValue(m_inputValue.fromJust()));
    if (m_inputChecked.isJust())
        result->setValue("inputChecked", ValueConversions<protocol::DOMSnapshot::RareBooleanData>::toValue(m_inputChecked.fromJust()));
    if (m_optionSelected.isJust())
        result->setValue("optionSelected", ValueConversions<protocol::DOMSnapshot::RareBooleanData>::toValue(m_optionSelected.fromJust()));
    if (m_contentDocumentIndex.isJust())
        result->setValue("contentDocumentIndex", ValueConversions<protocol::DOMSnapshot::RareIntegerData>::toValue(m_contentDocumentIndex.fromJust()));
    if (m_pseudoType.isJust())
        result->setValue("pseudoType", ValueConversions<protocol::DOMSnapshot::RareStringData>::toValue(m_pseudoType.fromJust()));
    if (m_isClickable.isJust())
        result->setValue("isClickable", ValueConversions<protocol::DOMSnapshot::RareBooleanData>::toValue(m_isClickable.fromJust()));
    if (m_currentSourceURL.isJust())
        result->setValue("currentSourceURL", ValueConversions<protocol::DOMSnapshot::RareStringData>::toValue(m_currentSourceURL.fromJust()));
    if (m_originURL.isJust())
        result->setValue("originURL", ValueConversions<protocol::DOMSnapshot::RareStringData>::toValue(m_originURL.fromJust()));
    return result;
}

void NodeTreeSnapshot::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("parentIndex"), m_parentIndex, out);
      crdtp::SerializeField(crdtp::SpanFrom("nodeType"), m_nodeType, out);
      crdtp::SerializeField(crdtp::SpanFrom("nodeName"), m_nodeName, out);
      crdtp::SerializeField(crdtp::SpanFrom("nodeValue"), m_nodeValue, out);
      crdtp::SerializeField(crdtp::SpanFrom("backendNodeId"), m_backendNodeId, out);
      crdtp::SerializeField(crdtp::SpanFrom("attributes"), m_attributes, out);
      crdtp::SerializeField(crdtp::SpanFrom("textValue"), m_textValue, out);
      crdtp::SerializeField(crdtp::SpanFrom("inputValue"), m_inputValue, out);
      crdtp::SerializeField(crdtp::SpanFrom("inputChecked"), m_inputChecked, out);
      crdtp::SerializeField(crdtp::SpanFrom("optionSelected"), m_optionSelected, out);
      crdtp::SerializeField(crdtp::SpanFrom("contentDocumentIndex"), m_contentDocumentIndex, out);
      crdtp::SerializeField(crdtp::SpanFrom("pseudoType"), m_pseudoType, out);
      crdtp::SerializeField(crdtp::SpanFrom("isClickable"), m_isClickable, out);
      crdtp::SerializeField(crdtp::SpanFrom("currentSourceURL"), m_currentSourceURL, out);
      crdtp::SerializeField(crdtp::SpanFrom("originURL"), m_originURL, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<NodeTreeSnapshot> NodeTreeSnapshot::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<LayoutTreeSnapshot> LayoutTreeSnapshot::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<LayoutTreeSnapshot> result(new LayoutTreeSnapshot());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* nodeIndexValue = object->get("nodeIndex");
    errors->SetName("nodeIndex");
    result->m_nodeIndex = ValueConversions<protocol::Array<int>>::fromValue(nodeIndexValue, errors);
    protocol::Value* stylesValue = object->get("styles");
    errors->SetName("styles");
    result->m_styles = ValueConversions<protocol::Array<protocol::Array<int>>>::fromValue(stylesValue, errors);
    protocol::Value* boundsValue = object->get("bounds");
    errors->SetName("bounds");
    result->m_bounds = ValueConversions<protocol::Array<protocol::Array<double>>>::fromValue(boundsValue, errors);
    protocol::Value* textValue = object->get("text");
    errors->SetName("text");
    result->m_text = ValueConversions<protocol::Array<int>>::fromValue(textValue, errors);
    protocol::Value* stackingContextsValue = object->get("stackingContexts");
    errors->SetName("stackingContexts");
    result->m_stackingContexts = ValueConversions<protocol::DOMSnapshot::RareBooleanData>::fromValue(stackingContextsValue, errors);
    protocol::Value* paintOrdersValue = object->get("paintOrders");
    if (paintOrdersValue) {
        errors->SetName("paintOrders");
        result->m_paintOrders = ValueConversions<protocol::Array<int>>::fromValue(paintOrdersValue, errors);
    }
    protocol::Value* offsetRectsValue = object->get("offsetRects");
    if (offsetRectsValue) {
        errors->SetName("offsetRects");
        result->m_offsetRects = ValueConversions<protocol::Array<protocol::Array<double>>>::fromValue(offsetRectsValue, errors);
    }
    protocol::Value* scrollRectsValue = object->get("scrollRects");
    if (scrollRectsValue) {
        errors->SetName("scrollRects");
        result->m_scrollRects = ValueConversions<protocol::Array<protocol::Array<double>>>::fromValue(scrollRectsValue, errors);
    }
    protocol::Value* clientRectsValue = object->get("clientRects");
    if (clientRectsValue) {
        errors->SetName("clientRects");
        result->m_clientRects = ValueConversions<protocol::Array<protocol::Array<double>>>::fromValue(clientRectsValue, errors);
    }
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> LayoutTreeSnapshot::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("nodeIndex", ValueConversions<protocol::Array<int>>::toValue(m_nodeIndex.get()));
    result->setValue("styles", ValueConversions<protocol::Array<protocol::Array<int>>>::toValue(m_styles.get()));
    result->setValue("bounds", ValueConversions<protocol::Array<protocol::Array<double>>>::toValue(m_bounds.get()));
    result->setValue("text", ValueConversions<protocol::Array<int>>::toValue(m_text.get()));
    result->setValue("stackingContexts", ValueConversions<protocol::DOMSnapshot::RareBooleanData>::toValue(m_stackingContexts.get()));
    if (m_paintOrders.isJust())
        result->setValue("paintOrders", ValueConversions<protocol::Array<int>>::toValue(m_paintOrders.fromJust()));
    if (m_offsetRects.isJust())
        result->setValue("offsetRects", ValueConversions<protocol::Array<protocol::Array<double>>>::toValue(m_offsetRects.fromJust()));
    if (m_scrollRects.isJust())
        result->setValue("scrollRects", ValueConversions<protocol::Array<protocol::Array<double>>>::toValue(m_scrollRects.fromJust()));
    if (m_clientRects.isJust())
        result->setValue("clientRects", ValueConversions<protocol::Array<protocol::Array<double>>>::toValue(m_clientRects.fromJust()));
    return result;
}

void LayoutTreeSnapshot::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("nodeIndex"), m_nodeIndex, out);
      crdtp::SerializeField(crdtp::SpanFrom("styles"), m_styles, out);
      crdtp::SerializeField(crdtp::SpanFrom("bounds"), m_bounds, out);
      crdtp::SerializeField(crdtp::SpanFrom("text"), m_text, out);
      crdtp::SerializeField(crdtp::SpanFrom("stackingContexts"), m_stackingContexts, out);
      crdtp::SerializeField(crdtp::SpanFrom("paintOrders"), m_paintOrders, out);
      crdtp::SerializeField(crdtp::SpanFrom("offsetRects"), m_offsetRects, out);
      crdtp::SerializeField(crdtp::SpanFrom("scrollRects"), m_scrollRects, out);
      crdtp::SerializeField(crdtp::SpanFrom("clientRects"), m_clientRects, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<LayoutTreeSnapshot> LayoutTreeSnapshot::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<TextBoxSnapshot> TextBoxSnapshot::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<TextBoxSnapshot> result(new TextBoxSnapshot());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* layoutIndexValue = object->get("layoutIndex");
    errors->SetName("layoutIndex");
    result->m_layoutIndex = ValueConversions<protocol::Array<int>>::fromValue(layoutIndexValue, errors);
    protocol::Value* boundsValue = object->get("bounds");
    errors->SetName("bounds");
    result->m_bounds = ValueConversions<protocol::Array<protocol::Array<double>>>::fromValue(boundsValue, errors);
    protocol::Value* startValue = object->get("start");
    errors->SetName("start");
    result->m_start = ValueConversions<protocol::Array<int>>::fromValue(startValue, errors);
    protocol::Value* lengthValue = object->get("length");
    errors->SetName("length");
    result->m_length = ValueConversions<protocol::Array<int>>::fromValue(lengthValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> TextBoxSnapshot::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("layoutIndex", ValueConversions<protocol::Array<int>>::toValue(m_layoutIndex.get()));
    result->setValue("bounds", ValueConversions<protocol::Array<protocol::Array<double>>>::toValue(m_bounds.get()));
    result->setValue("start", ValueConversions<protocol::Array<int>>::toValue(m_start.get()));
    result->setValue("length", ValueConversions<protocol::Array<int>>::toValue(m_length.get()));
    return result;
}

void TextBoxSnapshot::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("layoutIndex"), m_layoutIndex, out);
      crdtp::SerializeField(crdtp::SpanFrom("bounds"), m_bounds, out);
      crdtp::SerializeField(crdtp::SpanFrom("start"), m_start, out);
      crdtp::SerializeField(crdtp::SpanFrom("length"), m_length, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<TextBoxSnapshot> TextBoxSnapshot::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

// ------------- Enum values from params.


// ------------- Frontend notifications.

void Frontend::flush()
{
    frontend_channel_->FlushProtocolNotifications();
}

void Frontend::sendRawNotification(std::unique_ptr<Serializable> notification)
{
    frontend_channel_->SendProtocolNotification(std::move(notification));
}

// --------------------- Dispatcher.

class DomainDispatcherImpl : public protocol::DomainDispatcher {
public:
    DomainDispatcherImpl(FrontendChannel* frontendChannel, Backend* backend)
        : DomainDispatcher(frontendChannel)
        , m_backend(backend) {}
    ~DomainDispatcherImpl() override { }

    using CallHandler = void (DomainDispatcherImpl::*)(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);

    std::function<void(const crdtp::Dispatchable&)> Dispatch(crdtp::span<uint8_t> command_name) override;

    void disable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void enable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void getSnapshot(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void captureSnapshot(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
 protected:
    Backend* m_backend;
};

namespace {
// This helper method with a static map of command methods (instance methods
// of DomainDispatcherImpl declared just above) by their name is used immediately below,
// in the DomainDispatcherImpl::Dispatch method.
DomainDispatcherImpl::CallHandler CommandByName(crdtp::span<uint8_t> command_name) {
  static auto* commands = [](){
    auto* commands = new std::vector<std::pair<crdtp::span<uint8_t>,
                              DomainDispatcherImpl::CallHandler>>{
    {
          crdtp::SpanFrom("captureSnapshot"),
          &DomainDispatcherImpl::captureSnapshot
    },
    {
          crdtp::SpanFrom("disable"),
          &DomainDispatcherImpl::disable
    },
    {
          crdtp::SpanFrom("enable"),
          &DomainDispatcherImpl::enable
    },
    {
          crdtp::SpanFrom("getSnapshot"),
          &DomainDispatcherImpl::getSnapshot
    },
    };
    return commands;
  }();
  return crdtp::FindByFirst<DomainDispatcherImpl::CallHandler>(*commands, command_name, nullptr);
}
}  // namespace

std::function<void(const crdtp::Dispatchable&)> DomainDispatcherImpl::Dispatch(crdtp::span<uint8_t> command_name) {
  CallHandler handler = CommandByName(command_name);
  if (!handler) return nullptr;
  return [this, handler](const crdtp::Dispatchable& dispatchable){
    std::unique_ptr<DictionaryValue> params =
        DictionaryValue::cast(protocol::Value::parseBinary(dispatchable.Params().data(),
        dispatchable.Params().size()));
    ErrorSupport errors;
    errors.Push();
    (this->*handler)(dispatchable, params.get(), &errors);
  };
}


void DomainDispatcherImpl::disable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->disable();
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("DOMSnapshot.disable"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::enable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->enable();
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("DOMSnapshot.enable"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::getSnapshot(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* computedStyleWhitelistValue = params ? params->get("computedStyleWhitelist") : nullptr;
    errors->SetName("computedStyleWhitelist");
    std::unique_ptr<protocol::Array<String>> in_computedStyleWhitelist = ValueConversions<protocol::Array<String>>::fromValue(computedStyleWhitelistValue, errors);
    protocol::Value* includeEventListenersValue = params ? params->get("includeEventListeners") : nullptr;
    Maybe<bool> in_includeEventListeners;
    if (includeEventListenersValue) {
        errors->SetName("includeEventListeners");
        in_includeEventListeners = ValueConversions<bool>::fromValue(includeEventListenersValue, errors);
    }
    protocol::Value* includePaintOrderValue = params ? params->get("includePaintOrder") : nullptr;
    Maybe<bool> in_includePaintOrder;
    if (includePaintOrderValue) {
        errors->SetName("includePaintOrder");
        in_includePaintOrder = ValueConversions<bool>::fromValue(includePaintOrderValue, errors);
    }
    protocol::Value* includeUserAgentShadowTreeValue = params ? params->get("includeUserAgentShadowTree") : nullptr;
    Maybe<bool> in_includeUserAgentShadowTree;
    if (includeUserAgentShadowTreeValue) {
        errors->SetName("includeUserAgentShadowTree");
        in_includeUserAgentShadowTree = ValueConversions<bool>::fromValue(includeUserAgentShadowTreeValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    std::unique_ptr<protocol::Array<protocol::DOMSnapshot::DOMNode>> out_domNodes;
    std::unique_ptr<protocol::Array<protocol::DOMSnapshot::LayoutTreeNode>> out_layoutTreeNodes;
    std::unique_ptr<protocol::Array<protocol::DOMSnapshot::ComputedStyle>> out_computedStyles;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->getSnapshot(std::move(in_computedStyleWhitelist), std::move(in_includeEventListeners), std::move(in_includePaintOrder), std::move(in_includeUserAgentShadowTree), &out_domNodes, &out_layoutTreeNodes, &out_computedStyles);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("DOMSnapshot.getSnapshot"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
            crdtp::SerializeField(crdtp::SpanFrom("domNodes"), out_domNodes, &result);
            crdtp::SerializeField(crdtp::SpanFrom("layoutTreeNodes"), out_layoutTreeNodes, &result);
            crdtp::SerializeField(crdtp::SpanFrom("computedStyles"), out_computedStyles, &result);
          result.push_back(crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::captureSnapshot(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* computedStylesValue = params ? params->get("computedStyles") : nullptr;
    errors->SetName("computedStyles");
    std::unique_ptr<protocol::Array<String>> in_computedStyles = ValueConversions<protocol::Array<String>>::fromValue(computedStylesValue, errors);
    protocol::Value* includePaintOrderValue = params ? params->get("includePaintOrder") : nullptr;
    Maybe<bool> in_includePaintOrder;
    if (includePaintOrderValue) {
        errors->SetName("includePaintOrder");
        in_includePaintOrder = ValueConversions<bool>::fromValue(includePaintOrderValue, errors);
    }
    protocol::Value* includeDOMRectsValue = params ? params->get("includeDOMRects") : nullptr;
    Maybe<bool> in_includeDOMRects;
    if (includeDOMRectsValue) {
        errors->SetName("includeDOMRects");
        in_includeDOMRects = ValueConversions<bool>::fromValue(includeDOMRectsValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    std::unique_ptr<protocol::Array<protocol::DOMSnapshot::DocumentSnapshot>> out_documents;
    std::unique_ptr<protocol::Array<String>> out_strings;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->captureSnapshot(std::move(in_computedStyles), std::move(in_includePaintOrder), std::move(in_includeDOMRects), &out_documents, &out_strings);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("DOMSnapshot.captureSnapshot"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
            crdtp::SerializeField(crdtp::SpanFrom("documents"), out_documents, &result);
            crdtp::SerializeField(crdtp::SpanFrom("strings"), out_strings, &result);
          result.push_back(crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, crdtp::Serializable::From(std::move(result)));
      }
    return;
}

namespace {
// This helper method (with a static map of redirects) is used from Dispatcher::wire
// immediately below.
const std::vector<std::pair<crdtp::span<uint8_t>, crdtp::span<uint8_t>>>& SortedRedirects() {
  static auto* redirects = [](){
    auto* redirects = new std::vector<std::pair<crdtp::span<uint8_t>, crdtp::span<uint8_t>>>{
    };
    return redirects;
  }();
  return *redirects;
}
}  // namespace

// static
void Dispatcher::wire(UberDispatcher* uber, Backend* backend)
{
    auto dispatcher = std::make_unique<DomainDispatcherImpl>(uber->channel(), backend);
    uber->WireBackend(crdtp::SpanFrom("DOMSnapshot"), SortedRedirects(), std::move(dispatcher));
}

} // DOMSnapshot
} // namespace blink
} // namespace protocol

// This file is generated by TypeBuilder_cpp.template.

// Copyright (c) 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "third_party/blink/renderer/core/inspector/protocol/DOMStorage.h"

#include "third_party/blink/renderer/core/inspector/protocol/Protocol.h"

#include "third_party/inspector_protocol/crdtp/cbor.h"
#include "third_party/inspector_protocol/crdtp/find_by_first.h"
#include "third_party/inspector_protocol/crdtp/serializer_traits.h"
#include "third_party/inspector_protocol/crdtp/span.h"

namespace blink {
namespace protocol {
namespace DOMStorage {

// ------------- Enum values from types.

const char Metainfo::domainName[] = "DOMStorage";
const char Metainfo::commandPrefix[] = "DOMStorage.";
const char Metainfo::version[] = "1.3";

std::unique_ptr<StorageId> StorageId::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<StorageId> result(new StorageId());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* securityOriginValue = object->get("securityOrigin");
    errors->SetName("securityOrigin");
    result->m_securityOrigin = ValueConversions<String>::fromValue(securityOriginValue, errors);
    protocol::Value* isLocalStorageValue = object->get("isLocalStorage");
    errors->SetName("isLocalStorage");
    result->m_isLocalStorage = ValueConversions<bool>::fromValue(isLocalStorageValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> StorageId::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("securityOrigin", ValueConversions<String>::toValue(m_securityOrigin));
    result->setValue("isLocalStorage", ValueConversions<bool>::toValue(m_isLocalStorage));
    return result;
}

void StorageId::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("securityOrigin"), m_securityOrigin, out);
      crdtp::SerializeField(crdtp::SpanFrom("isLocalStorage"), m_isLocalStorage, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<StorageId> StorageId::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<DomStorageItemAddedNotification> DomStorageItemAddedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<DomStorageItemAddedNotification> result(new DomStorageItemAddedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* storageIdValue = object->get("storageId");
    errors->SetName("storageId");
    result->m_storageId = ValueConversions<protocol::DOMStorage::StorageId>::fromValue(storageIdValue, errors);
    protocol::Value* keyValue = object->get("key");
    errors->SetName("key");
    result->m_key = ValueConversions<String>::fromValue(keyValue, errors);
    protocol::Value* newValueValue = object->get("newValue");
    errors->SetName("newValue");
    result->m_newValue = ValueConversions<String>::fromValue(newValueValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> DomStorageItemAddedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("storageId", ValueConversions<protocol::DOMStorage::StorageId>::toValue(m_storageId.get()));
    result->setValue("key", ValueConversions<String>::toValue(m_key));
    result->setValue("newValue", ValueConversions<String>::toValue(m_newValue));
    return result;
}

void DomStorageItemAddedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("storageId"), m_storageId, out);
      crdtp::SerializeField(crdtp::SpanFrom("key"), m_key, out);
      crdtp::SerializeField(crdtp::SpanFrom("newValue"), m_newValue, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<DomStorageItemAddedNotification> DomStorageItemAddedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<DomStorageItemRemovedNotification> DomStorageItemRemovedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<DomStorageItemRemovedNotification> result(new DomStorageItemRemovedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* storageIdValue = object->get("storageId");
    errors->SetName("storageId");
    result->m_storageId = ValueConversions<protocol::DOMStorage::StorageId>::fromValue(storageIdValue, errors);
    protocol::Value* keyValue = object->get("key");
    errors->SetName("key");
    result->m_key = ValueConversions<String>::fromValue(keyValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> DomStorageItemRemovedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("storageId", ValueConversions<protocol::DOMStorage::StorageId>::toValue(m_storageId.get()));
    result->setValue("key", ValueConversions<String>::toValue(m_key));
    return result;
}

void DomStorageItemRemovedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("storageId"), m_storageId, out);
      crdtp::SerializeField(crdtp::SpanFrom("key"), m_key, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<DomStorageItemRemovedNotification> DomStorageItemRemovedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<DomStorageItemUpdatedNotification> DomStorageItemUpdatedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<DomStorageItemUpdatedNotification> result(new DomStorageItemUpdatedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* storageIdValue = object->get("storageId");
    errors->SetName("storageId");
    result->m_storageId = ValueConversions<protocol::DOMStorage::StorageId>::fromValue(storageIdValue, errors);
    protocol::Value* keyValue = object->get("key");
    errors->SetName("key");
    result->m_key = ValueConversions<String>::fromValue(keyValue, errors);
    protocol::Value* oldValueValue = object->get("oldValue");
    errors->SetName("oldValue");
    result->m_oldValue = ValueConversions<String>::fromValue(oldValueValue, errors);
    protocol::Value* newValueValue = object->get("newValue");
    errors->SetName("newValue");
    result->m_newValue = ValueConversions<String>::fromValue(newValueValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> DomStorageItemUpdatedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("storageId", ValueConversions<protocol::DOMStorage::StorageId>::toValue(m_storageId.get()));
    result->setValue("key", ValueConversions<String>::toValue(m_key));
    result->setValue("oldValue", ValueConversions<String>::toValue(m_oldValue));
    result->setValue("newValue", ValueConversions<String>::toValue(m_newValue));
    return result;
}

void DomStorageItemUpdatedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("storageId"), m_storageId, out);
      crdtp::SerializeField(crdtp::SpanFrom("key"), m_key, out);
      crdtp::SerializeField(crdtp::SpanFrom("oldValue"), m_oldValue, out);
      crdtp::SerializeField(crdtp::SpanFrom("newValue"), m_newValue, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<DomStorageItemUpdatedNotification> DomStorageItemUpdatedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<DomStorageItemsClearedNotification> DomStorageItemsClearedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<DomStorageItemsClearedNotification> result(new DomStorageItemsClearedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* storageIdValue = object->get("storageId");
    errors->SetName("storageId");
    result->m_storageId = ValueConversions<protocol::DOMStorage::StorageId>::fromValue(storageIdValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> DomStorageItemsClearedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("storageId", ValueConversions<protocol::DOMStorage::StorageId>::toValue(m_storageId.get()));
    return result;
}

void DomStorageItemsClearedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("storageId"), m_storageId, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<DomStorageItemsClearedNotification> DomStorageItemsClearedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

// ------------- Enum values from params.


// ------------- Frontend notifications.

void Frontend::domStorageItemAdded(std::unique_ptr<protocol::DOMStorage::StorageId> storageId, const String& key, const String& newValue)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<DomStorageItemAddedNotification> messageData = DomStorageItemAddedNotification::create()
        .setStorageId(std::move(storageId))
        .setKey(key)
        .setNewValue(newValue)
        .build();
    frontend_channel_->SendProtocolNotification(crdtp::CreateNotification("DOMStorage.domStorageItemAdded", std::move(messageData)));
}

void Frontend::domStorageItemRemoved(std::unique_ptr<protocol::DOMStorage::StorageId> storageId, const String& key)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<DomStorageItemRemovedNotification> messageData = DomStorageItemRemovedNotification::create()
        .setStorageId(std::move(storageId))
        .setKey(key)
        .build();
    frontend_channel_->SendProtocolNotification(crdtp::CreateNotification("DOMStorage.domStorageItemRemoved", std::move(messageData)));
}

void Frontend::domStorageItemUpdated(std::unique_ptr<protocol::DOMStorage::StorageId> storageId, const String& key, const String& oldValue, const String& newValue)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<DomStorageItemUpdatedNotification> messageData = DomStorageItemUpdatedNotification::create()
        .setStorageId(std::move(storageId))
        .setKey(key)
        .setOldValue(oldValue)
        .setNewValue(newValue)
        .build();
    frontend_channel_->SendProtocolNotification(crdtp::CreateNotification("DOMStorage.domStorageItemUpdated", std::move(messageData)));
}

void Frontend::domStorageItemsCleared(std::unique_ptr<protocol::DOMStorage::StorageId> storageId)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<DomStorageItemsClearedNotification> messageData = DomStorageItemsClearedNotification::create()
        .setStorageId(std::move(storageId))
        .build();
    frontend_channel_->SendProtocolNotification(crdtp::CreateNotification("DOMStorage.domStorageItemsCleared", std::move(messageData)));
}

void Frontend::flush()
{
    frontend_channel_->FlushProtocolNotifications();
}

void Frontend::sendRawNotification(std::unique_ptr<Serializable> notification)
{
    frontend_channel_->SendProtocolNotification(std::move(notification));
}

// --------------------- Dispatcher.

class DomainDispatcherImpl : public protocol::DomainDispatcher {
public:
    DomainDispatcherImpl(FrontendChannel* frontendChannel, Backend* backend)
        : DomainDispatcher(frontendChannel)
        , m_backend(backend) {}
    ~DomainDispatcherImpl() override { }

    using CallHandler = void (DomainDispatcherImpl::*)(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);

    std::function<void(const crdtp::Dispatchable&)> Dispatch(crdtp::span<uint8_t> command_name) override;

    void clear(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void disable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void enable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void getDOMStorageItems(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void removeDOMStorageItem(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setDOMStorageItem(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
 protected:
    Backend* m_backend;
};

namespace {
// This helper method with a static map of command methods (instance methods
// of DomainDispatcherImpl declared just above) by their name is used immediately below,
// in the DomainDispatcherImpl::Dispatch method.
DomainDispatcherImpl::CallHandler CommandByName(crdtp::span<uint8_t> command_name) {
  static auto* commands = [](){
    auto* commands = new std::vector<std::pair<crdtp::span<uint8_t>,
                              DomainDispatcherImpl::CallHandler>>{
    {
          crdtp::SpanFrom("clear"),
          &DomainDispatcherImpl::clear
    },
    {
          crdtp::SpanFrom("disable"),
          &DomainDispatcherImpl::disable
    },
    {
          crdtp::SpanFrom("enable"),
          &DomainDispatcherImpl::enable
    },
    {
          crdtp::SpanFrom("getDOMStorageItems"),
          &DomainDispatcherImpl::getDOMStorageItems
    },
    {
          crdtp::SpanFrom("removeDOMStorageItem"),
          &DomainDispatcherImpl::removeDOMStorageItem
    },
    {
          crdtp::SpanFrom("setDOMStorageItem"),
          &DomainDispatcherImpl::setDOMStorageItem
    },
    };
    return commands;
  }();
  return crdtp::FindByFirst<DomainDispatcherImpl::CallHandler>(*commands, command_name, nullptr);
}
}  // namespace

std::function<void(const crdtp::Dispatchable&)> DomainDispatcherImpl::Dispatch(crdtp::span<uint8_t> command_name) {
  CallHandler handler = CommandByName(command_name);
  if (!handler) return nullptr;
  return [this, handler](const crdtp::Dispatchable& dispatchable){
    std::unique_ptr<DictionaryValue> params =
        DictionaryValue::cast(protocol::Value::parseBinary(dispatchable.Params().data(),
        dispatchable.Params().size()));
    ErrorSupport errors;
    errors.Push();
    (this->*handler)(dispatchable, params.get(), &errors);
  };
}


void DomainDispatcherImpl::clear(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* storageIdValue = params ? params->get("storageId") : nullptr;
    errors->SetName("storageId");
    std::unique_ptr<protocol::DOMStorage::StorageId> in_storageId = ValueConversions<protocol::DOMStorage::StorageId>::fromValue(storageIdValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->clear(std::move(in_storageId));
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("DOMStorage.clear"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::disable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->disable();
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("DOMStorage.disable"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::enable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->enable();
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("DOMStorage.enable"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::getDOMStorageItems(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* storageIdValue = params ? params->get("storageId") : nullptr;
    errors->SetName("storageId");
    std::unique_ptr<protocol::DOMStorage::StorageId> in_storageId = ValueConversions<protocol::DOMStorage::StorageId>::fromValue(storageIdValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    std::unique_ptr<protocol::Array<protocol::Array<String>>> out_entries;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->getDOMStorageItems(std::move(in_storageId), &out_entries);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("DOMStorage.getDOMStorageItems"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
            crdtp::SerializeField(crdtp::SpanFrom("entries"), out_entries, &result);
          result.push_back(crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::removeDOMStorageItem(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* storageIdValue = params ? params->get("storageId") : nullptr;
    errors->SetName("storageId");
    std::unique_ptr<protocol::DOMStorage::StorageId> in_storageId = ValueConversions<protocol::DOMStorage::StorageId>::fromValue(storageIdValue, errors);
    protocol::Value* keyValue = params ? params->get("key") : nullptr;
    errors->SetName("key");
    String in_key = ValueConversions<String>::fromValue(keyValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->removeDOMStorageItem(std::move(in_storageId), in_key);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("DOMStorage.removeDOMStorageItem"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setDOMStorageItem(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* storageIdValue = params ? params->get("storageId") : nullptr;
    errors->SetName("storageId");
    std::unique_ptr<protocol::DOMStorage::StorageId> in_storageId = ValueConversions<protocol::DOMStorage::StorageId>::fromValue(storageIdValue, errors);
    protocol::Value* keyValue = params ? params->get("key") : nullptr;
    errors->SetName("key");
    String in_key = ValueConversions<String>::fromValue(keyValue, errors);
    protocol::Value* valueValue = params ? params->get("value") : nullptr;
    errors->SetName("value");
    String in_value = ValueConversions<String>::fromValue(valueValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setDOMStorageItem(std::move(in_storageId), in_key, in_value);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("DOMStorage.setDOMStorageItem"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

namespace {
// This helper method (with a static map of redirects) is used from Dispatcher::wire
// immediately below.
const std::vector<std::pair<crdtp::span<uint8_t>, crdtp::span<uint8_t>>>& SortedRedirects() {
  static auto* redirects = [](){
    auto* redirects = new std::vector<std::pair<crdtp::span<uint8_t>, crdtp::span<uint8_t>>>{
    };
    return redirects;
  }();
  return *redirects;
}
}  // namespace

// static
void Dispatcher::wire(UberDispatcher* uber, Backend* backend)
{
    auto dispatcher = std::make_unique<DomainDispatcherImpl>(uber->channel(), backend);
    uber->WireBackend(crdtp::SpanFrom("DOMStorage"), SortedRedirects(), std::move(dispatcher));
}

} // DOMStorage
} // namespace blink
} // namespace protocol

// This file is generated by TypeBuilder_cpp.template.

// Copyright (c) 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "third_party/blink/renderer/core/inspector/protocol/Overlay.h"

#include "third_party/blink/renderer/core/inspector/protocol/Protocol.h"

#include "third_party/inspector_protocol/crdtp/cbor.h"
#include "third_party/inspector_protocol/crdtp/find_by_first.h"
#include "third_party/inspector_protocol/crdtp/serializer_traits.h"
#include "third_party/inspector_protocol/crdtp/span.h"

namespace blink {
namespace protocol {
namespace Overlay {

// ------------- Enum values from types.

const char Metainfo::domainName[] = "Overlay";
const char Metainfo::commandPrefix[] = "Overlay.";
const char Metainfo::version[] = "1.3";

std::unique_ptr<GridHighlightConfig> GridHighlightConfig::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<GridHighlightConfig> result(new GridHighlightConfig());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* showGridExtensionLinesValue = object->get("showGridExtensionLines");
    if (showGridExtensionLinesValue) {
        errors->SetName("showGridExtensionLines");
        result->m_showGridExtensionLines = ValueConversions<bool>::fromValue(showGridExtensionLinesValue, errors);
    }
    protocol::Value* showPositiveLineNumbersValue = object->get("showPositiveLineNumbers");
    if (showPositiveLineNumbersValue) {
        errors->SetName("showPositiveLineNumbers");
        result->m_showPositiveLineNumbers = ValueConversions<bool>::fromValue(showPositiveLineNumbersValue, errors);
    }
    protocol::Value* showNegativeLineNumbersValue = object->get("showNegativeLineNumbers");
    if (showNegativeLineNumbersValue) {
        errors->SetName("showNegativeLineNumbers");
        result->m_showNegativeLineNumbers = ValueConversions<bool>::fromValue(showNegativeLineNumbersValue, errors);
    }
    protocol::Value* gridBorderColorValue = object->get("gridBorderColor");
    if (gridBorderColorValue) {
        errors->SetName("gridBorderColor");
        result->m_gridBorderColor = ValueConversions<protocol::DOM::RGBA>::fromValue(gridBorderColorValue, errors);
    }
    protocol::Value* cellBorderColorValue = object->get("cellBorderColor");
    if (cellBorderColorValue) {
        errors->SetName("cellBorderColor");
        result->m_cellBorderColor = ValueConversions<protocol::DOM::RGBA>::fromValue(cellBorderColorValue, errors);
    }
    protocol::Value* gridBorderDashValue = object->get("gridBorderDash");
    if (gridBorderDashValue) {
        errors->SetName("gridBorderDash");
        result->m_gridBorderDash = ValueConversions<bool>::fromValue(gridBorderDashValue, errors);
    }
    protocol::Value* cellBorderDashValue = object->get("cellBorderDash");
    if (cellBorderDashValue) {
        errors->SetName("cellBorderDash");
        result->m_cellBorderDash = ValueConversions<bool>::fromValue(cellBorderDashValue, errors);
    }
    protocol::Value* rowGapColorValue = object->get("rowGapColor");
    if (rowGapColorValue) {
        errors->SetName("rowGapColor");
        result->m_rowGapColor = ValueConversions<protocol::DOM::RGBA>::fromValue(rowGapColorValue, errors);
    }
    protocol::Value* rowHatchColorValue = object->get("rowHatchColor");
    if (rowHatchColorValue) {
        errors->SetName("rowHatchColor");
        result->m_rowHatchColor = ValueConversions<protocol::DOM::RGBA>::fromValue(rowHatchColorValue, errors);
    }
    protocol::Value* columnGapColorValue = object->get("columnGapColor");
    if (columnGapColorValue) {
        errors->SetName("columnGapColor");
        result->m_columnGapColor = ValueConversions<protocol::DOM::RGBA>::fromValue(columnGapColorValue, errors);
    }
    protocol::Value* columnHatchColorValue = object->get("columnHatchColor");
    if (columnHatchColorValue) {
        errors->SetName("columnHatchColor");
        result->m_columnHatchColor = ValueConversions<protocol::DOM::RGBA>::fromValue(columnHatchColorValue, errors);
    }
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> GridHighlightConfig::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    if (m_showGridExtensionLines.isJust())
        result->setValue("showGridExtensionLines", ValueConversions<bool>::toValue(m_showGridExtensionLines.fromJust()));
    if (m_showPositiveLineNumbers.isJust())
        result->setValue("showPositiveLineNumbers", ValueConversions<bool>::toValue(m_showPositiveLineNumbers.fromJust()));
    if (m_showNegativeLineNumbers.isJust())
        result->setValue("showNegativeLineNumbers", ValueConversions<bool>::toValue(m_showNegativeLineNumbers.fromJust()));
    if (m_gridBorderColor.isJust())
        result->setValue("gridBorderColor", ValueConversions<protocol::DOM::RGBA>::toValue(m_gridBorderColor.fromJust()));
    if (m_cellBorderColor.isJust())
        result->setValue("cellBorderColor", ValueConversions<protocol::DOM::RGBA>::toValue(m_cellBorderColor.fromJust()));
    if (m_gridBorderDash.isJust())
        result->setValue("gridBorderDash", ValueConversions<bool>::toValue(m_gridBorderDash.fromJust()));
    if (m_cellBorderDash.isJust())
        result->setValue("cellBorderDash", ValueConversions<bool>::toValue(m_cellBorderDash.fromJust()));
    if (m_rowGapColor.isJust())
        result->setValue("rowGapColor", ValueConversions<protocol::DOM::RGBA>::toValue(m_rowGapColor.fromJust()));
    if (m_rowHatchColor.isJust())
        result->setValue("rowHatchColor", ValueConversions<protocol::DOM::RGBA>::toValue(m_rowHatchColor.fromJust()));
    if (m_columnGapColor.isJust())
        result->setValue("columnGapColor", ValueConversions<protocol::DOM::RGBA>::toValue(m_columnGapColor.fromJust()));
    if (m_columnHatchColor.isJust())
        result->setValue("columnHatchColor", ValueConversions<protocol::DOM::RGBA>::toValue(m_columnHatchColor.fromJust()));
    return result;
}

void GridHighlightConfig::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("showGridExtensionLines"), m_showGridExtensionLines, out);
      crdtp::SerializeField(crdtp::SpanFrom("showPositiveLineNumbers"), m_showPositiveLineNumbers, out);
      crdtp::SerializeField(crdtp::SpanFrom("showNegativeLineNumbers"), m_showNegativeLineNumbers, out);
      crdtp::SerializeField(crdtp::SpanFrom("gridBorderColor"), m_gridBorderColor, out);
      crdtp::SerializeField(crdtp::SpanFrom("cellBorderColor"), m_cellBorderColor, out);
      crdtp::SerializeField(crdtp::SpanFrom("gridBorderDash"), m_gridBorderDash, out);
      crdtp::SerializeField(crdtp::SpanFrom("cellBorderDash"), m_cellBorderDash, out);
      crdtp::SerializeField(crdtp::SpanFrom("rowGapColor"), m_rowGapColor, out);
      crdtp::SerializeField(crdtp::SpanFrom("rowHatchColor"), m_rowHatchColor, out);
      crdtp::SerializeField(crdtp::SpanFrom("columnGapColor"), m_columnGapColor, out);
      crdtp::SerializeField(crdtp::SpanFrom("columnHatchColor"), m_columnHatchColor, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<GridHighlightConfig> GridHighlightConfig::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<HighlightConfig> HighlightConfig::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<HighlightConfig> result(new HighlightConfig());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* showInfoValue = object->get("showInfo");
    if (showInfoValue) {
        errors->SetName("showInfo");
        result->m_showInfo = ValueConversions<bool>::fromValue(showInfoValue, errors);
    }
    protocol::Value* showStylesValue = object->get("showStyles");
    if (showStylesValue) {
        errors->SetName("showStyles");
        result->m_showStyles = ValueConversions<bool>::fromValue(showStylesValue, errors);
    }
    protocol::Value* showRulersValue = object->get("showRulers");
    if (showRulersValue) {
        errors->SetName("showRulers");
        result->m_showRulers = ValueConversions<bool>::fromValue(showRulersValue, errors);
    }
    protocol::Value* showAccessibilityInfoValue = object->get("showAccessibilityInfo");
    if (showAccessibilityInfoValue) {
        errors->SetName("showAccessibilityInfo");
        result->m_showAccessibilityInfo = ValueConversions<bool>::fromValue(showAccessibilityInfoValue, errors);
    }
    protocol::Value* showExtensionLinesValue = object->get("showExtensionLines");
    if (showExtensionLinesValue) {
        errors->SetName("showExtensionLines");
        result->m_showExtensionLines = ValueConversions<bool>::fromValue(showExtensionLinesValue, errors);
    }
    protocol::Value* contentColorValue = object->get("contentColor");
    if (contentColorValue) {
        errors->SetName("contentColor");
        result->m_contentColor = ValueConversions<protocol::DOM::RGBA>::fromValue(contentColorValue, errors);
    }
    protocol::Value* paddingColorValue = object->get("paddingColor");
    if (paddingColorValue) {
        errors->SetName("paddingColor");
        result->m_paddingColor = ValueConversions<protocol::DOM::RGBA>::fromValue(paddingColorValue, errors);
    }
    protocol::Value* borderColorValue = object->get("borderColor");
    if (borderColorValue) {
        errors->SetName("borderColor");
        result->m_borderColor = ValueConversions<protocol::DOM::RGBA>::fromValue(borderColorValue, errors);
    }
    protocol::Value* marginColorValue = object->get("marginColor");
    if (marginColorValue) {
        errors->SetName("marginColor");
        result->m_marginColor = ValueConversions<protocol::DOM::RGBA>::fromValue(marginColorValue, errors);
    }
    protocol::Value* eventTargetColorValue = object->get("eventTargetColor");
    if (eventTargetColorValue) {
        errors->SetName("eventTargetColor");
        result->m_eventTargetColor = ValueConversions<protocol::DOM::RGBA>::fromValue(eventTargetColorValue, errors);
    }
    protocol::Value* shapeColorValue = object->get("shapeColor");
    if (shapeColorValue) {
        errors->SetName("shapeColor");
        result->m_shapeColor = ValueConversions<protocol::DOM::RGBA>::fromValue(shapeColorValue, errors);
    }
    protocol::Value* shapeMarginColorValue = object->get("shapeMarginColor");
    if (shapeMarginColorValue) {
        errors->SetName("shapeMarginColor");
        result->m_shapeMarginColor = ValueConversions<protocol::DOM::RGBA>::fromValue(shapeMarginColorValue, errors);
    }
    protocol::Value* cssGridColorValue = object->get("cssGridColor");
    if (cssGridColorValue) {
        errors->SetName("cssGridColor");
        result->m_cssGridColor = ValueConversions<protocol::DOM::RGBA>::fromValue(cssGridColorValue, errors);
    }
    protocol::Value* colorFormatValue = object->get("colorFormat");
    if (colorFormatValue) {
        errors->SetName("colorFormat");
        result->m_colorFormat = ValueConversions<String>::fromValue(colorFormatValue, errors);
    }
    protocol::Value* gridHighlightConfigValue = object->get("gridHighlightConfig");
    if (gridHighlightConfigValue) {
        errors->SetName("gridHighlightConfig");
        result->m_gridHighlightConfig = ValueConversions<protocol::Overlay::GridHighlightConfig>::fromValue(gridHighlightConfigValue, errors);
    }
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> HighlightConfig::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    if (m_showInfo.isJust())
        result->setValue("showInfo", ValueConversions<bool>::toValue(m_showInfo.fromJust()));
    if (m_showStyles.isJust())
        result->setValue("showStyles", ValueConversions<bool>::toValue(m_showStyles.fromJust()));
    if (m_showRulers.isJust())
        result->setValue("showRulers", ValueConversions<bool>::toValue(m_showRulers.fromJust()));
    if (m_showAccessibilityInfo.isJust())
        result->setValue("showAccessibilityInfo", ValueConversions<bool>::toValue(m_showAccessibilityInfo.fromJust()));
    if (m_showExtensionLines.isJust())
        result->setValue("showExtensionLines", ValueConversions<bool>::toValue(m_showExtensionLines.fromJust()));
    if (m_contentColor.isJust())
        result->setValue("contentColor", ValueConversions<protocol::DOM::RGBA>::toValue(m_contentColor.fromJust()));
    if (m_paddingColor.isJust())
        result->setValue("paddingColor", ValueConversions<protocol::DOM::RGBA>::toValue(m_paddingColor.fromJust()));
    if (m_borderColor.isJust())
        result->setValue("borderColor", ValueConversions<protocol::DOM::RGBA>::toValue(m_borderColor.fromJust()));
    if (m_marginColor.isJust())
        result->setValue("marginColor", ValueConversions<protocol::DOM::RGBA>::toValue(m_marginColor.fromJust()));
    if (m_eventTargetColor.isJust())
        result->setValue("eventTargetColor", ValueConversions<protocol::DOM::RGBA>::toValue(m_eventTargetColor.fromJust()));
    if (m_shapeColor.isJust())
        result->setValue("shapeColor", ValueConversions<protocol::DOM::RGBA>::toValue(m_shapeColor.fromJust()));
    if (m_shapeMarginColor.isJust())
        result->setValue("shapeMarginColor", ValueConversions<protocol::DOM::RGBA>::toValue(m_shapeMarginColor.fromJust()));
    if (m_cssGridColor.isJust())
        result->setValue("cssGridColor", ValueConversions<protocol::DOM::RGBA>::toValue(m_cssGridColor.fromJust()));
    if (m_colorFormat.isJust())
        result->setValue("colorFormat", ValueConversions<String>::toValue(m_colorFormat.fromJust()));
    if (m_gridHighlightConfig.isJust())
        result->setValue("gridHighlightConfig", ValueConversions<protocol::Overlay::GridHighlightConfig>::toValue(m_gridHighlightConfig.fromJust()));
    return result;
}

void HighlightConfig::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("showInfo"), m_showInfo, out);
      crdtp::SerializeField(crdtp::SpanFrom("showStyles"), m_showStyles, out);
      crdtp::SerializeField(crdtp::SpanFrom("showRulers"), m_showRulers, out);
      crdtp::SerializeField(crdtp::SpanFrom("showAccessibilityInfo"), m_showAccessibilityInfo, out);
      crdtp::SerializeField(crdtp::SpanFrom("showExtensionLines"), m_showExtensionLines, out);
      crdtp::SerializeField(crdtp::SpanFrom("contentColor"), m_contentColor, out);
      crdtp::SerializeField(crdtp::SpanFrom("paddingColor"), m_paddingColor, out);
      crdtp::SerializeField(crdtp::SpanFrom("borderColor"), m_borderColor, out);
      crdtp::SerializeField(crdtp::SpanFrom("marginColor"), m_marginColor, out);
      crdtp::SerializeField(crdtp::SpanFrom("eventTargetColor"), m_eventTargetColor, out);
      crdtp::SerializeField(crdtp::SpanFrom("shapeColor"), m_shapeColor, out);
      crdtp::SerializeField(crdtp::SpanFrom("shapeMarginColor"), m_shapeMarginColor, out);
      crdtp::SerializeField(crdtp::SpanFrom("cssGridColor"), m_cssGridColor, out);
      crdtp::SerializeField(crdtp::SpanFrom("colorFormat"), m_colorFormat, out);
      crdtp::SerializeField(crdtp::SpanFrom("gridHighlightConfig"), m_gridHighlightConfig, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<HighlightConfig> HighlightConfig::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

namespace ColorFormatEnum {
const char Rgb[] = "rgb";
const char Hsl[] = "hsl";
const char Hex[] = "hex";
} // namespace ColorFormatEnum

std::unique_ptr<HingeConfig> HingeConfig::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<HingeConfig> result(new HingeConfig());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* rectValue = object->get("rect");
    errors->SetName("rect");
    result->m_rect = ValueConversions<protocol::DOM::Rect>::fromValue(rectValue, errors);
    protocol::Value* contentColorValue = object->get("contentColor");
    if (contentColorValue) {
        errors->SetName("contentColor");
        result->m_contentColor = ValueConversions<protocol::DOM::RGBA>::fromValue(contentColorValue, errors);
    }
    protocol::Value* outlineColorValue = object->get("outlineColor");
    if (outlineColorValue) {
        errors->SetName("outlineColor");
        result->m_outlineColor = ValueConversions<protocol::DOM::RGBA>::fromValue(outlineColorValue, errors);
    }
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> HingeConfig::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("rect", ValueConversions<protocol::DOM::Rect>::toValue(m_rect.get()));
    if (m_contentColor.isJust())
        result->setValue("contentColor", ValueConversions<protocol::DOM::RGBA>::toValue(m_contentColor.fromJust()));
    if (m_outlineColor.isJust())
        result->setValue("outlineColor", ValueConversions<protocol::DOM::RGBA>::toValue(m_outlineColor.fromJust()));
    return result;
}

void HingeConfig::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("rect"), m_rect, out);
      crdtp::SerializeField(crdtp::SpanFrom("contentColor"), m_contentColor, out);
      crdtp::SerializeField(crdtp::SpanFrom("outlineColor"), m_outlineColor, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<HingeConfig> HingeConfig::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

namespace InspectModeEnum {
const char SearchForNode[] = "searchForNode";
const char SearchForUAShadowDOM[] = "searchForUAShadowDOM";
const char CaptureAreaScreenshot[] = "captureAreaScreenshot";
const char ShowDistances[] = "showDistances";
const char None[] = "none";
} // namespace InspectModeEnum

std::unique_ptr<InspectNodeRequestedNotification> InspectNodeRequestedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<InspectNodeRequestedNotification> result(new InspectNodeRequestedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* backendNodeIdValue = object->get("backendNodeId");
    errors->SetName("backendNodeId");
    result->m_backendNodeId = ValueConversions<int>::fromValue(backendNodeIdValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> InspectNodeRequestedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("backendNodeId", ValueConversions<int>::toValue(m_backendNodeId));
    return result;
}

void InspectNodeRequestedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("backendNodeId"), m_backendNodeId, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<InspectNodeRequestedNotification> InspectNodeRequestedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<NodeHighlightRequestedNotification> NodeHighlightRequestedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<NodeHighlightRequestedNotification> result(new NodeHighlightRequestedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* nodeIdValue = object->get("nodeId");
    errors->SetName("nodeId");
    result->m_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> NodeHighlightRequestedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("nodeId", ValueConversions<int>::toValue(m_nodeId));
    return result;
}

void NodeHighlightRequestedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("nodeId"), m_nodeId, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<NodeHighlightRequestedNotification> NodeHighlightRequestedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<ScreenshotRequestedNotification> ScreenshotRequestedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<ScreenshotRequestedNotification> result(new ScreenshotRequestedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* viewportValue = object->get("viewport");
    errors->SetName("viewport");
    result->m_viewport = ValueConversions<protocol::Page::Viewport>::fromValue(viewportValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> ScreenshotRequestedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("viewport", ValueConversions<protocol::Page::Viewport>::toValue(m_viewport.get()));
    return result;
}

void ScreenshotRequestedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("viewport"), m_viewport, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<ScreenshotRequestedNotification> ScreenshotRequestedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

// ------------- Enum values from params.


// ------------- Frontend notifications.

void Frontend::inspectNodeRequested(int backendNodeId)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<InspectNodeRequestedNotification> messageData = InspectNodeRequestedNotification::create()
        .setBackendNodeId(backendNodeId)
        .build();
    frontend_channel_->SendProtocolNotification(crdtp::CreateNotification("Overlay.inspectNodeRequested", std::move(messageData)));
}

void Frontend::nodeHighlightRequested(int nodeId)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<NodeHighlightRequestedNotification> messageData = NodeHighlightRequestedNotification::create()
        .setNodeId(nodeId)
        .build();
    frontend_channel_->SendProtocolNotification(crdtp::CreateNotification("Overlay.nodeHighlightRequested", std::move(messageData)));
}

void Frontend::screenshotRequested(std::unique_ptr<protocol::Page::Viewport> viewport)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<ScreenshotRequestedNotification> messageData = ScreenshotRequestedNotification::create()
        .setViewport(std::move(viewport))
        .build();
    frontend_channel_->SendProtocolNotification(crdtp::CreateNotification("Overlay.screenshotRequested", std::move(messageData)));
}

void Frontend::inspectModeCanceled()
{
    if (!frontend_channel_)
        return;
    frontend_channel_->SendProtocolNotification(crdtp::CreateNotification("Overlay.inspectModeCanceled"));
}

void Frontend::flush()
{
    frontend_channel_->FlushProtocolNotifications();
}

void Frontend::sendRawNotification(std::unique_ptr<Serializable> notification)
{
    frontend_channel_->SendProtocolNotification(std::move(notification));
}

// --------------------- Dispatcher.

class DomainDispatcherImpl : public protocol::DomainDispatcher {
public:
    DomainDispatcherImpl(FrontendChannel* frontendChannel, Backend* backend)
        : DomainDispatcher(frontendChannel)
        , m_backend(backend) {}
    ~DomainDispatcherImpl() override { }

    using CallHandler = void (DomainDispatcherImpl::*)(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);

    std::function<void(const crdtp::Dispatchable&)> Dispatch(crdtp::span<uint8_t> command_name) override;

    void disable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void enable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void getHighlightObjectForTest(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void hideHighlight(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void highlightFrame(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void highlightNode(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void highlightQuad(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void highlightRect(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setInspectMode(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setShowAdHighlights(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setPausedInDebuggerMessage(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setShowDebugBorders(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setShowFPSCounter(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setShowPaintRects(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setShowLayoutShiftRegions(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setShowScrollBottleneckRects(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setShowHitTestBorders(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setShowViewportSizeOnResize(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setShowHinge(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
 protected:
    Backend* m_backend;
};

namespace {
// This helper method with a static map of command methods (instance methods
// of DomainDispatcherImpl declared just above) by their name is used immediately below,
// in the DomainDispatcherImpl::Dispatch method.
DomainDispatcherImpl::CallHandler CommandByName(crdtp::span<uint8_t> command_name) {
  static auto* commands = [](){
    auto* commands = new std::vector<std::pair<crdtp::span<uint8_t>,
                              DomainDispatcherImpl::CallHandler>>{
    {
          crdtp::SpanFrom("disable"),
          &DomainDispatcherImpl::disable
    },
    {
          crdtp::SpanFrom("enable"),
          &DomainDispatcherImpl::enable
    },
    {
          crdtp::SpanFrom("getHighlightObjectForTest"),
          &DomainDispatcherImpl::getHighlightObjectForTest
    },
    {
          crdtp::SpanFrom("hideHighlight"),
          &DomainDispatcherImpl::hideHighlight
    },
    {
          crdtp::SpanFrom("highlightFrame"),
          &DomainDispatcherImpl::highlightFrame
    },
    {
          crdtp::SpanFrom("highlightNode"),
          &DomainDispatcherImpl::highlightNode
    },
    {
          crdtp::SpanFrom("highlightQuad"),
          &DomainDispatcherImpl::highlightQuad
    },
    {
          crdtp::SpanFrom("highlightRect"),
          &DomainDispatcherImpl::highlightRect
    },
    {
          crdtp::SpanFrom("setInspectMode"),
          &DomainDispatcherImpl::setInspectMode
    },
    {
          crdtp::SpanFrom("setPausedInDebuggerMessage"),
          &DomainDispatcherImpl::setPausedInDebuggerMessage
    },
    {
          crdtp::SpanFrom("setShowAdHighlights"),
          &DomainDispatcherImpl::setShowAdHighlights
    },
    {
          crdtp::SpanFrom("setShowDebugBorders"),
          &DomainDispatcherImpl::setShowDebugBorders
    },
    {
          crdtp::SpanFrom("setShowFPSCounter"),
          &DomainDispatcherImpl::setShowFPSCounter
    },
    {
          crdtp::SpanFrom("setShowHinge"),
          &DomainDispatcherImpl::setShowHinge
    },
    {
          crdtp::SpanFrom("setShowHitTestBorders"),
          &DomainDispatcherImpl::setShowHitTestBorders
    },
    {
          crdtp::SpanFrom("setShowLayoutShiftRegions"),
          &DomainDispatcherImpl::setShowLayoutShiftRegions
    },
    {
          crdtp::SpanFrom("setShowPaintRects"),
          &DomainDispatcherImpl::setShowPaintRects
    },
    {
          crdtp::SpanFrom("setShowScrollBottleneckRects"),
          &DomainDispatcherImpl::setShowScrollBottleneckRects
    },
    {
          crdtp::SpanFrom("setShowViewportSizeOnResize"),
          &DomainDispatcherImpl::setShowViewportSizeOnResize
    },
    };
    return commands;
  }();
  return crdtp::FindByFirst<DomainDispatcherImpl::CallHandler>(*commands, command_name, nullptr);
}
}  // namespace

std::function<void(const crdtp::Dispatchable&)> DomainDispatcherImpl::Dispatch(crdtp::span<uint8_t> command_name) {
  CallHandler handler = CommandByName(command_name);
  if (!handler) return nullptr;
  return [this, handler](const crdtp::Dispatchable& dispatchable){
    std::unique_ptr<DictionaryValue> params =
        DictionaryValue::cast(protocol::Value::parseBinary(dispatchable.Params().data(),
        dispatchable.Params().size()));
    ErrorSupport errors;
    errors.Push();
    (this->*handler)(dispatchable, params.get(), &errors);
  };
}


void DomainDispatcherImpl::disable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->disable();
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Overlay.disable"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::enable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->enable();
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Overlay.enable"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::getHighlightObjectForTest(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* nodeIdValue = params ? params->get("nodeId") : nullptr;
    errors->SetName("nodeId");
    int in_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    protocol::Value* includeDistanceValue = params ? params->get("includeDistance") : nullptr;
    Maybe<bool> in_includeDistance;
    if (includeDistanceValue) {
        errors->SetName("includeDistance");
        in_includeDistance = ValueConversions<bool>::fromValue(includeDistanceValue, errors);
    }
    protocol::Value* includeStyleValue = params ? params->get("includeStyle") : nullptr;
    Maybe<bool> in_includeStyle;
    if (includeStyleValue) {
        errors->SetName("includeStyle");
        in_includeStyle = ValueConversions<bool>::fromValue(includeStyleValue, errors);
    }
    protocol::Value* colorFormatValue = params ? params->get("colorFormat") : nullptr;
    Maybe<String> in_colorFormat;
    if (colorFormatValue) {
        errors->SetName("colorFormat");
        in_colorFormat = ValueConversions<String>::fromValue(colorFormatValue, errors);
    }
    protocol::Value* showAccessibilityInfoValue = params ? params->get("showAccessibilityInfo") : nullptr;
    Maybe<bool> in_showAccessibilityInfo;
    if (showAccessibilityInfoValue) {
        errors->SetName("showAccessibilityInfo");
        in_showAccessibilityInfo = ValueConversions<bool>::fromValue(showAccessibilityInfoValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    std::unique_ptr<protocol::DictionaryValue> out_highlight;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->getHighlightObjectForTest(in_nodeId, std::move(in_includeDistance), std::move(in_includeStyle), std::move(in_colorFormat), std::move(in_showAccessibilityInfo), &out_highlight);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Overlay.getHighlightObjectForTest"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
            crdtp::SerializeField(crdtp::SpanFrom("highlight"), out_highlight, &result);
          result.push_back(crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::hideHighlight(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->hideHighlight();
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Overlay.hideHighlight"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::highlightFrame(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* frameIdValue = params ? params->get("frameId") : nullptr;
    errors->SetName("frameId");
    String in_frameId = ValueConversions<String>::fromValue(frameIdValue, errors);
    protocol::Value* contentColorValue = params ? params->get("contentColor") : nullptr;
    Maybe<protocol::DOM::RGBA> in_contentColor;
    if (contentColorValue) {
        errors->SetName("contentColor");
        in_contentColor = ValueConversions<protocol::DOM::RGBA>::fromValue(contentColorValue, errors);
    }
    protocol::Value* contentOutlineColorValue = params ? params->get("contentOutlineColor") : nullptr;
    Maybe<protocol::DOM::RGBA> in_contentOutlineColor;
    if (contentOutlineColorValue) {
        errors->SetName("contentOutlineColor");
        in_contentOutlineColor = ValueConversions<protocol::DOM::RGBA>::fromValue(contentOutlineColorValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->highlightFrame(in_frameId, std::move(in_contentColor), std::move(in_contentOutlineColor));
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Overlay.highlightFrame"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::highlightNode(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* highlightConfigValue = params ? params->get("highlightConfig") : nullptr;
    errors->SetName("highlightConfig");
    std::unique_ptr<protocol::Overlay::HighlightConfig> in_highlightConfig = ValueConversions<protocol::Overlay::HighlightConfig>::fromValue(highlightConfigValue, errors);
    protocol::Value* nodeIdValue = params ? params->get("nodeId") : nullptr;
    Maybe<int> in_nodeId;
    if (nodeIdValue) {
        errors->SetName("nodeId");
        in_nodeId = ValueConversions<int>::fromValue(nodeIdValue, errors);
    }
    protocol::Value* backendNodeIdValue = params ? params->get("backendNodeId") : nullptr;
    Maybe<int> in_backendNodeId;
    if (backendNodeIdValue) {
        errors->SetName("backendNodeId");
        in_backendNodeId = ValueConversions<int>::fromValue(backendNodeIdValue, errors);
    }
    protocol::Value* objectIdValue = params ? params->get("objectId") : nullptr;
    Maybe<String> in_objectId;
    if (objectIdValue) {
        errors->SetName("objectId");
        in_objectId = ValueConversions<String>::fromValue(objectIdValue, errors);
    }
    protocol::Value* selectorValue = params ? params->get("selector") : nullptr;
    Maybe<String> in_selector;
    if (selectorValue) {
        errors->SetName("selector");
        in_selector = ValueConversions<String>::fromValue(selectorValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->highlightNode(std::move(in_highlightConfig), std::move(in_nodeId), std::move(in_backendNodeId), std::move(in_objectId), std::move(in_selector));
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Overlay.highlightNode"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::highlightQuad(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* quadValue = params ? params->get("quad") : nullptr;
    errors->SetName("quad");
    std::unique_ptr<protocol::Array<double>> in_quad = ValueConversions<protocol::Array<double>>::fromValue(quadValue, errors);
    protocol::Value* colorValue = params ? params->get("color") : nullptr;
    Maybe<protocol::DOM::RGBA> in_color;
    if (colorValue) {
        errors->SetName("color");
        in_color = ValueConversions<protocol::DOM::RGBA>::fromValue(colorValue, errors);
    }
    protocol::Value* outlineColorValue = params ? params->get("outlineColor") : nullptr;
    Maybe<protocol::DOM::RGBA> in_outlineColor;
    if (outlineColorValue) {
        errors->SetName("outlineColor");
        in_outlineColor = ValueConversions<protocol::DOM::RGBA>::fromValue(outlineColorValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->highlightQuad(std::move(in_quad), std::move(in_color), std::move(in_outlineColor));
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Overlay.highlightQuad"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::highlightRect(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* xValue = params ? params->get("x") : nullptr;
    errors->SetName("x");
    int in_x = ValueConversions<int>::fromValue(xValue, errors);
    protocol::Value* yValue = params ? params->get("y") : nullptr;
    errors->SetName("y");
    int in_y = ValueConversions<int>::fromValue(yValue, errors);
    protocol::Value* widthValue = params ? params->get("width") : nullptr;
    errors->SetName("width");
    int in_width = ValueConversions<int>::fromValue(widthValue, errors);
    protocol::Value* heightValue = params ? params->get("height") : nullptr;
    errors->SetName("height");
    int in_height = ValueConversions<int>::fromValue(heightValue, errors);
    protocol::Value* colorValue = params ? params->get("color") : nullptr;
    Maybe<protocol::DOM::RGBA> in_color;
    if (colorValue) {
        errors->SetName("color");
        in_color = ValueConversions<protocol::DOM::RGBA>::fromValue(colorValue, errors);
    }
    protocol::Value* outlineColorValue = params ? params->get("outlineColor") : nullptr;
    Maybe<protocol::DOM::RGBA> in_outlineColor;
    if (outlineColorValue) {
        errors->SetName("outlineColor");
        in_outlineColor = ValueConversions<protocol::DOM::RGBA>::fromValue(outlineColorValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->highlightRect(in_x, in_y, in_width, in_height, std::move(in_color), std::move(in_outlineColor));
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Overlay.highlightRect"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setInspectMode(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* modeValue = params ? params->get("mode") : nullptr;
    errors->SetName("mode");
    String in_mode = ValueConversions<String>::fromValue(modeValue, errors);
    protocol::Value* highlightConfigValue = params ? params->get("highlightConfig") : nullptr;
    Maybe<protocol::Overlay::HighlightConfig> in_highlightConfig;
    if (highlightConfigValue) {
        errors->SetName("highlightConfig");
        in_highlightConfig = ValueConversions<protocol::Overlay::HighlightConfig>::fromValue(highlightConfigValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setInspectMode(in_mode, std::move(in_highlightConfig));
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Overlay.setInspectMode"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setShowAdHighlights(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* showValue = params ? params->get("show") : nullptr;
    errors->SetName("show");
    bool in_show = ValueConversions<bool>::fromValue(showValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setShowAdHighlights(in_show);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Overlay.setShowAdHighlights"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setPausedInDebuggerMessage(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* messageValue = params ? params->get("message") : nullptr;
    Maybe<String> in_message;
    if (messageValue) {
        errors->SetName("message");
        in_message = ValueConversions<String>::fromValue(messageValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setPausedInDebuggerMessage(std::move(in_message));
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Overlay.setPausedInDebuggerMessage"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setShowDebugBorders(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* showValue = params ? params->get("show") : nullptr;
    errors->SetName("show");
    bool in_show = ValueConversions<bool>::fromValue(showValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setShowDebugBorders(in_show);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Overlay.setShowDebugBorders"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setShowFPSCounter(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* showValue = params ? params->get("show") : nullptr;
    errors->SetName("show");
    bool in_show = ValueConversions<bool>::fromValue(showValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setShowFPSCounter(in_show);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Overlay.setShowFPSCounter"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setShowPaintRects(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* resultValue = params ? params->get("result") : nullptr;
    errors->SetName("result");
    bool in_result = ValueConversions<bool>::fromValue(resultValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setShowPaintRects(in_result);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Overlay.setShowPaintRects"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setShowLayoutShiftRegions(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* resultValue = params ? params->get("result") : nullptr;
    errors->SetName("result");
    bool in_result = ValueConversions<bool>::fromValue(resultValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setShowLayoutShiftRegions(in_result);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Overlay.setShowLayoutShiftRegions"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setShowScrollBottleneckRects(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* showValue = params ? params->get("show") : nullptr;
    errors->SetName("show");
    bool in_show = ValueConversions<bool>::fromValue(showValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setShowScrollBottleneckRects(in_show);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Overlay.setShowScrollBottleneckRects"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setShowHitTestBorders(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* showValue = params ? params->get("show") : nullptr;
    errors->SetName("show");
    bool in_show = ValueConversions<bool>::fromValue(showValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setShowHitTestBorders(in_show);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Overlay.setShowHitTestBorders"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setShowViewportSizeOnResize(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* showValue = params ? params->get("show") : nullptr;
    errors->SetName("show");
    bool in_show = ValueConversions<bool>::fromValue(showValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setShowViewportSizeOnResize(in_show);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Overlay.setShowViewportSizeOnResize"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setShowHinge(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* hingeConfigValue = params ? params->get("hingeConfig") : nullptr;
    Maybe<protocol::Overlay::HingeConfig> in_hingeConfig;
    if (hingeConfigValue) {
        errors->SetName("hingeConfig");
        in_hingeConfig = ValueConversions<protocol::Overlay::HingeConfig>::fromValue(hingeConfigValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setShowHinge(std::move(in_hingeConfig));
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Overlay.setShowHinge"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

namespace {
// This helper method (with a static map of redirects) is used from Dispatcher::wire
// immediately below.
const std::vector<std::pair<crdtp::span<uint8_t>, crdtp::span<uint8_t>>>& SortedRedirects() {
  static auto* redirects = [](){
    auto* redirects = new std::vector<std::pair<crdtp::span<uint8_t>, crdtp::span<uint8_t>>>{
    };
    return redirects;
  }();
  return *redirects;
}
}  // namespace

// static
void Dispatcher::wire(UberDispatcher* uber, Backend* backend)
{
    auto dispatcher = std::make_unique<DomainDispatcherImpl>(uber->channel(), backend);
    uber->WireBackend(crdtp::SpanFrom("Overlay"), SortedRedirects(), std::move(dispatcher));
}

} // Overlay
} // namespace blink
} // namespace protocol

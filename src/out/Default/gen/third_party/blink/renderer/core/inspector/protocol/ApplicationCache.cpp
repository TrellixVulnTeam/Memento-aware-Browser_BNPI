// This file is generated by TypeBuilder_cpp.template.

// Copyright (c) 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "third_party/blink/renderer/core/inspector/protocol/ApplicationCache.h"

#include "third_party/blink/renderer/core/inspector/protocol/Protocol.h"

#include "third_party/inspector_protocol/crdtp/cbor.h"
#include "third_party/inspector_protocol/crdtp/find_by_first.h"
#include "third_party/inspector_protocol/crdtp/serializer_traits.h"
#include "third_party/inspector_protocol/crdtp/span.h"

namespace blink {
namespace protocol {
namespace ApplicationCache {

// ------------- Enum values from types.

const char Metainfo::domainName[] = "ApplicationCache";
const char Metainfo::commandPrefix[] = "ApplicationCache.";
const char Metainfo::version[] = "1.3";

std::unique_ptr<ApplicationCacheResource> ApplicationCacheResource::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<ApplicationCacheResource> result(new ApplicationCacheResource());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* urlValue = object->get("url");
    errors->SetName("url");
    result->m_url = ValueConversions<String>::fromValue(urlValue, errors);
    protocol::Value* sizeValue = object->get("size");
    errors->SetName("size");
    result->m_size = ValueConversions<int>::fromValue(sizeValue, errors);
    protocol::Value* typeValue = object->get("type");
    errors->SetName("type");
    result->m_type = ValueConversions<String>::fromValue(typeValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> ApplicationCacheResource::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("url", ValueConversions<String>::toValue(m_url));
    result->setValue("size", ValueConversions<int>::toValue(m_size));
    result->setValue("type", ValueConversions<String>::toValue(m_type));
    return result;
}

void ApplicationCacheResource::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("url"), m_url, out);
      crdtp::SerializeField(crdtp::SpanFrom("size"), m_size, out);
      crdtp::SerializeField(crdtp::SpanFrom("type"), m_type, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<ApplicationCacheResource> ApplicationCacheResource::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<ApplicationCache> ApplicationCache::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<ApplicationCache> result(new ApplicationCache());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* manifestURLValue = object->get("manifestURL");
    errors->SetName("manifestURL");
    result->m_manifestURL = ValueConversions<String>::fromValue(manifestURLValue, errors);
    protocol::Value* sizeValue = object->get("size");
    errors->SetName("size");
    result->m_size = ValueConversions<double>::fromValue(sizeValue, errors);
    protocol::Value* creationTimeValue = object->get("creationTime");
    errors->SetName("creationTime");
    result->m_creationTime = ValueConversions<double>::fromValue(creationTimeValue, errors);
    protocol::Value* updateTimeValue = object->get("updateTime");
    errors->SetName("updateTime");
    result->m_updateTime = ValueConversions<double>::fromValue(updateTimeValue, errors);
    protocol::Value* resourcesValue = object->get("resources");
    errors->SetName("resources");
    result->m_resources = ValueConversions<protocol::Array<protocol::ApplicationCache::ApplicationCacheResource>>::fromValue(resourcesValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> ApplicationCache::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("manifestURL", ValueConversions<String>::toValue(m_manifestURL));
    result->setValue("size", ValueConversions<double>::toValue(m_size));
    result->setValue("creationTime", ValueConversions<double>::toValue(m_creationTime));
    result->setValue("updateTime", ValueConversions<double>::toValue(m_updateTime));
    result->setValue("resources", ValueConversions<protocol::Array<protocol::ApplicationCache::ApplicationCacheResource>>::toValue(m_resources.get()));
    return result;
}

void ApplicationCache::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("manifestURL"), m_manifestURL, out);
      crdtp::SerializeField(crdtp::SpanFrom("size"), m_size, out);
      crdtp::SerializeField(crdtp::SpanFrom("creationTime"), m_creationTime, out);
      crdtp::SerializeField(crdtp::SpanFrom("updateTime"), m_updateTime, out);
      crdtp::SerializeField(crdtp::SpanFrom("resources"), m_resources, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<ApplicationCache> ApplicationCache::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<FrameWithManifest> FrameWithManifest::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<FrameWithManifest> result(new FrameWithManifest());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* frameIdValue = object->get("frameId");
    errors->SetName("frameId");
    result->m_frameId = ValueConversions<String>::fromValue(frameIdValue, errors);
    protocol::Value* manifestURLValue = object->get("manifestURL");
    errors->SetName("manifestURL");
    result->m_manifestURL = ValueConversions<String>::fromValue(manifestURLValue, errors);
    protocol::Value* statusValue = object->get("status");
    errors->SetName("status");
    result->m_status = ValueConversions<int>::fromValue(statusValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> FrameWithManifest::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("frameId", ValueConversions<String>::toValue(m_frameId));
    result->setValue("manifestURL", ValueConversions<String>::toValue(m_manifestURL));
    result->setValue("status", ValueConversions<int>::toValue(m_status));
    return result;
}

void FrameWithManifest::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("frameId"), m_frameId, out);
      crdtp::SerializeField(crdtp::SpanFrom("manifestURL"), m_manifestURL, out);
      crdtp::SerializeField(crdtp::SpanFrom("status"), m_status, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<FrameWithManifest> FrameWithManifest::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<ApplicationCacheStatusUpdatedNotification> ApplicationCacheStatusUpdatedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<ApplicationCacheStatusUpdatedNotification> result(new ApplicationCacheStatusUpdatedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* frameIdValue = object->get("frameId");
    errors->SetName("frameId");
    result->m_frameId = ValueConversions<String>::fromValue(frameIdValue, errors);
    protocol::Value* manifestURLValue = object->get("manifestURL");
    errors->SetName("manifestURL");
    result->m_manifestURL = ValueConversions<String>::fromValue(manifestURLValue, errors);
    protocol::Value* statusValue = object->get("status");
    errors->SetName("status");
    result->m_status = ValueConversions<int>::fromValue(statusValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> ApplicationCacheStatusUpdatedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("frameId", ValueConversions<String>::toValue(m_frameId));
    result->setValue("manifestURL", ValueConversions<String>::toValue(m_manifestURL));
    result->setValue("status", ValueConversions<int>::toValue(m_status));
    return result;
}

void ApplicationCacheStatusUpdatedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("frameId"), m_frameId, out);
      crdtp::SerializeField(crdtp::SpanFrom("manifestURL"), m_manifestURL, out);
      crdtp::SerializeField(crdtp::SpanFrom("status"), m_status, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<ApplicationCacheStatusUpdatedNotification> ApplicationCacheStatusUpdatedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<NetworkStateUpdatedNotification> NetworkStateUpdatedNotification::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<NetworkStateUpdatedNotification> result(new NetworkStateUpdatedNotification());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* isNowOnlineValue = object->get("isNowOnline");
    errors->SetName("isNowOnline");
    result->m_isNowOnline = ValueConversions<bool>::fromValue(isNowOnlineValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> NetworkStateUpdatedNotification::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("isNowOnline", ValueConversions<bool>::toValue(m_isNowOnline));
    return result;
}

void NetworkStateUpdatedNotification::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("isNowOnline"), m_isNowOnline, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<NetworkStateUpdatedNotification> NetworkStateUpdatedNotification::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

// ------------- Enum values from params.


// ------------- Frontend notifications.

void Frontend::applicationCacheStatusUpdated(const String& frameId, const String& manifestURL, int status)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<ApplicationCacheStatusUpdatedNotification> messageData = ApplicationCacheStatusUpdatedNotification::create()
        .setFrameId(frameId)
        .setManifestURL(manifestURL)
        .setStatus(status)
        .build();
    frontend_channel_->SendProtocolNotification(crdtp::CreateNotification("ApplicationCache.applicationCacheStatusUpdated", std::move(messageData)));
}

void Frontend::networkStateUpdated(bool isNowOnline)
{
    if (!frontend_channel_)
        return;
    std::unique_ptr<NetworkStateUpdatedNotification> messageData = NetworkStateUpdatedNotification::create()
        .setIsNowOnline(isNowOnline)
        .build();
    frontend_channel_->SendProtocolNotification(crdtp::CreateNotification("ApplicationCache.networkStateUpdated", std::move(messageData)));
}

void Frontend::flush()
{
    frontend_channel_->FlushProtocolNotifications();
}

void Frontend::sendRawNotification(std::unique_ptr<Serializable> notification)
{
    frontend_channel_->SendProtocolNotification(std::move(notification));
}

// --------------------- Dispatcher.

class DomainDispatcherImpl : public protocol::DomainDispatcher {
public:
    DomainDispatcherImpl(FrontendChannel* frontendChannel, Backend* backend)
        : DomainDispatcher(frontendChannel)
        , m_backend(backend) {}
    ~DomainDispatcherImpl() override { }

    using CallHandler = void (DomainDispatcherImpl::*)(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);

    std::function<void(const crdtp::Dispatchable&)> Dispatch(crdtp::span<uint8_t> command_name) override;

    void enable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void getApplicationCacheForFrame(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void getFramesWithManifests(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void getManifestForFrame(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
 protected:
    Backend* m_backend;
};

namespace {
// This helper method with a static map of command methods (instance methods
// of DomainDispatcherImpl declared just above) by their name is used immediately below,
// in the DomainDispatcherImpl::Dispatch method.
DomainDispatcherImpl::CallHandler CommandByName(crdtp::span<uint8_t> command_name) {
  static auto* commands = [](){
    auto* commands = new std::vector<std::pair<crdtp::span<uint8_t>,
                              DomainDispatcherImpl::CallHandler>>{
    {
          crdtp::SpanFrom("enable"),
          &DomainDispatcherImpl::enable
    },
    {
          crdtp::SpanFrom("getApplicationCacheForFrame"),
          &DomainDispatcherImpl::getApplicationCacheForFrame
    },
    {
          crdtp::SpanFrom("getFramesWithManifests"),
          &DomainDispatcherImpl::getFramesWithManifests
    },
    {
          crdtp::SpanFrom("getManifestForFrame"),
          &DomainDispatcherImpl::getManifestForFrame
    },
    };
    return commands;
  }();
  return crdtp::FindByFirst<DomainDispatcherImpl::CallHandler>(*commands, command_name, nullptr);
}
}  // namespace

std::function<void(const crdtp::Dispatchable&)> DomainDispatcherImpl::Dispatch(crdtp::span<uint8_t> command_name) {
  CallHandler handler = CommandByName(command_name);
  if (!handler) return nullptr;
  return [this, handler](const crdtp::Dispatchable& dispatchable){
    std::unique_ptr<DictionaryValue> params =
        DictionaryValue::cast(protocol::Value::parseBinary(dispatchable.Params().data(),
        dispatchable.Params().size()));
    ErrorSupport errors;
    errors.Push();
    (this->*handler)(dispatchable, params.get(), &errors);
  };
}


void DomainDispatcherImpl::enable(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->enable();
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("ApplicationCache.enable"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::getApplicationCacheForFrame(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* frameIdValue = params ? params->get("frameId") : nullptr;
    errors->SetName("frameId");
    String in_frameId = ValueConversions<String>::fromValue(frameIdValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    std::unique_ptr<protocol::ApplicationCache::ApplicationCache> out_applicationCache;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->getApplicationCacheForFrame(in_frameId, &out_applicationCache);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("ApplicationCache.getApplicationCacheForFrame"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
            crdtp::SerializeField(crdtp::SpanFrom("applicationCache"), out_applicationCache, &result);
          result.push_back(crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::getFramesWithManifests(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Declare output parameters.
    std::unique_ptr<protocol::Array<protocol::ApplicationCache::FrameWithManifest>> out_frameIds;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->getFramesWithManifests(&out_frameIds);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("ApplicationCache.getFramesWithManifests"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
            crdtp::SerializeField(crdtp::SpanFrom("frameIds"), out_frameIds, &result);
          result.push_back(crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::getManifestForFrame(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* frameIdValue = params ? params->get("frameId") : nullptr;
    errors->SetName("frameId");
    String in_frameId = ValueConversions<String>::fromValue(frameIdValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    String out_manifestURL;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->getManifestForFrame(in_frameId, &out_manifestURL);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("ApplicationCache.getManifestForFrame"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
            crdtp::SerializeField(crdtp::SpanFrom("manifestURL"), out_manifestURL, &result);
          result.push_back(crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, crdtp::Serializable::From(std::move(result)));
      }
    return;
}

namespace {
// This helper method (with a static map of redirects) is used from Dispatcher::wire
// immediately below.
const std::vector<std::pair<crdtp::span<uint8_t>, crdtp::span<uint8_t>>>& SortedRedirects() {
  static auto* redirects = [](){
    auto* redirects = new std::vector<std::pair<crdtp::span<uint8_t>, crdtp::span<uint8_t>>>{
    };
    return redirects;
  }();
  return *redirects;
}
}  // namespace

// static
void Dispatcher::wire(UberDispatcher* uber, Backend* backend)
{
    auto dispatcher = std::make_unique<DomainDispatcherImpl>(uber->channel(), backend);
    uber->WireBackend(crdtp::SpanFrom("ApplicationCache"), SortedRedirects(), std::move(dispatcher));
}

} // ApplicationCache
} // namespace blink
} // namespace protocol

// This file is generated by TypeBuilder_cpp.template.

// Copyright (c) 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "third_party/blink/renderer/core/inspector/protocol/CacheStorage.h"

#include "third_party/blink/renderer/core/inspector/protocol/Protocol.h"

#include "third_party/inspector_protocol/crdtp/cbor.h"
#include "third_party/inspector_protocol/crdtp/find_by_first.h"
#include "third_party/inspector_protocol/crdtp/serializer_traits.h"
#include "third_party/inspector_protocol/crdtp/span.h"

namespace blink {
namespace protocol {
namespace CacheStorage {

// ------------- Enum values from types.

const char Metainfo::domainName[] = "CacheStorage";
const char Metainfo::commandPrefix[] = "CacheStorage.";
const char Metainfo::version[] = "1.3";

namespace CachedResponseTypeEnum {
const char Basic[] = "basic";
const char Cors[] = "cors";
const char Default[] = "default";
const char Error[] = "error";
const char OpaqueResponse[] = "opaqueResponse";
const char OpaqueRedirect[] = "opaqueRedirect";
} // namespace CachedResponseTypeEnum

std::unique_ptr<DataEntry> DataEntry::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<DataEntry> result(new DataEntry());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* requestURLValue = object->get("requestURL");
    errors->SetName("requestURL");
    result->m_requestURL = ValueConversions<String>::fromValue(requestURLValue, errors);
    protocol::Value* requestMethodValue = object->get("requestMethod");
    errors->SetName("requestMethod");
    result->m_requestMethod = ValueConversions<String>::fromValue(requestMethodValue, errors);
    protocol::Value* requestHeadersValue = object->get("requestHeaders");
    errors->SetName("requestHeaders");
    result->m_requestHeaders = ValueConversions<protocol::Array<protocol::CacheStorage::Header>>::fromValue(requestHeadersValue, errors);
    protocol::Value* responseTimeValue = object->get("responseTime");
    errors->SetName("responseTime");
    result->m_responseTime = ValueConversions<double>::fromValue(responseTimeValue, errors);
    protocol::Value* responseStatusValue = object->get("responseStatus");
    errors->SetName("responseStatus");
    result->m_responseStatus = ValueConversions<int>::fromValue(responseStatusValue, errors);
    protocol::Value* responseStatusTextValue = object->get("responseStatusText");
    errors->SetName("responseStatusText");
    result->m_responseStatusText = ValueConversions<String>::fromValue(responseStatusTextValue, errors);
    protocol::Value* responseTypeValue = object->get("responseType");
    errors->SetName("responseType");
    result->m_responseType = ValueConversions<String>::fromValue(responseTypeValue, errors);
    protocol::Value* responseHeadersValue = object->get("responseHeaders");
    errors->SetName("responseHeaders");
    result->m_responseHeaders = ValueConversions<protocol::Array<protocol::CacheStorage::Header>>::fromValue(responseHeadersValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> DataEntry::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("requestURL", ValueConversions<String>::toValue(m_requestURL));
    result->setValue("requestMethod", ValueConversions<String>::toValue(m_requestMethod));
    result->setValue("requestHeaders", ValueConversions<protocol::Array<protocol::CacheStorage::Header>>::toValue(m_requestHeaders.get()));
    result->setValue("responseTime", ValueConversions<double>::toValue(m_responseTime));
    result->setValue("responseStatus", ValueConversions<int>::toValue(m_responseStatus));
    result->setValue("responseStatusText", ValueConversions<String>::toValue(m_responseStatusText));
    result->setValue("responseType", ValueConversions<String>::toValue(m_responseType));
    result->setValue("responseHeaders", ValueConversions<protocol::Array<protocol::CacheStorage::Header>>::toValue(m_responseHeaders.get()));
    return result;
}

void DataEntry::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("requestURL"), m_requestURL, out);
      crdtp::SerializeField(crdtp::SpanFrom("requestMethod"), m_requestMethod, out);
      crdtp::SerializeField(crdtp::SpanFrom("requestHeaders"), m_requestHeaders, out);
      crdtp::SerializeField(crdtp::SpanFrom("responseTime"), m_responseTime, out);
      crdtp::SerializeField(crdtp::SpanFrom("responseStatus"), m_responseStatus, out);
      crdtp::SerializeField(crdtp::SpanFrom("responseStatusText"), m_responseStatusText, out);
      crdtp::SerializeField(crdtp::SpanFrom("responseType"), m_responseType, out);
      crdtp::SerializeField(crdtp::SpanFrom("responseHeaders"), m_responseHeaders, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<DataEntry> DataEntry::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<Cache> Cache::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<Cache> result(new Cache());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* cacheIdValue = object->get("cacheId");
    errors->SetName("cacheId");
    result->m_cacheId = ValueConversions<String>::fromValue(cacheIdValue, errors);
    protocol::Value* securityOriginValue = object->get("securityOrigin");
    errors->SetName("securityOrigin");
    result->m_securityOrigin = ValueConversions<String>::fromValue(securityOriginValue, errors);
    protocol::Value* cacheNameValue = object->get("cacheName");
    errors->SetName("cacheName");
    result->m_cacheName = ValueConversions<String>::fromValue(cacheNameValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> Cache::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("cacheId", ValueConversions<String>::toValue(m_cacheId));
    result->setValue("securityOrigin", ValueConversions<String>::toValue(m_securityOrigin));
    result->setValue("cacheName", ValueConversions<String>::toValue(m_cacheName));
    return result;
}

void Cache::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("cacheId"), m_cacheId, out);
      crdtp::SerializeField(crdtp::SpanFrom("securityOrigin"), m_securityOrigin, out);
      crdtp::SerializeField(crdtp::SpanFrom("cacheName"), m_cacheName, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<Cache> Cache::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<Header> Header::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<Header> result(new Header());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* nameValue = object->get("name");
    errors->SetName("name");
    result->m_name = ValueConversions<String>::fromValue(nameValue, errors);
    protocol::Value* valueValue = object->get("value");
    errors->SetName("value");
    result->m_value = ValueConversions<String>::fromValue(valueValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> Header::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("name", ValueConversions<String>::toValue(m_name));
    result->setValue("value", ValueConversions<String>::toValue(m_value));
    return result;
}

void Header::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("name"), m_name, out);
      crdtp::SerializeField(crdtp::SpanFrom("value"), m_value, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<Header> Header::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<CachedResponse> CachedResponse::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<CachedResponse> result(new CachedResponse());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* bodyValue = object->get("body");
    errors->SetName("body");
    result->m_body = ValueConversions<Binary>::fromValue(bodyValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> CachedResponse::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("body", ValueConversions<Binary>::toValue(m_body));
    return result;
}

void CachedResponse::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("body"), m_body, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<CachedResponse> CachedResponse::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

// ------------- Enum values from params.


// ------------- Frontend notifications.

void Frontend::flush()
{
    frontend_channel_->FlushProtocolNotifications();
}

void Frontend::sendRawNotification(std::unique_ptr<Serializable> notification)
{
    frontend_channel_->SendProtocolNotification(std::move(notification));
}

// --------------------- Dispatcher.

class DomainDispatcherImpl : public protocol::DomainDispatcher {
public:
    DomainDispatcherImpl(FrontendChannel* frontendChannel, Backend* backend)
        : DomainDispatcher(frontendChannel)
        , m_backend(backend) {}
    ~DomainDispatcherImpl() override { }

    using CallHandler = void (DomainDispatcherImpl::*)(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);

    std::function<void(const crdtp::Dispatchable&)> Dispatch(crdtp::span<uint8_t> command_name) override;

    void deleteCache(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void deleteEntry(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void requestCacheNames(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void requestCachedResponse(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void requestEntries(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
 protected:
    Backend* m_backend;
};

namespace {
// This helper method with a static map of command methods (instance methods
// of DomainDispatcherImpl declared just above) by their name is used immediately below,
// in the DomainDispatcherImpl::Dispatch method.
DomainDispatcherImpl::CallHandler CommandByName(crdtp::span<uint8_t> command_name) {
  static auto* commands = [](){
    auto* commands = new std::vector<std::pair<crdtp::span<uint8_t>,
                              DomainDispatcherImpl::CallHandler>>{
    {
          crdtp::SpanFrom("deleteCache"),
          &DomainDispatcherImpl::deleteCache
    },
    {
          crdtp::SpanFrom("deleteEntry"),
          &DomainDispatcherImpl::deleteEntry
    },
    {
          crdtp::SpanFrom("requestCacheNames"),
          &DomainDispatcherImpl::requestCacheNames
    },
    {
          crdtp::SpanFrom("requestCachedResponse"),
          &DomainDispatcherImpl::requestCachedResponse
    },
    {
          crdtp::SpanFrom("requestEntries"),
          &DomainDispatcherImpl::requestEntries
    },
    };
    return commands;
  }();
  return crdtp::FindByFirst<DomainDispatcherImpl::CallHandler>(*commands, command_name, nullptr);
}
}  // namespace

std::function<void(const crdtp::Dispatchable&)> DomainDispatcherImpl::Dispatch(crdtp::span<uint8_t> command_name) {
  CallHandler handler = CommandByName(command_name);
  if (!handler) return nullptr;
  return [this, handler](const crdtp::Dispatchable& dispatchable){
    std::unique_ptr<DictionaryValue> params =
        DictionaryValue::cast(protocol::Value::parseBinary(dispatchable.Params().data(),
        dispatchable.Params().size()));
    ErrorSupport errors;
    errors.Push();
    (this->*handler)(dispatchable, params.get(), &errors);
  };
}


class DeleteCacheCallbackImpl : public Backend::DeleteCacheCallback, public DomainDispatcher::Callback {
public:
    DeleteCacheCallbackImpl(std::unique_ptr<DomainDispatcher::WeakPtr> backendImpl, int callId, crdtp::span<uint8_t> message)
        : DomainDispatcher::Callback(std::move(backendImpl), callId,
crdtp::SpanFrom("CacheStorage.deleteCache"), message) { }

    void sendSuccess() override
    {
        std::vector<uint8_t> result_buffer;
        crdtp::cbor::EnvelopeEncoder envelope_encoder;
        envelope_encoder.EncodeStart(&result_buffer);
        result_buffer.push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
        result_buffer.push_back(crdtp::cbor::EncodeStop());
        envelope_encoder.EncodeStop(&result_buffer);
        sendIfActive(crdtp::Serializable::From(std::move(result_buffer)), DispatchResponse::Success());
    }

    void fallThrough() override
    {
        fallThroughIfActive();
    }

    void sendFailure(const DispatchResponse& response) override
    {
        DCHECK(response.IsError());
        sendIfActive(nullptr, response);
    }
};

void DomainDispatcherImpl::deleteCache(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* cacheIdValue = params ? params->get("cacheId") : nullptr;
    errors->SetName("cacheId");
    String in_cacheId = ValueConversions<String>::fromValue(cacheIdValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    m_backend->deleteCache(in_cacheId, std::make_unique<DeleteCacheCallbackImpl>(weakPtr(), dispatchable.CallId(), dispatchable.Serialized()));
}

class DeleteEntryCallbackImpl : public Backend::DeleteEntryCallback, public DomainDispatcher::Callback {
public:
    DeleteEntryCallbackImpl(std::unique_ptr<DomainDispatcher::WeakPtr> backendImpl, int callId, crdtp::span<uint8_t> message)
        : DomainDispatcher::Callback(std::move(backendImpl), callId,
crdtp::SpanFrom("CacheStorage.deleteEntry"), message) { }

    void sendSuccess() override
    {
        std::vector<uint8_t> result_buffer;
        crdtp::cbor::EnvelopeEncoder envelope_encoder;
        envelope_encoder.EncodeStart(&result_buffer);
        result_buffer.push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
        result_buffer.push_back(crdtp::cbor::EncodeStop());
        envelope_encoder.EncodeStop(&result_buffer);
        sendIfActive(crdtp::Serializable::From(std::move(result_buffer)), DispatchResponse::Success());
    }

    void fallThrough() override
    {
        fallThroughIfActive();
    }

    void sendFailure(const DispatchResponse& response) override
    {
        DCHECK(response.IsError());
        sendIfActive(nullptr, response);
    }
};

void DomainDispatcherImpl::deleteEntry(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* cacheIdValue = params ? params->get("cacheId") : nullptr;
    errors->SetName("cacheId");
    String in_cacheId = ValueConversions<String>::fromValue(cacheIdValue, errors);
    protocol::Value* requestValue = params ? params->get("request") : nullptr;
    errors->SetName("request");
    String in_request = ValueConversions<String>::fromValue(requestValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    m_backend->deleteEntry(in_cacheId, in_request, std::make_unique<DeleteEntryCallbackImpl>(weakPtr(), dispatchable.CallId(), dispatchable.Serialized()));
}

class RequestCacheNamesCallbackImpl : public Backend::RequestCacheNamesCallback, public DomainDispatcher::Callback {
public:
    RequestCacheNamesCallbackImpl(std::unique_ptr<DomainDispatcher::WeakPtr> backendImpl, int callId, crdtp::span<uint8_t> message)
        : DomainDispatcher::Callback(std::move(backendImpl), callId,
crdtp::SpanFrom("CacheStorage.requestCacheNames"), message) { }

    void sendSuccess(std::unique_ptr<protocol::Array<protocol::CacheStorage::Cache>> caches) override
    {
        std::vector<uint8_t> result_buffer;
        crdtp::cbor::EnvelopeEncoder envelope_encoder;
        envelope_encoder.EncodeStart(&result_buffer);
        result_buffer.push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
          crdtp::SerializeField(crdtp::SpanFrom("caches"), caches, &result_buffer);
        result_buffer.push_back(crdtp::cbor::EncodeStop());
        envelope_encoder.EncodeStop(&result_buffer);
        sendIfActive(crdtp::Serializable::From(std::move(result_buffer)), DispatchResponse::Success());
    }

    void fallThrough() override
    {
        fallThroughIfActive();
    }

    void sendFailure(const DispatchResponse& response) override
    {
        DCHECK(response.IsError());
        sendIfActive(nullptr, response);
    }
};

void DomainDispatcherImpl::requestCacheNames(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* securityOriginValue = params ? params->get("securityOrigin") : nullptr;
    errors->SetName("securityOrigin");
    String in_securityOrigin = ValueConversions<String>::fromValue(securityOriginValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    m_backend->requestCacheNames(in_securityOrigin, std::make_unique<RequestCacheNamesCallbackImpl>(weakPtr(), dispatchable.CallId(), dispatchable.Serialized()));
}

class RequestCachedResponseCallbackImpl : public Backend::RequestCachedResponseCallback, public DomainDispatcher::Callback {
public:
    RequestCachedResponseCallbackImpl(std::unique_ptr<DomainDispatcher::WeakPtr> backendImpl, int callId, crdtp::span<uint8_t> message)
        : DomainDispatcher::Callback(std::move(backendImpl), callId,
crdtp::SpanFrom("CacheStorage.requestCachedResponse"), message) { }

    void sendSuccess(std::unique_ptr<protocol::CacheStorage::CachedResponse> response) override
    {
        std::vector<uint8_t> result_buffer;
        crdtp::cbor::EnvelopeEncoder envelope_encoder;
        envelope_encoder.EncodeStart(&result_buffer);
        result_buffer.push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
          crdtp::SerializeField(crdtp::SpanFrom("response"), response, &result_buffer);
        result_buffer.push_back(crdtp::cbor::EncodeStop());
        envelope_encoder.EncodeStop(&result_buffer);
        sendIfActive(crdtp::Serializable::From(std::move(result_buffer)), DispatchResponse::Success());
    }

    void fallThrough() override
    {
        fallThroughIfActive();
    }

    void sendFailure(const DispatchResponse& response) override
    {
        DCHECK(response.IsError());
        sendIfActive(nullptr, response);
    }
};

void DomainDispatcherImpl::requestCachedResponse(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* cacheIdValue = params ? params->get("cacheId") : nullptr;
    errors->SetName("cacheId");
    String in_cacheId = ValueConversions<String>::fromValue(cacheIdValue, errors);
    protocol::Value* requestURLValue = params ? params->get("requestURL") : nullptr;
    errors->SetName("requestURL");
    String in_requestURL = ValueConversions<String>::fromValue(requestURLValue, errors);
    protocol::Value* requestHeadersValue = params ? params->get("requestHeaders") : nullptr;
    errors->SetName("requestHeaders");
    std::unique_ptr<protocol::Array<protocol::CacheStorage::Header>> in_requestHeaders = ValueConversions<protocol::Array<protocol::CacheStorage::Header>>::fromValue(requestHeadersValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    m_backend->requestCachedResponse(in_cacheId, in_requestURL, std::move(in_requestHeaders), std::make_unique<RequestCachedResponseCallbackImpl>(weakPtr(), dispatchable.CallId(), dispatchable.Serialized()));
}

class RequestEntriesCallbackImpl : public Backend::RequestEntriesCallback, public DomainDispatcher::Callback {
public:
    RequestEntriesCallbackImpl(std::unique_ptr<DomainDispatcher::WeakPtr> backendImpl, int callId, crdtp::span<uint8_t> message)
        : DomainDispatcher::Callback(std::move(backendImpl), callId,
crdtp::SpanFrom("CacheStorage.requestEntries"), message) { }

    void sendSuccess(std::unique_ptr<protocol::Array<protocol::CacheStorage::DataEntry>> cacheDataEntries, double returnCount) override
    {
        std::vector<uint8_t> result_buffer;
        crdtp::cbor::EnvelopeEncoder envelope_encoder;
        envelope_encoder.EncodeStart(&result_buffer);
        result_buffer.push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
          crdtp::SerializeField(crdtp::SpanFrom("cacheDataEntries"), cacheDataEntries, &result_buffer);
          crdtp::SerializeField(crdtp::SpanFrom("returnCount"), returnCount, &result_buffer);
        result_buffer.push_back(crdtp::cbor::EncodeStop());
        envelope_encoder.EncodeStop(&result_buffer);
        sendIfActive(crdtp::Serializable::From(std::move(result_buffer)), DispatchResponse::Success());
    }

    void fallThrough() override
    {
        fallThroughIfActive();
    }

    void sendFailure(const DispatchResponse& response) override
    {
        DCHECK(response.IsError());
        sendIfActive(nullptr, response);
    }
};

void DomainDispatcherImpl::requestEntries(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* cacheIdValue = params ? params->get("cacheId") : nullptr;
    errors->SetName("cacheId");
    String in_cacheId = ValueConversions<String>::fromValue(cacheIdValue, errors);
    protocol::Value* skipCountValue = params ? params->get("skipCount") : nullptr;
    Maybe<int> in_skipCount;
    if (skipCountValue) {
        errors->SetName("skipCount");
        in_skipCount = ValueConversions<int>::fromValue(skipCountValue, errors);
    }
    protocol::Value* pageSizeValue = params ? params->get("pageSize") : nullptr;
    Maybe<int> in_pageSize;
    if (pageSizeValue) {
        errors->SetName("pageSize");
        in_pageSize = ValueConversions<int>::fromValue(pageSizeValue, errors);
    }
    protocol::Value* pathFilterValue = params ? params->get("pathFilter") : nullptr;
    Maybe<String> in_pathFilter;
    if (pathFilterValue) {
        errors->SetName("pathFilter");
        in_pathFilter = ValueConversions<String>::fromValue(pathFilterValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    m_backend->requestEntries(in_cacheId, std::move(in_skipCount), std::move(in_pageSize), std::move(in_pathFilter), std::make_unique<RequestEntriesCallbackImpl>(weakPtr(), dispatchable.CallId(), dispatchable.Serialized()));
}

namespace {
// This helper method (with a static map of redirects) is used from Dispatcher::wire
// immediately below.
const std::vector<std::pair<crdtp::span<uint8_t>, crdtp::span<uint8_t>>>& SortedRedirects() {
  static auto* redirects = [](){
    auto* redirects = new std::vector<std::pair<crdtp::span<uint8_t>, crdtp::span<uint8_t>>>{
    };
    return redirects;
  }();
  return *redirects;
}
}  // namespace

// static
void Dispatcher::wire(UberDispatcher* uber, Backend* backend)
{
    auto dispatcher = std::make_unique<DomainDispatcherImpl>(uber->channel(), backend);
    uber->WireBackend(crdtp::SpanFrom("CacheStorage"), SortedRedirects(), std::move(dispatcher));
}

} // CacheStorage
} // namespace blink
} // namespace protocol

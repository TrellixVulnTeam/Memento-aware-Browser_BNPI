// This file is generated by TypeBuilder_cpp.template.

// Copyright (c) 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "third_party/blink/renderer/core/inspector/protocol/Emulation.h"

#include "third_party/blink/renderer/core/inspector/protocol/Protocol.h"

#include "third_party/inspector_protocol/crdtp/cbor.h"
#include "third_party/inspector_protocol/crdtp/find_by_first.h"
#include "third_party/inspector_protocol/crdtp/serializer_traits.h"
#include "third_party/inspector_protocol/crdtp/span.h"

namespace blink {
namespace protocol {
namespace Emulation {

// ------------- Enum values from types.

const char Metainfo::domainName[] = "Emulation";
const char Metainfo::commandPrefix[] = "Emulation.";
const char Metainfo::version[] = "1.3";

const char* ScreenOrientation::TypeEnum::PortraitPrimary = "portraitPrimary";
const char* ScreenOrientation::TypeEnum::PortraitSecondary = "portraitSecondary";
const char* ScreenOrientation::TypeEnum::LandscapePrimary = "landscapePrimary";
const char* ScreenOrientation::TypeEnum::LandscapeSecondary = "landscapeSecondary";

std::unique_ptr<ScreenOrientation> ScreenOrientation::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<ScreenOrientation> result(new ScreenOrientation());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* typeValue = object->get("type");
    errors->SetName("type");
    result->m_type = ValueConversions<String>::fromValue(typeValue, errors);
    protocol::Value* angleValue = object->get("angle");
    errors->SetName("angle");
    result->m_angle = ValueConversions<int>::fromValue(angleValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> ScreenOrientation::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("type", ValueConversions<String>::toValue(m_type));
    result->setValue("angle", ValueConversions<int>::toValue(m_angle));
    return result;
}

void ScreenOrientation::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("type"), m_type, out);
      crdtp::SerializeField(crdtp::SpanFrom("angle"), m_angle, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<ScreenOrientation> ScreenOrientation::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<MediaFeature> MediaFeature::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<MediaFeature> result(new MediaFeature());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* nameValue = object->get("name");
    errors->SetName("name");
    result->m_name = ValueConversions<String>::fromValue(nameValue, errors);
    protocol::Value* valueValue = object->get("value");
    errors->SetName("value");
    result->m_value = ValueConversions<String>::fromValue(valueValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> MediaFeature::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("name", ValueConversions<String>::toValue(m_name));
    result->setValue("value", ValueConversions<String>::toValue(m_value));
    return result;
}

void MediaFeature::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("name"), m_name, out);
      crdtp::SerializeField(crdtp::SpanFrom("value"), m_value, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<MediaFeature> MediaFeature::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

namespace VirtualTimePolicyEnum {
const char Advance[] = "advance";
const char Pause[] = "pause";
const char PauseIfNetworkFetchesPending[] = "pauseIfNetworkFetchesPending";
} // namespace VirtualTimePolicyEnum

std::unique_ptr<UserAgentBrandVersion> UserAgentBrandVersion::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<UserAgentBrandVersion> result(new UserAgentBrandVersion());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* brandValue = object->get("brand");
    errors->SetName("brand");
    result->m_brand = ValueConversions<String>::fromValue(brandValue, errors);
    protocol::Value* versionValue = object->get("version");
    errors->SetName("version");
    result->m_version = ValueConversions<String>::fromValue(versionValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> UserAgentBrandVersion::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("brand", ValueConversions<String>::toValue(m_brand));
    result->setValue("version", ValueConversions<String>::toValue(m_version));
    return result;
}

void UserAgentBrandVersion::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("brand"), m_brand, out);
      crdtp::SerializeField(crdtp::SpanFrom("version"), m_version, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<UserAgentBrandVersion> UserAgentBrandVersion::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

std::unique_ptr<UserAgentMetadata> UserAgentMetadata::fromValue(protocol::Value* value, ErrorSupport* errors)
{
    if (!value || value->type() != protocol::Value::TypeObject) {
        errors->AddError("object expected");
        return nullptr;
    }

    std::unique_ptr<UserAgentMetadata> result(new UserAgentMetadata());
    protocol::DictionaryValue* object = DictionaryValue::cast(value);
    errors->Push();
    protocol::Value* brandsValue = object->get("brands");
    errors->SetName("brands");
    result->m_brands = ValueConversions<protocol::Array<protocol::Emulation::UserAgentBrandVersion>>::fromValue(brandsValue, errors);
    protocol::Value* fullVersionValue = object->get("fullVersion");
    errors->SetName("fullVersion");
    result->m_fullVersion = ValueConversions<String>::fromValue(fullVersionValue, errors);
    protocol::Value* platformValue = object->get("platform");
    errors->SetName("platform");
    result->m_platform = ValueConversions<String>::fromValue(platformValue, errors);
    protocol::Value* platformVersionValue = object->get("platformVersion");
    errors->SetName("platformVersion");
    result->m_platformVersion = ValueConversions<String>::fromValue(platformVersionValue, errors);
    protocol::Value* architectureValue = object->get("architecture");
    errors->SetName("architecture");
    result->m_architecture = ValueConversions<String>::fromValue(architectureValue, errors);
    protocol::Value* modelValue = object->get("model");
    errors->SetName("model");
    result->m_model = ValueConversions<String>::fromValue(modelValue, errors);
    protocol::Value* mobileValue = object->get("mobile");
    errors->SetName("mobile");
    result->m_mobile = ValueConversions<bool>::fromValue(mobileValue, errors);
    errors->Pop();
    if (!errors->Errors().empty())
        return nullptr;
    return result;
}

std::unique_ptr<protocol::DictionaryValue> UserAgentMetadata::toValue() const
{
    std::unique_ptr<protocol::DictionaryValue> result = DictionaryValue::create();
    result->setValue("brands", ValueConversions<protocol::Array<protocol::Emulation::UserAgentBrandVersion>>::toValue(m_brands.get()));
    result->setValue("fullVersion", ValueConversions<String>::toValue(m_fullVersion));
    result->setValue("platform", ValueConversions<String>::toValue(m_platform));
    result->setValue("platformVersion", ValueConversions<String>::toValue(m_platformVersion));
    result->setValue("architecture", ValueConversions<String>::toValue(m_architecture));
    result->setValue("model", ValueConversions<String>::toValue(m_model));
    result->setValue("mobile", ValueConversions<bool>::toValue(m_mobile));
    return result;
}

void UserAgentMetadata::AppendSerialized(std::vector<uint8_t>* out) const {
    crdtp::cbor::EnvelopeEncoder envelope_encoder;
    envelope_encoder.EncodeStart(out);
    out->push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
      crdtp::SerializeField(crdtp::SpanFrom("brands"), m_brands, out);
      crdtp::SerializeField(crdtp::SpanFrom("fullVersion"), m_fullVersion, out);
      crdtp::SerializeField(crdtp::SpanFrom("platform"), m_platform, out);
      crdtp::SerializeField(crdtp::SpanFrom("platformVersion"), m_platformVersion, out);
      crdtp::SerializeField(crdtp::SpanFrom("architecture"), m_architecture, out);
      crdtp::SerializeField(crdtp::SpanFrom("model"), m_model, out);
      crdtp::SerializeField(crdtp::SpanFrom("mobile"), m_mobile, out);
    out->push_back(crdtp::cbor::EncodeStop());
    envelope_encoder.EncodeStop(out);
}

std::unique_ptr<UserAgentMetadata> UserAgentMetadata::clone() const
{
    ErrorSupport errors;
    return fromValue(toValue().get(), &errors);
}

// ------------- Enum values from params.


namespace SetEmitTouchEventsForMouse {
namespace ConfigurationEnum {
const char* Mobile = "mobile";
const char* Desktop = "desktop";
} // namespace ConfigurationEnum
} // namespace SetEmitTouchEventsForMouse

namespace SetEmulatedVisionDeficiency {
namespace TypeEnum {
const char* None = "none";
const char* Achromatopsia = "achromatopsia";
const char* BlurredVision = "blurredVision";
const char* Deuteranopia = "deuteranopia";
const char* Protanopia = "protanopia";
const char* Tritanopia = "tritanopia";
} // namespace TypeEnum
} // namespace SetEmulatedVisionDeficiency

// ------------- Frontend notifications.

void Frontend::virtualTimeBudgetExpired()
{
    if (!frontend_channel_)
        return;
    frontend_channel_->SendProtocolNotification(crdtp::CreateNotification("Emulation.virtualTimeBudgetExpired"));
}

void Frontend::flush()
{
    frontend_channel_->FlushProtocolNotifications();
}

void Frontend::sendRawNotification(std::unique_ptr<Serializable> notification)
{
    frontend_channel_->SendProtocolNotification(std::move(notification));
}

// --------------------- Dispatcher.

class DomainDispatcherImpl : public protocol::DomainDispatcher {
public:
    DomainDispatcherImpl(FrontendChannel* frontendChannel, Backend* backend)
        : DomainDispatcher(frontendChannel)
        , m_backend(backend) {}
    ~DomainDispatcherImpl() override { }

    using CallHandler = void (DomainDispatcherImpl::*)(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);

    std::function<void(const crdtp::Dispatchable&)> Dispatch(crdtp::span<uint8_t> command_name) override;

    void clearDeviceMetricsOverride(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void resetPageScaleFactor(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setFocusEmulationEnabled(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setCPUThrottlingRate(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setDefaultBackgroundColorOverride(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setDeviceMetricsOverride(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setScrollbarsHidden(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setDocumentCookieDisabled(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setEmulatedMedia(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setEmulatedVisionDeficiency(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setNavigatorOverrides(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setPageScaleFactor(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setScriptExecutionDisabled(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setTouchEmulationEnabled(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setVirtualTimePolicy(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setLocaleOverride(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setTimezoneOverride(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
    void setUserAgentOverride(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors);
 protected:
    Backend* m_backend;
};

namespace {
// This helper method with a static map of command methods (instance methods
// of DomainDispatcherImpl declared just above) by their name is used immediately below,
// in the DomainDispatcherImpl::Dispatch method.
DomainDispatcherImpl::CallHandler CommandByName(crdtp::span<uint8_t> command_name) {
  static auto* commands = [](){
    auto* commands = new std::vector<std::pair<crdtp::span<uint8_t>,
                              DomainDispatcherImpl::CallHandler>>{
    {
          crdtp::SpanFrom("clearDeviceMetricsOverride"),
          &DomainDispatcherImpl::clearDeviceMetricsOverride
    },
    {
          crdtp::SpanFrom("resetPageScaleFactor"),
          &DomainDispatcherImpl::resetPageScaleFactor
    },
    {
          crdtp::SpanFrom("setCPUThrottlingRate"),
          &DomainDispatcherImpl::setCPUThrottlingRate
    },
    {
          crdtp::SpanFrom("setDefaultBackgroundColorOverride"),
          &DomainDispatcherImpl::setDefaultBackgroundColorOverride
    },
    {
          crdtp::SpanFrom("setDeviceMetricsOverride"),
          &DomainDispatcherImpl::setDeviceMetricsOverride
    },
    {
          crdtp::SpanFrom("setDocumentCookieDisabled"),
          &DomainDispatcherImpl::setDocumentCookieDisabled
    },
    {
          crdtp::SpanFrom("setEmulatedMedia"),
          &DomainDispatcherImpl::setEmulatedMedia
    },
    {
          crdtp::SpanFrom("setEmulatedVisionDeficiency"),
          &DomainDispatcherImpl::setEmulatedVisionDeficiency
    },
    {
          crdtp::SpanFrom("setFocusEmulationEnabled"),
          &DomainDispatcherImpl::setFocusEmulationEnabled
    },
    {
          crdtp::SpanFrom("setLocaleOverride"),
          &DomainDispatcherImpl::setLocaleOverride
    },
    {
          crdtp::SpanFrom("setNavigatorOverrides"),
          &DomainDispatcherImpl::setNavigatorOverrides
    },
    {
          crdtp::SpanFrom("setPageScaleFactor"),
          &DomainDispatcherImpl::setPageScaleFactor
    },
    {
          crdtp::SpanFrom("setScriptExecutionDisabled"),
          &DomainDispatcherImpl::setScriptExecutionDisabled
    },
    {
          crdtp::SpanFrom("setScrollbarsHidden"),
          &DomainDispatcherImpl::setScrollbarsHidden
    },
    {
          crdtp::SpanFrom("setTimezoneOverride"),
          &DomainDispatcherImpl::setTimezoneOverride
    },
    {
          crdtp::SpanFrom("setTouchEmulationEnabled"),
          &DomainDispatcherImpl::setTouchEmulationEnabled
    },
    {
          crdtp::SpanFrom("setUserAgentOverride"),
          &DomainDispatcherImpl::setUserAgentOverride
    },
    {
          crdtp::SpanFrom("setVirtualTimePolicy"),
          &DomainDispatcherImpl::setVirtualTimePolicy
    },
    };
    return commands;
  }();
  return crdtp::FindByFirst<DomainDispatcherImpl::CallHandler>(*commands, command_name, nullptr);
}
}  // namespace

std::function<void(const crdtp::Dispatchable&)> DomainDispatcherImpl::Dispatch(crdtp::span<uint8_t> command_name) {
  CallHandler handler = CommandByName(command_name);
  if (!handler) return nullptr;
  return [this, handler](const crdtp::Dispatchable& dispatchable){
    std::unique_ptr<DictionaryValue> params =
        DictionaryValue::cast(protocol::Value::parseBinary(dispatchable.Params().data(),
        dispatchable.Params().size()));
    ErrorSupport errors;
    errors.Push();
    (this->*handler)(dispatchable, params.get(), &errors);
  };
}


void DomainDispatcherImpl::clearDeviceMetricsOverride(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->clearDeviceMetricsOverride();
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Emulation.clearDeviceMetricsOverride"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::resetPageScaleFactor(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->resetPageScaleFactor();
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Emulation.resetPageScaleFactor"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setFocusEmulationEnabled(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* enabledValue = params ? params->get("enabled") : nullptr;
    errors->SetName("enabled");
    bool in_enabled = ValueConversions<bool>::fromValue(enabledValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setFocusEmulationEnabled(in_enabled);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Emulation.setFocusEmulationEnabled"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setCPUThrottlingRate(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* rateValue = params ? params->get("rate") : nullptr;
    errors->SetName("rate");
    double in_rate = ValueConversions<double>::fromValue(rateValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setCPUThrottlingRate(in_rate);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Emulation.setCPUThrottlingRate"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setDefaultBackgroundColorOverride(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* colorValue = params ? params->get("color") : nullptr;
    Maybe<protocol::DOM::RGBA> in_color;
    if (colorValue) {
        errors->SetName("color");
        in_color = ValueConversions<protocol::DOM::RGBA>::fromValue(colorValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setDefaultBackgroundColorOverride(std::move(in_color));
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Emulation.setDefaultBackgroundColorOverride"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setDeviceMetricsOverride(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* widthValue = params ? params->get("width") : nullptr;
    errors->SetName("width");
    int in_width = ValueConversions<int>::fromValue(widthValue, errors);
    protocol::Value* heightValue = params ? params->get("height") : nullptr;
    errors->SetName("height");
    int in_height = ValueConversions<int>::fromValue(heightValue, errors);
    protocol::Value* deviceScaleFactorValue = params ? params->get("deviceScaleFactor") : nullptr;
    errors->SetName("deviceScaleFactor");
    double in_deviceScaleFactor = ValueConversions<double>::fromValue(deviceScaleFactorValue, errors);
    protocol::Value* mobileValue = params ? params->get("mobile") : nullptr;
    errors->SetName("mobile");
    bool in_mobile = ValueConversions<bool>::fromValue(mobileValue, errors);
    protocol::Value* scaleValue = params ? params->get("scale") : nullptr;
    Maybe<double> in_scale;
    if (scaleValue) {
        errors->SetName("scale");
        in_scale = ValueConversions<double>::fromValue(scaleValue, errors);
    }
    protocol::Value* screenWidthValue = params ? params->get("screenWidth") : nullptr;
    Maybe<int> in_screenWidth;
    if (screenWidthValue) {
        errors->SetName("screenWidth");
        in_screenWidth = ValueConversions<int>::fromValue(screenWidthValue, errors);
    }
    protocol::Value* screenHeightValue = params ? params->get("screenHeight") : nullptr;
    Maybe<int> in_screenHeight;
    if (screenHeightValue) {
        errors->SetName("screenHeight");
        in_screenHeight = ValueConversions<int>::fromValue(screenHeightValue, errors);
    }
    protocol::Value* positionXValue = params ? params->get("positionX") : nullptr;
    Maybe<int> in_positionX;
    if (positionXValue) {
        errors->SetName("positionX");
        in_positionX = ValueConversions<int>::fromValue(positionXValue, errors);
    }
    protocol::Value* positionYValue = params ? params->get("positionY") : nullptr;
    Maybe<int> in_positionY;
    if (positionYValue) {
        errors->SetName("positionY");
        in_positionY = ValueConversions<int>::fromValue(positionYValue, errors);
    }
    protocol::Value* dontSetVisibleSizeValue = params ? params->get("dontSetVisibleSize") : nullptr;
    Maybe<bool> in_dontSetVisibleSize;
    if (dontSetVisibleSizeValue) {
        errors->SetName("dontSetVisibleSize");
        in_dontSetVisibleSize = ValueConversions<bool>::fromValue(dontSetVisibleSizeValue, errors);
    }
    protocol::Value* screenOrientationValue = params ? params->get("screenOrientation") : nullptr;
    Maybe<protocol::Emulation::ScreenOrientation> in_screenOrientation;
    if (screenOrientationValue) {
        errors->SetName("screenOrientation");
        in_screenOrientation = ValueConversions<protocol::Emulation::ScreenOrientation>::fromValue(screenOrientationValue, errors);
    }
    protocol::Value* viewportValue = params ? params->get("viewport") : nullptr;
    Maybe<protocol::Page::Viewport> in_viewport;
    if (viewportValue) {
        errors->SetName("viewport");
        in_viewport = ValueConversions<protocol::Page::Viewport>::fromValue(viewportValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setDeviceMetricsOverride(in_width, in_height, in_deviceScaleFactor, in_mobile, std::move(in_scale), std::move(in_screenWidth), std::move(in_screenHeight), std::move(in_positionX), std::move(in_positionY), std::move(in_dontSetVisibleSize), std::move(in_screenOrientation), std::move(in_viewport));
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Emulation.setDeviceMetricsOverride"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setScrollbarsHidden(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* hiddenValue = params ? params->get("hidden") : nullptr;
    errors->SetName("hidden");
    bool in_hidden = ValueConversions<bool>::fromValue(hiddenValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setScrollbarsHidden(in_hidden);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Emulation.setScrollbarsHidden"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setDocumentCookieDisabled(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* disabledValue = params ? params->get("disabled") : nullptr;
    errors->SetName("disabled");
    bool in_disabled = ValueConversions<bool>::fromValue(disabledValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setDocumentCookieDisabled(in_disabled);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Emulation.setDocumentCookieDisabled"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setEmulatedMedia(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* mediaValue = params ? params->get("media") : nullptr;
    Maybe<String> in_media;
    if (mediaValue) {
        errors->SetName("media");
        in_media = ValueConversions<String>::fromValue(mediaValue, errors);
    }
    protocol::Value* featuresValue = params ? params->get("features") : nullptr;
    Maybe<protocol::Array<protocol::Emulation::MediaFeature>> in_features;
    if (featuresValue) {
        errors->SetName("features");
        in_features = ValueConversions<protocol::Array<protocol::Emulation::MediaFeature>>::fromValue(featuresValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setEmulatedMedia(std::move(in_media), std::move(in_features));
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Emulation.setEmulatedMedia"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setEmulatedVisionDeficiency(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* typeValue = params ? params->get("type") : nullptr;
    errors->SetName("type");
    String in_type = ValueConversions<String>::fromValue(typeValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setEmulatedVisionDeficiency(in_type);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Emulation.setEmulatedVisionDeficiency"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setNavigatorOverrides(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* platformValue = params ? params->get("platform") : nullptr;
    errors->SetName("platform");
    String in_platform = ValueConversions<String>::fromValue(platformValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setNavigatorOverrides(in_platform);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Emulation.setNavigatorOverrides"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setPageScaleFactor(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* pageScaleFactorValue = params ? params->get("pageScaleFactor") : nullptr;
    errors->SetName("pageScaleFactor");
    double in_pageScaleFactor = ValueConversions<double>::fromValue(pageScaleFactorValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setPageScaleFactor(in_pageScaleFactor);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Emulation.setPageScaleFactor"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setScriptExecutionDisabled(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* valueValue = params ? params->get("value") : nullptr;
    errors->SetName("value");
    bool in_value = ValueConversions<bool>::fromValue(valueValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setScriptExecutionDisabled(in_value);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Emulation.setScriptExecutionDisabled"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setTouchEmulationEnabled(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* enabledValue = params ? params->get("enabled") : nullptr;
    errors->SetName("enabled");
    bool in_enabled = ValueConversions<bool>::fromValue(enabledValue, errors);
    protocol::Value* maxTouchPointsValue = params ? params->get("maxTouchPoints") : nullptr;
    Maybe<int> in_maxTouchPoints;
    if (maxTouchPointsValue) {
        errors->SetName("maxTouchPoints");
        in_maxTouchPoints = ValueConversions<int>::fromValue(maxTouchPointsValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setTouchEmulationEnabled(in_enabled, std::move(in_maxTouchPoints));
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Emulation.setTouchEmulationEnabled"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setVirtualTimePolicy(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* policyValue = params ? params->get("policy") : nullptr;
    errors->SetName("policy");
    String in_policy = ValueConversions<String>::fromValue(policyValue, errors);
    protocol::Value* budgetValue = params ? params->get("budget") : nullptr;
    Maybe<double> in_budget;
    if (budgetValue) {
        errors->SetName("budget");
        in_budget = ValueConversions<double>::fromValue(budgetValue, errors);
    }
    protocol::Value* maxVirtualTimeTaskStarvationCountValue = params ? params->get("maxVirtualTimeTaskStarvationCount") : nullptr;
    Maybe<int> in_maxVirtualTimeTaskStarvationCount;
    if (maxVirtualTimeTaskStarvationCountValue) {
        errors->SetName("maxVirtualTimeTaskStarvationCount");
        in_maxVirtualTimeTaskStarvationCount = ValueConversions<int>::fromValue(maxVirtualTimeTaskStarvationCountValue, errors);
    }
    protocol::Value* waitForNavigationValue = params ? params->get("waitForNavigation") : nullptr;
    Maybe<bool> in_waitForNavigation;
    if (waitForNavigationValue) {
        errors->SetName("waitForNavigation");
        in_waitForNavigation = ValueConversions<bool>::fromValue(waitForNavigationValue, errors);
    }
    protocol::Value* initialVirtualTimeValue = params ? params->get("initialVirtualTime") : nullptr;
    Maybe<double> in_initialVirtualTime;
    if (initialVirtualTimeValue) {
        errors->SetName("initialVirtualTime");
        in_initialVirtualTime = ValueConversions<double>::fromValue(initialVirtualTimeValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;
    // Declare output parameters.
    double out_virtualTimeTicksBase;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setVirtualTimePolicy(in_policy, std::move(in_budget), std::move(in_maxVirtualTimeTaskStarvationCount), std::move(in_waitForNavigation), std::move(in_initialVirtualTime), &out_virtualTimeTicksBase);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Emulation.setVirtualTimePolicy"), dispatchable.Serialized());
        return;
    }
      if (weak->get()) {
        std::vector<uint8_t> result;
        if (response.IsSuccess()) {
          crdtp::cbor::EnvelopeEncoder envelope_encoder;
          envelope_encoder.EncodeStart(&result);
          result.push_back(crdtp::cbor::EncodeIndefiniteLengthMapStart());
            crdtp::SerializeField(crdtp::SpanFrom("virtualTimeTicksBase"), out_virtualTimeTicksBase, &result);
          result.push_back(crdtp::cbor::EncodeStop());
          envelope_encoder.EncodeStop(&result);
        }
        weak->get()->sendResponse(dispatchable.CallId(), response, crdtp::Serializable::From(std::move(result)));
      }
    return;
}

void DomainDispatcherImpl::setLocaleOverride(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* localeValue = params ? params->get("locale") : nullptr;
    Maybe<String> in_locale;
    if (localeValue) {
        errors->SetName("locale");
        in_locale = ValueConversions<String>::fromValue(localeValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setLocaleOverride(std::move(in_locale));
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Emulation.setLocaleOverride"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setTimezoneOverride(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* timezoneIdValue = params ? params->get("timezoneId") : nullptr;
    errors->SetName("timezoneId");
    String in_timezoneId = ValueConversions<String>::fromValue(timezoneIdValue, errors);
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setTimezoneOverride(in_timezoneId);
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Emulation.setTimezoneOverride"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

void DomainDispatcherImpl::setUserAgentOverride(const crdtp::Dispatchable& dispatchable, DictionaryValue* params, ErrorSupport* errors)
{
    // Prepare input parameters.
    protocol::Value* userAgentValue = params ? params->get("userAgent") : nullptr;
    errors->SetName("userAgent");
    String in_userAgent = ValueConversions<String>::fromValue(userAgentValue, errors);
    protocol::Value* acceptLanguageValue = params ? params->get("acceptLanguage") : nullptr;
    Maybe<String> in_acceptLanguage;
    if (acceptLanguageValue) {
        errors->SetName("acceptLanguage");
        in_acceptLanguage = ValueConversions<String>::fromValue(acceptLanguageValue, errors);
    }
    protocol::Value* platformValue = params ? params->get("platform") : nullptr;
    Maybe<String> in_platform;
    if (platformValue) {
        errors->SetName("platform");
        in_platform = ValueConversions<String>::fromValue(platformValue, errors);
    }
    protocol::Value* userAgentMetadataValue = params ? params->get("userAgentMetadata") : nullptr;
    Maybe<protocol::Emulation::UserAgentMetadata> in_userAgentMetadata;
    if (userAgentMetadataValue) {
        errors->SetName("userAgentMetadata");
        in_userAgentMetadata = ValueConversions<protocol::Emulation::UserAgentMetadata>::fromValue(userAgentMetadataValue, errors);
    }
    if (MaybeReportInvalidParams(dispatchable, *errors)) return;

    std::unique_ptr<DomainDispatcher::WeakPtr> weak = weakPtr();
    DispatchResponse response = m_backend->setUserAgentOverride(in_userAgent, std::move(in_acceptLanguage), std::move(in_platform), std::move(in_userAgentMetadata));
    if (response.IsFallThrough()) {
        channel()->FallThrough(dispatchable.CallId(), crdtp::SpanFrom("Emulation.setUserAgentOverride"), dispatchable.Serialized());
        return;
    }
    if (weak->get())
        weak->get()->sendResponse(dispatchable.CallId(), response);
    return;
}

namespace {
// This helper method (with a static map of redirects) is used from Dispatcher::wire
// immediately below.
const std::vector<std::pair<crdtp::span<uint8_t>, crdtp::span<uint8_t>>>& SortedRedirects() {
  static auto* redirects = [](){
    auto* redirects = new std::vector<std::pair<crdtp::span<uint8_t>, crdtp::span<uint8_t>>>{
    };
    return redirects;
  }();
  return *redirects;
}
}  // namespace

// static
void Dispatcher::wire(UberDispatcher* uber, Backend* backend)
{
    auto dispatcher = std::make_unique<DomainDispatcherImpl>(uber->channel(), backend);
    uber->WireBackend(crdtp::SpanFrom("Emulation"), SortedRedirects(), std::move(dispatcher));
}

} // Emulation
} // namespace blink
} // namespace protocol

// third_party/blink/public/mojom/webauthn/authenticator.mojom-lite.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';


mojo.internal.exportModule('blink.mojom');





/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
blink.mojom.AuthenticatorStatusSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
blink.mojom.AuthenticatorStatus = {
  
  SUCCESS: 0,
  PENDING_REQUEST: 1,
  NOT_ALLOWED_ERROR: 2,
  INVALID_DOMAIN: 3,
  INVALID_ICON_URL: 4,
  CREDENTIAL_EXCLUDED: 5,
  CREDENTIAL_NOT_RECOGNIZED: 6,
  NOT_IMPLEMENTED: 7,
  NOT_FOCUSED: 8,
  RESIDENT_CREDENTIALS_UNSUPPORTED: 9,
  USER_VERIFICATION_UNSUPPORTED: 10,
  ALGORITHM_UNSUPPORTED: 11,
  EMPTY_ALLOW_CREDENTIALS: 12,
  ANDROID_NOT_SUPPORTED_ERROR: 13,
  PROTECTION_POLICY_INCONSISTENT: 14,
  ABORT_ERROR: 15,
  OPAQUE_DOMAIN: 16,
  INVALID_PROTOCOL: 17,
  BAD_RELYING_PARTY_ID: 18,
  UNKNOWN_ERROR: 19,
  MIN_VALUE: 0,
  MAX_VALUE: 19,
};


/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
blink.mojom.AuthenticatorTransportSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
blink.mojom.AuthenticatorTransport = {
  
  USB: 0,
  NFC: 1,
  BLE: 2,
  CABLE: 3,
  INTERNAL: 4,
  MIN_VALUE: 0,
  MAX_VALUE: 4,
};


/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
blink.mojom.UserVerificationRequirementSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
blink.mojom.UserVerificationRequirement = {
  
  REQUIRED: 0,
  PREFERRED: 1,
  DISCOURAGED: 2,
  MIN_VALUE: 0,
  MAX_VALUE: 2,
};


/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
blink.mojom.AttestationConveyancePreferenceSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
blink.mojom.AttestationConveyancePreference = {
  
  NONE: 0,
  INDIRECT: 1,
  DIRECT: 2,
  ENTERPRISE: 3,
  MIN_VALUE: 0,
  MAX_VALUE: 3,
};


/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
blink.mojom.AuthenticatorAttachmentSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
blink.mojom.AuthenticatorAttachment = {
  
  NO_PREFERENCE: 0,
  PLATFORM: 1,
  CROSS_PLATFORM: 2,
  MIN_VALUE: 0,
  MAX_VALUE: 2,
};


/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
blink.mojom.ProtectionPolicySpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
blink.mojom.ProtectionPolicy = {
  
  UNSPECIFIED: 0,
  NONE: 1,
  UV_OR_CRED_ID_REQUIRED: 2,
  UV_REQUIRED: 3,
  MIN_VALUE: 0,
  MAX_VALUE: 3,
};


/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
blink.mojom.PublicKeyCredentialTypeSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
blink.mojom.PublicKeyCredentialType = {
  
  PUBLIC_KEY: 0,
  MIN_VALUE: 0,
  MAX_VALUE: 0,
};





/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
blink.mojom.AuthenticatorPendingReceiver = class {
  /** @param {!MojoHandle} handle */
  constructor(handle) {
    /** @public {!MojoHandle} */
    this.handle = handle;
  }
};



/**
 * @export
 * @implements { blink.mojom.AuthenticatorInterface }
 */
blink.mojom.AuthenticatorRemote = class {
  /** @param {MojoHandle=} opt_handle */
  constructor(opt_handle) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!blink.mojom.AuthenticatorPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          blink.mojom.AuthenticatorPendingReceiver,
          opt_handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!blink.mojom.AuthenticatorPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !blink.mojom.PublicKeyCredentialCreationOptions } options
   * @return {Promise<{
        status: !blink.mojom.AuthenticatorStatus,
        credential: ?blink.mojom.MakeCredentialAuthenticatorResponse,
   *  }>}
   */

  makeCredential(
      options) {
    return this.proxy.sendMessage(
        0,
        blink.mojom.Authenticator_MakeCredential_ParamsSpec.$,
        blink.mojom.Authenticator_MakeCredential_ResponseParamsSpec.$,
        [
          options
        ]);
  }

  
  /**
   * @param { !blink.mojom.PublicKeyCredentialRequestOptions } options
   * @return {Promise<{
        status: !blink.mojom.AuthenticatorStatus,
        credential: ?blink.mojom.GetAssertionAuthenticatorResponse,
   *  }>}
   */

  getAssertion(
      options) {
    return this.proxy.sendMessage(
        1,
        blink.mojom.Authenticator_GetAssertion_ParamsSpec.$,
        blink.mojom.Authenticator_GetAssertion_ResponseParamsSpec.$,
        [
          options
        ]);
  }

  
  /**
   * @return {Promise<{
        available: !boolean,
   *  }>}
   */

  isUserVerifyingPlatformAuthenticatorAvailable() {
    return this.proxy.sendMessage(
        2,
        blink.mojom.Authenticator_IsUserVerifyingPlatformAuthenticatorAvailable_ParamsSpec.$,
        blink.mojom.Authenticator_IsUserVerifyingPlatformAuthenticatorAvailable_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   */

  cancel() {
    this.proxy.sendMessage(
        3,
        blink.mojom.Authenticator_Cancel_ParamsSpec.$,
        null,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the Authenticator
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
blink.mojom.AuthenticatorReceiver = class {
  /**
   * @param {!blink.mojom.AuthenticatorInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!blink.mojom.AuthenticatorRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        blink.mojom.AuthenticatorRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.AuthenticatorRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        blink.mojom.Authenticator_MakeCredential_ParamsSpec.$,
        blink.mojom.Authenticator_MakeCredential_ResponseParamsSpec.$,
        impl.makeCredential.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        blink.mojom.Authenticator_GetAssertion_ParamsSpec.$,
        blink.mojom.Authenticator_GetAssertion_ResponseParamsSpec.$,
        impl.getAssertion.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        blink.mojom.Authenticator_IsUserVerifyingPlatformAuthenticatorAvailable_ParamsSpec.$,
        blink.mojom.Authenticator_IsUserVerifyingPlatformAuthenticatorAvailable_ResponseParamsSpec.$,
        impl.isUserVerifyingPlatformAuthenticatorAvailable.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        blink.mojom.Authenticator_Cancel_ParamsSpec.$,
        null,
        impl.cancel.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
blink.mojom.Authenticator = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.Authenticator";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!blink.mojom.AuthenticatorRemote}
   * @export
   */
  static getRemote() {
    let remote = new blink.mojom.AuthenticatorRemote;
    Mojo.bindInterface(this.$interfaceName,
                       remote.$.bindNewPipeAndPassReceiver().handle);
    return remote;
  }
};


/**
 * An object which receives request messages for the Authenticator
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
blink.mojom.AuthenticatorCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      blink.mojom.AuthenticatorRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.AuthenticatorRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.makeCredential =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        blink.mojom.Authenticator_MakeCredential_ParamsSpec.$,
        blink.mojom.Authenticator_MakeCredential_ResponseParamsSpec.$,
        this.makeCredential.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getAssertion =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        blink.mojom.Authenticator_GetAssertion_ParamsSpec.$,
        blink.mojom.Authenticator_GetAssertion_ResponseParamsSpec.$,
        this.getAssertion.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.isUserVerifyingPlatformAuthenticatorAvailable =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        blink.mojom.Authenticator_IsUserVerifyingPlatformAuthenticatorAvailable_ParamsSpec.$,
        blink.mojom.Authenticator_IsUserVerifyingPlatformAuthenticatorAvailable_ResponseParamsSpec.$,
        this.isUserVerifyingPlatformAuthenticatorAvailable.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.cancel =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        blink.mojom.Authenticator_Cancel_ParamsSpec.$,
        null,
        this.cancel.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};



/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CommonCredentialInfoSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.MakeCredentialAuthenticatorResponseSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.GetAssertionAuthenticatorResponseSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.PublicKeyCredentialRpEntitySpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.PublicKeyCredentialUserEntitySpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.PublicKeyCredentialParametersSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CableAuthenticationSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.CableRegistrationSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.PublicKeyCredentialRequestOptionsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.AuthenticatorSelectionCriteriaSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.PublicKeyCredentialCreationOptionsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.PublicKeyCredentialDescriptorSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.Authenticator_MakeCredential_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.Authenticator_MakeCredential_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.Authenticator_GetAssertion_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.Authenticator_GetAssertion_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.Authenticator_IsUserVerifyingPlatformAuthenticatorAvailable_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.Authenticator_IsUserVerifyingPlatformAuthenticatorAvailable_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.Authenticator_Cancel_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    blink.mojom.CommonCredentialInfoSpec.$,
    'CommonCredentialInfo',
    32,
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'rawId', 8,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'clientDataJson', 16,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'authenticatorData', 24,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */),
    ]);







mojo.internal.Struct(
    blink.mojom.MakeCredentialAuthenticatorResponseSpec.$,
    'MakeCredentialAuthenticatorResponse',
    40,
    [
      mojo.internal.StructField(
        'info', 0,
        0,
        blink.mojom.CommonCredentialInfoSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'attestationObject', 8,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'transports', 16,
        0,
        mojo.internal.Array(blink.mojom.AuthenticatorTransportSpec.$, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'echoHmacCreateSecret', 24,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'hmacCreateSecret', 24,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'publicKeyDer', 32,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'publicKeyAlgo', 28,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
    ]);







mojo.internal.Struct(
    blink.mojom.GetAssertionAuthenticatorResponseSpec.$,
    'GetAssertionAuthenticatorResponse',
    32,
    [
      mojo.internal.StructField(
        'info', 0,
        0,
        blink.mojom.CommonCredentialInfoSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'signature', 8,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'userHandle', 16,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'echoAppidExtension', 24,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'appidExtension', 24,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ]);







mojo.internal.Struct(
    blink.mojom.PublicKeyCredentialRpEntitySpec.$,
    'PublicKeyCredentialRpEntity',
    24,
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'name', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'icon', 16,
        0,
        url.mojom.UrlSpec.$,
        null,
        true /* nullable */),
    ]);







mojo.internal.Struct(
    blink.mojom.PublicKeyCredentialUserEntitySpec.$,
    'PublicKeyCredentialUserEntity',
    32,
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'name', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'icon', 16,
        0,
        url.mojom.UrlSpec.$,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'displayName', 24,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ]);







mojo.internal.Struct(
    blink.mojom.PublicKeyCredentialParametersSpec.$,
    'PublicKeyCredentialParameters',
    8,
    [
      mojo.internal.StructField(
        'type', 0,
        0,
        blink.mojom.PublicKeyCredentialTypeSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'algorithmIdentifier', 4,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
    ]);







mojo.internal.Struct(
    blink.mojom.CableAuthenticationSpec.$,
    'CableAuthentication',
    32,
    [
      mojo.internal.StructField(
        'version', 0,
        0,
        mojo.internal.Uint8,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'clientEid', 8,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'authenticatorEid', 16,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'sessionPreKey', 24,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */),
    ]);







mojo.internal.Struct(
    blink.mojom.CableRegistrationSpec.$,
    'CableRegistration',
    16,
    [
      mojo.internal.StructField(
        'versions', 0,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'relyingPartyPublicKey', 8,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */),
    ]);







mojo.internal.Struct(
    blink.mojom.PublicKeyCredentialRequestOptionsSpec.$,
    'PublicKeyCredentialRequestOptions',
    56,
    [
      mojo.internal.StructField(
        'challenge', 0,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'timeout', 8,
        0,
        mojoBase.mojom.TimeDeltaSpec.$,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'relyingPartyId', 16,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'allowCredentials', 24,
        0,
        mojo.internal.Array(blink.mojom.PublicKeyCredentialDescriptorSpec.$, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'userVerification', 32,
        0,
        blink.mojom.UserVerificationRequirementSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'appid', 40,
        0,
        mojo.internal.String,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'cableAuthenticationData', 48,
        0,
        mojo.internal.Array(blink.mojom.CableAuthenticationSpec.$, false),
        null,
        false /* nullable */),
    ]);







mojo.internal.Struct(
    blink.mojom.AuthenticatorSelectionCriteriaSpec.$,
    'AuthenticatorSelectionCriteria',
    16,
    [
      mojo.internal.StructField(
        'authenticatorAttachment', 0,
        0,
        blink.mojom.AuthenticatorAttachmentSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'requireResidentKey', 4,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'userVerification', 8,
        0,
        blink.mojom.UserVerificationRequirementSpec.$,
        0,
        false /* nullable */),
    ]);







mojo.internal.Struct(
    blink.mojom.PublicKeyCredentialCreationOptionsSpec.$,
    'PublicKeyCredentialCreationOptions',
    88,
    [
      mojo.internal.StructField(
        'relyingParty', 0,
        0,
        blink.mojom.PublicKeyCredentialRpEntitySpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'user', 8,
        0,
        blink.mojom.PublicKeyCredentialUserEntitySpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'challenge', 16,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'publicKeyParameters', 24,
        0,
        mojo.internal.Array(blink.mojom.PublicKeyCredentialParametersSpec.$, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'timeout', 32,
        0,
        mojoBase.mojom.TimeDeltaSpec.$,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'excludeCredentials', 40,
        0,
        mojo.internal.Array(blink.mojom.PublicKeyCredentialDescriptorSpec.$, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'authenticatorSelection', 48,
        0,
        blink.mojom.AuthenticatorSelectionCriteriaSpec.$,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'attestation', 56,
        0,
        blink.mojom.AttestationConveyancePreferenceSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'cableRegistrationData', 64,
        0,
        blink.mojom.CableRegistrationSpec.$,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'hmacCreateSecret', 60,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'protectionPolicy', 72,
        0,
        blink.mojom.ProtectionPolicySpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'enforceProtectionPolicy', 60,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'appidExclude', 80,
        0,
        mojo.internal.String,
        null,
        true /* nullable */),
    ]);







mojo.internal.Struct(
    blink.mojom.PublicKeyCredentialDescriptorSpec.$,
    'PublicKeyCredentialDescriptor',
    24,
    [
      mojo.internal.StructField(
        'type', 0,
        0,
        blink.mojom.PublicKeyCredentialTypeSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'id', 8,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'transports', 16,
        0,
        mojo.internal.Array(blink.mojom.AuthenticatorTransportSpec.$, false),
        null,
        false /* nullable */),
    ]);







mojo.internal.Struct(
    blink.mojom.Authenticator_MakeCredential_ParamsSpec.$,
    'Authenticator_MakeCredential_Params',
    8,
    [
      mojo.internal.StructField(
        'options', 0,
        0,
        blink.mojom.PublicKeyCredentialCreationOptionsSpec.$,
        null,
        false /* nullable */),
    ]);







mojo.internal.Struct(
    blink.mojom.Authenticator_MakeCredential_ResponseParamsSpec.$,
    'Authenticator_MakeCredential_ResponseParams',
    16,
    [
      mojo.internal.StructField(
        'status', 0,
        0,
        blink.mojom.AuthenticatorStatusSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'credential', 8,
        0,
        blink.mojom.MakeCredentialAuthenticatorResponseSpec.$,
        null,
        true /* nullable */),
    ]);







mojo.internal.Struct(
    blink.mojom.Authenticator_GetAssertion_ParamsSpec.$,
    'Authenticator_GetAssertion_Params',
    8,
    [
      mojo.internal.StructField(
        'options', 0,
        0,
        blink.mojom.PublicKeyCredentialRequestOptionsSpec.$,
        null,
        false /* nullable */),
    ]);







mojo.internal.Struct(
    blink.mojom.Authenticator_GetAssertion_ResponseParamsSpec.$,
    'Authenticator_GetAssertion_ResponseParams',
    16,
    [
      mojo.internal.StructField(
        'status', 0,
        0,
        blink.mojom.AuthenticatorStatusSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'credential', 8,
        0,
        blink.mojom.GetAssertionAuthenticatorResponseSpec.$,
        null,
        true /* nullable */),
    ]);







mojo.internal.Struct(
    blink.mojom.Authenticator_IsUserVerifyingPlatformAuthenticatorAvailable_ParamsSpec.$,
    'Authenticator_IsUserVerifyingPlatformAuthenticatorAvailable_Params',
    0,
    [
    ]);







mojo.internal.Struct(
    blink.mojom.Authenticator_IsUserVerifyingPlatformAuthenticatorAvailable_ResponseParamsSpec.$,
    'Authenticator_IsUserVerifyingPlatformAuthenticatorAvailable_ResponseParams',
    8,
    [
      mojo.internal.StructField(
        'available', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ]);







mojo.internal.Struct(
    blink.mojom.Authenticator_Cancel_ParamsSpec.$,
    'Authenticator_Cancel_Params',
    0,
    [
    ]);






// third_party/blink/public/mojom/webauthn/authenticator.mojom.externs.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.



/** @enum {number} */
blink.mojom.AuthenticatorStatus = {};
blink.mojom.AuthenticatorStatus.SUCCESS;
blink.mojom.AuthenticatorStatus.PENDING_REQUEST;
blink.mojom.AuthenticatorStatus.NOT_ALLOWED_ERROR;
blink.mojom.AuthenticatorStatus.INVALID_DOMAIN;
blink.mojom.AuthenticatorStatus.INVALID_ICON_URL;
blink.mojom.AuthenticatorStatus.CREDENTIAL_EXCLUDED;
blink.mojom.AuthenticatorStatus.CREDENTIAL_NOT_RECOGNIZED;
blink.mojom.AuthenticatorStatus.NOT_IMPLEMENTED;
blink.mojom.AuthenticatorStatus.NOT_FOCUSED;
blink.mojom.AuthenticatorStatus.RESIDENT_CREDENTIALS_UNSUPPORTED;
blink.mojom.AuthenticatorStatus.USER_VERIFICATION_UNSUPPORTED;
blink.mojom.AuthenticatorStatus.ALGORITHM_UNSUPPORTED;
blink.mojom.AuthenticatorStatus.EMPTY_ALLOW_CREDENTIALS;
blink.mojom.AuthenticatorStatus.ANDROID_NOT_SUPPORTED_ERROR;
blink.mojom.AuthenticatorStatus.PROTECTION_POLICY_INCONSISTENT;
blink.mojom.AuthenticatorStatus.ABORT_ERROR;
blink.mojom.AuthenticatorStatus.OPAQUE_DOMAIN;
blink.mojom.AuthenticatorStatus.INVALID_PROTOCOL;
blink.mojom.AuthenticatorStatus.BAD_RELYING_PARTY_ID;
blink.mojom.AuthenticatorStatus.UNKNOWN_ERROR;
/** @enum {number} */
blink.mojom.AuthenticatorTransport = {};
blink.mojom.AuthenticatorTransport.USB;
blink.mojom.AuthenticatorTransport.NFC;
blink.mojom.AuthenticatorTransport.BLE;
blink.mojom.AuthenticatorTransport.CABLE;
blink.mojom.AuthenticatorTransport.INTERNAL;
/** @enum {number} */
blink.mojom.UserVerificationRequirement = {};
blink.mojom.UserVerificationRequirement.REQUIRED;
blink.mojom.UserVerificationRequirement.PREFERRED;
blink.mojom.UserVerificationRequirement.DISCOURAGED;
/** @enum {number} */
blink.mojom.AttestationConveyancePreference = {};
blink.mojom.AttestationConveyancePreference.NONE;
blink.mojom.AttestationConveyancePreference.INDIRECT;
blink.mojom.AttestationConveyancePreference.DIRECT;
blink.mojom.AttestationConveyancePreference.ENTERPRISE;
/** @enum {number} */
blink.mojom.AuthenticatorAttachment = {};
blink.mojom.AuthenticatorAttachment.NO_PREFERENCE;
blink.mojom.AuthenticatorAttachment.PLATFORM;
blink.mojom.AuthenticatorAttachment.CROSS_PLATFORM;
/** @enum {number} */
blink.mojom.ProtectionPolicy = {};
blink.mojom.ProtectionPolicy.UNSPECIFIED;
blink.mojom.ProtectionPolicy.NONE;
blink.mojom.ProtectionPolicy.UV_OR_CRED_ID_REQUIRED;
blink.mojom.ProtectionPolicy.UV_REQUIRED;
/** @enum {number} */
blink.mojom.PublicKeyCredentialType = {};
blink.mojom.PublicKeyCredentialType.PUBLIC_KEY;
goog.provide('blink.mojom.Authenticator');
goog.provide('blink.mojom.AuthenticatorImpl');
goog.provide('blink.mojom.AuthenticatorPtr');



/**
 * @const
 * @type { !mojo.Interface };
 */
blink.mojom.Authenticator;

/** @interface */
blink.mojom.AuthenticatorImpl = class {
  /**
   * @param { !blink.mojom.PublicKeyCredentialCreationOptions } options
   * @return {Promise}
   */
  makeCredential(options) {}
  /**
   * @param { !blink.mojom.PublicKeyCredentialRequestOptions } options
   * @return {Promise}
   */
  getAssertion(options) {}
  /**
   * @return {Promise}
   */
  isUserVerifyingPlatformAuthenticatorAvailable() {}
  /**
   */
  cancel() {}
};

/**
 * @implements { mojo.InterfacePtr }
 * @implements { blink.mojom.AuthenticatorImpl }
 */
blink.mojom.AuthenticatorPtr = class {
  /**
   * @param { !blink.mojom.PublicKeyCredentialCreationOptions } options
   * @return {Promise}
   */
  makeCredential(options) {}
  /**
   * @param { !blink.mojom.PublicKeyCredentialRequestOptions } options
   * @return {Promise}
   */
  getAssertion(options) {}
  /**
   * @return {Promise}
   */
  isUserVerifyingPlatformAuthenticatorAvailable() {}
  /**
   */
  cancel() {}
};

goog.provide('blink.mojom.CommonCredentialInfo');

blink.mojom.CommonCredentialInfo = class {
  constructor() {
    /** @type { !string } */
    this.id;
    /** @type { !Array<number> } */
    this.rawId;
    /** @type { !Array<number> } */
    this.clientDataJson;
    /** @type { !Array<number> } */
    this.authenticatorData;
  }
};

goog.provide('blink.mojom.MakeCredentialAuthenticatorResponse');

blink.mojom.MakeCredentialAuthenticatorResponse = class {
  constructor() {
    /** @type { !blink.mojom.CommonCredentialInfo } */
    this.info;
    /** @type { !Array<number> } */
    this.attestationObject;
    /** @type { !Array<blink.mojom.AuthenticatorTransport> } */
    this.transports;
    /** @type { !boolean } */
    this.echoHmacCreateSecret;
    /** @type { !boolean } */
    this.hmacCreateSecret;
    /** @type { !number } */
    this.publicKeyAlgo;
    /** @type { Array<number> } */
    this.publicKeyDer;
  }
};

goog.provide('blink.mojom.GetAssertionAuthenticatorResponse');

blink.mojom.GetAssertionAuthenticatorResponse = class {
  constructor() {
    /** @type { !blink.mojom.CommonCredentialInfo } */
    this.info;
    /** @type { !Array<number> } */
    this.signature;
    /** @type { Array<number> } */
    this.userHandle;
    /** @type { !boolean } */
    this.echoAppidExtension;
    /** @type { !boolean } */
    this.appidExtension;
  }
};

goog.provide('blink.mojom.PublicKeyCredentialRpEntity');

blink.mojom.PublicKeyCredentialRpEntity = class {
  constructor() {
    /** @type { !string } */
    this.id;
    /** @type { !string } */
    this.name;
    /** @type { url.mojom.Url } */
    this.icon;
  }
};

goog.provide('blink.mojom.PublicKeyCredentialUserEntity');

blink.mojom.PublicKeyCredentialUserEntity = class {
  constructor() {
    /** @type { !Array<number> } */
    this.id;
    /** @type { !string } */
    this.name;
    /** @type { url.mojom.Url } */
    this.icon;
    /** @type { !string } */
    this.displayName;
  }
};

goog.provide('blink.mojom.PublicKeyCredentialParameters');

blink.mojom.PublicKeyCredentialParameters = class {
  constructor() {
    /** @type { !blink.mojom.PublicKeyCredentialType } */
    this.type;
    /** @type { !number } */
    this.algorithmIdentifier;
  }
};

goog.provide('blink.mojom.CableAuthentication');

blink.mojom.CableAuthentication = class {
  constructor() {
    /** @type { !number } */
    this.version;
    /** @type { !Array<number> } */
    this.clientEid;
    /** @type { !Array<number> } */
    this.authenticatorEid;
    /** @type { !Array<number> } */
    this.sessionPreKey;
  }
};

goog.provide('blink.mojom.CableRegistration');

blink.mojom.CableRegistration = class {
  constructor() {
    /** @type { !Array<number> } */
    this.versions;
    /** @type { !Array<number> } */
    this.relyingPartyPublicKey;
  }
};

goog.provide('blink.mojom.PublicKeyCredentialRequestOptions');

blink.mojom.PublicKeyCredentialRequestOptions = class {
  constructor() {
    /** @type { !Array<number> } */
    this.challenge;
    /** @type { mojoBase.mojom.TimeDelta } */
    this.timeout;
    /** @type { !string } */
    this.relyingPartyId;
    /** @type { !Array<blink.mojom.PublicKeyCredentialDescriptor> } */
    this.allowCredentials;
    /** @type { !blink.mojom.UserVerificationRequirement } */
    this.userVerification;
    /** @type { string } */
    this.appid;
    /** @type { !Array<blink.mojom.CableAuthentication> } */
    this.cableAuthenticationData;
  }
};

goog.provide('blink.mojom.AuthenticatorSelectionCriteria');

blink.mojom.AuthenticatorSelectionCriteria = class {
  constructor() {
    /** @type { !blink.mojom.AuthenticatorAttachment } */
    this.authenticatorAttachment;
    /** @type { !boolean } */
    this.requireResidentKey;
    /** @type { !blink.mojom.UserVerificationRequirement } */
    this.userVerification;
  }
};

goog.provide('blink.mojom.PublicKeyCredentialCreationOptions');

blink.mojom.PublicKeyCredentialCreationOptions = class {
  constructor() {
    /** @type { !blink.mojom.PublicKeyCredentialRpEntity } */
    this.relyingParty;
    /** @type { !blink.mojom.PublicKeyCredentialUserEntity } */
    this.user;
    /** @type { !Array<number> } */
    this.challenge;
    /** @type { !Array<blink.mojom.PublicKeyCredentialParameters> } */
    this.publicKeyParameters;
    /** @type { mojoBase.mojom.TimeDelta } */
    this.timeout;
    /** @type { !Array<blink.mojom.PublicKeyCredentialDescriptor> } */
    this.excludeCredentials;
    /** @type { blink.mojom.AuthenticatorSelectionCriteria } */
    this.authenticatorSelection;
    /** @type { !blink.mojom.AttestationConveyancePreference } */
    this.attestation;
    /** @type { !boolean } */
    this.hmacCreateSecret;
    /** @type { !boolean } */
    this.enforceProtectionPolicy;
    /** @type { blink.mojom.CableRegistration } */
    this.cableRegistrationData;
    /** @type { !blink.mojom.ProtectionPolicy } */
    this.protectionPolicy;
    /** @type { string } */
    this.appidExclude;
  }
};

goog.provide('blink.mojom.PublicKeyCredentialDescriptor');

blink.mojom.PublicKeyCredentialDescriptor = class {
  constructor() {
    /** @type { !blink.mojom.PublicKeyCredentialType } */
    this.type;
    /** @type { !Array<number> } */
    this.id;
    /** @type { !Array<blink.mojom.AuthenticatorTransport> } */
    this.transports;
  }
};

goog.provide('blink.mojom.Authenticator_MakeCredential_Params');

blink.mojom.Authenticator_MakeCredential_Params = class {
  constructor() {
    /** @type { !blink.mojom.PublicKeyCredentialCreationOptions } */
    this.options;
  }
};

goog.provide('blink.mojom.Authenticator_MakeCredential_ResponseParams');

blink.mojom.Authenticator_MakeCredential_ResponseParams = class {
  constructor() {
    /** @type { !blink.mojom.AuthenticatorStatus } */
    this.status;
    /** @type { blink.mojom.MakeCredentialAuthenticatorResponse } */
    this.credential;
  }
};

goog.provide('blink.mojom.Authenticator_GetAssertion_Params');

blink.mojom.Authenticator_GetAssertion_Params = class {
  constructor() {
    /** @type { !blink.mojom.PublicKeyCredentialRequestOptions } */
    this.options;
  }
};

goog.provide('blink.mojom.Authenticator_GetAssertion_ResponseParams');

blink.mojom.Authenticator_GetAssertion_ResponseParams = class {
  constructor() {
    /** @type { !blink.mojom.AuthenticatorStatus } */
    this.status;
    /** @type { blink.mojom.GetAssertionAuthenticatorResponse } */
    this.credential;
  }
};

goog.provide('blink.mojom.Authenticator_IsUserVerifyingPlatformAuthenticatorAvailable_Params');

blink.mojom.Authenticator_IsUserVerifyingPlatformAuthenticatorAvailable_Params = class {
  constructor() {
  }
};

goog.provide('blink.mojom.Authenticator_IsUserVerifyingPlatformAuthenticatorAvailable_ResponseParams');

blink.mojom.Authenticator_IsUserVerifyingPlatformAuthenticatorAvailable_ResponseParams = class {
  constructor() {
    /** @type { !boolean } */
    this.available;
  }
};

goog.provide('blink.mojom.Authenticator_Cancel_Params');

blink.mojom.Authenticator_Cancel_Params = class {
  constructor() {
  }
};

// third_party/blink/public/mojom/usb/web_usb_service.mojom-lite-for-compile.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';

goog.require('mojo.internal');
goog.require('mojo.internal.interfaceSupport');

goog.require('device.mojom.UsbDeviceInfo');
goog.require('device.mojom.UsbDeviceManagerClient');






goog.provide('blink.mojom.WebUsbService');
goog.provide('blink.mojom.WebUsbServiceReceiver');
goog.provide('blink.mojom.WebUsbServiceCallbackRouter');
goog.provide('blink.mojom.WebUsbServiceInterface');
goog.provide('blink.mojom.WebUsbServiceRemote');
goog.provide('blink.mojom.WebUsbServicePendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
blink.mojom.WebUsbServicePendingReceiver = class {
  /** @param {!MojoHandle} handle */
  constructor(handle) {
    /** @public {!MojoHandle} */
    this.handle = handle;
  }
};

/** @interface */
blink.mojom.WebUsbServiceInterface = class {
  
  /**
   * @return {Promise<{
        results: !Array<!device.mojom.UsbDeviceInfo>,
   *  }>}
   */

  getDevices() {}
  
  /**
   * @param { !string } guid
   * @param { !device.mojom.UsbDevicePendingReceiver } deviceReceiver
   */

  getDevice(guid, deviceReceiver) {}
  
  /**
   * @param { !Array<!device.mojom.UsbDeviceFilter> } deviceFilters
   * @return {Promise<{
        result: ?device.mojom.UsbDeviceInfo,
   *  }>}
   */

  getPermission(deviceFilters) {}
  
  /**
   * @param { !Object } client
   */

  setClient(client) {}
};

/**
 * @export
 * @implements { blink.mojom.WebUsbServiceInterface }
 */
blink.mojom.WebUsbServiceRemote = class {
  /** @param {MojoHandle=} opt_handle */
  constructor(opt_handle) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!blink.mojom.WebUsbServicePendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          blink.mojom.WebUsbServicePendingReceiver,
          opt_handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!blink.mojom.WebUsbServicePendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @return {Promise<{
        results: !Array<!device.mojom.UsbDeviceInfo>,
   *  }>}
   */

  getDevices() {
    return this.proxy.sendMessage(
        0,
        blink.mojom.WebUsbService_GetDevices_ParamsSpec.$,
        blink.mojom.WebUsbService_GetDevices_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @param { !string } guid
   * @param { !device.mojom.UsbDevicePendingReceiver } deviceReceiver
   */

  getDevice(
      guid,
      deviceReceiver) {
    this.proxy.sendMessage(
        1,
        blink.mojom.WebUsbService_GetDevice_ParamsSpec.$,
        null,
        [
          guid,
          deviceReceiver
        ]);
  }

  
  /**
   * @param { !Array<!device.mojom.UsbDeviceFilter> } deviceFilters
   * @return {Promise<{
        result: ?device.mojom.UsbDeviceInfo,
   *  }>}
   */

  getPermission(
      deviceFilters) {
    return this.proxy.sendMessage(
        2,
        blink.mojom.WebUsbService_GetPermission_ParamsSpec.$,
        blink.mojom.WebUsbService_GetPermission_ResponseParamsSpec.$,
        [
          deviceFilters
        ]);
  }

  
  /**
   * @param { !Object } client
   */

  setClient(
      client) {
    this.proxy.sendMessage(
        3,
        blink.mojom.WebUsbService_SetClient_ParamsSpec.$,
        null,
        [
          client
        ]);
  }
};

/**
 * An object which receives request messages for the WebUsbService
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
blink.mojom.WebUsbServiceReceiver = class {
  /**
   * @param {!blink.mojom.WebUsbServiceInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!blink.mojom.WebUsbServiceRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        blink.mojom.WebUsbServiceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.WebUsbServiceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        blink.mojom.WebUsbService_GetDevices_ParamsSpec.$,
        blink.mojom.WebUsbService_GetDevices_ResponseParamsSpec.$,
        impl.getDevices.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        blink.mojom.WebUsbService_GetDevice_ParamsSpec.$,
        null,
        impl.getDevice.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        blink.mojom.WebUsbService_GetPermission_ParamsSpec.$,
        blink.mojom.WebUsbService_GetPermission_ResponseParamsSpec.$,
        impl.getPermission.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        blink.mojom.WebUsbService_SetClient_ParamsSpec.$,
        null,
        impl.setClient.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
blink.mojom.WebUsbService = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.WebUsbService";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!blink.mojom.WebUsbServiceRemote}
   * @export
   */
  static getRemote() {
    let remote = new blink.mojom.WebUsbServiceRemote;
    Mojo.bindInterface(this.$interfaceName,
                       remote.$.bindNewPipeAndPassReceiver().handle);
    return remote;
  }
};


/**
 * An object which receives request messages for the WebUsbService
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
blink.mojom.WebUsbServiceCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      blink.mojom.WebUsbServiceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.WebUsbServiceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getDevices =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        blink.mojom.WebUsbService_GetDevices_ParamsSpec.$,
        blink.mojom.WebUsbService_GetDevices_ResponseParamsSpec.$,
        this.getDevices.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getDevice =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        blink.mojom.WebUsbService_GetDevice_ParamsSpec.$,
        null,
        this.getDevice.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getPermission =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        blink.mojom.WebUsbService_GetPermission_ParamsSpec.$,
        blink.mojom.WebUsbService_GetPermission_ResponseParamsSpec.$,
        this.getPermission.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.setClient =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        blink.mojom.WebUsbService_SetClient_ParamsSpec.$,
        null,
        this.setClient.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('blink.mojom.WebUsbService_GetDevices_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.WebUsbService_GetDevices_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.WebUsbService_GetDevices_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.WebUsbService_GetDevices_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.WebUsbService_GetDevice_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.WebUsbService_GetDevice_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.WebUsbService_GetPermission_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.WebUsbService_GetPermission_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.WebUsbService_GetPermission_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.WebUsbService_GetPermission_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.WebUsbService_SetClient_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.WebUsbService_SetClient_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    blink.mojom.WebUsbService_GetDevices_ParamsSpec.$,
    'WebUsbService_GetDevices_Params',
    0,
    [
    ]);



goog.provide('blink.mojom.WebUsbService_GetDevices_Params');

/** @record */
blink.mojom.WebUsbService_GetDevices_Params = class {
  constructor() {
  }
};



mojo.internal.Struct(
    blink.mojom.WebUsbService_GetDevices_ResponseParamsSpec.$,
    'WebUsbService_GetDevices_ResponseParams',
    8,
    [
      mojo.internal.StructField(
        'results', 0,
        0,
        mojo.internal.Array(device.mojom.UsbDeviceInfoSpec.$, false),
        null,
        false /* nullable */),
    ]);



goog.provide('blink.mojom.WebUsbService_GetDevices_ResponseParams');

/** @record */
blink.mojom.WebUsbService_GetDevices_ResponseParams = class {
  constructor() {
    /** @type { !Array<!device.mojom.UsbDeviceInfo> } */
    this.results;
  }
};



mojo.internal.Struct(
    blink.mojom.WebUsbService_GetDevice_ParamsSpec.$,
    'WebUsbService_GetDevice_Params',
    16,
    [
      mojo.internal.StructField(
        'guid', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'deviceReceiver', 8,
        0,
        mojo.internal.InterfaceRequest(device.mojom.UsbDevicePendingReceiver),
        null,
        false /* nullable */),
    ]);



goog.provide('blink.mojom.WebUsbService_GetDevice_Params');

/** @record */
blink.mojom.WebUsbService_GetDevice_Params = class {
  constructor() {
    /** @type { !string } */
    this.guid;
    /** @type { !device.mojom.UsbDevicePendingReceiver } */
    this.deviceReceiver;
  }
};



mojo.internal.Struct(
    blink.mojom.WebUsbService_GetPermission_ParamsSpec.$,
    'WebUsbService_GetPermission_Params',
    8,
    [
      mojo.internal.StructField(
        'deviceFilters', 0,
        0,
        mojo.internal.Array(device.mojom.UsbDeviceFilterSpec.$, false),
        null,
        false /* nullable */),
    ]);



goog.provide('blink.mojom.WebUsbService_GetPermission_Params');

/** @record */
blink.mojom.WebUsbService_GetPermission_Params = class {
  constructor() {
    /** @type { !Array<!device.mojom.UsbDeviceFilter> } */
    this.deviceFilters;
  }
};



mojo.internal.Struct(
    blink.mojom.WebUsbService_GetPermission_ResponseParamsSpec.$,
    'WebUsbService_GetPermission_ResponseParams',
    8,
    [
      mojo.internal.StructField(
        'result', 0,
        0,
        device.mojom.UsbDeviceInfoSpec.$,
        null,
        true /* nullable */),
    ]);



goog.provide('blink.mojom.WebUsbService_GetPermission_ResponseParams');

/** @record */
blink.mojom.WebUsbService_GetPermission_ResponseParams = class {
  constructor() {
    /** @type { (device.mojom.UsbDeviceInfo|undefined) } */
    this.result;
  }
};



mojo.internal.Struct(
    blink.mojom.WebUsbService_SetClient_ParamsSpec.$,
    'WebUsbService_SetClient_Params',
    8,
    [
      mojo.internal.StructField(
        'client', 0,
        0,
        mojo.internal.AssociatedInterfaceProxy(device.mojom.UsbDeviceManagerClientRemote),
        null,
        false /* nullable */),
    ]);



goog.provide('blink.mojom.WebUsbService_SetClient_Params');

/** @record */
blink.mojom.WebUsbService_SetClient_Params = class {
  constructor() {
    /** @type { !Object } */
    this.client;
  }
};


// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/perfetto/trace/profiling/smaps.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace perfetto {
namespace protos {
class SmapsEntry;
class SmapsEntryDefaultTypeInternal;
extern SmapsEntryDefaultTypeInternal _SmapsEntry_default_instance_;
class SmapsPacket;
class SmapsPacketDefaultTypeInternal;
extern SmapsPacketDefaultTypeInternal _SmapsPacket_default_instance_;
}  // namespace protos
}  // namespace perfetto
PROTOBUF_NAMESPACE_OPEN
template<> ::perfetto::protos::SmapsEntry* Arena::CreateMaybeMessage<::perfetto::protos::SmapsEntry>(Arena*);
template<> ::perfetto::protos::SmapsPacket* Arena::CreateMaybeMessage<::perfetto::protos::SmapsPacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace perfetto {
namespace protos {

// ===================================================================

class SmapsEntry :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SmapsEntry) */ {
 public:
  SmapsEntry();
  virtual ~SmapsEntry();

  SmapsEntry(const SmapsEntry& from);
  SmapsEntry(SmapsEntry&& from) noexcept
    : SmapsEntry() {
    *this = ::std::move(from);
  }

  inline SmapsEntry& operator=(const SmapsEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmapsEntry& operator=(SmapsEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SmapsEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SmapsEntry* internal_default_instance() {
    return reinterpret_cast<const SmapsEntry*>(
               &_SmapsEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SmapsEntry& a, SmapsEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(SmapsEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SmapsEntry* New() const final {
    return CreateMaybeMessage<SmapsEntry>(nullptr);
  }

  SmapsEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SmapsEntry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SmapsEntry& from);
  void MergeFrom(const SmapsEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SmapsEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SmapsEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kSizeKbFieldNumber = 2,
    kPrivateDirtyKbFieldNumber = 3,
    kSwapKbFieldNumber = 4,
  };
  // optional string path = 1;
  bool has_path() const;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);

  // optional uint64 size_kb = 2;
  bool has_size_kb() const;
  void clear_size_kb();
  ::PROTOBUF_NAMESPACE_ID::uint64 size_kb() const;
  void set_size_kb(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 private_dirty_kb = 3;
  bool has_private_dirty_kb() const;
  void clear_private_dirty_kb();
  ::PROTOBUF_NAMESPACE_ID::uint64 private_dirty_kb() const;
  void set_private_dirty_kb(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 swap_kb = 4;
  bool has_swap_kb() const;
  void clear_swap_kb();
  ::PROTOBUF_NAMESPACE_ID::uint64 swap_kb() const;
  void set_swap_kb(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.SmapsEntry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_kb_;
  ::PROTOBUF_NAMESPACE_ID::uint64 private_dirty_kb_;
  ::PROTOBUF_NAMESPACE_ID::uint64 swap_kb_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto;
};
// -------------------------------------------------------------------

class SmapsPacket :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:perfetto.protos.SmapsPacket) */ {
 public:
  SmapsPacket();
  virtual ~SmapsPacket();

  SmapsPacket(const SmapsPacket& from);
  SmapsPacket(SmapsPacket&& from) noexcept
    : SmapsPacket() {
    *this = ::std::move(from);
  }

  inline SmapsPacket& operator=(const SmapsPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmapsPacket& operator=(SmapsPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SmapsPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SmapsPacket* internal_default_instance() {
    return reinterpret_cast<const SmapsPacket*>(
               &_SmapsPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SmapsPacket& a, SmapsPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(SmapsPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SmapsPacket* New() const final {
    return CreateMaybeMessage<SmapsPacket>(nullptr);
  }

  SmapsPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SmapsPacket>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SmapsPacket& from);
  void MergeFrom(const SmapsPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SmapsPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "perfetto.protos.SmapsPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 2,
    kPidFieldNumber = 1,
  };
  // repeated .perfetto.protos.SmapsEntry entries = 2;
  int entries_size() const;
  void clear_entries();
  ::perfetto::protos::SmapsEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SmapsEntry >*
      mutable_entries();
  const ::perfetto::protos::SmapsEntry& entries(int index) const;
  ::perfetto::protos::SmapsEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SmapsEntry >&
      entries() const;

  // optional uint32 pid = 1;
  bool has_pid() const;
  void clear_pid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pid() const;
  void set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:perfetto.protos.SmapsPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SmapsEntry > entries_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pid_;
  friend struct ::TableStruct_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SmapsEntry

// optional string path = 1;
inline bool SmapsEntry::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SmapsEntry::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SmapsEntry::path() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmapsEntry.path)
  return path_.GetNoArena();
}
inline void SmapsEntry::set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perfetto.protos.SmapsEntry.path)
}
inline void SmapsEntry::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:perfetto.protos.SmapsEntry.path)
}
inline void SmapsEntry::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perfetto.protos.SmapsEntry.path)
}
inline void SmapsEntry::set_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perfetto.protos.SmapsEntry.path)
}
inline std::string* SmapsEntry::mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SmapsEntry.path)
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SmapsEntry::release_path() {
  // @@protoc_insertion_point(field_release:perfetto.protos.SmapsEntry.path)
  if (!has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SmapsEntry::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:perfetto.protos.SmapsEntry.path)
}

// optional uint64 size_kb = 2;
inline bool SmapsEntry::has_size_kb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SmapsEntry::clear_size_kb() {
  size_kb_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SmapsEntry::size_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmapsEntry.size_kb)
  return size_kb_;
}
inline void SmapsEntry::set_size_kb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  size_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmapsEntry.size_kb)
}

// optional uint64 private_dirty_kb = 3;
inline bool SmapsEntry::has_private_dirty_kb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SmapsEntry::clear_private_dirty_kb() {
  private_dirty_kb_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SmapsEntry::private_dirty_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmapsEntry.private_dirty_kb)
  return private_dirty_kb_;
}
inline void SmapsEntry::set_private_dirty_kb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  private_dirty_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmapsEntry.private_dirty_kb)
}

// optional uint64 swap_kb = 4;
inline bool SmapsEntry::has_swap_kb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SmapsEntry::clear_swap_kb() {
  swap_kb_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SmapsEntry::swap_kb() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmapsEntry.swap_kb)
  return swap_kb_;
}
inline void SmapsEntry::set_swap_kb(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  swap_kb_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmapsEntry.swap_kb)
}

// -------------------------------------------------------------------

// SmapsPacket

// optional uint32 pid = 1;
inline bool SmapsPacket::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SmapsPacket::clear_pid() {
  pid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SmapsPacket::pid() const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmapsPacket.pid)
  return pid_;
}
inline void SmapsPacket::set_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  pid_ = value;
  // @@protoc_insertion_point(field_set:perfetto.protos.SmapsPacket.pid)
}

// repeated .perfetto.protos.SmapsEntry entries = 2;
inline int SmapsPacket::entries_size() const {
  return entries_.size();
}
inline void SmapsPacket::clear_entries() {
  entries_.Clear();
}
inline ::perfetto::protos::SmapsEntry* SmapsPacket::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:perfetto.protos.SmapsPacket.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SmapsEntry >*
SmapsPacket::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:perfetto.protos.SmapsPacket.entries)
  return &entries_;
}
inline const ::perfetto::protos::SmapsEntry& SmapsPacket::entries(int index) const {
  // @@protoc_insertion_point(field_get:perfetto.protos.SmapsPacket.entries)
  return entries_.Get(index);
}
inline ::perfetto::protos::SmapsEntry* SmapsPacket::add_entries() {
  // @@protoc_insertion_point(field_add:perfetto.protos.SmapsPacket.entries)
  return entries_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::perfetto::protos::SmapsEntry >&
SmapsPacket::entries() const {
  // @@protoc_insertion_point(field_list:perfetto.protos.SmapsPacket.entries)
  return entries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace perfetto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fperfetto_2ftrace_2fprofiling_2fsmaps_2eproto

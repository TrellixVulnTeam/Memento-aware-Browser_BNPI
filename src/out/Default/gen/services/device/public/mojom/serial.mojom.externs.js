// services/device/public/mojom/serial.mojom.externs.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.



/** @enum {number} */
device.mojom.SerialSendError = {};
device.mojom.SerialSendError.NONE;
device.mojom.SerialSendError.DISCONNECTED;
device.mojom.SerialSendError.SYSTEM_ERROR;
/** @enum {number} */
device.mojom.SerialReceiveError = {};
device.mojom.SerialReceiveError.NONE;
device.mojom.SerialReceiveError.DISCONNECTED;
device.mojom.SerialReceiveError.DEVICE_LOST;
device.mojom.SerialReceiveError.BREAK;
device.mojom.SerialReceiveError.FRAME_ERROR;
device.mojom.SerialReceiveError.OVERRUN;
device.mojom.SerialReceiveError.BUFFER_OVERFLOW;
device.mojom.SerialReceiveError.PARITY_ERROR;
device.mojom.SerialReceiveError.SYSTEM_ERROR;
/** @enum {number} */
device.mojom.SerialDataBits = {};
device.mojom.SerialDataBits.NONE;
device.mojom.SerialDataBits.SEVEN;
device.mojom.SerialDataBits.EIGHT;
/** @enum {number} */
device.mojom.SerialParityBit = {};
device.mojom.SerialParityBit.NONE;
device.mojom.SerialParityBit.NO_PARITY;
device.mojom.SerialParityBit.ODD;
device.mojom.SerialParityBit.EVEN;
/** @enum {number} */
device.mojom.SerialStopBits = {};
device.mojom.SerialStopBits.NONE;
device.mojom.SerialStopBits.ONE;
device.mojom.SerialStopBits.TWO;
goog.provide('device.mojom.SerialPortManager');
goog.provide('device.mojom.SerialPortManagerImpl');
goog.provide('device.mojom.SerialPortManagerPtr');



/**
 * @const
 * @type { !mojo.Interface };
 */
device.mojom.SerialPortManager;

/** @interface */
device.mojom.SerialPortManagerImpl = class {
  /**
   * @param { !device.mojom.SerialPortManagerClientPtr } client
   */
  setClient(client) {}
  /**
   * @return {Promise}
   */
  getDevices() {}
  /**
   * @param { !mojoBase.mojom.UnguessableToken } token
   * @param { !boolean } useAlternatePath
   * @param { !mojo.InterfaceRequest } portReceiver
   * @param { device.mojom.SerialPortConnectionWatcherPtr } watcher
   */
  getPort(token, useAlternatePath, portReceiver, watcher) {}
};

/**
 * @implements { mojo.InterfacePtr }
 * @implements { device.mojom.SerialPortManagerImpl }
 */
device.mojom.SerialPortManagerPtr = class {
  /**
   * @param { !device.mojom.SerialPortManagerClientPtr } client
   */
  setClient(client) {}
  /**
   * @return {Promise}
   */
  getDevices() {}
  /**
   * @param { !mojoBase.mojom.UnguessableToken } token
   * @param { !boolean } useAlternatePath
   * @param { !mojo.InterfaceRequest } portReceiver
   * @param { device.mojom.SerialPortConnectionWatcherPtr } watcher
   */
  getPort(token, useAlternatePath, portReceiver, watcher) {}
};

goog.provide('device.mojom.SerialPortManagerClient');
goog.provide('device.mojom.SerialPortManagerClientImpl');
goog.provide('device.mojom.SerialPortManagerClientPtr');



/**
 * @const
 * @type { !mojo.Interface };
 */
device.mojom.SerialPortManagerClient;

/** @interface */
device.mojom.SerialPortManagerClientImpl = class {
  /**
   * @param { !device.mojom.SerialPortInfo } portInfo
   */
  onPortAdded(portInfo) {}
  /**
   * @param { !device.mojom.SerialPortInfo } portInfo
   */
  onPortRemoved(portInfo) {}
};

/**
 * @implements { mojo.InterfacePtr }
 * @implements { device.mojom.SerialPortManagerClientImpl }
 */
device.mojom.SerialPortManagerClientPtr = class {
  /**
   * @param { !device.mojom.SerialPortInfo } portInfo
   */
  onPortAdded(portInfo) {}
  /**
   * @param { !device.mojom.SerialPortInfo } portInfo
   */
  onPortRemoved(portInfo) {}
};

goog.provide('device.mojom.SerialPort');
goog.provide('device.mojom.SerialPortImpl');
goog.provide('device.mojom.SerialPortPtr');



/**
 * @const
 * @type { !mojo.Interface };
 */
device.mojom.SerialPort;

/** @interface */
device.mojom.SerialPortImpl = class {
  /**
   * @param { !device.mojom.SerialConnectionOptions } options
   * @param { !MojoHandle } inStream
   * @param { !MojoHandle } outStream
   * @param { !device.mojom.SerialPortClientPtr } client
   * @return {Promise}
   */
  open(options, inStream, outStream, client) {}
  /**
   * @param { !MojoHandle } consumer
   */
  clearSendError(consumer) {}
  /**
   * @param { !MojoHandle } producer
   */
  clearReadError(producer) {}
  /**
   * @return {Promise}
   */
  flush() {}
  /**
   * @return {Promise}
   */
  getControlSignals() {}
  /**
   * @param { !device.mojom.SerialHostControlSignals } signals
   * @return {Promise}
   */
  setControlSignals(signals) {}
  /**
   * @param { !device.mojom.SerialConnectionOptions } options
   * @return {Promise}
   */
  configurePort(options) {}
  /**
   * @return {Promise}
   */
  getPortInfo() {}
  /**
   * @return {Promise}
   */
  close() {}
};

/**
 * @implements { mojo.InterfacePtr }
 * @implements { device.mojom.SerialPortImpl }
 */
device.mojom.SerialPortPtr = class {
  /**
   * @param { !device.mojom.SerialConnectionOptions } options
   * @param { !MojoHandle } inStream
   * @param { !MojoHandle } outStream
   * @param { !device.mojom.SerialPortClientPtr } client
   * @return {Promise}
   */
  open(options, inStream, outStream, client) {}
  /**
   * @param { !MojoHandle } consumer
   */
  clearSendError(consumer) {}
  /**
   * @param { !MojoHandle } producer
   */
  clearReadError(producer) {}
  /**
   * @return {Promise}
   */
  flush() {}
  /**
   * @return {Promise}
   */
  getControlSignals() {}
  /**
   * @param { !device.mojom.SerialHostControlSignals } signals
   * @return {Promise}
   */
  setControlSignals(signals) {}
  /**
   * @param { !device.mojom.SerialConnectionOptions } options
   * @return {Promise}
   */
  configurePort(options) {}
  /**
   * @return {Promise}
   */
  getPortInfo() {}
  /**
   * @return {Promise}
   */
  close() {}
};

goog.provide('device.mojom.SerialPortClient');
goog.provide('device.mojom.SerialPortClientImpl');
goog.provide('device.mojom.SerialPortClientPtr');



/**
 * @const
 * @type { !mojo.Interface };
 */
device.mojom.SerialPortClient;

/** @interface */
device.mojom.SerialPortClientImpl = class {
  /**
   * @param { !device.mojom.SerialReceiveError } error
   */
  onReadError(error) {}
  /**
   * @param { !device.mojom.SerialSendError } error
   */
  onSendError(error) {}
};

/**
 * @implements { mojo.InterfacePtr }
 * @implements { device.mojom.SerialPortClientImpl }
 */
device.mojom.SerialPortClientPtr = class {
  /**
   * @param { !device.mojom.SerialReceiveError } error
   */
  onReadError(error) {}
  /**
   * @param { !device.mojom.SerialSendError } error
   */
  onSendError(error) {}
};

goog.provide('device.mojom.SerialPortConnectionWatcher');
goog.provide('device.mojom.SerialPortConnectionWatcherImpl');
goog.provide('device.mojom.SerialPortConnectionWatcherPtr');



/**
 * @const
 * @type { !mojo.Interface };
 */
device.mojom.SerialPortConnectionWatcher;

/** @interface */
device.mojom.SerialPortConnectionWatcherImpl = class {
};

/**
 * @implements { mojo.InterfacePtr }
 * @implements { device.mojom.SerialPortConnectionWatcherImpl }
 */
device.mojom.SerialPortConnectionWatcherPtr = class {
};

goog.provide('device.mojom.SerialPortInfo');

device.mojom.SerialPortInfo = class {
  constructor() {
    /** @type { !mojoBase.mojom.UnguessableToken } */
    this.token;
    /** @type { string } */
    this.persistentId;
    /** @type { !mojoBase.mojom.FilePath } */
    this.path;
    /** @type { !number } */
    this.vendorId;
    /** @type { !boolean } */
    this.hasVendorId;
    /** @type { !boolean } */
    this.hasProductId;
    /** @type { !number } */
    this.productId;
    /** @type { string } */
    this.displayName;
  }
};

goog.provide('device.mojom.SerialConnectionOptions');

device.mojom.SerialConnectionOptions = class {
  constructor() {
    /** @type { !number } */
    this.bitrate;
    /** @type { !device.mojom.SerialDataBits } */
    this.dataBits;
    /** @type { !device.mojom.SerialParityBit } */
    this.parityBit;
    /** @type { !device.mojom.SerialStopBits } */
    this.stopBits;
    /** @type { !boolean } */
    this.ctsFlowControl;
    /** @type { !boolean } */
    this.hasCtsFlowControl;
  }
};

goog.provide('device.mojom.SerialConnectionInfo');

device.mojom.SerialConnectionInfo = class {
  constructor() {
    /** @type { !number } */
    this.bitrate;
    /** @type { !device.mojom.SerialDataBits } */
    this.dataBits;
    /** @type { !device.mojom.SerialParityBit } */
    this.parityBit;
    /** @type { !device.mojom.SerialStopBits } */
    this.stopBits;
    /** @type { !boolean } */
    this.ctsFlowControl;
  }
};

goog.provide('device.mojom.SerialHostControlSignals');

device.mojom.SerialHostControlSignals = class {
  constructor() {
    /** @type { !boolean } */
    this.dtr;
    /** @type { !boolean } */
    this.hasDtr;
    /** @type { !boolean } */
    this.rts;
    /** @type { !boolean } */
    this.hasRts;
    /** @type { !boolean } */
    this.brk;
    /** @type { !boolean } */
    this.hasBrk;
  }
};

goog.provide('device.mojom.SerialPortControlSignals');

device.mojom.SerialPortControlSignals = class {
  constructor() {
    /** @type { !boolean } */
    this.dcd;
    /** @type { !boolean } */
    this.cts;
    /** @type { !boolean } */
    this.ri;
    /** @type { !boolean } */
    this.dsr;
  }
};

goog.provide('device.mojom.SerialPortManager_SetClient_Params');

device.mojom.SerialPortManager_SetClient_Params = class {
  constructor() {
    /** @type { !device.mojom.SerialPortManagerClientPtr } */
    this.client;
  }
};

goog.provide('device.mojom.SerialPortManager_GetDevices_Params');

device.mojom.SerialPortManager_GetDevices_Params = class {
  constructor() {
  }
};

goog.provide('device.mojom.SerialPortManager_GetDevices_ResponseParams');

device.mojom.SerialPortManager_GetDevices_ResponseParams = class {
  constructor() {
    /** @type { !Array<device.mojom.SerialPortInfo> } */
    this.devices;
  }
};

goog.provide('device.mojom.SerialPortManager_GetPort_Params');

device.mojom.SerialPortManager_GetPort_Params = class {
  constructor() {
    /** @type { !mojoBase.mojom.UnguessableToken } */
    this.token;
    /** @type { !boolean } */
    this.useAlternatePath;
    /** @type { !mojo.InterfaceRequest } */
    this.portReceiver;
    /** @type { device.mojom.SerialPortConnectionWatcherPtr } */
    this.watcher;
  }
};

goog.provide('device.mojom.SerialPortManagerClient_OnPortAdded_Params');

device.mojom.SerialPortManagerClient_OnPortAdded_Params = class {
  constructor() {
    /** @type { !device.mojom.SerialPortInfo } */
    this.portInfo;
  }
};

goog.provide('device.mojom.SerialPortManagerClient_OnPortRemoved_Params');

device.mojom.SerialPortManagerClient_OnPortRemoved_Params = class {
  constructor() {
    /** @type { !device.mojom.SerialPortInfo } */
    this.portInfo;
  }
};

goog.provide('device.mojom.SerialPort_Open_Params');

device.mojom.SerialPort_Open_Params = class {
  constructor() {
    /** @type { !device.mojom.SerialConnectionOptions } */
    this.options;
    /** @type { !MojoHandle } */
    this.inStream;
    /** @type { !MojoHandle } */
    this.outStream;
    /** @type { !device.mojom.SerialPortClientPtr } */
    this.client;
  }
};

goog.provide('device.mojom.SerialPort_Open_ResponseParams');

device.mojom.SerialPort_Open_ResponseParams = class {
  constructor() {
    /** @type { !boolean } */
    this.success;
  }
};

goog.provide('device.mojom.SerialPort_ClearSendError_Params');

device.mojom.SerialPort_ClearSendError_Params = class {
  constructor() {
    /** @type { !MojoHandle } */
    this.consumer;
  }
};

goog.provide('device.mojom.SerialPort_ClearReadError_Params');

device.mojom.SerialPort_ClearReadError_Params = class {
  constructor() {
    /** @type { !MojoHandle } */
    this.producer;
  }
};

goog.provide('device.mojom.SerialPort_Flush_Params');

device.mojom.SerialPort_Flush_Params = class {
  constructor() {
  }
};

goog.provide('device.mojom.SerialPort_Flush_ResponseParams');

device.mojom.SerialPort_Flush_ResponseParams = class {
  constructor() {
    /** @type { !boolean } */
    this.success;
  }
};

goog.provide('device.mojom.SerialPort_GetControlSignals_Params');

device.mojom.SerialPort_GetControlSignals_Params = class {
  constructor() {
  }
};

goog.provide('device.mojom.SerialPort_GetControlSignals_ResponseParams');

device.mojom.SerialPort_GetControlSignals_ResponseParams = class {
  constructor() {
    /** @type { !device.mojom.SerialPortControlSignals } */
    this.signals;
  }
};

goog.provide('device.mojom.SerialPort_SetControlSignals_Params');

device.mojom.SerialPort_SetControlSignals_Params = class {
  constructor() {
    /** @type { !device.mojom.SerialHostControlSignals } */
    this.signals;
  }
};

goog.provide('device.mojom.SerialPort_SetControlSignals_ResponseParams');

device.mojom.SerialPort_SetControlSignals_ResponseParams = class {
  constructor() {
    /** @type { !boolean } */
    this.success;
  }
};

goog.provide('device.mojom.SerialPort_ConfigurePort_Params');

device.mojom.SerialPort_ConfigurePort_Params = class {
  constructor() {
    /** @type { !device.mojom.SerialConnectionOptions } */
    this.options;
  }
};

goog.provide('device.mojom.SerialPort_ConfigurePort_ResponseParams');

device.mojom.SerialPort_ConfigurePort_ResponseParams = class {
  constructor() {
    /** @type { !boolean } */
    this.success;
  }
};

goog.provide('device.mojom.SerialPort_GetPortInfo_Params');

device.mojom.SerialPort_GetPortInfo_Params = class {
  constructor() {
  }
};

goog.provide('device.mojom.SerialPort_GetPortInfo_ResponseParams');

device.mojom.SerialPort_GetPortInfo_ResponseParams = class {
  constructor() {
    /** @type { !device.mojom.SerialConnectionInfo } */
    this.info;
  }
};

goog.provide('device.mojom.SerialPort_Close_Params');

device.mojom.SerialPort_Close_Params = class {
  constructor() {
  }
};

goog.provide('device.mojom.SerialPort_Close_ResponseParams');

device.mojom.SerialPort_Close_ResponseParams = class {
  constructor() {
  }
};

goog.provide('device.mojom.SerialPortClient_OnReadError_Params');

device.mojom.SerialPortClient_OnReadError_Params = class {
  constructor() {
    /** @type { !device.mojom.SerialReceiveError } */
    this.error;
  }
};

goog.provide('device.mojom.SerialPortClient_OnSendError_Params');

device.mojom.SerialPortClient_OnSendError_Params = class {
  constructor() {
    /** @type { !device.mojom.SerialSendError } */
    this.error;
  }
};

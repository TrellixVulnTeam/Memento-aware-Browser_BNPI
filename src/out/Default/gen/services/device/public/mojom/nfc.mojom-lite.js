// services/device/public/mojom/nfc.mojom-lite.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';


mojo.internal.exportModule('device.mojom');





/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
device.mojom.NDEFErrorTypeSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
device.mojom.NDEFErrorType = {
  
  NOT_ALLOWED: 0,
  NOT_SUPPORTED: 1,
  NOT_READABLE: 2,
  NOT_FOUND: 3,
  INVALID_MESSAGE: 4,
  OPERATION_CANCELLED: 5,
  CANNOT_CANCEL: 6,
  IO_ERROR: 7,
  MIN_VALUE: 0,
  MAX_VALUE: 7,
};


/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
device.mojom.NDEFRecordTypeCategorySpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
device.mojom.NDEFRecordTypeCategory = {
  
  kStandardized: 0,
  kExternal: 1,
  kLocal: 2,
  MIN_VALUE: 0,
  MAX_VALUE: 2,
};





/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
device.mojom.NFCPendingReceiver = class {
  /** @param {!MojoHandle} handle */
  constructor(handle) {
    /** @public {!MojoHandle} */
    this.handle = handle;
  }
};



/**
 * @export
 * @implements { device.mojom.NFCInterface }
 */
device.mojom.NFCRemote = class {
  /** @param {MojoHandle=} opt_handle */
  constructor(opt_handle) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!device.mojom.NFCPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          device.mojom.NFCPendingReceiver,
          opt_handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!device.mojom.NFCPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !device.mojom.NFCClientRemote } client
   */

  setClient(
      client) {
    this.proxy.sendMessage(
        675052752,
        device.mojom.NFC_SetClient_ParamsSpec.$,
        null,
        [
          client
        ]);
  }

  
  /**
   * @param { !device.mojom.NDEFMessage } message
   * @param { ?device.mojom.NDEFWriteOptions } options
   * @return {Promise<{
        error: ?device.mojom.NDEFError,
   *  }>}
   */

  push(
      message,
      options) {
    return this.proxy.sendMessage(
        884436015,
        device.mojom.NFC_Push_ParamsSpec.$,
        device.mojom.NFC_Push_ResponseParamsSpec.$,
        [
          message,
          options
        ]);
  }

  
  /**
   * @return {Promise<{
        error: ?device.mojom.NDEFError,
   *  }>}
   */

  cancelPush() {
    return this.proxy.sendMessage(
        1223948227,
        device.mojom.NFC_CancelPush_ParamsSpec.$,
        device.mojom.NFC_CancelPush_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @param { !device.mojom.NDEFScanOptions } options
   * @param { !number } id
   * @return {Promise<{
        error: ?device.mojom.NDEFError,
   *  }>}
   */

  watch(
      options,
      id) {
    return this.proxy.sendMessage(
        1905357176,
        device.mojom.NFC_Watch_ParamsSpec.$,
        device.mojom.NFC_Watch_ResponseParamsSpec.$,
        [
          options,
          id
        ]);
  }

  
  /**
   * @param { !number } id
   * @return {Promise<{
        error: ?device.mojom.NDEFError,
   *  }>}
   */

  cancelWatch(
      id) {
    return this.proxy.sendMessage(
        173070384,
        device.mojom.NFC_CancelWatch_ParamsSpec.$,
        device.mojom.NFC_CancelWatch_ResponseParamsSpec.$,
        [
          id
        ]);
  }

  
  /**
   * @return {Promise<{
        error: ?device.mojom.NDEFError,
   *  }>}
   */

  cancelAllWatches() {
    return this.proxy.sendMessage(
        1856824668,
        device.mojom.NFC_CancelAllWatches_ParamsSpec.$,
        device.mojom.NFC_CancelAllWatches_ResponseParamsSpec.$,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the NFC
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
device.mojom.NFCReceiver = class {
  /**
   * @param {!device.mojom.NFCInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!device.mojom.NFCRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        device.mojom.NFCRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!device.mojom.NFCRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        675052752,
        device.mojom.NFC_SetClient_ParamsSpec.$,
        null,
        impl.setClient.bind(impl));
    this.helper_internal_.registerHandler(
        884436015,
        device.mojom.NFC_Push_ParamsSpec.$,
        device.mojom.NFC_Push_ResponseParamsSpec.$,
        impl.push.bind(impl));
    this.helper_internal_.registerHandler(
        1223948227,
        device.mojom.NFC_CancelPush_ParamsSpec.$,
        device.mojom.NFC_CancelPush_ResponseParamsSpec.$,
        impl.cancelPush.bind(impl));
    this.helper_internal_.registerHandler(
        1905357176,
        device.mojom.NFC_Watch_ParamsSpec.$,
        device.mojom.NFC_Watch_ResponseParamsSpec.$,
        impl.watch.bind(impl));
    this.helper_internal_.registerHandler(
        173070384,
        device.mojom.NFC_CancelWatch_ParamsSpec.$,
        device.mojom.NFC_CancelWatch_ResponseParamsSpec.$,
        impl.cancelWatch.bind(impl));
    this.helper_internal_.registerHandler(
        1856824668,
        device.mojom.NFC_CancelAllWatches_ParamsSpec.$,
        device.mojom.NFC_CancelAllWatches_ResponseParamsSpec.$,
        impl.cancelAllWatches.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
device.mojom.NFC = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "device.mojom.NFC";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!device.mojom.NFCRemote}
   * @export
   */
  static getRemote() {
    let remote = new device.mojom.NFCRemote;
    Mojo.bindInterface(this.$interfaceName,
                       remote.$.bindNewPipeAndPassReceiver().handle);
    return remote;
  }
};


/**
 * An object which receives request messages for the NFC
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
device.mojom.NFCCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      device.mojom.NFCRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!device.mojom.NFCRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.setClient =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        675052752,
        device.mojom.NFC_SetClient_ParamsSpec.$,
        null,
        this.setClient.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.push =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        884436015,
        device.mojom.NFC_Push_ParamsSpec.$,
        device.mojom.NFC_Push_ResponseParamsSpec.$,
        this.push.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.cancelPush =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1223948227,
        device.mojom.NFC_CancelPush_ParamsSpec.$,
        device.mojom.NFC_CancelPush_ResponseParamsSpec.$,
        this.cancelPush.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.watch =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1905357176,
        device.mojom.NFC_Watch_ParamsSpec.$,
        device.mojom.NFC_Watch_ResponseParamsSpec.$,
        this.watch.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.cancelWatch =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        173070384,
        device.mojom.NFC_CancelWatch_ParamsSpec.$,
        device.mojom.NFC_CancelWatch_ResponseParamsSpec.$,
        this.cancelWatch.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.cancelAllWatches =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1856824668,
        device.mojom.NFC_CancelAllWatches_ParamsSpec.$,
        device.mojom.NFC_CancelAllWatches_ResponseParamsSpec.$,
        this.cancelAllWatches.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
device.mojom.NFCClientPendingReceiver = class {
  /** @param {!MojoHandle} handle */
  constructor(handle) {
    /** @public {!MojoHandle} */
    this.handle = handle;
  }
};



/**
 * @export
 * @implements { device.mojom.NFCClientInterface }
 */
device.mojom.NFCClientRemote = class {
  /** @param {MojoHandle=} opt_handle */
  constructor(opt_handle) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!device.mojom.NFCClientPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          device.mojom.NFCClientPendingReceiver,
          opt_handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!device.mojom.NFCClientPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !Array<!number> } watchIds
   * @param { ?string } serialNumber
   * @param { !device.mojom.NDEFMessage } message
   */

  onWatch(
      watchIds,
      serialNumber,
      message) {
    this.proxy.sendMessage(
        460080005,
        device.mojom.NFCClient_OnWatch_ParamsSpec.$,
        null,
        [
          watchIds,
          serialNumber,
          message
        ]);
  }

  
  /**
   * @param { !device.mojom.NDEFError } error
   */

  onError(
      error) {
    this.proxy.sendMessage(
        111472180,
        device.mojom.NFCClient_OnError_ParamsSpec.$,
        null,
        [
          error
        ]);
  }
};

/**
 * An object which receives request messages for the NFCClient
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
device.mojom.NFCClientReceiver = class {
  /**
   * @param {!device.mojom.NFCClientInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!device.mojom.NFCClientRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        device.mojom.NFCClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!device.mojom.NFCClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        460080005,
        device.mojom.NFCClient_OnWatch_ParamsSpec.$,
        null,
        impl.onWatch.bind(impl));
    this.helper_internal_.registerHandler(
        111472180,
        device.mojom.NFCClient_OnError_ParamsSpec.$,
        null,
        impl.onError.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
device.mojom.NFCClient = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "device.mojom.NFCClient";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!device.mojom.NFCClientRemote}
   * @export
   */
  static getRemote() {
    let remote = new device.mojom.NFCClientRemote;
    Mojo.bindInterface(this.$interfaceName,
                       remote.$.bindNewPipeAndPassReceiver().handle);
    return remote;
  }
};


/**
 * An object which receives request messages for the NFCClient
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
device.mojom.NFCClientCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      device.mojom.NFCClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!device.mojom.NFCClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onWatch =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        460080005,
        device.mojom.NFCClient_OnWatch_ParamsSpec.$,
        null,
        this.onWatch.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onError =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        111472180,
        device.mojom.NFCClient_OnError_ParamsSpec.$,
        null,
        this.onError.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};



/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
device.mojom.NDEFErrorSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
device.mojom.NDEFRecordSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
device.mojom.NDEFMessageSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
device.mojom.NDEFWriteOptionsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
device.mojom.NDEFScanOptionsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
device.mojom.NFC_SetClient_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
device.mojom.NFC_Push_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
device.mojom.NFC_Push_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
device.mojom.NFC_CancelPush_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
device.mojom.NFC_CancelPush_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
device.mojom.NFC_Watch_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
device.mojom.NFC_Watch_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
device.mojom.NFC_CancelWatch_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
device.mojom.NFC_CancelWatch_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
device.mojom.NFC_CancelAllWatches_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
device.mojom.NFC_CancelAllWatches_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
device.mojom.NFCClient_OnWatch_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
device.mojom.NFCClient_OnError_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    device.mojom.NDEFErrorSpec.$,
    'NDEFError',
    16,
    [
      mojo.internal.StructField(
        'errorType', 0,
        0,
        device.mojom.NDEFErrorTypeSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'errorMessage', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ]);







mojo.internal.Struct(
    device.mojom.NDEFRecordSpec.$,
    'NDEFRecord',
    64,
    [
      mojo.internal.StructField(
        'category', 0,
        0,
        device.mojom.NDEFRecordTypeCategorySpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'recordType', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'mediaType', 16,
        0,
        mojo.internal.String,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'id', 24,
        0,
        mojo.internal.String,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'encoding', 32,
        0,
        mojo.internal.String,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'lang', 40,
        0,
        mojo.internal.String,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'data', 48,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'payloadMessage', 56,
        0,
        device.mojom.NDEFMessageSpec.$,
        null,
        true /* nullable */),
    ]);







mojo.internal.Struct(
    device.mojom.NDEFMessageSpec.$,
    'NDEFMessage',
    8,
    [
      mojo.internal.StructField(
        'data', 0,
        0,
        mojo.internal.Array(device.mojom.NDEFRecordSpec.$, false),
        null,
        false /* nullable */),
    ]);







mojo.internal.Struct(
    device.mojom.NDEFWriteOptionsSpec.$,
    'NDEFWriteOptions',
    8,
    [
      mojo.internal.StructField(
        'ignoreRead', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'overwrite', 0,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ]);







mojo.internal.Struct(
    device.mojom.NDEFScanOptionsSpec.$,
    'NDEFScanOptions',
    24,
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        mojo.internal.String,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'recordType', 8,
        0,
        mojo.internal.String,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'mediaType', 16,
        0,
        mojo.internal.String,
        null,
        true /* nullable */),
    ]);







mojo.internal.Struct(
    device.mojom.NFC_SetClient_ParamsSpec.$,
    'NFC_SetClient_Params',
    8,
    [
      mojo.internal.StructField(
        'client', 0,
        0,
        mojo.internal.InterfaceProxy(device.mojom.NFCClientRemote),
        null,
        false /* nullable */),
    ]);







mojo.internal.Struct(
    device.mojom.NFC_Push_ParamsSpec.$,
    'NFC_Push_Params',
    16,
    [
      mojo.internal.StructField(
        'message', 0,
        0,
        device.mojom.NDEFMessageSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'options', 8,
        0,
        device.mojom.NDEFWriteOptionsSpec.$,
        null,
        true /* nullable */),
    ]);







mojo.internal.Struct(
    device.mojom.NFC_Push_ResponseParamsSpec.$,
    'NFC_Push_ResponseParams',
    8,
    [
      mojo.internal.StructField(
        'error', 0,
        0,
        device.mojom.NDEFErrorSpec.$,
        null,
        true /* nullable */),
    ]);







mojo.internal.Struct(
    device.mojom.NFC_CancelPush_ParamsSpec.$,
    'NFC_CancelPush_Params',
    0,
    [
    ]);







mojo.internal.Struct(
    device.mojom.NFC_CancelPush_ResponseParamsSpec.$,
    'NFC_CancelPush_ResponseParams',
    8,
    [
      mojo.internal.StructField(
        'error', 0,
        0,
        device.mojom.NDEFErrorSpec.$,
        null,
        true /* nullable */),
    ]);







mojo.internal.Struct(
    device.mojom.NFC_Watch_ParamsSpec.$,
    'NFC_Watch_Params',
    16,
    [
      mojo.internal.StructField(
        'options', 0,
        0,
        device.mojom.NDEFScanOptionsSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'id', 8,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */),
    ]);







mojo.internal.Struct(
    device.mojom.NFC_Watch_ResponseParamsSpec.$,
    'NFC_Watch_ResponseParams',
    8,
    [
      mojo.internal.StructField(
        'error', 0,
        0,
        device.mojom.NDEFErrorSpec.$,
        null,
        true /* nullable */),
    ]);







mojo.internal.Struct(
    device.mojom.NFC_CancelWatch_ParamsSpec.$,
    'NFC_CancelWatch_Params',
    8,
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */),
    ]);







mojo.internal.Struct(
    device.mojom.NFC_CancelWatch_ResponseParamsSpec.$,
    'NFC_CancelWatch_ResponseParams',
    8,
    [
      mojo.internal.StructField(
        'error', 0,
        0,
        device.mojom.NDEFErrorSpec.$,
        null,
        true /* nullable */),
    ]);







mojo.internal.Struct(
    device.mojom.NFC_CancelAllWatches_ParamsSpec.$,
    'NFC_CancelAllWatches_Params',
    0,
    [
    ]);







mojo.internal.Struct(
    device.mojom.NFC_CancelAllWatches_ResponseParamsSpec.$,
    'NFC_CancelAllWatches_ResponseParams',
    8,
    [
      mojo.internal.StructField(
        'error', 0,
        0,
        device.mojom.NDEFErrorSpec.$,
        null,
        true /* nullable */),
    ]);







mojo.internal.Struct(
    device.mojom.NFCClient_OnWatch_ParamsSpec.$,
    'NFCClient_OnWatch_Params',
    24,
    [
      mojo.internal.StructField(
        'watchIds', 0,
        0,
        mojo.internal.Array(mojo.internal.Uint32, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'serialNumber', 8,
        0,
        mojo.internal.String,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'message', 16,
        0,
        device.mojom.NDEFMessageSpec.$,
        null,
        false /* nullable */),
    ]);







mojo.internal.Struct(
    device.mojom.NFCClient_OnError_ParamsSpec.$,
    'NFCClient_OnError_Params',
    8,
    [
      mojo.internal.StructField(
        'error', 0,
        0,
        device.mojom.NDEFErrorSpec.$,
        null,
        false /* nullable */),
    ]);






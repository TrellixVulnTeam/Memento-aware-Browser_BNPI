// services/device/public/mojom/wake_lock_provider.mojom.externs.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.



goog.provide('device.mojom.WakeLockProvider');
goog.provide('device.mojom.WakeLockProviderImpl');
goog.provide('device.mojom.WakeLockProviderPtr');



/**
 * @const
 * @type { !mojo.Interface };
 */
device.mojom.WakeLockProvider;

/** @interface */
device.mojom.WakeLockProviderImpl = class {
  /**
   * @param { !number } contextId
   * @param { !mojo.InterfaceRequest } context
   */
  getWakeLockContextForID(contextId, context) {}
  /**
   * @param { !device.mojom.WakeLockType } type
   * @param { !device.mojom.WakeLockReason } reason
   * @param { !string } description
   * @param { !mojo.InterfaceRequest } wakeLock
   */
  getWakeLockWithoutContext(type, reason, description, wakeLock) {}
  /**
   * @param { !device.mojom.WakeLockType } type
   * @param { !device.mojom.WakeLockObserverPtr } observer
   */
  notifyOnWakeLockDeactivation(type, observer) {}
  /**
   * @param { !device.mojom.WakeLockType } type
   * @return {Promise}
   */
  getActiveWakeLocksForTests(type) {}
};

/**
 * @implements { mojo.InterfacePtr }
 * @implements { device.mojom.WakeLockProviderImpl }
 */
device.mojom.WakeLockProviderPtr = class {
  /**
   * @param { !number } contextId
   * @param { !mojo.InterfaceRequest } context
   */
  getWakeLockContextForID(contextId, context) {}
  /**
   * @param { !device.mojom.WakeLockType } type
   * @param { !device.mojom.WakeLockReason } reason
   * @param { !string } description
   * @param { !mojo.InterfaceRequest } wakeLock
   */
  getWakeLockWithoutContext(type, reason, description, wakeLock) {}
  /**
   * @param { !device.mojom.WakeLockType } type
   * @param { !device.mojom.WakeLockObserverPtr } observer
   */
  notifyOnWakeLockDeactivation(type, observer) {}
  /**
   * @param { !device.mojom.WakeLockType } type
   * @return {Promise}
   */
  getActiveWakeLocksForTests(type) {}
};

goog.provide('device.mojom.WakeLockObserver');
goog.provide('device.mojom.WakeLockObserverImpl');
goog.provide('device.mojom.WakeLockObserverPtr');



/**
 * @const
 * @type { !mojo.Interface };
 */
device.mojom.WakeLockObserver;

/** @interface */
device.mojom.WakeLockObserverImpl = class {
  /**
   * @param { !device.mojom.WakeLockType } type
   */
  onWakeLockDeactivated(type) {}
};

/**
 * @implements { mojo.InterfacePtr }
 * @implements { device.mojom.WakeLockObserverImpl }
 */
device.mojom.WakeLockObserverPtr = class {
  /**
   * @param { !device.mojom.WakeLockType } type
   */
  onWakeLockDeactivated(type) {}
};

goog.provide('device.mojom.WakeLockProvider_GetWakeLockContextForID_Params');

device.mojom.WakeLockProvider_GetWakeLockContextForID_Params = class {
  constructor() {
    /** @type { !number } */
    this.contextId;
    /** @type { !mojo.InterfaceRequest } */
    this.context;
  }
};

goog.provide('device.mojom.WakeLockProvider_GetWakeLockWithoutContext_Params');

device.mojom.WakeLockProvider_GetWakeLockWithoutContext_Params = class {
  constructor() {
    /** @type { !device.mojom.WakeLockType } */
    this.type;
    /** @type { !device.mojom.WakeLockReason } */
    this.reason;
    /** @type { !string } */
    this.description;
    /** @type { !mojo.InterfaceRequest } */
    this.wakeLock;
  }
};

goog.provide('device.mojom.WakeLockProvider_NotifyOnWakeLockDeactivation_Params');

device.mojom.WakeLockProvider_NotifyOnWakeLockDeactivation_Params = class {
  constructor() {
    /** @type { !device.mojom.WakeLockType } */
    this.type;
    /** @type { !device.mojom.WakeLockObserverPtr } */
    this.observer;
  }
};

goog.provide('device.mojom.WakeLockProvider_GetActiveWakeLocksForTests_Params');

device.mojom.WakeLockProvider_GetActiveWakeLocksForTests_Params = class {
  constructor() {
    /** @type { !device.mojom.WakeLockType } */
    this.type;
  }
};

goog.provide('device.mojom.WakeLockProvider_GetActiveWakeLocksForTests_ResponseParams');

device.mojom.WakeLockProvider_GetActiveWakeLocksForTests_ResponseParams = class {
  constructor() {
    /** @type { !number } */
    this.count;
  }
};

goog.provide('device.mojom.WakeLockObserver_OnWakeLockDeactivated_Params');

device.mojom.WakeLockObserver_OnWakeLockDeactivated_Params = class {
  constructor() {
    /** @type { !device.mojom.WakeLockType } */
    this.type;
  }
};

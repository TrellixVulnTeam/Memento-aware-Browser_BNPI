// services/data_decoder/public/mojom/resource_snapshot_for_web_bundle.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "services/data_decoder/public/mojom/resource_snapshot_for_web_bundle.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/mojom/base/big_buffer.mojom.h"
#include "url/mojom/url.mojom.h"


#ifndef SERVICES_DATA_DECODER_PUBLIC_MOJOM_RESOURCE_SNAPSHOT_FOR_WEB_BUNDLE_MOJOM_JUMBO_H_
#define SERVICES_DATA_DECODER_PUBLIC_MOJOM_RESOURCE_SNAPSHOT_FOR_WEB_BUNDLE_MOJOM_JUMBO_H_
#endif


namespace data_decoder {
namespace mojom {


void ResourceSnapshotForWebBundleInterceptorForTesting::GetResourceCount(GetResourceCountCallback callback) {
  GetForwardingInterface()->GetResourceCount(std::move(callback));
}
void ResourceSnapshotForWebBundleInterceptorForTesting::GetResourceInfo(uint64_t index, GetResourceInfoCallback callback) {
  GetForwardingInterface()->GetResourceInfo(std::move(index), std::move(callback));
}
void ResourceSnapshotForWebBundleInterceptorForTesting::GetResourceBody(uint64_t index, GetResourceBodyCallback callback) {
  GetForwardingInterface()->GetResourceBody(std::move(index), std::move(callback));
}
ResourceSnapshotForWebBundleAsyncWaiter::ResourceSnapshotForWebBundleAsyncWaiter(
    ResourceSnapshotForWebBundle* proxy) : proxy_(proxy) {}

ResourceSnapshotForWebBundleAsyncWaiter::~ResourceSnapshotForWebBundleAsyncWaiter() = default;

void ResourceSnapshotForWebBundleAsyncWaiter::GetResourceCount(
    uint64_t* out_count) {
  base::RunLoop loop;
  proxy_->GetResourceCount(
      base::BindOnce(
          [](base::RunLoop* loop,
             uint64_t* out_count
,
             uint64_t count) {*out_count = std::move(count);
            loop->Quit();
          },
          &loop,
          out_count));
  loop.Run();
}
void ResourceSnapshotForWebBundleAsyncWaiter::GetResourceInfo(
    uint64_t index, SerializedResourceInfoPtr* out_info) {
  base::RunLoop loop;
  proxy_->GetResourceInfo(std::move(index),
      base::BindOnce(
          [](base::RunLoop* loop,
             SerializedResourceInfoPtr* out_info
,
             SerializedResourceInfoPtr info) {*out_info = std::move(info);
            loop->Quit();
          },
          &loop,
          out_info));
  loop.Run();
}
void ResourceSnapshotForWebBundleAsyncWaiter::GetResourceBody(
    uint64_t index, base::Optional<::mojo_base::BigBuffer>* out_data) {
  base::RunLoop loop;
  proxy_->GetResourceBody(std::move(index),
      base::BindOnce(
          [](base::RunLoop* loop,
             base::Optional<::mojo_base::BigBuffer>* out_data
,
             base::Optional<::mojo_base::BigBuffer> data) {*out_data = std::move(data);
            loop->Quit();
          },
          &loop,
          out_data));
  loop.Run();
}





}  // namespace mojom
}  // namespace data_decoder

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
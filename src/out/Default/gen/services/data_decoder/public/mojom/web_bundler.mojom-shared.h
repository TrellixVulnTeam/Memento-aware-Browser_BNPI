// services/data_decoder/public/mojom/web_bundler.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_DATA_DECODER_PUBLIC_MOJOM_WEB_BUNDLER_MOJOM_SHARED_H_
#define SERVICES_DATA_DECODER_PUBLIC_MOJOM_WEB_BUNDLER_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "services/data_decoder/public/mojom/web_bundler.mojom-shared-internal.h"
#include "services/data_decoder/public/mojom/resource_snapshot_for_web_bundle.mojom-shared.h"
#include "mojo/public/mojom/base/file.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace data_decoder {
namespace mojom {


}  // namespace mojom
}  // namespace data_decoder

namespace mojo {
namespace internal {

}  // namespace internal
}  // namespace mojo


namespace data_decoder {
namespace mojom {


enum class WebBundlerError : int32_t {
  
  kOK = 0,
  
  kNotImplemented = 1,
  
  kFileOpenFailed = 2,
  
  kWebBundlerConnectionError = 3,
  kMinValue = 0,
  kMaxValue = 3,
};

 std::ostream& operator<<(std::ostream& os, WebBundlerError value);
inline bool IsKnownEnumValue(WebBundlerError value) {
  return internal::WebBundlerError_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class WebBundlerInterfaceBase {};

using WebBundlerPtrDataView =
    mojo::InterfacePtrDataView<WebBundlerInterfaceBase>;
using WebBundlerRequestDataView =
    mojo::InterfaceRequestDataView<WebBundlerInterfaceBase>;
using WebBundlerAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<WebBundlerInterfaceBase>;
using WebBundlerAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<WebBundlerInterfaceBase>;


}  // namespace mojom
}  // namespace data_decoder

namespace std {

template <>
struct hash<::data_decoder::mojom::WebBundlerError>
    : public mojo::internal::EnumHashImpl<::data_decoder::mojom::WebBundlerError> {};

}  // namespace std

namespace mojo {


template <>
struct EnumTraits<::data_decoder::mojom::WebBundlerError, ::data_decoder::mojom::WebBundlerError> {
  static ::data_decoder::mojom::WebBundlerError ToMojom(::data_decoder::mojom::WebBundlerError input) { return input; }
  static bool FromMojom(::data_decoder::mojom::WebBundlerError input, ::data_decoder::mojom::WebBundlerError* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::data_decoder::mojom::WebBundlerError, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::data_decoder::mojom::WebBundlerError, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::data_decoder::mojom::WebBundlerError>(input), output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace data_decoder {
namespace mojom {


}  // namespace mojom
}  // namespace data_decoder

#endif  // SERVICES_DATA_DECODER_PUBLIC_MOJOM_WEB_BUNDLER_MOJOM_SHARED_H_
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: public.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_public_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_public_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_public_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_public_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace network {
class SignedTrustTokenRedemptionRecord;
class SignedTrustTokenRedemptionRecordDefaultTypeInternal;
extern SignedTrustTokenRedemptionRecordDefaultTypeInternal _SignedTrustTokenRedemptionRecord_default_instance_;
class TrustToken;
class TrustTokenDefaultTypeInternal;
extern TrustTokenDefaultTypeInternal _TrustToken_default_instance_;
}  // namespace network
PROTOBUF_NAMESPACE_OPEN
template<> ::network::SignedTrustTokenRedemptionRecord* Arena::CreateMaybeMessage<::network::SignedTrustTokenRedemptionRecord>(Arena*);
template<> ::network::TrustToken* Arena::CreateMaybeMessage<::network::TrustToken>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace network {

// ===================================================================

class TrustToken :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:network.TrustToken) */ {
 public:
  TrustToken();
  virtual ~TrustToken();

  TrustToken(const TrustToken& from);
  TrustToken(TrustToken&& from) noexcept
    : TrustToken() {
    *this = ::std::move(from);
  }

  inline TrustToken& operator=(const TrustToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrustToken& operator=(TrustToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TrustToken& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrustToken* internal_default_instance() {
    return reinterpret_cast<const TrustToken*>(
               &_TrustToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrustToken& a, TrustToken& b) {
    a.Swap(&b);
  }
  inline void Swap(TrustToken* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrustToken* New() const final {
    return CreateMaybeMessage<TrustToken>(nullptr);
  }

  TrustToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrustToken>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TrustToken& from);
  void MergeFrom(const TrustToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrustToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TrustToken";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyFieldNumber = 1,
    kSigningKeyFieldNumber = 2,
  };
  // optional bytes body = 1;
  bool has_body() const;
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);

  // optional bytes signing_key = 2;
  bool has_signing_key() const;
  void clear_signing_key();
  const std::string& signing_key() const;
  void set_signing_key(const std::string& value);
  void set_signing_key(std::string&& value);
  void set_signing_key(const char* value);
  void set_signing_key(const void* value, size_t size);
  std::string* mutable_signing_key();
  std::string* release_signing_key();
  void set_allocated_signing_key(std::string* signing_key);

  // @@protoc_insertion_point(class_scope:network.TrustToken)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signing_key_;
  friend struct ::TableStruct_public_2eproto;
};
// -------------------------------------------------------------------

class SignedTrustTokenRedemptionRecord :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:network.SignedTrustTokenRedemptionRecord) */ {
 public:
  SignedTrustTokenRedemptionRecord();
  virtual ~SignedTrustTokenRedemptionRecord();

  SignedTrustTokenRedemptionRecord(const SignedTrustTokenRedemptionRecord& from);
  SignedTrustTokenRedemptionRecord(SignedTrustTokenRedemptionRecord&& from) noexcept
    : SignedTrustTokenRedemptionRecord() {
    *this = ::std::move(from);
  }

  inline SignedTrustTokenRedemptionRecord& operator=(const SignedTrustTokenRedemptionRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignedTrustTokenRedemptionRecord& operator=(SignedTrustTokenRedemptionRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SignedTrustTokenRedemptionRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignedTrustTokenRedemptionRecord* internal_default_instance() {
    return reinterpret_cast<const SignedTrustTokenRedemptionRecord*>(
               &_SignedTrustTokenRedemptionRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SignedTrustTokenRedemptionRecord& a, SignedTrustTokenRedemptionRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(SignedTrustTokenRedemptionRecord* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignedTrustTokenRedemptionRecord* New() const final {
    return CreateMaybeMessage<SignedTrustTokenRedemptionRecord>(nullptr);
  }

  SignedTrustTokenRedemptionRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignedTrustTokenRedemptionRecord>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SignedTrustTokenRedemptionRecord& from);
  void MergeFrom(const SignedTrustTokenRedemptionRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SignedTrustTokenRedemptionRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.SignedTrustTokenRedemptionRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyFieldNumber = 1,
    kPublicKeyFieldNumber = 2,
    kSigningKeyFieldNumber = 3,
    kTokenVerificationKeyFieldNumber = 4,
  };
  // optional bytes body = 1;
  bool has_body() const;
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);

  // optional bytes public_key = 2;
  bool has_public_key() const;
  void clear_public_key();
  const std::string& public_key() const;
  void set_public_key(const std::string& value);
  void set_public_key(std::string&& value);
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  std::string* mutable_public_key();
  std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);

  // optional bytes signing_key = 3;
  bool has_signing_key() const;
  void clear_signing_key();
  const std::string& signing_key() const;
  void set_signing_key(const std::string& value);
  void set_signing_key(std::string&& value);
  void set_signing_key(const char* value);
  void set_signing_key(const void* value, size_t size);
  std::string* mutable_signing_key();
  std::string* release_signing_key();
  void set_allocated_signing_key(std::string* signing_key);

  // optional bytes token_verification_key = 4;
  bool has_token_verification_key() const;
  void clear_token_verification_key();
  const std::string& token_verification_key() const;
  void set_token_verification_key(const std::string& value);
  void set_token_verification_key(std::string&& value);
  void set_token_verification_key(const char* value);
  void set_token_verification_key(const void* value, size_t size);
  std::string* mutable_token_verification_key();
  std::string* release_token_verification_key();
  void set_allocated_token_verification_key(std::string* token_verification_key);

  // @@protoc_insertion_point(class_scope:network.SignedTrustTokenRedemptionRecord)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signing_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_verification_key_;
  friend struct ::TableStruct_public_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrustToken

// optional bytes body = 1;
inline bool TrustToken::has_body() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrustToken::clear_body() {
  body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrustToken::body() const {
  // @@protoc_insertion_point(field_get:network.TrustToken.body)
  return body_.GetNoArena();
}
inline void TrustToken::set_body(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.TrustToken.body)
}
inline void TrustToken::set_body(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.TrustToken.body)
}
inline void TrustToken::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.TrustToken.body)
}
inline void TrustToken::set_body(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.TrustToken.body)
}
inline std::string* TrustToken::mutable_body() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:network.TrustToken.body)
  return body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrustToken::release_body() {
  // @@protoc_insertion_point(field_release:network.TrustToken.body)
  if (!has_body()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return body_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrustToken::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:network.TrustToken.body)
}

// optional bytes signing_key = 2;
inline bool TrustToken::has_signing_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrustToken::clear_signing_key() {
  signing_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TrustToken::signing_key() const {
  // @@protoc_insertion_point(field_get:network.TrustToken.signing_key)
  return signing_key_.GetNoArena();
}
inline void TrustToken::set_signing_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  signing_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.TrustToken.signing_key)
}
inline void TrustToken::set_signing_key(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  signing_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.TrustToken.signing_key)
}
inline void TrustToken::set_signing_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  signing_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.TrustToken.signing_key)
}
inline void TrustToken::set_signing_key(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  signing_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.TrustToken.signing_key)
}
inline std::string* TrustToken::mutable_signing_key() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:network.TrustToken.signing_key)
  return signing_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrustToken::release_signing_key() {
  // @@protoc_insertion_point(field_release:network.TrustToken.signing_key)
  if (!has_signing_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return signing_key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrustToken::set_allocated_signing_key(std::string* signing_key) {
  if (signing_key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  signing_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signing_key);
  // @@protoc_insertion_point(field_set_allocated:network.TrustToken.signing_key)
}

// -------------------------------------------------------------------

// SignedTrustTokenRedemptionRecord

// optional bytes body = 1;
inline bool SignedTrustTokenRedemptionRecord::has_body() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignedTrustTokenRedemptionRecord::clear_body() {
  body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SignedTrustTokenRedemptionRecord::body() const {
  // @@protoc_insertion_point(field_get:network.SignedTrustTokenRedemptionRecord.body)
  return body_.GetNoArena();
}
inline void SignedTrustTokenRedemptionRecord::set_body(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.SignedTrustTokenRedemptionRecord.body)
}
inline void SignedTrustTokenRedemptionRecord::set_body(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.SignedTrustTokenRedemptionRecord.body)
}
inline void SignedTrustTokenRedemptionRecord::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.SignedTrustTokenRedemptionRecord.body)
}
inline void SignedTrustTokenRedemptionRecord::set_body(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.SignedTrustTokenRedemptionRecord.body)
}
inline std::string* SignedTrustTokenRedemptionRecord::mutable_body() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:network.SignedTrustTokenRedemptionRecord.body)
  return body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SignedTrustTokenRedemptionRecord::release_body() {
  // @@protoc_insertion_point(field_release:network.SignedTrustTokenRedemptionRecord.body)
  if (!has_body()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return body_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SignedTrustTokenRedemptionRecord::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:network.SignedTrustTokenRedemptionRecord.body)
}

// optional bytes public_key = 2;
inline bool SignedTrustTokenRedemptionRecord::has_public_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignedTrustTokenRedemptionRecord::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SignedTrustTokenRedemptionRecord::public_key() const {
  // @@protoc_insertion_point(field_get:network.SignedTrustTokenRedemptionRecord.public_key)
  return public_key_.GetNoArena();
}
inline void SignedTrustTokenRedemptionRecord::set_public_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.SignedTrustTokenRedemptionRecord.public_key)
}
inline void SignedTrustTokenRedemptionRecord::set_public_key(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  public_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.SignedTrustTokenRedemptionRecord.public_key)
}
inline void SignedTrustTokenRedemptionRecord::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.SignedTrustTokenRedemptionRecord.public_key)
}
inline void SignedTrustTokenRedemptionRecord::set_public_key(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.SignedTrustTokenRedemptionRecord.public_key)
}
inline std::string* SignedTrustTokenRedemptionRecord::mutable_public_key() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:network.SignedTrustTokenRedemptionRecord.public_key)
  return public_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SignedTrustTokenRedemptionRecord::release_public_key() {
  // @@protoc_insertion_point(field_release:network.SignedTrustTokenRedemptionRecord.public_key)
  if (!has_public_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return public_key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SignedTrustTokenRedemptionRecord::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  public_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:network.SignedTrustTokenRedemptionRecord.public_key)
}

// optional bytes signing_key = 3;
inline bool SignedTrustTokenRedemptionRecord::has_signing_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SignedTrustTokenRedemptionRecord::clear_signing_key() {
  signing_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SignedTrustTokenRedemptionRecord::signing_key() const {
  // @@protoc_insertion_point(field_get:network.SignedTrustTokenRedemptionRecord.signing_key)
  return signing_key_.GetNoArena();
}
inline void SignedTrustTokenRedemptionRecord::set_signing_key(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  signing_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.SignedTrustTokenRedemptionRecord.signing_key)
}
inline void SignedTrustTokenRedemptionRecord::set_signing_key(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  signing_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.SignedTrustTokenRedemptionRecord.signing_key)
}
inline void SignedTrustTokenRedemptionRecord::set_signing_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  signing_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.SignedTrustTokenRedemptionRecord.signing_key)
}
inline void SignedTrustTokenRedemptionRecord::set_signing_key(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  signing_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.SignedTrustTokenRedemptionRecord.signing_key)
}
inline std::string* SignedTrustTokenRedemptionRecord::mutable_signing_key() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:network.SignedTrustTokenRedemptionRecord.signing_key)
  return signing_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SignedTrustTokenRedemptionRecord::release_signing_key() {
  // @@protoc_insertion_point(field_release:network.SignedTrustTokenRedemptionRecord.signing_key)
  if (!has_signing_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return signing_key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SignedTrustTokenRedemptionRecord::set_allocated_signing_key(std::string* signing_key) {
  if (signing_key != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  signing_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signing_key);
  // @@protoc_insertion_point(field_set_allocated:network.SignedTrustTokenRedemptionRecord.signing_key)
}

// optional bytes token_verification_key = 4;
inline bool SignedTrustTokenRedemptionRecord::has_token_verification_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SignedTrustTokenRedemptionRecord::clear_token_verification_key() {
  token_verification_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SignedTrustTokenRedemptionRecord::token_verification_key() const {
  // @@protoc_insertion_point(field_get:network.SignedTrustTokenRedemptionRecord.token_verification_key)
  return token_verification_key_.GetNoArena();
}
inline void SignedTrustTokenRedemptionRecord::set_token_verification_key(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  token_verification_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.SignedTrustTokenRedemptionRecord.token_verification_key)
}
inline void SignedTrustTokenRedemptionRecord::set_token_verification_key(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  token_verification_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.SignedTrustTokenRedemptionRecord.token_verification_key)
}
inline void SignedTrustTokenRedemptionRecord::set_token_verification_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  token_verification_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.SignedTrustTokenRedemptionRecord.token_verification_key)
}
inline void SignedTrustTokenRedemptionRecord::set_token_verification_key(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  token_verification_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.SignedTrustTokenRedemptionRecord.token_verification_key)
}
inline std::string* SignedTrustTokenRedemptionRecord::mutable_token_verification_key() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:network.SignedTrustTokenRedemptionRecord.token_verification_key)
  return token_verification_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SignedTrustTokenRedemptionRecord::release_token_verification_key() {
  // @@protoc_insertion_point(field_release:network.SignedTrustTokenRedemptionRecord.token_verification_key)
  if (!has_token_verification_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return token_verification_key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SignedTrustTokenRedemptionRecord::set_allocated_token_verification_key(std::string* token_verification_key) {
  if (token_verification_key != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  token_verification_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token_verification_key);
  // @@protoc_insertion_point(field_set_allocated:network.SignedTrustTokenRedemptionRecord.token_verification_key)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace network

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_public_2eproto

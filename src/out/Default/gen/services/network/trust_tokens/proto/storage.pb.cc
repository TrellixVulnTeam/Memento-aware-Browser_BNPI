// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage.proto

#include "storage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_public_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignedTrustTokenRedemptionRecord_public_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_public_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrustToken_public_2eproto;
namespace network {
class TrustTokenIssuerConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrustTokenIssuerConfig> _instance;
} _TrustTokenIssuerConfig_default_instance_;
class TrustTokenToplevelConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrustTokenToplevelConfig> _instance;
} _TrustTokenToplevelConfig_default_instance_;
class TrustTokenIssuerToplevelPairConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrustTokenIssuerToplevelPairConfig> _instance;
} _TrustTokenIssuerToplevelPairConfig_default_instance_;
}  // namespace network
static void InitDefaultsscc_info_TrustTokenIssuerConfig_storage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::network::_TrustTokenIssuerConfig_default_instance_;
    new (ptr) ::network::TrustTokenIssuerConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::network::TrustTokenIssuerConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrustTokenIssuerConfig_storage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TrustTokenIssuerConfig_storage_2eproto}, {
      &scc_info_TrustToken_public_2eproto.base,}};

static void InitDefaultsscc_info_TrustTokenIssuerToplevelPairConfig_storage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::network::_TrustTokenIssuerToplevelPairConfig_default_instance_;
    new (ptr) ::network::TrustTokenIssuerToplevelPairConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::network::TrustTokenIssuerToplevelPairConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrustTokenIssuerToplevelPairConfig_storage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TrustTokenIssuerToplevelPairConfig_storage_2eproto}, {
      &scc_info_SignedTrustTokenRedemptionRecord_public_2eproto.base,}};

static void InitDefaultsscc_info_TrustTokenToplevelConfig_storage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::network::_TrustTokenToplevelConfig_default_instance_;
    new (ptr) ::network::TrustTokenToplevelConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::network::TrustTokenToplevelConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrustTokenToplevelConfig_storage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TrustTokenToplevelConfig_storage_2eproto}, {}};

namespace network {

// ===================================================================

void TrustTokenIssuerConfig::InitAsDefaultInstance() {
}
class TrustTokenIssuerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustTokenIssuerConfig>()._has_bits_);
  static void set_has_last_issuance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void TrustTokenIssuerConfig::clear_tokens() {
  tokens_.Clear();
}
TrustTokenIssuerConfig::TrustTokenIssuerConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.TrustTokenIssuerConfig)
}
TrustTokenIssuerConfig::TrustTokenIssuerConfig(const TrustTokenIssuerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tokens_(from.tokens_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_issuance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_last_issuance()) {
    last_issuance_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_issuance_);
  }
  // @@protoc_insertion_point(copy_constructor:network.TrustTokenIssuerConfig)
}

void TrustTokenIssuerConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrustTokenIssuerConfig_storage_2eproto.base);
  last_issuance_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TrustTokenIssuerConfig::~TrustTokenIssuerConfig() {
  // @@protoc_insertion_point(destructor:network.TrustTokenIssuerConfig)
  SharedDtor();
}

void TrustTokenIssuerConfig::SharedDtor() {
  last_issuance_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrustTokenIssuerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrustTokenIssuerConfig& TrustTokenIssuerConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrustTokenIssuerConfig_storage_2eproto.base);
  return *internal_default_instance();
}


void TrustTokenIssuerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TrustTokenIssuerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tokens_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    last_issuance_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrustTokenIssuerConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .network.TrustToken tokens = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_tokens(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // optional string last_issuance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_last_issuance(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrustTokenIssuerConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:network.TrustTokenIssuerConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .network.TrustToken tokens = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_tokens()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string last_issuance = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_last_issuance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.TrustTokenIssuerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.TrustTokenIssuerConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrustTokenIssuerConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.TrustTokenIssuerConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .network.TrustToken tokens = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tokens_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->tokens(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string last_issuance = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->last_issuance(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:network.TrustTokenIssuerConfig)
}

size_t TrustTokenIssuerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TrustTokenIssuerConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .network.TrustToken tokens = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->tokens_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->tokens(static_cast<int>(i)));
    }
  }

  // optional string last_issuance = 4;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->last_issuance());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrustTokenIssuerConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TrustTokenIssuerConfig*>(
      &from));
}

void TrustTokenIssuerConfig::MergeFrom(const TrustTokenIssuerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.TrustTokenIssuerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tokens_.MergeFrom(from.tokens_);
  if (from.has_last_issuance()) {
    _has_bits_[0] |= 0x00000001u;
    last_issuance_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_issuance_);
  }
}

void TrustTokenIssuerConfig::CopyFrom(const TrustTokenIssuerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TrustTokenIssuerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustTokenIssuerConfig::IsInitialized() const {
  return true;
}

void TrustTokenIssuerConfig::InternalSwap(TrustTokenIssuerConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&tokens_)->InternalSwap(CastToBase(&other->tokens_));
  last_issuance_.Swap(&other->last_issuance_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string TrustTokenIssuerConfig::GetTypeName() const {
  return "network.TrustTokenIssuerConfig";
}


// ===================================================================

void TrustTokenToplevelConfig::InitAsDefaultInstance() {
}
class TrustTokenToplevelConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustTokenToplevelConfig>()._has_bits_);
};

TrustTokenToplevelConfig::TrustTokenToplevelConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.TrustTokenToplevelConfig)
}
TrustTokenToplevelConfig::TrustTokenToplevelConfig(const TrustTokenToplevelConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      associated_issuers_(from.associated_issuers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:network.TrustTokenToplevelConfig)
}

void TrustTokenToplevelConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrustTokenToplevelConfig_storage_2eproto.base);
}

TrustTokenToplevelConfig::~TrustTokenToplevelConfig() {
  // @@protoc_insertion_point(destructor:network.TrustTokenToplevelConfig)
  SharedDtor();
}

void TrustTokenToplevelConfig::SharedDtor() {
}

void TrustTokenToplevelConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrustTokenToplevelConfig& TrustTokenToplevelConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrustTokenToplevelConfig_storage_2eproto.base);
  return *internal_default_instance();
}


void TrustTokenToplevelConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TrustTokenToplevelConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  associated_issuers_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrustTokenToplevelConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string associated_issuers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_associated_issuers(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrustTokenToplevelConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:network.TrustTokenToplevelConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string associated_issuers = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_associated_issuers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.TrustTokenToplevelConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.TrustTokenToplevelConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrustTokenToplevelConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.TrustTokenToplevelConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string associated_issuers = 1;
  for (int i = 0, n = this->associated_issuers_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->associated_issuers(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:network.TrustTokenToplevelConfig)
}

size_t TrustTokenToplevelConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TrustTokenToplevelConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string associated_issuers = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->associated_issuers_size());
  for (int i = 0, n = this->associated_issuers_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->associated_issuers(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrustTokenToplevelConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TrustTokenToplevelConfig*>(
      &from));
}

void TrustTokenToplevelConfig::MergeFrom(const TrustTokenToplevelConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.TrustTokenToplevelConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  associated_issuers_.MergeFrom(from.associated_issuers_);
}

void TrustTokenToplevelConfig::CopyFrom(const TrustTokenToplevelConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TrustTokenToplevelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustTokenToplevelConfig::IsInitialized() const {
  return true;
}

void TrustTokenToplevelConfig::InternalSwap(TrustTokenToplevelConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  associated_issuers_.InternalSwap(CastToBase(&other->associated_issuers_));
}

std::string TrustTokenToplevelConfig::GetTypeName() const {
  return "network.TrustTokenToplevelConfig";
}


// ===================================================================

void TrustTokenIssuerToplevelPairConfig::InitAsDefaultInstance() {
  ::network::_TrustTokenIssuerToplevelPairConfig_default_instance_._instance.get_mutable()->signed_redemption_record_ = const_cast< ::network::SignedTrustTokenRedemptionRecord*>(
      ::network::SignedTrustTokenRedemptionRecord::internal_default_instance());
}
class TrustTokenIssuerToplevelPairConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<TrustTokenIssuerToplevelPairConfig>()._has_bits_);
  static void set_has_last_redemption(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::network::SignedTrustTokenRedemptionRecord& signed_redemption_record(const TrustTokenIssuerToplevelPairConfig* msg);
  static void set_has_signed_redemption_record(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::network::SignedTrustTokenRedemptionRecord&
TrustTokenIssuerToplevelPairConfig::_Internal::signed_redemption_record(const TrustTokenIssuerToplevelPairConfig* msg) {
  return *msg->signed_redemption_record_;
}
void TrustTokenIssuerToplevelPairConfig::clear_signed_redemption_record() {
  if (signed_redemption_record_ != nullptr) signed_redemption_record_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
TrustTokenIssuerToplevelPairConfig::TrustTokenIssuerToplevelPairConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:network.TrustTokenIssuerToplevelPairConfig)
}
TrustTokenIssuerToplevelPairConfig::TrustTokenIssuerToplevelPairConfig(const TrustTokenIssuerToplevelPairConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_redemption_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_last_redemption()) {
    last_redemption_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_redemption_);
  }
  if (from.has_signed_redemption_record()) {
    signed_redemption_record_ = new ::network::SignedTrustTokenRedemptionRecord(*from.signed_redemption_record_);
  } else {
    signed_redemption_record_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:network.TrustTokenIssuerToplevelPairConfig)
}

void TrustTokenIssuerToplevelPairConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrustTokenIssuerToplevelPairConfig_storage_2eproto.base);
  last_redemption_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signed_redemption_record_ = nullptr;
}

TrustTokenIssuerToplevelPairConfig::~TrustTokenIssuerToplevelPairConfig() {
  // @@protoc_insertion_point(destructor:network.TrustTokenIssuerToplevelPairConfig)
  SharedDtor();
}

void TrustTokenIssuerToplevelPairConfig::SharedDtor() {
  last_redemption_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete signed_redemption_record_;
}

void TrustTokenIssuerToplevelPairConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrustTokenIssuerToplevelPairConfig& TrustTokenIssuerToplevelPairConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrustTokenIssuerToplevelPairConfig_storage_2eproto.base);
  return *internal_default_instance();
}


void TrustTokenIssuerToplevelPairConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:network.TrustTokenIssuerToplevelPairConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      last_redemption_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(signed_redemption_record_ != nullptr);
      signed_redemption_record_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrustTokenIssuerToplevelPairConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string last_redemption = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_last_redemption(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .network.SignedTrustTokenRedemptionRecord signed_redemption_record = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_signed_redemption_record(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrustTokenIssuerToplevelPairConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:network.TrustTokenIssuerToplevelPairConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string last_redemption = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_last_redemption()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .network.SignedTrustTokenRedemptionRecord signed_redemption_record = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_signed_redemption_record()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:network.TrustTokenIssuerToplevelPairConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:network.TrustTokenIssuerToplevelPairConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrustTokenIssuerToplevelPairConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:network.TrustTokenIssuerToplevelPairConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string last_redemption = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->last_redemption(), output);
  }

  // optional .network.SignedTrustTokenRedemptionRecord signed_redemption_record = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::signed_redemption_record(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:network.TrustTokenIssuerToplevelPairConfig)
}

size_t TrustTokenIssuerToplevelPairConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:network.TrustTokenIssuerToplevelPairConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string last_redemption = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->last_redemption());
    }

    // optional .network.SignedTrustTokenRedemptionRecord signed_redemption_record = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signed_redemption_record_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrustTokenIssuerToplevelPairConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TrustTokenIssuerToplevelPairConfig*>(
      &from));
}

void TrustTokenIssuerToplevelPairConfig::MergeFrom(const TrustTokenIssuerToplevelPairConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:network.TrustTokenIssuerToplevelPairConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      last_redemption_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_redemption_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_signed_redemption_record()->::network::SignedTrustTokenRedemptionRecord::MergeFrom(from.signed_redemption_record());
    }
  }
}

void TrustTokenIssuerToplevelPairConfig::CopyFrom(const TrustTokenIssuerToplevelPairConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:network.TrustTokenIssuerToplevelPairConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrustTokenIssuerToplevelPairConfig::IsInitialized() const {
  return true;
}

void TrustTokenIssuerToplevelPairConfig::InternalSwap(TrustTokenIssuerToplevelPairConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  last_redemption_.Swap(&other->last_redemption_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(signed_redemption_record_, other->signed_redemption_record_);
}

std::string TrustTokenIssuerToplevelPairConfig::GetTypeName() const {
  return "network.TrustTokenIssuerToplevelPairConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace network
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::network::TrustTokenIssuerConfig* Arena::CreateMaybeMessage< ::network::TrustTokenIssuerConfig >(Arena* arena) {
  return Arena::CreateInternal< ::network::TrustTokenIssuerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TrustTokenToplevelConfig* Arena::CreateMaybeMessage< ::network::TrustTokenToplevelConfig >(Arena* arena) {
  return Arena::CreateInternal< ::network::TrustTokenToplevelConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::network::TrustTokenIssuerToplevelPairConfig* Arena::CreateMaybeMessage< ::network::TrustTokenIssuerToplevelPairConfig >(Arena* arena) {
  return Arena::CreateInternal< ::network::TrustTokenIssuerToplevelPairConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

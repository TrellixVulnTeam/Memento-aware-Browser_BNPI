// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_storage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_storage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "public.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_storage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_storage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace network {
class TrustTokenIssuerConfig;
class TrustTokenIssuerConfigDefaultTypeInternal;
extern TrustTokenIssuerConfigDefaultTypeInternal _TrustTokenIssuerConfig_default_instance_;
class TrustTokenIssuerToplevelPairConfig;
class TrustTokenIssuerToplevelPairConfigDefaultTypeInternal;
extern TrustTokenIssuerToplevelPairConfigDefaultTypeInternal _TrustTokenIssuerToplevelPairConfig_default_instance_;
class TrustTokenToplevelConfig;
class TrustTokenToplevelConfigDefaultTypeInternal;
extern TrustTokenToplevelConfigDefaultTypeInternal _TrustTokenToplevelConfig_default_instance_;
}  // namespace network
PROTOBUF_NAMESPACE_OPEN
template<> ::network::TrustTokenIssuerConfig* Arena::CreateMaybeMessage<::network::TrustTokenIssuerConfig>(Arena*);
template<> ::network::TrustTokenIssuerToplevelPairConfig* Arena::CreateMaybeMessage<::network::TrustTokenIssuerToplevelPairConfig>(Arena*);
template<> ::network::TrustTokenToplevelConfig* Arena::CreateMaybeMessage<::network::TrustTokenToplevelConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace network {

// ===================================================================

class TrustTokenIssuerConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:network.TrustTokenIssuerConfig) */ {
 public:
  TrustTokenIssuerConfig();
  virtual ~TrustTokenIssuerConfig();

  TrustTokenIssuerConfig(const TrustTokenIssuerConfig& from);
  TrustTokenIssuerConfig(TrustTokenIssuerConfig&& from) noexcept
    : TrustTokenIssuerConfig() {
    *this = ::std::move(from);
  }

  inline TrustTokenIssuerConfig& operator=(const TrustTokenIssuerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrustTokenIssuerConfig& operator=(TrustTokenIssuerConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TrustTokenIssuerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrustTokenIssuerConfig* internal_default_instance() {
    return reinterpret_cast<const TrustTokenIssuerConfig*>(
               &_TrustTokenIssuerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrustTokenIssuerConfig& a, TrustTokenIssuerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TrustTokenIssuerConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrustTokenIssuerConfig* New() const final {
    return CreateMaybeMessage<TrustTokenIssuerConfig>(nullptr);
  }

  TrustTokenIssuerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrustTokenIssuerConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TrustTokenIssuerConfig& from);
  void MergeFrom(const TrustTokenIssuerConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrustTokenIssuerConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TrustTokenIssuerConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokensFieldNumber = 3,
    kLastIssuanceFieldNumber = 4,
  };
  // repeated .network.TrustToken tokens = 3;
  int tokens_size() const;
  void clear_tokens();
  ::network::TrustToken* mutable_tokens(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TrustToken >*
      mutable_tokens();
  const ::network::TrustToken& tokens(int index) const;
  ::network::TrustToken* add_tokens();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TrustToken >&
      tokens() const;

  // optional string last_issuance = 4;
  bool has_last_issuance() const;
  void clear_last_issuance();
  const std::string& last_issuance() const;
  void set_last_issuance(const std::string& value);
  void set_last_issuance(std::string&& value);
  void set_last_issuance(const char* value);
  void set_last_issuance(const char* value, size_t size);
  std::string* mutable_last_issuance();
  std::string* release_last_issuance();
  void set_allocated_last_issuance(std::string* last_issuance);

  // @@protoc_insertion_point(class_scope:network.TrustTokenIssuerConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TrustToken > tokens_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_issuance_;
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class TrustTokenToplevelConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:network.TrustTokenToplevelConfig) */ {
 public:
  TrustTokenToplevelConfig();
  virtual ~TrustTokenToplevelConfig();

  TrustTokenToplevelConfig(const TrustTokenToplevelConfig& from);
  TrustTokenToplevelConfig(TrustTokenToplevelConfig&& from) noexcept
    : TrustTokenToplevelConfig() {
    *this = ::std::move(from);
  }

  inline TrustTokenToplevelConfig& operator=(const TrustTokenToplevelConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrustTokenToplevelConfig& operator=(TrustTokenToplevelConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TrustTokenToplevelConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrustTokenToplevelConfig* internal_default_instance() {
    return reinterpret_cast<const TrustTokenToplevelConfig*>(
               &_TrustTokenToplevelConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrustTokenToplevelConfig& a, TrustTokenToplevelConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TrustTokenToplevelConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrustTokenToplevelConfig* New() const final {
    return CreateMaybeMessage<TrustTokenToplevelConfig>(nullptr);
  }

  TrustTokenToplevelConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrustTokenToplevelConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TrustTokenToplevelConfig& from);
  void MergeFrom(const TrustTokenToplevelConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrustTokenToplevelConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TrustTokenToplevelConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssociatedIssuersFieldNumber = 1,
  };
  // repeated string associated_issuers = 1;
  int associated_issuers_size() const;
  void clear_associated_issuers();
  const std::string& associated_issuers(int index) const;
  std::string* mutable_associated_issuers(int index);
  void set_associated_issuers(int index, const std::string& value);
  void set_associated_issuers(int index, std::string&& value);
  void set_associated_issuers(int index, const char* value);
  void set_associated_issuers(int index, const char* value, size_t size);
  std::string* add_associated_issuers();
  void add_associated_issuers(const std::string& value);
  void add_associated_issuers(std::string&& value);
  void add_associated_issuers(const char* value);
  void add_associated_issuers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& associated_issuers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_associated_issuers();

  // @@protoc_insertion_point(class_scope:network.TrustTokenToplevelConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> associated_issuers_;
  friend struct ::TableStruct_storage_2eproto;
};
// -------------------------------------------------------------------

class TrustTokenIssuerToplevelPairConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:network.TrustTokenIssuerToplevelPairConfig) */ {
 public:
  TrustTokenIssuerToplevelPairConfig();
  virtual ~TrustTokenIssuerToplevelPairConfig();

  TrustTokenIssuerToplevelPairConfig(const TrustTokenIssuerToplevelPairConfig& from);
  TrustTokenIssuerToplevelPairConfig(TrustTokenIssuerToplevelPairConfig&& from) noexcept
    : TrustTokenIssuerToplevelPairConfig() {
    *this = ::std::move(from);
  }

  inline TrustTokenIssuerToplevelPairConfig& operator=(const TrustTokenIssuerToplevelPairConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrustTokenIssuerToplevelPairConfig& operator=(TrustTokenIssuerToplevelPairConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TrustTokenIssuerToplevelPairConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrustTokenIssuerToplevelPairConfig* internal_default_instance() {
    return reinterpret_cast<const TrustTokenIssuerToplevelPairConfig*>(
               &_TrustTokenIssuerToplevelPairConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TrustTokenIssuerToplevelPairConfig& a, TrustTokenIssuerToplevelPairConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TrustTokenIssuerToplevelPairConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrustTokenIssuerToplevelPairConfig* New() const final {
    return CreateMaybeMessage<TrustTokenIssuerToplevelPairConfig>(nullptr);
  }

  TrustTokenIssuerToplevelPairConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrustTokenIssuerToplevelPairConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TrustTokenIssuerToplevelPairConfig& from);
  void MergeFrom(const TrustTokenIssuerToplevelPairConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrustTokenIssuerToplevelPairConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "network.TrustTokenIssuerToplevelPairConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastRedemptionFieldNumber = 1,
    kSignedRedemptionRecordFieldNumber = 2,
  };
  // optional string last_redemption = 1;
  bool has_last_redemption() const;
  void clear_last_redemption();
  const std::string& last_redemption() const;
  void set_last_redemption(const std::string& value);
  void set_last_redemption(std::string&& value);
  void set_last_redemption(const char* value);
  void set_last_redemption(const char* value, size_t size);
  std::string* mutable_last_redemption();
  std::string* release_last_redemption();
  void set_allocated_last_redemption(std::string* last_redemption);

  // optional .network.SignedTrustTokenRedemptionRecord signed_redemption_record = 2;
  bool has_signed_redemption_record() const;
  void clear_signed_redemption_record();
  const ::network::SignedTrustTokenRedemptionRecord& signed_redemption_record() const;
  ::network::SignedTrustTokenRedemptionRecord* release_signed_redemption_record();
  ::network::SignedTrustTokenRedemptionRecord* mutable_signed_redemption_record();
  void set_allocated_signed_redemption_record(::network::SignedTrustTokenRedemptionRecord* signed_redemption_record);

  // @@protoc_insertion_point(class_scope:network.TrustTokenIssuerToplevelPairConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_redemption_;
  ::network::SignedTrustTokenRedemptionRecord* signed_redemption_record_;
  friend struct ::TableStruct_storage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrustTokenIssuerConfig

// repeated .network.TrustToken tokens = 3;
inline int TrustTokenIssuerConfig::tokens_size() const {
  return tokens_.size();
}
inline ::network::TrustToken* TrustTokenIssuerConfig::mutable_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:network.TrustTokenIssuerConfig.tokens)
  return tokens_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TrustToken >*
TrustTokenIssuerConfig::mutable_tokens() {
  // @@protoc_insertion_point(field_mutable_list:network.TrustTokenIssuerConfig.tokens)
  return &tokens_;
}
inline const ::network::TrustToken& TrustTokenIssuerConfig::tokens(int index) const {
  // @@protoc_insertion_point(field_get:network.TrustTokenIssuerConfig.tokens)
  return tokens_.Get(index);
}
inline ::network::TrustToken* TrustTokenIssuerConfig::add_tokens() {
  // @@protoc_insertion_point(field_add:network.TrustTokenIssuerConfig.tokens)
  return tokens_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::network::TrustToken >&
TrustTokenIssuerConfig::tokens() const {
  // @@protoc_insertion_point(field_list:network.TrustTokenIssuerConfig.tokens)
  return tokens_;
}

// optional string last_issuance = 4;
inline bool TrustTokenIssuerConfig::has_last_issuance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrustTokenIssuerConfig::clear_last_issuance() {
  last_issuance_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrustTokenIssuerConfig::last_issuance() const {
  // @@protoc_insertion_point(field_get:network.TrustTokenIssuerConfig.last_issuance)
  return last_issuance_.GetNoArena();
}
inline void TrustTokenIssuerConfig::set_last_issuance(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  last_issuance_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.TrustTokenIssuerConfig.last_issuance)
}
inline void TrustTokenIssuerConfig::set_last_issuance(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  last_issuance_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.TrustTokenIssuerConfig.last_issuance)
}
inline void TrustTokenIssuerConfig::set_last_issuance(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  last_issuance_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.TrustTokenIssuerConfig.last_issuance)
}
inline void TrustTokenIssuerConfig::set_last_issuance(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  last_issuance_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.TrustTokenIssuerConfig.last_issuance)
}
inline std::string* TrustTokenIssuerConfig::mutable_last_issuance() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:network.TrustTokenIssuerConfig.last_issuance)
  return last_issuance_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrustTokenIssuerConfig::release_last_issuance() {
  // @@protoc_insertion_point(field_release:network.TrustTokenIssuerConfig.last_issuance)
  if (!has_last_issuance()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return last_issuance_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrustTokenIssuerConfig::set_allocated_last_issuance(std::string* last_issuance) {
  if (last_issuance != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  last_issuance_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_issuance);
  // @@protoc_insertion_point(field_set_allocated:network.TrustTokenIssuerConfig.last_issuance)
}

// -------------------------------------------------------------------

// TrustTokenToplevelConfig

// repeated string associated_issuers = 1;
inline int TrustTokenToplevelConfig::associated_issuers_size() const {
  return associated_issuers_.size();
}
inline void TrustTokenToplevelConfig::clear_associated_issuers() {
  associated_issuers_.Clear();
}
inline const std::string& TrustTokenToplevelConfig::associated_issuers(int index) const {
  // @@protoc_insertion_point(field_get:network.TrustTokenToplevelConfig.associated_issuers)
  return associated_issuers_.Get(index);
}
inline std::string* TrustTokenToplevelConfig::mutable_associated_issuers(int index) {
  // @@protoc_insertion_point(field_mutable:network.TrustTokenToplevelConfig.associated_issuers)
  return associated_issuers_.Mutable(index);
}
inline void TrustTokenToplevelConfig::set_associated_issuers(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:network.TrustTokenToplevelConfig.associated_issuers)
  associated_issuers_.Mutable(index)->assign(value);
}
inline void TrustTokenToplevelConfig::set_associated_issuers(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:network.TrustTokenToplevelConfig.associated_issuers)
  associated_issuers_.Mutable(index)->assign(std::move(value));
}
inline void TrustTokenToplevelConfig::set_associated_issuers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  associated_issuers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:network.TrustTokenToplevelConfig.associated_issuers)
}
inline void TrustTokenToplevelConfig::set_associated_issuers(int index, const char* value, size_t size) {
  associated_issuers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:network.TrustTokenToplevelConfig.associated_issuers)
}
inline std::string* TrustTokenToplevelConfig::add_associated_issuers() {
  // @@protoc_insertion_point(field_add_mutable:network.TrustTokenToplevelConfig.associated_issuers)
  return associated_issuers_.Add();
}
inline void TrustTokenToplevelConfig::add_associated_issuers(const std::string& value) {
  associated_issuers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:network.TrustTokenToplevelConfig.associated_issuers)
}
inline void TrustTokenToplevelConfig::add_associated_issuers(std::string&& value) {
  associated_issuers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:network.TrustTokenToplevelConfig.associated_issuers)
}
inline void TrustTokenToplevelConfig::add_associated_issuers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  associated_issuers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:network.TrustTokenToplevelConfig.associated_issuers)
}
inline void TrustTokenToplevelConfig::add_associated_issuers(const char* value, size_t size) {
  associated_issuers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:network.TrustTokenToplevelConfig.associated_issuers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TrustTokenToplevelConfig::associated_issuers() const {
  // @@protoc_insertion_point(field_list:network.TrustTokenToplevelConfig.associated_issuers)
  return associated_issuers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TrustTokenToplevelConfig::mutable_associated_issuers() {
  // @@protoc_insertion_point(field_mutable_list:network.TrustTokenToplevelConfig.associated_issuers)
  return &associated_issuers_;
}

// -------------------------------------------------------------------

// TrustTokenIssuerToplevelPairConfig

// optional string last_redemption = 1;
inline bool TrustTokenIssuerToplevelPairConfig::has_last_redemption() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrustTokenIssuerToplevelPairConfig::clear_last_redemption() {
  last_redemption_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrustTokenIssuerToplevelPairConfig::last_redemption() const {
  // @@protoc_insertion_point(field_get:network.TrustTokenIssuerToplevelPairConfig.last_redemption)
  return last_redemption_.GetNoArena();
}
inline void TrustTokenIssuerToplevelPairConfig::set_last_redemption(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  last_redemption_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:network.TrustTokenIssuerToplevelPairConfig.last_redemption)
}
inline void TrustTokenIssuerToplevelPairConfig::set_last_redemption(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  last_redemption_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:network.TrustTokenIssuerToplevelPairConfig.last_redemption)
}
inline void TrustTokenIssuerToplevelPairConfig::set_last_redemption(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  last_redemption_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:network.TrustTokenIssuerToplevelPairConfig.last_redemption)
}
inline void TrustTokenIssuerToplevelPairConfig::set_last_redemption(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  last_redemption_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:network.TrustTokenIssuerToplevelPairConfig.last_redemption)
}
inline std::string* TrustTokenIssuerToplevelPairConfig::mutable_last_redemption() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:network.TrustTokenIssuerToplevelPairConfig.last_redemption)
  return last_redemption_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrustTokenIssuerToplevelPairConfig::release_last_redemption() {
  // @@protoc_insertion_point(field_release:network.TrustTokenIssuerToplevelPairConfig.last_redemption)
  if (!has_last_redemption()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return last_redemption_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrustTokenIssuerToplevelPairConfig::set_allocated_last_redemption(std::string* last_redemption) {
  if (last_redemption != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  last_redemption_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_redemption);
  // @@protoc_insertion_point(field_set_allocated:network.TrustTokenIssuerToplevelPairConfig.last_redemption)
}

// optional .network.SignedTrustTokenRedemptionRecord signed_redemption_record = 2;
inline bool TrustTokenIssuerToplevelPairConfig::has_signed_redemption_record() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::network::SignedTrustTokenRedemptionRecord& TrustTokenIssuerToplevelPairConfig::signed_redemption_record() const {
  const ::network::SignedTrustTokenRedemptionRecord* p = signed_redemption_record_;
  // @@protoc_insertion_point(field_get:network.TrustTokenIssuerToplevelPairConfig.signed_redemption_record)
  return p != nullptr ? *p : *reinterpret_cast<const ::network::SignedTrustTokenRedemptionRecord*>(
      &::network::_SignedTrustTokenRedemptionRecord_default_instance_);
}
inline ::network::SignedTrustTokenRedemptionRecord* TrustTokenIssuerToplevelPairConfig::release_signed_redemption_record() {
  // @@protoc_insertion_point(field_release:network.TrustTokenIssuerToplevelPairConfig.signed_redemption_record)
  _has_bits_[0] &= ~0x00000002u;
  ::network::SignedTrustTokenRedemptionRecord* temp = signed_redemption_record_;
  signed_redemption_record_ = nullptr;
  return temp;
}
inline ::network::SignedTrustTokenRedemptionRecord* TrustTokenIssuerToplevelPairConfig::mutable_signed_redemption_record() {
  _has_bits_[0] |= 0x00000002u;
  if (signed_redemption_record_ == nullptr) {
    auto* p = CreateMaybeMessage<::network::SignedTrustTokenRedemptionRecord>(GetArenaNoVirtual());
    signed_redemption_record_ = p;
  }
  // @@protoc_insertion_point(field_mutable:network.TrustTokenIssuerToplevelPairConfig.signed_redemption_record)
  return signed_redemption_record_;
}
inline void TrustTokenIssuerToplevelPairConfig::set_allocated_signed_redemption_record(::network::SignedTrustTokenRedemptionRecord* signed_redemption_record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(signed_redemption_record_);
  }
  if (signed_redemption_record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      signed_redemption_record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signed_redemption_record, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  signed_redemption_record_ = signed_redemption_record;
  // @@protoc_insertion_point(field_set_allocated:network.TrustTokenIssuerToplevelPairConfig.signed_redemption_record)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace network

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_storage_2eproto

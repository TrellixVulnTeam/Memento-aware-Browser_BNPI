// services/network/public/mojom/cookie_access_observer.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_COOKIE_ACCESS_OBSERVER_MOJOM_PARAMS_DATA_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_COOKIE_ACCESS_OBSERVER_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace network {
namespace mojom {
namespace internal {
class  CookieAccessObserver_OnCookiesAccessed_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(CookieAccessObserver_OnCookiesAccessed_Params_Data));
      new (data()) CookieAccessObserver_OnCookiesAccessed_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    CookieAccessObserver_OnCookiesAccessed_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<CookieAccessObserver_OnCookiesAccessed_Params_Data>(index_);
    }
    CookieAccessObserver_OnCookiesAccessed_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::CookieAccessDetails_Data> details;

 private:
  CookieAccessObserver_OnCookiesAccessed_Params_Data();
  ~CookieAccessObserver_OnCookiesAccessed_Params_Data() = delete;
};
static_assert(sizeof(CookieAccessObserver_OnCookiesAccessed_Params_Data) == 16,
              "Bad sizeof(CookieAccessObserver_OnCookiesAccessed_Params_Data)");
class  CookieAccessObserver_Clone_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(CookieAccessObserver_Clone_Params_Data));
      new (data()) CookieAccessObserver_Clone_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    CookieAccessObserver_Clone_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<CookieAccessObserver_Clone_Params_Data>(index_);
    }
    CookieAccessObserver_Clone_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data listener;
  uint8_t padfinal_[4];

 private:
  CookieAccessObserver_Clone_Params_Data();
  ~CookieAccessObserver_Clone_Params_Data() = delete;
};
static_assert(sizeof(CookieAccessObserver_Clone_Params_Data) == 16,
              "Bad sizeof(CookieAccessObserver_Clone_Params_Data)");

}  // namespace internal
class CookieAccessObserver_OnCookiesAccessed_ParamsDataView {
 public:
  CookieAccessObserver_OnCookiesAccessed_ParamsDataView() {}

  CookieAccessObserver_OnCookiesAccessed_ParamsDataView(
      internal::CookieAccessObserver_OnCookiesAccessed_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDetailsDataView(
      CookieAccessDetailsDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDetails(UserType* output) {
    auto* pointer = data_->details.Get();
    return mojo::internal::Deserialize<::network::mojom::CookieAccessDetailsDataView>(
        pointer, output, context_);
  }
 private:
  internal::CookieAccessObserver_OnCookiesAccessed_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class CookieAccessObserver_Clone_ParamsDataView {
 public:
  CookieAccessObserver_Clone_ParamsDataView() {}

  CookieAccessObserver_Clone_ParamsDataView(
      internal::CookieAccessObserver_Clone_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeListener() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::CookieAccessObserverInterfaceBase>>(
            &data_->listener, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::CookieAccessObserver_Clone_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};


inline void CookieAccessObserver_OnCookiesAccessed_ParamsDataView::GetDetailsDataView(
    CookieAccessDetailsDataView* output) {
  auto pointer = data_->details.Get();
  *output = CookieAccessDetailsDataView(pointer, context_);
}



}  // namespace mojom
}  // namespace network

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_COOKIE_ACCESS_OBSERVER_MOJOM_PARAMS_DATA_H_
// services/network/public/mojom/host_resolver.mojom.externs.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.



/** @enum {number} */
network.mojom.OptionalSecureDnsMode = {};
network.mojom.OptionalSecureDnsMode.NO_OVERRIDE;
network.mojom.OptionalSecureDnsMode.OFF;
network.mojom.OptionalSecureDnsMode.AUTOMATIC;
network.mojom.OptionalSecureDnsMode.SECURE;
/** @enum {number} */
network.mojom.SecureDnsMode = {};
network.mojom.SecureDnsMode.OFF;
network.mojom.SecureDnsMode.AUTOMATIC;
network.mojom.SecureDnsMode.SECURE;
/** @enum {number} */
network.mojom.DnsQueryType = {};
network.mojom.DnsQueryType.UNSPECIFIED;
network.mojom.DnsQueryType.A;
network.mojom.DnsQueryType.AAAA;
network.mojom.DnsQueryType.TXT;
network.mojom.DnsQueryType.PTR;
network.mojom.DnsQueryType.SRV;
goog.provide('network.mojom.ResolveHostHandle');
goog.provide('network.mojom.ResolveHostHandleImpl');
goog.provide('network.mojom.ResolveHostHandlePtr');



/**
 * @const
 * @type { !mojo.Interface };
 */
network.mojom.ResolveHostHandle;

/** @interface */
network.mojom.ResolveHostHandleImpl = class {
  /**
   * @param { !number } result
   */
  cancel(result) {}
};

/**
 * @implements { mojo.InterfacePtr }
 * @implements { network.mojom.ResolveHostHandleImpl }
 */
network.mojom.ResolveHostHandlePtr = class {
  /**
   * @param { !number } result
   */
  cancel(result) {}
};

goog.provide('network.mojom.ResolveHostClient');
goog.provide('network.mojom.ResolveHostClientImpl');
goog.provide('network.mojom.ResolveHostClientPtr');



/**
 * @const
 * @type { !mojo.Interface };
 */
network.mojom.ResolveHostClient;

/** @interface */
network.mojom.ResolveHostClientImpl = class {
  /**
   * @param { !number } result
   * @param { !network.mojom.ResolveErrorInfo } resolveErrorInfo
   * @param { network.mojom.AddressList } resolvedAddresses
   */
  onComplete(result, resolveErrorInfo, resolvedAddresses) {}
  /**
   * @param { !Array<string> } textResults
   */
  onTextResults(textResults) {}
  /**
   * @param { !Array<network.mojom.HostPortPair> } hosts
   */
  onHostnameResults(hosts) {}
};

/**
 * @implements { mojo.InterfacePtr }
 * @implements { network.mojom.ResolveHostClientImpl }
 */
network.mojom.ResolveHostClientPtr = class {
  /**
   * @param { !number } result
   * @param { !network.mojom.ResolveErrorInfo } resolveErrorInfo
   * @param { network.mojom.AddressList } resolvedAddresses
   */
  onComplete(result, resolveErrorInfo, resolvedAddresses) {}
  /**
   * @param { !Array<string> } textResults
   */
  onTextResults(textResults) {}
  /**
   * @param { !Array<network.mojom.HostPortPair> } hosts
   */
  onHostnameResults(hosts) {}
};

goog.provide('network.mojom.MdnsListenClient');
goog.provide('network.mojom.MdnsListenClientImpl');
goog.provide('network.mojom.MdnsListenClientPtr');



/**
 * @const
 * @type { !mojo.Interface };
 */
network.mojom.MdnsListenClient;

/** @interface */
network.mojom.MdnsListenClientImpl = class {
  /**
   * @param { !network.mojom.UpdateType } updateType
   * @param { !network.mojom.DnsQueryType } queryType
   * @param { !network.mojom.IPEndPoint } endpoint
   */
  onAddressResult(updateType, queryType, endpoint) {}
  /**
   * @param { !network.mojom.UpdateType } updateType
   * @param { !network.mojom.DnsQueryType } queryType
   * @param { !Array<string> } textRecords
   */
  onTextResult(updateType, queryType, textRecords) {}
  /**
   * @param { !network.mojom.UpdateType } updateType
   * @param { !network.mojom.DnsQueryType } queryType
   * @param { !network.mojom.HostPortPair } host
   */
  onHostnameResult(updateType, queryType, host) {}
  /**
   * @param { !network.mojom.UpdateType } updateType
   * @param { !network.mojom.DnsQueryType } queryType
   */
  onUnhandledResult(updateType, queryType) {}
};

/**
 * @implements { mojo.InterfacePtr }
 * @implements { network.mojom.MdnsListenClientImpl }
 */
network.mojom.MdnsListenClientPtr = class {
  /**
   * @param { !network.mojom.UpdateType } updateType
   * @param { !network.mojom.DnsQueryType } queryType
   * @param { !network.mojom.IPEndPoint } endpoint
   */
  onAddressResult(updateType, queryType, endpoint) {}
  /**
   * @param { !network.mojom.UpdateType } updateType
   * @param { !network.mojom.DnsQueryType } queryType
   * @param { !Array<string> } textRecords
   */
  onTextResult(updateType, queryType, textRecords) {}
  /**
   * @param { !network.mojom.UpdateType } updateType
   * @param { !network.mojom.DnsQueryType } queryType
   * @param { !network.mojom.HostPortPair } host
   */
  onHostnameResult(updateType, queryType, host) {}
  /**
   * @param { !network.mojom.UpdateType } updateType
   * @param { !network.mojom.DnsQueryType } queryType
   */
  onUnhandledResult(updateType, queryType) {}
};

goog.provide('network.mojom.HostResolver');
goog.provide('network.mojom.HostResolverImpl');
goog.provide('network.mojom.HostResolverPtr');



/**
 * @const
 * @type { !mojo.Interface };
 */
network.mojom.HostResolver;

/** @interface */
network.mojom.HostResolverImpl = class {
  /**
   * @param { !network.mojom.HostPortPair } host
   * @param { !network.mojom.NetworkIsolationKey } networkIsolationKey
   * @param { network.mojom.ResolveHostParameters } optionalParameters
   * @param { !network.mojom.ResolveHostClientPtr } responseClient
   */
  resolveHost(host, networkIsolationKey, optionalParameters, responseClient) {}
  /**
   * @param { !network.mojom.HostPortPair } host
   * @param { !network.mojom.DnsQueryType } queryType
   * @param { !network.mojom.MdnsListenClientPtr } responseClient
   * @return {Promise}
   */
  mdnsListen(host, queryType, responseClient) {}
};

/**
 * @implements { mojo.InterfacePtr }
 * @implements { network.mojom.HostResolverImpl }
 */
network.mojom.HostResolverPtr = class {
  /**
   * @param { !network.mojom.HostPortPair } host
   * @param { !network.mojom.NetworkIsolationKey } networkIsolationKey
   * @param { network.mojom.ResolveHostParameters } optionalParameters
   * @param { !network.mojom.ResolveHostClientPtr } responseClient
   */
  resolveHost(host, networkIsolationKey, optionalParameters, responseClient) {}
  /**
   * @param { !network.mojom.HostPortPair } host
   * @param { !network.mojom.DnsQueryType } queryType
   * @param { !network.mojom.MdnsListenClientPtr } responseClient
   * @return {Promise}
   */
  mdnsListen(host, queryType, responseClient) {}
};

goog.provide('network.mojom.DnsConfigChangeManagerClient');
goog.provide('network.mojom.DnsConfigChangeManagerClientImpl');
goog.provide('network.mojom.DnsConfigChangeManagerClientPtr');



/**
 * @const
 * @type { !mojo.Interface };
 */
network.mojom.DnsConfigChangeManagerClient;

/** @interface */
network.mojom.DnsConfigChangeManagerClientImpl = class {
  /**
   */
  onDnsConfigChanged() {}
};

/**
 * @implements { mojo.InterfacePtr }
 * @implements { network.mojom.DnsConfigChangeManagerClientImpl }
 */
network.mojom.DnsConfigChangeManagerClientPtr = class {
  /**
   */
  onDnsConfigChanged() {}
};

goog.provide('network.mojom.DnsConfigChangeManager');
goog.provide('network.mojom.DnsConfigChangeManagerImpl');
goog.provide('network.mojom.DnsConfigChangeManagerPtr');



/**
 * @const
 * @type { !mojo.Interface };
 */
network.mojom.DnsConfigChangeManager;

/** @interface */
network.mojom.DnsConfigChangeManagerImpl = class {
  /**
   * @param { !network.mojom.DnsConfigChangeManagerClientPtr } client
   */
  requestNotifications(client) {}
};

/**
 * @implements { mojo.InterfacePtr }
 * @implements { network.mojom.DnsConfigChangeManagerImpl }
 */
network.mojom.DnsConfigChangeManagerPtr = class {
  /**
   * @param { !network.mojom.DnsConfigChangeManagerClientPtr } client
   */
  requestNotifications(client) {}
};

goog.provide('network.mojom.DnsHost');

network.mojom.DnsHost = class {
  constructor() {
    /** @type { !string } */
    this.hostname;
    /** @type { !network.mojom.IPAddress } */
    this.address;
  }
};

goog.provide('network.mojom.DnsOverHttpsServer');

network.mojom.DnsOverHttpsServer = class {
  constructor() {
    /** @type { !string } */
    this.serverTemplate;
    /** @type { !boolean } */
    this.usePost;
  }
};

goog.provide('network.mojom.DnsConfigOverrides');

network.mojom.DnsConfigOverrides = class {
  constructor() {
    /** @type { Array<network.mojom.IPEndPoint> } */
    this.nameservers;
    /** @type { Array<string> } */
    this.search;
    /** @type { Array<network.mojom.DnsHost> } */
    this.hosts;
    /** @type { !network.mojom.Tristate } */
    this.appendToMultiLabelName;
    /** @type { !network.mojom.Tristate } */
    this.randomizePorts;
    /** @type { !number } */
    this.ndots;
    /** @type { !number } */
    this.attempts;
    /** @type { mojoBase.mojom.TimeDelta } */
    this.timeout;
    /** @type { !network.mojom.Tristate } */
    this.rotate;
    /** @type { !network.mojom.Tristate } */
    this.useLocalIpv6;
    /** @type { Array<network.mojom.DnsOverHttpsServer> } */
    this.dnsOverHttpsServers;
    /** @type { !network.mojom.OptionalSecureDnsMode } */
    this.secureDnsMode;
    /** @type { !network.mojom.Tristate } */
    this.allowDnsOverHttpsUpgrade;
    /** @type { Array<string> } */
    this.disabledUpgradeProviders;
  }
};

goog.provide('network.mojom.ResolveErrorInfo');

network.mojom.ResolveErrorInfo = class {
  constructor() {
    /** @type { !number } */
    this.error;
    /** @type { !boolean } */
    this.isSecureNetworkError;
  }
};

goog.provide('network.mojom.ResolveHostParameters');

network.mojom.ResolveHostParameters = class {
  constructor() {
    /** @type { !network.mojom.DnsQueryType } */
    this.dnsQueryType;
    /** @type { !network.mojom.RequestPriority } */
    this.initialPriority;
    /** @type { !network.mojom.Source } */
    this.source;
    /** @type { !network.mojom.CacheUsage } */
    this.cacheUsage;
    /** @type { mojo.InterfaceRequest } */
    this.controlHandle;
    /** @type { !boolean } */
    this.includeCanonicalName;
    /** @type { !boolean } */
    this.loopbackOnly;
    /** @type { !boolean } */
    this.isSpeculative;
    /** @type { !network.mojom.OptionalSecureDnsMode } */
    this.secureDnsModeOverride;
  }
};

goog.provide('network.mojom.ResolveHostHandle_Cancel_Params');

network.mojom.ResolveHostHandle_Cancel_Params = class {
  constructor() {
    /** @type { !number } */
    this.result;
  }
};

goog.provide('network.mojom.ResolveHostClient_OnComplete_Params');

network.mojom.ResolveHostClient_OnComplete_Params = class {
  constructor() {
    /** @type { !number } */
    this.result;
    /** @type { !network.mojom.ResolveErrorInfo } */
    this.resolveErrorInfo;
    /** @type { network.mojom.AddressList } */
    this.resolvedAddresses;
  }
};

goog.provide('network.mojom.ResolveHostClient_OnTextResults_Params');

network.mojom.ResolveHostClient_OnTextResults_Params = class {
  constructor() {
    /** @type { !Array<string> } */
    this.textResults;
  }
};

goog.provide('network.mojom.ResolveHostClient_OnHostnameResults_Params');

network.mojom.ResolveHostClient_OnHostnameResults_Params = class {
  constructor() {
    /** @type { !Array<network.mojom.HostPortPair> } */
    this.hosts;
  }
};

goog.provide('network.mojom.MdnsListenClient_OnAddressResult_Params');

network.mojom.MdnsListenClient_OnAddressResult_Params = class {
  constructor() {
    /** @type { !network.mojom.UpdateType } */
    this.updateType;
    /** @type { !network.mojom.DnsQueryType } */
    this.queryType;
    /** @type { !network.mojom.IPEndPoint } */
    this.endpoint;
  }
};

goog.provide('network.mojom.MdnsListenClient_OnTextResult_Params');

network.mojom.MdnsListenClient_OnTextResult_Params = class {
  constructor() {
    /** @type { !network.mojom.UpdateType } */
    this.updateType;
    /** @type { !network.mojom.DnsQueryType } */
    this.queryType;
    /** @type { !Array<string> } */
    this.textRecords;
  }
};

goog.provide('network.mojom.MdnsListenClient_OnHostnameResult_Params');

network.mojom.MdnsListenClient_OnHostnameResult_Params = class {
  constructor() {
    /** @type { !network.mojom.UpdateType } */
    this.updateType;
    /** @type { !network.mojom.DnsQueryType } */
    this.queryType;
    /** @type { !network.mojom.HostPortPair } */
    this.host;
  }
};

goog.provide('network.mojom.MdnsListenClient_OnUnhandledResult_Params');

network.mojom.MdnsListenClient_OnUnhandledResult_Params = class {
  constructor() {
    /** @type { !network.mojom.UpdateType } */
    this.updateType;
    /** @type { !network.mojom.DnsQueryType } */
    this.queryType;
  }
};

goog.provide('network.mojom.HostResolver_ResolveHost_Params');

network.mojom.HostResolver_ResolveHost_Params = class {
  constructor() {
    /** @type { !network.mojom.HostPortPair } */
    this.host;
    /** @type { !network.mojom.NetworkIsolationKey } */
    this.networkIsolationKey;
    /** @type { network.mojom.ResolveHostParameters } */
    this.optionalParameters;
    /** @type { !network.mojom.ResolveHostClientPtr } */
    this.responseClient;
  }
};

goog.provide('network.mojom.HostResolver_MdnsListen_Params');

network.mojom.HostResolver_MdnsListen_Params = class {
  constructor() {
    /** @type { !network.mojom.HostPortPair } */
    this.host;
    /** @type { !network.mojom.DnsQueryType } */
    this.queryType;
    /** @type { !network.mojom.MdnsListenClientPtr } */
    this.responseClient;
  }
};

goog.provide('network.mojom.HostResolver_MdnsListen_ResponseParams');

network.mojom.HostResolver_MdnsListen_ResponseParams = class {
  constructor() {
    /** @type { !number } */
    this.result;
  }
};

goog.provide('network.mojom.DnsConfigChangeManagerClient_OnDnsConfigChanged_Params');

network.mojom.DnsConfigChangeManagerClient_OnDnsConfigChanged_Params = class {
  constructor() {
  }
};

goog.provide('network.mojom.DnsConfigChangeManager_RequestNotifications_Params');

network.mojom.DnsConfigChangeManager_RequestNotifications_Params = class {
  constructor() {
    /** @type { !network.mojom.DnsConfigChangeManagerClientPtr } */
    this.client;
  }
};

// services/network/public/mojom/p2p.mojom.externs.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.



/** @enum {number} */
network.mojom.P2PSocketType = {};
/** @enum {number} */
network.mojom.P2PSocketOption = {};
goog.provide('network.mojom.P2PNetworkNotificationClient');
goog.provide('network.mojom.P2PNetworkNotificationClientImpl');
goog.provide('network.mojom.P2PNetworkNotificationClientPtr');



/**
 * @const
 * @type { !mojo.Interface };
 */
network.mojom.P2PNetworkNotificationClient;

/** @interface */
network.mojom.P2PNetworkNotificationClientImpl = class {
  /**
   * @param { !Array<network.mojom.NetworkInterface> } networks
   * @param { !network.mojom.IPAddress } defaultIpv4LocalAddress
   * @param { !network.mojom.IPAddress } defaultIpv6LocalAddress
   */
  networkListChanged(networks, defaultIpv4LocalAddress, defaultIpv6LocalAddress) {}
};

/**
 * @implements { mojo.InterfacePtr }
 * @implements { network.mojom.P2PNetworkNotificationClientImpl }
 */
network.mojom.P2PNetworkNotificationClientPtr = class {
  /**
   * @param { !Array<network.mojom.NetworkInterface> } networks
   * @param { !network.mojom.IPAddress } defaultIpv4LocalAddress
   * @param { !network.mojom.IPAddress } defaultIpv6LocalAddress
   */
  networkListChanged(networks, defaultIpv4LocalAddress, defaultIpv6LocalAddress) {}
};

goog.provide('network.mojom.P2PSocketManager');
goog.provide('network.mojom.P2PSocketManagerImpl');
goog.provide('network.mojom.P2PSocketManagerPtr');



/**
 * @const
 * @type { !mojo.Interface };
 */
network.mojom.P2PSocketManager;

/** @interface */
network.mojom.P2PSocketManagerImpl = class {
  /**
   * @param { !network.mojom.P2PNetworkNotificationClientPtr } client
   */
  startNetworkNotifications(client) {}
  /**
   * @param { !string } hostName
   * @param { !boolean } enableMdns
   * @return {Promise}
   */
  getHostAddress(hostName, enableMdns) {}
  /**
   * @param { !network.mojom.P2PSocketType } type
   * @param { !network.mojom.IPEndPoint } localAddress
   * @param { !network.mojom.P2PPortRange } portRange
   * @param { !network.mojom.P2PHostAndIPEndPoint } remoteAddress
   * @param { !network.mojom.P2PSocketClientPtr } client
   * @param { !mojo.InterfaceRequest } socket
   */
  createSocket(type, localAddress, portRange, remoteAddress, client, socket) {}
};

/**
 * @implements { mojo.InterfacePtr }
 * @implements { network.mojom.P2PSocketManagerImpl }
 */
network.mojom.P2PSocketManagerPtr = class {
  /**
   * @param { !network.mojom.P2PNetworkNotificationClientPtr } client
   */
  startNetworkNotifications(client) {}
  /**
   * @param { !string } hostName
   * @param { !boolean } enableMdns
   * @return {Promise}
   */
  getHostAddress(hostName, enableMdns) {}
  /**
   * @param { !network.mojom.P2PSocketType } type
   * @param { !network.mojom.IPEndPoint } localAddress
   * @param { !network.mojom.P2PPortRange } portRange
   * @param { !network.mojom.P2PHostAndIPEndPoint } remoteAddress
   * @param { !network.mojom.P2PSocketClientPtr } client
   * @param { !mojo.InterfaceRequest } socket
   */
  createSocket(type, localAddress, portRange, remoteAddress, client, socket) {}
};

goog.provide('network.mojom.P2PSocket');
goog.provide('network.mojom.P2PSocketImpl');
goog.provide('network.mojom.P2PSocketPtr');



/**
 * @const
 * @type { !mojo.Interface };
 */
network.mojom.P2PSocket;

/** @interface */
network.mojom.P2PSocketImpl = class {
  /**
   * @param { !Array<number> } data
   * @param { !network.mojom.P2PPacketInfo } packetInfo
   * @param { !network.mojom.MutableNetworkTrafficAnnotationTag } trafficAnnotation
   */
  send(data, packetInfo, trafficAnnotation) {}
  /**
   * @param { !network.mojom.P2PSocketOption } option
   * @param { !number } value
   */
  setOption(option, value) {}
};

/**
 * @implements { mojo.InterfacePtr }
 * @implements { network.mojom.P2PSocketImpl }
 */
network.mojom.P2PSocketPtr = class {
  /**
   * @param { !Array<number> } data
   * @param { !network.mojom.P2PPacketInfo } packetInfo
   * @param { !network.mojom.MutableNetworkTrafficAnnotationTag } trafficAnnotation
   */
  send(data, packetInfo, trafficAnnotation) {}
  /**
   * @param { !network.mojom.P2PSocketOption } option
   * @param { !number } value
   */
  setOption(option, value) {}
};

goog.provide('network.mojom.P2PSocketClient');
goog.provide('network.mojom.P2PSocketClientImpl');
goog.provide('network.mojom.P2PSocketClientPtr');



/**
 * @const
 * @type { !mojo.Interface };
 */
network.mojom.P2PSocketClient;

/** @interface */
network.mojom.P2PSocketClientImpl = class {
  /**
   * @param { !network.mojom.IPEndPoint } localAddress
   * @param { !network.mojom.IPEndPoint } remoteAddress
   */
  socketCreated(localAddress, remoteAddress) {}
  /**
   * @param { !network.mojom.P2PSendPacketMetrics } sendMetrics
   */
  sendComplete(sendMetrics) {}
  /**
   * @param { !network.mojom.IPEndPoint } socketAddress
   * @param { !network.mojom.P2PSocketPtr } socket
   * @param { !mojo.InterfaceRequest } client
   */
  incomingTcpConnection(socketAddress, socket, client) {}
  /**
   * @param { !network.mojom.IPEndPoint } socketAddress
   * @param { !Array<number> } data
   * @param { !mojoBase.mojom.TimeTicks } timestamp
   */
  dataReceived(socketAddress, data, timestamp) {}
};

/**
 * @implements { mojo.InterfacePtr }
 * @implements { network.mojom.P2PSocketClientImpl }
 */
network.mojom.P2PSocketClientPtr = class {
  /**
   * @param { !network.mojom.IPEndPoint } localAddress
   * @param { !network.mojom.IPEndPoint } remoteAddress
   */
  socketCreated(localAddress, remoteAddress) {}
  /**
   * @param { !network.mojom.P2PSendPacketMetrics } sendMetrics
   */
  sendComplete(sendMetrics) {}
  /**
   * @param { !network.mojom.IPEndPoint } socketAddress
   * @param { !network.mojom.P2PSocketPtr } socket
   * @param { !mojo.InterfaceRequest } client
   */
  incomingTcpConnection(socketAddress, socket, client) {}
  /**
   * @param { !network.mojom.IPEndPoint } socketAddress
   * @param { !Array<number> } data
   * @param { !mojoBase.mojom.TimeTicks } timestamp
   */
  dataReceived(socketAddress, data, timestamp) {}
};

goog.provide('network.mojom.P2PHostAndIPEndPoint');

network.mojom.P2PHostAndIPEndPoint = class {
  constructor() {
  }
};

goog.provide('network.mojom.P2PPacketInfo');

network.mojom.P2PPacketInfo = class {
  constructor() {
  }
};

goog.provide('network.mojom.P2PPortRange');

network.mojom.P2PPortRange = class {
  constructor() {
  }
};

goog.provide('network.mojom.P2PSendPacketMetrics');

network.mojom.P2PSendPacketMetrics = class {
  constructor() {
  }
};

goog.provide('network.mojom.P2PNetworkNotificationClient_NetworkListChanged_Params');

network.mojom.P2PNetworkNotificationClient_NetworkListChanged_Params = class {
  constructor() {
    /** @type { !Array<network.mojom.NetworkInterface> } */
    this.networks;
    /** @type { !network.mojom.IPAddress } */
    this.defaultIpv4LocalAddress;
    /** @type { !network.mojom.IPAddress } */
    this.defaultIpv6LocalAddress;
  }
};

goog.provide('network.mojom.P2PSocketManager_StartNetworkNotifications_Params');

network.mojom.P2PSocketManager_StartNetworkNotifications_Params = class {
  constructor() {
    /** @type { !network.mojom.P2PNetworkNotificationClientPtr } */
    this.client;
  }
};

goog.provide('network.mojom.P2PSocketManager_GetHostAddress_Params');

network.mojom.P2PSocketManager_GetHostAddress_Params = class {
  constructor() {
    /** @type { !string } */
    this.hostName;
    /** @type { !boolean } */
    this.enableMdns;
  }
};

goog.provide('network.mojom.P2PSocketManager_GetHostAddress_ResponseParams');

network.mojom.P2PSocketManager_GetHostAddress_ResponseParams = class {
  constructor() {
    /** @type { !Array<network.mojom.IPAddress> } */
    this.addresses;
  }
};

goog.provide('network.mojom.P2PSocketManager_CreateSocket_Params');

network.mojom.P2PSocketManager_CreateSocket_Params = class {
  constructor() {
    /** @type { !network.mojom.P2PSocketType } */
    this.type;
    /** @type { !mojo.InterfaceRequest } */
    this.socket;
    /** @type { !network.mojom.IPEndPoint } */
    this.localAddress;
    /** @type { !network.mojom.P2PPortRange } */
    this.portRange;
    /** @type { !network.mojom.P2PHostAndIPEndPoint } */
    this.remoteAddress;
    /** @type { !network.mojom.P2PSocketClientPtr } */
    this.client;
  }
};

goog.provide('network.mojom.P2PSocket_Send_Params');

network.mojom.P2PSocket_Send_Params = class {
  constructor() {
    /** @type { !Array<number> } */
    this.data;
    /** @type { !network.mojom.P2PPacketInfo } */
    this.packetInfo;
    /** @type { !network.mojom.MutableNetworkTrafficAnnotationTag } */
    this.trafficAnnotation;
  }
};

goog.provide('network.mojom.P2PSocket_SetOption_Params');

network.mojom.P2PSocket_SetOption_Params = class {
  constructor() {
    /** @type { !network.mojom.P2PSocketOption } */
    this.option;
    /** @type { !number } */
    this.value;
  }
};

goog.provide('network.mojom.P2PSocketClient_SocketCreated_Params');

network.mojom.P2PSocketClient_SocketCreated_Params = class {
  constructor() {
    /** @type { !network.mojom.IPEndPoint } */
    this.localAddress;
    /** @type { !network.mojom.IPEndPoint } */
    this.remoteAddress;
  }
};

goog.provide('network.mojom.P2PSocketClient_SendComplete_Params');

network.mojom.P2PSocketClient_SendComplete_Params = class {
  constructor() {
    /** @type { !network.mojom.P2PSendPacketMetrics } */
    this.sendMetrics;
  }
};

goog.provide('network.mojom.P2PSocketClient_IncomingTcpConnection_Params');

network.mojom.P2PSocketClient_IncomingTcpConnection_Params = class {
  constructor() {
    /** @type { !network.mojom.IPEndPoint } */
    this.socketAddress;
    /** @type { !network.mojom.P2PSocketPtr } */
    this.socket;
    /** @type { !mojo.InterfaceRequest } */
    this.client;
  }
};

goog.provide('network.mojom.P2PSocketClient_DataReceived_Params');

network.mojom.P2PSocketClient_DataReceived_Params = class {
  constructor() {
    /** @type { !network.mojom.IPEndPoint } */
    this.socketAddress;
    /** @type { !Array<number> } */
    this.data;
    /** @type { !mojoBase.mojom.TimeTicks } */
    this.timestamp;
  }
};

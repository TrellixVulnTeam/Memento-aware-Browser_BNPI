// services/network/public/mojom/tls_socket.mojom-lite-for-compile.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';

goog.require('mojo.internal');
goog.require('mojo.internal.interfaceSupport');

goog.require('network.mojom.SSLVersion');






goog.provide('network.mojom.TLSClientSocket');
goog.provide('network.mojom.TLSClientSocketReceiver');
goog.provide('network.mojom.TLSClientSocketCallbackRouter');
goog.provide('network.mojom.TLSClientSocketInterface');
goog.provide('network.mojom.TLSClientSocketRemote');
goog.provide('network.mojom.TLSClientSocketPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
network.mojom.TLSClientSocketPendingReceiver = class {
  /** @param {!MojoHandle} handle */
  constructor(handle) {
    /** @public {!MojoHandle} */
    this.handle = handle;
  }
};

/** @interface */
network.mojom.TLSClientSocketInterface = class {
};

/**
 * @export
 * @implements { network.mojom.TLSClientSocketInterface }
 */
network.mojom.TLSClientSocketRemote = class {
  /** @param {MojoHandle=} opt_handle */
  constructor(opt_handle) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!network.mojom.TLSClientSocketPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          network.mojom.TLSClientSocketPendingReceiver,
          opt_handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!network.mojom.TLSClientSocketPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }
};

/**
 * An object which receives request messages for the TLSClientSocket
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
network.mojom.TLSClientSocketReceiver = class {
  /**
   * @param {!network.mojom.TLSClientSocketInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!network.mojom.TLSClientSocketRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        network.mojom.TLSClientSocketRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!network.mojom.TLSClientSocketRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
network.mojom.TLSClientSocket = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "network.mojom.TLSClientSocket";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!network.mojom.TLSClientSocketRemote}
   * @export
   */
  static getRemote() {
    let remote = new network.mojom.TLSClientSocketRemote;
    Mojo.bindInterface(this.$interfaceName,
                       remote.$.bindNewPipeAndPassReceiver().handle);
    return remote;
  }
};


/**
 * An object which receives request messages for the TLSClientSocket
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
network.mojom.TLSClientSocketCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      network.mojom.TLSClientSocketRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!network.mojom.TLSClientSocketRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('network.mojom.TLSClientSocketOptionsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
network.mojom.TLSClientSocketOptionsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    network.mojom.TLSClientSocketOptionsSpec.$,
    'TLSClientSocketOptions',
    16,
    [
      mojo.internal.StructField(
        'versionMin', 0,
        0,
        network.mojom.SSLVersionSpec.$,
        network.mojom.SSLVersion.kTLS1,
        false /* nullable */),
      mojo.internal.StructField(
        'versionMax', 4,
        0,
        network.mojom.SSLVersionSpec.$,
        network.mojom.SSLVersion.kTLS13,
        false /* nullable */),
      mojo.internal.StructField(
        'sendSslInfo', 8,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'unsafelySkipCertVerification', 8,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ]);



goog.provide('network.mojom.TLSClientSocketOptions');

/** @record */
network.mojom.TLSClientSocketOptions = class {
  constructor() {
    /** @type { !network.mojom.SSLVersion } */
    this.versionMin;
    /** @type { !network.mojom.SSLVersion } */
    this.versionMax;
    /** @type { !boolean } */
    this.sendSslInfo;
    /** @type { !boolean } */
    this.unsafelySkipCertVerification;
  }
};


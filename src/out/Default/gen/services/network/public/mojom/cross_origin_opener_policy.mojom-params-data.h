// services/network/public/mojom/cross_origin_opener_policy.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_CROSS_ORIGIN_OPENER_POLICY_MOJOM_PARAMS_DATA_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_CROSS_ORIGIN_OPENER_POLICY_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace network {
namespace mojom {
namespace internal {
class  CrossOriginOpenerPolicyReporter_QueueOpenerBreakageReport_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(CrossOriginOpenerPolicyReporter_QueueOpenerBreakageReport_Params_Data));
      new (data()) CrossOriginOpenerPolicyReporter_QueueOpenerBreakageReport_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    CrossOriginOpenerPolicyReporter_QueueOpenerBreakageReport_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<CrossOriginOpenerPolicyReporter_QueueOpenerBreakageReport_Params_Data>(index_);
    }
    CrossOriginOpenerPolicyReporter_QueueOpenerBreakageReport_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> other_url;
  uint8_t is_reported_from_document : 1;
  uint8_t is_report_only : 1;
  uint8_t padfinal_[7];

 private:
  CrossOriginOpenerPolicyReporter_QueueOpenerBreakageReport_Params_Data();
  ~CrossOriginOpenerPolicyReporter_QueueOpenerBreakageReport_Params_Data() = delete;
};
static_assert(sizeof(CrossOriginOpenerPolicyReporter_QueueOpenerBreakageReport_Params_Data) == 24,
              "Bad sizeof(CrossOriginOpenerPolicyReporter_QueueOpenerBreakageReport_Params_Data)");
class  CrossOriginOpenerPolicyReporter_Clone_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(CrossOriginOpenerPolicyReporter_Clone_Params_Data));
      new (data()) CrossOriginOpenerPolicyReporter_Clone_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    CrossOriginOpenerPolicyReporter_Clone_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<CrossOriginOpenerPolicyReporter_Clone_Params_Data>(index_);
    }
    CrossOriginOpenerPolicyReporter_Clone_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  CrossOriginOpenerPolicyReporter_Clone_Params_Data();
  ~CrossOriginOpenerPolicyReporter_Clone_Params_Data() = delete;
};
static_assert(sizeof(CrossOriginOpenerPolicyReporter_Clone_Params_Data) == 16,
              "Bad sizeof(CrossOriginOpenerPolicyReporter_Clone_Params_Data)");

}  // namespace internal
class CrossOriginOpenerPolicyReporter_QueueOpenerBreakageReport_ParamsDataView {
 public:
  CrossOriginOpenerPolicyReporter_QueueOpenerBreakageReport_ParamsDataView() {}

  CrossOriginOpenerPolicyReporter_QueueOpenerBreakageReport_ParamsDataView(
      internal::CrossOriginOpenerPolicyReporter_QueueOpenerBreakageReport_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetOtherUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadOtherUrl(UserType* output) {
    auto* pointer = data_->other_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, context_);
  }
  bool is_reported_from_document() const {
    return data_->is_reported_from_document;
  }
  bool is_report_only() const {
    return data_->is_report_only;
  }
 private:
  internal::CrossOriginOpenerPolicyReporter_QueueOpenerBreakageReport_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class CrossOriginOpenerPolicyReporter_Clone_ParamsDataView {
 public:
  CrossOriginOpenerPolicyReporter_Clone_ParamsDataView() {}

  CrossOriginOpenerPolicyReporter_Clone_ParamsDataView(
      internal::CrossOriginOpenerPolicyReporter_Clone_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::CrossOriginOpenerPolicyReporterInterfaceBase>>(
            &data_->receiver, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::CrossOriginOpenerPolicyReporter_Clone_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};


inline void CrossOriginOpenerPolicyReporter_QueueOpenerBreakageReport_ParamsDataView::GetOtherUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->other_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, context_);
}



}  // namespace mojom
}  // namespace network

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_CROSS_ORIGIN_OPENER_POLICY_MOJOM_PARAMS_DATA_H_
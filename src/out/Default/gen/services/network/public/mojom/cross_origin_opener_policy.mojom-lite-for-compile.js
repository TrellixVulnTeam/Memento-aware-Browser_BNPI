// services/network/public/mojom/cross_origin_opener_policy.mojom-lite-for-compile.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';

goog.require('mojo.internal');
goog.require('mojo.internal.interfaceSupport');

goog.require('url.mojom.Url');




goog.provide('network.mojom.CrossOriginOpenerPolicyValue');
goog.provide('network.mojom.CrossOriginOpenerPolicyValueSpec');
/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
network.mojom.CrossOriginOpenerPolicyValueSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
network.mojom.CrossOriginOpenerPolicyValue = {
  
  kSameOrigin: 0,
  kSameOriginAllowPopups: 1,
  kUnsafeNone: 2,
  MIN_VALUE: 0,
  MAX_VALUE: 2,
};



goog.provide('network.mojom.CrossOriginOpenerPolicyReporter');
goog.provide('network.mojom.CrossOriginOpenerPolicyReporterReceiver');
goog.provide('network.mojom.CrossOriginOpenerPolicyReporterCallbackRouter');
goog.provide('network.mojom.CrossOriginOpenerPolicyReporterInterface');
goog.provide('network.mojom.CrossOriginOpenerPolicyReporterRemote');
goog.provide('network.mojom.CrossOriginOpenerPolicyReporterPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
network.mojom.CrossOriginOpenerPolicyReporterPendingReceiver = class {
  /** @param {!MojoHandle} handle */
  constructor(handle) {
    /** @public {!MojoHandle} */
    this.handle = handle;
  }
};

/** @interface */
network.mojom.CrossOriginOpenerPolicyReporterInterface = class {
  
  /**
   * @param { !url.mojom.Url } otherUrl
   * @param { !boolean } isReportedFromDocument
   * @param { !boolean } isReportOnly
   */

  queueOpenerBreakageReport(otherUrl, isReportedFromDocument, isReportOnly) {}
  
  /**
   * @param { !network.mojom.CrossOriginOpenerPolicyReporterPendingReceiver } receiver
   */

  clone(receiver) {}
};

/**
 * @export
 * @implements { network.mojom.CrossOriginOpenerPolicyReporterInterface }
 */
network.mojom.CrossOriginOpenerPolicyReporterRemote = class {
  /** @param {MojoHandle=} opt_handle */
  constructor(opt_handle) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!network.mojom.CrossOriginOpenerPolicyReporterPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          network.mojom.CrossOriginOpenerPolicyReporterPendingReceiver,
          opt_handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!network.mojom.CrossOriginOpenerPolicyReporterPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !url.mojom.Url } otherUrl
   * @param { !boolean } isReportedFromDocument
   * @param { !boolean } isReportOnly
   */

  queueOpenerBreakageReport(
      otherUrl,
      isReportedFromDocument,
      isReportOnly) {
    this.proxy.sendMessage(
        1634261344,
        network.mojom.CrossOriginOpenerPolicyReporter_QueueOpenerBreakageReport_ParamsSpec.$,
        null,
        [
          otherUrl,
          isReportedFromDocument,
          isReportOnly
        ]);
  }

  
  /**
   * @param { !network.mojom.CrossOriginOpenerPolicyReporterPendingReceiver } receiver
   */

  clone(
      receiver) {
    this.proxy.sendMessage(
        946186888,
        network.mojom.CrossOriginOpenerPolicyReporter_Clone_ParamsSpec.$,
        null,
        [
          receiver
        ]);
  }
};

/**
 * An object which receives request messages for the CrossOriginOpenerPolicyReporter
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
network.mojom.CrossOriginOpenerPolicyReporterReceiver = class {
  /**
   * @param {!network.mojom.CrossOriginOpenerPolicyReporterInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!network.mojom.CrossOriginOpenerPolicyReporterRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        network.mojom.CrossOriginOpenerPolicyReporterRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!network.mojom.CrossOriginOpenerPolicyReporterRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        1634261344,
        network.mojom.CrossOriginOpenerPolicyReporter_QueueOpenerBreakageReport_ParamsSpec.$,
        null,
        impl.queueOpenerBreakageReport.bind(impl));
    this.helper_internal_.registerHandler(
        946186888,
        network.mojom.CrossOriginOpenerPolicyReporter_Clone_ParamsSpec.$,
        null,
        impl.clone.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
network.mojom.CrossOriginOpenerPolicyReporter = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "network.mojom.CrossOriginOpenerPolicyReporter";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!network.mojom.CrossOriginOpenerPolicyReporterRemote}
   * @export
   */
  static getRemote() {
    let remote = new network.mojom.CrossOriginOpenerPolicyReporterRemote;
    Mojo.bindInterface(this.$interfaceName,
                       remote.$.bindNewPipeAndPassReceiver().handle);
    return remote;
  }
};


/**
 * An object which receives request messages for the CrossOriginOpenerPolicyReporter
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
network.mojom.CrossOriginOpenerPolicyReporterCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      network.mojom.CrossOriginOpenerPolicyReporterRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!network.mojom.CrossOriginOpenerPolicyReporterRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.queueOpenerBreakageReport =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1634261344,
        network.mojom.CrossOriginOpenerPolicyReporter_QueueOpenerBreakageReport_ParamsSpec.$,
        null,
        this.queueOpenerBreakageReport.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.clone =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        946186888,
        network.mojom.CrossOriginOpenerPolicyReporter_Clone_ParamsSpec.$,
        null,
        this.clone.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('network.mojom.CrossOriginOpenerPolicySpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
network.mojom.CrossOriginOpenerPolicySpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('network.mojom.CrossOriginOpenerPolicyReporter_QueueOpenerBreakageReport_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
network.mojom.CrossOriginOpenerPolicyReporter_QueueOpenerBreakageReport_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('network.mojom.CrossOriginOpenerPolicyReporter_Clone_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
network.mojom.CrossOriginOpenerPolicyReporter_Clone_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    network.mojom.CrossOriginOpenerPolicySpec.$,
    'CrossOriginOpenerPolicy',
    24,
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        network.mojom.CrossOriginOpenerPolicyValueSpec.$,
        network.mojom.CrossOriginOpenerPolicyValue.kUnsafeNone,
        false /* nullable */),
      mojo.internal.StructField(
        'reportingEndpoint', 8,
        0,
        mojo.internal.String,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'reportOnlyValue', 4,
        0,
        network.mojom.CrossOriginOpenerPolicyValueSpec.$,
        network.mojom.CrossOriginOpenerPolicyValue.kUnsafeNone,
        false /* nullable */),
      mojo.internal.StructField(
        'reportOnlyReportingEndpoint', 16,
        0,
        mojo.internal.String,
        null,
        true /* nullable */),
    ]);



goog.provide('network.mojom.CrossOriginOpenerPolicy');

/** @record */
network.mojom.CrossOriginOpenerPolicy = class {
  constructor() {
    /** @type { !network.mojom.CrossOriginOpenerPolicyValue } */
    this.value;
    /** @type { !network.mojom.CrossOriginOpenerPolicyValue } */
    this.reportOnlyValue;
    /** @type { (string|undefined) } */
    this.reportingEndpoint;
    /** @type { (string|undefined) } */
    this.reportOnlyReportingEndpoint;
  }
};



mojo.internal.Struct(
    network.mojom.CrossOriginOpenerPolicyReporter_QueueOpenerBreakageReport_ParamsSpec.$,
    'CrossOriginOpenerPolicyReporter_QueueOpenerBreakageReport_Params',
    16,
    [
      mojo.internal.StructField(
        'otherUrl', 0,
        0,
        url.mojom.UrlSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'isReportedFromDocument', 8,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'isReportOnly', 8,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ]);



goog.provide('network.mojom.CrossOriginOpenerPolicyReporter_QueueOpenerBreakageReport_Params');

/** @record */
network.mojom.CrossOriginOpenerPolicyReporter_QueueOpenerBreakageReport_Params = class {
  constructor() {
    /** @type { !url.mojom.Url } */
    this.otherUrl;
    /** @type { !boolean } */
    this.isReportedFromDocument;
    /** @type { !boolean } */
    this.isReportOnly;
  }
};



mojo.internal.Struct(
    network.mojom.CrossOriginOpenerPolicyReporter_Clone_ParamsSpec.$,
    'CrossOriginOpenerPolicyReporter_Clone_Params',
    8,
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojo.internal.InterfaceRequest(network.mojom.CrossOriginOpenerPolicyReporterPendingReceiver),
        null,
        false /* nullable */),
    ]);



goog.provide('network.mojom.CrossOriginOpenerPolicyReporter_Clone_Params');

/** @record */
network.mojom.CrossOriginOpenerPolicyReporter_Clone_Params = class {
  constructor() {
    /** @type { !network.mojom.CrossOriginOpenerPolicyReporterPendingReceiver } */
    this.receiver;
  }
};


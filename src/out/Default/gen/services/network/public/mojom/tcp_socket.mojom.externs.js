// services/network/public/mojom/tcp_socket.mojom.externs.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.



goog.provide('network.mojom.TCPBoundSocket');
goog.provide('network.mojom.TCPBoundSocketImpl');
goog.provide('network.mojom.TCPBoundSocketPtr');



/**
 * @const
 * @type { !mojo.Interface };
 */
network.mojom.TCPBoundSocket;

/** @interface */
network.mojom.TCPBoundSocketImpl = class {
  /**
   * @param { !number } backlog
   * @param { !mojo.InterfaceRequest } socket
   * @return {Promise}
   */
  listen(backlog, socket) {}
  /**
   * @param { !network.mojom.AddressList } remoteAddrList
   * @param { network.mojom.TCPConnectedSocketOptions } tcpConnectedSocketOptions
   * @param { !mojo.InterfaceRequest } socket
   * @param { network.mojom.SocketObserverPtr } observer
   * @return {Promise}
   */
  connect(remoteAddrList, tcpConnectedSocketOptions, socket, observer) {}
};

/**
 * @implements { mojo.InterfacePtr }
 * @implements { network.mojom.TCPBoundSocketImpl }
 */
network.mojom.TCPBoundSocketPtr = class {
  /**
   * @param { !number } backlog
   * @param { !mojo.InterfaceRequest } socket
   * @return {Promise}
   */
  listen(backlog, socket) {}
  /**
   * @param { !network.mojom.AddressList } remoteAddrList
   * @param { network.mojom.TCPConnectedSocketOptions } tcpConnectedSocketOptions
   * @param { !mojo.InterfaceRequest } socket
   * @param { network.mojom.SocketObserverPtr } observer
   * @return {Promise}
   */
  connect(remoteAddrList, tcpConnectedSocketOptions, socket, observer) {}
};

goog.provide('network.mojom.TCPConnectedSocket');
goog.provide('network.mojom.TCPConnectedSocketImpl');
goog.provide('network.mojom.TCPConnectedSocketPtr');



/**
 * @const
 * @type { !mojo.Interface };
 */
network.mojom.TCPConnectedSocket;

/** @interface */
network.mojom.TCPConnectedSocketImpl = class {
  /**
   * @param { !network.mojom.HostPortPair } hostPortPair
   * @param { network.mojom.TLSClientSocketOptions } options
   * @param { !network.mojom.MutableNetworkTrafficAnnotationTag } trafficAnnotation
   * @param { !mojo.InterfaceRequest } receiver
   * @param { network.mojom.SocketObserverPtr } observer
   * @return {Promise}
   */
  upgradeToTLS(hostPortPair, options, trafficAnnotation, receiver, observer) {}
  /**
   * @param { !number } sendBufferSize
   * @return {Promise}
   */
  setSendBufferSize(sendBufferSize) {}
  /**
   * @param { !number } receiveBufferSize
   * @return {Promise}
   */
  setReceiveBufferSize(receiveBufferSize) {}
  /**
   * @param { !boolean } noDelay
   * @return {Promise}
   */
  setNoDelay(noDelay) {}
  /**
   * @param { !boolean } enable
   * @param { !number } delaySecs
   * @return {Promise}
   */
  setKeepAlive(enable, delaySecs) {}
};

/**
 * @implements { mojo.InterfacePtr }
 * @implements { network.mojom.TCPConnectedSocketImpl }
 */
network.mojom.TCPConnectedSocketPtr = class {
  /**
   * @param { !network.mojom.HostPortPair } hostPortPair
   * @param { network.mojom.TLSClientSocketOptions } options
   * @param { !network.mojom.MutableNetworkTrafficAnnotationTag } trafficAnnotation
   * @param { !mojo.InterfaceRequest } receiver
   * @param { network.mojom.SocketObserverPtr } observer
   * @return {Promise}
   */
  upgradeToTLS(hostPortPair, options, trafficAnnotation, receiver, observer) {}
  /**
   * @param { !number } sendBufferSize
   * @return {Promise}
   */
  setSendBufferSize(sendBufferSize) {}
  /**
   * @param { !number } receiveBufferSize
   * @return {Promise}
   */
  setReceiveBufferSize(receiveBufferSize) {}
  /**
   * @param { !boolean } noDelay
   * @return {Promise}
   */
  setNoDelay(noDelay) {}
  /**
   * @param { !boolean } enable
   * @param { !number } delaySecs
   * @return {Promise}
   */
  setKeepAlive(enable, delaySecs) {}
};

goog.provide('network.mojom.SocketObserver');
goog.provide('network.mojom.SocketObserverImpl');
goog.provide('network.mojom.SocketObserverPtr');



/**
 * @const
 * @type { !mojo.Interface };
 */
network.mojom.SocketObserver;

/** @interface */
network.mojom.SocketObserverImpl = class {
  /**
   * @param { !number } netError
   */
  onReadError(netError) {}
  /**
   * @param { !number } netError
   */
  onWriteError(netError) {}
};

/**
 * @implements { mojo.InterfacePtr }
 * @implements { network.mojom.SocketObserverImpl }
 */
network.mojom.SocketObserverPtr = class {
  /**
   * @param { !number } netError
   */
  onReadError(netError) {}
  /**
   * @param { !number } netError
   */
  onWriteError(netError) {}
};

goog.provide('network.mojom.TCPServerSocket');
goog.provide('network.mojom.TCPServerSocketImpl');
goog.provide('network.mojom.TCPServerSocketPtr');



/**
 * @const
 * @type { !mojo.Interface };
 */
network.mojom.TCPServerSocket;

/** @interface */
network.mojom.TCPServerSocketImpl = class {
  /**
   * @param { network.mojom.SocketObserverPtr } observer
   * @return {Promise}
   */
  accept(observer) {}
};

/**
 * @implements { mojo.InterfacePtr }
 * @implements { network.mojom.TCPServerSocketImpl }
 */
network.mojom.TCPServerSocketPtr = class {
  /**
   * @param { network.mojom.SocketObserverPtr } observer
   * @return {Promise}
   */
  accept(observer) {}
};

goog.provide('network.mojom.TCPConnectedSocketOptions');

network.mojom.TCPConnectedSocketOptions = class {
  constructor() {
    /** @type { !number } */
    this.sendBufferSize;
    /** @type { !number } */
    this.receiveBufferSize;
    /** @type { !boolean } */
    this.noDelay;
  }
};

goog.provide('network.mojom.TCPBoundSocket_Listen_Params');

network.mojom.TCPBoundSocket_Listen_Params = class {
  constructor() {
    /** @type { !number } */
    this.backlog;
    /** @type { !mojo.InterfaceRequest } */
    this.socket;
  }
};

goog.provide('network.mojom.TCPBoundSocket_Listen_ResponseParams');

network.mojom.TCPBoundSocket_Listen_ResponseParams = class {
  constructor() {
    /** @type { !number } */
    this.netError;
  }
};

goog.provide('network.mojom.TCPBoundSocket_Connect_Params');

network.mojom.TCPBoundSocket_Connect_Params = class {
  constructor() {
    /** @type { !network.mojom.AddressList } */
    this.remoteAddrList;
    /** @type { network.mojom.TCPConnectedSocketOptions } */
    this.tcpConnectedSocketOptions;
    /** @type { !mojo.InterfaceRequest } */
    this.socket;
    /** @type { network.mojom.SocketObserverPtr } */
    this.observer;
  }
};

goog.provide('network.mojom.TCPBoundSocket_Connect_ResponseParams');

network.mojom.TCPBoundSocket_Connect_ResponseParams = class {
  constructor() {
    /** @type { !number } */
    this.netError;
    /** @type { MojoHandle } */
    this.receiveStream;
    /** @type { network.mojom.IPEndPoint } */
    this.localAddr;
    /** @type { network.mojom.IPEndPoint } */
    this.peerAddr;
    /** @type { MojoHandle } */
    this.sendStream;
  }
};

goog.provide('network.mojom.TCPConnectedSocket_UpgradeToTLS_Params');

network.mojom.TCPConnectedSocket_UpgradeToTLS_Params = class {
  constructor() {
    /** @type { !network.mojom.HostPortPair } */
    this.hostPortPair;
    /** @type { network.mojom.TLSClientSocketOptions } */
    this.options;
    /** @type { !network.mojom.MutableNetworkTrafficAnnotationTag } */
    this.trafficAnnotation;
    /** @type { !mojo.InterfaceRequest } */
    this.receiver;
    /** @type { network.mojom.SocketObserverPtr } */
    this.observer;
  }
};

goog.provide('network.mojom.TCPConnectedSocket_UpgradeToTLS_ResponseParams');

network.mojom.TCPConnectedSocket_UpgradeToTLS_ResponseParams = class {
  constructor() {
    /** @type { !number } */
    this.netError;
    /** @type { MojoHandle } */
    this.receiveStream;
    /** @type { MojoHandle } */
    this.sendStream;
    /** @type { network.mojom.SSLInfo } */
    this.sslInfo;
  }
};

goog.provide('network.mojom.TCPConnectedSocket_SetSendBufferSize_Params');

network.mojom.TCPConnectedSocket_SetSendBufferSize_Params = class {
  constructor() {
    /** @type { !number } */
    this.sendBufferSize;
  }
};

goog.provide('network.mojom.TCPConnectedSocket_SetSendBufferSize_ResponseParams');

network.mojom.TCPConnectedSocket_SetSendBufferSize_ResponseParams = class {
  constructor() {
    /** @type { !number } */
    this.netError;
  }
};

goog.provide('network.mojom.TCPConnectedSocket_SetReceiveBufferSize_Params');

network.mojom.TCPConnectedSocket_SetReceiveBufferSize_Params = class {
  constructor() {
    /** @type { !number } */
    this.receiveBufferSize;
  }
};

goog.provide('network.mojom.TCPConnectedSocket_SetReceiveBufferSize_ResponseParams');

network.mojom.TCPConnectedSocket_SetReceiveBufferSize_ResponseParams = class {
  constructor() {
    /** @type { !number } */
    this.netError;
  }
};

goog.provide('network.mojom.TCPConnectedSocket_SetNoDelay_Params');

network.mojom.TCPConnectedSocket_SetNoDelay_Params = class {
  constructor() {
    /** @type { !boolean } */
    this.noDelay;
  }
};

goog.provide('network.mojom.TCPConnectedSocket_SetNoDelay_ResponseParams');

network.mojom.TCPConnectedSocket_SetNoDelay_ResponseParams = class {
  constructor() {
    /** @type { !boolean } */
    this.success;
  }
};

goog.provide('network.mojom.TCPConnectedSocket_SetKeepAlive_Params');

network.mojom.TCPConnectedSocket_SetKeepAlive_Params = class {
  constructor() {
    /** @type { !boolean } */
    this.enable;
    /** @type { !number } */
    this.delaySecs;
  }
};

goog.provide('network.mojom.TCPConnectedSocket_SetKeepAlive_ResponseParams');

network.mojom.TCPConnectedSocket_SetKeepAlive_ResponseParams = class {
  constructor() {
    /** @type { !boolean } */
    this.success;
  }
};

goog.provide('network.mojom.SocketObserver_OnReadError_Params');

network.mojom.SocketObserver_OnReadError_Params = class {
  constructor() {
    /** @type { !number } */
    this.netError;
  }
};

goog.provide('network.mojom.SocketObserver_OnWriteError_Params');

network.mojom.SocketObserver_OnWriteError_Params = class {
  constructor() {
    /** @type { !number } */
    this.netError;
  }
};

goog.provide('network.mojom.TCPServerSocket_Accept_Params');

network.mojom.TCPServerSocket_Accept_Params = class {
  constructor() {
    /** @type { network.mojom.SocketObserverPtr } */
    this.observer;
  }
};

goog.provide('network.mojom.TCPServerSocket_Accept_ResponseParams');

network.mojom.TCPServerSocket_Accept_ResponseParams = class {
  constructor() {
    /** @type { !number } */
    this.netError;
    /** @type { MojoHandle } */
    this.sendStream;
    /** @type { network.mojom.IPEndPoint } */
    this.remoteAddr;
    /** @type { network.mojom.TCPConnectedSocketPtr } */
    this.connectedSocket;
    /** @type { MojoHandle } */
    this.receiveStream;
  }
};

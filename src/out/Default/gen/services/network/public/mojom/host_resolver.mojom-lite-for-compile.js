// services/network/public/mojom/host_resolver.mojom-lite-for-compile.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';

goog.require('mojo.internal');
goog.require('mojo.internal.interfaceSupport');

goog.require('network.mojom.IPAddress');
goog.require('mojoBase.mojom.TimeDelta');
goog.require('network.mojom.NetworkIsolationKey');
goog.require('network.mojom.IPEndPoint');
goog.require('network.mojom.AddressList');
goog.require('network.mojom.RequestPriority');
goog.require('network.mojom.HostPortPair');




goog.provide('network.mojom.OptionalSecureDnsMode');
goog.provide('network.mojom.OptionalSecureDnsModeSpec');
/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
network.mojom.OptionalSecureDnsModeSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
network.mojom.OptionalSecureDnsMode = {
  
  NO_OVERRIDE: 0,
  OFF: 1,
  AUTOMATIC: 2,
  SECURE: 3,
  MIN_VALUE: 0,
  MAX_VALUE: 3,
};

goog.provide('network.mojom.SecureDnsMode');
goog.provide('network.mojom.SecureDnsModeSpec');
/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
network.mojom.SecureDnsModeSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
network.mojom.SecureDnsMode = {
  
  OFF: 0,
  AUTOMATIC: 1,
  SECURE: 2,
  MIN_VALUE: 0,
  MAX_VALUE: 2,
};

goog.provide('network.mojom.DnsQueryType');
goog.provide('network.mojom.DnsQueryTypeSpec');
/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
network.mojom.DnsQueryTypeSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
network.mojom.DnsQueryType = {
  
  UNSPECIFIED: 0,
  A: 1,
  AAAA: 2,
  TXT: 3,
  PTR: 4,
  SRV: 5,
  MIN_VALUE: 0,
  MAX_VALUE: 5,
};



goog.provide('network.mojom.ResolveHostHandle');
goog.provide('network.mojom.ResolveHostHandleReceiver');
goog.provide('network.mojom.ResolveHostHandleCallbackRouter');
goog.provide('network.mojom.ResolveHostHandleInterface');
goog.provide('network.mojom.ResolveHostHandleRemote');
goog.provide('network.mojom.ResolveHostHandlePendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
network.mojom.ResolveHostHandlePendingReceiver = class {
  /** @param {!MojoHandle} handle */
  constructor(handle) {
    /** @public {!MojoHandle} */
    this.handle = handle;
  }
};

/** @interface */
network.mojom.ResolveHostHandleInterface = class {
  
  /**
   * @param { !number } result
   */

  cancel(result) {}
};

/**
 * @export
 * @implements { network.mojom.ResolveHostHandleInterface }
 */
network.mojom.ResolveHostHandleRemote = class {
  /** @param {MojoHandle=} opt_handle */
  constructor(opt_handle) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!network.mojom.ResolveHostHandlePendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          network.mojom.ResolveHostHandlePendingReceiver,
          opt_handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!network.mojom.ResolveHostHandlePendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !number } result
   */

  cancel(
      result) {
    this.proxy.sendMessage(
        1040171962,
        network.mojom.ResolveHostHandle_Cancel_ParamsSpec.$,
        null,
        [
          result
        ]);
  }
};

/**
 * An object which receives request messages for the ResolveHostHandle
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
network.mojom.ResolveHostHandleReceiver = class {
  /**
   * @param {!network.mojom.ResolveHostHandleInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!network.mojom.ResolveHostHandleRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        network.mojom.ResolveHostHandleRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!network.mojom.ResolveHostHandleRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        1040171962,
        network.mojom.ResolveHostHandle_Cancel_ParamsSpec.$,
        null,
        impl.cancel.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
network.mojom.ResolveHostHandle = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "network.mojom.ResolveHostHandle";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!network.mojom.ResolveHostHandleRemote}
   * @export
   */
  static getRemote() {
    let remote = new network.mojom.ResolveHostHandleRemote;
    Mojo.bindInterface(this.$interfaceName,
                       remote.$.bindNewPipeAndPassReceiver().handle);
    return remote;
  }
};


/**
 * An object which receives request messages for the ResolveHostHandle
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
network.mojom.ResolveHostHandleCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      network.mojom.ResolveHostHandleRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!network.mojom.ResolveHostHandleRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.cancel =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1040171962,
        network.mojom.ResolveHostHandle_Cancel_ParamsSpec.$,
        null,
        this.cancel.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('network.mojom.ResolveHostClient');
goog.provide('network.mojom.ResolveHostClientReceiver');
goog.provide('network.mojom.ResolveHostClientCallbackRouter');
goog.provide('network.mojom.ResolveHostClientInterface');
goog.provide('network.mojom.ResolveHostClientRemote');
goog.provide('network.mojom.ResolveHostClientPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
network.mojom.ResolveHostClientPendingReceiver = class {
  /** @param {!MojoHandle} handle */
  constructor(handle) {
    /** @public {!MojoHandle} */
    this.handle = handle;
  }
};

/** @interface */
network.mojom.ResolveHostClientInterface = class {
  
  /**
   * @param { !number } result
   * @param { !network.mojom.ResolveErrorInfo } resolveErrorInfo
   * @param { ?network.mojom.AddressList } resolvedAddresses
   */

  onComplete(result, resolveErrorInfo, resolvedAddresses) {}
  
  /**
   * @param { !Array<!string> } textResults
   */

  onTextResults(textResults) {}
  
  /**
   * @param { !Array<!network.mojom.HostPortPair> } hosts
   */

  onHostnameResults(hosts) {}
};

/**
 * @export
 * @implements { network.mojom.ResolveHostClientInterface }
 */
network.mojom.ResolveHostClientRemote = class {
  /** @param {MojoHandle=} opt_handle */
  constructor(opt_handle) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!network.mojom.ResolveHostClientPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          network.mojom.ResolveHostClientPendingReceiver,
          opt_handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!network.mojom.ResolveHostClientPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !number } result
   * @param { !network.mojom.ResolveErrorInfo } resolveErrorInfo
   * @param { ?network.mojom.AddressList } resolvedAddresses
   */

  onComplete(
      result,
      resolveErrorInfo,
      resolvedAddresses) {
    this.proxy.sendMessage(
        139039594,
        network.mojom.ResolveHostClient_OnComplete_ParamsSpec.$,
        null,
        [
          result,
          resolveErrorInfo,
          resolvedAddresses
        ]);
  }

  
  /**
   * @param { !Array<!string> } textResults
   */

  onTextResults(
      textResults) {
    this.proxy.sendMessage(
        1912263261,
        network.mojom.ResolveHostClient_OnTextResults_ParamsSpec.$,
        null,
        [
          textResults
        ]);
  }

  
  /**
   * @param { !Array<!network.mojom.HostPortPair> } hosts
   */

  onHostnameResults(
      hosts) {
    this.proxy.sendMessage(
        1178450370,
        network.mojom.ResolveHostClient_OnHostnameResults_ParamsSpec.$,
        null,
        [
          hosts
        ]);
  }
};

/**
 * An object which receives request messages for the ResolveHostClient
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
network.mojom.ResolveHostClientReceiver = class {
  /**
   * @param {!network.mojom.ResolveHostClientInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!network.mojom.ResolveHostClientRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        network.mojom.ResolveHostClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!network.mojom.ResolveHostClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        139039594,
        network.mojom.ResolveHostClient_OnComplete_ParamsSpec.$,
        null,
        impl.onComplete.bind(impl));
    this.helper_internal_.registerHandler(
        1912263261,
        network.mojom.ResolveHostClient_OnTextResults_ParamsSpec.$,
        null,
        impl.onTextResults.bind(impl));
    this.helper_internal_.registerHandler(
        1178450370,
        network.mojom.ResolveHostClient_OnHostnameResults_ParamsSpec.$,
        null,
        impl.onHostnameResults.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
network.mojom.ResolveHostClient = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "network.mojom.ResolveHostClient";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!network.mojom.ResolveHostClientRemote}
   * @export
   */
  static getRemote() {
    let remote = new network.mojom.ResolveHostClientRemote;
    Mojo.bindInterface(this.$interfaceName,
                       remote.$.bindNewPipeAndPassReceiver().handle);
    return remote;
  }
};


/**
 * An object which receives request messages for the ResolveHostClient
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
network.mojom.ResolveHostClientCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      network.mojom.ResolveHostClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!network.mojom.ResolveHostClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onComplete =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        139039594,
        network.mojom.ResolveHostClient_OnComplete_ParamsSpec.$,
        null,
        this.onComplete.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onTextResults =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1912263261,
        network.mojom.ResolveHostClient_OnTextResults_ParamsSpec.$,
        null,
        this.onTextResults.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onHostnameResults =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1178450370,
        network.mojom.ResolveHostClient_OnHostnameResults_ParamsSpec.$,
        null,
        this.onHostnameResults.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('network.mojom.MdnsListenClient');
goog.provide('network.mojom.MdnsListenClientReceiver');
goog.provide('network.mojom.MdnsListenClientCallbackRouter');
goog.provide('network.mojom.MdnsListenClientInterface');
goog.provide('network.mojom.MdnsListenClientRemote');
goog.provide('network.mojom.MdnsListenClientPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
network.mojom.MdnsListenClientPendingReceiver = class {
  /** @param {!MojoHandle} handle */
  constructor(handle) {
    /** @public {!MojoHandle} */
    this.handle = handle;
  }
};

/** @interface */
network.mojom.MdnsListenClientInterface = class {
  
  /**
   * @param { !network.mojom.MdnsListenClient_UpdateType } updateType
   * @param { !network.mojom.DnsQueryType } queryType
   * @param { !network.mojom.IPEndPoint } endpoint
   */

  onAddressResult(updateType, queryType, endpoint) {}
  
  /**
   * @param { !network.mojom.MdnsListenClient_UpdateType } updateType
   * @param { !network.mojom.DnsQueryType } queryType
   * @param { !Array<!string> } textRecords
   */

  onTextResult(updateType, queryType, textRecords) {}
  
  /**
   * @param { !network.mojom.MdnsListenClient_UpdateType } updateType
   * @param { !network.mojom.DnsQueryType } queryType
   * @param { !network.mojom.HostPortPair } host
   */

  onHostnameResult(updateType, queryType, host) {}
  
  /**
   * @param { !network.mojom.MdnsListenClient_UpdateType } updateType
   * @param { !network.mojom.DnsQueryType } queryType
   */

  onUnhandledResult(updateType, queryType) {}
};

/**
 * @export
 * @implements { network.mojom.MdnsListenClientInterface }
 */
network.mojom.MdnsListenClientRemote = class {
  /** @param {MojoHandle=} opt_handle */
  constructor(opt_handle) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!network.mojom.MdnsListenClientPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          network.mojom.MdnsListenClientPendingReceiver,
          opt_handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!network.mojom.MdnsListenClientPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !network.mojom.MdnsListenClient_UpdateType } updateType
   * @param { !network.mojom.DnsQueryType } queryType
   * @param { !network.mojom.IPEndPoint } endpoint
   */

  onAddressResult(
      updateType,
      queryType,
      endpoint) {
    this.proxy.sendMessage(
        410219945,
        network.mojom.MdnsListenClient_OnAddressResult_ParamsSpec.$,
        null,
        [
          updateType,
          queryType,
          endpoint
        ]);
  }

  
  /**
   * @param { !network.mojom.MdnsListenClient_UpdateType } updateType
   * @param { !network.mojom.DnsQueryType } queryType
   * @param { !Array<!string> } textRecords
   */

  onTextResult(
      updateType,
      queryType,
      textRecords) {
    this.proxy.sendMessage(
        1960225189,
        network.mojom.MdnsListenClient_OnTextResult_ParamsSpec.$,
        null,
        [
          updateType,
          queryType,
          textRecords
        ]);
  }

  
  /**
   * @param { !network.mojom.MdnsListenClient_UpdateType } updateType
   * @param { !network.mojom.DnsQueryType } queryType
   * @param { !network.mojom.HostPortPair } host
   */

  onHostnameResult(
      updateType,
      queryType,
      host) {
    this.proxy.sendMessage(
        541424395,
        network.mojom.MdnsListenClient_OnHostnameResult_ParamsSpec.$,
        null,
        [
          updateType,
          queryType,
          host
        ]);
  }

  
  /**
   * @param { !network.mojom.MdnsListenClient_UpdateType } updateType
   * @param { !network.mojom.DnsQueryType } queryType
   */

  onUnhandledResult(
      updateType,
      queryType) {
    this.proxy.sendMessage(
        520219796,
        network.mojom.MdnsListenClient_OnUnhandledResult_ParamsSpec.$,
        null,
        [
          updateType,
          queryType
        ]);
  }
};

/**
 * An object which receives request messages for the MdnsListenClient
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
network.mojom.MdnsListenClientReceiver = class {
  /**
   * @param {!network.mojom.MdnsListenClientInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!network.mojom.MdnsListenClientRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        network.mojom.MdnsListenClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!network.mojom.MdnsListenClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        410219945,
        network.mojom.MdnsListenClient_OnAddressResult_ParamsSpec.$,
        null,
        impl.onAddressResult.bind(impl));
    this.helper_internal_.registerHandler(
        1960225189,
        network.mojom.MdnsListenClient_OnTextResult_ParamsSpec.$,
        null,
        impl.onTextResult.bind(impl));
    this.helper_internal_.registerHandler(
        541424395,
        network.mojom.MdnsListenClient_OnHostnameResult_ParamsSpec.$,
        null,
        impl.onHostnameResult.bind(impl));
    this.helper_internal_.registerHandler(
        520219796,
        network.mojom.MdnsListenClient_OnUnhandledResult_ParamsSpec.$,
        null,
        impl.onUnhandledResult.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
network.mojom.MdnsListenClient = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "network.mojom.MdnsListenClient";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!network.mojom.MdnsListenClientRemote}
   * @export
   */
  static getRemote() {
    let remote = new network.mojom.MdnsListenClientRemote;
    Mojo.bindInterface(this.$interfaceName,
                       remote.$.bindNewPipeAndPassReceiver().handle);
    return remote;
  }
};

goog.provide('network.mojom.MdnsListenClient_UpdateType');
goog.provide('network.mojom.MdnsListenClient.UpdateTypeSpec');
/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
network.mojom.MdnsListenClient.UpdateTypeSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
network.mojom.MdnsListenClient_UpdateType = {
  
  ADDED: 0,
  CHANGED: 1,
  REMOVED: 2,
  MIN_VALUE: 0,
  MAX_VALUE: 2,
};

/**
 * An object which receives request messages for the MdnsListenClient
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
network.mojom.MdnsListenClientCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      network.mojom.MdnsListenClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!network.mojom.MdnsListenClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onAddressResult =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        410219945,
        network.mojom.MdnsListenClient_OnAddressResult_ParamsSpec.$,
        null,
        this.onAddressResult.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onTextResult =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1960225189,
        network.mojom.MdnsListenClient_OnTextResult_ParamsSpec.$,
        null,
        this.onTextResult.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onHostnameResult =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        541424395,
        network.mojom.MdnsListenClient_OnHostnameResult_ParamsSpec.$,
        null,
        this.onHostnameResult.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onUnhandledResult =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        520219796,
        network.mojom.MdnsListenClient_OnUnhandledResult_ParamsSpec.$,
        null,
        this.onUnhandledResult.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('network.mojom.HostResolver');
goog.provide('network.mojom.HostResolverReceiver');
goog.provide('network.mojom.HostResolverCallbackRouter');
goog.provide('network.mojom.HostResolverInterface');
goog.provide('network.mojom.HostResolverRemote');
goog.provide('network.mojom.HostResolverPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
network.mojom.HostResolverPendingReceiver = class {
  /** @param {!MojoHandle} handle */
  constructor(handle) {
    /** @public {!MojoHandle} */
    this.handle = handle;
  }
};

/** @interface */
network.mojom.HostResolverInterface = class {
  
  /**
   * @param { !network.mojom.HostPortPair } host
   * @param { !network.mojom.NetworkIsolationKey } networkIsolationKey
   * @param { ?network.mojom.ResolveHostParameters } optionalParameters
   * @param { !network.mojom.ResolveHostClientRemote } responseClient
   */

  resolveHost(host, networkIsolationKey, optionalParameters, responseClient) {}
  
  /**
   * @param { !network.mojom.HostPortPair } host
   * @param { !network.mojom.DnsQueryType } queryType
   * @param { !network.mojom.MdnsListenClientRemote } responseClient
   * @return {Promise<{
        result: !number,
   *  }>}
   */

  mdnsListen(host, queryType, responseClient) {}
};

/**
 * @export
 * @implements { network.mojom.HostResolverInterface }
 */
network.mojom.HostResolverRemote = class {
  /** @param {MojoHandle=} opt_handle */
  constructor(opt_handle) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!network.mojom.HostResolverPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          network.mojom.HostResolverPendingReceiver,
          opt_handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!network.mojom.HostResolverPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !network.mojom.HostPortPair } host
   * @param { !network.mojom.NetworkIsolationKey } networkIsolationKey
   * @param { ?network.mojom.ResolveHostParameters } optionalParameters
   * @param { !network.mojom.ResolveHostClientRemote } responseClient
   */

  resolveHost(
      host,
      networkIsolationKey,
      optionalParameters,
      responseClient) {
    this.proxy.sendMessage(
        513908629,
        network.mojom.HostResolver_ResolveHost_ParamsSpec.$,
        null,
        [
          host,
          networkIsolationKey,
          optionalParameters,
          responseClient
        ]);
  }

  
  /**
   * @param { !network.mojom.HostPortPair } host
   * @param { !network.mojom.DnsQueryType } queryType
   * @param { !network.mojom.MdnsListenClientRemote } responseClient
   * @return {Promise<{
        result: !number,
   *  }>}
   */

  mdnsListen(
      host,
      queryType,
      responseClient) {
    return this.proxy.sendMessage(
        816728023,
        network.mojom.HostResolver_MdnsListen_ParamsSpec.$,
        network.mojom.HostResolver_MdnsListen_ResponseParamsSpec.$,
        [
          host,
          queryType,
          responseClient
        ]);
  }
};

/**
 * An object which receives request messages for the HostResolver
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
network.mojom.HostResolverReceiver = class {
  /**
   * @param {!network.mojom.HostResolverInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!network.mojom.HostResolverRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        network.mojom.HostResolverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!network.mojom.HostResolverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        513908629,
        network.mojom.HostResolver_ResolveHost_ParamsSpec.$,
        null,
        impl.resolveHost.bind(impl));
    this.helper_internal_.registerHandler(
        816728023,
        network.mojom.HostResolver_MdnsListen_ParamsSpec.$,
        network.mojom.HostResolver_MdnsListen_ResponseParamsSpec.$,
        impl.mdnsListen.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
network.mojom.HostResolver = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "network.mojom.HostResolver";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!network.mojom.HostResolverRemote}
   * @export
   */
  static getRemote() {
    let remote = new network.mojom.HostResolverRemote;
    Mojo.bindInterface(this.$interfaceName,
                       remote.$.bindNewPipeAndPassReceiver().handle);
    return remote;
  }
};


/**
 * An object which receives request messages for the HostResolver
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
network.mojom.HostResolverCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      network.mojom.HostResolverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!network.mojom.HostResolverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.resolveHost =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        513908629,
        network.mojom.HostResolver_ResolveHost_ParamsSpec.$,
        null,
        this.resolveHost.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.mdnsListen =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        816728023,
        network.mojom.HostResolver_MdnsListen_ParamsSpec.$,
        network.mojom.HostResolver_MdnsListen_ResponseParamsSpec.$,
        this.mdnsListen.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('network.mojom.DnsConfigChangeManagerClient');
goog.provide('network.mojom.DnsConfigChangeManagerClientReceiver');
goog.provide('network.mojom.DnsConfigChangeManagerClientCallbackRouter');
goog.provide('network.mojom.DnsConfigChangeManagerClientInterface');
goog.provide('network.mojom.DnsConfigChangeManagerClientRemote');
goog.provide('network.mojom.DnsConfigChangeManagerClientPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
network.mojom.DnsConfigChangeManagerClientPendingReceiver = class {
  /** @param {!MojoHandle} handle */
  constructor(handle) {
    /** @public {!MojoHandle} */
    this.handle = handle;
  }
};

/** @interface */
network.mojom.DnsConfigChangeManagerClientInterface = class {
  
  /**
   */

  onDnsConfigChanged() {}
};

/**
 * @export
 * @implements { network.mojom.DnsConfigChangeManagerClientInterface }
 */
network.mojom.DnsConfigChangeManagerClientRemote = class {
  /** @param {MojoHandle=} opt_handle */
  constructor(opt_handle) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!network.mojom.DnsConfigChangeManagerClientPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          network.mojom.DnsConfigChangeManagerClientPendingReceiver,
          opt_handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!network.mojom.DnsConfigChangeManagerClientPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   */

  onDnsConfigChanged() {
    this.proxy.sendMessage(
        867433259,
        network.mojom.DnsConfigChangeManagerClient_OnDnsConfigChanged_ParamsSpec.$,
        null,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the DnsConfigChangeManagerClient
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
network.mojom.DnsConfigChangeManagerClientReceiver = class {
  /**
   * @param {!network.mojom.DnsConfigChangeManagerClientInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!network.mojom.DnsConfigChangeManagerClientRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        network.mojom.DnsConfigChangeManagerClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!network.mojom.DnsConfigChangeManagerClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        867433259,
        network.mojom.DnsConfigChangeManagerClient_OnDnsConfigChanged_ParamsSpec.$,
        null,
        impl.onDnsConfigChanged.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
network.mojom.DnsConfigChangeManagerClient = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "network.mojom.DnsConfigChangeManagerClient";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!network.mojom.DnsConfigChangeManagerClientRemote}
   * @export
   */
  static getRemote() {
    let remote = new network.mojom.DnsConfigChangeManagerClientRemote;
    Mojo.bindInterface(this.$interfaceName,
                       remote.$.bindNewPipeAndPassReceiver().handle);
    return remote;
  }
};


/**
 * An object which receives request messages for the DnsConfigChangeManagerClient
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
network.mojom.DnsConfigChangeManagerClientCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      network.mojom.DnsConfigChangeManagerClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!network.mojom.DnsConfigChangeManagerClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onDnsConfigChanged =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        867433259,
        network.mojom.DnsConfigChangeManagerClient_OnDnsConfigChanged_ParamsSpec.$,
        null,
        this.onDnsConfigChanged.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('network.mojom.DnsConfigChangeManager');
goog.provide('network.mojom.DnsConfigChangeManagerReceiver');
goog.provide('network.mojom.DnsConfigChangeManagerCallbackRouter');
goog.provide('network.mojom.DnsConfigChangeManagerInterface');
goog.provide('network.mojom.DnsConfigChangeManagerRemote');
goog.provide('network.mojom.DnsConfigChangeManagerPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
network.mojom.DnsConfigChangeManagerPendingReceiver = class {
  /** @param {!MojoHandle} handle */
  constructor(handle) {
    /** @public {!MojoHandle} */
    this.handle = handle;
  }
};

/** @interface */
network.mojom.DnsConfigChangeManagerInterface = class {
  
  /**
   * @param { !network.mojom.DnsConfigChangeManagerClientRemote } client
   */

  requestNotifications(client) {}
};

/**
 * @export
 * @implements { network.mojom.DnsConfigChangeManagerInterface }
 */
network.mojom.DnsConfigChangeManagerRemote = class {
  /** @param {MojoHandle=} opt_handle */
  constructor(opt_handle) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!network.mojom.DnsConfigChangeManagerPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          network.mojom.DnsConfigChangeManagerPendingReceiver,
          opt_handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!network.mojom.DnsConfigChangeManagerPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !network.mojom.DnsConfigChangeManagerClientRemote } client
   */

  requestNotifications(
      client) {
    this.proxy.sendMessage(
        834833854,
        network.mojom.DnsConfigChangeManager_RequestNotifications_ParamsSpec.$,
        null,
        [
          client
        ]);
  }
};

/**
 * An object which receives request messages for the DnsConfigChangeManager
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
network.mojom.DnsConfigChangeManagerReceiver = class {
  /**
   * @param {!network.mojom.DnsConfigChangeManagerInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!network.mojom.DnsConfigChangeManagerRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        network.mojom.DnsConfigChangeManagerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!network.mojom.DnsConfigChangeManagerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        834833854,
        network.mojom.DnsConfigChangeManager_RequestNotifications_ParamsSpec.$,
        null,
        impl.requestNotifications.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
network.mojom.DnsConfigChangeManager = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "network.mojom.DnsConfigChangeManager";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!network.mojom.DnsConfigChangeManagerRemote}
   * @export
   */
  static getRemote() {
    let remote = new network.mojom.DnsConfigChangeManagerRemote;
    Mojo.bindInterface(this.$interfaceName,
                       remote.$.bindNewPipeAndPassReceiver().handle);
    return remote;
  }
};


/**
 * An object which receives request messages for the DnsConfigChangeManager
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
network.mojom.DnsConfigChangeManagerCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      network.mojom.DnsConfigChangeManagerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!network.mojom.DnsConfigChangeManagerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.requestNotifications =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        834833854,
        network.mojom.DnsConfigChangeManager_RequestNotifications_ParamsSpec.$,
        null,
        this.requestNotifications.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('network.mojom.DnsHostSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
network.mojom.DnsHostSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('network.mojom.DnsOverHttpsServerSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
network.mojom.DnsOverHttpsServerSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('network.mojom.DnsConfigOverridesSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
network.mojom.DnsConfigOverridesSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('network.mojom.ResolveErrorInfoSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
network.mojom.ResolveErrorInfoSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('network.mojom.ResolveHostParametersSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
network.mojom.ResolveHostParametersSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('network.mojom.ResolveHostHandle_Cancel_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
network.mojom.ResolveHostHandle_Cancel_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('network.mojom.ResolveHostClient_OnComplete_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
network.mojom.ResolveHostClient_OnComplete_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('network.mojom.ResolveHostClient_OnTextResults_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
network.mojom.ResolveHostClient_OnTextResults_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('network.mojom.ResolveHostClient_OnHostnameResults_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
network.mojom.ResolveHostClient_OnHostnameResults_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('network.mojom.MdnsListenClient_OnAddressResult_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
network.mojom.MdnsListenClient_OnAddressResult_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('network.mojom.MdnsListenClient_OnTextResult_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
network.mojom.MdnsListenClient_OnTextResult_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('network.mojom.MdnsListenClient_OnHostnameResult_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
network.mojom.MdnsListenClient_OnHostnameResult_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('network.mojom.MdnsListenClient_OnUnhandledResult_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
network.mojom.MdnsListenClient_OnUnhandledResult_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('network.mojom.HostResolver_ResolveHost_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
network.mojom.HostResolver_ResolveHost_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('network.mojom.HostResolver_MdnsListen_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
network.mojom.HostResolver_MdnsListen_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('network.mojom.HostResolver_MdnsListen_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
network.mojom.HostResolver_MdnsListen_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('network.mojom.DnsConfigChangeManagerClient_OnDnsConfigChanged_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
network.mojom.DnsConfigChangeManagerClient_OnDnsConfigChanged_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('network.mojom.DnsConfigChangeManager_RequestNotifications_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
network.mojom.DnsConfigChangeManager_RequestNotifications_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    network.mojom.DnsHostSpec.$,
    'DnsHost',
    16,
    [
      mojo.internal.StructField(
        'hostname', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'address', 8,
        0,
        network.mojom.IPAddressSpec.$,
        null,
        false /* nullable */),
    ]);



goog.provide('network.mojom.DnsHost');

/** @record */
network.mojom.DnsHost = class {
  constructor() {
    /** @type { !string } */
    this.hostname;
    /** @type { !network.mojom.IPAddress } */
    this.address;
  }
};



mojo.internal.Struct(
    network.mojom.DnsOverHttpsServerSpec.$,
    'DnsOverHttpsServer',
    16,
    [
      mojo.internal.StructField(
        'serverTemplate', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'usePost', 8,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ]);



goog.provide('network.mojom.DnsOverHttpsServer');

/** @record */
network.mojom.DnsOverHttpsServer = class {
  constructor() {
    /** @type { !string } */
    this.serverTemplate;
    /** @type { !boolean } */
    this.usePost;
  }
};


goog.provide('network.mojom.DnsConfigOverrides_Tristate');
goog.provide('network.mojom.DnsConfigOverridesSpec.TristateSpec');
/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
network.mojom.DnsConfigOverridesSpec.TristateSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
network.mojom.DnsConfigOverrides_Tristate = {
  
  NO_OVERRIDE: 0,
  TRISTATE_TRUE: 1,
  TRISTATE_FALSE: 2,
  MIN_VALUE: 0,
  MAX_VALUE: 2,
};


mojo.internal.Struct(
    network.mojom.DnsConfigOverridesSpec.$,
    'DnsConfigOverrides',
    80,
    [
      mojo.internal.StructField(
        'nameservers', 0,
        0,
        mojo.internal.Array(network.mojom.IPEndPointSpec.$, false),
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'search', 8,
        0,
        mojo.internal.Array(mojo.internal.String, false),
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'hosts', 16,
        0,
        mojo.internal.Array(network.mojom.DnsHostSpec.$, false),
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'appendToMultiLabelName', 24,
        0,
        network.mojom.DnsConfigOverridesSpec.TristateSpec.$,
        network.mojom.DnsConfigOverrides_Tristate.NO_OVERRIDE,
        false /* nullable */),
      mojo.internal.StructField(
        'randomizePorts', 28,
        0,
        network.mojom.DnsConfigOverridesSpec.TristateSpec.$,
        network.mojom.DnsConfigOverrides_Tristate.NO_OVERRIDE,
        false /* nullable */),
      mojo.internal.StructField(
        'ndots', 32,
        0,
        mojo.internal.Int8,
        -1,
        false /* nullable */),
      mojo.internal.StructField(
        'timeout', 40,
        0,
        mojoBase.mojom.TimeDeltaSpec.$,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'attempts', 36,
        0,
        mojo.internal.Int32,
        -1,
        false /* nullable */),
      mojo.internal.StructField(
        'rotate', 48,
        0,
        network.mojom.DnsConfigOverridesSpec.TristateSpec.$,
        network.mojom.DnsConfigOverrides_Tristate.NO_OVERRIDE,
        false /* nullable */),
      mojo.internal.StructField(
        'useLocalIpv6', 52,
        0,
        network.mojom.DnsConfigOverridesSpec.TristateSpec.$,
        network.mojom.DnsConfigOverrides_Tristate.NO_OVERRIDE,
        false /* nullable */),
      mojo.internal.StructField(
        'dnsOverHttpsServers', 56,
        0,
        mojo.internal.Array(network.mojom.DnsOverHttpsServerSpec.$, false),
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'secureDnsMode', 64,
        0,
        network.mojom.OptionalSecureDnsModeSpec.$,
        network.mojom.OptionalSecureDnsMode.NO_OVERRIDE,
        false /* nullable */),
      mojo.internal.StructField(
        'allowDnsOverHttpsUpgrade', 68,
        0,
        network.mojom.DnsConfigOverridesSpec.TristateSpec.$,
        network.mojom.DnsConfigOverrides_Tristate.NO_OVERRIDE,
        false /* nullable */),
      mojo.internal.StructField(
        'disabledUpgradeProviders', 72,
        0,
        mojo.internal.Array(mojo.internal.String, false),
        null,
        true /* nullable */),
    ]);



goog.provide('network.mojom.DnsConfigOverrides');

/** @record */
network.mojom.DnsConfigOverrides = class {
  constructor() {
    /** @type { (Array<!network.mojom.IPEndPoint>|undefined) } */
    this.nameservers;
    /** @type { (Array<!string>|undefined) } */
    this.search;
    /** @type { (Array<!network.mojom.DnsHost>|undefined) } */
    this.hosts;
    /** @type { !network.mojom.DnsConfigOverrides_Tristate } */
    this.appendToMultiLabelName;
    /** @type { !network.mojom.DnsConfigOverrides_Tristate } */
    this.randomizePorts;
    /** @type { !number } */
    this.ndots;
    /** @type { !number } */
    this.attempts;
    /** @type { (mojoBase.mojom.TimeDelta|undefined) } */
    this.timeout;
    /** @type { !network.mojom.DnsConfigOverrides_Tristate } */
    this.rotate;
    /** @type { !network.mojom.DnsConfigOverrides_Tristate } */
    this.useLocalIpv6;
    /** @type { (Array<!network.mojom.DnsOverHttpsServer>|undefined) } */
    this.dnsOverHttpsServers;
    /** @type { !network.mojom.OptionalSecureDnsMode } */
    this.secureDnsMode;
    /** @type { !network.mojom.DnsConfigOverrides_Tristate } */
    this.allowDnsOverHttpsUpgrade;
    /** @type { (Array<!string>|undefined) } */
    this.disabledUpgradeProviders;
  }
};



mojo.internal.Struct(
    network.mojom.ResolveErrorInfoSpec.$,
    'ResolveErrorInfo',
    8,
    [
      mojo.internal.StructField(
        'error', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'isSecureNetworkError', 4,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ]);



goog.provide('network.mojom.ResolveErrorInfo');

/** @record */
network.mojom.ResolveErrorInfo = class {
  constructor() {
    /** @type { !number } */
    this.error;
    /** @type { !boolean } */
    this.isSecureNetworkError;
  }
};


goog.provide('network.mojom.ResolveHostParameters_Source');
goog.provide('network.mojom.ResolveHostParametersSpec.SourceSpec');
/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
network.mojom.ResolveHostParametersSpec.SourceSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
network.mojom.ResolveHostParameters_Source = {
  
  ANY: 0,
  SYSTEM: 1,
  DNS: 2,
  MULTICAST_DNS: 3,
  LOCAL_ONLY: 4,
  MIN_VALUE: 0,
  MAX_VALUE: 4,
};

goog.provide('network.mojom.ResolveHostParameters_CacheUsage');
goog.provide('network.mojom.ResolveHostParametersSpec.CacheUsageSpec');
/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
network.mojom.ResolveHostParametersSpec.CacheUsageSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
network.mojom.ResolveHostParameters_CacheUsage = {
  
  ALLOWED: 0,
  STALE_ALLOWED: 1,
  DISALLOWED: 2,
  MIN_VALUE: 0,
  MAX_VALUE: 2,
};


mojo.internal.Struct(
    network.mojom.ResolveHostParametersSpec.$,
    'ResolveHostParameters',
    32,
    [
      mojo.internal.StructField(
        'dnsQueryType', 0,
        0,
        network.mojom.DnsQueryTypeSpec.$,
        network.mojom.DnsQueryType.UNSPECIFIED,
        false /* nullable */),
      mojo.internal.StructField(
        'initialPriority', 4,
        0,
        network.mojom.RequestPrioritySpec.$,
        network.mojom.RequestPriority.kLowest,
        false /* nullable */),
      mojo.internal.StructField(
        'source', 8,
        0,
        network.mojom.ResolveHostParametersSpec.SourceSpec.$,
        network.mojom.ResolveHostParameters_Source.ANY,
        false /* nullable */),
      mojo.internal.StructField(
        'cacheUsage', 12,
        0,
        network.mojom.ResolveHostParametersSpec.CacheUsageSpec.$,
        network.mojom.ResolveHostParameters_CacheUsage.ALLOWED,
        false /* nullable */),
      mojo.internal.StructField(
        'controlHandle', 16,
        0,
        mojo.internal.InterfaceRequest(network.mojom.ResolveHostHandlePendingReceiver),
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'includeCanonicalName', 20,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'loopbackOnly', 20,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'isSpeculative', 20,
        2,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'secureDnsModeOverride', 24,
        0,
        network.mojom.OptionalSecureDnsModeSpec.$,
        network.mojom.OptionalSecureDnsMode.NO_OVERRIDE,
        false /* nullable */),
    ]);



goog.provide('network.mojom.ResolveHostParameters');

/** @record */
network.mojom.ResolveHostParameters = class {
  constructor() {
    /** @type { !network.mojom.DnsQueryType } */
    this.dnsQueryType;
    /** @type { !network.mojom.RequestPriority } */
    this.initialPriority;
    /** @type { !network.mojom.ResolveHostParameters_Source } */
    this.source;
    /** @type { !network.mojom.ResolveHostParameters_CacheUsage } */
    this.cacheUsage;
    /** @type { (network.mojom.ResolveHostHandlePendingReceiver|undefined) } */
    this.controlHandle;
    /** @type { !boolean } */
    this.includeCanonicalName;
    /** @type { !boolean } */
    this.loopbackOnly;
    /** @type { !boolean } */
    this.isSpeculative;
    /** @type { !network.mojom.OptionalSecureDnsMode } */
    this.secureDnsModeOverride;
  }
};



mojo.internal.Struct(
    network.mojom.ResolveHostHandle_Cancel_ParamsSpec.$,
    'ResolveHostHandle_Cancel_Params',
    8,
    [
      mojo.internal.StructField(
        'result', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
    ]);



goog.provide('network.mojom.ResolveHostHandle_Cancel_Params');

/** @record */
network.mojom.ResolveHostHandle_Cancel_Params = class {
  constructor() {
    /** @type { !number } */
    this.result;
  }
};



mojo.internal.Struct(
    network.mojom.ResolveHostClient_OnComplete_ParamsSpec.$,
    'ResolveHostClient_OnComplete_Params',
    24,
    [
      mojo.internal.StructField(
        'result', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'resolveErrorInfo', 8,
        0,
        network.mojom.ResolveErrorInfoSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'resolvedAddresses', 16,
        0,
        network.mojom.AddressListSpec.$,
        null,
        true /* nullable */),
    ]);



goog.provide('network.mojom.ResolveHostClient_OnComplete_Params');

/** @record */
network.mojom.ResolveHostClient_OnComplete_Params = class {
  constructor() {
    /** @type { !number } */
    this.result;
    /** @type { !network.mojom.ResolveErrorInfo } */
    this.resolveErrorInfo;
    /** @type { (network.mojom.AddressList|undefined) } */
    this.resolvedAddresses;
  }
};



mojo.internal.Struct(
    network.mojom.ResolveHostClient_OnTextResults_ParamsSpec.$,
    'ResolveHostClient_OnTextResults_Params',
    8,
    [
      mojo.internal.StructField(
        'textResults', 0,
        0,
        mojo.internal.Array(mojo.internal.String, false),
        null,
        false /* nullable */),
    ]);



goog.provide('network.mojom.ResolveHostClient_OnTextResults_Params');

/** @record */
network.mojom.ResolveHostClient_OnTextResults_Params = class {
  constructor() {
    /** @type { !Array<!string> } */
    this.textResults;
  }
};



mojo.internal.Struct(
    network.mojom.ResolveHostClient_OnHostnameResults_ParamsSpec.$,
    'ResolveHostClient_OnHostnameResults_Params',
    8,
    [
      mojo.internal.StructField(
        'hosts', 0,
        0,
        mojo.internal.Array(network.mojom.HostPortPairSpec.$, false),
        null,
        false /* nullable */),
    ]);



goog.provide('network.mojom.ResolveHostClient_OnHostnameResults_Params');

/** @record */
network.mojom.ResolveHostClient_OnHostnameResults_Params = class {
  constructor() {
    /** @type { !Array<!network.mojom.HostPortPair> } */
    this.hosts;
  }
};



mojo.internal.Struct(
    network.mojom.MdnsListenClient_OnAddressResult_ParamsSpec.$,
    'MdnsListenClient_OnAddressResult_Params',
    16,
    [
      mojo.internal.StructField(
        'updateType', 0,
        0,
        network.mojom.MdnsListenClient.UpdateTypeSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'queryType', 4,
        0,
        network.mojom.DnsQueryTypeSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'endpoint', 8,
        0,
        network.mojom.IPEndPointSpec.$,
        null,
        false /* nullable */),
    ]);



goog.provide('network.mojom.MdnsListenClient_OnAddressResult_Params');

/** @record */
network.mojom.MdnsListenClient_OnAddressResult_Params = class {
  constructor() {
    /** @type { !network.mojom.MdnsListenClient_UpdateType } */
    this.updateType;
    /** @type { !network.mojom.DnsQueryType } */
    this.queryType;
    /** @type { !network.mojom.IPEndPoint } */
    this.endpoint;
  }
};



mojo.internal.Struct(
    network.mojom.MdnsListenClient_OnTextResult_ParamsSpec.$,
    'MdnsListenClient_OnTextResult_Params',
    16,
    [
      mojo.internal.StructField(
        'updateType', 0,
        0,
        network.mojom.MdnsListenClient.UpdateTypeSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'queryType', 4,
        0,
        network.mojom.DnsQueryTypeSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'textRecords', 8,
        0,
        mojo.internal.Array(mojo.internal.String, false),
        null,
        false /* nullable */),
    ]);



goog.provide('network.mojom.MdnsListenClient_OnTextResult_Params');

/** @record */
network.mojom.MdnsListenClient_OnTextResult_Params = class {
  constructor() {
    /** @type { !network.mojom.MdnsListenClient_UpdateType } */
    this.updateType;
    /** @type { !network.mojom.DnsQueryType } */
    this.queryType;
    /** @type { !Array<!string> } */
    this.textRecords;
  }
};



mojo.internal.Struct(
    network.mojom.MdnsListenClient_OnHostnameResult_ParamsSpec.$,
    'MdnsListenClient_OnHostnameResult_Params',
    16,
    [
      mojo.internal.StructField(
        'updateType', 0,
        0,
        network.mojom.MdnsListenClient.UpdateTypeSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'queryType', 4,
        0,
        network.mojom.DnsQueryTypeSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'host', 8,
        0,
        network.mojom.HostPortPairSpec.$,
        null,
        false /* nullable */),
    ]);



goog.provide('network.mojom.MdnsListenClient_OnHostnameResult_Params');

/** @record */
network.mojom.MdnsListenClient_OnHostnameResult_Params = class {
  constructor() {
    /** @type { !network.mojom.MdnsListenClient_UpdateType } */
    this.updateType;
    /** @type { !network.mojom.DnsQueryType } */
    this.queryType;
    /** @type { !network.mojom.HostPortPair } */
    this.host;
  }
};



mojo.internal.Struct(
    network.mojom.MdnsListenClient_OnUnhandledResult_ParamsSpec.$,
    'MdnsListenClient_OnUnhandledResult_Params',
    8,
    [
      mojo.internal.StructField(
        'updateType', 0,
        0,
        network.mojom.MdnsListenClient.UpdateTypeSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'queryType', 4,
        0,
        network.mojom.DnsQueryTypeSpec.$,
        0,
        false /* nullable */),
    ]);



goog.provide('network.mojom.MdnsListenClient_OnUnhandledResult_Params');

/** @record */
network.mojom.MdnsListenClient_OnUnhandledResult_Params = class {
  constructor() {
    /** @type { !network.mojom.MdnsListenClient_UpdateType } */
    this.updateType;
    /** @type { !network.mojom.DnsQueryType } */
    this.queryType;
  }
};



mojo.internal.Struct(
    network.mojom.HostResolver_ResolveHost_ParamsSpec.$,
    'HostResolver_ResolveHost_Params',
    32,
    [
      mojo.internal.StructField(
        'host', 0,
        0,
        network.mojom.HostPortPairSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'networkIsolationKey', 8,
        0,
        network.mojom.NetworkIsolationKeySpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'optionalParameters', 16,
        0,
        network.mojom.ResolveHostParametersSpec.$,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'responseClient', 24,
        0,
        mojo.internal.InterfaceProxy(network.mojom.ResolveHostClientRemote),
        null,
        false /* nullable */),
    ]);



goog.provide('network.mojom.HostResolver_ResolveHost_Params');

/** @record */
network.mojom.HostResolver_ResolveHost_Params = class {
  constructor() {
    /** @type { !network.mojom.HostPortPair } */
    this.host;
    /** @type { !network.mojom.NetworkIsolationKey } */
    this.networkIsolationKey;
    /** @type { (network.mojom.ResolveHostParameters|undefined) } */
    this.optionalParameters;
    /** @type { !network.mojom.ResolveHostClientRemote } */
    this.responseClient;
  }
};



mojo.internal.Struct(
    network.mojom.HostResolver_MdnsListen_ParamsSpec.$,
    'HostResolver_MdnsListen_Params',
    24,
    [
      mojo.internal.StructField(
        'host', 0,
        0,
        network.mojom.HostPortPairSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'queryType', 8,
        0,
        network.mojom.DnsQueryTypeSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'responseClient', 12,
        0,
        mojo.internal.InterfaceProxy(network.mojom.MdnsListenClientRemote),
        null,
        false /* nullable */),
    ]);



goog.provide('network.mojom.HostResolver_MdnsListen_Params');

/** @record */
network.mojom.HostResolver_MdnsListen_Params = class {
  constructor() {
    /** @type { !network.mojom.HostPortPair } */
    this.host;
    /** @type { !network.mojom.DnsQueryType } */
    this.queryType;
    /** @type { !network.mojom.MdnsListenClientRemote } */
    this.responseClient;
  }
};



mojo.internal.Struct(
    network.mojom.HostResolver_MdnsListen_ResponseParamsSpec.$,
    'HostResolver_MdnsListen_ResponseParams',
    8,
    [
      mojo.internal.StructField(
        'result', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
    ]);



goog.provide('network.mojom.HostResolver_MdnsListen_ResponseParams');

/** @record */
network.mojom.HostResolver_MdnsListen_ResponseParams = class {
  constructor() {
    /** @type { !number } */
    this.result;
  }
};



mojo.internal.Struct(
    network.mojom.DnsConfigChangeManagerClient_OnDnsConfigChanged_ParamsSpec.$,
    'DnsConfigChangeManagerClient_OnDnsConfigChanged_Params',
    0,
    [
    ]);



goog.provide('network.mojom.DnsConfigChangeManagerClient_OnDnsConfigChanged_Params');

/** @record */
network.mojom.DnsConfigChangeManagerClient_OnDnsConfigChanged_Params = class {
  constructor() {
  }
};



mojo.internal.Struct(
    network.mojom.DnsConfigChangeManager_RequestNotifications_ParamsSpec.$,
    'DnsConfigChangeManager_RequestNotifications_Params',
    8,
    [
      mojo.internal.StructField(
        'client', 0,
        0,
        mojo.internal.InterfaceProxy(network.mojom.DnsConfigChangeManagerClientRemote),
        null,
        false /* nullable */),
    ]);



goog.provide('network.mojom.DnsConfigChangeManager_RequestNotifications_Params');

/** @record */
network.mojom.DnsConfigChangeManager_RequestNotifications_Params = class {
  constructor() {
    /** @type { !network.mojom.DnsConfigChangeManagerClientRemote } */
    this.client;
  }
};


// services/network/public/mojom/content_security_policy.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_CONTENT_SECURITY_POLICY_MOJOM_SHARED_INTERNAL_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_CONTENT_SECURITY_POLICY_MOJOM_SHARED_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "url/mojom/url.mojom-shared-internal.h"
#include "services/network/public/mojom/source_location.mojom-shared-internal.h"
#include "services/network/public/mojom/web_sandbox_flags.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace network {
namespace mojom {
namespace internal {
class ContentSecurityPolicyHeader_Data;
class CSPSource_Data;
class CSPSourceList_Data;
class ContentSecurityPolicy_Data;
class CSPViolation_Data;

struct ContentSecurityPolicyType_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct ContentSecurityPolicySource_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct CSPDisposition_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct CSPDirectiveName_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

#pragma pack(push, 1)
class  ContentSecurityPolicyHeader_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ContentSecurityPolicyHeader_Data));
      new (data()) ContentSecurityPolicyHeader_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ContentSecurityPolicyHeader_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ContentSecurityPolicyHeader_Data>(index_);
    }
    ContentSecurityPolicyHeader_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> header_value;
  int32_t type;
  int32_t source;

 private:
  ContentSecurityPolicyHeader_Data();
  ~ContentSecurityPolicyHeader_Data() = delete;
};
static_assert(sizeof(ContentSecurityPolicyHeader_Data) == 24,
              "Bad sizeof(ContentSecurityPolicyHeader_Data)");
// Used by ContentSecurityPolicyHeader::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct ContentSecurityPolicyHeader_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  ContentSecurityPolicyHeader_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~ContentSecurityPolicyHeader_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    ContentSecurityPolicyHeader_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    ContentSecurityPolicyHeader_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  CSPSource_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(CSPSource_Data));
      new (data()) CSPSource_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    CSPSource_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<CSPSource_Data>(index_);
    }
    CSPSource_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> scheme;
  mojo::internal::Pointer<mojo::internal::String_Data> host;
  int32_t port;
  uint8_t is_host_wildcard : 1;
  uint8_t is_port_wildcard : 1;
  uint8_t pad4_[3];
  mojo::internal::Pointer<mojo::internal::String_Data> path;

 private:
  CSPSource_Data();
  ~CSPSource_Data() = delete;
};
static_assert(sizeof(CSPSource_Data) == 40,
              "Bad sizeof(CSPSource_Data)");
// Used by CSPSource::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct CSPSource_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  CSPSource_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~CSPSource_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    CSPSource_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    CSPSource_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  CSPSourceList_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(CSPSourceList_Data));
      new (data()) CSPSourceList_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    CSPSourceList_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<CSPSourceList_Data>(index_);
    }
    CSPSourceList_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::CSPSource_Data>>> sources;
  uint8_t allow_self : 1;
  uint8_t allow_star : 1;
  uint8_t allow_response_redirects : 1;
  uint8_t padfinal_[7];

 private:
  CSPSourceList_Data();
  ~CSPSourceList_Data() = delete;
};
static_assert(sizeof(CSPSourceList_Data) == 24,
              "Bad sizeof(CSPSourceList_Data)");
// Used by CSPSourceList::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct CSPSourceList_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  CSPSourceList_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~CSPSourceList_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    CSPSourceList_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    CSPSourceList_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  ContentSecurityPolicy_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ContentSecurityPolicy_Data));
      new (data()) ContentSecurityPolicy_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ContentSecurityPolicy_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ContentSecurityPolicy_Data>(index_);
    }
    ContentSecurityPolicy_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Map_Data<int32_t, mojo::internal::Pointer<internal::CSPSourceList_Data>>> directives;
  uint8_t upgrade_insecure_requests : 1;
  uint8_t treat_as_public_address : 1;
  uint8_t use_reporting_api : 1;
  uint8_t pad3_[3];
  int32_t sandbox;
  mojo::internal::Pointer<internal::ContentSecurityPolicyHeader_Data> header;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<mojo::internal::String_Data>>> report_endpoints;

 private:
  ContentSecurityPolicy_Data();
  ~ContentSecurityPolicy_Data() = delete;
};
static_assert(sizeof(ContentSecurityPolicy_Data) == 40,
              "Bad sizeof(ContentSecurityPolicy_Data)");
// Used by ContentSecurityPolicy::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct ContentSecurityPolicy_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  ContentSecurityPolicy_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~ContentSecurityPolicy_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    ContentSecurityPolicy_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    ContentSecurityPolicy_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  CSPViolation_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(CSPViolation_Data));
      new (data()) CSPViolation_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    CSPViolation_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<CSPViolation_Data>(index_);
    }
    CSPViolation_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> directive;
  mojo::internal::Pointer<mojo::internal::String_Data> effective_directive;
  mojo::internal::Pointer<mojo::internal::String_Data> console_message;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> blocked_url;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<mojo::internal::String_Data>>> report_endpoints;
  uint8_t use_reporting_api : 1;
  uint8_t after_redirect : 1;
  uint8_t pad6_[3];
  int32_t type;
  mojo::internal::Pointer<mojo::internal::String_Data> header;
  mojo::internal::Pointer<::network::mojom::internal::SourceLocation_Data> source_location;

 private:
  CSPViolation_Data();
  ~CSPViolation_Data() = delete;
};
static_assert(sizeof(CSPViolation_Data) == 72,
              "Bad sizeof(CSPViolation_Data)");
// Used by CSPViolation::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct CSPViolation_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  CSPViolation_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~CSPViolation_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    CSPViolation_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    CSPViolation_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace network

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_CONTENT_SECURITY_POLICY_MOJOM_SHARED_INTERNAL_H_
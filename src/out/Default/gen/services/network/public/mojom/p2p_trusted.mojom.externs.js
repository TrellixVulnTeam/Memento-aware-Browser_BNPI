// services/network/public/mojom/p2p_trusted.mojom.externs.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.



goog.provide('network.mojom.P2PTrustedSocketManagerClient');
goog.provide('network.mojom.P2PTrustedSocketManagerClientImpl');
goog.provide('network.mojom.P2PTrustedSocketManagerClientPtr');



/**
 * @const
 * @type { !mojo.Interface };
 */
network.mojom.P2PTrustedSocketManagerClient;

/** @interface */
network.mojom.P2PTrustedSocketManagerClientImpl = class {
  /**
   */
  invalidSocketPortRangeRequested() {}
  /**
   * @param { !Array<number> } packetHeader
   * @param { !number } packetLength
   * @param { !boolean } incoming
   */
  dumpPacket(packetHeader, packetLength, incoming) {}
};

/**
 * @implements { mojo.InterfacePtr }
 * @implements { network.mojom.P2PTrustedSocketManagerClientImpl }
 */
network.mojom.P2PTrustedSocketManagerClientPtr = class {
  /**
   */
  invalidSocketPortRangeRequested() {}
  /**
   * @param { !Array<number> } packetHeader
   * @param { !number } packetLength
   * @param { !boolean } incoming
   */
  dumpPacket(packetHeader, packetLength, incoming) {}
};

goog.provide('network.mojom.P2PTrustedSocketManager');
goog.provide('network.mojom.P2PTrustedSocketManagerImpl');
goog.provide('network.mojom.P2PTrustedSocketManagerPtr');



/**
 * @const
 * @type { !mojo.Interface };
 */
network.mojom.P2PTrustedSocketManager;

/** @interface */
network.mojom.P2PTrustedSocketManagerImpl = class {
  /**
   * @param { !boolean } incoming
   * @param { !boolean } outgoing
   */
  startRtpDump(incoming, outgoing) {}
  /**
   * @param { !boolean } incoming
   * @param { !boolean } outgoing
   */
  stopRtpDump(incoming, outgoing) {}
};

/**
 * @implements { mojo.InterfacePtr }
 * @implements { network.mojom.P2PTrustedSocketManagerImpl }
 */
network.mojom.P2PTrustedSocketManagerPtr = class {
  /**
   * @param { !boolean } incoming
   * @param { !boolean } outgoing
   */
  startRtpDump(incoming, outgoing) {}
  /**
   * @param { !boolean } incoming
   * @param { !boolean } outgoing
   */
  stopRtpDump(incoming, outgoing) {}
};

goog.provide('network.mojom.P2PTrustedSocketManagerClient_InvalidSocketPortRangeRequested_Params');

network.mojom.P2PTrustedSocketManagerClient_InvalidSocketPortRangeRequested_Params = class {
  constructor() {
  }
};

goog.provide('network.mojom.P2PTrustedSocketManagerClient_DumpPacket_Params');

network.mojom.P2PTrustedSocketManagerClient_DumpPacket_Params = class {
  constructor() {
    /** @type { !Array<number> } */
    this.packetHeader;
    /** @type { !number } */
    this.packetLength;
    /** @type { !boolean } */
    this.incoming;
  }
};

goog.provide('network.mojom.P2PTrustedSocketManager_StartRtpDump_Params');

network.mojom.P2PTrustedSocketManager_StartRtpDump_Params = class {
  constructor() {
    /** @type { !boolean } */
    this.incoming;
    /** @type { !boolean } */
    this.outgoing;
  }
};

goog.provide('network.mojom.P2PTrustedSocketManager_StopRtpDump_Params');

network.mojom.P2PTrustedSocketManager_StopRtpDump_Params = class {
  constructor() {
    /** @type { !boolean } */
    this.incoming;
    /** @type { !boolean } */
    this.outgoing;
  }
};

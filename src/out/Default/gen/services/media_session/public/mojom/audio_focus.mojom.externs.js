// services/media_session/public/mojom/audio_focus.mojom.externs.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.



/** @enum {number} */
mediaSession.mojom.EnforcementMode = {};
mediaSession.mojom.EnforcementMode.kDefault;
mediaSession.mojom.EnforcementMode.kNone;
mediaSession.mojom.EnforcementMode.kSingleGroup;
mediaSession.mojom.EnforcementMode.kSingleSession;
/** @enum {number} */
mediaSession.mojom.AudioFocusType = {};
mediaSession.mojom.AudioFocusType.kGain;
mediaSession.mojom.AudioFocusType.kGainTransientMayDuck;
mediaSession.mojom.AudioFocusType.kGainTransient;
mediaSession.mojom.AudioFocusType.kAmbient;
goog.provide('mediaSession.mojom.AudioFocusObserver');
goog.provide('mediaSession.mojom.AudioFocusObserverImpl');
goog.provide('mediaSession.mojom.AudioFocusObserverPtr');



/**
 * @const
 * @type { !mojo.Interface };
 */
mediaSession.mojom.AudioFocusObserver;

/** @interface */
mediaSession.mojom.AudioFocusObserverImpl = class {
  /**
   * @param { !mediaSession.mojom.AudioFocusRequestState } state
   */
  onFocusGained(state) {}
  /**
   * @param { !mediaSession.mojom.AudioFocusRequestState } state
   */
  onFocusLost(state) {}
};

/**
 * @implements { mojo.InterfacePtr }
 * @implements { mediaSession.mojom.AudioFocusObserverImpl }
 */
mediaSession.mojom.AudioFocusObserverPtr = class {
  /**
   * @param { !mediaSession.mojom.AudioFocusRequestState } state
   */
  onFocusGained(state) {}
  /**
   * @param { !mediaSession.mojom.AudioFocusRequestState } state
   */
  onFocusLost(state) {}
};

goog.provide('mediaSession.mojom.AudioFocusRequestClient');
goog.provide('mediaSession.mojom.AudioFocusRequestClientImpl');
goog.provide('mediaSession.mojom.AudioFocusRequestClientPtr');



/**
 * @const
 * @type { !mojo.Interface };
 */
mediaSession.mojom.AudioFocusRequestClient;

/** @interface */
mediaSession.mojom.AudioFocusRequestClientImpl = class {
  /**
   * @param { !mediaSession.mojom.MediaSessionInfo } sessionInfo
   * @param { !mediaSession.mojom.AudioFocusType } type
   * @return {Promise}
   */
  requestAudioFocus(sessionInfo, type) {}
  /**
   */
  abandonAudioFocus() {}
  /**
   * @param { !mediaSession.mojom.MediaSessionInfo } sessionInfo
   */
  mediaSessionInfoChanged(sessionInfo) {}
};

/**
 * @implements { mojo.InterfacePtr }
 * @implements { mediaSession.mojom.AudioFocusRequestClientImpl }
 */
mediaSession.mojom.AudioFocusRequestClientPtr = class {
  /**
   * @param { !mediaSession.mojom.MediaSessionInfo } sessionInfo
   * @param { !mediaSession.mojom.AudioFocusType } type
   * @return {Promise}
   */
  requestAudioFocus(sessionInfo, type) {}
  /**
   */
  abandonAudioFocus() {}
  /**
   * @param { !mediaSession.mojom.MediaSessionInfo } sessionInfo
   */
  mediaSessionInfoChanged(sessionInfo) {}
};

goog.provide('mediaSession.mojom.AudioFocusManager');
goog.provide('mediaSession.mojom.AudioFocusManagerImpl');
goog.provide('mediaSession.mojom.AudioFocusManagerPtr');



/**
 * @const
 * @type { !mojo.Interface };
 */
mediaSession.mojom.AudioFocusManager;

/** @interface */
mediaSession.mojom.AudioFocusManagerImpl = class {
  /**
   * @param { !mojo.InterfaceRequest } client
   * @param { !mediaSession.mojom.MediaSessionPtr } session
   * @param { !mediaSession.mojom.MediaSessionInfo } sessionInfo
   * @param { !mediaSession.mojom.AudioFocusType } type
   * @return {Promise}
   */
  requestAudioFocus(client, session, sessionInfo, type) {}
  /**
   * @param { !mojoBase.mojom.UnguessableToken } requestId
   * @param { !mojo.InterfaceRequest } client
   * @param { !mediaSession.mojom.MediaSessionPtr } session
   * @param { !mediaSession.mojom.MediaSessionInfo } sessionInfo
   * @param { !mediaSession.mojom.AudioFocusType } type
   * @param { !mojoBase.mojom.UnguessableToken } groupId
   * @return {Promise}
   */
  requestGroupedAudioFocus(requestId, client, session, sessionInfo, type, groupId) {}
  /**
   * @return {Promise}
   */
  getFocusRequests() {}
  /**
   * @param { !mediaSession.mojom.AudioFocusObserverPtr } observer
   */
  addObserver(observer) {}
  /**
   * @param { !mojoBase.mojom.UnguessableToken } identity
   * @param { !string } name
   */
  setSource(identity, name) {}
  /**
   * @param { !mediaSession.mojom.EnforcementMode } mode
   */
  setEnforcementMode(mode) {}
  /**
   * @param { !mojoBase.mojom.UnguessableToken } sourceId
   * @param { !mediaSession.mojom.AudioFocusObserverPtr } observer
   */
  addSourceObserver(sourceId, observer) {}
  /**
   * @param { !mojoBase.mojom.UnguessableToken } sourceId
   * @return {Promise}
   */
  getSourceFocusRequests(sourceId) {}
};

/**
 * @implements { mojo.InterfacePtr }
 * @implements { mediaSession.mojom.AudioFocusManagerImpl }
 */
mediaSession.mojom.AudioFocusManagerPtr = class {
  /**
   * @param { !mojo.InterfaceRequest } client
   * @param { !mediaSession.mojom.MediaSessionPtr } session
   * @param { !mediaSession.mojom.MediaSessionInfo } sessionInfo
   * @param { !mediaSession.mojom.AudioFocusType } type
   * @return {Promise}
   */
  requestAudioFocus(client, session, sessionInfo, type) {}
  /**
   * @param { !mojoBase.mojom.UnguessableToken } requestId
   * @param { !mojo.InterfaceRequest } client
   * @param { !mediaSession.mojom.MediaSessionPtr } session
   * @param { !mediaSession.mojom.MediaSessionInfo } sessionInfo
   * @param { !mediaSession.mojom.AudioFocusType } type
   * @param { !mojoBase.mojom.UnguessableToken } groupId
   * @return {Promise}
   */
  requestGroupedAudioFocus(requestId, client, session, sessionInfo, type, groupId) {}
  /**
   * @return {Promise}
   */
  getFocusRequests() {}
  /**
   * @param { !mediaSession.mojom.AudioFocusObserverPtr } observer
   */
  addObserver(observer) {}
  /**
   * @param { !mojoBase.mojom.UnguessableToken } identity
   * @param { !string } name
   */
  setSource(identity, name) {}
  /**
   * @param { !mediaSession.mojom.EnforcementMode } mode
   */
  setEnforcementMode(mode) {}
  /**
   * @param { !mojoBase.mojom.UnguessableToken } sourceId
   * @param { !mediaSession.mojom.AudioFocusObserverPtr } observer
   */
  addSourceObserver(sourceId, observer) {}
  /**
   * @param { !mojoBase.mojom.UnguessableToken } sourceId
   * @return {Promise}
   */
  getSourceFocusRequests(sourceId) {}
};

goog.provide('mediaSession.mojom.AudioFocusManagerDebug');
goog.provide('mediaSession.mojom.AudioFocusManagerDebugImpl');
goog.provide('mediaSession.mojom.AudioFocusManagerDebugPtr');



/**
 * @const
 * @type { !mojo.Interface };
 */
mediaSession.mojom.AudioFocusManagerDebug;

/** @interface */
mediaSession.mojom.AudioFocusManagerDebugImpl = class {
  /**
   * @param { !mojoBase.mojom.UnguessableToken } requestId
   * @return {Promise}
   */
  getDebugInfoForRequest(requestId) {}
};

/**
 * @implements { mojo.InterfacePtr }
 * @implements { mediaSession.mojom.AudioFocusManagerDebugImpl }
 */
mediaSession.mojom.AudioFocusManagerDebugPtr = class {
  /**
   * @param { !mojoBase.mojom.UnguessableToken } requestId
   * @return {Promise}
   */
  getDebugInfoForRequest(requestId) {}
};

goog.provide('mediaSession.mojom.AudioFocusRequestState');

mediaSession.mojom.AudioFocusRequestState = class {
  constructor() {
    /** @type { !mediaSession.mojom.MediaSessionInfo } */
    this.sessionInfo;
    /** @type { !mediaSession.mojom.AudioFocusType } */
    this.audioFocusType;
    /** @type { string } */
    this.sourceName;
    /** @type { mojoBase.mojom.UnguessableToken } */
    this.requestId;
  }
};

goog.provide('mediaSession.mojom.AudioFocusObserver_OnFocusGained_Params');

mediaSession.mojom.AudioFocusObserver_OnFocusGained_Params = class {
  constructor() {
    /** @type { !mediaSession.mojom.AudioFocusRequestState } */
    this.state;
  }
};

goog.provide('mediaSession.mojom.AudioFocusObserver_OnFocusLost_Params');

mediaSession.mojom.AudioFocusObserver_OnFocusLost_Params = class {
  constructor() {
    /** @type { !mediaSession.mojom.AudioFocusRequestState } */
    this.state;
  }
};

goog.provide('mediaSession.mojom.AudioFocusRequestClient_RequestAudioFocus_Params');

mediaSession.mojom.AudioFocusRequestClient_RequestAudioFocus_Params = class {
  constructor() {
    /** @type { !mediaSession.mojom.MediaSessionInfo } */
    this.sessionInfo;
    /** @type { !mediaSession.mojom.AudioFocusType } */
    this.type;
  }
};

goog.provide('mediaSession.mojom.AudioFocusRequestClient_RequestAudioFocus_ResponseParams');

mediaSession.mojom.AudioFocusRequestClient_RequestAudioFocus_ResponseParams = class {
  constructor() {
  }
};

goog.provide('mediaSession.mojom.AudioFocusRequestClient_AbandonAudioFocus_Params');

mediaSession.mojom.AudioFocusRequestClient_AbandonAudioFocus_Params = class {
  constructor() {
  }
};

goog.provide('mediaSession.mojom.AudioFocusRequestClient_MediaSessionInfoChanged_Params');

mediaSession.mojom.AudioFocusRequestClient_MediaSessionInfoChanged_Params = class {
  constructor() {
    /** @type { !mediaSession.mojom.MediaSessionInfo } */
    this.sessionInfo;
  }
};

goog.provide('mediaSession.mojom.AudioFocusManager_RequestAudioFocus_Params');

mediaSession.mojom.AudioFocusManager_RequestAudioFocus_Params = class {
  constructor() {
    /** @type { !mojo.InterfaceRequest } */
    this.client;
    /** @type { !mediaSession.mojom.MediaSessionPtr } */
    this.session;
    /** @type { !mediaSession.mojom.AudioFocusType } */
    this.type;
    /** @type { !mediaSession.mojom.MediaSessionInfo } */
    this.sessionInfo;
  }
};

goog.provide('mediaSession.mojom.AudioFocusManager_RequestAudioFocus_ResponseParams');

mediaSession.mojom.AudioFocusManager_RequestAudioFocus_ResponseParams = class {
  constructor() {
    /** @type { !mojoBase.mojom.UnguessableToken } */
    this.requestId;
  }
};

goog.provide('mediaSession.mojom.AudioFocusManager_RequestGroupedAudioFocus_Params');

mediaSession.mojom.AudioFocusManager_RequestGroupedAudioFocus_Params = class {
  constructor() {
    /** @type { !mojoBase.mojom.UnguessableToken } */
    this.requestId;
    /** @type { !mojo.InterfaceRequest } */
    this.client;
    /** @type { !mediaSession.mojom.MediaSessionPtr } */
    this.session;
    /** @type { !mediaSession.mojom.AudioFocusType } */
    this.type;
    /** @type { !mediaSession.mojom.MediaSessionInfo } */
    this.sessionInfo;
    /** @type { !mojoBase.mojom.UnguessableToken } */
    this.groupId;
  }
};

goog.provide('mediaSession.mojom.AudioFocusManager_RequestGroupedAudioFocus_ResponseParams');

mediaSession.mojom.AudioFocusManager_RequestGroupedAudioFocus_ResponseParams = class {
  constructor() {
    /** @type { !boolean } */
    this.success;
  }
};

goog.provide('mediaSession.mojom.AudioFocusManager_GetFocusRequests_Params');

mediaSession.mojom.AudioFocusManager_GetFocusRequests_Params = class {
  constructor() {
  }
};

goog.provide('mediaSession.mojom.AudioFocusManager_GetFocusRequests_ResponseParams');

mediaSession.mojom.AudioFocusManager_GetFocusRequests_ResponseParams = class {
  constructor() {
    /** @type { !Array<mediaSession.mojom.AudioFocusRequestState> } */
    this.requests;
  }
};

goog.provide('mediaSession.mojom.AudioFocusManager_AddObserver_Params');

mediaSession.mojom.AudioFocusManager_AddObserver_Params = class {
  constructor() {
    /** @type { !mediaSession.mojom.AudioFocusObserverPtr } */
    this.observer;
  }
};

goog.provide('mediaSession.mojom.AudioFocusManager_SetSource_Params');

mediaSession.mojom.AudioFocusManager_SetSource_Params = class {
  constructor() {
    /** @type { !mojoBase.mojom.UnguessableToken } */
    this.identity;
    /** @type { !string } */
    this.name;
  }
};

goog.provide('mediaSession.mojom.AudioFocusManager_SetEnforcementMode_Params');

mediaSession.mojom.AudioFocusManager_SetEnforcementMode_Params = class {
  constructor() {
    /** @type { !mediaSession.mojom.EnforcementMode } */
    this.mode;
  }
};

goog.provide('mediaSession.mojom.AudioFocusManager_AddSourceObserver_Params');

mediaSession.mojom.AudioFocusManager_AddSourceObserver_Params = class {
  constructor() {
    /** @type { !mojoBase.mojom.UnguessableToken } */
    this.sourceId;
    /** @type { !mediaSession.mojom.AudioFocusObserverPtr } */
    this.observer;
  }
};

goog.provide('mediaSession.mojom.AudioFocusManager_GetSourceFocusRequests_Params');

mediaSession.mojom.AudioFocusManager_GetSourceFocusRequests_Params = class {
  constructor() {
    /** @type { !mojoBase.mojom.UnguessableToken } */
    this.sourceId;
  }
};

goog.provide('mediaSession.mojom.AudioFocusManager_GetSourceFocusRequests_ResponseParams');

mediaSession.mojom.AudioFocusManager_GetSourceFocusRequests_ResponseParams = class {
  constructor() {
    /** @type { !Array<mediaSession.mojom.AudioFocusRequestState> } */
    this.requests;
  }
};

goog.provide('mediaSession.mojom.AudioFocusManagerDebug_GetDebugInfoForRequest_Params');

mediaSession.mojom.AudioFocusManagerDebug_GetDebugInfoForRequest_Params = class {
  constructor() {
    /** @type { !mojoBase.mojom.UnguessableToken } */
    this.requestId;
  }
};

goog.provide('mediaSession.mojom.AudioFocusManagerDebug_GetDebugInfoForRequest_ResponseParams');

mediaSession.mojom.AudioFocusManagerDebug_GetDebugInfoForRequest_ResponseParams = class {
  constructor() {
    /** @type { !mediaSession.mojom.MediaSessionDebugInfo } */
    this.debugInfo;
  }
};

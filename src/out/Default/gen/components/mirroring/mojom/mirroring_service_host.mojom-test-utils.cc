// components/mirroring/mojom/mirroring_service_host.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "components/mirroring/mojom/mirroring_service_host.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "components/mirroring/mojom/cast_message_channel.mojom.h"
#include "components/mirroring/mojom/session_observer.mojom.h"
#include "components/mirroring/mojom/session_parameters.mojom.h"


#ifndef COMPONENTS_MIRRORING_MOJOM_MIRRORING_SERVICE_HOST_MOJOM_JUMBO_H_
#define COMPONENTS_MIRRORING_MOJOM_MIRRORING_SERVICE_HOST_MOJOM_JUMBO_H_
#endif


namespace mirroring {
namespace mojom {


void MirroringServiceHostInterceptorForTesting::Start(::mirroring::mojom::SessionParametersPtr params, ::mojo::PendingRemote<::mirroring::mojom::SessionObserver> observer, ::mojo::PendingRemote<::mirroring::mojom::CastMessageChannel> outbound_channel, ::mojo::PendingReceiver<::mirroring::mojom::CastMessageChannel> inbound_channel) {
  GetForwardingInterface()->Start(std::move(params), std::move(observer), std::move(outbound_channel), std::move(inbound_channel));
}
MirroringServiceHostAsyncWaiter::MirroringServiceHostAsyncWaiter(
    MirroringServiceHost* proxy) : proxy_(proxy) {}

MirroringServiceHostAsyncWaiter::~MirroringServiceHostAsyncWaiter() = default;






}  // namespace mojom
}  // namespace mirroring

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
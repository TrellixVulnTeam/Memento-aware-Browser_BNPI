// components/mirroring/mojom/session_parameters.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_MIRRORING_MOJOM_SESSION_PARAMETERS_MOJOM_SHARED_H_
#define COMPONENTS_MIRRORING_MOJOM_SESSION_PARAMETERS_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "components/mirroring/mojom/session_parameters.mojom-shared-internal.h"
#include "services/network/public/mojom/ip_address.mojom-shared.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"







namespace mirroring {
namespace mojom {
class SessionParametersDataView;



}  // namespace mojom
}  // namespace mirroring

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::mirroring::mojom::SessionParametersDataView> {
  using Data = ::mirroring::mojom::internal::SessionParameters_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace mirroring {
namespace mojom {


enum class SessionType : int32_t {
  
  AUDIO_ONLY = 0,
  
  VIDEO_ONLY = 1,
  
  AUDIO_AND_VIDEO = 2,
  kMinValue = 0,
  kMaxValue = 2,
};

 std::ostream& operator<<(std::ostream& os, SessionType value);
inline bool IsKnownEnumValue(SessionType value) {
  return internal::SessionType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
class SessionParametersDataView {
 public:
  SessionParametersDataView() {}

  SessionParametersDataView(
      internal::SessionParameters_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadType(UserType* output) const {
    auto data_value = data_->type;
    return mojo::internal::Deserialize<::mirroring::mojom::SessionType>(
        data_value, output);
  }

  SessionType type() const {
    return static_cast<SessionType>(data_->type);
  }
  inline void GetReceiverAddressDataView(
      ::network::mojom::IPAddressDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadReceiverAddress(UserType* output) {
    auto* pointer = data_->receiver_address.Get();
    return mojo::internal::Deserialize<::network::mojom::IPAddressDataView>(
        pointer, output, context_);
  }
  inline void GetReceiverModelNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadReceiverModelName(UserType* output) {
    auto* pointer = data_->receiver_model_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
  inline void GetTargetPlayoutDelayDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTargetPlayoutDelay(UserType* output) {
    auto* pointer = data_->target_playout_delay.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, context_);
  }
 private:
  internal::SessionParameters_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};



}  // namespace mojom
}  // namespace mirroring

namespace std {

template <>
struct hash<::mirroring::mojom::SessionType>
    : public mojo::internal::EnumHashImpl<::mirroring::mojom::SessionType> {};

}  // namespace std

namespace mojo {


template <>
struct EnumTraits<::mirroring::mojom::SessionType, ::mirroring::mojom::SessionType> {
  static ::mirroring::mojom::SessionType ToMojom(::mirroring::mojom::SessionType input) { return input; }
  static bool FromMojom(::mirroring::mojom::SessionType input, ::mirroring::mojom::SessionType* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::mirroring::mojom::SessionType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::mirroring::mojom::SessionType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::mirroring::mojom::SessionType>(input), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::mirroring::mojom::SessionParametersDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::mirroring::mojom::SessionParametersDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::mirroring::mojom::internal::SessionParameters_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    mojo::internal::Serialize<::mirroring::mojom::SessionType>(
        Traits::type(input), &(*output)->type);
    decltype(Traits::receiver_address(input)) in_receiver_address = Traits::receiver_address(input);
    typename decltype((*output)->receiver_address)::BaseType::BufferWriter
        receiver_address_writer;
    mojo::internal::Serialize<::network::mojom::IPAddressDataView>(
        in_receiver_address, buffer, &receiver_address_writer, context);
    (*output)->receiver_address.Set(
        receiver_address_writer.is_null() ? nullptr : receiver_address_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->receiver_address.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null receiver_address in SessionParameters struct");
    decltype(Traits::receiver_model_name(input)) in_receiver_model_name = Traits::receiver_model_name(input);
    typename decltype((*output)->receiver_model_name)::BaseType::BufferWriter
        receiver_model_name_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_receiver_model_name, buffer, &receiver_model_name_writer, context);
    (*output)->receiver_model_name.Set(
        receiver_model_name_writer.is_null() ? nullptr : receiver_model_name_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->receiver_model_name.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null receiver_model_name in SessionParameters struct");
    decltype(Traits::target_playout_delay(input)) in_target_playout_delay = Traits::target_playout_delay(input);
    typename decltype((*output)->target_playout_delay)::BaseType::BufferWriter
        target_playout_delay_writer;
    mojo::internal::Serialize<::mojo_base::mojom::TimeDeltaDataView>(
        in_target_playout_delay, buffer, &target_playout_delay_writer, context);
    (*output)->target_playout_delay.Set(
        target_playout_delay_writer.is_null() ? nullptr : target_playout_delay_writer.data());
  }

  static bool Deserialize(::mirroring::mojom::internal::SessionParameters_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::mirroring::mojom::SessionParametersDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace mirroring {
namespace mojom {

inline void SessionParametersDataView::GetReceiverAddressDataView(
    ::network::mojom::IPAddressDataView* output) {
  auto pointer = data_->receiver_address.Get();
  *output = ::network::mojom::IPAddressDataView(pointer, context_);
}
inline void SessionParametersDataView::GetReceiverModelNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->receiver_model_name.Get();
  *output = mojo::StringDataView(pointer, context_);
}
inline void SessionParametersDataView::GetTargetPlayoutDelayDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->target_playout_delay.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, context_);
}



}  // namespace mojom
}  // namespace mirroring

#endif  // COMPONENTS_MIRRORING_MOJOM_SESSION_PARAMETERS_MOJOM_SHARED_H_
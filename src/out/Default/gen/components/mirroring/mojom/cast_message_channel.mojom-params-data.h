// components/mirroring/mojom/cast_message_channel.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_MIRRORING_MOJOM_CAST_MESSAGE_CHANNEL_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_MIRRORING_MOJOM_CAST_MESSAGE_CHANNEL_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace mirroring {
namespace mojom {
namespace internal {
class  CastMessageChannel_Send_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(CastMessageChannel_Send_Params_Data));
      new (data()) CastMessageChannel_Send_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    CastMessageChannel_Send_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<CastMessageChannel_Send_Params_Data>(index_);
    }
    CastMessageChannel_Send_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::CastMessage_Data> message;

 private:
  CastMessageChannel_Send_Params_Data();
  ~CastMessageChannel_Send_Params_Data() = delete;
};
static_assert(sizeof(CastMessageChannel_Send_Params_Data) == 16,
              "Bad sizeof(CastMessageChannel_Send_Params_Data)");

}  // namespace internal
class CastMessageChannel_Send_ParamsDataView {
 public:
  CastMessageChannel_Send_ParamsDataView() {}

  CastMessageChannel_Send_ParamsDataView(
      internal::CastMessageChannel_Send_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetMessageDataView(
      CastMessageDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadMessage(UserType* output) {
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<::mirroring::mojom::CastMessageDataView>(
        pointer, output, context_);
  }
 private:
  internal::CastMessageChannel_Send_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};


inline void CastMessageChannel_Send_ParamsDataView::GetMessageDataView(
    CastMessageDataView* output) {
  auto pointer = data_->message.Get();
  *output = CastMessageDataView(pointer, context_);
}

}  // namespace mojom
}  // namespace mirroring

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // COMPONENTS_MIRRORING_MOJOM_CAST_MESSAGE_CHANNEL_MOJOM_PARAMS_DATA_H_
// components/mirroring/mojom/session_observer.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "components/mirroring/mojom/session_observer.mojom-shared.h"

#include <utility>

#include "base/logging.h"
#include "base/stl_util.h"  // for base::size()
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"

#include "components/mirroring/mojom/session_observer.mojom-params-data.h"
namespace mirroring {
namespace mojom {

std::ostream& operator<<(std::ostream& os, SessionError value) {
  switch(value) {
    case SessionError::ANSWER_TIME_OUT:
      return os << "SessionError::ANSWER_TIME_OUT";
    case SessionError::ANSWER_NOT_OK:
      return os << "SessionError::ANSWER_NOT_OK";
    case SessionError::ANSWER_MISMATCHED_CAST_MODE:
      return os << "SessionError::ANSWER_MISMATCHED_CAST_MODE";
    case SessionError::ANSWER_MISMATCHED_SSRC_LENGTH:
      return os << "SessionError::ANSWER_MISMATCHED_SSRC_LENGTH";
    case SessionError::ANSWER_SELECT_MULTIPLE_AUDIO:
      return os << "SessionError::ANSWER_SELECT_MULTIPLE_AUDIO";
    case SessionError::ANSWER_SELECT_MULTIPLE_VIDEO:
      return os << "SessionError::ANSWER_SELECT_MULTIPLE_VIDEO";
    case SessionError::ANSWER_SELECT_INVALID_INDEX:
      return os << "SessionError::ANSWER_SELECT_INVALID_INDEX";
    case SessionError::ANSWER_NO_AUDIO_OR_VIDEO:
      return os << "SessionError::ANSWER_NO_AUDIO_OR_VIDEO";
    case SessionError::AUDIO_CAPTURE_ERROR:
      return os << "SessionError::AUDIO_CAPTURE_ERROR";
    case SessionError::VIDEO_CAPTURE_ERROR:
      return os << "SessionError::VIDEO_CAPTURE_ERROR";
    case SessionError::RTP_STREAM_ERROR:
      return os << "SessionError::RTP_STREAM_ERROR";
    case SessionError::ENCODING_ERROR:
      return os << "SessionError::ENCODING_ERROR";
    case SessionError::CAST_TRANSPORT_ERROR:
      return os << "SessionError::CAST_TRANSPORT_ERROR";
    default:
      return os << "Unknown SessionError value: " << static_cast<int32_t>(value);
  }
}

namespace internal {


// static
bool SessionObserver_OnError_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;

  if (!ValidateStructHeaderAndClaimMemory(data, validation_context))
    return false;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const SessionObserver_OnError_Params_Data* object = static_cast<const SessionObserver_OnError_Params_Data*>(data);

  static constexpr struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[base::size(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = base::size(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        ReportValidationError(
            validation_context,
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
        return false;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[base::size(kVersionSizes) - 1].num_bytes) {
    ReportValidationError(
        validation_context,
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
    return false;
  }


  if (!::mirroring::mojom::internal::SessionError_Data
        ::Validate(object->error, validation_context))
    return false;

  return true;
}

SessionObserver_OnError_Params_Data::SessionObserver_OnError_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SessionObserver_DidStart_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;

  if (!ValidateStructHeaderAndClaimMemory(data, validation_context))
    return false;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const SessionObserver_DidStart_Params_Data* object = static_cast<const SessionObserver_DidStart_Params_Data*>(data);

  static constexpr struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[base::size(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = base::size(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        ReportValidationError(
            validation_context,
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
        return false;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[base::size(kVersionSizes) - 1].num_bytes) {
    ReportValidationError(
        validation_context,
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
    return false;
  }

  return true;
}

SessionObserver_DidStart_Params_Data::SessionObserver_DidStart_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SessionObserver_DidStop_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;

  if (!ValidateStructHeaderAndClaimMemory(data, validation_context))
    return false;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const SessionObserver_DidStop_Params_Data* object = static_cast<const SessionObserver_DidStop_Params_Data*>(data);

  static constexpr struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[base::size(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = base::size(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        ReportValidationError(
            validation_context,
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
        return false;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[base::size(kVersionSizes) - 1].num_bytes) {
    ReportValidationError(
        validation_context,
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
    return false;
  }

  return true;
}

SessionObserver_DidStop_Params_Data::SessionObserver_DidStop_Params_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace mirroring
// components/mirroring/mojom/session_observer.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_MIRRORING_MOJOM_SESSION_OBSERVER_MOJOM_SHARED_H_
#define COMPONENTS_MIRRORING_MOJOM_SESSION_OBSERVER_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "components/mirroring/mojom/session_observer.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace mirroring {
namespace mojom {


}  // namespace mojom
}  // namespace mirroring

namespace mojo {
namespace internal {

}  // namespace internal
}  // namespace mojo


namespace mirroring {
namespace mojom {


enum class SessionError : int32_t {
  
  ANSWER_TIME_OUT = 0,
  
  ANSWER_NOT_OK = 1,
  
  ANSWER_MISMATCHED_CAST_MODE = 2,
  
  ANSWER_MISMATCHED_SSRC_LENGTH = 3,
  
  ANSWER_SELECT_MULTIPLE_AUDIO = 4,
  
  ANSWER_SELECT_MULTIPLE_VIDEO = 5,
  
  ANSWER_SELECT_INVALID_INDEX = 6,
  
  ANSWER_NO_AUDIO_OR_VIDEO = 7,
  
  AUDIO_CAPTURE_ERROR = 8,
  
  VIDEO_CAPTURE_ERROR = 9,
  
  RTP_STREAM_ERROR = 10,
  
  ENCODING_ERROR = 11,
  
  CAST_TRANSPORT_ERROR = 12,
  kMinValue = 0,
  kMaxValue = 12,
};

 std::ostream& operator<<(std::ostream& os, SessionError value);
inline bool IsKnownEnumValue(SessionError value) {
  return internal::SessionError_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class SessionObserverInterfaceBase {};

using SessionObserverPtrDataView =
    mojo::InterfacePtrDataView<SessionObserverInterfaceBase>;
using SessionObserverRequestDataView =
    mojo::InterfaceRequestDataView<SessionObserverInterfaceBase>;
using SessionObserverAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<SessionObserverInterfaceBase>;
using SessionObserverAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<SessionObserverInterfaceBase>;


}  // namespace mojom
}  // namespace mirroring

namespace std {

template <>
struct hash<::mirroring::mojom::SessionError>
    : public mojo::internal::EnumHashImpl<::mirroring::mojom::SessionError> {};

}  // namespace std

namespace mojo {


template <>
struct EnumTraits<::mirroring::mojom::SessionError, ::mirroring::mojom::SessionError> {
  static ::mirroring::mojom::SessionError ToMojom(::mirroring::mojom::SessionError input) { return input; }
  static bool FromMojom(::mirroring::mojom::SessionError input, ::mirroring::mojom::SessionError* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::mirroring::mojom::SessionError, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::mirroring::mojom::SessionError, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::mirroring::mojom::SessionError>(input), output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace mirroring {
namespace mojom {


}  // namespace mojom
}  // namespace mirroring

#endif  // COMPONENTS_MIRRORING_MOJOM_SESSION_OBSERVER_MOJOM_SHARED_H_
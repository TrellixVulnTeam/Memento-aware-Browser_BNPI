// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cloud_policy.proto

#include "cloud_policy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_policy_5fcommon_5fdefinitions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BooleanPolicyProto_policy_5fcommon_5fdefinitions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_policy_5fcommon_5fdefinitions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IntegerPolicyProto_policy_5fcommon_5fdefinitions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_policy_5fcommon_5fdefinitions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StringListPolicyProto_policy_5fcommon_5fdefinitions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_policy_5fcommon_5fdefinitions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StringPolicyProto_policy_5fcommon_5fdefinitions_2eproto;
namespace enterprise_management {
class CloudPolicySettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloudPolicySettings> _instance;
} _CloudPolicySettings_default_instance_;
}  // namespace enterprise_management
static void InitDefaultsscc_info_CloudPolicySettings_cloud_5fpolicy_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_management::_CloudPolicySettings_default_instance_;
    new (ptr) ::enterprise_management::CloudPolicySettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_management::CloudPolicySettings::InitAsDefaultInstance();
}

POLICY_PROTO_EXPORT ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CloudPolicySettings_cloud_5fpolicy_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_CloudPolicySettings_cloud_5fpolicy_2eproto}, {
      &scc_info_StringPolicyProto_policy_5fcommon_5fdefinitions_2eproto.base,
      &scc_info_BooleanPolicyProto_policy_5fcommon_5fdefinitions_2eproto.base,
      &scc_info_IntegerPolicyProto_policy_5fcommon_5fdefinitions_2eproto.base,
      &scc_info_StringListPolicyProto_policy_5fcommon_5fdefinitions_2eproto.base,}};

namespace enterprise_management {

// ===================================================================

void CloudPolicySettings::InitAsDefaultInstance() {
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->homepagelocation_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->homepageisnewtabpage_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->newtabpagelocation_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultbrowsersettingenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->alternateerrorpagesenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->searchsuggestenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->networkpredictionoptions_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->wpadquickcheckenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->disabledschemes_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->globallyscopehttpauthcacheenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->dnsinterceptionchecksenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->javascriptenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->incognitoenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->incognitomodeavailability_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->savingbrowserhistorydisabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->allowdeletingbrowserhistory_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->allowdinosaureasteregg_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->forcelegacydefaultreferrerpolicy_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->remoteaccesshostclientdomain_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->remoteaccesshostclientdomainlist_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->remoteaccesshostfirewalltraversal_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->remoteaccesshostdomain_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->remoteaccesshostdomainlist_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->remoteaccesshostrequirecurtain_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->remoteaccesshostallowclientpairing_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->remoteaccesshostallowgnubbyauth_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->remoteaccesshostallowrelayedconnection_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->remoteaccesshostudpportrange_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->remoteaccesshostmatchusername_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->remoteaccesshosttokenurl_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->remoteaccesshosttokenvalidationurl_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->remoteaccesshosttokenvalidationcertificateissuer_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->remoteaccesshostallowfiletransfer_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->printingenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->cloudprintproxyenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->printingallowedbackgroundgraphicsmodes_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->printingbackgroundgraphicsdefault_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->printingpapersizedefault_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->appcacheforceenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->forcesafesearch_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->forcegooglesafesearch_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->forceyoutubesafetymode_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->forceyoutuberestrict_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->safebrowsingenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->safebrowsingprotectionlevel_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->metricsreportingenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->passwordmanagerenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->passwordleakdetectionenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->autofillenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->autofilladdressenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->autofillcreditcardenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->disabledplugins_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->enabledplugins_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->disabledpluginsexceptions_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->alwaysopenpdfexternally_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->syncdisabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->synctypeslistdisabled_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->signinallowed_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->diskcachedir_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->diskcachesize_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->downloadrestrictions_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->downloaddirectory_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->autoopenfiletypes_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->autoopenallowedforurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->autolaunchprotocolsfromorigins_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->proxymode_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->proxyservermode_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->proxyserver_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->proxypacurl_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->proxybypasslist_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->proxysettings_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->authschemes_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->disableauthnegotiatecnamelookup_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->enableauthnegotiateport_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->authserverwhitelist_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->authnegotiatedelegatewhitelist_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->authnegotiatedelegatebykdcpolicy_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->gssapilibraryname_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->allowcrossoriginauthprompt_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->ntlmv2enabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->extensioninstallblacklist_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->extensioninstallwhitelist_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->extensioninstallforcelist_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->extensioninstallsources_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->extensionallowedtypes_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->extensionsettings_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->extensioninstalllistsmergeenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->blockexternalextensions_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->showhomebutton_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->developertoolsdisabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->developertoolsavailability_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->restoreonstartup_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->restoreonstartupurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->blockthirdpartycookies_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultsearchproviderenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultsearchprovidercontextmenuaccessallowed_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultsearchprovidername_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultsearchproviderkeyword_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultsearchprovidersearchurl_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultsearchprovidersuggesturl_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultsearchprovidericonurl_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultsearchproviderencodings_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultsearchprovideralternateurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultsearchproviderimageurl_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultsearchprovidernewtaburl_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultsearchprovidersearchurlpostparams_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultsearchprovidersuggesturlpostparams_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultsearchproviderimageurlpostparams_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultcookiessetting_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultimagessetting_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultjavascriptsetting_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultpluginssetting_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultpopupssetting_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultnotificationssetting_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultgeolocationsetting_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultmediastreamsetting_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultwebbluetoothguardsetting_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultwebusbguardsetting_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->webusballowdevicesforurls_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->webusbaskforurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->webusbblockedforurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->autoselectcertificateforurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->cookiesallowedforurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->cookiesblockedforurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->cookiessessiononlyforurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->imagesallowedforurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->imagesblockedforurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->javascriptallowedforurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->javascriptblockedforurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->legacysamesitecookiebehaviorenabled_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->legacysamesitecookiebehaviorenabledfordomainlist_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->pluginsallowedforurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->pluginsblockedforurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->popupsallowedforurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->registeredprotocolhandlers_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->popupsblockedforurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->notificationsallowedforurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->notificationsblockedforurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->nativemessagingblacklist_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->nativemessagingwhitelist_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->nativemessaginguserlevelhosts_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->disable3dapis_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->policyrefreshrate_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->maxinvalidationfetchdelay_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->translateenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->allowoutdatedplugins_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->runallflashinallowmode_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->bookmarkbarenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->editbookmarksenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->showappsshortcutinbookmarkbar_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->allowfileselectiondialogs_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->securitykeypermitattestation_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->importbookmarks_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->importhistory_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->importhomepage_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->importsearchengine_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->importsavedpasswords_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->importautofillformdata_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->maxconnectionsperproxy_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->urlblacklist_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->urlwhitelist_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->policyatomicgroupsenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->policylistmultiplesourcemergelist_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->policydictionarymultiplesourcemergelist_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->enableexperimentalpolicies_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->cloudprintsubmitenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->disableprintpreview_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->printheaderfooter_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultprinterselection_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->enableonlinerevocationchecks_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->requireonlinerevocationchecksforlocalanchors_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->forceephemeralprofiles_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->backgroundmodeenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->restrictsignintopattern_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->disablesafebrowsingproceedanyway_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->spellcheckserviceenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->audiocaptureallowed_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->audiocaptureallowedurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->videocaptureallowed_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->videocaptureallowedurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->disablescreenshots_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->builtindnsclientenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->dnsoverhttpsmode_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->dnsoverhttpstemplates_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->fullscreenallowed_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->sharedclipboardenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->hidewebstoreicon_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->variationsrestrictparameter_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->chromevariations_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->contentpackdefaultfilteringbehavior_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->contentpackmanualbehaviorhosts_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->contentpackmanualbehaviorurls_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->managedbookmarks_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->enabledeprecatedwebplatformfeatures_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->browserguestmodeenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->browserguestmodeenforced_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->browseraddpersonenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->browsersignin_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->sslversionmin_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->certificatetransparencyenforcementdisabledforurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->certificatetransparencyenforcementdisabledforcas_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->certificatetransparencyenforcementdisabledforlegacycas_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->sslerroroverrideallowed_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->quicallowed_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->hardwareaccelerationmodeenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->suppressunsupportedoswarning_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->taskmanagerendprocessenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->alloweddomainsforapps_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->enablemediarouter_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->showcasticonintoolbar_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->mediaroutercastallowallips_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->ntpcustombackgroundenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->webrtcudpportrange_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->webrtclocalipsallowedurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->componentupdatesenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->browsernetworktimequeriesenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->printpreviewusesystemdefaultprinter_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->cloudpolicyoverridesplatformpolicy_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->promptfordownloadlocation_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->isolateorigins_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->siteperprocess_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->unsafelytreatinsecureoriginassecure_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultdownloaddirectory_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->abusiveexperienceinterventionenforce_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->spellchecklanguage_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->spellchecklanguageblacklist_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->spellcheckenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->adssettingforintrusiveadssites_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->passwordprotectionwarningtrigger_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->relaunchnotification_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->relaunchnotificationperiod_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->safebrowsingwhitelistdomains_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->passwordprotectionloginurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->passwordprotectionchangepasswordurl_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->safebrowsingextendedreportingenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->cloudmanagementenrollmenttoken_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->cloudmanagementenrollmentmandatory_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->autoplayallowed_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->autoplaywhitelist_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->promotionaltabsenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->safesitesfilterbehavior_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->overridesecurityrestrictionsoninsecureorigin_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->urlkeyedanonymizeddatacollectionenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->webrtceventlogcollectionallowed_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->coalesceh2connectionswithclientcertificatesforhosts_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->webappinstallforcelist_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->reportversiondata_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->reportpolicydata_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->reportmachineiddata_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->reportuseriddata_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->reportextensionsandpluginsdata_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->cloudextensionrequestenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->cloudreportingenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->enterprisehardwareplatformapienabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->alternativebrowserpath_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->alternativebrowserparameters_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->browserswitcherurllist_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->browserswitcherurlgreylist_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->browserswitcherexternalsitelisturl_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->browserswitcherexternalgreylisturl_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->browserswitcherdelay_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->browserswitcherenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->browserswitcherkeeplastchrometab_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->allowpopupsduringpageunload_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->signedhttpexchangeenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->userfeedbackallowed_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->commandlineflagsecuritywarningsenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->sendfilesformalwarecheck_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->unsafeeventsreportingenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->blocklargefiletransfer_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->delaydeliveryuntilverdict_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->allowpasswordprotectedfiles_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->blockunsupportedfiletypes_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->checkcontentcompliance_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->urlstocheckcomplianceofdownloadedcontent_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->urlstonotcheckcomplianceofuploadedcontent_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->onfiledownloadedenterpriseconnector_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->onfileattachedenterpriseconnector_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->onbulkdataentryenterpriseconnector_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->onsecurityevententerpriseconnector_ = const_cast< ::enterprise_management::StringPolicyProto*>(
      ::enterprise_management::StringPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->urlstocheckformalwareofuploadedcontent_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->urlstonotcheckformalwareofdownloadedcontent_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->hstspolicybypasslist_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->allowsyncxhrinpagedismissal_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->tls13hardeningforlocalanchorsenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->audiosandboxenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->corsmitigationlist_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->corslegacymodeenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->externalprotocoldialogshowalwaysopencheckbox_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->defaultinsecurecontentsetting_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->insecurecontentallowedforurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->insecurecontentblockedforurls_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->clicktocallenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->userdatasnapshotretentionlimit_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->printertypedenylist_ = const_cast< ::enterprise_management::StringListPolicyProto*>(
      ::enterprise_management::StringListPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->ambientauthenticationinprivatemodesenabled_ = const_cast< ::enterprise_management::IntegerPolicyProto*>(
      ::enterprise_management::IntegerPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->paymentmethodqueryenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->strictermixedcontenttreatmentenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->localdiscoveryenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->screencaptureallowed_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->allownativenotifications_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->advancedprotectionallowed_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->scrolltotextfragmentenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->accessibilityimagelabelsenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
  ::enterprise_management::_CloudPolicySettings_default_instance_._instance.get_mutable()->intensivewakeupthrottlingenabled_ = const_cast< ::enterprise_management::BooleanPolicyProto*>(
      ::enterprise_management::BooleanPolicyProto::internal_default_instance());
}
class CloudPolicySettings::_Internal {
 public:
  using HasBits = decltype(std::declval<CloudPolicySettings>()._has_bits_);
  static const ::enterprise_management::StringPolicyProto& homepagelocation(const CloudPolicySettings* msg);
  static void set_has_homepagelocation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::enterprise_management::BooleanPolicyProto& homepageisnewtabpage(const CloudPolicySettings* msg);
  static void set_has_homepageisnewtabpage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::enterprise_management::StringPolicyProto& newtabpagelocation(const CloudPolicySettings* msg);
  static void set_has_newtabpagelocation(HasBits* has_bits) {
    (*has_bits)[5] |= 16u;
  }
  static const ::enterprise_management::BooleanPolicyProto& defaultbrowsersettingenabled(const CloudPolicySettings* msg);
  static void set_has_defaultbrowsersettingenabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::enterprise_management::BooleanPolicyProto& alternateerrorpagesenabled(const CloudPolicySettings* msg);
  static void set_has_alternateerrorpagesenabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::enterprise_management::BooleanPolicyProto& searchsuggestenabled(const CloudPolicySettings* msg);
  static void set_has_searchsuggestenabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::enterprise_management::IntegerPolicyProto& networkpredictionoptions(const CloudPolicySettings* msg);
  static void set_has_networkpredictionoptions(HasBits* has_bits) {
    (*has_bits)[4] |= 256u;
  }
  static const ::enterprise_management::BooleanPolicyProto& wpadquickcheckenabled(const CloudPolicySettings* msg);
  static void set_has_wpadquickcheckenabled(HasBits* has_bits) {
    (*has_bits)[4] |= 4u;
  }
  static const ::enterprise_management::StringListPolicyProto& disabledschemes(const CloudPolicySettings* msg);
  static void set_has_disabledschemes(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static const ::enterprise_management::BooleanPolicyProto& globallyscopehttpauthcacheenabled(const CloudPolicySettings* msg);
  static void set_has_globallyscopehttpauthcacheenabled(HasBits* has_bits) {
    (*has_bits)[8] |= 131072u;
  }
  static const ::enterprise_management::BooleanPolicyProto& dnsinterceptionchecksenabled(const CloudPolicySettings* msg);
  static void set_has_dnsinterceptionchecksenabled(HasBits* has_bits) {
    (*has_bits)[8] |= 67108864u;
  }
  static const ::enterprise_management::BooleanPolicyProto& javascriptenabled(const CloudPolicySettings* msg);
  static void set_has_javascriptenabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::enterprise_management::BooleanPolicyProto& incognitoenabled(const CloudPolicySettings* msg);
  static void set_has_incognitoenabled(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::enterprise_management::IntegerPolicyProto& incognitomodeavailability(const CloudPolicySettings* msg);
  static void set_has_incognitomodeavailability(HasBits* has_bits) {
    (*has_bits)[2] |= 1024u;
  }
  static const ::enterprise_management::BooleanPolicyProto& savingbrowserhistorydisabled(const CloudPolicySettings* msg);
  static void set_has_savingbrowserhistorydisabled(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::enterprise_management::BooleanPolicyProto& allowdeletingbrowserhistory(const CloudPolicySettings* msg);
  static void set_has_allowdeletingbrowserhistory(HasBits* has_bits) {
    (*has_bits)[3] |= 1024u;
  }
  static const ::enterprise_management::BooleanPolicyProto& allowdinosaureasteregg(const CloudPolicySettings* msg);
  static void set_has_allowdinosaureasteregg(HasBits* has_bits) {
    (*has_bits)[4] |= 16777216u;
  }
  static const ::enterprise_management::BooleanPolicyProto& forcelegacydefaultreferrerpolicy(const CloudPolicySettings* msg);
  static void set_has_forcelegacydefaultreferrerpolicy(HasBits* has_bits) {
    (*has_bits)[8] |= 1048576u;
  }
  static const ::enterprise_management::StringPolicyProto& remoteaccesshostclientdomain(const CloudPolicySettings* msg);
  static void set_has_remoteaccesshostclientdomain(HasBits* has_bits) {
    (*has_bits)[4] |= 33554432u;
  }
  static const ::enterprise_management::StringListPolicyProto& remoteaccesshostclientdomainlist(const CloudPolicySettings* msg);
  static void set_has_remoteaccesshostclientdomainlist(HasBits* has_bits) {
    (*has_bits)[5] |= 128u;
  }
  static const ::enterprise_management::BooleanPolicyProto& remoteaccesshostfirewalltraversal(const CloudPolicySettings* msg);
  static void set_has_remoteaccesshostfirewalltraversal(HasBits* has_bits) {
    (*has_bits)[2] |= 2048u;
  }
  static const ::enterprise_management::StringPolicyProto& remoteaccesshostdomain(const CloudPolicySettings* msg);
  static void set_has_remoteaccesshostdomain(HasBits* has_bits) {
    (*has_bits)[3] |= 4u;
  }
  static const ::enterprise_management::StringListPolicyProto& remoteaccesshostdomainlist(const CloudPolicySettings* msg);
  static void set_has_remoteaccesshostdomainlist(HasBits* has_bits) {
    (*has_bits)[5] |= 64u;
  }
  static const ::enterprise_management::BooleanPolicyProto& remoteaccesshostrequirecurtain(const CloudPolicySettings* msg);
  static void set_has_remoteaccesshostrequirecurtain(HasBits* has_bits) {
    (*has_bits)[3] |= 8u;
  }
  static const ::enterprise_management::BooleanPolicyProto& remoteaccesshostallowclientpairing(const CloudPolicySettings* msg);
  static void set_has_remoteaccesshostallowclientpairing(HasBits* has_bits) {
    (*has_bits)[3] |= 33554432u;
  }
  static const ::enterprise_management::BooleanPolicyProto& remoteaccesshostallowgnubbyauth(const CloudPolicySettings* msg);
  static void set_has_remoteaccesshostallowgnubbyauth(HasBits* has_bits) {
    (*has_bits)[4] |= 2u;
  }
  static const ::enterprise_management::BooleanPolicyProto& remoteaccesshostallowrelayedconnection(const CloudPolicySettings* msg);
  static void set_has_remoteaccesshostallowrelayedconnection(HasBits* has_bits) {
    (*has_bits)[4] |= 8u;
  }
  static const ::enterprise_management::StringPolicyProto& remoteaccesshostudpportrange(const CloudPolicySettings* msg);
  static void set_has_remoteaccesshostudpportrange(HasBits* has_bits) {
    (*has_bits)[4] |= 16u;
  }
  static const ::enterprise_management::BooleanPolicyProto& remoteaccesshostmatchusername(const CloudPolicySettings* msg);
  static void set_has_remoteaccesshostmatchusername(HasBits* has_bits) {
    (*has_bits)[4] |= 65536u;
  }
  static const ::enterprise_management::StringPolicyProto& remoteaccesshosttokenurl(const CloudPolicySettings* msg);
  static void set_has_remoteaccesshosttokenurl(HasBits* has_bits) {
    (*has_bits)[4] |= 131072u;
  }
  static const ::enterprise_management::StringPolicyProto& remoteaccesshosttokenvalidationurl(const CloudPolicySettings* msg);
  static void set_has_remoteaccesshosttokenvalidationurl(HasBits* has_bits) {
    (*has_bits)[4] |= 262144u;
  }
  static const ::enterprise_management::StringPolicyProto& remoteaccesshosttokenvalidationcertificateissuer(const CloudPolicySettings* msg);
  static void set_has_remoteaccesshosttokenvalidationcertificateissuer(HasBits* has_bits) {
    (*has_bits)[4] |= 524288u;
  }
  static const ::enterprise_management::BooleanPolicyProto& remoteaccesshostallowfiletransfer(const CloudPolicySettings* msg);
  static void set_has_remoteaccesshostallowfiletransfer(HasBits* has_bits) {
    (*has_bits)[7] |= 256u;
  }
  static const ::enterprise_management::BooleanPolicyProto& printingenabled(const CloudPolicySettings* msg);
  static void set_has_printingenabled(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::enterprise_management::BooleanPolicyProto& cloudprintproxyenabled(const CloudPolicySettings* msg);
  static void set_has_cloudprintproxyenabled(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::enterprise_management::StringPolicyProto& printingallowedbackgroundgraphicsmodes(const CloudPolicySettings* msg);
  static void set_has_printingallowedbackgroundgraphicsmodes(HasBits* has_bits) {
    (*has_bits)[8] |= 4u;
  }
  static const ::enterprise_management::StringPolicyProto& printingbackgroundgraphicsdefault(const CloudPolicySettings* msg);
  static void set_has_printingbackgroundgraphicsdefault(HasBits* has_bits) {
    (*has_bits)[8] |= 8u;
  }
  static const ::enterprise_management::StringPolicyProto& printingpapersizedefault(const CloudPolicySettings* msg);
  static void set_has_printingpapersizedefault(HasBits* has_bits) {
    (*has_bits)[6] |= 2097152u;
  }
  static const ::enterprise_management::BooleanPolicyProto& appcacheforceenabled(const CloudPolicySettings* msg);
  static void set_has_appcacheforceenabled(HasBits* has_bits) {
    (*has_bits)[9] |= 2048u;
  }
  static const ::enterprise_management::BooleanPolicyProto& forcesafesearch(const CloudPolicySettings* msg);
  static void set_has_forcesafesearch(HasBits* has_bits) {
    (*has_bits)[3] |= 64u;
  }
  static const ::enterprise_management::BooleanPolicyProto& forcegooglesafesearch(const CloudPolicySettings* msg);
  static void set_has_forcegooglesafesearch(HasBits* has_bits) {
    (*has_bits)[4] |= 16384u;
  }
  static const ::enterprise_management::BooleanPolicyProto& forceyoutubesafetymode(const CloudPolicySettings* msg);
  static void set_has_forceyoutubesafetymode(HasBits* has_bits) {
    (*has_bits)[4] |= 32768u;
  }
  static const ::enterprise_management::IntegerPolicyProto& forceyoutuberestrict(const CloudPolicySettings* msg);
  static void set_has_forceyoutuberestrict(HasBits* has_bits) {
    (*has_bits)[5] |= 8u;
  }
  static const ::enterprise_management::BooleanPolicyProto& safebrowsingenabled(const CloudPolicySettings* msg);
  static void set_has_safebrowsingenabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::enterprise_management::IntegerPolicyProto& safebrowsingprotectionlevel(const CloudPolicySettings* msg);
  static void set_has_safebrowsingprotectionlevel(HasBits* has_bits) {
    (*has_bits)[9] |= 4u;
  }
  static const ::enterprise_management::BooleanPolicyProto& metricsreportingenabled(const CloudPolicySettings* msg);
  static void set_has_metricsreportingenabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::enterprise_management::BooleanPolicyProto& passwordmanagerenabled(const CloudPolicySettings* msg);
  static void set_has_passwordmanagerenabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::enterprise_management::BooleanPolicyProto& passwordleakdetectionenabled(const CloudPolicySettings* msg);
  static void set_has_passwordleakdetectionenabled(HasBits* has_bits) {
    (*has_bits)[7] |= 262144u;
  }
  static const ::enterprise_management::BooleanPolicyProto& autofillenabled(const CloudPolicySettings* msg);
  static void set_has_autofillenabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::enterprise_management::BooleanPolicyProto& autofilladdressenabled(const CloudPolicySettings* msg);
  static void set_has_autofilladdressenabled(HasBits* has_bits) {
    (*has_bits)[6] |= 4096u;
  }
  static const ::enterprise_management::BooleanPolicyProto& autofillcreditcardenabled(const CloudPolicySettings* msg);
  static void set_has_autofillcreditcardenabled(HasBits* has_bits) {
    (*has_bits)[5] |= 8192u;
  }
  static const ::enterprise_management::StringListPolicyProto& disabledplugins(const CloudPolicySettings* msg);
  static void set_has_disabledplugins(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::enterprise_management::StringListPolicyProto& enabledplugins(const CloudPolicySettings* msg);
  static void set_has_enabledplugins(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static const ::enterprise_management::StringListPolicyProto& disabledpluginsexceptions(const CloudPolicySettings* msg);
  static void set_has_disabledpluginsexceptions(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static const ::enterprise_management::BooleanPolicyProto& alwaysopenpdfexternally(const CloudPolicySettings* msg);
  static void set_has_alwaysopenpdfexternally(HasBits* has_bits) {
    (*has_bits)[5] |= 4u;
  }
  static const ::enterprise_management::BooleanPolicyProto& syncdisabled(const CloudPolicySettings* msg);
  static void set_has_syncdisabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::enterprise_management::StringListPolicyProto& synctypeslistdisabled(const CloudPolicySettings* msg);
  static void set_has_synctypeslistdisabled(HasBits* has_bits) {
    (*has_bits)[8] |= 2097152u;
  }
  static const ::enterprise_management::BooleanPolicyProto& signinallowed(const CloudPolicySettings* msg);
  static void set_has_signinallowed(HasBits* has_bits) {
    (*has_bits)[3] |= 4096u;
  }
  static const ::enterprise_management::StringPolicyProto& diskcachedir(const CloudPolicySettings* msg);
  static void set_has_diskcachedir(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static const ::enterprise_management::IntegerPolicyProto& diskcachesize(const CloudPolicySettings* msg);
  static void set_has_diskcachesize(HasBits* has_bits) {
    (*has_bits)[2] |= 8388608u;
  }
  static const ::enterprise_management::IntegerPolicyProto& downloadrestrictions(const CloudPolicySettings* msg);
  static void set_has_downloadrestrictions(HasBits* has_bits) {
    (*has_bits)[5] |= 512u;
  }
  static const ::enterprise_management::StringPolicyProto& downloaddirectory(const CloudPolicySettings* msg);
  static void set_has_downloaddirectory(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static const ::enterprise_management::StringListPolicyProto& autoopenfiletypes(const CloudPolicySettings* msg);
  static void set_has_autoopenfiletypes(HasBits* has_bits) {
    (*has_bits)[9] |= 512u;
  }
  static const ::enterprise_management::StringListPolicyProto& autoopenallowedforurls(const CloudPolicySettings* msg);
  static void set_has_autoopenallowedforurls(HasBits* has_bits) {
    (*has_bits)[9] |= 4096u;
  }
  static const ::enterprise_management::StringPolicyProto& autolaunchprotocolsfromorigins(const CloudPolicySettings* msg);
  static void set_has_autolaunchprotocolsfromorigins(HasBits* has_bits) {
    (*has_bits)[9] |= 65536u;
  }
  static const ::enterprise_management::StringPolicyProto& proxymode(const CloudPolicySettings* msg);
  static void set_has_proxymode(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::enterprise_management::IntegerPolicyProto& proxyservermode(const CloudPolicySettings* msg);
  static void set_has_proxyservermode(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::enterprise_management::StringPolicyProto& proxyserver(const CloudPolicySettings* msg);
  static void set_has_proxyserver(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::enterprise_management::StringPolicyProto& proxypacurl(const CloudPolicySettings* msg);
  static void set_has_proxypacurl(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::enterprise_management::StringPolicyProto& proxybypasslist(const CloudPolicySettings* msg);
  static void set_has_proxybypasslist(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::enterprise_management::StringPolicyProto& proxysettings(const CloudPolicySettings* msg);
  static void set_has_proxysettings(HasBits* has_bits) {
    (*has_bits)[2] |= 16777216u;
  }
  static const ::enterprise_management::StringPolicyProto& authschemes(const CloudPolicySettings* msg);
  static void set_has_authschemes(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::enterprise_management::BooleanPolicyProto& disableauthnegotiatecnamelookup(const CloudPolicySettings* msg);
  static void set_has_disableauthnegotiatecnamelookup(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::enterprise_management::BooleanPolicyProto& enableauthnegotiateport(const CloudPolicySettings* msg);
  static void set_has_enableauthnegotiateport(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::enterprise_management::StringPolicyProto& authserverwhitelist(const CloudPolicySettings* msg);
  static void set_has_authserverwhitelist(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::enterprise_management::StringPolicyProto& authnegotiatedelegatewhitelist(const CloudPolicySettings* msg);
  static void set_has_authnegotiatedelegatewhitelist(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::enterprise_management::BooleanPolicyProto& authnegotiatedelegatebykdcpolicy(const CloudPolicySettings* msg);
  static void set_has_authnegotiatedelegatebykdcpolicy(HasBits* has_bits) {
    (*has_bits)[7] |= 64u;
  }
  static const ::enterprise_management::StringPolicyProto& gssapilibraryname(const CloudPolicySettings* msg);
  static void set_has_gssapilibraryname(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::enterprise_management::BooleanPolicyProto& allowcrossoriginauthprompt(const CloudPolicySettings* msg);
  static void set_has_allowcrossoriginauthprompt(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static const ::enterprise_management::BooleanPolicyProto& ntlmv2enabled(const CloudPolicySettings* msg);
  static void set_has_ntlmv2enabled(HasBits* has_bits) {
    (*has_bits)[5] |= 16384u;
  }
  static const ::enterprise_management::StringListPolicyProto& extensioninstallblacklist(const CloudPolicySettings* msg);
  static void set_has_extensioninstallblacklist(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::enterprise_management::StringListPolicyProto& extensioninstallwhitelist(const CloudPolicySettings* msg);
  static void set_has_extensioninstallwhitelist(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::enterprise_management::StringListPolicyProto& extensioninstallforcelist(const CloudPolicySettings* msg);
  static void set_has_extensioninstallforcelist(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::enterprise_management::StringListPolicyProto& extensioninstallsources(const CloudPolicySettings* msg);
  static void set_has_extensioninstallsources(HasBits* has_bits) {
    (*has_bits)[2] |= 536870912u;
  }
  static const ::enterprise_management::StringListPolicyProto& extensionallowedtypes(const CloudPolicySettings* msg);
  static void set_has_extensionallowedtypes(HasBits* has_bits) {
    (*has_bits)[3] |= 512u;
  }
  static const ::enterprise_management::StringPolicyProto& extensionsettings(const CloudPolicySettings* msg);
  static void set_has_extensionsettings(HasBits* has_bits) {
    (*has_bits)[4] |= 4096u;
  }
  static const ::enterprise_management::BooleanPolicyProto& extensioninstalllistsmergeenabled(const CloudPolicySettings* msg);
  static void set_has_extensioninstalllistsmergeenabled(HasBits* has_bits) {
    (*has_bits)[7] |= 2048u;
  }
  static const ::enterprise_management::BooleanPolicyProto& blockexternalextensions(const CloudPolicySettings* msg);
  static void set_has_blockexternalextensions(HasBits* has_bits) {
    (*has_bits)[8] |= 16384u;
  }
  static const ::enterprise_management::BooleanPolicyProto& showhomebutton(const CloudPolicySettings* msg);
  static void set_has_showhomebutton(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::enterprise_management::BooleanPolicyProto& developertoolsdisabled(const CloudPolicySettings* msg);
  static void set_has_developertoolsdisabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::enterprise_management::IntegerPolicyProto& developertoolsavailability(const CloudPolicySettings* msg);
  static void set_has_developertoolsavailability(HasBits* has_bits) {
    (*has_bits)[6] |= 256u;
  }
  static const ::enterprise_management::IntegerPolicyProto& restoreonstartup(const CloudPolicySettings* msg);
  static void set_has_restoreonstartup(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::enterprise_management::StringListPolicyProto& restoreonstartupurls(const CloudPolicySettings* msg);
  static void set_has_restoreonstartupurls(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::enterprise_management::BooleanPolicyProto& blockthirdpartycookies(const CloudPolicySettings* msg);
  static void set_has_blockthirdpartycookies(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::enterprise_management::BooleanPolicyProto& defaultsearchproviderenabled(const CloudPolicySettings* msg);
  static void set_has_defaultsearchproviderenabled(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static const ::enterprise_management::BooleanPolicyProto& defaultsearchprovidercontextmenuaccessallowed(const CloudPolicySettings* msg);
  static void set_has_defaultsearchprovidercontextmenuaccessallowed(HasBits* has_bits) {
    (*has_bits)[9] |= 32768u;
  }
  static const ::enterprise_management::StringPolicyProto& defaultsearchprovidername(const CloudPolicySettings* msg);
  static void set_has_defaultsearchprovidername(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static const ::enterprise_management::StringPolicyProto& defaultsearchproviderkeyword(const CloudPolicySettings* msg);
  static void set_has_defaultsearchproviderkeyword(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static const ::enterprise_management::StringPolicyProto& defaultsearchprovidersearchurl(const CloudPolicySettings* msg);
  static void set_has_defaultsearchprovidersearchurl(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static const ::enterprise_management::StringPolicyProto& defaultsearchprovidersuggesturl(const CloudPolicySettings* msg);
  static void set_has_defaultsearchprovidersuggesturl(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static const ::enterprise_management::StringPolicyProto& defaultsearchprovidericonurl(const CloudPolicySettings* msg);
  static void set_has_defaultsearchprovidericonurl(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static const ::enterprise_management::StringListPolicyProto& defaultsearchproviderencodings(const CloudPolicySettings* msg);
  static void set_has_defaultsearchproviderencodings(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static const ::enterprise_management::StringListPolicyProto& defaultsearchprovideralternateurls(const CloudPolicySettings* msg);
  static void set_has_defaultsearchprovideralternateurls(HasBits* has_bits) {
    (*has_bits)[3] |= 32u;
  }
  static const ::enterprise_management::StringPolicyProto& defaultsearchproviderimageurl(const CloudPolicySettings* msg);
  static void set_has_defaultsearchproviderimageurl(HasBits* has_bits) {
    (*has_bits)[3] |= 2097152u;
  }
  static const ::enterprise_management::StringPolicyProto& defaultsearchprovidernewtaburl(const CloudPolicySettings* msg);
  static void set_has_defaultsearchprovidernewtaburl(HasBits* has_bits) {
    (*has_bits)[3] |= 134217728u;
  }
  static const ::enterprise_management::StringPolicyProto& defaultsearchprovidersearchurlpostparams(const CloudPolicySettings* msg);
  static void set_has_defaultsearchprovidersearchurlpostparams(HasBits* has_bits) {
    (*has_bits)[3] |= 4194304u;
  }
  static const ::enterprise_management::StringPolicyProto& defaultsearchprovidersuggesturlpostparams(const CloudPolicySettings* msg);
  static void set_has_defaultsearchprovidersuggesturlpostparams(HasBits* has_bits) {
    (*has_bits)[3] |= 8388608u;
  }
  static const ::enterprise_management::StringPolicyProto& defaultsearchproviderimageurlpostparams(const CloudPolicySettings* msg);
  static void set_has_defaultsearchproviderimageurlpostparams(HasBits* has_bits) {
    (*has_bits)[3] |= 16777216u;
  }
  static const ::enterprise_management::IntegerPolicyProto& defaultcookiessetting(const CloudPolicySettings* msg);
  static void set_has_defaultcookiessetting(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static const ::enterprise_management::IntegerPolicyProto& defaultimagessetting(const CloudPolicySettings* msg);
  static void set_has_defaultimagessetting(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static const ::enterprise_management::IntegerPolicyProto& defaultjavascriptsetting(const CloudPolicySettings* msg);
  static void set_has_defaultjavascriptsetting(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static const ::enterprise_management::IntegerPolicyProto& defaultpluginssetting(const CloudPolicySettings* msg);
  static void set_has_defaultpluginssetting(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static const ::enterprise_management::IntegerPolicyProto& defaultpopupssetting(const CloudPolicySettings* msg);
  static void set_has_defaultpopupssetting(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static const ::enterprise_management::IntegerPolicyProto& defaultnotificationssetting(const CloudPolicySettings* msg);
  static void set_has_defaultnotificationssetting(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static const ::enterprise_management::IntegerPolicyProto& defaultgeolocationsetting(const CloudPolicySettings* msg);
  static void set_has_defaultgeolocationsetting(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static const ::enterprise_management::IntegerPolicyProto& defaultmediastreamsetting(const CloudPolicySettings* msg);
  static void set_has_defaultmediastreamsetting(HasBits* has_bits) {
    (*has_bits)[2] |= 1073741824u;
  }
  static const ::enterprise_management::IntegerPolicyProto& defaultwebbluetoothguardsetting(const CloudPolicySettings* msg);
  static void set_has_defaultwebbluetoothguardsetting(HasBits* has_bits) {
    (*has_bits)[4] |= 67108864u;
  }
  static const ::enterprise_management::IntegerPolicyProto& defaultwebusbguardsetting(const CloudPolicySettings* msg);
  static void set_has_defaultwebusbguardsetting(HasBits* has_bits) {
    (*has_bits)[6] |= 4u;
  }
  static const ::enterprise_management::StringPolicyProto& webusballowdevicesforurls(const CloudPolicySettings* msg);
  static void set_has_webusballowdevicesforurls(HasBits* has_bits) {
    (*has_bits)[6] |= 16777216u;
  }
  static const ::enterprise_management::StringListPolicyProto& webusbaskforurls(const CloudPolicySettings* msg);
  static void set_has_webusbaskforurls(HasBits* has_bits) {
    (*has_bits)[6] |= 64u;
  }
  static const ::enterprise_management::StringListPolicyProto& webusbblockedforurls(const CloudPolicySettings* msg);
  static void set_has_webusbblockedforurls(HasBits* has_bits) {
    (*has_bits)[6] |= 128u;
  }
  static const ::enterprise_management::StringListPolicyProto& autoselectcertificateforurls(const CloudPolicySettings* msg);
  static void set_has_autoselectcertificateforurls(HasBits* has_bits) {
    (*has_bits)[2] |= 131072u;
  }
  static const ::enterprise_management::StringListPolicyProto& cookiesallowedforurls(const CloudPolicySettings* msg);
  static void set_has_cookiesallowedforurls(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static const ::enterprise_management::StringListPolicyProto& cookiesblockedforurls(const CloudPolicySettings* msg);
  static void set_has_cookiesblockedforurls(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static const ::enterprise_management::StringListPolicyProto& cookiessessiononlyforurls(const CloudPolicySettings* msg);
  static void set_has_cookiessessiononlyforurls(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static const ::enterprise_management::StringListPolicyProto& imagesallowedforurls(const CloudPolicySettings* msg);
  static void set_has_imagesallowedforurls(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static const ::enterprise_management::StringListPolicyProto& imagesblockedforurls(const CloudPolicySettings* msg);
  static void set_has_imagesblockedforurls(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static const ::enterprise_management::StringListPolicyProto& javascriptallowedforurls(const CloudPolicySettings* msg);
  static void set_has_javascriptallowedforurls(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static const ::enterprise_management::StringListPolicyProto& javascriptblockedforurls(const CloudPolicySettings* msg);
  static void set_has_javascriptblockedforurls(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static const ::enterprise_management::IntegerPolicyProto& legacysamesitecookiebehaviorenabled(const CloudPolicySettings* msg);
  static void set_has_legacysamesitecookiebehaviorenabled(HasBits* has_bits) {
    (*has_bits)[8] |= 16u;
  }
  static const ::enterprise_management::StringListPolicyProto& legacysamesitecookiebehaviorenabledfordomainlist(const CloudPolicySettings* msg);
  static void set_has_legacysamesitecookiebehaviorenabledfordomainlist(HasBits* has_bits) {
    (*has_bits)[8] |= 32u;
  }
  static const ::enterprise_management::StringListPolicyProto& pluginsallowedforurls(const CloudPolicySettings* msg);
  static void set_has_pluginsallowedforurls(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static const ::enterprise_management::StringListPolicyProto& pluginsblockedforurls(const CloudPolicySettings* msg);
  static void set_has_pluginsblockedforurls(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static const ::enterprise_management::StringListPolicyProto& popupsallowedforurls(const CloudPolicySettings* msg);
  static void set_has_popupsallowedforurls(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static const ::enterprise_management::StringPolicyProto& registeredprotocolhandlers(const CloudPolicySettings* msg);
  static void set_has_registeredprotocolhandlers(HasBits* has_bits) {
    (*has_bits)[4] |= 64u;
  }
  static const ::enterprise_management::StringListPolicyProto& popupsblockedforurls(const CloudPolicySettings* msg);
  static void set_has_popupsblockedforurls(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static const ::enterprise_management::StringListPolicyProto& notificationsallowedforurls(const CloudPolicySettings* msg);
  static void set_has_notificationsallowedforurls(HasBits* has_bits) {
    (*has_bits)[2] |= 1048576u;
  }
  static const ::enterprise_management::StringListPolicyProto& notificationsblockedforurls(const CloudPolicySettings* msg);
  static void set_has_notificationsblockedforurls(HasBits* has_bits) {
    (*has_bits)[2] |= 2097152u;
  }
  static const ::enterprise_management::StringListPolicyProto& nativemessagingblacklist(const CloudPolicySettings* msg);
  static void set_has_nativemessagingblacklist(HasBits* has_bits) {
    (*has_bits)[3] |= 1073741824u;
  }
  static const ::enterprise_management::StringListPolicyProto& nativemessagingwhitelist(const CloudPolicySettings* msg);
  static void set_has_nativemessagingwhitelist(HasBits* has_bits) {
    (*has_bits)[3] |= 2147483648u;
  }
  static const ::enterprise_management::BooleanPolicyProto& nativemessaginguserlevelhosts(const CloudPolicySettings* msg);
  static void set_has_nativemessaginguserlevelhosts(HasBits* has_bits) {
    (*has_bits)[4] |= 1u;
  }
  static const ::enterprise_management::BooleanPolicyProto& disable3dapis(const CloudPolicySettings* msg);
  static void set_has_disable3dapis(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static const ::enterprise_management::IntegerPolicyProto& policyrefreshrate(const CloudPolicySettings* msg);
  static void set_has_policyrefreshrate(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static const ::enterprise_management::IntegerPolicyProto& maxinvalidationfetchdelay(const CloudPolicySettings* msg);
  static void set_has_maxinvalidationfetchdelay(HasBits* has_bits) {
    (*has_bits)[3] |= 1048576u;
  }
  static const ::enterprise_management::BooleanPolicyProto& translateenabled(const CloudPolicySettings* msg);
  static void set_has_translateenabled(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static const ::enterprise_management::BooleanPolicyProto& allowoutdatedplugins(const CloudPolicySettings* msg);
  static void set_has_allowoutdatedplugins(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static const ::enterprise_management::BooleanPolicyProto& runallflashinallowmode(const CloudPolicySettings* msg);
  static void set_has_runallflashinallowmode(HasBits* has_bits) {
    (*has_bits)[5] |= 4096u;
  }
  static const ::enterprise_management::BooleanPolicyProto& bookmarkbarenabled(const CloudPolicySettings* msg);
  static void set_has_bookmarkbarenabled(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static const ::enterprise_management::BooleanPolicyProto& editbookmarksenabled(const CloudPolicySettings* msg);
  static void set_has_editbookmarksenabled(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static const ::enterprise_management::BooleanPolicyProto& showappsshortcutinbookmarkbar(const CloudPolicySettings* msg);
  static void set_has_showappsshortcutinbookmarkbar(HasBits* has_bits) {
    (*has_bits)[4] |= 32u;
  }
  static const ::enterprise_management::BooleanPolicyProto& allowfileselectiondialogs(const CloudPolicySettings* msg);
  static void set_has_allowfileselectiondialogs(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static const ::enterprise_management::StringListPolicyProto& securitykeypermitattestation(const CloudPolicySettings* msg);
  static void set_has_securitykeypermitattestation(HasBits* has_bits) {
    (*has_bits)[5] |= 1048576u;
  }
  static const ::enterprise_management::BooleanPolicyProto& importbookmarks(const CloudPolicySettings* msg);
  static void set_has_importbookmarks(HasBits* has_bits) {
    (*has_bits)[2] |= 4096u;
  }
  static const ::enterprise_management::BooleanPolicyProto& importhistory(const CloudPolicySettings* msg);
  static void set_has_importhistory(HasBits* has_bits) {
    (*has_bits)[2] |= 8192u;
  }
  static const ::enterprise_management::BooleanPolicyProto& importhomepage(const CloudPolicySettings* msg);
  static void set_has_importhomepage(HasBits* has_bits) {
    (*has_bits)[2] |= 16384u;
  }
  static const ::enterprise_management::BooleanPolicyProto& importsearchengine(const CloudPolicySettings* msg);
  static void set_has_importsearchengine(HasBits* has_bits) {
    (*has_bits)[2] |= 32768u;
  }
  static const ::enterprise_management::BooleanPolicyProto& importsavedpasswords(const CloudPolicySettings* msg);
  static void set_has_importsavedpasswords(HasBits* has_bits) {
    (*has_bits)[2] |= 65536u;
  }
  static const ::enterprise_management::BooleanPolicyProto& importautofillformdata(const CloudPolicySettings* msg);
  static void set_has_importautofillformdata(HasBits* has_bits) {
    (*has_bits)[4] |= 2048u;
  }
  static const ::enterprise_management::IntegerPolicyProto& maxconnectionsperproxy(const CloudPolicySettings* msg);
  static void set_has_maxconnectionsperproxy(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static const ::enterprise_management::StringListPolicyProto& urlblacklist(const CloudPolicySettings* msg);
  static void set_has_urlblacklist(HasBits* has_bits) {
    (*has_bits)[2] |= 262144u;
  }
  static const ::enterprise_management::StringListPolicyProto& urlwhitelist(const CloudPolicySettings* msg);
  static void set_has_urlwhitelist(HasBits* has_bits) {
    (*has_bits)[2] |= 524288u;
  }
  static const ::enterprise_management::BooleanPolicyProto& policyatomicgroupsenabled(const CloudPolicySettings* msg);
  static void set_has_policyatomicgroupsenabled(HasBits* has_bits) {
    (*has_bits)[7] |= 2097152u;
  }
  static const ::enterprise_management::StringListPolicyProto& policylistmultiplesourcemergelist(const CloudPolicySettings* msg);
  static void set_has_policylistmultiplesourcemergelist(HasBits* has_bits) {
    (*has_bits)[7] |= 4096u;
  }
  static const ::enterprise_management::StringListPolicyProto& policydictionarymultiplesourcemergelist(const CloudPolicySettings* msg);
  static void set_has_policydictionarymultiplesourcemergelist(HasBits* has_bits) {
    (*has_bits)[7] |= 16384u;
  }
  static const ::enterprise_management::StringListPolicyProto& enableexperimentalpolicies(const CloudPolicySettings* msg);
  static void set_has_enableexperimentalpolicies(HasBits* has_bits) {
    (*has_bits)[9] |= 8192u;
  }
  static const ::enterprise_management::BooleanPolicyProto& cloudprintsubmitenabled(const CloudPolicySettings* msg);
  static void set_has_cloudprintsubmitenabled(HasBits* has_bits) {
    (*has_bits)[2] |= 4194304u;
  }
  static const ::enterprise_management::BooleanPolicyProto& disableprintpreview(const CloudPolicySettings* msg);
  static void set_has_disableprintpreview(HasBits* has_bits) {
    (*has_bits)[2] |= 33554432u;
  }
  static const ::enterprise_management::BooleanPolicyProto& printheaderfooter(const CloudPolicySettings* msg);
  static void set_has_printheaderfooter(HasBits* has_bits) {
    (*has_bits)[6] |= 4194304u;
  }
  static const ::enterprise_management::StringPolicyProto& defaultprinterselection(const CloudPolicySettings* msg);
  static void set_has_defaultprinterselection(HasBits* has_bits) {
    (*has_bits)[4] |= 8388608u;
  }
  static const ::enterprise_management::BooleanPolicyProto& enableonlinerevocationchecks(const CloudPolicySettings* msg);
  static void set_has_enableonlinerevocationchecks(HasBits* has_bits) {
    (*has_bits)[2] |= 67108864u;
  }
  static const ::enterprise_management::BooleanPolicyProto& requireonlinerevocationchecksforlocalanchors(const CloudPolicySettings* msg);
  static void set_has_requireonlinerevocationchecksforlocalanchors(HasBits* has_bits) {
    (*has_bits)[3] |= 67108864u;
  }
  static const ::enterprise_management::BooleanPolicyProto& forceephemeralprofiles(const CloudPolicySettings* msg);
  static void set_has_forceephemeralprofiles(HasBits* has_bits) {
    (*has_bits)[3] |= 536870912u;
  }
  static const ::enterprise_management::BooleanPolicyProto& backgroundmodeenabled(const CloudPolicySettings* msg);
  static void set_has_backgroundmodeenabled(HasBits* has_bits) {
    (*has_bits)[2] |= 134217728u;
  }
  static const ::enterprise_management::StringPolicyProto& restrictsignintopattern(const CloudPolicySettings* msg);
  static void set_has_restrictsignintopattern(HasBits* has_bits) {
    (*has_bits)[2] |= 268435456u;
  }
  static const ::enterprise_management::BooleanPolicyProto& disablesafebrowsingproceedanyway(const CloudPolicySettings* msg);
  static void set_has_disablesafebrowsingproceedanyway(HasBits* has_bits) {
    (*has_bits)[2] |= 2147483648u;
  }
  static const ::enterprise_management::BooleanPolicyProto& spellcheckserviceenabled(const CloudPolicySettings* msg);
  static void set_has_spellcheckserviceenabled(HasBits* has_bits) {
    (*has_bits)[3] |= 1u;
  }
  static const ::enterprise_management::BooleanPolicyProto& audiocaptureallowed(const CloudPolicySettings* msg);
  static void set_has_audiocaptureallowed(HasBits* has_bits) {
    (*has_bits)[3] |= 16u;
  }
  static const ::enterprise_management::StringListPolicyProto& audiocaptureallowedurls(const CloudPolicySettings* msg);
  static void set_has_audiocaptureallowedurls(HasBits* has_bits) {
    (*has_bits)[3] |= 131072u;
  }
  static const ::enterprise_management::BooleanPolicyProto& videocaptureallowed(const CloudPolicySettings* msg);
  static void set_has_videocaptureallowed(HasBits* has_bits) {
    (*has_bits)[3] |= 256u;
  }
  static const ::enterprise_management::StringListPolicyProto& videocaptureallowedurls(const CloudPolicySettings* msg);
  static void set_has_videocaptureallowedurls(HasBits* has_bits) {
    (*has_bits)[3] |= 262144u;
  }
  static const ::enterprise_management::BooleanPolicyProto& disablescreenshots(const CloudPolicySettings* msg);
  static void set_has_disablescreenshots(HasBits* has_bits) {
    (*has_bits)[3] |= 2u;
  }
  static const ::enterprise_management::BooleanPolicyProto& builtindnsclientenabled(const CloudPolicySettings* msg);
  static void set_has_builtindnsclientenabled(HasBits* has_bits) {
    (*has_bits)[3] |= 128u;
  }
  static const ::enterprise_management::StringPolicyProto& dnsoverhttpsmode(const CloudPolicySettings* msg);
  static void set_has_dnsoverhttpsmode(HasBits* has_bits) {
    (*has_bits)[7] |= 524288u;
  }
  static const ::enterprise_management::StringPolicyProto& dnsoverhttpstemplates(const CloudPolicySettings* msg);
  static void set_has_dnsoverhttpstemplates(HasBits* has_bits) {
    (*has_bits)[8] |= 65536u;
  }
  static const ::enterprise_management::BooleanPolicyProto& fullscreenallowed(const CloudPolicySettings* msg);
  static void set_has_fullscreenallowed(HasBits* has_bits) {
    (*has_bits)[3] |= 268435456u;
  }
  static const ::enterprise_management::BooleanPolicyProto& sharedclipboardenabled(const CloudPolicySettings* msg);
  static void set_has_sharedclipboardenabled(HasBits* has_bits) {
    (*has_bits)[8] |= 2u;
  }
  static const ::enterprise_management::BooleanPolicyProto& hidewebstoreicon(const CloudPolicySettings* msg);
  static void set_has_hidewebstoreicon(HasBits* has_bits) {
    (*has_bits)[3] |= 2048u;
  }
  static const ::enterprise_management::StringPolicyProto& variationsrestrictparameter(const CloudPolicySettings* msg);
  static void set_has_variationsrestrictparameter(HasBits* has_bits) {
    (*has_bits)[3] |= 8192u;
  }
  static const ::enterprise_management::IntegerPolicyProto& chromevariations(const CloudPolicySettings* msg);
  static void set_has_chromevariations(HasBits* has_bits) {
    (*has_bits)[8] |= 268435456u;
  }
  static const ::enterprise_management::IntegerPolicyProto& contentpackdefaultfilteringbehavior(const CloudPolicySettings* msg);
  static void set_has_contentpackdefaultfilteringbehavior(HasBits* has_bits) {
    (*has_bits)[3] |= 16384u;
  }
  static const ::enterprise_management::StringPolicyProto& contentpackmanualbehaviorhosts(const CloudPolicySettings* msg);
  static void set_has_contentpackmanualbehaviorhosts(HasBits* has_bits) {
    (*has_bits)[3] |= 32768u;
  }
  static const ::enterprise_management::StringPolicyProto& contentpackmanualbehaviorurls(const CloudPolicySettings* msg);
  static void set_has_contentpackmanualbehaviorurls(HasBits* has_bits) {
    (*has_bits)[3] |= 65536u;
  }
  static const ::enterprise_management::StringPolicyProto& managedbookmarks(const CloudPolicySettings* msg);
  static void set_has_managedbookmarks(HasBits* has_bits) {
    (*has_bits)[3] |= 524288u;
  }
  static const ::enterprise_management::StringListPolicyProto& enabledeprecatedwebplatformfeatures(const CloudPolicySettings* msg);
  static void set_has_enabledeprecatedwebplatformfeatures(HasBits* has_bits) {
    (*has_bits)[4] |= 128u;
  }
  static const ::enterprise_management::BooleanPolicyProto& browserguestmodeenabled(const CloudPolicySettings* msg);
  static void set_has_browserguestmodeenabled(HasBits* has_bits) {
    (*has_bits)[4] |= 512u;
  }
  static const ::enterprise_management::BooleanPolicyProto& browserguestmodeenforced(const CloudPolicySettings* msg);
  static void set_has_browserguestmodeenforced(HasBits* has_bits) {
    (*has_bits)[7] |= 131072u;
  }
  static const ::enterprise_management::BooleanPolicyProto& browseraddpersonenabled(const CloudPolicySettings* msg);
  static void set_has_browseraddpersonenabled(HasBits* has_bits) {
    (*has_bits)[4] |= 1024u;
  }
  static const ::enterprise_management::IntegerPolicyProto& browsersignin(const CloudPolicySettings* msg);
  static void set_has_browsersignin(HasBits* has_bits) {
    (*has_bits)[6] |= 33554432u;
  }
  static const ::enterprise_management::StringPolicyProto& sslversionmin(const CloudPolicySettings* msg);
  static void set_has_sslversionmin(HasBits* has_bits) {
    (*has_bits)[4] |= 8192u;
  }
  static const ::enterprise_management::StringListPolicyProto& certificatetransparencyenforcementdisabledforurls(const CloudPolicySettings* msg);
  static void set_has_certificatetransparencyenforcementdisabledforurls(HasBits* has_bits) {
    (*has_bits)[4] |= 2147483648u;
  }
  static const ::enterprise_management::StringListPolicyProto& certificatetransparencyenforcementdisabledforcas(const CloudPolicySettings* msg);
  static void set_has_certificatetransparencyenforcementdisabledforcas(HasBits* has_bits) {
    (*has_bits)[6] |= 8u;
  }
  static const ::enterprise_management::StringListPolicyProto& certificatetransparencyenforcementdisabledforlegacycas(const CloudPolicySettings* msg);
  static void set_has_certificatetransparencyenforcementdisabledforlegacycas(HasBits* has_bits) {
    (*has_bits)[6] |= 16u;
  }
  static const ::enterprise_management::BooleanPolicyProto& sslerroroverrideallowed(const CloudPolicySettings* msg);
  static void set_has_sslerroroverrideallowed(HasBits* has_bits) {
    (*has_bits)[4] |= 1048576u;
  }
  static const ::enterprise_management::BooleanPolicyProto& quicallowed(const CloudPolicySettings* msg);
  static void set_has_quicallowed(HasBits* has_bits) {
    (*has_bits)[4] |= 2097152u;
  }
  static const ::enterprise_management::BooleanPolicyProto& hardwareaccelerationmodeenabled(const CloudPolicySettings* msg);
  static void set_has_hardwareaccelerationmodeenabled(HasBits* has_bits) {
    (*has_bits)[4] |= 4194304u;
  }
  static const ::enterprise_management::BooleanPolicyProto& suppressunsupportedoswarning(const CloudPolicySettings* msg);
  static void set_has_suppressunsupportedoswarning(HasBits* has_bits) {
    (*has_bits)[4] |= 134217728u;
  }
  static const ::enterprise_management::BooleanPolicyProto& taskmanagerendprocessenabled(const CloudPolicySettings* msg);
  static void set_has_taskmanagerendprocessenabled(HasBits* has_bits) {
    (*has_bits)[4] |= 268435456u;
  }
  static const ::enterprise_management::StringPolicyProto& alloweddomainsforapps(const CloudPolicySettings* msg);
  static void set_has_alloweddomainsforapps(HasBits* has_bits) {
    (*has_bits)[4] |= 536870912u;
  }
  static const ::enterprise_management::BooleanPolicyProto& enablemediarouter(const CloudPolicySettings* msg);
  static void set_has_enablemediarouter(HasBits* has_bits) {
    (*has_bits)[4] |= 1073741824u;
  }
  static const ::enterprise_management::BooleanPolicyProto& showcasticonintoolbar(const CloudPolicySettings* msg);
  static void set_has_showcasticonintoolbar(HasBits* has_bits) {
    (*has_bits)[5] |= 32u;
  }
  static const ::enterprise_management::BooleanPolicyProto& mediaroutercastallowallips(const CloudPolicySettings* msg);
  static void set_has_mediaroutercastallowallips(HasBits* has_bits) {
    (*has_bits)[6] |= 32u;
  }
  static const ::enterprise_management::BooleanPolicyProto& ntpcustombackgroundenabled(const CloudPolicySettings* msg);
  static void set_has_ntpcustombackgroundenabled(HasBits* has_bits) {
    (*has_bits)[8] |= 33554432u;
  }
  static const ::enterprise_management::StringPolicyProto& webrtcudpportrange(const CloudPolicySettings* msg);
  static void set_has_webrtcudpportrange(HasBits* has_bits) {
    (*has_bits)[5] |= 1u;
  }
  static const ::enterprise_management::StringListPolicyProto& webrtclocalipsallowedurls(const CloudPolicySettings* msg);
  static void set_has_webrtclocalipsallowedurls(HasBits* has_bits) {
    (*has_bits)[8] |= 32768u;
  }
  static const ::enterprise_management::BooleanPolicyProto& componentupdatesenabled(const CloudPolicySettings* msg);
  static void set_has_componentupdatesenabled(HasBits* has_bits) {
    (*has_bits)[5] |= 2u;
  }
  static const ::enterprise_management::BooleanPolicyProto& browsernetworktimequeriesenabled(const CloudPolicySettings* msg);
  static void set_has_browsernetworktimequeriesenabled(HasBits* has_bits) {
    (*has_bits)[5] |= 256u;
  }
  static const ::enterprise_management::BooleanPolicyProto& printpreviewusesystemdefaultprinter(const CloudPolicySettings* msg);
  static void set_has_printpreviewusesystemdefaultprinter(HasBits* has_bits) {
    (*has_bits)[5] |= 1024u;
  }
  static const ::enterprise_management::BooleanPolicyProto& cloudpolicyoverridesplatformpolicy(const CloudPolicySettings* msg);
  static void set_has_cloudpolicyoverridesplatformpolicy(HasBits* has_bits) {
    (*has_bits)[5] |= 2048u;
  }
  static const ::enterprise_management::BooleanPolicyProto& promptfordownloadlocation(const CloudPolicySettings* msg);
  static void set_has_promptfordownloadlocation(HasBits* has_bits) {
    (*has_bits)[5] |= 32768u;
  }
  static const ::enterprise_management::StringPolicyProto& isolateorigins(const CloudPolicySettings* msg);
  static void set_has_isolateorigins(HasBits* has_bits) {
    (*has_bits)[5] |= 65536u;
  }
  static const ::enterprise_management::BooleanPolicyProto& siteperprocess(const CloudPolicySettings* msg);
  static void set_has_siteperprocess(HasBits* has_bits) {
    (*has_bits)[5] |= 131072u;
  }
  static const ::enterprise_management::StringListPolicyProto& unsafelytreatinsecureoriginassecure(const CloudPolicySettings* msg);
  static void set_has_unsafelytreatinsecureoriginassecure(HasBits* has_bits) {
    (*has_bits)[5] |= 262144u;
  }
  static const ::enterprise_management::StringPolicyProto& defaultdownloaddirectory(const CloudPolicySettings* msg);
  static void set_has_defaultdownloaddirectory(HasBits* has_bits) {
    (*has_bits)[5] |= 524288u;
  }
  static const ::enterprise_management::BooleanPolicyProto& abusiveexperienceinterventionenforce(const CloudPolicySettings* msg);
  static void set_has_abusiveexperienceinterventionenforce(HasBits* has_bits) {
    (*has_bits)[5] |= 2097152u;
  }
  static const ::enterprise_management::StringListPolicyProto& spellchecklanguage(const CloudPolicySettings* msg);
  static void set_has_spellchecklanguage(HasBits* has_bits) {
    (*has_bits)[5] |= 4194304u;
  }
  static const ::enterprise_management::StringListPolicyProto& spellchecklanguageblacklist(const CloudPolicySettings* msg);
  static void set_has_spellchecklanguageblacklist(HasBits* has_bits) {
    (*has_bits)[7] |= 512u;
  }
  static const ::enterprise_management::BooleanPolicyProto& spellcheckenabled(const CloudPolicySettings* msg);
  static void set_has_spellcheckenabled(HasBits* has_bits) {
    (*has_bits)[5] |= 8388608u;
  }
  static const ::enterprise_management::IntegerPolicyProto& adssettingforintrusiveadssites(const CloudPolicySettings* msg);
  static void set_has_adssettingforintrusiveadssites(HasBits* has_bits) {
    (*has_bits)[5] |= 16777216u;
  }
  static const ::enterprise_management::IntegerPolicyProto& passwordprotectionwarningtrigger(const CloudPolicySettings* msg);
  static void set_has_passwordprotectionwarningtrigger(HasBits* has_bits) {
    (*has_bits)[5] |= 33554432u;
  }
  static const ::enterprise_management::IntegerPolicyProto& relaunchnotification(const CloudPolicySettings* msg);
  static void set_has_relaunchnotification(HasBits* has_bits) {
    (*has_bits)[5] |= 67108864u;
  }
  static const ::enterprise_management::IntegerPolicyProto& relaunchnotificationperiod(const CloudPolicySettings* msg);
  static void set_has_relaunchnotificationperiod(HasBits* has_bits) {
    (*has_bits)[5] |= 134217728u;
  }
  static const ::enterprise_management::StringListPolicyProto& safebrowsingwhitelistdomains(const CloudPolicySettings* msg);
  static void set_has_safebrowsingwhitelistdomains(HasBits* has_bits) {
    (*has_bits)[5] |= 268435456u;
  }
  static const ::enterprise_management::StringListPolicyProto& passwordprotectionloginurls(const CloudPolicySettings* msg);
  static void set_has_passwordprotectionloginurls(HasBits* has_bits) {
    (*has_bits)[5] |= 536870912u;
  }
  static const ::enterprise_management::StringPolicyProto& passwordprotectionchangepasswordurl(const CloudPolicySettings* msg);
  static void set_has_passwordprotectionchangepasswordurl(HasBits* has_bits) {
    (*has_bits)[5] |= 1073741824u;
  }
  static const ::enterprise_management::BooleanPolicyProto& safebrowsingextendedreportingenabled(const CloudPolicySettings* msg);
  static void set_has_safebrowsingextendedreportingenabled(HasBits* has_bits) {
    (*has_bits)[5] |= 2147483648u;
  }
  static const ::enterprise_management::StringPolicyProto& cloudmanagementenrollmenttoken(const CloudPolicySettings* msg);
  static void set_has_cloudmanagementenrollmenttoken(HasBits* has_bits) {
    (*has_bits)[7] |= 2u;
  }
  static const ::enterprise_management::BooleanPolicyProto& cloudmanagementenrollmentmandatory(const CloudPolicySettings* msg);
  static void set_has_cloudmanagementenrollmentmandatory(HasBits* has_bits) {
    (*has_bits)[7] |= 1u;
  }
  static const ::enterprise_management::BooleanPolicyProto& autoplayallowed(const CloudPolicySettings* msg);
  static void set_has_autoplayallowed(HasBits* has_bits) {
    (*has_bits)[6] |= 1u;
  }
  static const ::enterprise_management::StringListPolicyProto& autoplaywhitelist(const CloudPolicySettings* msg);
  static void set_has_autoplaywhitelist(HasBits* has_bits) {
    (*has_bits)[6] |= 2u;
  }
  static const ::enterprise_management::BooleanPolicyProto& promotionaltabsenabled(const CloudPolicySettings* msg);
  static void set_has_promotionaltabsenabled(HasBits* has_bits) {
    (*has_bits)[6] |= 512u;
  }
  static const ::enterprise_management::IntegerPolicyProto& safesitesfilterbehavior(const CloudPolicySettings* msg);
  static void set_has_safesitesfilterbehavior(HasBits* has_bits) {
    (*has_bits)[6] |= 1024u;
  }
  static const ::enterprise_management::StringListPolicyProto& overridesecurityrestrictionsoninsecureorigin(const CloudPolicySettings* msg);
  static void set_has_overridesecurityrestrictionsoninsecureorigin(HasBits* has_bits) {
    (*has_bits)[6] |= 2048u;
  }
  static const ::enterprise_management::BooleanPolicyProto& urlkeyedanonymizeddatacollectionenabled(const CloudPolicySettings* msg);
  static void set_has_urlkeyedanonymizeddatacollectionenabled(HasBits* has_bits) {
    (*has_bits)[6] |= 8192u;
  }
  static const ::enterprise_management::BooleanPolicyProto& webrtceventlogcollectionallowed(const CloudPolicySettings* msg);
  static void set_has_webrtceventlogcollectionallowed(HasBits* has_bits) {
    (*has_bits)[6] |= 16384u;
  }
  static const ::enterprise_management::StringListPolicyProto& coalesceh2connectionswithclientcertificatesforhosts(const CloudPolicySettings* msg);
  static void set_has_coalesceh2connectionswithclientcertificatesforhosts(HasBits* has_bits) {
    (*has_bits)[6] |= 32768u;
  }
  static const ::enterprise_management::StringPolicyProto& webappinstallforcelist(const CloudPolicySettings* msg);
  static void set_has_webappinstallforcelist(HasBits* has_bits) {
    (*has_bits)[6] |= 65536u;
  }
  static const ::enterprise_management::BooleanPolicyProto& reportversiondata(const CloudPolicySettings* msg);
  static void set_has_reportversiondata(HasBits* has_bits) {
    (*has_bits)[6] |= 131072u;
  }
  static const ::enterprise_management::BooleanPolicyProto& reportpolicydata(const CloudPolicySettings* msg);
  static void set_has_reportpolicydata(HasBits* has_bits) {
    (*has_bits)[6] |= 262144u;
  }
  static const ::enterprise_management::BooleanPolicyProto& reportmachineiddata(const CloudPolicySettings* msg);
  static void set_has_reportmachineiddata(HasBits* has_bits) {
    (*has_bits)[6] |= 524288u;
  }
  static const ::enterprise_management::BooleanPolicyProto& reportuseriddata(const CloudPolicySettings* msg);
  static void set_has_reportuseriddata(HasBits* has_bits) {
    (*has_bits)[6] |= 1048576u;
  }
  static const ::enterprise_management::BooleanPolicyProto& reportextensionsandpluginsdata(const CloudPolicySettings* msg);
  static void set_has_reportextensionsandpluginsdata(HasBits* has_bits) {
    (*has_bits)[6] |= 2147483648u;
  }
  static const ::enterprise_management::BooleanPolicyProto& cloudextensionrequestenabled(const CloudPolicySettings* msg);
  static void set_has_cloudextensionrequestenabled(HasBits* has_bits) {
    (*has_bits)[8] |= 1u;
  }
  static const ::enterprise_management::BooleanPolicyProto& cloudreportingenabled(const CloudPolicySettings* msg);
  static void set_has_cloudreportingenabled(HasBits* has_bits) {
    (*has_bits)[6] |= 67108864u;
  }
  static const ::enterprise_management::BooleanPolicyProto& enterprisehardwareplatformapienabled(const CloudPolicySettings* msg);
  static void set_has_enterprisehardwareplatformapienabled(HasBits* has_bits) {
    (*has_bits)[6] |= 8388608u;
  }
  static const ::enterprise_management::StringPolicyProto& alternativebrowserpath(const CloudPolicySettings* msg);
  static void set_has_alternativebrowserpath(HasBits* has_bits) {
    (*has_bits)[6] |= 134217728u;
  }
  static const ::enterprise_management::StringListPolicyProto& alternativebrowserparameters(const CloudPolicySettings* msg);
  static void set_has_alternativebrowserparameters(HasBits* has_bits) {
    (*has_bits)[6] |= 268435456u;
  }
  static const ::enterprise_management::StringListPolicyProto& browserswitcherurllist(const CloudPolicySettings* msg);
  static void set_has_browserswitcherurllist(HasBits* has_bits) {
    (*has_bits)[6] |= 536870912u;
  }
  static const ::enterprise_management::StringListPolicyProto& browserswitcherurlgreylist(const CloudPolicySettings* msg);
  static void set_has_browserswitcherurlgreylist(HasBits* has_bits) {
    (*has_bits)[6] |= 1073741824u;
  }
  static const ::enterprise_management::StringPolicyProto& browserswitcherexternalsitelisturl(const CloudPolicySettings* msg);
  static void set_has_browserswitcherexternalsitelisturl(HasBits* has_bits) {
    (*has_bits)[7] |= 4u;
  }
  static const ::enterprise_management::StringPolicyProto& browserswitcherexternalgreylisturl(const CloudPolicySettings* msg);
  static void set_has_browserswitcherexternalgreylisturl(HasBits* has_bits) {
    (*has_bits)[7] |= 8192u;
  }
  static const ::enterprise_management::IntegerPolicyProto& browserswitcherdelay(const CloudPolicySettings* msg);
  static void set_has_browserswitcherdelay(HasBits* has_bits) {
    (*has_bits)[7] |= 32u;
  }
  static const ::enterprise_management::BooleanPolicyProto& browserswitcherenabled(const CloudPolicySettings* msg);
  static void set_has_browserswitcherenabled(HasBits* has_bits) {
    (*has_bits)[7] |= 8u;
  }
  static const ::enterprise_management::BooleanPolicyProto& browserswitcherkeeplastchrometab(const CloudPolicySettings* msg);
  static void set_has_browserswitcherkeeplastchrometab(HasBits* has_bits) {
    (*has_bits)[7] |= 16u;
  }
  static const ::enterprise_management::BooleanPolicyProto& allowpopupsduringpageunload(const CloudPolicySettings* msg);
  static void set_has_allowpopupsduringpageunload(HasBits* has_bits) {
    (*has_bits)[7] |= 128u;
  }
  static const ::enterprise_management::BooleanPolicyProto& signedhttpexchangeenabled(const CloudPolicySettings* msg);
  static void set_has_signedhttpexchangeenabled(HasBits* has_bits) {
    (*has_bits)[7] |= 1024u;
  }
  static const ::enterprise_management::BooleanPolicyProto& userfeedbackallowed(const CloudPolicySettings* msg);
  static void set_has_userfeedbackallowed(HasBits* has_bits) {
    (*has_bits)[7] |= 65536u;
  }
  static const ::enterprise_management::BooleanPolicyProto& commandlineflagsecuritywarningsenabled(const CloudPolicySettings* msg);
  static void set_has_commandlineflagsecuritywarningsenabled(HasBits* has_bits) {
    (*has_bits)[7] |= 32768u;
  }
  static const ::enterprise_management::IntegerPolicyProto& sendfilesformalwarecheck(const CloudPolicySettings* msg);
  static void set_has_sendfilesformalwarecheck(HasBits* has_bits) {
    (*has_bits)[7] |= 1048576u;
  }
  static const ::enterprise_management::BooleanPolicyProto& unsafeeventsreportingenabled(const CloudPolicySettings* msg);
  static void set_has_unsafeeventsreportingenabled(HasBits* has_bits) {
    (*has_bits)[7] |= 4194304u;
  }
  static const ::enterprise_management::IntegerPolicyProto& blocklargefiletransfer(const CloudPolicySettings* msg);
  static void set_has_blocklargefiletransfer(HasBits* has_bits) {
    (*has_bits)[7] |= 8388608u;
  }
  static const ::enterprise_management::IntegerPolicyProto& delaydeliveryuntilverdict(const CloudPolicySettings* msg);
  static void set_has_delaydeliveryuntilverdict(HasBits* has_bits) {
    (*has_bits)[7] |= 16777216u;
  }
  static const ::enterprise_management::IntegerPolicyProto& allowpasswordprotectedfiles(const CloudPolicySettings* msg);
  static void set_has_allowpasswordprotectedfiles(HasBits* has_bits) {
    (*has_bits)[7] |= 33554432u;
  }
  static const ::enterprise_management::IntegerPolicyProto& blockunsupportedfiletypes(const CloudPolicySettings* msg);
  static void set_has_blockunsupportedfiletypes(HasBits* has_bits) {
    (*has_bits)[8] |= 1073741824u;
  }
  static const ::enterprise_management::IntegerPolicyProto& checkcontentcompliance(const CloudPolicySettings* msg);
  static void set_has_checkcontentcompliance(HasBits* has_bits) {
    (*has_bits)[7] |= 67108864u;
  }
  static const ::enterprise_management::StringListPolicyProto& urlstocheckcomplianceofdownloadedcontent(const CloudPolicySettings* msg);
  static void set_has_urlstocheckcomplianceofdownloadedcontent(HasBits* has_bits) {
    (*has_bits)[7] |= 134217728u;
  }
  static const ::enterprise_management::StringListPolicyProto& urlstonotcheckcomplianceofuploadedcontent(const CloudPolicySettings* msg);
  static void set_has_urlstonotcheckcomplianceofuploadedcontent(HasBits* has_bits) {
    (*has_bits)[7] |= 268435456u;
  }
  static const ::enterprise_management::StringPolicyProto& onfiledownloadedenterpriseconnector(const CloudPolicySettings* msg);
  static void set_has_onfiledownloadedenterpriseconnector(HasBits* has_bits) {
    (*has_bits)[9] |= 64u;
  }
  static const ::enterprise_management::StringPolicyProto& onfileattachedenterpriseconnector(const CloudPolicySettings* msg);
  static void set_has_onfileattachedenterpriseconnector(HasBits* has_bits) {
    (*has_bits)[9] |= 32u;
  }
  static const ::enterprise_management::StringPolicyProto& onbulkdataentryenterpriseconnector(const CloudPolicySettings* msg);
  static void set_has_onbulkdataentryenterpriseconnector(HasBits* has_bits) {
    (*has_bits)[9] |= 128u;
  }
  static const ::enterprise_management::StringPolicyProto& onsecurityevententerpriseconnector(const CloudPolicySettings* msg);
  static void set_has_onsecurityevententerpriseconnector(HasBits* has_bits) {
    (*has_bits)[9] |= 256u;
  }
  static const ::enterprise_management::StringListPolicyProto& urlstocheckformalwareofuploadedcontent(const CloudPolicySettings* msg);
  static void set_has_urlstocheckformalwareofuploadedcontent(HasBits* has_bits) {
    (*has_bits)[7] |= 536870912u;
  }
  static const ::enterprise_management::StringListPolicyProto& urlstonotcheckformalwareofdownloadedcontent(const CloudPolicySettings* msg);
  static void set_has_urlstonotcheckformalwareofdownloadedcontent(HasBits* has_bits) {
    (*has_bits)[8] |= 2147483648u;
  }
  static const ::enterprise_management::StringListPolicyProto& hstspolicybypasslist(const CloudPolicySettings* msg);
  static void set_has_hstspolicybypasslist(HasBits* has_bits) {
    (*has_bits)[7] |= 1073741824u;
  }
  static const ::enterprise_management::BooleanPolicyProto& allowsyncxhrinpagedismissal(const CloudPolicySettings* msg);
  static void set_has_allowsyncxhrinpagedismissal(HasBits* has_bits) {
    (*has_bits)[7] |= 2147483648u;
  }
  static const ::enterprise_management::BooleanPolicyProto& tls13hardeningforlocalanchorsenabled(const CloudPolicySettings* msg);
  static void set_has_tls13hardeningforlocalanchorsenabled(HasBits* has_bits) {
    (*has_bits)[8] |= 64u;
  }
  static const ::enterprise_management::BooleanPolicyProto& audiosandboxenabled(const CloudPolicySettings* msg);
  static void set_has_audiosandboxenabled(HasBits* has_bits) {
    (*has_bits)[8] |= 128u;
  }
  static const ::enterprise_management::StringListPolicyProto& corsmitigationlist(const CloudPolicySettings* msg);
  static void set_has_corsmitigationlist(HasBits* has_bits) {
    (*has_bits)[8] |= 256u;
  }
  static const ::enterprise_management::BooleanPolicyProto& corslegacymodeenabled(const CloudPolicySettings* msg);
  static void set_has_corslegacymodeenabled(HasBits* has_bits) {
    (*has_bits)[8] |= 512u;
  }
  static const ::enterprise_management::BooleanPolicyProto& externalprotocoldialogshowalwaysopencheckbox(const CloudPolicySettings* msg);
  static void set_has_externalprotocoldialogshowalwaysopencheckbox(HasBits* has_bits) {
    (*has_bits)[8] |= 1024u;
  }
  static const ::enterprise_management::IntegerPolicyProto& defaultinsecurecontentsetting(const CloudPolicySettings* msg);
  static void set_has_defaultinsecurecontentsetting(HasBits* has_bits) {
    (*has_bits)[8] |= 2048u;
  }
  static const ::enterprise_management::StringListPolicyProto& insecurecontentallowedforurls(const CloudPolicySettings* msg);
  static void set_has_insecurecontentallowedforurls(HasBits* has_bits) {
    (*has_bits)[8] |= 4096u;
  }
  static const ::enterprise_management::StringListPolicyProto& insecurecontentblockedforurls(const CloudPolicySettings* msg);
  static void set_has_insecurecontentblockedforurls(HasBits* has_bits) {
    (*has_bits)[8] |= 8192u;
  }
  static const ::enterprise_management::BooleanPolicyProto& clicktocallenabled(const CloudPolicySettings* msg);
  static void set_has_clicktocallenabled(HasBits* has_bits) {
    (*has_bits)[8] |= 262144u;
  }
  static const ::enterprise_management::IntegerPolicyProto& userdatasnapshotretentionlimit(const CloudPolicySettings* msg);
  static void set_has_userdatasnapshotretentionlimit(HasBits* has_bits) {
    (*has_bits)[9] |= 1u;
  }
  static const ::enterprise_management::StringListPolicyProto& printertypedenylist(const CloudPolicySettings* msg);
  static void set_has_printertypedenylist(HasBits* has_bits) {
    (*has_bits)[8] |= 524288u;
  }
  static const ::enterprise_management::IntegerPolicyProto& ambientauthenticationinprivatemodesenabled(const CloudPolicySettings* msg);
  static void set_has_ambientauthenticationinprivatemodesenabled(HasBits* has_bits) {
    (*has_bits)[8] |= 4194304u;
  }
  static const ::enterprise_management::BooleanPolicyProto& paymentmethodqueryenabled(const CloudPolicySettings* msg);
  static void set_has_paymentmethodqueryenabled(HasBits* has_bits) {
    (*has_bits)[8] |= 8388608u;
  }
  static const ::enterprise_management::BooleanPolicyProto& strictermixedcontenttreatmentenabled(const CloudPolicySettings* msg);
  static void set_has_strictermixedcontenttreatmentenabled(HasBits* has_bits) {
    (*has_bits)[8] |= 16777216u;
  }
  static const ::enterprise_management::BooleanPolicyProto& localdiscoveryenabled(const CloudPolicySettings* msg);
  static void set_has_localdiscoveryenabled(HasBits* has_bits) {
    (*has_bits)[8] |= 134217728u;
  }
  static const ::enterprise_management::BooleanPolicyProto& screencaptureallowed(const CloudPolicySettings* msg);
  static void set_has_screencaptureallowed(HasBits* has_bits) {
    (*has_bits)[8] |= 536870912u;
  }
  static const ::enterprise_management::BooleanPolicyProto& allownativenotifications(const CloudPolicySettings* msg);
  static void set_has_allownativenotifications(HasBits* has_bits) {
    (*has_bits)[9] |= 2u;
  }
  static const ::enterprise_management::BooleanPolicyProto& advancedprotectionallowed(const CloudPolicySettings* msg);
  static void set_has_advancedprotectionallowed(HasBits* has_bits) {
    (*has_bits)[9] |= 8u;
  }
  static const ::enterprise_management::BooleanPolicyProto& scrolltotextfragmentenabled(const CloudPolicySettings* msg);
  static void set_has_scrolltotextfragmentenabled(HasBits* has_bits) {
    (*has_bits)[9] |= 16u;
  }
  static const ::enterprise_management::BooleanPolicyProto& accessibilityimagelabelsenabled(const CloudPolicySettings* msg);
  static void set_has_accessibilityimagelabelsenabled(HasBits* has_bits) {
    (*has_bits)[9] |= 1024u;
  }
  static const ::enterprise_management::BooleanPolicyProto& intensivewakeupthrottlingenabled(const CloudPolicySettings* msg);
  static void set_has_intensivewakeupthrottlingenabled(HasBits* has_bits) {
    (*has_bits)[9] |= 16384u;
  }
};

const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::homepagelocation(const CloudPolicySettings* msg) {
  return *msg->homepagelocation_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::homepageisnewtabpage(const CloudPolicySettings* msg) {
  return *msg->homepageisnewtabpage_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::newtabpagelocation(const CloudPolicySettings* msg) {
  return *msg->newtabpagelocation_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::defaultbrowsersettingenabled(const CloudPolicySettings* msg) {
  return *msg->defaultbrowsersettingenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::alternateerrorpagesenabled(const CloudPolicySettings* msg) {
  return *msg->alternateerrorpagesenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::searchsuggestenabled(const CloudPolicySettings* msg) {
  return *msg->searchsuggestenabled_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::networkpredictionoptions(const CloudPolicySettings* msg) {
  return *msg->networkpredictionoptions_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::wpadquickcheckenabled(const CloudPolicySettings* msg) {
  return *msg->wpadquickcheckenabled_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::disabledschemes(const CloudPolicySettings* msg) {
  return *msg->disabledschemes_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::globallyscopehttpauthcacheenabled(const CloudPolicySettings* msg) {
  return *msg->globallyscopehttpauthcacheenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::dnsinterceptionchecksenabled(const CloudPolicySettings* msg) {
  return *msg->dnsinterceptionchecksenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::javascriptenabled(const CloudPolicySettings* msg) {
  return *msg->javascriptenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::incognitoenabled(const CloudPolicySettings* msg) {
  return *msg->incognitoenabled_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::incognitomodeavailability(const CloudPolicySettings* msg) {
  return *msg->incognitomodeavailability_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::savingbrowserhistorydisabled(const CloudPolicySettings* msg) {
  return *msg->savingbrowserhistorydisabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::allowdeletingbrowserhistory(const CloudPolicySettings* msg) {
  return *msg->allowdeletingbrowserhistory_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::allowdinosaureasteregg(const CloudPolicySettings* msg) {
  return *msg->allowdinosaureasteregg_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::forcelegacydefaultreferrerpolicy(const CloudPolicySettings* msg) {
  return *msg->forcelegacydefaultreferrerpolicy_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::remoteaccesshostclientdomain(const CloudPolicySettings* msg) {
  return *msg->remoteaccesshostclientdomain_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::remoteaccesshostclientdomainlist(const CloudPolicySettings* msg) {
  return *msg->remoteaccesshostclientdomainlist_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::remoteaccesshostfirewalltraversal(const CloudPolicySettings* msg) {
  return *msg->remoteaccesshostfirewalltraversal_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::remoteaccesshostdomain(const CloudPolicySettings* msg) {
  return *msg->remoteaccesshostdomain_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::remoteaccesshostdomainlist(const CloudPolicySettings* msg) {
  return *msg->remoteaccesshostdomainlist_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::remoteaccesshostrequirecurtain(const CloudPolicySettings* msg) {
  return *msg->remoteaccesshostrequirecurtain_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::remoteaccesshostallowclientpairing(const CloudPolicySettings* msg) {
  return *msg->remoteaccesshostallowclientpairing_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::remoteaccesshostallowgnubbyauth(const CloudPolicySettings* msg) {
  return *msg->remoteaccesshostallowgnubbyauth_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::remoteaccesshostallowrelayedconnection(const CloudPolicySettings* msg) {
  return *msg->remoteaccesshostallowrelayedconnection_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::remoteaccesshostudpportrange(const CloudPolicySettings* msg) {
  return *msg->remoteaccesshostudpportrange_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::remoteaccesshostmatchusername(const CloudPolicySettings* msg) {
  return *msg->remoteaccesshostmatchusername_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::remoteaccesshosttokenurl(const CloudPolicySettings* msg) {
  return *msg->remoteaccesshosttokenurl_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::remoteaccesshosttokenvalidationurl(const CloudPolicySettings* msg) {
  return *msg->remoteaccesshosttokenvalidationurl_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::remoteaccesshosttokenvalidationcertificateissuer(const CloudPolicySettings* msg) {
  return *msg->remoteaccesshosttokenvalidationcertificateissuer_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::remoteaccesshostallowfiletransfer(const CloudPolicySettings* msg) {
  return *msg->remoteaccesshostallowfiletransfer_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::printingenabled(const CloudPolicySettings* msg) {
  return *msg->printingenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::cloudprintproxyenabled(const CloudPolicySettings* msg) {
  return *msg->cloudprintproxyenabled_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::printingallowedbackgroundgraphicsmodes(const CloudPolicySettings* msg) {
  return *msg->printingallowedbackgroundgraphicsmodes_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::printingbackgroundgraphicsdefault(const CloudPolicySettings* msg) {
  return *msg->printingbackgroundgraphicsdefault_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::printingpapersizedefault(const CloudPolicySettings* msg) {
  return *msg->printingpapersizedefault_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::appcacheforceenabled(const CloudPolicySettings* msg) {
  return *msg->appcacheforceenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::forcesafesearch(const CloudPolicySettings* msg) {
  return *msg->forcesafesearch_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::forcegooglesafesearch(const CloudPolicySettings* msg) {
  return *msg->forcegooglesafesearch_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::forceyoutubesafetymode(const CloudPolicySettings* msg) {
  return *msg->forceyoutubesafetymode_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::forceyoutuberestrict(const CloudPolicySettings* msg) {
  return *msg->forceyoutuberestrict_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::safebrowsingenabled(const CloudPolicySettings* msg) {
  return *msg->safebrowsingenabled_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::safebrowsingprotectionlevel(const CloudPolicySettings* msg) {
  return *msg->safebrowsingprotectionlevel_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::metricsreportingenabled(const CloudPolicySettings* msg) {
  return *msg->metricsreportingenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::passwordmanagerenabled(const CloudPolicySettings* msg) {
  return *msg->passwordmanagerenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::passwordleakdetectionenabled(const CloudPolicySettings* msg) {
  return *msg->passwordleakdetectionenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::autofillenabled(const CloudPolicySettings* msg) {
  return *msg->autofillenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::autofilladdressenabled(const CloudPolicySettings* msg) {
  return *msg->autofilladdressenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::autofillcreditcardenabled(const CloudPolicySettings* msg) {
  return *msg->autofillcreditcardenabled_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::disabledplugins(const CloudPolicySettings* msg) {
  return *msg->disabledplugins_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::enabledplugins(const CloudPolicySettings* msg) {
  return *msg->enabledplugins_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::disabledpluginsexceptions(const CloudPolicySettings* msg) {
  return *msg->disabledpluginsexceptions_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::alwaysopenpdfexternally(const CloudPolicySettings* msg) {
  return *msg->alwaysopenpdfexternally_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::syncdisabled(const CloudPolicySettings* msg) {
  return *msg->syncdisabled_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::synctypeslistdisabled(const CloudPolicySettings* msg) {
  return *msg->synctypeslistdisabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::signinallowed(const CloudPolicySettings* msg) {
  return *msg->signinallowed_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::diskcachedir(const CloudPolicySettings* msg) {
  return *msg->diskcachedir_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::diskcachesize(const CloudPolicySettings* msg) {
  return *msg->diskcachesize_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::downloadrestrictions(const CloudPolicySettings* msg) {
  return *msg->downloadrestrictions_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::downloaddirectory(const CloudPolicySettings* msg) {
  return *msg->downloaddirectory_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::autoopenfiletypes(const CloudPolicySettings* msg) {
  return *msg->autoopenfiletypes_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::autoopenallowedforurls(const CloudPolicySettings* msg) {
  return *msg->autoopenallowedforurls_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::autolaunchprotocolsfromorigins(const CloudPolicySettings* msg) {
  return *msg->autolaunchprotocolsfromorigins_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::proxymode(const CloudPolicySettings* msg) {
  return *msg->proxymode_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::proxyservermode(const CloudPolicySettings* msg) {
  return *msg->proxyservermode_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::proxyserver(const CloudPolicySettings* msg) {
  return *msg->proxyserver_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::proxypacurl(const CloudPolicySettings* msg) {
  return *msg->proxypacurl_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::proxybypasslist(const CloudPolicySettings* msg) {
  return *msg->proxybypasslist_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::proxysettings(const CloudPolicySettings* msg) {
  return *msg->proxysettings_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::authschemes(const CloudPolicySettings* msg) {
  return *msg->authschemes_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::disableauthnegotiatecnamelookup(const CloudPolicySettings* msg) {
  return *msg->disableauthnegotiatecnamelookup_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::enableauthnegotiateport(const CloudPolicySettings* msg) {
  return *msg->enableauthnegotiateport_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::authserverwhitelist(const CloudPolicySettings* msg) {
  return *msg->authserverwhitelist_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::authnegotiatedelegatewhitelist(const CloudPolicySettings* msg) {
  return *msg->authnegotiatedelegatewhitelist_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::authnegotiatedelegatebykdcpolicy(const CloudPolicySettings* msg) {
  return *msg->authnegotiatedelegatebykdcpolicy_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::gssapilibraryname(const CloudPolicySettings* msg) {
  return *msg->gssapilibraryname_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::allowcrossoriginauthprompt(const CloudPolicySettings* msg) {
  return *msg->allowcrossoriginauthprompt_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::ntlmv2enabled(const CloudPolicySettings* msg) {
  return *msg->ntlmv2enabled_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::extensioninstallblacklist(const CloudPolicySettings* msg) {
  return *msg->extensioninstallblacklist_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::extensioninstallwhitelist(const CloudPolicySettings* msg) {
  return *msg->extensioninstallwhitelist_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::extensioninstallforcelist(const CloudPolicySettings* msg) {
  return *msg->extensioninstallforcelist_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::extensioninstallsources(const CloudPolicySettings* msg) {
  return *msg->extensioninstallsources_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::extensionallowedtypes(const CloudPolicySettings* msg) {
  return *msg->extensionallowedtypes_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::extensionsettings(const CloudPolicySettings* msg) {
  return *msg->extensionsettings_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::extensioninstalllistsmergeenabled(const CloudPolicySettings* msg) {
  return *msg->extensioninstalllistsmergeenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::blockexternalextensions(const CloudPolicySettings* msg) {
  return *msg->blockexternalextensions_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::showhomebutton(const CloudPolicySettings* msg) {
  return *msg->showhomebutton_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::developertoolsdisabled(const CloudPolicySettings* msg) {
  return *msg->developertoolsdisabled_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::developertoolsavailability(const CloudPolicySettings* msg) {
  return *msg->developertoolsavailability_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::restoreonstartup(const CloudPolicySettings* msg) {
  return *msg->restoreonstartup_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::restoreonstartupurls(const CloudPolicySettings* msg) {
  return *msg->restoreonstartupurls_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::blockthirdpartycookies(const CloudPolicySettings* msg) {
  return *msg->blockthirdpartycookies_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::defaultsearchproviderenabled(const CloudPolicySettings* msg) {
  return *msg->defaultsearchproviderenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::defaultsearchprovidercontextmenuaccessallowed(const CloudPolicySettings* msg) {
  return *msg->defaultsearchprovidercontextmenuaccessallowed_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::defaultsearchprovidername(const CloudPolicySettings* msg) {
  return *msg->defaultsearchprovidername_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::defaultsearchproviderkeyword(const CloudPolicySettings* msg) {
  return *msg->defaultsearchproviderkeyword_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::defaultsearchprovidersearchurl(const CloudPolicySettings* msg) {
  return *msg->defaultsearchprovidersearchurl_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::defaultsearchprovidersuggesturl(const CloudPolicySettings* msg) {
  return *msg->defaultsearchprovidersuggesturl_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::defaultsearchprovidericonurl(const CloudPolicySettings* msg) {
  return *msg->defaultsearchprovidericonurl_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::defaultsearchproviderencodings(const CloudPolicySettings* msg) {
  return *msg->defaultsearchproviderencodings_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::defaultsearchprovideralternateurls(const CloudPolicySettings* msg) {
  return *msg->defaultsearchprovideralternateurls_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::defaultsearchproviderimageurl(const CloudPolicySettings* msg) {
  return *msg->defaultsearchproviderimageurl_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::defaultsearchprovidernewtaburl(const CloudPolicySettings* msg) {
  return *msg->defaultsearchprovidernewtaburl_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::defaultsearchprovidersearchurlpostparams(const CloudPolicySettings* msg) {
  return *msg->defaultsearchprovidersearchurlpostparams_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::defaultsearchprovidersuggesturlpostparams(const CloudPolicySettings* msg) {
  return *msg->defaultsearchprovidersuggesturlpostparams_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::defaultsearchproviderimageurlpostparams(const CloudPolicySettings* msg) {
  return *msg->defaultsearchproviderimageurlpostparams_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::defaultcookiessetting(const CloudPolicySettings* msg) {
  return *msg->defaultcookiessetting_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::defaultimagessetting(const CloudPolicySettings* msg) {
  return *msg->defaultimagessetting_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::defaultjavascriptsetting(const CloudPolicySettings* msg) {
  return *msg->defaultjavascriptsetting_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::defaultpluginssetting(const CloudPolicySettings* msg) {
  return *msg->defaultpluginssetting_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::defaultpopupssetting(const CloudPolicySettings* msg) {
  return *msg->defaultpopupssetting_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::defaultnotificationssetting(const CloudPolicySettings* msg) {
  return *msg->defaultnotificationssetting_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::defaultgeolocationsetting(const CloudPolicySettings* msg) {
  return *msg->defaultgeolocationsetting_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::defaultmediastreamsetting(const CloudPolicySettings* msg) {
  return *msg->defaultmediastreamsetting_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::defaultwebbluetoothguardsetting(const CloudPolicySettings* msg) {
  return *msg->defaultwebbluetoothguardsetting_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::defaultwebusbguardsetting(const CloudPolicySettings* msg) {
  return *msg->defaultwebusbguardsetting_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::webusballowdevicesforurls(const CloudPolicySettings* msg) {
  return *msg->webusballowdevicesforurls_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::webusbaskforurls(const CloudPolicySettings* msg) {
  return *msg->webusbaskforurls_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::webusbblockedforurls(const CloudPolicySettings* msg) {
  return *msg->webusbblockedforurls_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::autoselectcertificateforurls(const CloudPolicySettings* msg) {
  return *msg->autoselectcertificateforurls_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::cookiesallowedforurls(const CloudPolicySettings* msg) {
  return *msg->cookiesallowedforurls_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::cookiesblockedforurls(const CloudPolicySettings* msg) {
  return *msg->cookiesblockedforurls_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::cookiessessiononlyforurls(const CloudPolicySettings* msg) {
  return *msg->cookiessessiononlyforurls_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::imagesallowedforurls(const CloudPolicySettings* msg) {
  return *msg->imagesallowedforurls_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::imagesblockedforurls(const CloudPolicySettings* msg) {
  return *msg->imagesblockedforurls_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::javascriptallowedforurls(const CloudPolicySettings* msg) {
  return *msg->javascriptallowedforurls_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::javascriptblockedforurls(const CloudPolicySettings* msg) {
  return *msg->javascriptblockedforurls_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::legacysamesitecookiebehaviorenabled(const CloudPolicySettings* msg) {
  return *msg->legacysamesitecookiebehaviorenabled_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::legacysamesitecookiebehaviorenabledfordomainlist(const CloudPolicySettings* msg) {
  return *msg->legacysamesitecookiebehaviorenabledfordomainlist_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::pluginsallowedforurls(const CloudPolicySettings* msg) {
  return *msg->pluginsallowedforurls_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::pluginsblockedforurls(const CloudPolicySettings* msg) {
  return *msg->pluginsblockedforurls_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::popupsallowedforurls(const CloudPolicySettings* msg) {
  return *msg->popupsallowedforurls_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::registeredprotocolhandlers(const CloudPolicySettings* msg) {
  return *msg->registeredprotocolhandlers_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::popupsblockedforurls(const CloudPolicySettings* msg) {
  return *msg->popupsblockedforurls_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::notificationsallowedforurls(const CloudPolicySettings* msg) {
  return *msg->notificationsallowedforurls_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::notificationsblockedforurls(const CloudPolicySettings* msg) {
  return *msg->notificationsblockedforurls_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::nativemessagingblacklist(const CloudPolicySettings* msg) {
  return *msg->nativemessagingblacklist_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::nativemessagingwhitelist(const CloudPolicySettings* msg) {
  return *msg->nativemessagingwhitelist_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::nativemessaginguserlevelhosts(const CloudPolicySettings* msg) {
  return *msg->nativemessaginguserlevelhosts_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::disable3dapis(const CloudPolicySettings* msg) {
  return *msg->disable3dapis_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::policyrefreshrate(const CloudPolicySettings* msg) {
  return *msg->policyrefreshrate_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::maxinvalidationfetchdelay(const CloudPolicySettings* msg) {
  return *msg->maxinvalidationfetchdelay_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::translateenabled(const CloudPolicySettings* msg) {
  return *msg->translateenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::allowoutdatedplugins(const CloudPolicySettings* msg) {
  return *msg->allowoutdatedplugins_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::runallflashinallowmode(const CloudPolicySettings* msg) {
  return *msg->runallflashinallowmode_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::bookmarkbarenabled(const CloudPolicySettings* msg) {
  return *msg->bookmarkbarenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::editbookmarksenabled(const CloudPolicySettings* msg) {
  return *msg->editbookmarksenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::showappsshortcutinbookmarkbar(const CloudPolicySettings* msg) {
  return *msg->showappsshortcutinbookmarkbar_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::allowfileselectiondialogs(const CloudPolicySettings* msg) {
  return *msg->allowfileselectiondialogs_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::securitykeypermitattestation(const CloudPolicySettings* msg) {
  return *msg->securitykeypermitattestation_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::importbookmarks(const CloudPolicySettings* msg) {
  return *msg->importbookmarks_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::importhistory(const CloudPolicySettings* msg) {
  return *msg->importhistory_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::importhomepage(const CloudPolicySettings* msg) {
  return *msg->importhomepage_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::importsearchengine(const CloudPolicySettings* msg) {
  return *msg->importsearchengine_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::importsavedpasswords(const CloudPolicySettings* msg) {
  return *msg->importsavedpasswords_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::importautofillformdata(const CloudPolicySettings* msg) {
  return *msg->importautofillformdata_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::maxconnectionsperproxy(const CloudPolicySettings* msg) {
  return *msg->maxconnectionsperproxy_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::urlblacklist(const CloudPolicySettings* msg) {
  return *msg->urlblacklist_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::urlwhitelist(const CloudPolicySettings* msg) {
  return *msg->urlwhitelist_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::policyatomicgroupsenabled(const CloudPolicySettings* msg) {
  return *msg->policyatomicgroupsenabled_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::policylistmultiplesourcemergelist(const CloudPolicySettings* msg) {
  return *msg->policylistmultiplesourcemergelist_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::policydictionarymultiplesourcemergelist(const CloudPolicySettings* msg) {
  return *msg->policydictionarymultiplesourcemergelist_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::enableexperimentalpolicies(const CloudPolicySettings* msg) {
  return *msg->enableexperimentalpolicies_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::cloudprintsubmitenabled(const CloudPolicySettings* msg) {
  return *msg->cloudprintsubmitenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::disableprintpreview(const CloudPolicySettings* msg) {
  return *msg->disableprintpreview_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::printheaderfooter(const CloudPolicySettings* msg) {
  return *msg->printheaderfooter_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::defaultprinterselection(const CloudPolicySettings* msg) {
  return *msg->defaultprinterselection_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::enableonlinerevocationchecks(const CloudPolicySettings* msg) {
  return *msg->enableonlinerevocationchecks_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::requireonlinerevocationchecksforlocalanchors(const CloudPolicySettings* msg) {
  return *msg->requireonlinerevocationchecksforlocalanchors_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::forceephemeralprofiles(const CloudPolicySettings* msg) {
  return *msg->forceephemeralprofiles_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::backgroundmodeenabled(const CloudPolicySettings* msg) {
  return *msg->backgroundmodeenabled_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::restrictsignintopattern(const CloudPolicySettings* msg) {
  return *msg->restrictsignintopattern_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::disablesafebrowsingproceedanyway(const CloudPolicySettings* msg) {
  return *msg->disablesafebrowsingproceedanyway_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::spellcheckserviceenabled(const CloudPolicySettings* msg) {
  return *msg->spellcheckserviceenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::audiocaptureallowed(const CloudPolicySettings* msg) {
  return *msg->audiocaptureallowed_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::audiocaptureallowedurls(const CloudPolicySettings* msg) {
  return *msg->audiocaptureallowedurls_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::videocaptureallowed(const CloudPolicySettings* msg) {
  return *msg->videocaptureallowed_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::videocaptureallowedurls(const CloudPolicySettings* msg) {
  return *msg->videocaptureallowedurls_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::disablescreenshots(const CloudPolicySettings* msg) {
  return *msg->disablescreenshots_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::builtindnsclientenabled(const CloudPolicySettings* msg) {
  return *msg->builtindnsclientenabled_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::dnsoverhttpsmode(const CloudPolicySettings* msg) {
  return *msg->dnsoverhttpsmode_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::dnsoverhttpstemplates(const CloudPolicySettings* msg) {
  return *msg->dnsoverhttpstemplates_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::fullscreenallowed(const CloudPolicySettings* msg) {
  return *msg->fullscreenallowed_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::sharedclipboardenabled(const CloudPolicySettings* msg) {
  return *msg->sharedclipboardenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::hidewebstoreicon(const CloudPolicySettings* msg) {
  return *msg->hidewebstoreicon_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::variationsrestrictparameter(const CloudPolicySettings* msg) {
  return *msg->variationsrestrictparameter_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::chromevariations(const CloudPolicySettings* msg) {
  return *msg->chromevariations_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::contentpackdefaultfilteringbehavior(const CloudPolicySettings* msg) {
  return *msg->contentpackdefaultfilteringbehavior_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::contentpackmanualbehaviorhosts(const CloudPolicySettings* msg) {
  return *msg->contentpackmanualbehaviorhosts_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::contentpackmanualbehaviorurls(const CloudPolicySettings* msg) {
  return *msg->contentpackmanualbehaviorurls_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::managedbookmarks(const CloudPolicySettings* msg) {
  return *msg->managedbookmarks_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::enabledeprecatedwebplatformfeatures(const CloudPolicySettings* msg) {
  return *msg->enabledeprecatedwebplatformfeatures_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::browserguestmodeenabled(const CloudPolicySettings* msg) {
  return *msg->browserguestmodeenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::browserguestmodeenforced(const CloudPolicySettings* msg) {
  return *msg->browserguestmodeenforced_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::browseraddpersonenabled(const CloudPolicySettings* msg) {
  return *msg->browseraddpersonenabled_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::browsersignin(const CloudPolicySettings* msg) {
  return *msg->browsersignin_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::sslversionmin(const CloudPolicySettings* msg) {
  return *msg->sslversionmin_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::certificatetransparencyenforcementdisabledforurls(const CloudPolicySettings* msg) {
  return *msg->certificatetransparencyenforcementdisabledforurls_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::certificatetransparencyenforcementdisabledforcas(const CloudPolicySettings* msg) {
  return *msg->certificatetransparencyenforcementdisabledforcas_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::certificatetransparencyenforcementdisabledforlegacycas(const CloudPolicySettings* msg) {
  return *msg->certificatetransparencyenforcementdisabledforlegacycas_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::sslerroroverrideallowed(const CloudPolicySettings* msg) {
  return *msg->sslerroroverrideallowed_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::quicallowed(const CloudPolicySettings* msg) {
  return *msg->quicallowed_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::hardwareaccelerationmodeenabled(const CloudPolicySettings* msg) {
  return *msg->hardwareaccelerationmodeenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::suppressunsupportedoswarning(const CloudPolicySettings* msg) {
  return *msg->suppressunsupportedoswarning_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::taskmanagerendprocessenabled(const CloudPolicySettings* msg) {
  return *msg->taskmanagerendprocessenabled_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::alloweddomainsforapps(const CloudPolicySettings* msg) {
  return *msg->alloweddomainsforapps_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::enablemediarouter(const CloudPolicySettings* msg) {
  return *msg->enablemediarouter_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::showcasticonintoolbar(const CloudPolicySettings* msg) {
  return *msg->showcasticonintoolbar_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::mediaroutercastallowallips(const CloudPolicySettings* msg) {
  return *msg->mediaroutercastallowallips_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::ntpcustombackgroundenabled(const CloudPolicySettings* msg) {
  return *msg->ntpcustombackgroundenabled_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::webrtcudpportrange(const CloudPolicySettings* msg) {
  return *msg->webrtcudpportrange_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::webrtclocalipsallowedurls(const CloudPolicySettings* msg) {
  return *msg->webrtclocalipsallowedurls_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::componentupdatesenabled(const CloudPolicySettings* msg) {
  return *msg->componentupdatesenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::browsernetworktimequeriesenabled(const CloudPolicySettings* msg) {
  return *msg->browsernetworktimequeriesenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::printpreviewusesystemdefaultprinter(const CloudPolicySettings* msg) {
  return *msg->printpreviewusesystemdefaultprinter_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::cloudpolicyoverridesplatformpolicy(const CloudPolicySettings* msg) {
  return *msg->cloudpolicyoverridesplatformpolicy_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::promptfordownloadlocation(const CloudPolicySettings* msg) {
  return *msg->promptfordownloadlocation_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::isolateorigins(const CloudPolicySettings* msg) {
  return *msg->isolateorigins_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::siteperprocess(const CloudPolicySettings* msg) {
  return *msg->siteperprocess_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::unsafelytreatinsecureoriginassecure(const CloudPolicySettings* msg) {
  return *msg->unsafelytreatinsecureoriginassecure_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::defaultdownloaddirectory(const CloudPolicySettings* msg) {
  return *msg->defaultdownloaddirectory_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::abusiveexperienceinterventionenforce(const CloudPolicySettings* msg) {
  return *msg->abusiveexperienceinterventionenforce_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::spellchecklanguage(const CloudPolicySettings* msg) {
  return *msg->spellchecklanguage_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::spellchecklanguageblacklist(const CloudPolicySettings* msg) {
  return *msg->spellchecklanguageblacklist_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::spellcheckenabled(const CloudPolicySettings* msg) {
  return *msg->spellcheckenabled_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::adssettingforintrusiveadssites(const CloudPolicySettings* msg) {
  return *msg->adssettingforintrusiveadssites_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::passwordprotectionwarningtrigger(const CloudPolicySettings* msg) {
  return *msg->passwordprotectionwarningtrigger_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::relaunchnotification(const CloudPolicySettings* msg) {
  return *msg->relaunchnotification_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::relaunchnotificationperiod(const CloudPolicySettings* msg) {
  return *msg->relaunchnotificationperiod_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::safebrowsingwhitelistdomains(const CloudPolicySettings* msg) {
  return *msg->safebrowsingwhitelistdomains_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::passwordprotectionloginurls(const CloudPolicySettings* msg) {
  return *msg->passwordprotectionloginurls_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::passwordprotectionchangepasswordurl(const CloudPolicySettings* msg) {
  return *msg->passwordprotectionchangepasswordurl_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::safebrowsingextendedreportingenabled(const CloudPolicySettings* msg) {
  return *msg->safebrowsingextendedreportingenabled_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::cloudmanagementenrollmenttoken(const CloudPolicySettings* msg) {
  return *msg->cloudmanagementenrollmenttoken_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::cloudmanagementenrollmentmandatory(const CloudPolicySettings* msg) {
  return *msg->cloudmanagementenrollmentmandatory_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::autoplayallowed(const CloudPolicySettings* msg) {
  return *msg->autoplayallowed_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::autoplaywhitelist(const CloudPolicySettings* msg) {
  return *msg->autoplaywhitelist_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::promotionaltabsenabled(const CloudPolicySettings* msg) {
  return *msg->promotionaltabsenabled_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::safesitesfilterbehavior(const CloudPolicySettings* msg) {
  return *msg->safesitesfilterbehavior_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::overridesecurityrestrictionsoninsecureorigin(const CloudPolicySettings* msg) {
  return *msg->overridesecurityrestrictionsoninsecureorigin_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::urlkeyedanonymizeddatacollectionenabled(const CloudPolicySettings* msg) {
  return *msg->urlkeyedanonymizeddatacollectionenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::webrtceventlogcollectionallowed(const CloudPolicySettings* msg) {
  return *msg->webrtceventlogcollectionallowed_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::coalesceh2connectionswithclientcertificatesforhosts(const CloudPolicySettings* msg) {
  return *msg->coalesceh2connectionswithclientcertificatesforhosts_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::webappinstallforcelist(const CloudPolicySettings* msg) {
  return *msg->webappinstallforcelist_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::reportversiondata(const CloudPolicySettings* msg) {
  return *msg->reportversiondata_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::reportpolicydata(const CloudPolicySettings* msg) {
  return *msg->reportpolicydata_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::reportmachineiddata(const CloudPolicySettings* msg) {
  return *msg->reportmachineiddata_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::reportuseriddata(const CloudPolicySettings* msg) {
  return *msg->reportuseriddata_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::reportextensionsandpluginsdata(const CloudPolicySettings* msg) {
  return *msg->reportextensionsandpluginsdata_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::cloudextensionrequestenabled(const CloudPolicySettings* msg) {
  return *msg->cloudextensionrequestenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::cloudreportingenabled(const CloudPolicySettings* msg) {
  return *msg->cloudreportingenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::enterprisehardwareplatformapienabled(const CloudPolicySettings* msg) {
  return *msg->enterprisehardwareplatformapienabled_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::alternativebrowserpath(const CloudPolicySettings* msg) {
  return *msg->alternativebrowserpath_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::alternativebrowserparameters(const CloudPolicySettings* msg) {
  return *msg->alternativebrowserparameters_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::browserswitcherurllist(const CloudPolicySettings* msg) {
  return *msg->browserswitcherurllist_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::browserswitcherurlgreylist(const CloudPolicySettings* msg) {
  return *msg->browserswitcherurlgreylist_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::browserswitcherexternalsitelisturl(const CloudPolicySettings* msg) {
  return *msg->browserswitcherexternalsitelisturl_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::browserswitcherexternalgreylisturl(const CloudPolicySettings* msg) {
  return *msg->browserswitcherexternalgreylisturl_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::browserswitcherdelay(const CloudPolicySettings* msg) {
  return *msg->browserswitcherdelay_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::browserswitcherenabled(const CloudPolicySettings* msg) {
  return *msg->browserswitcherenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::browserswitcherkeeplastchrometab(const CloudPolicySettings* msg) {
  return *msg->browserswitcherkeeplastchrometab_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::allowpopupsduringpageunload(const CloudPolicySettings* msg) {
  return *msg->allowpopupsduringpageunload_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::signedhttpexchangeenabled(const CloudPolicySettings* msg) {
  return *msg->signedhttpexchangeenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::userfeedbackallowed(const CloudPolicySettings* msg) {
  return *msg->userfeedbackallowed_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::commandlineflagsecuritywarningsenabled(const CloudPolicySettings* msg) {
  return *msg->commandlineflagsecuritywarningsenabled_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::sendfilesformalwarecheck(const CloudPolicySettings* msg) {
  return *msg->sendfilesformalwarecheck_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::unsafeeventsreportingenabled(const CloudPolicySettings* msg) {
  return *msg->unsafeeventsreportingenabled_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::blocklargefiletransfer(const CloudPolicySettings* msg) {
  return *msg->blocklargefiletransfer_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::delaydeliveryuntilverdict(const CloudPolicySettings* msg) {
  return *msg->delaydeliveryuntilverdict_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::allowpasswordprotectedfiles(const CloudPolicySettings* msg) {
  return *msg->allowpasswordprotectedfiles_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::blockunsupportedfiletypes(const CloudPolicySettings* msg) {
  return *msg->blockunsupportedfiletypes_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::checkcontentcompliance(const CloudPolicySettings* msg) {
  return *msg->checkcontentcompliance_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::urlstocheckcomplianceofdownloadedcontent(const CloudPolicySettings* msg) {
  return *msg->urlstocheckcomplianceofdownloadedcontent_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::urlstonotcheckcomplianceofuploadedcontent(const CloudPolicySettings* msg) {
  return *msg->urlstonotcheckcomplianceofuploadedcontent_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::onfiledownloadedenterpriseconnector(const CloudPolicySettings* msg) {
  return *msg->onfiledownloadedenterpriseconnector_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::onfileattachedenterpriseconnector(const CloudPolicySettings* msg) {
  return *msg->onfileattachedenterpriseconnector_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::onbulkdataentryenterpriseconnector(const CloudPolicySettings* msg) {
  return *msg->onbulkdataentryenterpriseconnector_;
}
const ::enterprise_management::StringPolicyProto&
CloudPolicySettings::_Internal::onsecurityevententerpriseconnector(const CloudPolicySettings* msg) {
  return *msg->onsecurityevententerpriseconnector_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::urlstocheckformalwareofuploadedcontent(const CloudPolicySettings* msg) {
  return *msg->urlstocheckformalwareofuploadedcontent_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::urlstonotcheckformalwareofdownloadedcontent(const CloudPolicySettings* msg) {
  return *msg->urlstonotcheckformalwareofdownloadedcontent_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::hstspolicybypasslist(const CloudPolicySettings* msg) {
  return *msg->hstspolicybypasslist_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::allowsyncxhrinpagedismissal(const CloudPolicySettings* msg) {
  return *msg->allowsyncxhrinpagedismissal_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::tls13hardeningforlocalanchorsenabled(const CloudPolicySettings* msg) {
  return *msg->tls13hardeningforlocalanchorsenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::audiosandboxenabled(const CloudPolicySettings* msg) {
  return *msg->audiosandboxenabled_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::corsmitigationlist(const CloudPolicySettings* msg) {
  return *msg->corsmitigationlist_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::corslegacymodeenabled(const CloudPolicySettings* msg) {
  return *msg->corslegacymodeenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::externalprotocoldialogshowalwaysopencheckbox(const CloudPolicySettings* msg) {
  return *msg->externalprotocoldialogshowalwaysopencheckbox_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::defaultinsecurecontentsetting(const CloudPolicySettings* msg) {
  return *msg->defaultinsecurecontentsetting_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::insecurecontentallowedforurls(const CloudPolicySettings* msg) {
  return *msg->insecurecontentallowedforurls_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::insecurecontentblockedforurls(const CloudPolicySettings* msg) {
  return *msg->insecurecontentblockedforurls_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::clicktocallenabled(const CloudPolicySettings* msg) {
  return *msg->clicktocallenabled_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::userdatasnapshotretentionlimit(const CloudPolicySettings* msg) {
  return *msg->userdatasnapshotretentionlimit_;
}
const ::enterprise_management::StringListPolicyProto&
CloudPolicySettings::_Internal::printertypedenylist(const CloudPolicySettings* msg) {
  return *msg->printertypedenylist_;
}
const ::enterprise_management::IntegerPolicyProto&
CloudPolicySettings::_Internal::ambientauthenticationinprivatemodesenabled(const CloudPolicySettings* msg) {
  return *msg->ambientauthenticationinprivatemodesenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::paymentmethodqueryenabled(const CloudPolicySettings* msg) {
  return *msg->paymentmethodqueryenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::strictermixedcontenttreatmentenabled(const CloudPolicySettings* msg) {
  return *msg->strictermixedcontenttreatmentenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::localdiscoveryenabled(const CloudPolicySettings* msg) {
  return *msg->localdiscoveryenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::screencaptureallowed(const CloudPolicySettings* msg) {
  return *msg->screencaptureallowed_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::allownativenotifications(const CloudPolicySettings* msg) {
  return *msg->allownativenotifications_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::advancedprotectionallowed(const CloudPolicySettings* msg) {
  return *msg->advancedprotectionallowed_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::scrolltotextfragmentenabled(const CloudPolicySettings* msg) {
  return *msg->scrolltotextfragmentenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::accessibilityimagelabelsenabled(const CloudPolicySettings* msg) {
  return *msg->accessibilityimagelabelsenabled_;
}
const ::enterprise_management::BooleanPolicyProto&
CloudPolicySettings::_Internal::intensivewakeupthrottlingenabled(const CloudPolicySettings* msg) {
  return *msg->intensivewakeupthrottlingenabled_;
}
void CloudPolicySettings::clear_homepagelocation() {
  if (homepagelocation_ != nullptr) homepagelocation_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CloudPolicySettings::clear_homepageisnewtabpage() {
  if (homepageisnewtabpage_ != nullptr) homepageisnewtabpage_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CloudPolicySettings::clear_newtabpagelocation() {
  if (newtabpagelocation_ != nullptr) newtabpagelocation_->Clear();
  _has_bits_[5] &= ~0x00000010u;
}
void CloudPolicySettings::clear_defaultbrowsersettingenabled() {
  if (defaultbrowsersettingenabled_ != nullptr) defaultbrowsersettingenabled_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CloudPolicySettings::clear_alternateerrorpagesenabled() {
  if (alternateerrorpagesenabled_ != nullptr) alternateerrorpagesenabled_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void CloudPolicySettings::clear_searchsuggestenabled() {
  if (searchsuggestenabled_ != nullptr) searchsuggestenabled_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void CloudPolicySettings::clear_networkpredictionoptions() {
  if (networkpredictionoptions_ != nullptr) networkpredictionoptions_->Clear();
  _has_bits_[4] &= ~0x00000100u;
}
void CloudPolicySettings::clear_wpadquickcheckenabled() {
  if (wpadquickcheckenabled_ != nullptr) wpadquickcheckenabled_->Clear();
  _has_bits_[4] &= ~0x00000004u;
}
void CloudPolicySettings::clear_disabledschemes() {
  if (disabledschemes_ != nullptr) disabledschemes_->Clear();
  _has_bits_[2] &= ~0x00000040u;
}
void CloudPolicySettings::clear_globallyscopehttpauthcacheenabled() {
  if (globallyscopehttpauthcacheenabled_ != nullptr) globallyscopehttpauthcacheenabled_->Clear();
  _has_bits_[8] &= ~0x00020000u;
}
void CloudPolicySettings::clear_dnsinterceptionchecksenabled() {
  if (dnsinterceptionchecksenabled_ != nullptr) dnsinterceptionchecksenabled_->Clear();
  _has_bits_[8] &= ~0x04000000u;
}
void CloudPolicySettings::clear_javascriptenabled() {
  if (javascriptenabled_ != nullptr) javascriptenabled_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void CloudPolicySettings::clear_incognitoenabled() {
  if (incognitoenabled_ != nullptr) incognitoenabled_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void CloudPolicySettings::clear_incognitomodeavailability() {
  if (incognitomodeavailability_ != nullptr) incognitomodeavailability_->Clear();
  _has_bits_[2] &= ~0x00000400u;
}
void CloudPolicySettings::clear_savingbrowserhistorydisabled() {
  if (savingbrowserhistorydisabled_ != nullptr) savingbrowserhistorydisabled_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void CloudPolicySettings::clear_allowdeletingbrowserhistory() {
  if (allowdeletingbrowserhistory_ != nullptr) allowdeletingbrowserhistory_->Clear();
  _has_bits_[3] &= ~0x00000400u;
}
void CloudPolicySettings::clear_allowdinosaureasteregg() {
  if (allowdinosaureasteregg_ != nullptr) allowdinosaureasteregg_->Clear();
  _has_bits_[4] &= ~0x01000000u;
}
void CloudPolicySettings::clear_forcelegacydefaultreferrerpolicy() {
  if (forcelegacydefaultreferrerpolicy_ != nullptr) forcelegacydefaultreferrerpolicy_->Clear();
  _has_bits_[8] &= ~0x00100000u;
}
void CloudPolicySettings::clear_remoteaccesshostclientdomain() {
  if (remoteaccesshostclientdomain_ != nullptr) remoteaccesshostclientdomain_->Clear();
  _has_bits_[4] &= ~0x02000000u;
}
void CloudPolicySettings::clear_remoteaccesshostclientdomainlist() {
  if (remoteaccesshostclientdomainlist_ != nullptr) remoteaccesshostclientdomainlist_->Clear();
  _has_bits_[5] &= ~0x00000080u;
}
void CloudPolicySettings::clear_remoteaccesshostfirewalltraversal() {
  if (remoteaccesshostfirewalltraversal_ != nullptr) remoteaccesshostfirewalltraversal_->Clear();
  _has_bits_[2] &= ~0x00000800u;
}
void CloudPolicySettings::clear_remoteaccesshostdomain() {
  if (remoteaccesshostdomain_ != nullptr) remoteaccesshostdomain_->Clear();
  _has_bits_[3] &= ~0x00000004u;
}
void CloudPolicySettings::clear_remoteaccesshostdomainlist() {
  if (remoteaccesshostdomainlist_ != nullptr) remoteaccesshostdomainlist_->Clear();
  _has_bits_[5] &= ~0x00000040u;
}
void CloudPolicySettings::clear_remoteaccesshostrequirecurtain() {
  if (remoteaccesshostrequirecurtain_ != nullptr) remoteaccesshostrequirecurtain_->Clear();
  _has_bits_[3] &= ~0x00000008u;
}
void CloudPolicySettings::clear_remoteaccesshostallowclientpairing() {
  if (remoteaccesshostallowclientpairing_ != nullptr) remoteaccesshostallowclientpairing_->Clear();
  _has_bits_[3] &= ~0x02000000u;
}
void CloudPolicySettings::clear_remoteaccesshostallowgnubbyauth() {
  if (remoteaccesshostallowgnubbyauth_ != nullptr) remoteaccesshostallowgnubbyauth_->Clear();
  _has_bits_[4] &= ~0x00000002u;
}
void CloudPolicySettings::clear_remoteaccesshostallowrelayedconnection() {
  if (remoteaccesshostallowrelayedconnection_ != nullptr) remoteaccesshostallowrelayedconnection_->Clear();
  _has_bits_[4] &= ~0x00000008u;
}
void CloudPolicySettings::clear_remoteaccesshostudpportrange() {
  if (remoteaccesshostudpportrange_ != nullptr) remoteaccesshostudpportrange_->Clear();
  _has_bits_[4] &= ~0x00000010u;
}
void CloudPolicySettings::clear_remoteaccesshostmatchusername() {
  if (remoteaccesshostmatchusername_ != nullptr) remoteaccesshostmatchusername_->Clear();
  _has_bits_[4] &= ~0x00010000u;
}
void CloudPolicySettings::clear_remoteaccesshosttokenurl() {
  if (remoteaccesshosttokenurl_ != nullptr) remoteaccesshosttokenurl_->Clear();
  _has_bits_[4] &= ~0x00020000u;
}
void CloudPolicySettings::clear_remoteaccesshosttokenvalidationurl() {
  if (remoteaccesshosttokenvalidationurl_ != nullptr) remoteaccesshosttokenvalidationurl_->Clear();
  _has_bits_[4] &= ~0x00040000u;
}
void CloudPolicySettings::clear_remoteaccesshosttokenvalidationcertificateissuer() {
  if (remoteaccesshosttokenvalidationcertificateissuer_ != nullptr) remoteaccesshosttokenvalidationcertificateissuer_->Clear();
  _has_bits_[4] &= ~0x00080000u;
}
void CloudPolicySettings::clear_remoteaccesshostallowfiletransfer() {
  if (remoteaccesshostallowfiletransfer_ != nullptr) remoteaccesshostallowfiletransfer_->Clear();
  _has_bits_[7] &= ~0x00000100u;
}
void CloudPolicySettings::clear_printingenabled() {
  if (printingenabled_ != nullptr) printingenabled_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void CloudPolicySettings::clear_cloudprintproxyenabled() {
  if (cloudprintproxyenabled_ != nullptr) cloudprintproxyenabled_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void CloudPolicySettings::clear_printingallowedbackgroundgraphicsmodes() {
  if (printingallowedbackgroundgraphicsmodes_ != nullptr) printingallowedbackgroundgraphicsmodes_->Clear();
  _has_bits_[8] &= ~0x00000004u;
}
void CloudPolicySettings::clear_printingbackgroundgraphicsdefault() {
  if (printingbackgroundgraphicsdefault_ != nullptr) printingbackgroundgraphicsdefault_->Clear();
  _has_bits_[8] &= ~0x00000008u;
}
void CloudPolicySettings::clear_printingpapersizedefault() {
  if (printingpapersizedefault_ != nullptr) printingpapersizedefault_->Clear();
  _has_bits_[6] &= ~0x00200000u;
}
void CloudPolicySettings::clear_appcacheforceenabled() {
  if (appcacheforceenabled_ != nullptr) appcacheforceenabled_->Clear();
  _has_bits_[9] &= ~0x00000800u;
}
void CloudPolicySettings::clear_forcesafesearch() {
  if (forcesafesearch_ != nullptr) forcesafesearch_->Clear();
  _has_bits_[3] &= ~0x00000040u;
}
void CloudPolicySettings::clear_forcegooglesafesearch() {
  if (forcegooglesafesearch_ != nullptr) forcegooglesafesearch_->Clear();
  _has_bits_[4] &= ~0x00004000u;
}
void CloudPolicySettings::clear_forceyoutubesafetymode() {
  if (forceyoutubesafetymode_ != nullptr) forceyoutubesafetymode_->Clear();
  _has_bits_[4] &= ~0x00008000u;
}
void CloudPolicySettings::clear_forceyoutuberestrict() {
  if (forceyoutuberestrict_ != nullptr) forceyoutuberestrict_->Clear();
  _has_bits_[5] &= ~0x00000008u;
}
void CloudPolicySettings::clear_safebrowsingenabled() {
  if (safebrowsingenabled_ != nullptr) safebrowsingenabled_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void CloudPolicySettings::clear_safebrowsingprotectionlevel() {
  if (safebrowsingprotectionlevel_ != nullptr) safebrowsingprotectionlevel_->Clear();
  _has_bits_[9] &= ~0x00000004u;
}
void CloudPolicySettings::clear_metricsreportingenabled() {
  if (metricsreportingenabled_ != nullptr) metricsreportingenabled_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void CloudPolicySettings::clear_passwordmanagerenabled() {
  if (passwordmanagerenabled_ != nullptr) passwordmanagerenabled_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
void CloudPolicySettings::clear_passwordleakdetectionenabled() {
  if (passwordleakdetectionenabled_ != nullptr) passwordleakdetectionenabled_->Clear();
  _has_bits_[7] &= ~0x00040000u;
}
void CloudPolicySettings::clear_autofillenabled() {
  if (autofillenabled_ != nullptr) autofillenabled_->Clear();
  _has_bits_[0] &= ~0x00002000u;
}
void CloudPolicySettings::clear_autofilladdressenabled() {
  if (autofilladdressenabled_ != nullptr) autofilladdressenabled_->Clear();
  _has_bits_[6] &= ~0x00001000u;
}
void CloudPolicySettings::clear_autofillcreditcardenabled() {
  if (autofillcreditcardenabled_ != nullptr) autofillcreditcardenabled_->Clear();
  _has_bits_[5] &= ~0x00002000u;
}
void CloudPolicySettings::clear_disabledplugins() {
  if (disabledplugins_ != nullptr) disabledplugins_->Clear();
  _has_bits_[0] &= ~0x00004000u;
}
void CloudPolicySettings::clear_enabledplugins() {
  if (enabledplugins_ != nullptr) enabledplugins_->Clear();
  _has_bits_[1] &= ~0x80000000u;
}
void CloudPolicySettings::clear_disabledpluginsexceptions() {
  if (disabledpluginsexceptions_ != nullptr) disabledpluginsexceptions_->Clear();
  _has_bits_[2] &= ~0x00000001u;
}
void CloudPolicySettings::clear_alwaysopenpdfexternally() {
  if (alwaysopenpdfexternally_ != nullptr) alwaysopenpdfexternally_->Clear();
  _has_bits_[5] &= ~0x00000004u;
}
void CloudPolicySettings::clear_syncdisabled() {
  if (syncdisabled_ != nullptr) syncdisabled_->Clear();
  _has_bits_[0] &= ~0x00008000u;
}
void CloudPolicySettings::clear_synctypeslistdisabled() {
  if (synctypeslistdisabled_ != nullptr) synctypeslistdisabled_->Clear();
  _has_bits_[8] &= ~0x00200000u;
}
void CloudPolicySettings::clear_signinallowed() {
  if (signinallowed_ != nullptr) signinallowed_->Clear();
  _has_bits_[3] &= ~0x00001000u;
}
void CloudPolicySettings::clear_diskcachedir() {
  if (diskcachedir_ != nullptr) diskcachedir_->Clear();
  _has_bits_[2] &= ~0x00000080u;
}
void CloudPolicySettings::clear_diskcachesize() {
  if (diskcachesize_ != nullptr) diskcachesize_->Clear();
  _has_bits_[2] &= ~0x00800000u;
}
void CloudPolicySettings::clear_downloadrestrictions() {
  if (downloadrestrictions_ != nullptr) downloadrestrictions_->Clear();
  _has_bits_[5] &= ~0x00000200u;
}
void CloudPolicySettings::clear_downloaddirectory() {
  if (downloaddirectory_ != nullptr) downloaddirectory_->Clear();
  _has_bits_[1] &= ~0x00080000u;
}
void CloudPolicySettings::clear_autoopenfiletypes() {
  if (autoopenfiletypes_ != nullptr) autoopenfiletypes_->Clear();
  _has_bits_[9] &= ~0x00000200u;
}
void CloudPolicySettings::clear_autoopenallowedforurls() {
  if (autoopenallowedforurls_ != nullptr) autoopenallowedforurls_->Clear();
  _has_bits_[9] &= ~0x00001000u;
}
void CloudPolicySettings::clear_autolaunchprotocolsfromorigins() {
  if (autolaunchprotocolsfromorigins_ != nullptr) autolaunchprotocolsfromorigins_->Clear();
  _has_bits_[9] &= ~0x00010000u;
}
void CloudPolicySettings::clear_proxymode() {
  if (proxymode_ != nullptr) proxymode_->Clear();
  _has_bits_[0] &= ~0x00010000u;
}
void CloudPolicySettings::clear_proxyservermode() {
  if (proxyservermode_ != nullptr) proxyservermode_->Clear();
  _has_bits_[0] &= ~0x00020000u;
}
void CloudPolicySettings::clear_proxyserver() {
  if (proxyserver_ != nullptr) proxyserver_->Clear();
  _has_bits_[0] &= ~0x00040000u;
}
void CloudPolicySettings::clear_proxypacurl() {
  if (proxypacurl_ != nullptr) proxypacurl_->Clear();
  _has_bits_[0] &= ~0x00080000u;
}
void CloudPolicySettings::clear_proxybypasslist() {
  if (proxybypasslist_ != nullptr) proxybypasslist_->Clear();
  _has_bits_[0] &= ~0x00100000u;
}
void CloudPolicySettings::clear_proxysettings() {
  if (proxysettings_ != nullptr) proxysettings_->Clear();
  _has_bits_[2] &= ~0x01000000u;
}
void CloudPolicySettings::clear_authschemes() {
  if (authschemes_ != nullptr) authschemes_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
void CloudPolicySettings::clear_disableauthnegotiatecnamelookup() {
  if (disableauthnegotiatecnamelookup_ != nullptr) disableauthnegotiatecnamelookup_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
void CloudPolicySettings::clear_enableauthnegotiateport() {
  if (enableauthnegotiateport_ != nullptr) enableauthnegotiateport_->Clear();
  _has_bits_[0] &= ~0x00800000u;
}
void CloudPolicySettings::clear_authserverwhitelist() {
  if (authserverwhitelist_ != nullptr) authserverwhitelist_->Clear();
  _has_bits_[0] &= ~0x01000000u;
}
void CloudPolicySettings::clear_authnegotiatedelegatewhitelist() {
  if (authnegotiatedelegatewhitelist_ != nullptr) authnegotiatedelegatewhitelist_->Clear();
  _has_bits_[0] &= ~0x02000000u;
}
void CloudPolicySettings::clear_authnegotiatedelegatebykdcpolicy() {
  if (authnegotiatedelegatebykdcpolicy_ != nullptr) authnegotiatedelegatebykdcpolicy_->Clear();
  _has_bits_[7] &= ~0x00000040u;
}
void CloudPolicySettings::clear_gssapilibraryname() {
  if (gssapilibraryname_ != nullptr) gssapilibraryname_->Clear();
  _has_bits_[0] &= ~0x04000000u;
}
void CloudPolicySettings::clear_allowcrossoriginauthprompt() {
  if (allowcrossoriginauthprompt_ != nullptr) allowcrossoriginauthprompt_->Clear();
  _has_bits_[2] &= ~0x00000100u;
}
void CloudPolicySettings::clear_ntlmv2enabled() {
  if (ntlmv2enabled_ != nullptr) ntlmv2enabled_->Clear();
  _has_bits_[5] &= ~0x00004000u;
}
void CloudPolicySettings::clear_extensioninstallblacklist() {
  if (extensioninstallblacklist_ != nullptr) extensioninstallblacklist_->Clear();
  _has_bits_[0] &= ~0x08000000u;
}
void CloudPolicySettings::clear_extensioninstallwhitelist() {
  if (extensioninstallwhitelist_ != nullptr) extensioninstallwhitelist_->Clear();
  _has_bits_[0] &= ~0x10000000u;
}
void CloudPolicySettings::clear_extensioninstallforcelist() {
  if (extensioninstallforcelist_ != nullptr) extensioninstallforcelist_->Clear();
  _has_bits_[0] &= ~0x20000000u;
}
void CloudPolicySettings::clear_extensioninstallsources() {
  if (extensioninstallsources_ != nullptr) extensioninstallsources_->Clear();
  _has_bits_[2] &= ~0x20000000u;
}
void CloudPolicySettings::clear_extensionallowedtypes() {
  if (extensionallowedtypes_ != nullptr) extensionallowedtypes_->Clear();
  _has_bits_[3] &= ~0x00000200u;
}
void CloudPolicySettings::clear_extensionsettings() {
  if (extensionsettings_ != nullptr) extensionsettings_->Clear();
  _has_bits_[4] &= ~0x00001000u;
}
void CloudPolicySettings::clear_extensioninstalllistsmergeenabled() {
  if (extensioninstalllistsmergeenabled_ != nullptr) extensioninstalllistsmergeenabled_->Clear();
  _has_bits_[7] &= ~0x00000800u;
}
void CloudPolicySettings::clear_blockexternalextensions() {
  if (blockexternalextensions_ != nullptr) blockexternalextensions_->Clear();
  _has_bits_[8] &= ~0x00004000u;
}
void CloudPolicySettings::clear_showhomebutton() {
  if (showhomebutton_ != nullptr) showhomebutton_->Clear();
  _has_bits_[0] &= ~0x40000000u;
}
void CloudPolicySettings::clear_developertoolsdisabled() {
  if (developertoolsdisabled_ != nullptr) developertoolsdisabled_->Clear();
  _has_bits_[0] &= ~0x80000000u;
}
void CloudPolicySettings::clear_developertoolsavailability() {
  if (developertoolsavailability_ != nullptr) developertoolsavailability_->Clear();
  _has_bits_[6] &= ~0x00000100u;
}
void CloudPolicySettings::clear_restoreonstartup() {
  if (restoreonstartup_ != nullptr) restoreonstartup_->Clear();
  _has_bits_[1] &= ~0x00000001u;
}
void CloudPolicySettings::clear_restoreonstartupurls() {
  if (restoreonstartupurls_ != nullptr) restoreonstartupurls_->Clear();
  _has_bits_[1] &= ~0x00000002u;
}
void CloudPolicySettings::clear_blockthirdpartycookies() {
  if (blockthirdpartycookies_ != nullptr) blockthirdpartycookies_->Clear();
  _has_bits_[1] &= ~0x00000004u;
}
void CloudPolicySettings::clear_defaultsearchproviderenabled() {
  if (defaultsearchproviderenabled_ != nullptr) defaultsearchproviderenabled_->Clear();
  _has_bits_[1] &= ~0x00000008u;
}
void CloudPolicySettings::clear_defaultsearchprovidercontextmenuaccessallowed() {
  if (defaultsearchprovidercontextmenuaccessallowed_ != nullptr) defaultsearchprovidercontextmenuaccessallowed_->Clear();
  _has_bits_[9] &= ~0x00008000u;
}
void CloudPolicySettings::clear_defaultsearchprovidername() {
  if (defaultsearchprovidername_ != nullptr) defaultsearchprovidername_->Clear();
  _has_bits_[1] &= ~0x00000010u;
}
void CloudPolicySettings::clear_defaultsearchproviderkeyword() {
  if (defaultsearchproviderkeyword_ != nullptr) defaultsearchproviderkeyword_->Clear();
  _has_bits_[1] &= ~0x00000020u;
}
void CloudPolicySettings::clear_defaultsearchprovidersearchurl() {
  if (defaultsearchprovidersearchurl_ != nullptr) defaultsearchprovidersearchurl_->Clear();
  _has_bits_[1] &= ~0x00000040u;
}
void CloudPolicySettings::clear_defaultsearchprovidersuggesturl() {
  if (defaultsearchprovidersuggesturl_ != nullptr) defaultsearchprovidersuggesturl_->Clear();
  _has_bits_[1] &= ~0x00000080u;
}
void CloudPolicySettings::clear_defaultsearchprovidericonurl() {
  if (defaultsearchprovidericonurl_ != nullptr) defaultsearchprovidericonurl_->Clear();
  _has_bits_[1] &= ~0x00000100u;
}
void CloudPolicySettings::clear_defaultsearchproviderencodings() {
  if (defaultsearchproviderencodings_ != nullptr) defaultsearchproviderencodings_->Clear();
  _has_bits_[1] &= ~0x00000200u;
}
void CloudPolicySettings::clear_defaultsearchprovideralternateurls() {
  if (defaultsearchprovideralternateurls_ != nullptr) defaultsearchprovideralternateurls_->Clear();
  _has_bits_[3] &= ~0x00000020u;
}
void CloudPolicySettings::clear_defaultsearchproviderimageurl() {
  if (defaultsearchproviderimageurl_ != nullptr) defaultsearchproviderimageurl_->Clear();
  _has_bits_[3] &= ~0x00200000u;
}
void CloudPolicySettings::clear_defaultsearchprovidernewtaburl() {
  if (defaultsearchprovidernewtaburl_ != nullptr) defaultsearchprovidernewtaburl_->Clear();
  _has_bits_[3] &= ~0x08000000u;
}
void CloudPolicySettings::clear_defaultsearchprovidersearchurlpostparams() {
  if (defaultsearchprovidersearchurlpostparams_ != nullptr) defaultsearchprovidersearchurlpostparams_->Clear();
  _has_bits_[3] &= ~0x00400000u;
}
void CloudPolicySettings::clear_defaultsearchprovidersuggesturlpostparams() {
  if (defaultsearchprovidersuggesturlpostparams_ != nullptr) defaultsearchprovidersuggesturlpostparams_->Clear();
  _has_bits_[3] &= ~0x00800000u;
}
void CloudPolicySettings::clear_defaultsearchproviderimageurlpostparams() {
  if (defaultsearchproviderimageurlpostparams_ != nullptr) defaultsearchproviderimageurlpostparams_->Clear();
  _has_bits_[3] &= ~0x01000000u;
}
void CloudPolicySettings::clear_defaultcookiessetting() {
  if (defaultcookiessetting_ != nullptr) defaultcookiessetting_->Clear();
  _has_bits_[1] &= ~0x00000400u;
}
void CloudPolicySettings::clear_defaultimagessetting() {
  if (defaultimagessetting_ != nullptr) defaultimagessetting_->Clear();
  _has_bits_[1] &= ~0x00000800u;
}
void CloudPolicySettings::clear_defaultjavascriptsetting() {
  if (defaultjavascriptsetting_ != nullptr) defaultjavascriptsetting_->Clear();
  _has_bits_[1] &= ~0x00001000u;
}
void CloudPolicySettings::clear_defaultpluginssetting() {
  if (defaultpluginssetting_ != nullptr) defaultpluginssetting_->Clear();
  _has_bits_[1] &= ~0x00002000u;
}
void CloudPolicySettings::clear_defaultpopupssetting() {
  if (defaultpopupssetting_ != nullptr) defaultpopupssetting_->Clear();
  _has_bits_[1] &= ~0x00004000u;
}
void CloudPolicySettings::clear_defaultnotificationssetting() {
  if (defaultnotificationssetting_ != nullptr) defaultnotificationssetting_->Clear();
  _has_bits_[1] &= ~0x00008000u;
}
void CloudPolicySettings::clear_defaultgeolocationsetting() {
  if (defaultgeolocationsetting_ != nullptr) defaultgeolocationsetting_->Clear();
  _has_bits_[1] &= ~0x00010000u;
}
void CloudPolicySettings::clear_defaultmediastreamsetting() {
  if (defaultmediastreamsetting_ != nullptr) defaultmediastreamsetting_->Clear();
  _has_bits_[2] &= ~0x40000000u;
}
void CloudPolicySettings::clear_defaultwebbluetoothguardsetting() {
  if (defaultwebbluetoothguardsetting_ != nullptr) defaultwebbluetoothguardsetting_->Clear();
  _has_bits_[4] &= ~0x04000000u;
}
void CloudPolicySettings::clear_defaultwebusbguardsetting() {
  if (defaultwebusbguardsetting_ != nullptr) defaultwebusbguardsetting_->Clear();
  _has_bits_[6] &= ~0x00000004u;
}
void CloudPolicySettings::clear_webusballowdevicesforurls() {
  if (webusballowdevicesforurls_ != nullptr) webusballowdevicesforurls_->Clear();
  _has_bits_[6] &= ~0x01000000u;
}
void CloudPolicySettings::clear_webusbaskforurls() {
  if (webusbaskforurls_ != nullptr) webusbaskforurls_->Clear();
  _has_bits_[6] &= ~0x00000040u;
}
void CloudPolicySettings::clear_webusbblockedforurls() {
  if (webusbblockedforurls_ != nullptr) webusbblockedforurls_->Clear();
  _has_bits_[6] &= ~0x00000080u;
}
void CloudPolicySettings::clear_autoselectcertificateforurls() {
  if (autoselectcertificateforurls_ != nullptr) autoselectcertificateforurls_->Clear();
  _has_bits_[2] &= ~0x00020000u;
}
void CloudPolicySettings::clear_cookiesallowedforurls() {
  if (cookiesallowedforurls_ != nullptr) cookiesallowedforurls_->Clear();
  _has_bits_[1] &= ~0x40000000u;
}
void CloudPolicySettings::clear_cookiesblockedforurls() {
  if (cookiesblockedforurls_ != nullptr) cookiesblockedforurls_->Clear();
  _has_bits_[1] &= ~0x00100000u;
}
void CloudPolicySettings::clear_cookiessessiononlyforurls() {
  if (cookiessessiononlyforurls_ != nullptr) cookiessessiononlyforurls_->Clear();
  _has_bits_[1] &= ~0x00200000u;
}
void CloudPolicySettings::clear_imagesallowedforurls() {
  if (imagesallowedforurls_ != nullptr) imagesallowedforurls_->Clear();
  _has_bits_[1] &= ~0x00400000u;
}
void CloudPolicySettings::clear_imagesblockedforurls() {
  if (imagesblockedforurls_ != nullptr) imagesblockedforurls_->Clear();
  _has_bits_[1] &= ~0x00800000u;
}
void CloudPolicySettings::clear_javascriptallowedforurls() {
  if (javascriptallowedforurls_ != nullptr) javascriptallowedforurls_->Clear();
  _has_bits_[1] &= ~0x01000000u;
}
void CloudPolicySettings::clear_javascriptblockedforurls() {
  if (javascriptblockedforurls_ != nullptr) javascriptblockedforurls_->Clear();
  _has_bits_[1] &= ~0x02000000u;
}
void CloudPolicySettings::clear_legacysamesitecookiebehaviorenabled() {
  if (legacysamesitecookiebehaviorenabled_ != nullptr) legacysamesitecookiebehaviorenabled_->Clear();
  _has_bits_[8] &= ~0x00000010u;
}
void CloudPolicySettings::clear_legacysamesitecookiebehaviorenabledfordomainlist() {
  if (legacysamesitecookiebehaviorenabledfordomainlist_ != nullptr) legacysamesitecookiebehaviorenabledfordomainlist_->Clear();
  _has_bits_[8] &= ~0x00000020u;
}
void CloudPolicySettings::clear_pluginsallowedforurls() {
  if (pluginsallowedforurls_ != nullptr) pluginsallowedforurls_->Clear();
  _has_bits_[1] &= ~0x04000000u;
}
void CloudPolicySettings::clear_pluginsblockedforurls() {
  if (pluginsblockedforurls_ != nullptr) pluginsblockedforurls_->Clear();
  _has_bits_[1] &= ~0x08000000u;
}
void CloudPolicySettings::clear_popupsallowedforurls() {
  if (popupsallowedforurls_ != nullptr) popupsallowedforurls_->Clear();
  _has_bits_[1] &= ~0x10000000u;
}
void CloudPolicySettings::clear_registeredprotocolhandlers() {
  if (registeredprotocolhandlers_ != nullptr) registeredprotocolhandlers_->Clear();
  _has_bits_[4] &= ~0x00000040u;
}
void CloudPolicySettings::clear_popupsblockedforurls() {
  if (popupsblockedforurls_ != nullptr) popupsblockedforurls_->Clear();
  _has_bits_[1] &= ~0x20000000u;
}
void CloudPolicySettings::clear_notificationsallowedforurls() {
  if (notificationsallowedforurls_ != nullptr) notificationsallowedforurls_->Clear();
  _has_bits_[2] &= ~0x00100000u;
}
void CloudPolicySettings::clear_notificationsblockedforurls() {
  if (notificationsblockedforurls_ != nullptr) notificationsblockedforurls_->Clear();
  _has_bits_[2] &= ~0x00200000u;
}
void CloudPolicySettings::clear_nativemessagingblacklist() {
  if (nativemessagingblacklist_ != nullptr) nativemessagingblacklist_->Clear();
  _has_bits_[3] &= ~0x40000000u;
}
void CloudPolicySettings::clear_nativemessagingwhitelist() {
  if (nativemessagingwhitelist_ != nullptr) nativemessagingwhitelist_->Clear();
  _has_bits_[3] &= ~0x80000000u;
}
void CloudPolicySettings::clear_nativemessaginguserlevelhosts() {
  if (nativemessaginguserlevelhosts_ != nullptr) nativemessaginguserlevelhosts_->Clear();
  _has_bits_[4] &= ~0x00000001u;
}
void CloudPolicySettings::clear_disable3dapis() {
  if (disable3dapis_ != nullptr) disable3dapis_->Clear();
  _has_bits_[1] &= ~0x00020000u;
}
void CloudPolicySettings::clear_policyrefreshrate() {
  if (policyrefreshrate_ != nullptr) policyrefreshrate_->Clear();
  _has_bits_[1] &= ~0x00040000u;
}
void CloudPolicySettings::clear_maxinvalidationfetchdelay() {
  if (maxinvalidationfetchdelay_ != nullptr) maxinvalidationfetchdelay_->Clear();
  _has_bits_[3] &= ~0x00100000u;
}
void CloudPolicySettings::clear_translateenabled() {
  if (translateenabled_ != nullptr) translateenabled_->Clear();
  _has_bits_[2] &= ~0x00000002u;
}
void CloudPolicySettings::clear_allowoutdatedplugins() {
  if (allowoutdatedplugins_ != nullptr) allowoutdatedplugins_->Clear();
  _has_bits_[2] &= ~0x00000004u;
}
void CloudPolicySettings::clear_runallflashinallowmode() {
  if (runallflashinallowmode_ != nullptr) runallflashinallowmode_->Clear();
  _has_bits_[5] &= ~0x00001000u;
}
void CloudPolicySettings::clear_bookmarkbarenabled() {
  if (bookmarkbarenabled_ != nullptr) bookmarkbarenabled_->Clear();
  _has_bits_[2] &= ~0x00000008u;
}
void CloudPolicySettings::clear_editbookmarksenabled() {
  if (editbookmarksenabled_ != nullptr) editbookmarksenabled_->Clear();
  _has_bits_[2] &= ~0x00000010u;
}
void CloudPolicySettings::clear_showappsshortcutinbookmarkbar() {
  if (showappsshortcutinbookmarkbar_ != nullptr) showappsshortcutinbookmarkbar_->Clear();
  _has_bits_[4] &= ~0x00000020u;
}
void CloudPolicySettings::clear_allowfileselectiondialogs() {
  if (allowfileselectiondialogs_ != nullptr) allowfileselectiondialogs_->Clear();
  _has_bits_[2] &= ~0x00000020u;
}
void CloudPolicySettings::clear_securitykeypermitattestation() {
  if (securitykeypermitattestation_ != nullptr) securitykeypermitattestation_->Clear();
  _has_bits_[5] &= ~0x00100000u;
}
void CloudPolicySettings::clear_importbookmarks() {
  if (importbookmarks_ != nullptr) importbookmarks_->Clear();
  _has_bits_[2] &= ~0x00001000u;
}
void CloudPolicySettings::clear_importhistory() {
  if (importhistory_ != nullptr) importhistory_->Clear();
  _has_bits_[2] &= ~0x00002000u;
}
void CloudPolicySettings::clear_importhomepage() {
  if (importhomepage_ != nullptr) importhomepage_->Clear();
  _has_bits_[2] &= ~0x00004000u;
}
void CloudPolicySettings::clear_importsearchengine() {
  if (importsearchengine_ != nullptr) importsearchengine_->Clear();
  _has_bits_[2] &= ~0x00008000u;
}
void CloudPolicySettings::clear_importsavedpasswords() {
  if (importsavedpasswords_ != nullptr) importsavedpasswords_->Clear();
  _has_bits_[2] &= ~0x00010000u;
}
void CloudPolicySettings::clear_importautofillformdata() {
  if (importautofillformdata_ != nullptr) importautofillformdata_->Clear();
  _has_bits_[4] &= ~0x00000800u;
}
void CloudPolicySettings::clear_maxconnectionsperproxy() {
  if (maxconnectionsperproxy_ != nullptr) maxconnectionsperproxy_->Clear();
  _has_bits_[2] &= ~0x00000200u;
}
void CloudPolicySettings::clear_urlblacklist() {
  if (urlblacklist_ != nullptr) urlblacklist_->Clear();
  _has_bits_[2] &= ~0x00040000u;
}
void CloudPolicySettings::clear_urlwhitelist() {
  if (urlwhitelist_ != nullptr) urlwhitelist_->Clear();
  _has_bits_[2] &= ~0x00080000u;
}
void CloudPolicySettings::clear_policyatomicgroupsenabled() {
  if (policyatomicgroupsenabled_ != nullptr) policyatomicgroupsenabled_->Clear();
  _has_bits_[7] &= ~0x00200000u;
}
void CloudPolicySettings::clear_policylistmultiplesourcemergelist() {
  if (policylistmultiplesourcemergelist_ != nullptr) policylistmultiplesourcemergelist_->Clear();
  _has_bits_[7] &= ~0x00001000u;
}
void CloudPolicySettings::clear_policydictionarymultiplesourcemergelist() {
  if (policydictionarymultiplesourcemergelist_ != nullptr) policydictionarymultiplesourcemergelist_->Clear();
  _has_bits_[7] &= ~0x00004000u;
}
void CloudPolicySettings::clear_enableexperimentalpolicies() {
  if (enableexperimentalpolicies_ != nullptr) enableexperimentalpolicies_->Clear();
  _has_bits_[9] &= ~0x00002000u;
}
void CloudPolicySettings::clear_cloudprintsubmitenabled() {
  if (cloudprintsubmitenabled_ != nullptr) cloudprintsubmitenabled_->Clear();
  _has_bits_[2] &= ~0x00400000u;
}
void CloudPolicySettings::clear_disableprintpreview() {
  if (disableprintpreview_ != nullptr) disableprintpreview_->Clear();
  _has_bits_[2] &= ~0x02000000u;
}
void CloudPolicySettings::clear_printheaderfooter() {
  if (printheaderfooter_ != nullptr) printheaderfooter_->Clear();
  _has_bits_[6] &= ~0x00400000u;
}
void CloudPolicySettings::clear_defaultprinterselection() {
  if (defaultprinterselection_ != nullptr) defaultprinterselection_->Clear();
  _has_bits_[4] &= ~0x00800000u;
}
void CloudPolicySettings::clear_enableonlinerevocationchecks() {
  if (enableonlinerevocationchecks_ != nullptr) enableonlinerevocationchecks_->Clear();
  _has_bits_[2] &= ~0x04000000u;
}
void CloudPolicySettings::clear_requireonlinerevocationchecksforlocalanchors() {
  if (requireonlinerevocationchecksforlocalanchors_ != nullptr) requireonlinerevocationchecksforlocalanchors_->Clear();
  _has_bits_[3] &= ~0x04000000u;
}
void CloudPolicySettings::clear_forceephemeralprofiles() {
  if (forceephemeralprofiles_ != nullptr) forceephemeralprofiles_->Clear();
  _has_bits_[3] &= ~0x20000000u;
}
void CloudPolicySettings::clear_backgroundmodeenabled() {
  if (backgroundmodeenabled_ != nullptr) backgroundmodeenabled_->Clear();
  _has_bits_[2] &= ~0x08000000u;
}
void CloudPolicySettings::clear_restrictsignintopattern() {
  if (restrictsignintopattern_ != nullptr) restrictsignintopattern_->Clear();
  _has_bits_[2] &= ~0x10000000u;
}
void CloudPolicySettings::clear_disablesafebrowsingproceedanyway() {
  if (disablesafebrowsingproceedanyway_ != nullptr) disablesafebrowsingproceedanyway_->Clear();
  _has_bits_[2] &= ~0x80000000u;
}
void CloudPolicySettings::clear_spellcheckserviceenabled() {
  if (spellcheckserviceenabled_ != nullptr) spellcheckserviceenabled_->Clear();
  _has_bits_[3] &= ~0x00000001u;
}
void CloudPolicySettings::clear_audiocaptureallowed() {
  if (audiocaptureallowed_ != nullptr) audiocaptureallowed_->Clear();
  _has_bits_[3] &= ~0x00000010u;
}
void CloudPolicySettings::clear_audiocaptureallowedurls() {
  if (audiocaptureallowedurls_ != nullptr) audiocaptureallowedurls_->Clear();
  _has_bits_[3] &= ~0x00020000u;
}
void CloudPolicySettings::clear_videocaptureallowed() {
  if (videocaptureallowed_ != nullptr) videocaptureallowed_->Clear();
  _has_bits_[3] &= ~0x00000100u;
}
void CloudPolicySettings::clear_videocaptureallowedurls() {
  if (videocaptureallowedurls_ != nullptr) videocaptureallowedurls_->Clear();
  _has_bits_[3] &= ~0x00040000u;
}
void CloudPolicySettings::clear_disablescreenshots() {
  if (disablescreenshots_ != nullptr) disablescreenshots_->Clear();
  _has_bits_[3] &= ~0x00000002u;
}
void CloudPolicySettings::clear_builtindnsclientenabled() {
  if (builtindnsclientenabled_ != nullptr) builtindnsclientenabled_->Clear();
  _has_bits_[3] &= ~0x00000080u;
}
void CloudPolicySettings::clear_dnsoverhttpsmode() {
  if (dnsoverhttpsmode_ != nullptr) dnsoverhttpsmode_->Clear();
  _has_bits_[7] &= ~0x00080000u;
}
void CloudPolicySettings::clear_dnsoverhttpstemplates() {
  if (dnsoverhttpstemplates_ != nullptr) dnsoverhttpstemplates_->Clear();
  _has_bits_[8] &= ~0x00010000u;
}
void CloudPolicySettings::clear_fullscreenallowed() {
  if (fullscreenallowed_ != nullptr) fullscreenallowed_->Clear();
  _has_bits_[3] &= ~0x10000000u;
}
void CloudPolicySettings::clear_sharedclipboardenabled() {
  if (sharedclipboardenabled_ != nullptr) sharedclipboardenabled_->Clear();
  _has_bits_[8] &= ~0x00000002u;
}
void CloudPolicySettings::clear_hidewebstoreicon() {
  if (hidewebstoreicon_ != nullptr) hidewebstoreicon_->Clear();
  _has_bits_[3] &= ~0x00000800u;
}
void CloudPolicySettings::clear_variationsrestrictparameter() {
  if (variationsrestrictparameter_ != nullptr) variationsrestrictparameter_->Clear();
  _has_bits_[3] &= ~0x00002000u;
}
void CloudPolicySettings::clear_chromevariations() {
  if (chromevariations_ != nullptr) chromevariations_->Clear();
  _has_bits_[8] &= ~0x10000000u;
}
void CloudPolicySettings::clear_contentpackdefaultfilteringbehavior() {
  if (contentpackdefaultfilteringbehavior_ != nullptr) contentpackdefaultfilteringbehavior_->Clear();
  _has_bits_[3] &= ~0x00004000u;
}
void CloudPolicySettings::clear_contentpackmanualbehaviorhosts() {
  if (contentpackmanualbehaviorhosts_ != nullptr) contentpackmanualbehaviorhosts_->Clear();
  _has_bits_[3] &= ~0x00008000u;
}
void CloudPolicySettings::clear_contentpackmanualbehaviorurls() {
  if (contentpackmanualbehaviorurls_ != nullptr) contentpackmanualbehaviorurls_->Clear();
  _has_bits_[3] &= ~0x00010000u;
}
void CloudPolicySettings::clear_managedbookmarks() {
  if (managedbookmarks_ != nullptr) managedbookmarks_->Clear();
  _has_bits_[3] &= ~0x00080000u;
}
void CloudPolicySettings::clear_enabledeprecatedwebplatformfeatures() {
  if (enabledeprecatedwebplatformfeatures_ != nullptr) enabledeprecatedwebplatformfeatures_->Clear();
  _has_bits_[4] &= ~0x00000080u;
}
void CloudPolicySettings::clear_browserguestmodeenabled() {
  if (browserguestmodeenabled_ != nullptr) browserguestmodeenabled_->Clear();
  _has_bits_[4] &= ~0x00000200u;
}
void CloudPolicySettings::clear_browserguestmodeenforced() {
  if (browserguestmodeenforced_ != nullptr) browserguestmodeenforced_->Clear();
  _has_bits_[7] &= ~0x00020000u;
}
void CloudPolicySettings::clear_browseraddpersonenabled() {
  if (browseraddpersonenabled_ != nullptr) browseraddpersonenabled_->Clear();
  _has_bits_[4] &= ~0x00000400u;
}
void CloudPolicySettings::clear_browsersignin() {
  if (browsersignin_ != nullptr) browsersignin_->Clear();
  _has_bits_[6] &= ~0x02000000u;
}
void CloudPolicySettings::clear_sslversionmin() {
  if (sslversionmin_ != nullptr) sslversionmin_->Clear();
  _has_bits_[4] &= ~0x00002000u;
}
void CloudPolicySettings::clear_certificatetransparencyenforcementdisabledforurls() {
  if (certificatetransparencyenforcementdisabledforurls_ != nullptr) certificatetransparencyenforcementdisabledforurls_->Clear();
  _has_bits_[4] &= ~0x80000000u;
}
void CloudPolicySettings::clear_certificatetransparencyenforcementdisabledforcas() {
  if (certificatetransparencyenforcementdisabledforcas_ != nullptr) certificatetransparencyenforcementdisabledforcas_->Clear();
  _has_bits_[6] &= ~0x00000008u;
}
void CloudPolicySettings::clear_certificatetransparencyenforcementdisabledforlegacycas() {
  if (certificatetransparencyenforcementdisabledforlegacycas_ != nullptr) certificatetransparencyenforcementdisabledforlegacycas_->Clear();
  _has_bits_[6] &= ~0x00000010u;
}
void CloudPolicySettings::clear_sslerroroverrideallowed() {
  if (sslerroroverrideallowed_ != nullptr) sslerroroverrideallowed_->Clear();
  _has_bits_[4] &= ~0x00100000u;
}
void CloudPolicySettings::clear_quicallowed() {
  if (quicallowed_ != nullptr) quicallowed_->Clear();
  _has_bits_[4] &= ~0x00200000u;
}
void CloudPolicySettings::clear_hardwareaccelerationmodeenabled() {
  if (hardwareaccelerationmodeenabled_ != nullptr) hardwareaccelerationmodeenabled_->Clear();
  _has_bits_[4] &= ~0x00400000u;
}
void CloudPolicySettings::clear_suppressunsupportedoswarning() {
  if (suppressunsupportedoswarning_ != nullptr) suppressunsupportedoswarning_->Clear();
  _has_bits_[4] &= ~0x08000000u;
}
void CloudPolicySettings::clear_taskmanagerendprocessenabled() {
  if (taskmanagerendprocessenabled_ != nullptr) taskmanagerendprocessenabled_->Clear();
  _has_bits_[4] &= ~0x10000000u;
}
void CloudPolicySettings::clear_alloweddomainsforapps() {
  if (alloweddomainsforapps_ != nullptr) alloweddomainsforapps_->Clear();
  _has_bits_[4] &= ~0x20000000u;
}
void CloudPolicySettings::clear_enablemediarouter() {
  if (enablemediarouter_ != nullptr) enablemediarouter_->Clear();
  _has_bits_[4] &= ~0x40000000u;
}
void CloudPolicySettings::clear_showcasticonintoolbar() {
  if (showcasticonintoolbar_ != nullptr) showcasticonintoolbar_->Clear();
  _has_bits_[5] &= ~0x00000020u;
}
void CloudPolicySettings::clear_mediaroutercastallowallips() {
  if (mediaroutercastallowallips_ != nullptr) mediaroutercastallowallips_->Clear();
  _has_bits_[6] &= ~0x00000020u;
}
void CloudPolicySettings::clear_ntpcustombackgroundenabled() {
  if (ntpcustombackgroundenabled_ != nullptr) ntpcustombackgroundenabled_->Clear();
  _has_bits_[8] &= ~0x02000000u;
}
void CloudPolicySettings::clear_webrtcudpportrange() {
  if (webrtcudpportrange_ != nullptr) webrtcudpportrange_->Clear();
  _has_bits_[5] &= ~0x00000001u;
}
void CloudPolicySettings::clear_webrtclocalipsallowedurls() {
  if (webrtclocalipsallowedurls_ != nullptr) webrtclocalipsallowedurls_->Clear();
  _has_bits_[8] &= ~0x00008000u;
}
void CloudPolicySettings::clear_componentupdatesenabled() {
  if (componentupdatesenabled_ != nullptr) componentupdatesenabled_->Clear();
  _has_bits_[5] &= ~0x00000002u;
}
void CloudPolicySettings::clear_browsernetworktimequeriesenabled() {
  if (browsernetworktimequeriesenabled_ != nullptr) browsernetworktimequeriesenabled_->Clear();
  _has_bits_[5] &= ~0x00000100u;
}
void CloudPolicySettings::clear_printpreviewusesystemdefaultprinter() {
  if (printpreviewusesystemdefaultprinter_ != nullptr) printpreviewusesystemdefaultprinter_->Clear();
  _has_bits_[5] &= ~0x00000400u;
}
void CloudPolicySettings::clear_cloudpolicyoverridesplatformpolicy() {
  if (cloudpolicyoverridesplatformpolicy_ != nullptr) cloudpolicyoverridesplatformpolicy_->Clear();
  _has_bits_[5] &= ~0x00000800u;
}
void CloudPolicySettings::clear_promptfordownloadlocation() {
  if (promptfordownloadlocation_ != nullptr) promptfordownloadlocation_->Clear();
  _has_bits_[5] &= ~0x00008000u;
}
void CloudPolicySettings::clear_isolateorigins() {
  if (isolateorigins_ != nullptr) isolateorigins_->Clear();
  _has_bits_[5] &= ~0x00010000u;
}
void CloudPolicySettings::clear_siteperprocess() {
  if (siteperprocess_ != nullptr) siteperprocess_->Clear();
  _has_bits_[5] &= ~0x00020000u;
}
void CloudPolicySettings::clear_unsafelytreatinsecureoriginassecure() {
  if (unsafelytreatinsecureoriginassecure_ != nullptr) unsafelytreatinsecureoriginassecure_->Clear();
  _has_bits_[5] &= ~0x00040000u;
}
void CloudPolicySettings::clear_defaultdownloaddirectory() {
  if (defaultdownloaddirectory_ != nullptr) defaultdownloaddirectory_->Clear();
  _has_bits_[5] &= ~0x00080000u;
}
void CloudPolicySettings::clear_abusiveexperienceinterventionenforce() {
  if (abusiveexperienceinterventionenforce_ != nullptr) abusiveexperienceinterventionenforce_->Clear();
  _has_bits_[5] &= ~0x00200000u;
}
void CloudPolicySettings::clear_spellchecklanguage() {
  if (spellchecklanguage_ != nullptr) spellchecklanguage_->Clear();
  _has_bits_[5] &= ~0x00400000u;
}
void CloudPolicySettings::clear_spellchecklanguageblacklist() {
  if (spellchecklanguageblacklist_ != nullptr) spellchecklanguageblacklist_->Clear();
  _has_bits_[7] &= ~0x00000200u;
}
void CloudPolicySettings::clear_spellcheckenabled() {
  if (spellcheckenabled_ != nullptr) spellcheckenabled_->Clear();
  _has_bits_[5] &= ~0x00800000u;
}
void CloudPolicySettings::clear_adssettingforintrusiveadssites() {
  if (adssettingforintrusiveadssites_ != nullptr) adssettingforintrusiveadssites_->Clear();
  _has_bits_[5] &= ~0x01000000u;
}
void CloudPolicySettings::clear_passwordprotectionwarningtrigger() {
  if (passwordprotectionwarningtrigger_ != nullptr) passwordprotectionwarningtrigger_->Clear();
  _has_bits_[5] &= ~0x02000000u;
}
void CloudPolicySettings::clear_relaunchnotification() {
  if (relaunchnotification_ != nullptr) relaunchnotification_->Clear();
  _has_bits_[5] &= ~0x04000000u;
}
void CloudPolicySettings::clear_relaunchnotificationperiod() {
  if (relaunchnotificationperiod_ != nullptr) relaunchnotificationperiod_->Clear();
  _has_bits_[5] &= ~0x08000000u;
}
void CloudPolicySettings::clear_safebrowsingwhitelistdomains() {
  if (safebrowsingwhitelistdomains_ != nullptr) safebrowsingwhitelistdomains_->Clear();
  _has_bits_[5] &= ~0x10000000u;
}
void CloudPolicySettings::clear_passwordprotectionloginurls() {
  if (passwordprotectionloginurls_ != nullptr) passwordprotectionloginurls_->Clear();
  _has_bits_[5] &= ~0x20000000u;
}
void CloudPolicySettings::clear_passwordprotectionchangepasswordurl() {
  if (passwordprotectionchangepasswordurl_ != nullptr) passwordprotectionchangepasswordurl_->Clear();
  _has_bits_[5] &= ~0x40000000u;
}
void CloudPolicySettings::clear_safebrowsingextendedreportingenabled() {
  if (safebrowsingextendedreportingenabled_ != nullptr) safebrowsingextendedreportingenabled_->Clear();
  _has_bits_[5] &= ~0x80000000u;
}
void CloudPolicySettings::clear_cloudmanagementenrollmenttoken() {
  if (cloudmanagementenrollmenttoken_ != nullptr) cloudmanagementenrollmenttoken_->Clear();
  _has_bits_[7] &= ~0x00000002u;
}
void CloudPolicySettings::clear_cloudmanagementenrollmentmandatory() {
  if (cloudmanagementenrollmentmandatory_ != nullptr) cloudmanagementenrollmentmandatory_->Clear();
  _has_bits_[7] &= ~0x00000001u;
}
void CloudPolicySettings::clear_autoplayallowed() {
  if (autoplayallowed_ != nullptr) autoplayallowed_->Clear();
  _has_bits_[6] &= ~0x00000001u;
}
void CloudPolicySettings::clear_autoplaywhitelist() {
  if (autoplaywhitelist_ != nullptr) autoplaywhitelist_->Clear();
  _has_bits_[6] &= ~0x00000002u;
}
void CloudPolicySettings::clear_promotionaltabsenabled() {
  if (promotionaltabsenabled_ != nullptr) promotionaltabsenabled_->Clear();
  _has_bits_[6] &= ~0x00000200u;
}
void CloudPolicySettings::clear_safesitesfilterbehavior() {
  if (safesitesfilterbehavior_ != nullptr) safesitesfilterbehavior_->Clear();
  _has_bits_[6] &= ~0x00000400u;
}
void CloudPolicySettings::clear_overridesecurityrestrictionsoninsecureorigin() {
  if (overridesecurityrestrictionsoninsecureorigin_ != nullptr) overridesecurityrestrictionsoninsecureorigin_->Clear();
  _has_bits_[6] &= ~0x00000800u;
}
void CloudPolicySettings::clear_urlkeyedanonymizeddatacollectionenabled() {
  if (urlkeyedanonymizeddatacollectionenabled_ != nullptr) urlkeyedanonymizeddatacollectionenabled_->Clear();
  _has_bits_[6] &= ~0x00002000u;
}
void CloudPolicySettings::clear_webrtceventlogcollectionallowed() {
  if (webrtceventlogcollectionallowed_ != nullptr) webrtceventlogcollectionallowed_->Clear();
  _has_bits_[6] &= ~0x00004000u;
}
void CloudPolicySettings::clear_coalesceh2connectionswithclientcertificatesforhosts() {
  if (coalesceh2connectionswithclientcertificatesforhosts_ != nullptr) coalesceh2connectionswithclientcertificatesforhosts_->Clear();
  _has_bits_[6] &= ~0x00008000u;
}
void CloudPolicySettings::clear_webappinstallforcelist() {
  if (webappinstallforcelist_ != nullptr) webappinstallforcelist_->Clear();
  _has_bits_[6] &= ~0x00010000u;
}
void CloudPolicySettings::clear_reportversiondata() {
  if (reportversiondata_ != nullptr) reportversiondata_->Clear();
  _has_bits_[6] &= ~0x00020000u;
}
void CloudPolicySettings::clear_reportpolicydata() {
  if (reportpolicydata_ != nullptr) reportpolicydata_->Clear();
  _has_bits_[6] &= ~0x00040000u;
}
void CloudPolicySettings::clear_reportmachineiddata() {
  if (reportmachineiddata_ != nullptr) reportmachineiddata_->Clear();
  _has_bits_[6] &= ~0x00080000u;
}
void CloudPolicySettings::clear_reportuseriddata() {
  if (reportuseriddata_ != nullptr) reportuseriddata_->Clear();
  _has_bits_[6] &= ~0x00100000u;
}
void CloudPolicySettings::clear_reportextensionsandpluginsdata() {
  if (reportextensionsandpluginsdata_ != nullptr) reportextensionsandpluginsdata_->Clear();
  _has_bits_[6] &= ~0x80000000u;
}
void CloudPolicySettings::clear_cloudextensionrequestenabled() {
  if (cloudextensionrequestenabled_ != nullptr) cloudextensionrequestenabled_->Clear();
  _has_bits_[8] &= ~0x00000001u;
}
void CloudPolicySettings::clear_cloudreportingenabled() {
  if (cloudreportingenabled_ != nullptr) cloudreportingenabled_->Clear();
  _has_bits_[6] &= ~0x04000000u;
}
void CloudPolicySettings::clear_enterprisehardwareplatformapienabled() {
  if (enterprisehardwareplatformapienabled_ != nullptr) enterprisehardwareplatformapienabled_->Clear();
  _has_bits_[6] &= ~0x00800000u;
}
void CloudPolicySettings::clear_alternativebrowserpath() {
  if (alternativebrowserpath_ != nullptr) alternativebrowserpath_->Clear();
  _has_bits_[6] &= ~0x08000000u;
}
void CloudPolicySettings::clear_alternativebrowserparameters() {
  if (alternativebrowserparameters_ != nullptr) alternativebrowserparameters_->Clear();
  _has_bits_[6] &= ~0x10000000u;
}
void CloudPolicySettings::clear_browserswitcherurllist() {
  if (browserswitcherurllist_ != nullptr) browserswitcherurllist_->Clear();
  _has_bits_[6] &= ~0x20000000u;
}
void CloudPolicySettings::clear_browserswitcherurlgreylist() {
  if (browserswitcherurlgreylist_ != nullptr) browserswitcherurlgreylist_->Clear();
  _has_bits_[6] &= ~0x40000000u;
}
void CloudPolicySettings::clear_browserswitcherexternalsitelisturl() {
  if (browserswitcherexternalsitelisturl_ != nullptr) browserswitcherexternalsitelisturl_->Clear();
  _has_bits_[7] &= ~0x00000004u;
}
void CloudPolicySettings::clear_browserswitcherexternalgreylisturl() {
  if (browserswitcherexternalgreylisturl_ != nullptr) browserswitcherexternalgreylisturl_->Clear();
  _has_bits_[7] &= ~0x00002000u;
}
void CloudPolicySettings::clear_browserswitcherdelay() {
  if (browserswitcherdelay_ != nullptr) browserswitcherdelay_->Clear();
  _has_bits_[7] &= ~0x00000020u;
}
void CloudPolicySettings::clear_browserswitcherenabled() {
  if (browserswitcherenabled_ != nullptr) browserswitcherenabled_->Clear();
  _has_bits_[7] &= ~0x00000008u;
}
void CloudPolicySettings::clear_browserswitcherkeeplastchrometab() {
  if (browserswitcherkeeplastchrometab_ != nullptr) browserswitcherkeeplastchrometab_->Clear();
  _has_bits_[7] &= ~0x00000010u;
}
void CloudPolicySettings::clear_allowpopupsduringpageunload() {
  if (allowpopupsduringpageunload_ != nullptr) allowpopupsduringpageunload_->Clear();
  _has_bits_[7] &= ~0x00000080u;
}
void CloudPolicySettings::clear_signedhttpexchangeenabled() {
  if (signedhttpexchangeenabled_ != nullptr) signedhttpexchangeenabled_->Clear();
  _has_bits_[7] &= ~0x00000400u;
}
void CloudPolicySettings::clear_userfeedbackallowed() {
  if (userfeedbackallowed_ != nullptr) userfeedbackallowed_->Clear();
  _has_bits_[7] &= ~0x00010000u;
}
void CloudPolicySettings::clear_commandlineflagsecuritywarningsenabled() {
  if (commandlineflagsecuritywarningsenabled_ != nullptr) commandlineflagsecuritywarningsenabled_->Clear();
  _has_bits_[7] &= ~0x00008000u;
}
void CloudPolicySettings::clear_sendfilesformalwarecheck() {
  if (sendfilesformalwarecheck_ != nullptr) sendfilesformalwarecheck_->Clear();
  _has_bits_[7] &= ~0x00100000u;
}
void CloudPolicySettings::clear_unsafeeventsreportingenabled() {
  if (unsafeeventsreportingenabled_ != nullptr) unsafeeventsreportingenabled_->Clear();
  _has_bits_[7] &= ~0x00400000u;
}
void CloudPolicySettings::clear_blocklargefiletransfer() {
  if (blocklargefiletransfer_ != nullptr) blocklargefiletransfer_->Clear();
  _has_bits_[7] &= ~0x00800000u;
}
void CloudPolicySettings::clear_delaydeliveryuntilverdict() {
  if (delaydeliveryuntilverdict_ != nullptr) delaydeliveryuntilverdict_->Clear();
  _has_bits_[7] &= ~0x01000000u;
}
void CloudPolicySettings::clear_allowpasswordprotectedfiles() {
  if (allowpasswordprotectedfiles_ != nullptr) allowpasswordprotectedfiles_->Clear();
  _has_bits_[7] &= ~0x02000000u;
}
void CloudPolicySettings::clear_blockunsupportedfiletypes() {
  if (blockunsupportedfiletypes_ != nullptr) blockunsupportedfiletypes_->Clear();
  _has_bits_[8] &= ~0x40000000u;
}
void CloudPolicySettings::clear_checkcontentcompliance() {
  if (checkcontentcompliance_ != nullptr) checkcontentcompliance_->Clear();
  _has_bits_[7] &= ~0x04000000u;
}
void CloudPolicySettings::clear_urlstocheckcomplianceofdownloadedcontent() {
  if (urlstocheckcomplianceofdownloadedcontent_ != nullptr) urlstocheckcomplianceofdownloadedcontent_->Clear();
  _has_bits_[7] &= ~0x08000000u;
}
void CloudPolicySettings::clear_urlstonotcheckcomplianceofuploadedcontent() {
  if (urlstonotcheckcomplianceofuploadedcontent_ != nullptr) urlstonotcheckcomplianceofuploadedcontent_->Clear();
  _has_bits_[7] &= ~0x10000000u;
}
void CloudPolicySettings::clear_onfiledownloadedenterpriseconnector() {
  if (onfiledownloadedenterpriseconnector_ != nullptr) onfiledownloadedenterpriseconnector_->Clear();
  _has_bits_[9] &= ~0x00000040u;
}
void CloudPolicySettings::clear_onfileattachedenterpriseconnector() {
  if (onfileattachedenterpriseconnector_ != nullptr) onfileattachedenterpriseconnector_->Clear();
  _has_bits_[9] &= ~0x00000020u;
}
void CloudPolicySettings::clear_onbulkdataentryenterpriseconnector() {
  if (onbulkdataentryenterpriseconnector_ != nullptr) onbulkdataentryenterpriseconnector_->Clear();
  _has_bits_[9] &= ~0x00000080u;
}
void CloudPolicySettings::clear_onsecurityevententerpriseconnector() {
  if (onsecurityevententerpriseconnector_ != nullptr) onsecurityevententerpriseconnector_->Clear();
  _has_bits_[9] &= ~0x00000100u;
}
void CloudPolicySettings::clear_urlstocheckformalwareofuploadedcontent() {
  if (urlstocheckformalwareofuploadedcontent_ != nullptr) urlstocheckformalwareofuploadedcontent_->Clear();
  _has_bits_[7] &= ~0x20000000u;
}
void CloudPolicySettings::clear_urlstonotcheckformalwareofdownloadedcontent() {
  if (urlstonotcheckformalwareofdownloadedcontent_ != nullptr) urlstonotcheckformalwareofdownloadedcontent_->Clear();
  _has_bits_[8] &= ~0x80000000u;
}
void CloudPolicySettings::clear_hstspolicybypasslist() {
  if (hstspolicybypasslist_ != nullptr) hstspolicybypasslist_->Clear();
  _has_bits_[7] &= ~0x40000000u;
}
void CloudPolicySettings::clear_allowsyncxhrinpagedismissal() {
  if (allowsyncxhrinpagedismissal_ != nullptr) allowsyncxhrinpagedismissal_->Clear();
  _has_bits_[7] &= ~0x80000000u;
}
void CloudPolicySettings::clear_tls13hardeningforlocalanchorsenabled() {
  if (tls13hardeningforlocalanchorsenabled_ != nullptr) tls13hardeningforlocalanchorsenabled_->Clear();
  _has_bits_[8] &= ~0x00000040u;
}
void CloudPolicySettings::clear_audiosandboxenabled() {
  if (audiosandboxenabled_ != nullptr) audiosandboxenabled_->Clear();
  _has_bits_[8] &= ~0x00000080u;
}
void CloudPolicySettings::clear_corsmitigationlist() {
  if (corsmitigationlist_ != nullptr) corsmitigationlist_->Clear();
  _has_bits_[8] &= ~0x00000100u;
}
void CloudPolicySettings::clear_corslegacymodeenabled() {
  if (corslegacymodeenabled_ != nullptr) corslegacymodeenabled_->Clear();
  _has_bits_[8] &= ~0x00000200u;
}
void CloudPolicySettings::clear_externalprotocoldialogshowalwaysopencheckbox() {
  if (externalprotocoldialogshowalwaysopencheckbox_ != nullptr) externalprotocoldialogshowalwaysopencheckbox_->Clear();
  _has_bits_[8] &= ~0x00000400u;
}
void CloudPolicySettings::clear_defaultinsecurecontentsetting() {
  if (defaultinsecurecontentsetting_ != nullptr) defaultinsecurecontentsetting_->Clear();
  _has_bits_[8] &= ~0x00000800u;
}
void CloudPolicySettings::clear_insecurecontentallowedforurls() {
  if (insecurecontentallowedforurls_ != nullptr) insecurecontentallowedforurls_->Clear();
  _has_bits_[8] &= ~0x00001000u;
}
void CloudPolicySettings::clear_insecurecontentblockedforurls() {
  if (insecurecontentblockedforurls_ != nullptr) insecurecontentblockedforurls_->Clear();
  _has_bits_[8] &= ~0x00002000u;
}
void CloudPolicySettings::clear_clicktocallenabled() {
  if (clicktocallenabled_ != nullptr) clicktocallenabled_->Clear();
  _has_bits_[8] &= ~0x00040000u;
}
void CloudPolicySettings::clear_userdatasnapshotretentionlimit() {
  if (userdatasnapshotretentionlimit_ != nullptr) userdatasnapshotretentionlimit_->Clear();
  _has_bits_[9] &= ~0x00000001u;
}
void CloudPolicySettings::clear_printertypedenylist() {
  if (printertypedenylist_ != nullptr) printertypedenylist_->Clear();
  _has_bits_[8] &= ~0x00080000u;
}
void CloudPolicySettings::clear_ambientauthenticationinprivatemodesenabled() {
  if (ambientauthenticationinprivatemodesenabled_ != nullptr) ambientauthenticationinprivatemodesenabled_->Clear();
  _has_bits_[8] &= ~0x00400000u;
}
void CloudPolicySettings::clear_paymentmethodqueryenabled() {
  if (paymentmethodqueryenabled_ != nullptr) paymentmethodqueryenabled_->Clear();
  _has_bits_[8] &= ~0x00800000u;
}
void CloudPolicySettings::clear_strictermixedcontenttreatmentenabled() {
  if (strictermixedcontenttreatmentenabled_ != nullptr) strictermixedcontenttreatmentenabled_->Clear();
  _has_bits_[8] &= ~0x01000000u;
}
void CloudPolicySettings::clear_localdiscoveryenabled() {
  if (localdiscoveryenabled_ != nullptr) localdiscoveryenabled_->Clear();
  _has_bits_[8] &= ~0x08000000u;
}
void CloudPolicySettings::clear_screencaptureallowed() {
  if (screencaptureallowed_ != nullptr) screencaptureallowed_->Clear();
  _has_bits_[8] &= ~0x20000000u;
}
void CloudPolicySettings::clear_allownativenotifications() {
  if (allownativenotifications_ != nullptr) allownativenotifications_->Clear();
  _has_bits_[9] &= ~0x00000002u;
}
void CloudPolicySettings::clear_advancedprotectionallowed() {
  if (advancedprotectionallowed_ != nullptr) advancedprotectionallowed_->Clear();
  _has_bits_[9] &= ~0x00000008u;
}
void CloudPolicySettings::clear_scrolltotextfragmentenabled() {
  if (scrolltotextfragmentenabled_ != nullptr) scrolltotextfragmentenabled_->Clear();
  _has_bits_[9] &= ~0x00000010u;
}
void CloudPolicySettings::clear_accessibilityimagelabelsenabled() {
  if (accessibilityimagelabelsenabled_ != nullptr) accessibilityimagelabelsenabled_->Clear();
  _has_bits_[9] &= ~0x00000400u;
}
void CloudPolicySettings::clear_intensivewakeupthrottlingenabled() {
  if (intensivewakeupthrottlingenabled_ != nullptr) intensivewakeupthrottlingenabled_->Clear();
  _has_bits_[9] &= ~0x00004000u;
}
CloudPolicySettings::CloudPolicySettings()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_management.CloudPolicySettings)
}
CloudPolicySettings::CloudPolicySettings(const CloudPolicySettings& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_homepagelocation()) {
    homepagelocation_ = new ::enterprise_management::StringPolicyProto(*from.homepagelocation_);
  } else {
    homepagelocation_ = nullptr;
  }
  if (from.has_homepageisnewtabpage()) {
    homepageisnewtabpage_ = new ::enterprise_management::BooleanPolicyProto(*from.homepageisnewtabpage_);
  } else {
    homepageisnewtabpage_ = nullptr;
  }
  if (from.has_defaultbrowsersettingenabled()) {
    defaultbrowsersettingenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.defaultbrowsersettingenabled_);
  } else {
    defaultbrowsersettingenabled_ = nullptr;
  }
  if (from.has_alternateerrorpagesenabled()) {
    alternateerrorpagesenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.alternateerrorpagesenabled_);
  } else {
    alternateerrorpagesenabled_ = nullptr;
  }
  if (from.has_searchsuggestenabled()) {
    searchsuggestenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.searchsuggestenabled_);
  } else {
    searchsuggestenabled_ = nullptr;
  }
  if (from.has_javascriptenabled()) {
    javascriptenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.javascriptenabled_);
  } else {
    javascriptenabled_ = nullptr;
  }
  if (from.has_incognitoenabled()) {
    incognitoenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.incognitoenabled_);
  } else {
    incognitoenabled_ = nullptr;
  }
  if (from.has_savingbrowserhistorydisabled()) {
    savingbrowserhistorydisabled_ = new ::enterprise_management::BooleanPolicyProto(*from.savingbrowserhistorydisabled_);
  } else {
    savingbrowserhistorydisabled_ = nullptr;
  }
  if (from.has_printingenabled()) {
    printingenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.printingenabled_);
  } else {
    printingenabled_ = nullptr;
  }
  if (from.has_cloudprintproxyenabled()) {
    cloudprintproxyenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.cloudprintproxyenabled_);
  } else {
    cloudprintproxyenabled_ = nullptr;
  }
  if (from.has_safebrowsingenabled()) {
    safebrowsingenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.safebrowsingenabled_);
  } else {
    safebrowsingenabled_ = nullptr;
  }
  if (from.has_metricsreportingenabled()) {
    metricsreportingenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.metricsreportingenabled_);
  } else {
    metricsreportingenabled_ = nullptr;
  }
  if (from.has_passwordmanagerenabled()) {
    passwordmanagerenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.passwordmanagerenabled_);
  } else {
    passwordmanagerenabled_ = nullptr;
  }
  if (from.has_autofillenabled()) {
    autofillenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.autofillenabled_);
  } else {
    autofillenabled_ = nullptr;
  }
  if (from.has_disabledplugins()) {
    disabledplugins_ = new ::enterprise_management::StringListPolicyProto(*from.disabledplugins_);
  } else {
    disabledplugins_ = nullptr;
  }
  if (from.has_syncdisabled()) {
    syncdisabled_ = new ::enterprise_management::BooleanPolicyProto(*from.syncdisabled_);
  } else {
    syncdisabled_ = nullptr;
  }
  if (from.has_proxymode()) {
    proxymode_ = new ::enterprise_management::StringPolicyProto(*from.proxymode_);
  } else {
    proxymode_ = nullptr;
  }
  if (from.has_proxyservermode()) {
    proxyservermode_ = new ::enterprise_management::IntegerPolicyProto(*from.proxyservermode_);
  } else {
    proxyservermode_ = nullptr;
  }
  if (from.has_proxyserver()) {
    proxyserver_ = new ::enterprise_management::StringPolicyProto(*from.proxyserver_);
  } else {
    proxyserver_ = nullptr;
  }
  if (from.has_proxypacurl()) {
    proxypacurl_ = new ::enterprise_management::StringPolicyProto(*from.proxypacurl_);
  } else {
    proxypacurl_ = nullptr;
  }
  if (from.has_proxybypasslist()) {
    proxybypasslist_ = new ::enterprise_management::StringPolicyProto(*from.proxybypasslist_);
  } else {
    proxybypasslist_ = nullptr;
  }
  if (from.has_authschemes()) {
    authschemes_ = new ::enterprise_management::StringPolicyProto(*from.authschemes_);
  } else {
    authschemes_ = nullptr;
  }
  if (from.has_disableauthnegotiatecnamelookup()) {
    disableauthnegotiatecnamelookup_ = new ::enterprise_management::BooleanPolicyProto(*from.disableauthnegotiatecnamelookup_);
  } else {
    disableauthnegotiatecnamelookup_ = nullptr;
  }
  if (from.has_enableauthnegotiateport()) {
    enableauthnegotiateport_ = new ::enterprise_management::BooleanPolicyProto(*from.enableauthnegotiateport_);
  } else {
    enableauthnegotiateport_ = nullptr;
  }
  if (from.has_authserverwhitelist()) {
    authserverwhitelist_ = new ::enterprise_management::StringPolicyProto(*from.authserverwhitelist_);
  } else {
    authserverwhitelist_ = nullptr;
  }
  if (from.has_authnegotiatedelegatewhitelist()) {
    authnegotiatedelegatewhitelist_ = new ::enterprise_management::StringPolicyProto(*from.authnegotiatedelegatewhitelist_);
  } else {
    authnegotiatedelegatewhitelist_ = nullptr;
  }
  if (from.has_gssapilibraryname()) {
    gssapilibraryname_ = new ::enterprise_management::StringPolicyProto(*from.gssapilibraryname_);
  } else {
    gssapilibraryname_ = nullptr;
  }
  if (from.has_extensioninstallblacklist()) {
    extensioninstallblacklist_ = new ::enterprise_management::StringListPolicyProto(*from.extensioninstallblacklist_);
  } else {
    extensioninstallblacklist_ = nullptr;
  }
  if (from.has_extensioninstallwhitelist()) {
    extensioninstallwhitelist_ = new ::enterprise_management::StringListPolicyProto(*from.extensioninstallwhitelist_);
  } else {
    extensioninstallwhitelist_ = nullptr;
  }
  if (from.has_extensioninstallforcelist()) {
    extensioninstallforcelist_ = new ::enterprise_management::StringListPolicyProto(*from.extensioninstallforcelist_);
  } else {
    extensioninstallforcelist_ = nullptr;
  }
  if (from.has_showhomebutton()) {
    showhomebutton_ = new ::enterprise_management::BooleanPolicyProto(*from.showhomebutton_);
  } else {
    showhomebutton_ = nullptr;
  }
  if (from.has_developertoolsdisabled()) {
    developertoolsdisabled_ = new ::enterprise_management::BooleanPolicyProto(*from.developertoolsdisabled_);
  } else {
    developertoolsdisabled_ = nullptr;
  }
  if (from.has_restoreonstartup()) {
    restoreonstartup_ = new ::enterprise_management::IntegerPolicyProto(*from.restoreonstartup_);
  } else {
    restoreonstartup_ = nullptr;
  }
  if (from.has_restoreonstartupurls()) {
    restoreonstartupurls_ = new ::enterprise_management::StringListPolicyProto(*from.restoreonstartupurls_);
  } else {
    restoreonstartupurls_ = nullptr;
  }
  if (from.has_blockthirdpartycookies()) {
    blockthirdpartycookies_ = new ::enterprise_management::BooleanPolicyProto(*from.blockthirdpartycookies_);
  } else {
    blockthirdpartycookies_ = nullptr;
  }
  if (from.has_defaultsearchproviderenabled()) {
    defaultsearchproviderenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.defaultsearchproviderenabled_);
  } else {
    defaultsearchproviderenabled_ = nullptr;
  }
  if (from.has_defaultsearchprovidername()) {
    defaultsearchprovidername_ = new ::enterprise_management::StringPolicyProto(*from.defaultsearchprovidername_);
  } else {
    defaultsearchprovidername_ = nullptr;
  }
  if (from.has_defaultsearchproviderkeyword()) {
    defaultsearchproviderkeyword_ = new ::enterprise_management::StringPolicyProto(*from.defaultsearchproviderkeyword_);
  } else {
    defaultsearchproviderkeyword_ = nullptr;
  }
  if (from.has_defaultsearchprovidersearchurl()) {
    defaultsearchprovidersearchurl_ = new ::enterprise_management::StringPolicyProto(*from.defaultsearchprovidersearchurl_);
  } else {
    defaultsearchprovidersearchurl_ = nullptr;
  }
  if (from.has_defaultsearchprovidersuggesturl()) {
    defaultsearchprovidersuggesturl_ = new ::enterprise_management::StringPolicyProto(*from.defaultsearchprovidersuggesturl_);
  } else {
    defaultsearchprovidersuggesturl_ = nullptr;
  }
  if (from.has_defaultsearchprovidericonurl()) {
    defaultsearchprovidericonurl_ = new ::enterprise_management::StringPolicyProto(*from.defaultsearchprovidericonurl_);
  } else {
    defaultsearchprovidericonurl_ = nullptr;
  }
  if (from.has_defaultsearchproviderencodings()) {
    defaultsearchproviderencodings_ = new ::enterprise_management::StringListPolicyProto(*from.defaultsearchproviderencodings_);
  } else {
    defaultsearchproviderencodings_ = nullptr;
  }
  if (from.has_defaultcookiessetting()) {
    defaultcookiessetting_ = new ::enterprise_management::IntegerPolicyProto(*from.defaultcookiessetting_);
  } else {
    defaultcookiessetting_ = nullptr;
  }
  if (from.has_defaultimagessetting()) {
    defaultimagessetting_ = new ::enterprise_management::IntegerPolicyProto(*from.defaultimagessetting_);
  } else {
    defaultimagessetting_ = nullptr;
  }
  if (from.has_defaultjavascriptsetting()) {
    defaultjavascriptsetting_ = new ::enterprise_management::IntegerPolicyProto(*from.defaultjavascriptsetting_);
  } else {
    defaultjavascriptsetting_ = nullptr;
  }
  if (from.has_defaultpluginssetting()) {
    defaultpluginssetting_ = new ::enterprise_management::IntegerPolicyProto(*from.defaultpluginssetting_);
  } else {
    defaultpluginssetting_ = nullptr;
  }
  if (from.has_defaultpopupssetting()) {
    defaultpopupssetting_ = new ::enterprise_management::IntegerPolicyProto(*from.defaultpopupssetting_);
  } else {
    defaultpopupssetting_ = nullptr;
  }
  if (from.has_defaultnotificationssetting()) {
    defaultnotificationssetting_ = new ::enterprise_management::IntegerPolicyProto(*from.defaultnotificationssetting_);
  } else {
    defaultnotificationssetting_ = nullptr;
  }
  if (from.has_defaultgeolocationsetting()) {
    defaultgeolocationsetting_ = new ::enterprise_management::IntegerPolicyProto(*from.defaultgeolocationsetting_);
  } else {
    defaultgeolocationsetting_ = nullptr;
  }
  if (from.has_disable3dapis()) {
    disable3dapis_ = new ::enterprise_management::BooleanPolicyProto(*from.disable3dapis_);
  } else {
    disable3dapis_ = nullptr;
  }
  if (from.has_policyrefreshrate()) {
    policyrefreshrate_ = new ::enterprise_management::IntegerPolicyProto(*from.policyrefreshrate_);
  } else {
    policyrefreshrate_ = nullptr;
  }
  if (from.has_downloaddirectory()) {
    downloaddirectory_ = new ::enterprise_management::StringPolicyProto(*from.downloaddirectory_);
  } else {
    downloaddirectory_ = nullptr;
  }
  if (from.has_cookiesblockedforurls()) {
    cookiesblockedforurls_ = new ::enterprise_management::StringListPolicyProto(*from.cookiesblockedforurls_);
  } else {
    cookiesblockedforurls_ = nullptr;
  }
  if (from.has_cookiessessiononlyforurls()) {
    cookiessessiononlyforurls_ = new ::enterprise_management::StringListPolicyProto(*from.cookiessessiononlyforurls_);
  } else {
    cookiessessiononlyforurls_ = nullptr;
  }
  if (from.has_imagesallowedforurls()) {
    imagesallowedforurls_ = new ::enterprise_management::StringListPolicyProto(*from.imagesallowedforurls_);
  } else {
    imagesallowedforurls_ = nullptr;
  }
  if (from.has_imagesblockedforurls()) {
    imagesblockedforurls_ = new ::enterprise_management::StringListPolicyProto(*from.imagesblockedforurls_);
  } else {
    imagesblockedforurls_ = nullptr;
  }
  if (from.has_javascriptallowedforurls()) {
    javascriptallowedforurls_ = new ::enterprise_management::StringListPolicyProto(*from.javascriptallowedforurls_);
  } else {
    javascriptallowedforurls_ = nullptr;
  }
  if (from.has_javascriptblockedforurls()) {
    javascriptblockedforurls_ = new ::enterprise_management::StringListPolicyProto(*from.javascriptblockedforurls_);
  } else {
    javascriptblockedforurls_ = nullptr;
  }
  if (from.has_pluginsallowedforurls()) {
    pluginsallowedforurls_ = new ::enterprise_management::StringListPolicyProto(*from.pluginsallowedforurls_);
  } else {
    pluginsallowedforurls_ = nullptr;
  }
  if (from.has_pluginsblockedforurls()) {
    pluginsblockedforurls_ = new ::enterprise_management::StringListPolicyProto(*from.pluginsblockedforurls_);
  } else {
    pluginsblockedforurls_ = nullptr;
  }
  if (from.has_popupsallowedforurls()) {
    popupsallowedforurls_ = new ::enterprise_management::StringListPolicyProto(*from.popupsallowedforurls_);
  } else {
    popupsallowedforurls_ = nullptr;
  }
  if (from.has_popupsblockedforurls()) {
    popupsblockedforurls_ = new ::enterprise_management::StringListPolicyProto(*from.popupsblockedforurls_);
  } else {
    popupsblockedforurls_ = nullptr;
  }
  if (from.has_cookiesallowedforurls()) {
    cookiesallowedforurls_ = new ::enterprise_management::StringListPolicyProto(*from.cookiesallowedforurls_);
  } else {
    cookiesallowedforurls_ = nullptr;
  }
  if (from.has_enabledplugins()) {
    enabledplugins_ = new ::enterprise_management::StringListPolicyProto(*from.enabledplugins_);
  } else {
    enabledplugins_ = nullptr;
  }
  if (from.has_disabledpluginsexceptions()) {
    disabledpluginsexceptions_ = new ::enterprise_management::StringListPolicyProto(*from.disabledpluginsexceptions_);
  } else {
    disabledpluginsexceptions_ = nullptr;
  }
  if (from.has_translateenabled()) {
    translateenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.translateenabled_);
  } else {
    translateenabled_ = nullptr;
  }
  if (from.has_allowoutdatedplugins()) {
    allowoutdatedplugins_ = new ::enterprise_management::BooleanPolicyProto(*from.allowoutdatedplugins_);
  } else {
    allowoutdatedplugins_ = nullptr;
  }
  if (from.has_bookmarkbarenabled()) {
    bookmarkbarenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.bookmarkbarenabled_);
  } else {
    bookmarkbarenabled_ = nullptr;
  }
  if (from.has_editbookmarksenabled()) {
    editbookmarksenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.editbookmarksenabled_);
  } else {
    editbookmarksenabled_ = nullptr;
  }
  if (from.has_allowfileselectiondialogs()) {
    allowfileselectiondialogs_ = new ::enterprise_management::BooleanPolicyProto(*from.allowfileselectiondialogs_);
  } else {
    allowfileselectiondialogs_ = nullptr;
  }
  if (from.has_disabledschemes()) {
    disabledschemes_ = new ::enterprise_management::StringListPolicyProto(*from.disabledschemes_);
  } else {
    disabledschemes_ = nullptr;
  }
  if (from.has_diskcachedir()) {
    diskcachedir_ = new ::enterprise_management::StringPolicyProto(*from.diskcachedir_);
  } else {
    diskcachedir_ = nullptr;
  }
  if (from.has_allowcrossoriginauthprompt()) {
    allowcrossoriginauthprompt_ = new ::enterprise_management::BooleanPolicyProto(*from.allowcrossoriginauthprompt_);
  } else {
    allowcrossoriginauthprompt_ = nullptr;
  }
  if (from.has_maxconnectionsperproxy()) {
    maxconnectionsperproxy_ = new ::enterprise_management::IntegerPolicyProto(*from.maxconnectionsperproxy_);
  } else {
    maxconnectionsperproxy_ = nullptr;
  }
  if (from.has_incognitomodeavailability()) {
    incognitomodeavailability_ = new ::enterprise_management::IntegerPolicyProto(*from.incognitomodeavailability_);
  } else {
    incognitomodeavailability_ = nullptr;
  }
  if (from.has_remoteaccesshostfirewalltraversal()) {
    remoteaccesshostfirewalltraversal_ = new ::enterprise_management::BooleanPolicyProto(*from.remoteaccesshostfirewalltraversal_);
  } else {
    remoteaccesshostfirewalltraversal_ = nullptr;
  }
  if (from.has_importbookmarks()) {
    importbookmarks_ = new ::enterprise_management::BooleanPolicyProto(*from.importbookmarks_);
  } else {
    importbookmarks_ = nullptr;
  }
  if (from.has_importhistory()) {
    importhistory_ = new ::enterprise_management::BooleanPolicyProto(*from.importhistory_);
  } else {
    importhistory_ = nullptr;
  }
  if (from.has_importhomepage()) {
    importhomepage_ = new ::enterprise_management::BooleanPolicyProto(*from.importhomepage_);
  } else {
    importhomepage_ = nullptr;
  }
  if (from.has_importsearchengine()) {
    importsearchengine_ = new ::enterprise_management::BooleanPolicyProto(*from.importsearchengine_);
  } else {
    importsearchengine_ = nullptr;
  }
  if (from.has_importsavedpasswords()) {
    importsavedpasswords_ = new ::enterprise_management::BooleanPolicyProto(*from.importsavedpasswords_);
  } else {
    importsavedpasswords_ = nullptr;
  }
  if (from.has_autoselectcertificateforurls()) {
    autoselectcertificateforurls_ = new ::enterprise_management::StringListPolicyProto(*from.autoselectcertificateforurls_);
  } else {
    autoselectcertificateforurls_ = nullptr;
  }
  if (from.has_urlblacklist()) {
    urlblacklist_ = new ::enterprise_management::StringListPolicyProto(*from.urlblacklist_);
  } else {
    urlblacklist_ = nullptr;
  }
  if (from.has_urlwhitelist()) {
    urlwhitelist_ = new ::enterprise_management::StringListPolicyProto(*from.urlwhitelist_);
  } else {
    urlwhitelist_ = nullptr;
  }
  if (from.has_notificationsallowedforurls()) {
    notificationsallowedforurls_ = new ::enterprise_management::StringListPolicyProto(*from.notificationsallowedforurls_);
  } else {
    notificationsallowedforurls_ = nullptr;
  }
  if (from.has_notificationsblockedforurls()) {
    notificationsblockedforurls_ = new ::enterprise_management::StringListPolicyProto(*from.notificationsblockedforurls_);
  } else {
    notificationsblockedforurls_ = nullptr;
  }
  if (from.has_cloudprintsubmitenabled()) {
    cloudprintsubmitenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.cloudprintsubmitenabled_);
  } else {
    cloudprintsubmitenabled_ = nullptr;
  }
  if (from.has_diskcachesize()) {
    diskcachesize_ = new ::enterprise_management::IntegerPolicyProto(*from.diskcachesize_);
  } else {
    diskcachesize_ = nullptr;
  }
  if (from.has_proxysettings()) {
    proxysettings_ = new ::enterprise_management::StringPolicyProto(*from.proxysettings_);
  } else {
    proxysettings_ = nullptr;
  }
  if (from.has_disableprintpreview()) {
    disableprintpreview_ = new ::enterprise_management::BooleanPolicyProto(*from.disableprintpreview_);
  } else {
    disableprintpreview_ = nullptr;
  }
  if (from.has_enableonlinerevocationchecks()) {
    enableonlinerevocationchecks_ = new ::enterprise_management::BooleanPolicyProto(*from.enableonlinerevocationchecks_);
  } else {
    enableonlinerevocationchecks_ = nullptr;
  }
  if (from.has_backgroundmodeenabled()) {
    backgroundmodeenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.backgroundmodeenabled_);
  } else {
    backgroundmodeenabled_ = nullptr;
  }
  if (from.has_restrictsignintopattern()) {
    restrictsignintopattern_ = new ::enterprise_management::StringPolicyProto(*from.restrictsignintopattern_);
  } else {
    restrictsignintopattern_ = nullptr;
  }
  if (from.has_extensioninstallsources()) {
    extensioninstallsources_ = new ::enterprise_management::StringListPolicyProto(*from.extensioninstallsources_);
  } else {
    extensioninstallsources_ = nullptr;
  }
  if (from.has_defaultmediastreamsetting()) {
    defaultmediastreamsetting_ = new ::enterprise_management::IntegerPolicyProto(*from.defaultmediastreamsetting_);
  } else {
    defaultmediastreamsetting_ = nullptr;
  }
  if (from.has_disablesafebrowsingproceedanyway()) {
    disablesafebrowsingproceedanyway_ = new ::enterprise_management::BooleanPolicyProto(*from.disablesafebrowsingproceedanyway_);
  } else {
    disablesafebrowsingproceedanyway_ = nullptr;
  }
  if (from.has_spellcheckserviceenabled()) {
    spellcheckserviceenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.spellcheckserviceenabled_);
  } else {
    spellcheckserviceenabled_ = nullptr;
  }
  if (from.has_disablescreenshots()) {
    disablescreenshots_ = new ::enterprise_management::BooleanPolicyProto(*from.disablescreenshots_);
  } else {
    disablescreenshots_ = nullptr;
  }
  if (from.has_remoteaccesshostdomain()) {
    remoteaccesshostdomain_ = new ::enterprise_management::StringPolicyProto(*from.remoteaccesshostdomain_);
  } else {
    remoteaccesshostdomain_ = nullptr;
  }
  if (from.has_remoteaccesshostrequirecurtain()) {
    remoteaccesshostrequirecurtain_ = new ::enterprise_management::BooleanPolicyProto(*from.remoteaccesshostrequirecurtain_);
  } else {
    remoteaccesshostrequirecurtain_ = nullptr;
  }
  if (from.has_audiocaptureallowed()) {
    audiocaptureallowed_ = new ::enterprise_management::BooleanPolicyProto(*from.audiocaptureallowed_);
  } else {
    audiocaptureallowed_ = nullptr;
  }
  if (from.has_defaultsearchprovideralternateurls()) {
    defaultsearchprovideralternateurls_ = new ::enterprise_management::StringListPolicyProto(*from.defaultsearchprovideralternateurls_);
  } else {
    defaultsearchprovideralternateurls_ = nullptr;
  }
  if (from.has_forcesafesearch()) {
    forcesafesearch_ = new ::enterprise_management::BooleanPolicyProto(*from.forcesafesearch_);
  } else {
    forcesafesearch_ = nullptr;
  }
  if (from.has_builtindnsclientenabled()) {
    builtindnsclientenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.builtindnsclientenabled_);
  } else {
    builtindnsclientenabled_ = nullptr;
  }
  if (from.has_videocaptureallowed()) {
    videocaptureallowed_ = new ::enterprise_management::BooleanPolicyProto(*from.videocaptureallowed_);
  } else {
    videocaptureallowed_ = nullptr;
  }
  if (from.has_extensionallowedtypes()) {
    extensionallowedtypes_ = new ::enterprise_management::StringListPolicyProto(*from.extensionallowedtypes_);
  } else {
    extensionallowedtypes_ = nullptr;
  }
  if (from.has_allowdeletingbrowserhistory()) {
    allowdeletingbrowserhistory_ = new ::enterprise_management::BooleanPolicyProto(*from.allowdeletingbrowserhistory_);
  } else {
    allowdeletingbrowserhistory_ = nullptr;
  }
  if (from.has_hidewebstoreicon()) {
    hidewebstoreicon_ = new ::enterprise_management::BooleanPolicyProto(*from.hidewebstoreicon_);
  } else {
    hidewebstoreicon_ = nullptr;
  }
  if (from.has_signinallowed()) {
    signinallowed_ = new ::enterprise_management::BooleanPolicyProto(*from.signinallowed_);
  } else {
    signinallowed_ = nullptr;
  }
  if (from.has_variationsrestrictparameter()) {
    variationsrestrictparameter_ = new ::enterprise_management::StringPolicyProto(*from.variationsrestrictparameter_);
  } else {
    variationsrestrictparameter_ = nullptr;
  }
  if (from.has_contentpackdefaultfilteringbehavior()) {
    contentpackdefaultfilteringbehavior_ = new ::enterprise_management::IntegerPolicyProto(*from.contentpackdefaultfilteringbehavior_);
  } else {
    contentpackdefaultfilteringbehavior_ = nullptr;
  }
  if (from.has_contentpackmanualbehaviorhosts()) {
    contentpackmanualbehaviorhosts_ = new ::enterprise_management::StringPolicyProto(*from.contentpackmanualbehaviorhosts_);
  } else {
    contentpackmanualbehaviorhosts_ = nullptr;
  }
  if (from.has_contentpackmanualbehaviorurls()) {
    contentpackmanualbehaviorurls_ = new ::enterprise_management::StringPolicyProto(*from.contentpackmanualbehaviorurls_);
  } else {
    contentpackmanualbehaviorurls_ = nullptr;
  }
  if (from.has_audiocaptureallowedurls()) {
    audiocaptureallowedurls_ = new ::enterprise_management::StringListPolicyProto(*from.audiocaptureallowedurls_);
  } else {
    audiocaptureallowedurls_ = nullptr;
  }
  if (from.has_videocaptureallowedurls()) {
    videocaptureallowedurls_ = new ::enterprise_management::StringListPolicyProto(*from.videocaptureallowedurls_);
  } else {
    videocaptureallowedurls_ = nullptr;
  }
  if (from.has_managedbookmarks()) {
    managedbookmarks_ = new ::enterprise_management::StringPolicyProto(*from.managedbookmarks_);
  } else {
    managedbookmarks_ = nullptr;
  }
  if (from.has_maxinvalidationfetchdelay()) {
    maxinvalidationfetchdelay_ = new ::enterprise_management::IntegerPolicyProto(*from.maxinvalidationfetchdelay_);
  } else {
    maxinvalidationfetchdelay_ = nullptr;
  }
  if (from.has_defaultsearchproviderimageurl()) {
    defaultsearchproviderimageurl_ = new ::enterprise_management::StringPolicyProto(*from.defaultsearchproviderimageurl_);
  } else {
    defaultsearchproviderimageurl_ = nullptr;
  }
  if (from.has_defaultsearchprovidersearchurlpostparams()) {
    defaultsearchprovidersearchurlpostparams_ = new ::enterprise_management::StringPolicyProto(*from.defaultsearchprovidersearchurlpostparams_);
  } else {
    defaultsearchprovidersearchurlpostparams_ = nullptr;
  }
  if (from.has_defaultsearchprovidersuggesturlpostparams()) {
    defaultsearchprovidersuggesturlpostparams_ = new ::enterprise_management::StringPolicyProto(*from.defaultsearchprovidersuggesturlpostparams_);
  } else {
    defaultsearchprovidersuggesturlpostparams_ = nullptr;
  }
  if (from.has_defaultsearchproviderimageurlpostparams()) {
    defaultsearchproviderimageurlpostparams_ = new ::enterprise_management::StringPolicyProto(*from.defaultsearchproviderimageurlpostparams_);
  } else {
    defaultsearchproviderimageurlpostparams_ = nullptr;
  }
  if (from.has_remoteaccesshostallowclientpairing()) {
    remoteaccesshostallowclientpairing_ = new ::enterprise_management::BooleanPolicyProto(*from.remoteaccesshostallowclientpairing_);
  } else {
    remoteaccesshostallowclientpairing_ = nullptr;
  }
  if (from.has_requireonlinerevocationchecksforlocalanchors()) {
    requireonlinerevocationchecksforlocalanchors_ = new ::enterprise_management::BooleanPolicyProto(*from.requireonlinerevocationchecksforlocalanchors_);
  } else {
    requireonlinerevocationchecksforlocalanchors_ = nullptr;
  }
  if (from.has_defaultsearchprovidernewtaburl()) {
    defaultsearchprovidernewtaburl_ = new ::enterprise_management::StringPolicyProto(*from.defaultsearchprovidernewtaburl_);
  } else {
    defaultsearchprovidernewtaburl_ = nullptr;
  }
  if (from.has_fullscreenallowed()) {
    fullscreenallowed_ = new ::enterprise_management::BooleanPolicyProto(*from.fullscreenallowed_);
  } else {
    fullscreenallowed_ = nullptr;
  }
  if (from.has_forceephemeralprofiles()) {
    forceephemeralprofiles_ = new ::enterprise_management::BooleanPolicyProto(*from.forceephemeralprofiles_);
  } else {
    forceephemeralprofiles_ = nullptr;
  }
  if (from.has_nativemessagingblacklist()) {
    nativemessagingblacklist_ = new ::enterprise_management::StringListPolicyProto(*from.nativemessagingblacklist_);
  } else {
    nativemessagingblacklist_ = nullptr;
  }
  if (from.has_nativemessagingwhitelist()) {
    nativemessagingwhitelist_ = new ::enterprise_management::StringListPolicyProto(*from.nativemessagingwhitelist_);
  } else {
    nativemessagingwhitelist_ = nullptr;
  }
  if (from.has_nativemessaginguserlevelhosts()) {
    nativemessaginguserlevelhosts_ = new ::enterprise_management::BooleanPolicyProto(*from.nativemessaginguserlevelhosts_);
  } else {
    nativemessaginguserlevelhosts_ = nullptr;
  }
  if (from.has_remoteaccesshostallowgnubbyauth()) {
    remoteaccesshostallowgnubbyauth_ = new ::enterprise_management::BooleanPolicyProto(*from.remoteaccesshostallowgnubbyauth_);
  } else {
    remoteaccesshostallowgnubbyauth_ = nullptr;
  }
  if (from.has_wpadquickcheckenabled()) {
    wpadquickcheckenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.wpadquickcheckenabled_);
  } else {
    wpadquickcheckenabled_ = nullptr;
  }
  if (from.has_remoteaccesshostallowrelayedconnection()) {
    remoteaccesshostallowrelayedconnection_ = new ::enterprise_management::BooleanPolicyProto(*from.remoteaccesshostallowrelayedconnection_);
  } else {
    remoteaccesshostallowrelayedconnection_ = nullptr;
  }
  if (from.has_remoteaccesshostudpportrange()) {
    remoteaccesshostudpportrange_ = new ::enterprise_management::StringPolicyProto(*from.remoteaccesshostudpportrange_);
  } else {
    remoteaccesshostudpportrange_ = nullptr;
  }
  if (from.has_showappsshortcutinbookmarkbar()) {
    showappsshortcutinbookmarkbar_ = new ::enterprise_management::BooleanPolicyProto(*from.showappsshortcutinbookmarkbar_);
  } else {
    showappsshortcutinbookmarkbar_ = nullptr;
  }
  if (from.has_registeredprotocolhandlers()) {
    registeredprotocolhandlers_ = new ::enterprise_management::StringPolicyProto(*from.registeredprotocolhandlers_);
  } else {
    registeredprotocolhandlers_ = nullptr;
  }
  if (from.has_enabledeprecatedwebplatformfeatures()) {
    enabledeprecatedwebplatformfeatures_ = new ::enterprise_management::StringListPolicyProto(*from.enabledeprecatedwebplatformfeatures_);
  } else {
    enabledeprecatedwebplatformfeatures_ = nullptr;
  }
  if (from.has_networkpredictionoptions()) {
    networkpredictionoptions_ = new ::enterprise_management::IntegerPolicyProto(*from.networkpredictionoptions_);
  } else {
    networkpredictionoptions_ = nullptr;
  }
  if (from.has_browserguestmodeenabled()) {
    browserguestmodeenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.browserguestmodeenabled_);
  } else {
    browserguestmodeenabled_ = nullptr;
  }
  if (from.has_browseraddpersonenabled()) {
    browseraddpersonenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.browseraddpersonenabled_);
  } else {
    browseraddpersonenabled_ = nullptr;
  }
  if (from.has_importautofillformdata()) {
    importautofillformdata_ = new ::enterprise_management::BooleanPolicyProto(*from.importautofillformdata_);
  } else {
    importautofillformdata_ = nullptr;
  }
  if (from.has_extensionsettings()) {
    extensionsettings_ = new ::enterprise_management::StringPolicyProto(*from.extensionsettings_);
  } else {
    extensionsettings_ = nullptr;
  }
  if (from.has_sslversionmin()) {
    sslversionmin_ = new ::enterprise_management::StringPolicyProto(*from.sslversionmin_);
  } else {
    sslversionmin_ = nullptr;
  }
  if (from.has_forcegooglesafesearch()) {
    forcegooglesafesearch_ = new ::enterprise_management::BooleanPolicyProto(*from.forcegooglesafesearch_);
  } else {
    forcegooglesafesearch_ = nullptr;
  }
  if (from.has_forceyoutubesafetymode()) {
    forceyoutubesafetymode_ = new ::enterprise_management::BooleanPolicyProto(*from.forceyoutubesafetymode_);
  } else {
    forceyoutubesafetymode_ = nullptr;
  }
  if (from.has_remoteaccesshostmatchusername()) {
    remoteaccesshostmatchusername_ = new ::enterprise_management::BooleanPolicyProto(*from.remoteaccesshostmatchusername_);
  } else {
    remoteaccesshostmatchusername_ = nullptr;
  }
  if (from.has_remoteaccesshosttokenurl()) {
    remoteaccesshosttokenurl_ = new ::enterprise_management::StringPolicyProto(*from.remoteaccesshosttokenurl_);
  } else {
    remoteaccesshosttokenurl_ = nullptr;
  }
  if (from.has_remoteaccesshosttokenvalidationurl()) {
    remoteaccesshosttokenvalidationurl_ = new ::enterprise_management::StringPolicyProto(*from.remoteaccesshosttokenvalidationurl_);
  } else {
    remoteaccesshosttokenvalidationurl_ = nullptr;
  }
  if (from.has_remoteaccesshosttokenvalidationcertificateissuer()) {
    remoteaccesshosttokenvalidationcertificateissuer_ = new ::enterprise_management::StringPolicyProto(*from.remoteaccesshosttokenvalidationcertificateissuer_);
  } else {
    remoteaccesshosttokenvalidationcertificateissuer_ = nullptr;
  }
  if (from.has_sslerroroverrideallowed()) {
    sslerroroverrideallowed_ = new ::enterprise_management::BooleanPolicyProto(*from.sslerroroverrideallowed_);
  } else {
    sslerroroverrideallowed_ = nullptr;
  }
  if (from.has_quicallowed()) {
    quicallowed_ = new ::enterprise_management::BooleanPolicyProto(*from.quicallowed_);
  } else {
    quicallowed_ = nullptr;
  }
  if (from.has_hardwareaccelerationmodeenabled()) {
    hardwareaccelerationmodeenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.hardwareaccelerationmodeenabled_);
  } else {
    hardwareaccelerationmodeenabled_ = nullptr;
  }
  if (from.has_defaultprinterselection()) {
    defaultprinterselection_ = new ::enterprise_management::StringPolicyProto(*from.defaultprinterselection_);
  } else {
    defaultprinterselection_ = nullptr;
  }
  if (from.has_allowdinosaureasteregg()) {
    allowdinosaureasteregg_ = new ::enterprise_management::BooleanPolicyProto(*from.allowdinosaureasteregg_);
  } else {
    allowdinosaureasteregg_ = nullptr;
  }
  if (from.has_remoteaccesshostclientdomain()) {
    remoteaccesshostclientdomain_ = new ::enterprise_management::StringPolicyProto(*from.remoteaccesshostclientdomain_);
  } else {
    remoteaccesshostclientdomain_ = nullptr;
  }
  if (from.has_defaultwebbluetoothguardsetting()) {
    defaultwebbluetoothguardsetting_ = new ::enterprise_management::IntegerPolicyProto(*from.defaultwebbluetoothguardsetting_);
  } else {
    defaultwebbluetoothguardsetting_ = nullptr;
  }
  if (from.has_suppressunsupportedoswarning()) {
    suppressunsupportedoswarning_ = new ::enterprise_management::BooleanPolicyProto(*from.suppressunsupportedoswarning_);
  } else {
    suppressunsupportedoswarning_ = nullptr;
  }
  if (from.has_taskmanagerendprocessenabled()) {
    taskmanagerendprocessenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.taskmanagerendprocessenabled_);
  } else {
    taskmanagerendprocessenabled_ = nullptr;
  }
  if (from.has_alloweddomainsforapps()) {
    alloweddomainsforapps_ = new ::enterprise_management::StringPolicyProto(*from.alloweddomainsforapps_);
  } else {
    alloweddomainsforapps_ = nullptr;
  }
  if (from.has_enablemediarouter()) {
    enablemediarouter_ = new ::enterprise_management::BooleanPolicyProto(*from.enablemediarouter_);
  } else {
    enablemediarouter_ = nullptr;
  }
  if (from.has_certificatetransparencyenforcementdisabledforurls()) {
    certificatetransparencyenforcementdisabledforurls_ = new ::enterprise_management::StringListPolicyProto(*from.certificatetransparencyenforcementdisabledforurls_);
  } else {
    certificatetransparencyenforcementdisabledforurls_ = nullptr;
  }
  if (from.has_webrtcudpportrange()) {
    webrtcudpportrange_ = new ::enterprise_management::StringPolicyProto(*from.webrtcudpportrange_);
  } else {
    webrtcudpportrange_ = nullptr;
  }
  if (from.has_componentupdatesenabled()) {
    componentupdatesenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.componentupdatesenabled_);
  } else {
    componentupdatesenabled_ = nullptr;
  }
  if (from.has_alwaysopenpdfexternally()) {
    alwaysopenpdfexternally_ = new ::enterprise_management::BooleanPolicyProto(*from.alwaysopenpdfexternally_);
  } else {
    alwaysopenpdfexternally_ = nullptr;
  }
  if (from.has_forceyoutuberestrict()) {
    forceyoutuberestrict_ = new ::enterprise_management::IntegerPolicyProto(*from.forceyoutuberestrict_);
  } else {
    forceyoutuberestrict_ = nullptr;
  }
  if (from.has_newtabpagelocation()) {
    newtabpagelocation_ = new ::enterprise_management::StringPolicyProto(*from.newtabpagelocation_);
  } else {
    newtabpagelocation_ = nullptr;
  }
  if (from.has_showcasticonintoolbar()) {
    showcasticonintoolbar_ = new ::enterprise_management::BooleanPolicyProto(*from.showcasticonintoolbar_);
  } else {
    showcasticonintoolbar_ = nullptr;
  }
  if (from.has_remoteaccesshostdomainlist()) {
    remoteaccesshostdomainlist_ = new ::enterprise_management::StringListPolicyProto(*from.remoteaccesshostdomainlist_);
  } else {
    remoteaccesshostdomainlist_ = nullptr;
  }
  if (from.has_remoteaccesshostclientdomainlist()) {
    remoteaccesshostclientdomainlist_ = new ::enterprise_management::StringListPolicyProto(*from.remoteaccesshostclientdomainlist_);
  } else {
    remoteaccesshostclientdomainlist_ = nullptr;
  }
  if (from.has_browsernetworktimequeriesenabled()) {
    browsernetworktimequeriesenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.browsernetworktimequeriesenabled_);
  } else {
    browsernetworktimequeriesenabled_ = nullptr;
  }
  if (from.has_downloadrestrictions()) {
    downloadrestrictions_ = new ::enterprise_management::IntegerPolicyProto(*from.downloadrestrictions_);
  } else {
    downloadrestrictions_ = nullptr;
  }
  if (from.has_printpreviewusesystemdefaultprinter()) {
    printpreviewusesystemdefaultprinter_ = new ::enterprise_management::BooleanPolicyProto(*from.printpreviewusesystemdefaultprinter_);
  } else {
    printpreviewusesystemdefaultprinter_ = nullptr;
  }
  if (from.has_cloudpolicyoverridesplatformpolicy()) {
    cloudpolicyoverridesplatformpolicy_ = new ::enterprise_management::BooleanPolicyProto(*from.cloudpolicyoverridesplatformpolicy_);
  } else {
    cloudpolicyoverridesplatformpolicy_ = nullptr;
  }
  if (from.has_runallflashinallowmode()) {
    runallflashinallowmode_ = new ::enterprise_management::BooleanPolicyProto(*from.runallflashinallowmode_);
  } else {
    runallflashinallowmode_ = nullptr;
  }
  if (from.has_autofillcreditcardenabled()) {
    autofillcreditcardenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.autofillcreditcardenabled_);
  } else {
    autofillcreditcardenabled_ = nullptr;
  }
  if (from.has_ntlmv2enabled()) {
    ntlmv2enabled_ = new ::enterprise_management::BooleanPolicyProto(*from.ntlmv2enabled_);
  } else {
    ntlmv2enabled_ = nullptr;
  }
  if (from.has_promptfordownloadlocation()) {
    promptfordownloadlocation_ = new ::enterprise_management::BooleanPolicyProto(*from.promptfordownloadlocation_);
  } else {
    promptfordownloadlocation_ = nullptr;
  }
  if (from.has_isolateorigins()) {
    isolateorigins_ = new ::enterprise_management::StringPolicyProto(*from.isolateorigins_);
  } else {
    isolateorigins_ = nullptr;
  }
  if (from.has_siteperprocess()) {
    siteperprocess_ = new ::enterprise_management::BooleanPolicyProto(*from.siteperprocess_);
  } else {
    siteperprocess_ = nullptr;
  }
  if (from.has_unsafelytreatinsecureoriginassecure()) {
    unsafelytreatinsecureoriginassecure_ = new ::enterprise_management::StringListPolicyProto(*from.unsafelytreatinsecureoriginassecure_);
  } else {
    unsafelytreatinsecureoriginassecure_ = nullptr;
  }
  if (from.has_defaultdownloaddirectory()) {
    defaultdownloaddirectory_ = new ::enterprise_management::StringPolicyProto(*from.defaultdownloaddirectory_);
  } else {
    defaultdownloaddirectory_ = nullptr;
  }
  if (from.has_securitykeypermitattestation()) {
    securitykeypermitattestation_ = new ::enterprise_management::StringListPolicyProto(*from.securitykeypermitattestation_);
  } else {
    securitykeypermitattestation_ = nullptr;
  }
  if (from.has_abusiveexperienceinterventionenforce()) {
    abusiveexperienceinterventionenforce_ = new ::enterprise_management::BooleanPolicyProto(*from.abusiveexperienceinterventionenforce_);
  } else {
    abusiveexperienceinterventionenforce_ = nullptr;
  }
  if (from.has_spellchecklanguage()) {
    spellchecklanguage_ = new ::enterprise_management::StringListPolicyProto(*from.spellchecklanguage_);
  } else {
    spellchecklanguage_ = nullptr;
  }
  if (from.has_spellcheckenabled()) {
    spellcheckenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.spellcheckenabled_);
  } else {
    spellcheckenabled_ = nullptr;
  }
  if (from.has_adssettingforintrusiveadssites()) {
    adssettingforintrusiveadssites_ = new ::enterprise_management::IntegerPolicyProto(*from.adssettingforintrusiveadssites_);
  } else {
    adssettingforintrusiveadssites_ = nullptr;
  }
  if (from.has_passwordprotectionwarningtrigger()) {
    passwordprotectionwarningtrigger_ = new ::enterprise_management::IntegerPolicyProto(*from.passwordprotectionwarningtrigger_);
  } else {
    passwordprotectionwarningtrigger_ = nullptr;
  }
  if (from.has_relaunchnotification()) {
    relaunchnotification_ = new ::enterprise_management::IntegerPolicyProto(*from.relaunchnotification_);
  } else {
    relaunchnotification_ = nullptr;
  }
  if (from.has_relaunchnotificationperiod()) {
    relaunchnotificationperiod_ = new ::enterprise_management::IntegerPolicyProto(*from.relaunchnotificationperiod_);
  } else {
    relaunchnotificationperiod_ = nullptr;
  }
  if (from.has_safebrowsingwhitelistdomains()) {
    safebrowsingwhitelistdomains_ = new ::enterprise_management::StringListPolicyProto(*from.safebrowsingwhitelistdomains_);
  } else {
    safebrowsingwhitelistdomains_ = nullptr;
  }
  if (from.has_passwordprotectionloginurls()) {
    passwordprotectionloginurls_ = new ::enterprise_management::StringListPolicyProto(*from.passwordprotectionloginurls_);
  } else {
    passwordprotectionloginurls_ = nullptr;
  }
  if (from.has_passwordprotectionchangepasswordurl()) {
    passwordprotectionchangepasswordurl_ = new ::enterprise_management::StringPolicyProto(*from.passwordprotectionchangepasswordurl_);
  } else {
    passwordprotectionchangepasswordurl_ = nullptr;
  }
  if (from.has_safebrowsingextendedreportingenabled()) {
    safebrowsingextendedreportingenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.safebrowsingextendedreportingenabled_);
  } else {
    safebrowsingextendedreportingenabled_ = nullptr;
  }
  if (from.has_autoplayallowed()) {
    autoplayallowed_ = new ::enterprise_management::BooleanPolicyProto(*from.autoplayallowed_);
  } else {
    autoplayallowed_ = nullptr;
  }
  if (from.has_autoplaywhitelist()) {
    autoplaywhitelist_ = new ::enterprise_management::StringListPolicyProto(*from.autoplaywhitelist_);
  } else {
    autoplaywhitelist_ = nullptr;
  }
  if (from.has_defaultwebusbguardsetting()) {
    defaultwebusbguardsetting_ = new ::enterprise_management::IntegerPolicyProto(*from.defaultwebusbguardsetting_);
  } else {
    defaultwebusbguardsetting_ = nullptr;
  }
  if (from.has_certificatetransparencyenforcementdisabledforcas()) {
    certificatetransparencyenforcementdisabledforcas_ = new ::enterprise_management::StringListPolicyProto(*from.certificatetransparencyenforcementdisabledforcas_);
  } else {
    certificatetransparencyenforcementdisabledforcas_ = nullptr;
  }
  if (from.has_certificatetransparencyenforcementdisabledforlegacycas()) {
    certificatetransparencyenforcementdisabledforlegacycas_ = new ::enterprise_management::StringListPolicyProto(*from.certificatetransparencyenforcementdisabledforlegacycas_);
  } else {
    certificatetransparencyenforcementdisabledforlegacycas_ = nullptr;
  }
  if (from.has_mediaroutercastallowallips()) {
    mediaroutercastallowallips_ = new ::enterprise_management::BooleanPolicyProto(*from.mediaroutercastallowallips_);
  } else {
    mediaroutercastallowallips_ = nullptr;
  }
  if (from.has_webusbaskforurls()) {
    webusbaskforurls_ = new ::enterprise_management::StringListPolicyProto(*from.webusbaskforurls_);
  } else {
    webusbaskforurls_ = nullptr;
  }
  if (from.has_webusbblockedforurls()) {
    webusbblockedforurls_ = new ::enterprise_management::StringListPolicyProto(*from.webusbblockedforurls_);
  } else {
    webusbblockedforurls_ = nullptr;
  }
  if (from.has_developertoolsavailability()) {
    developertoolsavailability_ = new ::enterprise_management::IntegerPolicyProto(*from.developertoolsavailability_);
  } else {
    developertoolsavailability_ = nullptr;
  }
  if (from.has_promotionaltabsenabled()) {
    promotionaltabsenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.promotionaltabsenabled_);
  } else {
    promotionaltabsenabled_ = nullptr;
  }
  if (from.has_safesitesfilterbehavior()) {
    safesitesfilterbehavior_ = new ::enterprise_management::IntegerPolicyProto(*from.safesitesfilterbehavior_);
  } else {
    safesitesfilterbehavior_ = nullptr;
  }
  if (from.has_overridesecurityrestrictionsoninsecureorigin()) {
    overridesecurityrestrictionsoninsecureorigin_ = new ::enterprise_management::StringListPolicyProto(*from.overridesecurityrestrictionsoninsecureorigin_);
  } else {
    overridesecurityrestrictionsoninsecureorigin_ = nullptr;
  }
  if (from.has_autofilladdressenabled()) {
    autofilladdressenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.autofilladdressenabled_);
  } else {
    autofilladdressenabled_ = nullptr;
  }
  if (from.has_urlkeyedanonymizeddatacollectionenabled()) {
    urlkeyedanonymizeddatacollectionenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.urlkeyedanonymizeddatacollectionenabled_);
  } else {
    urlkeyedanonymizeddatacollectionenabled_ = nullptr;
  }
  if (from.has_webrtceventlogcollectionallowed()) {
    webrtceventlogcollectionallowed_ = new ::enterprise_management::BooleanPolicyProto(*from.webrtceventlogcollectionallowed_);
  } else {
    webrtceventlogcollectionallowed_ = nullptr;
  }
  if (from.has_coalesceh2connectionswithclientcertificatesforhosts()) {
    coalesceh2connectionswithclientcertificatesforhosts_ = new ::enterprise_management::StringListPolicyProto(*from.coalesceh2connectionswithclientcertificatesforhosts_);
  } else {
    coalesceh2connectionswithclientcertificatesforhosts_ = nullptr;
  }
  if (from.has_webappinstallforcelist()) {
    webappinstallforcelist_ = new ::enterprise_management::StringPolicyProto(*from.webappinstallforcelist_);
  } else {
    webappinstallforcelist_ = nullptr;
  }
  if (from.has_reportversiondata()) {
    reportversiondata_ = new ::enterprise_management::BooleanPolicyProto(*from.reportversiondata_);
  } else {
    reportversiondata_ = nullptr;
  }
  if (from.has_reportpolicydata()) {
    reportpolicydata_ = new ::enterprise_management::BooleanPolicyProto(*from.reportpolicydata_);
  } else {
    reportpolicydata_ = nullptr;
  }
  if (from.has_reportmachineiddata()) {
    reportmachineiddata_ = new ::enterprise_management::BooleanPolicyProto(*from.reportmachineiddata_);
  } else {
    reportmachineiddata_ = nullptr;
  }
  if (from.has_reportuseriddata()) {
    reportuseriddata_ = new ::enterprise_management::BooleanPolicyProto(*from.reportuseriddata_);
  } else {
    reportuseriddata_ = nullptr;
  }
  if (from.has_printingpapersizedefault()) {
    printingpapersizedefault_ = new ::enterprise_management::StringPolicyProto(*from.printingpapersizedefault_);
  } else {
    printingpapersizedefault_ = nullptr;
  }
  if (from.has_printheaderfooter()) {
    printheaderfooter_ = new ::enterprise_management::BooleanPolicyProto(*from.printheaderfooter_);
  } else {
    printheaderfooter_ = nullptr;
  }
  if (from.has_enterprisehardwareplatformapienabled()) {
    enterprisehardwareplatformapienabled_ = new ::enterprise_management::BooleanPolicyProto(*from.enterprisehardwareplatformapienabled_);
  } else {
    enterprisehardwareplatformapienabled_ = nullptr;
  }
  if (from.has_webusballowdevicesforurls()) {
    webusballowdevicesforurls_ = new ::enterprise_management::StringPolicyProto(*from.webusballowdevicesforurls_);
  } else {
    webusballowdevicesforurls_ = nullptr;
  }
  if (from.has_browsersignin()) {
    browsersignin_ = new ::enterprise_management::IntegerPolicyProto(*from.browsersignin_);
  } else {
    browsersignin_ = nullptr;
  }
  if (from.has_cloudreportingenabled()) {
    cloudreportingenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.cloudreportingenabled_);
  } else {
    cloudreportingenabled_ = nullptr;
  }
  if (from.has_alternativebrowserpath()) {
    alternativebrowserpath_ = new ::enterprise_management::StringPolicyProto(*from.alternativebrowserpath_);
  } else {
    alternativebrowserpath_ = nullptr;
  }
  if (from.has_alternativebrowserparameters()) {
    alternativebrowserparameters_ = new ::enterprise_management::StringListPolicyProto(*from.alternativebrowserparameters_);
  } else {
    alternativebrowserparameters_ = nullptr;
  }
  if (from.has_browserswitcherurllist()) {
    browserswitcherurllist_ = new ::enterprise_management::StringListPolicyProto(*from.browserswitcherurllist_);
  } else {
    browserswitcherurllist_ = nullptr;
  }
  if (from.has_browserswitcherurlgreylist()) {
    browserswitcherurlgreylist_ = new ::enterprise_management::StringListPolicyProto(*from.browserswitcherurlgreylist_);
  } else {
    browserswitcherurlgreylist_ = nullptr;
  }
  if (from.has_reportextensionsandpluginsdata()) {
    reportextensionsandpluginsdata_ = new ::enterprise_management::BooleanPolicyProto(*from.reportextensionsandpluginsdata_);
  } else {
    reportextensionsandpluginsdata_ = nullptr;
  }
  if (from.has_cloudmanagementenrollmentmandatory()) {
    cloudmanagementenrollmentmandatory_ = new ::enterprise_management::BooleanPolicyProto(*from.cloudmanagementenrollmentmandatory_);
  } else {
    cloudmanagementenrollmentmandatory_ = nullptr;
  }
  if (from.has_cloudmanagementenrollmenttoken()) {
    cloudmanagementenrollmenttoken_ = new ::enterprise_management::StringPolicyProto(*from.cloudmanagementenrollmenttoken_);
  } else {
    cloudmanagementenrollmenttoken_ = nullptr;
  }
  if (from.has_browserswitcherexternalsitelisturl()) {
    browserswitcherexternalsitelisturl_ = new ::enterprise_management::StringPolicyProto(*from.browserswitcherexternalsitelisturl_);
  } else {
    browserswitcherexternalsitelisturl_ = nullptr;
  }
  if (from.has_browserswitcherenabled()) {
    browserswitcherenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.browserswitcherenabled_);
  } else {
    browserswitcherenabled_ = nullptr;
  }
  if (from.has_browserswitcherkeeplastchrometab()) {
    browserswitcherkeeplastchrometab_ = new ::enterprise_management::BooleanPolicyProto(*from.browserswitcherkeeplastchrometab_);
  } else {
    browserswitcherkeeplastchrometab_ = nullptr;
  }
  if (from.has_browserswitcherdelay()) {
    browserswitcherdelay_ = new ::enterprise_management::IntegerPolicyProto(*from.browserswitcherdelay_);
  } else {
    browserswitcherdelay_ = nullptr;
  }
  if (from.has_authnegotiatedelegatebykdcpolicy()) {
    authnegotiatedelegatebykdcpolicy_ = new ::enterprise_management::BooleanPolicyProto(*from.authnegotiatedelegatebykdcpolicy_);
  } else {
    authnegotiatedelegatebykdcpolicy_ = nullptr;
  }
  if (from.has_allowpopupsduringpageunload()) {
    allowpopupsduringpageunload_ = new ::enterprise_management::BooleanPolicyProto(*from.allowpopupsduringpageunload_);
  } else {
    allowpopupsduringpageunload_ = nullptr;
  }
  if (from.has_remoteaccesshostallowfiletransfer()) {
    remoteaccesshostallowfiletransfer_ = new ::enterprise_management::BooleanPolicyProto(*from.remoteaccesshostallowfiletransfer_);
  } else {
    remoteaccesshostallowfiletransfer_ = nullptr;
  }
  if (from.has_spellchecklanguageblacklist()) {
    spellchecklanguageblacklist_ = new ::enterprise_management::StringListPolicyProto(*from.spellchecklanguageblacklist_);
  } else {
    spellchecklanguageblacklist_ = nullptr;
  }
  if (from.has_signedhttpexchangeenabled()) {
    signedhttpexchangeenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.signedhttpexchangeenabled_);
  } else {
    signedhttpexchangeenabled_ = nullptr;
  }
  if (from.has_extensioninstalllistsmergeenabled()) {
    extensioninstalllistsmergeenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.extensioninstalllistsmergeenabled_);
  } else {
    extensioninstalllistsmergeenabled_ = nullptr;
  }
  if (from.has_policylistmultiplesourcemergelist()) {
    policylistmultiplesourcemergelist_ = new ::enterprise_management::StringListPolicyProto(*from.policylistmultiplesourcemergelist_);
  } else {
    policylistmultiplesourcemergelist_ = nullptr;
  }
  if (from.has_browserswitcherexternalgreylisturl()) {
    browserswitcherexternalgreylisturl_ = new ::enterprise_management::StringPolicyProto(*from.browserswitcherexternalgreylisturl_);
  } else {
    browserswitcherexternalgreylisturl_ = nullptr;
  }
  if (from.has_policydictionarymultiplesourcemergelist()) {
    policydictionarymultiplesourcemergelist_ = new ::enterprise_management::StringListPolicyProto(*from.policydictionarymultiplesourcemergelist_);
  } else {
    policydictionarymultiplesourcemergelist_ = nullptr;
  }
  if (from.has_commandlineflagsecuritywarningsenabled()) {
    commandlineflagsecuritywarningsenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.commandlineflagsecuritywarningsenabled_);
  } else {
    commandlineflagsecuritywarningsenabled_ = nullptr;
  }
  if (from.has_userfeedbackallowed()) {
    userfeedbackallowed_ = new ::enterprise_management::BooleanPolicyProto(*from.userfeedbackallowed_);
  } else {
    userfeedbackallowed_ = nullptr;
  }
  if (from.has_browserguestmodeenforced()) {
    browserguestmodeenforced_ = new ::enterprise_management::BooleanPolicyProto(*from.browserguestmodeenforced_);
  } else {
    browserguestmodeenforced_ = nullptr;
  }
  if (from.has_passwordleakdetectionenabled()) {
    passwordleakdetectionenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.passwordleakdetectionenabled_);
  } else {
    passwordleakdetectionenabled_ = nullptr;
  }
  if (from.has_dnsoverhttpsmode()) {
    dnsoverhttpsmode_ = new ::enterprise_management::StringPolicyProto(*from.dnsoverhttpsmode_);
  } else {
    dnsoverhttpsmode_ = nullptr;
  }
  if (from.has_sendfilesformalwarecheck()) {
    sendfilesformalwarecheck_ = new ::enterprise_management::IntegerPolicyProto(*from.sendfilesformalwarecheck_);
  } else {
    sendfilesformalwarecheck_ = nullptr;
  }
  if (from.has_policyatomicgroupsenabled()) {
    policyatomicgroupsenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.policyatomicgroupsenabled_);
  } else {
    policyatomicgroupsenabled_ = nullptr;
  }
  if (from.has_unsafeeventsreportingenabled()) {
    unsafeeventsreportingenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.unsafeeventsreportingenabled_);
  } else {
    unsafeeventsreportingenabled_ = nullptr;
  }
  if (from.has_blocklargefiletransfer()) {
    blocklargefiletransfer_ = new ::enterprise_management::IntegerPolicyProto(*from.blocklargefiletransfer_);
  } else {
    blocklargefiletransfer_ = nullptr;
  }
  if (from.has_delaydeliveryuntilverdict()) {
    delaydeliveryuntilverdict_ = new ::enterprise_management::IntegerPolicyProto(*from.delaydeliveryuntilverdict_);
  } else {
    delaydeliveryuntilverdict_ = nullptr;
  }
  if (from.has_allowpasswordprotectedfiles()) {
    allowpasswordprotectedfiles_ = new ::enterprise_management::IntegerPolicyProto(*from.allowpasswordprotectedfiles_);
  } else {
    allowpasswordprotectedfiles_ = nullptr;
  }
  if (from.has_checkcontentcompliance()) {
    checkcontentcompliance_ = new ::enterprise_management::IntegerPolicyProto(*from.checkcontentcompliance_);
  } else {
    checkcontentcompliance_ = nullptr;
  }
  if (from.has_urlstocheckcomplianceofdownloadedcontent()) {
    urlstocheckcomplianceofdownloadedcontent_ = new ::enterprise_management::StringListPolicyProto(*from.urlstocheckcomplianceofdownloadedcontent_);
  } else {
    urlstocheckcomplianceofdownloadedcontent_ = nullptr;
  }
  if (from.has_urlstonotcheckcomplianceofuploadedcontent()) {
    urlstonotcheckcomplianceofuploadedcontent_ = new ::enterprise_management::StringListPolicyProto(*from.urlstonotcheckcomplianceofuploadedcontent_);
  } else {
    urlstonotcheckcomplianceofuploadedcontent_ = nullptr;
  }
  if (from.has_urlstocheckformalwareofuploadedcontent()) {
    urlstocheckformalwareofuploadedcontent_ = new ::enterprise_management::StringListPolicyProto(*from.urlstocheckformalwareofuploadedcontent_);
  } else {
    urlstocheckformalwareofuploadedcontent_ = nullptr;
  }
  if (from.has_hstspolicybypasslist()) {
    hstspolicybypasslist_ = new ::enterprise_management::StringListPolicyProto(*from.hstspolicybypasslist_);
  } else {
    hstspolicybypasslist_ = nullptr;
  }
  if (from.has_allowsyncxhrinpagedismissal()) {
    allowsyncxhrinpagedismissal_ = new ::enterprise_management::BooleanPolicyProto(*from.allowsyncxhrinpagedismissal_);
  } else {
    allowsyncxhrinpagedismissal_ = nullptr;
  }
  if (from.has_cloudextensionrequestenabled()) {
    cloudextensionrequestenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.cloudextensionrequestenabled_);
  } else {
    cloudextensionrequestenabled_ = nullptr;
  }
  if (from.has_sharedclipboardenabled()) {
    sharedclipboardenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.sharedclipboardenabled_);
  } else {
    sharedclipboardenabled_ = nullptr;
  }
  if (from.has_printingallowedbackgroundgraphicsmodes()) {
    printingallowedbackgroundgraphicsmodes_ = new ::enterprise_management::StringPolicyProto(*from.printingallowedbackgroundgraphicsmodes_);
  } else {
    printingallowedbackgroundgraphicsmodes_ = nullptr;
  }
  if (from.has_printingbackgroundgraphicsdefault()) {
    printingbackgroundgraphicsdefault_ = new ::enterprise_management::StringPolicyProto(*from.printingbackgroundgraphicsdefault_);
  } else {
    printingbackgroundgraphicsdefault_ = nullptr;
  }
  if (from.has_legacysamesitecookiebehaviorenabled()) {
    legacysamesitecookiebehaviorenabled_ = new ::enterprise_management::IntegerPolicyProto(*from.legacysamesitecookiebehaviorenabled_);
  } else {
    legacysamesitecookiebehaviorenabled_ = nullptr;
  }
  if (from.has_legacysamesitecookiebehaviorenabledfordomainlist()) {
    legacysamesitecookiebehaviorenabledfordomainlist_ = new ::enterprise_management::StringListPolicyProto(*from.legacysamesitecookiebehaviorenabledfordomainlist_);
  } else {
    legacysamesitecookiebehaviorenabledfordomainlist_ = nullptr;
  }
  if (from.has_tls13hardeningforlocalanchorsenabled()) {
    tls13hardeningforlocalanchorsenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.tls13hardeningforlocalanchorsenabled_);
  } else {
    tls13hardeningforlocalanchorsenabled_ = nullptr;
  }
  if (from.has_audiosandboxenabled()) {
    audiosandboxenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.audiosandboxenabled_);
  } else {
    audiosandboxenabled_ = nullptr;
  }
  if (from.has_corsmitigationlist()) {
    corsmitigationlist_ = new ::enterprise_management::StringListPolicyProto(*from.corsmitigationlist_);
  } else {
    corsmitigationlist_ = nullptr;
  }
  if (from.has_corslegacymodeenabled()) {
    corslegacymodeenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.corslegacymodeenabled_);
  } else {
    corslegacymodeenabled_ = nullptr;
  }
  if (from.has_externalprotocoldialogshowalwaysopencheckbox()) {
    externalprotocoldialogshowalwaysopencheckbox_ = new ::enterprise_management::BooleanPolicyProto(*from.externalprotocoldialogshowalwaysopencheckbox_);
  } else {
    externalprotocoldialogshowalwaysopencheckbox_ = nullptr;
  }
  if (from.has_defaultinsecurecontentsetting()) {
    defaultinsecurecontentsetting_ = new ::enterprise_management::IntegerPolicyProto(*from.defaultinsecurecontentsetting_);
  } else {
    defaultinsecurecontentsetting_ = nullptr;
  }
  if (from.has_insecurecontentallowedforurls()) {
    insecurecontentallowedforurls_ = new ::enterprise_management::StringListPolicyProto(*from.insecurecontentallowedforurls_);
  } else {
    insecurecontentallowedforurls_ = nullptr;
  }
  if (from.has_insecurecontentblockedforurls()) {
    insecurecontentblockedforurls_ = new ::enterprise_management::StringListPolicyProto(*from.insecurecontentblockedforurls_);
  } else {
    insecurecontentblockedforurls_ = nullptr;
  }
  if (from.has_blockexternalextensions()) {
    blockexternalextensions_ = new ::enterprise_management::BooleanPolicyProto(*from.blockexternalextensions_);
  } else {
    blockexternalextensions_ = nullptr;
  }
  if (from.has_webrtclocalipsallowedurls()) {
    webrtclocalipsallowedurls_ = new ::enterprise_management::StringListPolicyProto(*from.webrtclocalipsallowedurls_);
  } else {
    webrtclocalipsallowedurls_ = nullptr;
  }
  if (from.has_dnsoverhttpstemplates()) {
    dnsoverhttpstemplates_ = new ::enterprise_management::StringPolicyProto(*from.dnsoverhttpstemplates_);
  } else {
    dnsoverhttpstemplates_ = nullptr;
  }
  if (from.has_globallyscopehttpauthcacheenabled()) {
    globallyscopehttpauthcacheenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.globallyscopehttpauthcacheenabled_);
  } else {
    globallyscopehttpauthcacheenabled_ = nullptr;
  }
  if (from.has_clicktocallenabled()) {
    clicktocallenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.clicktocallenabled_);
  } else {
    clicktocallenabled_ = nullptr;
  }
  if (from.has_printertypedenylist()) {
    printertypedenylist_ = new ::enterprise_management::StringListPolicyProto(*from.printertypedenylist_);
  } else {
    printertypedenylist_ = nullptr;
  }
  if (from.has_forcelegacydefaultreferrerpolicy()) {
    forcelegacydefaultreferrerpolicy_ = new ::enterprise_management::BooleanPolicyProto(*from.forcelegacydefaultreferrerpolicy_);
  } else {
    forcelegacydefaultreferrerpolicy_ = nullptr;
  }
  if (from.has_synctypeslistdisabled()) {
    synctypeslistdisabled_ = new ::enterprise_management::StringListPolicyProto(*from.synctypeslistdisabled_);
  } else {
    synctypeslistdisabled_ = nullptr;
  }
  if (from.has_ambientauthenticationinprivatemodesenabled()) {
    ambientauthenticationinprivatemodesenabled_ = new ::enterprise_management::IntegerPolicyProto(*from.ambientauthenticationinprivatemodesenabled_);
  } else {
    ambientauthenticationinprivatemodesenabled_ = nullptr;
  }
  if (from.has_paymentmethodqueryenabled()) {
    paymentmethodqueryenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.paymentmethodqueryenabled_);
  } else {
    paymentmethodqueryenabled_ = nullptr;
  }
  if (from.has_strictermixedcontenttreatmentenabled()) {
    strictermixedcontenttreatmentenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.strictermixedcontenttreatmentenabled_);
  } else {
    strictermixedcontenttreatmentenabled_ = nullptr;
  }
  if (from.has_ntpcustombackgroundenabled()) {
    ntpcustombackgroundenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.ntpcustombackgroundenabled_);
  } else {
    ntpcustombackgroundenabled_ = nullptr;
  }
  if (from.has_dnsinterceptionchecksenabled()) {
    dnsinterceptionchecksenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.dnsinterceptionchecksenabled_);
  } else {
    dnsinterceptionchecksenabled_ = nullptr;
  }
  if (from.has_localdiscoveryenabled()) {
    localdiscoveryenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.localdiscoveryenabled_);
  } else {
    localdiscoveryenabled_ = nullptr;
  }
  if (from.has_chromevariations()) {
    chromevariations_ = new ::enterprise_management::IntegerPolicyProto(*from.chromevariations_);
  } else {
    chromevariations_ = nullptr;
  }
  if (from.has_screencaptureallowed()) {
    screencaptureallowed_ = new ::enterprise_management::BooleanPolicyProto(*from.screencaptureallowed_);
  } else {
    screencaptureallowed_ = nullptr;
  }
  if (from.has_blockunsupportedfiletypes()) {
    blockunsupportedfiletypes_ = new ::enterprise_management::IntegerPolicyProto(*from.blockunsupportedfiletypes_);
  } else {
    blockunsupportedfiletypes_ = nullptr;
  }
  if (from.has_urlstonotcheckformalwareofdownloadedcontent()) {
    urlstonotcheckformalwareofdownloadedcontent_ = new ::enterprise_management::StringListPolicyProto(*from.urlstonotcheckformalwareofdownloadedcontent_);
  } else {
    urlstonotcheckformalwareofdownloadedcontent_ = nullptr;
  }
  if (from.has_userdatasnapshotretentionlimit()) {
    userdatasnapshotretentionlimit_ = new ::enterprise_management::IntegerPolicyProto(*from.userdatasnapshotretentionlimit_);
  } else {
    userdatasnapshotretentionlimit_ = nullptr;
  }
  if (from.has_allownativenotifications()) {
    allownativenotifications_ = new ::enterprise_management::BooleanPolicyProto(*from.allownativenotifications_);
  } else {
    allownativenotifications_ = nullptr;
  }
  if (from.has_safebrowsingprotectionlevel()) {
    safebrowsingprotectionlevel_ = new ::enterprise_management::IntegerPolicyProto(*from.safebrowsingprotectionlevel_);
  } else {
    safebrowsingprotectionlevel_ = nullptr;
  }
  if (from.has_advancedprotectionallowed()) {
    advancedprotectionallowed_ = new ::enterprise_management::BooleanPolicyProto(*from.advancedprotectionallowed_);
  } else {
    advancedprotectionallowed_ = nullptr;
  }
  if (from.has_scrolltotextfragmentenabled()) {
    scrolltotextfragmentenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.scrolltotextfragmentenabled_);
  } else {
    scrolltotextfragmentenabled_ = nullptr;
  }
  if (from.has_onfileattachedenterpriseconnector()) {
    onfileattachedenterpriseconnector_ = new ::enterprise_management::StringPolicyProto(*from.onfileattachedenterpriseconnector_);
  } else {
    onfileattachedenterpriseconnector_ = nullptr;
  }
  if (from.has_onfiledownloadedenterpriseconnector()) {
    onfiledownloadedenterpriseconnector_ = new ::enterprise_management::StringPolicyProto(*from.onfiledownloadedenterpriseconnector_);
  } else {
    onfiledownloadedenterpriseconnector_ = nullptr;
  }
  if (from.has_onbulkdataentryenterpriseconnector()) {
    onbulkdataentryenterpriseconnector_ = new ::enterprise_management::StringPolicyProto(*from.onbulkdataentryenterpriseconnector_);
  } else {
    onbulkdataentryenterpriseconnector_ = nullptr;
  }
  if (from.has_onsecurityevententerpriseconnector()) {
    onsecurityevententerpriseconnector_ = new ::enterprise_management::StringPolicyProto(*from.onsecurityevententerpriseconnector_);
  } else {
    onsecurityevententerpriseconnector_ = nullptr;
  }
  if (from.has_autoopenfiletypes()) {
    autoopenfiletypes_ = new ::enterprise_management::StringListPolicyProto(*from.autoopenfiletypes_);
  } else {
    autoopenfiletypes_ = nullptr;
  }
  if (from.has_accessibilityimagelabelsenabled()) {
    accessibilityimagelabelsenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.accessibilityimagelabelsenabled_);
  } else {
    accessibilityimagelabelsenabled_ = nullptr;
  }
  if (from.has_appcacheforceenabled()) {
    appcacheforceenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.appcacheforceenabled_);
  } else {
    appcacheforceenabled_ = nullptr;
  }
  if (from.has_autoopenallowedforurls()) {
    autoopenallowedforurls_ = new ::enterprise_management::StringListPolicyProto(*from.autoopenallowedforurls_);
  } else {
    autoopenallowedforurls_ = nullptr;
  }
  if (from.has_enableexperimentalpolicies()) {
    enableexperimentalpolicies_ = new ::enterprise_management::StringListPolicyProto(*from.enableexperimentalpolicies_);
  } else {
    enableexperimentalpolicies_ = nullptr;
  }
  if (from.has_intensivewakeupthrottlingenabled()) {
    intensivewakeupthrottlingenabled_ = new ::enterprise_management::BooleanPolicyProto(*from.intensivewakeupthrottlingenabled_);
  } else {
    intensivewakeupthrottlingenabled_ = nullptr;
  }
  if (from.has_defaultsearchprovidercontextmenuaccessallowed()) {
    defaultsearchprovidercontextmenuaccessallowed_ = new ::enterprise_management::BooleanPolicyProto(*from.defaultsearchprovidercontextmenuaccessallowed_);
  } else {
    defaultsearchprovidercontextmenuaccessallowed_ = nullptr;
  }
  if (from.has_autolaunchprotocolsfromorigins()) {
    autolaunchprotocolsfromorigins_ = new ::enterprise_management::StringPolicyProto(*from.autolaunchprotocolsfromorigins_);
  } else {
    autolaunchprotocolsfromorigins_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_management.CloudPolicySettings)
}

void CloudPolicySettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloudPolicySettings_cloud_5fpolicy_2eproto.base);
  ::memset(&homepagelocation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&autolaunchprotocolsfromorigins_) -
      reinterpret_cast<char*>(&homepagelocation_)) + sizeof(autolaunchprotocolsfromorigins_));
}

CloudPolicySettings::~CloudPolicySettings() {
  // @@protoc_insertion_point(destructor:enterprise_management.CloudPolicySettings)
  SharedDtor();
}

void CloudPolicySettings::SharedDtor() {
  if (this != internal_default_instance()) delete homepagelocation_;
  if (this != internal_default_instance()) delete homepageisnewtabpage_;
  if (this != internal_default_instance()) delete defaultbrowsersettingenabled_;
  if (this != internal_default_instance()) delete alternateerrorpagesenabled_;
  if (this != internal_default_instance()) delete searchsuggestenabled_;
  if (this != internal_default_instance()) delete javascriptenabled_;
  if (this != internal_default_instance()) delete incognitoenabled_;
  if (this != internal_default_instance()) delete savingbrowserhistorydisabled_;
  if (this != internal_default_instance()) delete printingenabled_;
  if (this != internal_default_instance()) delete cloudprintproxyenabled_;
  if (this != internal_default_instance()) delete safebrowsingenabled_;
  if (this != internal_default_instance()) delete metricsreportingenabled_;
  if (this != internal_default_instance()) delete passwordmanagerenabled_;
  if (this != internal_default_instance()) delete autofillenabled_;
  if (this != internal_default_instance()) delete disabledplugins_;
  if (this != internal_default_instance()) delete syncdisabled_;
  if (this != internal_default_instance()) delete proxymode_;
  if (this != internal_default_instance()) delete proxyservermode_;
  if (this != internal_default_instance()) delete proxyserver_;
  if (this != internal_default_instance()) delete proxypacurl_;
  if (this != internal_default_instance()) delete proxybypasslist_;
  if (this != internal_default_instance()) delete authschemes_;
  if (this != internal_default_instance()) delete disableauthnegotiatecnamelookup_;
  if (this != internal_default_instance()) delete enableauthnegotiateport_;
  if (this != internal_default_instance()) delete authserverwhitelist_;
  if (this != internal_default_instance()) delete authnegotiatedelegatewhitelist_;
  if (this != internal_default_instance()) delete gssapilibraryname_;
  if (this != internal_default_instance()) delete extensioninstallblacklist_;
  if (this != internal_default_instance()) delete extensioninstallwhitelist_;
  if (this != internal_default_instance()) delete extensioninstallforcelist_;
  if (this != internal_default_instance()) delete showhomebutton_;
  if (this != internal_default_instance()) delete developertoolsdisabled_;
  if (this != internal_default_instance()) delete restoreonstartup_;
  if (this != internal_default_instance()) delete restoreonstartupurls_;
  if (this != internal_default_instance()) delete blockthirdpartycookies_;
  if (this != internal_default_instance()) delete defaultsearchproviderenabled_;
  if (this != internal_default_instance()) delete defaultsearchprovidername_;
  if (this != internal_default_instance()) delete defaultsearchproviderkeyword_;
  if (this != internal_default_instance()) delete defaultsearchprovidersearchurl_;
  if (this != internal_default_instance()) delete defaultsearchprovidersuggesturl_;
  if (this != internal_default_instance()) delete defaultsearchprovidericonurl_;
  if (this != internal_default_instance()) delete defaultsearchproviderencodings_;
  if (this != internal_default_instance()) delete defaultcookiessetting_;
  if (this != internal_default_instance()) delete defaultimagessetting_;
  if (this != internal_default_instance()) delete defaultjavascriptsetting_;
  if (this != internal_default_instance()) delete defaultpluginssetting_;
  if (this != internal_default_instance()) delete defaultpopupssetting_;
  if (this != internal_default_instance()) delete defaultnotificationssetting_;
  if (this != internal_default_instance()) delete defaultgeolocationsetting_;
  if (this != internal_default_instance()) delete disable3dapis_;
  if (this != internal_default_instance()) delete policyrefreshrate_;
  if (this != internal_default_instance()) delete downloaddirectory_;
  if (this != internal_default_instance()) delete cookiesblockedforurls_;
  if (this != internal_default_instance()) delete cookiessessiononlyforurls_;
  if (this != internal_default_instance()) delete imagesallowedforurls_;
  if (this != internal_default_instance()) delete imagesblockedforurls_;
  if (this != internal_default_instance()) delete javascriptallowedforurls_;
  if (this != internal_default_instance()) delete javascriptblockedforurls_;
  if (this != internal_default_instance()) delete pluginsallowedforurls_;
  if (this != internal_default_instance()) delete pluginsblockedforurls_;
  if (this != internal_default_instance()) delete popupsallowedforurls_;
  if (this != internal_default_instance()) delete popupsblockedforurls_;
  if (this != internal_default_instance()) delete cookiesallowedforurls_;
  if (this != internal_default_instance()) delete enabledplugins_;
  if (this != internal_default_instance()) delete disabledpluginsexceptions_;
  if (this != internal_default_instance()) delete translateenabled_;
  if (this != internal_default_instance()) delete allowoutdatedplugins_;
  if (this != internal_default_instance()) delete bookmarkbarenabled_;
  if (this != internal_default_instance()) delete editbookmarksenabled_;
  if (this != internal_default_instance()) delete allowfileselectiondialogs_;
  if (this != internal_default_instance()) delete disabledschemes_;
  if (this != internal_default_instance()) delete diskcachedir_;
  if (this != internal_default_instance()) delete allowcrossoriginauthprompt_;
  if (this != internal_default_instance()) delete maxconnectionsperproxy_;
  if (this != internal_default_instance()) delete incognitomodeavailability_;
  if (this != internal_default_instance()) delete remoteaccesshostfirewalltraversal_;
  if (this != internal_default_instance()) delete importbookmarks_;
  if (this != internal_default_instance()) delete importhistory_;
  if (this != internal_default_instance()) delete importhomepage_;
  if (this != internal_default_instance()) delete importsearchengine_;
  if (this != internal_default_instance()) delete importsavedpasswords_;
  if (this != internal_default_instance()) delete autoselectcertificateforurls_;
  if (this != internal_default_instance()) delete urlblacklist_;
  if (this != internal_default_instance()) delete urlwhitelist_;
  if (this != internal_default_instance()) delete notificationsallowedforurls_;
  if (this != internal_default_instance()) delete notificationsblockedforurls_;
  if (this != internal_default_instance()) delete cloudprintsubmitenabled_;
  if (this != internal_default_instance()) delete diskcachesize_;
  if (this != internal_default_instance()) delete proxysettings_;
  if (this != internal_default_instance()) delete disableprintpreview_;
  if (this != internal_default_instance()) delete enableonlinerevocationchecks_;
  if (this != internal_default_instance()) delete backgroundmodeenabled_;
  if (this != internal_default_instance()) delete restrictsignintopattern_;
  if (this != internal_default_instance()) delete extensioninstallsources_;
  if (this != internal_default_instance()) delete defaultmediastreamsetting_;
  if (this != internal_default_instance()) delete disablesafebrowsingproceedanyway_;
  if (this != internal_default_instance()) delete spellcheckserviceenabled_;
  if (this != internal_default_instance()) delete disablescreenshots_;
  if (this != internal_default_instance()) delete remoteaccesshostdomain_;
  if (this != internal_default_instance()) delete remoteaccesshostrequirecurtain_;
  if (this != internal_default_instance()) delete audiocaptureallowed_;
  if (this != internal_default_instance()) delete defaultsearchprovideralternateurls_;
  if (this != internal_default_instance()) delete forcesafesearch_;
  if (this != internal_default_instance()) delete builtindnsclientenabled_;
  if (this != internal_default_instance()) delete videocaptureallowed_;
  if (this != internal_default_instance()) delete extensionallowedtypes_;
  if (this != internal_default_instance()) delete allowdeletingbrowserhistory_;
  if (this != internal_default_instance()) delete hidewebstoreicon_;
  if (this != internal_default_instance()) delete signinallowed_;
  if (this != internal_default_instance()) delete variationsrestrictparameter_;
  if (this != internal_default_instance()) delete contentpackdefaultfilteringbehavior_;
  if (this != internal_default_instance()) delete contentpackmanualbehaviorhosts_;
  if (this != internal_default_instance()) delete contentpackmanualbehaviorurls_;
  if (this != internal_default_instance()) delete audiocaptureallowedurls_;
  if (this != internal_default_instance()) delete videocaptureallowedurls_;
  if (this != internal_default_instance()) delete managedbookmarks_;
  if (this != internal_default_instance()) delete maxinvalidationfetchdelay_;
  if (this != internal_default_instance()) delete defaultsearchproviderimageurl_;
  if (this != internal_default_instance()) delete defaultsearchprovidersearchurlpostparams_;
  if (this != internal_default_instance()) delete defaultsearchprovidersuggesturlpostparams_;
  if (this != internal_default_instance()) delete defaultsearchproviderimageurlpostparams_;
  if (this != internal_default_instance()) delete remoteaccesshostallowclientpairing_;
  if (this != internal_default_instance()) delete requireonlinerevocationchecksforlocalanchors_;
  if (this != internal_default_instance()) delete defaultsearchprovidernewtaburl_;
  if (this != internal_default_instance()) delete fullscreenallowed_;
  if (this != internal_default_instance()) delete forceephemeralprofiles_;
  if (this != internal_default_instance()) delete nativemessagingblacklist_;
  if (this != internal_default_instance()) delete nativemessagingwhitelist_;
  if (this != internal_default_instance()) delete nativemessaginguserlevelhosts_;
  if (this != internal_default_instance()) delete remoteaccesshostallowgnubbyauth_;
  if (this != internal_default_instance()) delete wpadquickcheckenabled_;
  if (this != internal_default_instance()) delete remoteaccesshostallowrelayedconnection_;
  if (this != internal_default_instance()) delete remoteaccesshostudpportrange_;
  if (this != internal_default_instance()) delete showappsshortcutinbookmarkbar_;
  if (this != internal_default_instance()) delete registeredprotocolhandlers_;
  if (this != internal_default_instance()) delete enabledeprecatedwebplatformfeatures_;
  if (this != internal_default_instance()) delete networkpredictionoptions_;
  if (this != internal_default_instance()) delete browserguestmodeenabled_;
  if (this != internal_default_instance()) delete browseraddpersonenabled_;
  if (this != internal_default_instance()) delete importautofillformdata_;
  if (this != internal_default_instance()) delete extensionsettings_;
  if (this != internal_default_instance()) delete sslversionmin_;
  if (this != internal_default_instance()) delete forcegooglesafesearch_;
  if (this != internal_default_instance()) delete forceyoutubesafetymode_;
  if (this != internal_default_instance()) delete remoteaccesshostmatchusername_;
  if (this != internal_default_instance()) delete remoteaccesshosttokenurl_;
  if (this != internal_default_instance()) delete remoteaccesshosttokenvalidationurl_;
  if (this != internal_default_instance()) delete remoteaccesshosttokenvalidationcertificateissuer_;
  if (this != internal_default_instance()) delete sslerroroverrideallowed_;
  if (this != internal_default_instance()) delete quicallowed_;
  if (this != internal_default_instance()) delete hardwareaccelerationmodeenabled_;
  if (this != internal_default_instance()) delete defaultprinterselection_;
  if (this != internal_default_instance()) delete allowdinosaureasteregg_;
  if (this != internal_default_instance()) delete remoteaccesshostclientdomain_;
  if (this != internal_default_instance()) delete defaultwebbluetoothguardsetting_;
  if (this != internal_default_instance()) delete suppressunsupportedoswarning_;
  if (this != internal_default_instance()) delete taskmanagerendprocessenabled_;
  if (this != internal_default_instance()) delete alloweddomainsforapps_;
  if (this != internal_default_instance()) delete enablemediarouter_;
  if (this != internal_default_instance()) delete certificatetransparencyenforcementdisabledforurls_;
  if (this != internal_default_instance()) delete webrtcudpportrange_;
  if (this != internal_default_instance()) delete componentupdatesenabled_;
  if (this != internal_default_instance()) delete alwaysopenpdfexternally_;
  if (this != internal_default_instance()) delete forceyoutuberestrict_;
  if (this != internal_default_instance()) delete newtabpagelocation_;
  if (this != internal_default_instance()) delete showcasticonintoolbar_;
  if (this != internal_default_instance()) delete remoteaccesshostdomainlist_;
  if (this != internal_default_instance()) delete remoteaccesshostclientdomainlist_;
  if (this != internal_default_instance()) delete browsernetworktimequeriesenabled_;
  if (this != internal_default_instance()) delete downloadrestrictions_;
  if (this != internal_default_instance()) delete printpreviewusesystemdefaultprinter_;
  if (this != internal_default_instance()) delete cloudpolicyoverridesplatformpolicy_;
  if (this != internal_default_instance()) delete runallflashinallowmode_;
  if (this != internal_default_instance()) delete autofillcreditcardenabled_;
  if (this != internal_default_instance()) delete ntlmv2enabled_;
  if (this != internal_default_instance()) delete promptfordownloadlocation_;
  if (this != internal_default_instance()) delete isolateorigins_;
  if (this != internal_default_instance()) delete siteperprocess_;
  if (this != internal_default_instance()) delete unsafelytreatinsecureoriginassecure_;
  if (this != internal_default_instance()) delete defaultdownloaddirectory_;
  if (this != internal_default_instance()) delete securitykeypermitattestation_;
  if (this != internal_default_instance()) delete abusiveexperienceinterventionenforce_;
  if (this != internal_default_instance()) delete spellchecklanguage_;
  if (this != internal_default_instance()) delete spellcheckenabled_;
  if (this != internal_default_instance()) delete adssettingforintrusiveadssites_;
  if (this != internal_default_instance()) delete passwordprotectionwarningtrigger_;
  if (this != internal_default_instance()) delete relaunchnotification_;
  if (this != internal_default_instance()) delete relaunchnotificationperiod_;
  if (this != internal_default_instance()) delete safebrowsingwhitelistdomains_;
  if (this != internal_default_instance()) delete passwordprotectionloginurls_;
  if (this != internal_default_instance()) delete passwordprotectionchangepasswordurl_;
  if (this != internal_default_instance()) delete safebrowsingextendedreportingenabled_;
  if (this != internal_default_instance()) delete autoplayallowed_;
  if (this != internal_default_instance()) delete autoplaywhitelist_;
  if (this != internal_default_instance()) delete defaultwebusbguardsetting_;
  if (this != internal_default_instance()) delete certificatetransparencyenforcementdisabledforcas_;
  if (this != internal_default_instance()) delete certificatetransparencyenforcementdisabledforlegacycas_;
  if (this != internal_default_instance()) delete mediaroutercastallowallips_;
  if (this != internal_default_instance()) delete webusbaskforurls_;
  if (this != internal_default_instance()) delete webusbblockedforurls_;
  if (this != internal_default_instance()) delete developertoolsavailability_;
  if (this != internal_default_instance()) delete promotionaltabsenabled_;
  if (this != internal_default_instance()) delete safesitesfilterbehavior_;
  if (this != internal_default_instance()) delete overridesecurityrestrictionsoninsecureorigin_;
  if (this != internal_default_instance()) delete autofilladdressenabled_;
  if (this != internal_default_instance()) delete urlkeyedanonymizeddatacollectionenabled_;
  if (this != internal_default_instance()) delete webrtceventlogcollectionallowed_;
  if (this != internal_default_instance()) delete coalesceh2connectionswithclientcertificatesforhosts_;
  if (this != internal_default_instance()) delete webappinstallforcelist_;
  if (this != internal_default_instance()) delete reportversiondata_;
  if (this != internal_default_instance()) delete reportpolicydata_;
  if (this != internal_default_instance()) delete reportmachineiddata_;
  if (this != internal_default_instance()) delete reportuseriddata_;
  if (this != internal_default_instance()) delete printingpapersizedefault_;
  if (this != internal_default_instance()) delete printheaderfooter_;
  if (this != internal_default_instance()) delete enterprisehardwareplatformapienabled_;
  if (this != internal_default_instance()) delete webusballowdevicesforurls_;
  if (this != internal_default_instance()) delete browsersignin_;
  if (this != internal_default_instance()) delete cloudreportingenabled_;
  if (this != internal_default_instance()) delete alternativebrowserpath_;
  if (this != internal_default_instance()) delete alternativebrowserparameters_;
  if (this != internal_default_instance()) delete browserswitcherurllist_;
  if (this != internal_default_instance()) delete browserswitcherurlgreylist_;
  if (this != internal_default_instance()) delete reportextensionsandpluginsdata_;
  if (this != internal_default_instance()) delete cloudmanagementenrollmentmandatory_;
  if (this != internal_default_instance()) delete cloudmanagementenrollmenttoken_;
  if (this != internal_default_instance()) delete browserswitcherexternalsitelisturl_;
  if (this != internal_default_instance()) delete browserswitcherenabled_;
  if (this != internal_default_instance()) delete browserswitcherkeeplastchrometab_;
  if (this != internal_default_instance()) delete browserswitcherdelay_;
  if (this != internal_default_instance()) delete authnegotiatedelegatebykdcpolicy_;
  if (this != internal_default_instance()) delete allowpopupsduringpageunload_;
  if (this != internal_default_instance()) delete remoteaccesshostallowfiletransfer_;
  if (this != internal_default_instance()) delete spellchecklanguageblacklist_;
  if (this != internal_default_instance()) delete signedhttpexchangeenabled_;
  if (this != internal_default_instance()) delete extensioninstalllistsmergeenabled_;
  if (this != internal_default_instance()) delete policylistmultiplesourcemergelist_;
  if (this != internal_default_instance()) delete browserswitcherexternalgreylisturl_;
  if (this != internal_default_instance()) delete policydictionarymultiplesourcemergelist_;
  if (this != internal_default_instance()) delete commandlineflagsecuritywarningsenabled_;
  if (this != internal_default_instance()) delete userfeedbackallowed_;
  if (this != internal_default_instance()) delete browserguestmodeenforced_;
  if (this != internal_default_instance()) delete passwordleakdetectionenabled_;
  if (this != internal_default_instance()) delete dnsoverhttpsmode_;
  if (this != internal_default_instance()) delete sendfilesformalwarecheck_;
  if (this != internal_default_instance()) delete policyatomicgroupsenabled_;
  if (this != internal_default_instance()) delete unsafeeventsreportingenabled_;
  if (this != internal_default_instance()) delete blocklargefiletransfer_;
  if (this != internal_default_instance()) delete delaydeliveryuntilverdict_;
  if (this != internal_default_instance()) delete allowpasswordprotectedfiles_;
  if (this != internal_default_instance()) delete checkcontentcompliance_;
  if (this != internal_default_instance()) delete urlstocheckcomplianceofdownloadedcontent_;
  if (this != internal_default_instance()) delete urlstonotcheckcomplianceofuploadedcontent_;
  if (this != internal_default_instance()) delete urlstocheckformalwareofuploadedcontent_;
  if (this != internal_default_instance()) delete hstspolicybypasslist_;
  if (this != internal_default_instance()) delete allowsyncxhrinpagedismissal_;
  if (this != internal_default_instance()) delete cloudextensionrequestenabled_;
  if (this != internal_default_instance()) delete sharedclipboardenabled_;
  if (this != internal_default_instance()) delete printingallowedbackgroundgraphicsmodes_;
  if (this != internal_default_instance()) delete printingbackgroundgraphicsdefault_;
  if (this != internal_default_instance()) delete legacysamesitecookiebehaviorenabled_;
  if (this != internal_default_instance()) delete legacysamesitecookiebehaviorenabledfordomainlist_;
  if (this != internal_default_instance()) delete tls13hardeningforlocalanchorsenabled_;
  if (this != internal_default_instance()) delete audiosandboxenabled_;
  if (this != internal_default_instance()) delete corsmitigationlist_;
  if (this != internal_default_instance()) delete corslegacymodeenabled_;
  if (this != internal_default_instance()) delete externalprotocoldialogshowalwaysopencheckbox_;
  if (this != internal_default_instance()) delete defaultinsecurecontentsetting_;
  if (this != internal_default_instance()) delete insecurecontentallowedforurls_;
  if (this != internal_default_instance()) delete insecurecontentblockedforurls_;
  if (this != internal_default_instance()) delete blockexternalextensions_;
  if (this != internal_default_instance()) delete webrtclocalipsallowedurls_;
  if (this != internal_default_instance()) delete dnsoverhttpstemplates_;
  if (this != internal_default_instance()) delete globallyscopehttpauthcacheenabled_;
  if (this != internal_default_instance()) delete clicktocallenabled_;
  if (this != internal_default_instance()) delete printertypedenylist_;
  if (this != internal_default_instance()) delete forcelegacydefaultreferrerpolicy_;
  if (this != internal_default_instance()) delete synctypeslistdisabled_;
  if (this != internal_default_instance()) delete ambientauthenticationinprivatemodesenabled_;
  if (this != internal_default_instance()) delete paymentmethodqueryenabled_;
  if (this != internal_default_instance()) delete strictermixedcontenttreatmentenabled_;
  if (this != internal_default_instance()) delete ntpcustombackgroundenabled_;
  if (this != internal_default_instance()) delete dnsinterceptionchecksenabled_;
  if (this != internal_default_instance()) delete localdiscoveryenabled_;
  if (this != internal_default_instance()) delete chromevariations_;
  if (this != internal_default_instance()) delete screencaptureallowed_;
  if (this != internal_default_instance()) delete blockunsupportedfiletypes_;
  if (this != internal_default_instance()) delete urlstonotcheckformalwareofdownloadedcontent_;
  if (this != internal_default_instance()) delete userdatasnapshotretentionlimit_;
  if (this != internal_default_instance()) delete allownativenotifications_;
  if (this != internal_default_instance()) delete safebrowsingprotectionlevel_;
  if (this != internal_default_instance()) delete advancedprotectionallowed_;
  if (this != internal_default_instance()) delete scrolltotextfragmentenabled_;
  if (this != internal_default_instance()) delete onfileattachedenterpriseconnector_;
  if (this != internal_default_instance()) delete onfiledownloadedenterpriseconnector_;
  if (this != internal_default_instance()) delete onbulkdataentryenterpriseconnector_;
  if (this != internal_default_instance()) delete onsecurityevententerpriseconnector_;
  if (this != internal_default_instance()) delete autoopenfiletypes_;
  if (this != internal_default_instance()) delete accessibilityimagelabelsenabled_;
  if (this != internal_default_instance()) delete appcacheforceenabled_;
  if (this != internal_default_instance()) delete autoopenallowedforurls_;
  if (this != internal_default_instance()) delete enableexperimentalpolicies_;
  if (this != internal_default_instance()) delete intensivewakeupthrottlingenabled_;
  if (this != internal_default_instance()) delete defaultsearchprovidercontextmenuaccessallowed_;
  if (this != internal_default_instance()) delete autolaunchprotocolsfromorigins_;
}

void CloudPolicySettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloudPolicySettings& CloudPolicySettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloudPolicySettings_cloud_5fpolicy_2eproto.base);
  return *internal_default_instance();
}


void CloudPolicySettings::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.CloudPolicySettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(homepagelocation_ != nullptr);
      homepagelocation_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(homepageisnewtabpage_ != nullptr);
      homepageisnewtabpage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(defaultbrowsersettingenabled_ != nullptr);
      defaultbrowsersettingenabled_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(alternateerrorpagesenabled_ != nullptr);
      alternateerrorpagesenabled_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(searchsuggestenabled_ != nullptr);
      searchsuggestenabled_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(javascriptenabled_ != nullptr);
      javascriptenabled_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(incognitoenabled_ != nullptr);
      incognitoenabled_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(savingbrowserhistorydisabled_ != nullptr);
      savingbrowserhistorydisabled_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(printingenabled_ != nullptr);
      printingenabled_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(cloudprintproxyenabled_ != nullptr);
      cloudprintproxyenabled_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(safebrowsingenabled_ != nullptr);
      safebrowsingenabled_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(metricsreportingenabled_ != nullptr);
      metricsreportingenabled_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(passwordmanagerenabled_ != nullptr);
      passwordmanagerenabled_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(autofillenabled_ != nullptr);
      autofillenabled_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(disabledplugins_ != nullptr);
      disabledplugins_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(syncdisabled_ != nullptr);
      syncdisabled_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(proxymode_ != nullptr);
      proxymode_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(proxyservermode_ != nullptr);
      proxyservermode_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(proxyserver_ != nullptr);
      proxyserver_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(proxypacurl_ != nullptr);
      proxypacurl_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(proxybypasslist_ != nullptr);
      proxybypasslist_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(authschemes_ != nullptr);
      authschemes_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(disableauthnegotiatecnamelookup_ != nullptr);
      disableauthnegotiatecnamelookup_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(enableauthnegotiateport_ != nullptr);
      enableauthnegotiateport_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(authserverwhitelist_ != nullptr);
      authserverwhitelist_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(authnegotiatedelegatewhitelist_ != nullptr);
      authnegotiatedelegatewhitelist_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(gssapilibraryname_ != nullptr);
      gssapilibraryname_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(extensioninstallblacklist_ != nullptr);
      extensioninstallblacklist_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(extensioninstallwhitelist_ != nullptr);
      extensioninstallwhitelist_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(extensioninstallforcelist_ != nullptr);
      extensioninstallforcelist_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(showhomebutton_ != nullptr);
      showhomebutton_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(developertoolsdisabled_ != nullptr);
      developertoolsdisabled_->Clear();
    }
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(restoreonstartup_ != nullptr);
      restoreonstartup_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(restoreonstartupurls_ != nullptr);
      restoreonstartupurls_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(blockthirdpartycookies_ != nullptr);
      blockthirdpartycookies_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(defaultsearchproviderenabled_ != nullptr);
      defaultsearchproviderenabled_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(defaultsearchprovidername_ != nullptr);
      defaultsearchprovidername_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(defaultsearchproviderkeyword_ != nullptr);
      defaultsearchproviderkeyword_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(defaultsearchprovidersearchurl_ != nullptr);
      defaultsearchprovidersearchurl_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(defaultsearchprovidersuggesturl_ != nullptr);
      defaultsearchprovidersuggesturl_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(defaultsearchprovidericonurl_ != nullptr);
      defaultsearchprovidericonurl_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(defaultsearchproviderencodings_ != nullptr);
      defaultsearchproviderencodings_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(defaultcookiessetting_ != nullptr);
      defaultcookiessetting_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(defaultimagessetting_ != nullptr);
      defaultimagessetting_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(defaultjavascriptsetting_ != nullptr);
      defaultjavascriptsetting_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(defaultpluginssetting_ != nullptr);
      defaultpluginssetting_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(defaultpopupssetting_ != nullptr);
      defaultpopupssetting_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(defaultnotificationssetting_ != nullptr);
      defaultnotificationssetting_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(defaultgeolocationsetting_ != nullptr);
      defaultgeolocationsetting_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(disable3dapis_ != nullptr);
      disable3dapis_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(policyrefreshrate_ != nullptr);
      policyrefreshrate_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(downloaddirectory_ != nullptr);
      downloaddirectory_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(cookiesblockedforurls_ != nullptr);
      cookiesblockedforurls_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(cookiessessiononlyforurls_ != nullptr);
      cookiessessiononlyforurls_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(imagesallowedforurls_ != nullptr);
      imagesallowedforurls_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(imagesblockedforurls_ != nullptr);
      imagesblockedforurls_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(javascriptallowedforurls_ != nullptr);
      javascriptallowedforurls_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(javascriptblockedforurls_ != nullptr);
      javascriptblockedforurls_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(pluginsallowedforurls_ != nullptr);
      pluginsallowedforurls_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(pluginsblockedforurls_ != nullptr);
      pluginsblockedforurls_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(popupsallowedforurls_ != nullptr);
      popupsallowedforurls_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(popupsblockedforurls_ != nullptr);
      popupsblockedforurls_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(cookiesallowedforurls_ != nullptr);
      cookiesallowedforurls_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(enabledplugins_ != nullptr);
      enabledplugins_->Clear();
    }
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(disabledpluginsexceptions_ != nullptr);
      disabledpluginsexceptions_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(translateenabled_ != nullptr);
      translateenabled_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(allowoutdatedplugins_ != nullptr);
      allowoutdatedplugins_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(bookmarkbarenabled_ != nullptr);
      bookmarkbarenabled_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(editbookmarksenabled_ != nullptr);
      editbookmarksenabled_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(allowfileselectiondialogs_ != nullptr);
      allowfileselectiondialogs_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(disabledschemes_ != nullptr);
      disabledschemes_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(diskcachedir_ != nullptr);
      diskcachedir_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(allowcrossoriginauthprompt_ != nullptr);
      allowcrossoriginauthprompt_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(maxconnectionsperproxy_ != nullptr);
      maxconnectionsperproxy_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(incognitomodeavailability_ != nullptr);
      incognitomodeavailability_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(remoteaccesshostfirewalltraversal_ != nullptr);
      remoteaccesshostfirewalltraversal_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(importbookmarks_ != nullptr);
      importbookmarks_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(importhistory_ != nullptr);
      importhistory_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(importhomepage_ != nullptr);
      importhomepage_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(importsearchengine_ != nullptr);
      importsearchengine_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(importsavedpasswords_ != nullptr);
      importsavedpasswords_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(autoselectcertificateforurls_ != nullptr);
      autoselectcertificateforurls_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(urlblacklist_ != nullptr);
      urlblacklist_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(urlwhitelist_ != nullptr);
      urlwhitelist_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(notificationsallowedforurls_ != nullptr);
      notificationsallowedforurls_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(notificationsblockedforurls_ != nullptr);
      notificationsblockedforurls_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(cloudprintsubmitenabled_ != nullptr);
      cloudprintsubmitenabled_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(diskcachesize_ != nullptr);
      diskcachesize_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(proxysettings_ != nullptr);
      proxysettings_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(disableprintpreview_ != nullptr);
      disableprintpreview_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(enableonlinerevocationchecks_ != nullptr);
      enableonlinerevocationchecks_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(backgroundmodeenabled_ != nullptr);
      backgroundmodeenabled_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(restrictsignintopattern_ != nullptr);
      restrictsignintopattern_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(extensioninstallsources_ != nullptr);
      extensioninstallsources_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(defaultmediastreamsetting_ != nullptr);
      defaultmediastreamsetting_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(disablesafebrowsingproceedanyway_ != nullptr);
      disablesafebrowsingproceedanyway_->Clear();
    }
  }
  cached_has_bits = _has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(spellcheckserviceenabled_ != nullptr);
      spellcheckserviceenabled_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(disablescreenshots_ != nullptr);
      disablescreenshots_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(remoteaccesshostdomain_ != nullptr);
      remoteaccesshostdomain_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(remoteaccesshostrequirecurtain_ != nullptr);
      remoteaccesshostrequirecurtain_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(audiocaptureallowed_ != nullptr);
      audiocaptureallowed_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(defaultsearchprovideralternateurls_ != nullptr);
      defaultsearchprovideralternateurls_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(forcesafesearch_ != nullptr);
      forcesafesearch_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(builtindnsclientenabled_ != nullptr);
      builtindnsclientenabled_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(videocaptureallowed_ != nullptr);
      videocaptureallowed_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(extensionallowedtypes_ != nullptr);
      extensionallowedtypes_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(allowdeletingbrowserhistory_ != nullptr);
      allowdeletingbrowserhistory_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(hidewebstoreicon_ != nullptr);
      hidewebstoreicon_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(signinallowed_ != nullptr);
      signinallowed_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(variationsrestrictparameter_ != nullptr);
      variationsrestrictparameter_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(contentpackdefaultfilteringbehavior_ != nullptr);
      contentpackdefaultfilteringbehavior_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(contentpackmanualbehaviorhosts_ != nullptr);
      contentpackmanualbehaviorhosts_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(contentpackmanualbehaviorurls_ != nullptr);
      contentpackmanualbehaviorurls_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(audiocaptureallowedurls_ != nullptr);
      audiocaptureallowedurls_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(videocaptureallowedurls_ != nullptr);
      videocaptureallowedurls_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(managedbookmarks_ != nullptr);
      managedbookmarks_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(maxinvalidationfetchdelay_ != nullptr);
      maxinvalidationfetchdelay_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(defaultsearchproviderimageurl_ != nullptr);
      defaultsearchproviderimageurl_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(defaultsearchprovidersearchurlpostparams_ != nullptr);
      defaultsearchprovidersearchurlpostparams_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(defaultsearchprovidersuggesturlpostparams_ != nullptr);
      defaultsearchprovidersuggesturlpostparams_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(defaultsearchproviderimageurlpostparams_ != nullptr);
      defaultsearchproviderimageurlpostparams_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(remoteaccesshostallowclientpairing_ != nullptr);
      remoteaccesshostallowclientpairing_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(requireonlinerevocationchecksforlocalanchors_ != nullptr);
      requireonlinerevocationchecksforlocalanchors_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(defaultsearchprovidernewtaburl_ != nullptr);
      defaultsearchprovidernewtaburl_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(fullscreenallowed_ != nullptr);
      fullscreenallowed_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(forceephemeralprofiles_ != nullptr);
      forceephemeralprofiles_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(nativemessagingblacklist_ != nullptr);
      nativemessagingblacklist_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(nativemessagingwhitelist_ != nullptr);
      nativemessagingwhitelist_->Clear();
    }
  }
  cached_has_bits = _has_bits_[4];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(nativemessaginguserlevelhosts_ != nullptr);
      nativemessaginguserlevelhosts_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(remoteaccesshostallowgnubbyauth_ != nullptr);
      remoteaccesshostallowgnubbyauth_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(wpadquickcheckenabled_ != nullptr);
      wpadquickcheckenabled_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(remoteaccesshostallowrelayedconnection_ != nullptr);
      remoteaccesshostallowrelayedconnection_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(remoteaccesshostudpportrange_ != nullptr);
      remoteaccesshostudpportrange_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(showappsshortcutinbookmarkbar_ != nullptr);
      showappsshortcutinbookmarkbar_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(registeredprotocolhandlers_ != nullptr);
      registeredprotocolhandlers_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(enabledeprecatedwebplatformfeatures_ != nullptr);
      enabledeprecatedwebplatformfeatures_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(networkpredictionoptions_ != nullptr);
      networkpredictionoptions_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(browserguestmodeenabled_ != nullptr);
      browserguestmodeenabled_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(browseraddpersonenabled_ != nullptr);
      browseraddpersonenabled_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(importautofillformdata_ != nullptr);
      importautofillformdata_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(extensionsettings_ != nullptr);
      extensionsettings_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(sslversionmin_ != nullptr);
      sslversionmin_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(forcegooglesafesearch_ != nullptr);
      forcegooglesafesearch_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(forceyoutubesafetymode_ != nullptr);
      forceyoutubesafetymode_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(remoteaccesshostmatchusername_ != nullptr);
      remoteaccesshostmatchusername_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(remoteaccesshosttokenurl_ != nullptr);
      remoteaccesshosttokenurl_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(remoteaccesshosttokenvalidationurl_ != nullptr);
      remoteaccesshosttokenvalidationurl_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(remoteaccesshosttokenvalidationcertificateissuer_ != nullptr);
      remoteaccesshosttokenvalidationcertificateissuer_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(sslerroroverrideallowed_ != nullptr);
      sslerroroverrideallowed_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(quicallowed_ != nullptr);
      quicallowed_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(hardwareaccelerationmodeenabled_ != nullptr);
      hardwareaccelerationmodeenabled_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(defaultprinterselection_ != nullptr);
      defaultprinterselection_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(allowdinosaureasteregg_ != nullptr);
      allowdinosaureasteregg_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(remoteaccesshostclientdomain_ != nullptr);
      remoteaccesshostclientdomain_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(defaultwebbluetoothguardsetting_ != nullptr);
      defaultwebbluetoothguardsetting_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(suppressunsupportedoswarning_ != nullptr);
      suppressunsupportedoswarning_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(taskmanagerendprocessenabled_ != nullptr);
      taskmanagerendprocessenabled_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(alloweddomainsforapps_ != nullptr);
      alloweddomainsforapps_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(enablemediarouter_ != nullptr);
      enablemediarouter_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(certificatetransparencyenforcementdisabledforurls_ != nullptr);
      certificatetransparencyenforcementdisabledforurls_->Clear();
    }
  }
  cached_has_bits = _has_bits_[5];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(webrtcudpportrange_ != nullptr);
      webrtcudpportrange_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(componentupdatesenabled_ != nullptr);
      componentupdatesenabled_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(alwaysopenpdfexternally_ != nullptr);
      alwaysopenpdfexternally_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(forceyoutuberestrict_ != nullptr);
      forceyoutuberestrict_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(newtabpagelocation_ != nullptr);
      newtabpagelocation_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(showcasticonintoolbar_ != nullptr);
      showcasticonintoolbar_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(remoteaccesshostdomainlist_ != nullptr);
      remoteaccesshostdomainlist_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(remoteaccesshostclientdomainlist_ != nullptr);
      remoteaccesshostclientdomainlist_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(browsernetworktimequeriesenabled_ != nullptr);
      browsernetworktimequeriesenabled_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(downloadrestrictions_ != nullptr);
      downloadrestrictions_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(printpreviewusesystemdefaultprinter_ != nullptr);
      printpreviewusesystemdefaultprinter_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(cloudpolicyoverridesplatformpolicy_ != nullptr);
      cloudpolicyoverridesplatformpolicy_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(runallflashinallowmode_ != nullptr);
      runallflashinallowmode_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(autofillcreditcardenabled_ != nullptr);
      autofillcreditcardenabled_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(ntlmv2enabled_ != nullptr);
      ntlmv2enabled_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(promptfordownloadlocation_ != nullptr);
      promptfordownloadlocation_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(isolateorigins_ != nullptr);
      isolateorigins_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(siteperprocess_ != nullptr);
      siteperprocess_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(unsafelytreatinsecureoriginassecure_ != nullptr);
      unsafelytreatinsecureoriginassecure_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(defaultdownloaddirectory_ != nullptr);
      defaultdownloaddirectory_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(securitykeypermitattestation_ != nullptr);
      securitykeypermitattestation_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(abusiveexperienceinterventionenforce_ != nullptr);
      abusiveexperienceinterventionenforce_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(spellchecklanguage_ != nullptr);
      spellchecklanguage_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(spellcheckenabled_ != nullptr);
      spellcheckenabled_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(adssettingforintrusiveadssites_ != nullptr);
      adssettingforintrusiveadssites_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(passwordprotectionwarningtrigger_ != nullptr);
      passwordprotectionwarningtrigger_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(relaunchnotification_ != nullptr);
      relaunchnotification_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(relaunchnotificationperiod_ != nullptr);
      relaunchnotificationperiod_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(safebrowsingwhitelistdomains_ != nullptr);
      safebrowsingwhitelistdomains_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(passwordprotectionloginurls_ != nullptr);
      passwordprotectionloginurls_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(passwordprotectionchangepasswordurl_ != nullptr);
      passwordprotectionchangepasswordurl_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(safebrowsingextendedreportingenabled_ != nullptr);
      safebrowsingextendedreportingenabled_->Clear();
    }
  }
  cached_has_bits = _has_bits_[6];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(autoplayallowed_ != nullptr);
      autoplayallowed_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(autoplaywhitelist_ != nullptr);
      autoplaywhitelist_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(defaultwebusbguardsetting_ != nullptr);
      defaultwebusbguardsetting_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(certificatetransparencyenforcementdisabledforcas_ != nullptr);
      certificatetransparencyenforcementdisabledforcas_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(certificatetransparencyenforcementdisabledforlegacycas_ != nullptr);
      certificatetransparencyenforcementdisabledforlegacycas_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(mediaroutercastallowallips_ != nullptr);
      mediaroutercastallowallips_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(webusbaskforurls_ != nullptr);
      webusbaskforurls_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(webusbblockedforurls_ != nullptr);
      webusbblockedforurls_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(developertoolsavailability_ != nullptr);
      developertoolsavailability_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(promotionaltabsenabled_ != nullptr);
      promotionaltabsenabled_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(safesitesfilterbehavior_ != nullptr);
      safesitesfilterbehavior_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(overridesecurityrestrictionsoninsecureorigin_ != nullptr);
      overridesecurityrestrictionsoninsecureorigin_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(autofilladdressenabled_ != nullptr);
      autofilladdressenabled_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(urlkeyedanonymizeddatacollectionenabled_ != nullptr);
      urlkeyedanonymizeddatacollectionenabled_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(webrtceventlogcollectionallowed_ != nullptr);
      webrtceventlogcollectionallowed_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(coalesceh2connectionswithclientcertificatesforhosts_ != nullptr);
      coalesceh2connectionswithclientcertificatesforhosts_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(webappinstallforcelist_ != nullptr);
      webappinstallforcelist_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(reportversiondata_ != nullptr);
      reportversiondata_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(reportpolicydata_ != nullptr);
      reportpolicydata_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(reportmachineiddata_ != nullptr);
      reportmachineiddata_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(reportuseriddata_ != nullptr);
      reportuseriddata_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(printingpapersizedefault_ != nullptr);
      printingpapersizedefault_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(printheaderfooter_ != nullptr);
      printheaderfooter_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(enterprisehardwareplatformapienabled_ != nullptr);
      enterprisehardwareplatformapienabled_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(webusballowdevicesforurls_ != nullptr);
      webusballowdevicesforurls_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(browsersignin_ != nullptr);
      browsersignin_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(cloudreportingenabled_ != nullptr);
      cloudreportingenabled_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(alternativebrowserpath_ != nullptr);
      alternativebrowserpath_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(alternativebrowserparameters_ != nullptr);
      alternativebrowserparameters_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(browserswitcherurllist_ != nullptr);
      browserswitcherurllist_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(browserswitcherurlgreylist_ != nullptr);
      browserswitcherurlgreylist_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(reportextensionsandpluginsdata_ != nullptr);
      reportextensionsandpluginsdata_->Clear();
    }
  }
  cached_has_bits = _has_bits_[7];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(cloudmanagementenrollmentmandatory_ != nullptr);
      cloudmanagementenrollmentmandatory_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cloudmanagementenrollmenttoken_ != nullptr);
      cloudmanagementenrollmenttoken_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(browserswitcherexternalsitelisturl_ != nullptr);
      browserswitcherexternalsitelisturl_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(browserswitcherenabled_ != nullptr);
      browserswitcherenabled_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(browserswitcherkeeplastchrometab_ != nullptr);
      browserswitcherkeeplastchrometab_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(browserswitcherdelay_ != nullptr);
      browserswitcherdelay_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(authnegotiatedelegatebykdcpolicy_ != nullptr);
      authnegotiatedelegatebykdcpolicy_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(allowpopupsduringpageunload_ != nullptr);
      allowpopupsduringpageunload_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(remoteaccesshostallowfiletransfer_ != nullptr);
      remoteaccesshostallowfiletransfer_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(spellchecklanguageblacklist_ != nullptr);
      spellchecklanguageblacklist_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(signedhttpexchangeenabled_ != nullptr);
      signedhttpexchangeenabled_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(extensioninstalllistsmergeenabled_ != nullptr);
      extensioninstalllistsmergeenabled_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(policylistmultiplesourcemergelist_ != nullptr);
      policylistmultiplesourcemergelist_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(browserswitcherexternalgreylisturl_ != nullptr);
      browserswitcherexternalgreylisturl_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(policydictionarymultiplesourcemergelist_ != nullptr);
      policydictionarymultiplesourcemergelist_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(commandlineflagsecuritywarningsenabled_ != nullptr);
      commandlineflagsecuritywarningsenabled_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(userfeedbackallowed_ != nullptr);
      userfeedbackallowed_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(browserguestmodeenforced_ != nullptr);
      browserguestmodeenforced_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(passwordleakdetectionenabled_ != nullptr);
      passwordleakdetectionenabled_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(dnsoverhttpsmode_ != nullptr);
      dnsoverhttpsmode_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(sendfilesformalwarecheck_ != nullptr);
      sendfilesformalwarecheck_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(policyatomicgroupsenabled_ != nullptr);
      policyatomicgroupsenabled_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(unsafeeventsreportingenabled_ != nullptr);
      unsafeeventsreportingenabled_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(blocklargefiletransfer_ != nullptr);
      blocklargefiletransfer_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(delaydeliveryuntilverdict_ != nullptr);
      delaydeliveryuntilverdict_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(allowpasswordprotectedfiles_ != nullptr);
      allowpasswordprotectedfiles_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(checkcontentcompliance_ != nullptr);
      checkcontentcompliance_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(urlstocheckcomplianceofdownloadedcontent_ != nullptr);
      urlstocheckcomplianceofdownloadedcontent_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(urlstonotcheckcomplianceofuploadedcontent_ != nullptr);
      urlstonotcheckcomplianceofuploadedcontent_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(urlstocheckformalwareofuploadedcontent_ != nullptr);
      urlstocheckformalwareofuploadedcontent_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(hstspolicybypasslist_ != nullptr);
      hstspolicybypasslist_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(allowsyncxhrinpagedismissal_ != nullptr);
      allowsyncxhrinpagedismissal_->Clear();
    }
  }
  cached_has_bits = _has_bits_[8];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(cloudextensionrequestenabled_ != nullptr);
      cloudextensionrequestenabled_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sharedclipboardenabled_ != nullptr);
      sharedclipboardenabled_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(printingallowedbackgroundgraphicsmodes_ != nullptr);
      printingallowedbackgroundgraphicsmodes_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(printingbackgroundgraphicsdefault_ != nullptr);
      printingbackgroundgraphicsdefault_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(legacysamesitecookiebehaviorenabled_ != nullptr);
      legacysamesitecookiebehaviorenabled_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(legacysamesitecookiebehaviorenabledfordomainlist_ != nullptr);
      legacysamesitecookiebehaviorenabledfordomainlist_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(tls13hardeningforlocalanchorsenabled_ != nullptr);
      tls13hardeningforlocalanchorsenabled_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(audiosandboxenabled_ != nullptr);
      audiosandboxenabled_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(corsmitigationlist_ != nullptr);
      corsmitigationlist_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(corslegacymodeenabled_ != nullptr);
      corslegacymodeenabled_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(externalprotocoldialogshowalwaysopencheckbox_ != nullptr);
      externalprotocoldialogshowalwaysopencheckbox_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(defaultinsecurecontentsetting_ != nullptr);
      defaultinsecurecontentsetting_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(insecurecontentallowedforurls_ != nullptr);
      insecurecontentallowedforurls_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(insecurecontentblockedforurls_ != nullptr);
      insecurecontentblockedforurls_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(blockexternalextensions_ != nullptr);
      blockexternalextensions_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(webrtclocalipsallowedurls_ != nullptr);
      webrtclocalipsallowedurls_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(dnsoverhttpstemplates_ != nullptr);
      dnsoverhttpstemplates_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(globallyscopehttpauthcacheenabled_ != nullptr);
      globallyscopehttpauthcacheenabled_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(clicktocallenabled_ != nullptr);
      clicktocallenabled_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(printertypedenylist_ != nullptr);
      printertypedenylist_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(forcelegacydefaultreferrerpolicy_ != nullptr);
      forcelegacydefaultreferrerpolicy_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(synctypeslistdisabled_ != nullptr);
      synctypeslistdisabled_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(ambientauthenticationinprivatemodesenabled_ != nullptr);
      ambientauthenticationinprivatemodesenabled_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(paymentmethodqueryenabled_ != nullptr);
      paymentmethodqueryenabled_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(strictermixedcontenttreatmentenabled_ != nullptr);
      strictermixedcontenttreatmentenabled_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(ntpcustombackgroundenabled_ != nullptr);
      ntpcustombackgroundenabled_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(dnsinterceptionchecksenabled_ != nullptr);
      dnsinterceptionchecksenabled_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(localdiscoveryenabled_ != nullptr);
      localdiscoveryenabled_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(chromevariations_ != nullptr);
      chromevariations_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(screencaptureallowed_ != nullptr);
      screencaptureallowed_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(blockunsupportedfiletypes_ != nullptr);
      blockunsupportedfiletypes_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(urlstonotcheckformalwareofdownloadedcontent_ != nullptr);
      urlstonotcheckformalwareofdownloadedcontent_->Clear();
    }
  }
  cached_has_bits = _has_bits_[9];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(userdatasnapshotretentionlimit_ != nullptr);
      userdatasnapshotretentionlimit_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(allownativenotifications_ != nullptr);
      allownativenotifications_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(safebrowsingprotectionlevel_ != nullptr);
      safebrowsingprotectionlevel_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(advancedprotectionallowed_ != nullptr);
      advancedprotectionallowed_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(scrolltotextfragmentenabled_ != nullptr);
      scrolltotextfragmentenabled_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(onfileattachedenterpriseconnector_ != nullptr);
      onfileattachedenterpriseconnector_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(onfiledownloadedenterpriseconnector_ != nullptr);
      onfiledownloadedenterpriseconnector_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(onbulkdataentryenterpriseconnector_ != nullptr);
      onbulkdataentryenterpriseconnector_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(onsecurityevententerpriseconnector_ != nullptr);
      onsecurityevententerpriseconnector_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(autoopenfiletypes_ != nullptr);
      autoopenfiletypes_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(accessibilityimagelabelsenabled_ != nullptr);
      accessibilityimagelabelsenabled_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(appcacheforceenabled_ != nullptr);
      appcacheforceenabled_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(autoopenallowedforurls_ != nullptr);
      autoopenallowedforurls_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(enableexperimentalpolicies_ != nullptr);
      enableexperimentalpolicies_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(intensivewakeupthrottlingenabled_ != nullptr);
      intensivewakeupthrottlingenabled_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(defaultsearchprovidercontextmenuaccessallowed_ != nullptr);
      defaultsearchprovidercontextmenuaccessallowed_->Clear();
    }
  }
  if (cached_has_bits & 0x00010000u) {
    GOOGLE_DCHECK(autolaunchprotocolsfromorigins_ != nullptr);
    autolaunchprotocolsfromorigins_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CloudPolicySettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_management.StringPolicyProto HomepageLocation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_homepagelocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto HomepageIsNewTabPage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_homepageisnewtabpage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto DefaultBrowserSettingEnabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_defaultbrowsersettingenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto AlternateErrorPagesEnabled = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_alternateerrorpagesenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto SearchSuggestEnabled = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_searchsuggestenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto JavascriptEnabled = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_javascriptenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto IncognitoEnabled = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_incognitoenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto SavingBrowserHistoryDisabled = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_savingbrowserhistorydisabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto PrintingEnabled = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_printingenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto CloudPrintProxyEnabled = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_cloudprintproxyenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto SafeBrowsingEnabled = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_safebrowsingenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto MetricsReportingEnabled = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_metricsreportingenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto PasswordManagerEnabled = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_passwordmanagerenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto AutoFillEnabled = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_autofillenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto DisabledPlugins = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_disabledplugins(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto SyncDisabled = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_syncdisabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto ProxyMode = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_proxymode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto ProxyServerMode = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_proxyservermode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto ProxyServer = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_proxyserver(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto ProxyPacUrl = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_proxypacurl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto ProxyBypassList = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_proxybypasslist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto AuthSchemes = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_authschemes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto DisableAuthNegotiateCnameLookup = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_disableauthnegotiatecnamelookup(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto EnableAuthNegotiatePort = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_enableauthnegotiateport(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto AuthServerWhitelist = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_authserverwhitelist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto AuthNegotiateDelegateWhitelist = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_authnegotiatedelegatewhitelist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto GSSAPILibraryName = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_gssapilibraryname(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto ExtensionInstallBlacklist = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_extensioninstallblacklist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto ExtensionInstallWhitelist = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_extensioninstallwhitelist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto ExtensionInstallForcelist = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_extensioninstallforcelist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto ShowHomeButton = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_showhomebutton(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto DeveloperToolsDisabled = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_developertoolsdisabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto RestoreOnStartup = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_restoreonstartup(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto RestoreOnStartupURLs = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_restoreonstartupurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto BlockThirdPartyCookies = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_blockthirdpartycookies(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto DefaultSearchProviderEnabled = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_defaultsearchproviderenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderName = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_defaultsearchprovidername(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderKeyword = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_defaultsearchproviderkeyword(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderSearchURL = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_defaultsearchprovidersearchurl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderSuggestURL = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_defaultsearchprovidersuggesturl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderIconURL = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_defaultsearchprovidericonurl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto DefaultSearchProviderEncodings = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_defaultsearchproviderencodings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto DefaultCookiesSetting = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_defaultcookiessetting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto DefaultImagesSetting = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_defaultimagessetting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto DefaultJavaScriptSetting = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_defaultjavascriptsetting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto DefaultPluginsSetting = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_defaultpluginssetting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto DefaultPopupsSetting = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_defaultpopupssetting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto DefaultNotificationsSetting = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_defaultnotificationssetting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto DefaultGeolocationSetting = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_defaultgeolocationsetting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto Disable3DAPIs = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_disable3dapis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto PolicyRefreshRate = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_policyrefreshrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto DownloadDirectory = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_downloaddirectory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto CookiesBlockedForUrls = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_cookiesblockedforurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto CookiesSessionOnlyForUrls = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_cookiessessiononlyforurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto ImagesAllowedForUrls = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_imagesallowedforurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto ImagesBlockedForUrls = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_imagesblockedforurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto JavaScriptAllowedForUrls = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_javascriptallowedforurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto JavaScriptBlockedForUrls = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_javascriptblockedforurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto PluginsAllowedForUrls = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_pluginsallowedforurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto PluginsBlockedForUrls = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_pluginsblockedforurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto PopupsAllowedForUrls = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_popupsallowedforurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto PopupsBlockedForUrls = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_popupsblockedforurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto CookiesAllowedForUrls = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_cookiesallowedforurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto EnabledPlugins = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_enabledplugins(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto DisabledPluginsExceptions = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_disabledpluginsexceptions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto TranslateEnabled = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_translateenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto AllowOutdatedPlugins = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_allowoutdatedplugins(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto BookmarkBarEnabled = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_bookmarkbarenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto EditBookmarksEnabled = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_editbookmarksenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto AllowFileSelectionDialogs = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_allowfileselectiondialogs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto DisabledSchemes = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_disabledschemes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto DiskCacheDir = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_diskcachedir(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto AllowCrossOriginAuthPrompt = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_allowcrossoriginauthprompt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto MaxConnectionsPerProxy = 94;
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_maxconnectionsperproxy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto IncognitoModeAvailability = 95;
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_incognitomodeavailability(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto RemoteAccessHostFirewallTraversal = 97;
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_remoteaccesshostfirewalltraversal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto ImportBookmarks = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_importbookmarks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto ImportHistory = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_importhistory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto ImportHomepage = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_importhomepage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto ImportSearchEngine = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_importsearchengine(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto ImportSavedPasswords = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_importsavedpasswords(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto AutoSelectCertificateForUrls = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_autoselectcertificateforurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto URLBlacklist = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_urlblacklist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto URLWhitelist = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_urlwhitelist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto NotificationsAllowedForUrls = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_notificationsallowedforurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto NotificationsBlockedForUrls = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_notificationsblockedforurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto CloudPrintSubmitEnabled = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_cloudprintsubmitenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto DiskCacheSize = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_diskcachesize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto ProxySettings = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_proxysettings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto DisablePrintPreview = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_disableprintpreview(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto EnableOnlineRevocationChecks = 131;
      case 131:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_enableonlinerevocationchecks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto BackgroundModeEnabled = 140;
      case 140:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_backgroundmodeenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto RestrictSigninToPattern = 149;
      case 149:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_restrictsignintopattern(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto ExtensionInstallSources = 150;
      case 150:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_extensioninstallsources(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto DefaultMediaStreamSetting = 151;
      case 151:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_defaultmediastreamsetting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto DisableSafeBrowsingProceedAnyway = 152;
      case 152:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_disablesafebrowsingproceedanyway(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto SpellCheckServiceEnabled = 153;
      case 153:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_spellcheckserviceenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto DisableScreenshots = 155;
      case 155:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_disablescreenshots(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto RemoteAccessHostDomain = 156;
      case 156:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_remoteaccesshostdomain(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto RemoteAccessHostRequireCurtain = 159;
      case 159:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_remoteaccesshostrequirecurtain(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto AudioCaptureAllowed = 162;
      case 162:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_audiocaptureallowed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto DefaultSearchProviderAlternateURLs = 163;
      case 163:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_defaultsearchprovideralternateurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto ForceSafeSearch = 164;
      case 164:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_forcesafesearch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto BuiltInDnsClientEnabled = 167;
      case 167:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_builtindnsclientenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto VideoCaptureAllowed = 169;
      case 169:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_videocaptureallowed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto ExtensionAllowedTypes = 170;
      case 170:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_extensionallowedtypes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto AllowDeletingBrowserHistory = 189;
      case 189:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_allowdeletingbrowserhistory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto HideWebStoreIcon = 191;
      case 191:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_hidewebstoreicon(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto SigninAllowed = 192;
      case 192:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_signinallowed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto VariationsRestrictParameter = 198;
      case 198:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_variationsrestrictparameter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto ContentPackDefaultFilteringBehavior = 206;
      case 206:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_contentpackdefaultfilteringbehavior(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto ContentPackManualBehaviorHosts = 207;
      case 207:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_contentpackmanualbehaviorhosts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto ContentPackManualBehaviorURLs = 208;
      case 208:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_contentpackmanualbehaviorurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto AudioCaptureAllowedUrls = 210;
      case 210:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_audiocaptureallowedurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto VideoCaptureAllowedUrls = 211;
      case 211:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_videocaptureallowedurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto ManagedBookmarks = 229;
      case 229:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_managedbookmarks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto MaxInvalidationFetchDelay = 230;
      case 230:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_maxinvalidationfetchdelay(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderImageURL = 231;
      case 231:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_defaultsearchproviderimageurl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderSearchURLPostParams = 232;
      case 232:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_defaultsearchprovidersearchurlpostparams(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderSuggestURLPostParams = 233;
      case 233:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_defaultsearchprovidersuggesturlpostparams(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderImageURLPostParams = 235;
      case 235:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_defaultsearchproviderimageurlpostparams(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto RemoteAccessHostAllowClientPairing = 236;
      case 236:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_remoteaccesshostallowclientpairing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto RequireOnlineRevocationChecksForLocalAnchors = 237;
      case 237:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_requireonlinerevocationchecksforlocalanchors(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderNewTabURL = 239;
      case 239:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_defaultsearchprovidernewtaburl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto FullscreenAllowed = 242;
      case 242:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_fullscreenallowed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto ForceEphemeralProfiles = 247;
      case 247:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_forceephemeralprofiles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto NativeMessagingBlacklist = 253;
      case 253:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_nativemessagingblacklist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto NativeMessagingWhitelist = 254;
      case 254:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_nativemessagingwhitelist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto NativeMessagingUserLevelHosts = 255;
      case 255:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_nativemessaginguserlevelhosts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto RemoteAccessHostAllowGnubbyAuth = 259;
      case 259:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_remoteaccesshostallowgnubbyauth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto WPADQuickCheckEnabled = 263;
      case 263:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_wpadquickcheckenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto RemoteAccessHostAllowRelayedConnection = 265;
      case 265:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_remoteaccesshostallowrelayedconnection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto RemoteAccessHostUdpPortRange = 266;
      case 266:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_remoteaccesshostudpportrange(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto ShowAppsShortcutInBookmarkBar = 269;
      case 269:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_showappsshortcutinbookmarkbar(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto RegisteredProtocolHandlers = 270;
      case 270:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_registeredprotocolhandlers(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto EnableDeprecatedWebPlatformFeatures = 272;
      case 272:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_enabledeprecatedwebplatformfeatures(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto NetworkPredictionOptions = 275;
      case 275:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_networkpredictionoptions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto BrowserGuestModeEnabled = 277;
      case 277:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_browserguestmodeenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto BrowserAddPersonEnabled = 278;
      case 278:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_browseraddpersonenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto ImportAutofillFormData = 279;
      case 279:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_importautofillformdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto ExtensionSettings = 280;
      case 280:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_extensionsettings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto SSLVersionMin = 281;
      case 281:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_sslversionmin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto ForceGoogleSafeSearch = 284;
      case 284:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_forcegooglesafesearch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto ForceYouTubeSafetyMode = 285;
      case 285:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_forceyoutubesafetymode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto RemoteAccessHostMatchUsername = 287;
      case 287:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_remoteaccesshostmatchusername(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto RemoteAccessHostTokenUrl = 288;
      case 288:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_remoteaccesshosttokenurl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto RemoteAccessHostTokenValidationUrl = 289;
      case 289:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_remoteaccesshosttokenvalidationurl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto RemoteAccessHostTokenValidationCertificateIssuer = 290;
      case 290:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_remoteaccesshosttokenvalidationcertificateissuer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto SSLErrorOverrideAllowed = 302;
      case 302:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_sslerroroverrideallowed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto QuicAllowed = 303;
      case 303:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_quicallowed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto HardwareAccelerationModeEnabled = 306;
      case 306:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_hardwareaccelerationmodeenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto DefaultPrinterSelection = 310;
      case 310:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_defaultprinterselection(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto AllowDinosaurEasterEgg = 311;
      case 311:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_allowdinosaureasteregg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto RemoteAccessHostClientDomain = 318;
      case 318:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_remoteaccesshostclientdomain(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto DefaultWebBluetoothGuardSetting = 322;
      case 322:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_defaultwebbluetoothguardsetting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto SuppressUnsupportedOSWarning = 326;
      case 326:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_suppressunsupportedoswarning(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto TaskManagerEndProcessEnabled = 329;
      case 329:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_taskmanagerendprocessenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto AllowedDomainsForApps = 333;
      case 333:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_alloweddomainsforapps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto EnableMediaRouter = 335;
      case 335:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_enablemediarouter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto CertificateTransparencyEnforcementDisabledForUrls = 337;
      case 337:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_certificatetransparencyenforcementdisabledforurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto WebRtcUdpPortRange = 341;
      case 341:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_webrtcudpportrange(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto ComponentUpdatesEnabled = 344;
      case 344:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_componentupdatesenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto AlwaysOpenPdfExternally = 349;
      case 349:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_alwaysopenpdfexternally(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto ForceYouTubeRestrict = 350;
      case 350:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_forceyoutuberestrict(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto NewTabPageLocation = 362;
      case 362:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_newtabpagelocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto ShowCastIconInToolbar = 364;
      case 364:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_showcasticonintoolbar(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto RemoteAccessHostDomainList = 370;
      case 370:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_remoteaccesshostdomainlist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto RemoteAccessHostClientDomainList = 371;
      case 371:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_remoteaccesshostclientdomainlist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto BrowserNetworkTimeQueriesEnabled = 372;
      case 372:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_browsernetworktimequeriesenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto DownloadRestrictions = 373;
      case 373:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_downloadrestrictions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto PrintPreviewUseSystemDefaultPrinter = 375;
      case 375:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_printpreviewusesystemdefaultprinter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto CloudPolicyOverridesPlatformPolicy = 383;
      case 383:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_cloudpolicyoverridesplatformpolicy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto RunAllFlashInAllowMode = 393;
      case 393:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_runallflashinallowmode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto AutofillCreditCardEnabled = 394;
      case 394:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_autofillcreditcardenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto NtlmV2Enabled = 395;
      case 395:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_ntlmv2enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto PromptForDownloadLocation = 397;
      case 397:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_promptfordownloadlocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto IsolateOrigins = 400;
      case 400:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_isolateorigins(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto SitePerProcess = 401;
      case 401:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_siteperprocess(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto UnsafelyTreatInsecureOriginAsSecure = 402;
      case 402:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_unsafelytreatinsecureoriginassecure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto DefaultDownloadDirectory = 403;
      case 403:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_defaultdownloaddirectory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto SecurityKeyPermitAttestation = 404;
      case 404:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_securitykeypermitattestation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto AbusiveExperienceInterventionEnforce = 406;
      case 406:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_abusiveexperienceinterventionenforce(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto SpellcheckLanguage = 407;
      case 407:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_spellchecklanguage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto SpellcheckEnabled = 410;
      case 410:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_spellcheckenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto AdsSettingForIntrusiveAdsSites = 411;
      case 411:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_adssettingforintrusiveadssites(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto PasswordProtectionWarningTrigger = 413;
      case 413:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_passwordprotectionwarningtrigger(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto RelaunchNotification = 421;
      case 421:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_relaunchnotification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto RelaunchNotificationPeriod = 422;
      case 422:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_relaunchnotificationperiod(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto SafeBrowsingWhitelistDomains = 424;
      case 424:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_safebrowsingwhitelistdomains(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto PasswordProtectionLoginURLs = 425;
      case 425:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_passwordprotectionloginurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto PasswordProtectionChangePasswordURL = 426;
      case 426:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_passwordprotectionchangepasswordurl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto SafeBrowsingExtendedReportingEnabled = 431;
      case 431:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_safebrowsingextendedreportingenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto AutoplayAllowed = 432;
      case 432:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_autoplayallowed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto AutoplayWhitelist = 433;
      case 433:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_autoplaywhitelist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto DefaultWebUsbGuardSetting = 436;
      case 436:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_defaultwebusbguardsetting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto CertificateTransparencyEnforcementDisabledForCas = 437;
      case 437:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_certificatetransparencyenforcementdisabledforcas(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto CertificateTransparencyEnforcementDisabledForLegacyCas = 438;
      case 438:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_certificatetransparencyenforcementdisabledforlegacycas(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto MediaRouterCastAllowAllIPs = 439;
      case 439:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_mediaroutercastallowallips(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto WebUsbAskForUrls = 441;
      case 441:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_webusbaskforurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto WebUsbBlockedForUrls = 442;
      case 442:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_webusbblockedforurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto DeveloperToolsAvailability = 445;
      case 445:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_developertoolsavailability(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto PromotionalTabsEnabled = 456;
      case 456:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_promotionaltabsenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto SafeSitesFilterBehavior = 457;
      case 457:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_safesitesfilterbehavior(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto OverrideSecurityRestrictionsOnInsecureOrigin = 459;
      case 459:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_overridesecurityrestrictionsoninsecureorigin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto AutofillAddressEnabled = 461;
      case 461:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_autofilladdressenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto UrlKeyedAnonymizedDataCollectionEnabled = 463;
      case 463:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_urlkeyedanonymizeddatacollectionenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto WebRtcEventLogCollectionAllowed = 466;
      case 466:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_webrtceventlogcollectionallowed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto CoalesceH2ConnectionsWithClientCertificatesForHosts = 468;
      case 468:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_coalesceh2connectionswithclientcertificatesforhosts(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto WebAppInstallForceList = 470;
      case 470:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_webappinstallforcelist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto ReportVersionData = 472;
      case 472:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_reportversiondata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto ReportPolicyData = 473;
      case 473:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_reportpolicydata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto ReportMachineIDData = 474;
      case 474:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_reportmachineiddata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto ReportUserIDData = 475;
      case 475:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_reportuseriddata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto PrintingPaperSizeDefault = 481;
      case 481:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_printingpapersizedefault(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto PrintHeaderFooter = 482;
      case 482:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_printheaderfooter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto EnterpriseHardwarePlatformAPIEnabled = 485;
      case 485:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_enterprisehardwareplatformapienabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto WebUsbAllowDevicesForUrls = 488;
      case 488:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_webusballowdevicesforurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto BrowserSignin = 489;
      case 489:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_browsersignin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto CloudReportingEnabled = 495;
      case 495:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_cloudreportingenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto AlternativeBrowserPath = 496;
      case 496:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_alternativebrowserpath(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto AlternativeBrowserParameters = 497;
      case 497:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_alternativebrowserparameters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto BrowserSwitcherUrlList = 498;
      case 498:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_browserswitcherurllist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto BrowserSwitcherUrlGreylist = 499;
      case 499:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_browserswitcherurlgreylist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto ReportExtensionsAndPluginsData = 501;
      case 501:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_reportextensionsandpluginsdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto CloudManagementEnrollmentMandatory = 507;
      case 507:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_cloudmanagementenrollmentmandatory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto CloudManagementEnrollmentToken = 512;
      case 512:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_cloudmanagementenrollmenttoken(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto BrowserSwitcherExternalSitelistUrl = 513;
      case 513:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_browserswitcherexternalsitelisturl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto BrowserSwitcherEnabled = 519;
      case 519:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_browserswitcherenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto BrowserSwitcherKeepLastChromeTab = 521;
      case 521:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_browserswitcherkeeplastchrometab(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto BrowserSwitcherDelay = 526;
      case 526:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_browserswitcherdelay(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto AuthNegotiateDelegateByKdcPolicy = 530;
      case 530:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_authnegotiatedelegatebykdcpolicy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto AllowPopupsDuringPageUnload = 535;
      case 535:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_allowpopupsduringpageunload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto RemoteAccessHostAllowFileTransfer = 536;
      case 536:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_remoteaccesshostallowfiletransfer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto SpellcheckLanguageBlacklist = 538;
      case 538:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_spellchecklanguageblacklist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto SignedHTTPExchangeEnabled = 544;
      case 544:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_signedhttpexchangeenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto ExtensionInstallListsMergeEnabled = 546;
      case 546:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_extensioninstalllistsmergeenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto PolicyListMultipleSourceMergeList = 556;
      case 556:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_policylistmultiplesourcemergelist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto BrowserSwitcherExternalGreylistUrl = 566;
      case 566:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_browserswitcherexternalgreylisturl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto PolicyDictionaryMultipleSourceMergeList = 567;
      case 567:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_policydictionarymultiplesourcemergelist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto CommandLineFlagSecurityWarningsEnabled = 568;
      case 568:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_commandlineflagsecuritywarningsenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto UserFeedbackAllowed = 572;
      case 572:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_userfeedbackallowed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto BrowserGuestModeEnforced = 576;
      case 576:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_browserguestmodeenforced(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto PasswordLeakDetectionEnabled = 582;
      case 582:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_passwordleakdetectionenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto DnsOverHttpsMode = 584;
      case 584:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_dnsoverhttpsmode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto SendFilesForMalwareCheck = 585;
      case 585:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_sendfilesformalwarecheck(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto PolicyAtomicGroupsEnabled = 586;
      case 586:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_policyatomicgroupsenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto UnsafeEventsReportingEnabled = 587;
      case 587:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_unsafeeventsreportingenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto BlockLargeFileTransfer = 588;
      case 588:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_blocklargefiletransfer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto DelayDeliveryUntilVerdict = 589;
      case 589:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_delaydeliveryuntilverdict(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto AllowPasswordProtectedFiles = 590;
      case 590:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_allowpasswordprotectedfiles(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto CheckContentCompliance = 591;
      case 591:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_checkcontentcompliance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto URLsToCheckComplianceOfDownloadedContent = 592;
      case 592:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_urlstocheckcomplianceofdownloadedcontent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto URLsToNotCheckComplianceOfUploadedContent = 593;
      case 593:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_urlstonotcheckcomplianceofuploadedcontent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto URLsToCheckForMalwareOfUploadedContent = 602;
      case 602:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_urlstocheckformalwareofuploadedcontent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto HSTSPolicyBypassList = 603;
      case 603:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_hstspolicybypasslist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto AllowSyncXHRInPageDismissal = 606;
      case 606:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_allowsyncxhrinpagedismissal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto CloudExtensionRequestEnabled = 610;
      case 610:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_cloudextensionrequestenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto SharedClipboardEnabled = 612;
      case 612:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_sharedclipboardenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto PrintingAllowedBackgroundGraphicsModes = 623;
      case 623:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_printingallowedbackgroundgraphicsmodes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto PrintingBackgroundGraphicsDefault = 624;
      case 624:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_printingbackgroundgraphicsdefault(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto LegacySameSiteCookieBehaviorEnabled = 625;
      case 625:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_legacysamesitecookiebehaviorenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto LegacySameSiteCookieBehaviorEnabledForDomainList = 626;
      case 626:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_legacysamesitecookiebehaviorenabledfordomainlist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto TLS13HardeningForLocalAnchorsEnabled = 628;
      case 628:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_tls13hardeningforlocalanchorsenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto AudioSandboxEnabled = 629;
      case 629:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_audiosandboxenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto CorsMitigationList = 631;
      case 631:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_corsmitigationlist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto CorsLegacyModeEnabled = 632;
      case 632:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_corslegacymodeenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto ExternalProtocolDialogShowAlwaysOpenCheckbox = 634;
      case 634:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_externalprotocoldialogshowalwaysopencheckbox(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto DefaultInsecureContentSetting = 635;
      case 635:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_defaultinsecurecontentsetting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto InsecureContentAllowedForUrls = 636;
      case 636:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_insecurecontentallowedforurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto InsecureContentBlockedForUrls = 637;
      case 637:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_insecurecontentblockedforurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto BlockExternalExtensions = 639;
      case 639:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_blockexternalextensions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto WebRtcLocalIpsAllowedUrls = 642;
      case 642:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_webrtclocalipsallowedurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto DnsOverHttpsTemplates = 644;
      case 644:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_dnsoverhttpstemplates(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto GloballyScopeHTTPAuthCacheEnabled = 645;
      case 645:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_globallyscopehttpauthcacheenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto ClickToCallEnabled = 647;
      case 647:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_clicktocallenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto PrinterTypeDenyList = 649;
      case 649:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_printertypedenylist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto ForceLegacyDefaultReferrerPolicy = 650;
      case 650:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_forcelegacydefaultreferrerpolicy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto SyncTypesListDisabled = 651;
      case 651:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_synctypeslistdisabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto AmbientAuthenticationInPrivateModesEnabled = 652;
      case 652:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_ambientauthenticationinprivatemodesenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto PaymentMethodQueryEnabled = 653;
      case 653:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_paymentmethodqueryenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto StricterMixedContentTreatmentEnabled = 654;
      case 654:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_strictermixedcontenttreatmentenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto NTPCustomBackgroundEnabled = 655;
      case 655:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_ntpcustombackgroundenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto DNSInterceptionChecksEnabled = 656;
      case 656:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_dnsinterceptionchecksenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto LocalDiscoveryEnabled = 664;
      case 664:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_localdiscoveryenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto ChromeVariations = 665;
      case 665:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_chromevariations(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto ScreenCaptureAllowed = 668;
      case 668:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_screencaptureallowed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto BlockUnsupportedFiletypes = 670;
      case 670:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_blockunsupportedfiletypes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto URLsToNotCheckForMalwareOfDownloadedContent = 671;
      case 671:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_urlstonotcheckformalwareofdownloadedcontent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto UserDataSnapshotRetentionLimit = 675;
      case 675:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_userdatasnapshotretentionlimit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto AllowNativeNotifications = 680;
      case 680:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_allownativenotifications(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.IntegerPolicyProto SafeBrowsingProtectionLevel = 686;
      case 686:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_safebrowsingprotectionlevel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto AdvancedProtectionAllowed = 687;
      case 687:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_advancedprotectionallowed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto ScrollToTextFragmentEnabled = 689;
      case 689:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_scrolltotextfragmentenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto OnFileAttachedEnterpriseConnector = 695;
      case 695:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_onfileattachedenterpriseconnector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto OnFileDownloadedEnterpriseConnector = 698;
      case 698:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_onfiledownloadedenterpriseconnector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto OnBulkDataEntryEnterpriseConnector = 699;
      case 699:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_onbulkdataentryenterpriseconnector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto OnSecurityEventEnterpriseConnector = 701;
      case 701:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_onsecurityevententerpriseconnector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto AutoOpenFileTypes = 702;
      case 702:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_autoopenfiletypes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto AccessibilityImageLabelsEnabled = 705;
      case 705:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_accessibilityimagelabelsenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto AppCacheForceEnabled = 706;
      case 706:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_appcacheforceenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto AutoOpenAllowedForURLs = 709;
      case 709:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_autoopenallowedforurls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringListPolicyProto EnableExperimentalPolicies = 713;
      case 713:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_enableexperimentalpolicies(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto IntensiveWakeUpThrottlingEnabled = 715;
      case 715:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_intensivewakeupthrottlingenabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.BooleanPolicyProto DefaultSearchProviderContextMenuAccessAllowed = 717;
      case 717:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_defaultsearchprovidercontextmenuaccessallowed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_management.StringPolicyProto AutoLaunchProtocolsFromOrigins = 724;
      case 724:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_autolaunchprotocolsfromorigins(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CloudPolicySettings::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_management.CloudPolicySettings)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_management.StringPolicyProto HomepageLocation = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_homepagelocation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto HomepageIsNewTabPage = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_homepageisnewtabpage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto DefaultBrowserSettingEnabled = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultbrowsersettingenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto AlternateErrorPagesEnabled = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_alternateerrorpagesenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto SearchSuggestEnabled = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_searchsuggestenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto JavascriptEnabled = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_javascriptenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto IncognitoEnabled = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_incognitoenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto SavingBrowserHistoryDisabled = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_savingbrowserhistorydisabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto PrintingEnabled = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_printingenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto CloudPrintProxyEnabled = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cloudprintproxyenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto SafeBrowsingEnabled = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_safebrowsingenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto MetricsReportingEnabled = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_metricsreportingenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto PasswordManagerEnabled = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_passwordmanagerenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto AutoFillEnabled = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_autofillenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto DisabledPlugins = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_disabledplugins()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto SyncDisabled = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_syncdisabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto ProxyMode = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_proxymode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto ProxyServerMode = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_proxyservermode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto ProxyServer = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_proxyserver()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto ProxyPacUrl = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_proxypacurl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto ProxyBypassList = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_proxybypasslist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto AuthSchemes = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_authschemes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto DisableAuthNegotiateCnameLookup = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_disableauthnegotiatecnamelookup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto EnableAuthNegotiatePort = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enableauthnegotiateport()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto AuthServerWhitelist = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_authserverwhitelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto AuthNegotiateDelegateWhitelist = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (258 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_authnegotiatedelegatewhitelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto GSSAPILibraryName = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (266 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gssapilibraryname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto ExtensionInstallBlacklist = 34;
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (274 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_extensioninstallblacklist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto ExtensionInstallWhitelist = 35;
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (282 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_extensioninstallwhitelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto ExtensionInstallForcelist = 36;
      case 36: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (290 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_extensioninstallforcelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto ShowHomeButton = 37;
      case 37: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (298 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_showhomebutton()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto DeveloperToolsDisabled = 38;
      case 38: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (306 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_developertoolsdisabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto RestoreOnStartup = 39;
      case 39: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (314 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_restoreonstartup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto RestoreOnStartupURLs = 40;
      case 40: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (322 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_restoreonstartupurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto BlockThirdPartyCookies = 41;
      case 41: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (330 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_blockthirdpartycookies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto DefaultSearchProviderEnabled = 42;
      case 42: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (338 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultsearchproviderenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderName = 43;
      case 43: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (346 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultsearchprovidername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderKeyword = 44;
      case 44: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (354 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultsearchproviderkeyword()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderSearchURL = 45;
      case 45: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (362 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultsearchprovidersearchurl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderSuggestURL = 46;
      case 46: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (370 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultsearchprovidersuggesturl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderIconURL = 48;
      case 48: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (386 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultsearchprovidericonurl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto DefaultSearchProviderEncodings = 49;
      case 49: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (394 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultsearchproviderencodings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto DefaultCookiesSetting = 50;
      case 50: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (402 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultcookiessetting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto DefaultImagesSetting = 51;
      case 51: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (410 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultimagessetting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto DefaultJavaScriptSetting = 52;
      case 52: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (418 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultjavascriptsetting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto DefaultPluginsSetting = 53;
      case 53: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (426 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultpluginssetting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto DefaultPopupsSetting = 54;
      case 54: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (434 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultpopupssetting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto DefaultNotificationsSetting = 55;
      case 55: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (442 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultnotificationssetting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto DefaultGeolocationSetting = 56;
      case 56: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (450 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultgeolocationsetting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto Disable3DAPIs = 57;
      case 57: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (458 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_disable3dapis()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto PolicyRefreshRate = 58;
      case 58: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (466 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_policyrefreshrate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto DownloadDirectory = 66;
      case 66: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (530 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_downloaddirectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto CookiesBlockedForUrls = 69;
      case 69: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (554 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cookiesblockedforurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto CookiesSessionOnlyForUrls = 70;
      case 70: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (562 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cookiessessiononlyforurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto ImagesAllowedForUrls = 71;
      case 71: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (570 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_imagesallowedforurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto ImagesBlockedForUrls = 72;
      case 72: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (578 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_imagesblockedforurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto JavaScriptAllowedForUrls = 73;
      case 73: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (586 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_javascriptallowedforurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto JavaScriptBlockedForUrls = 74;
      case 74: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (594 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_javascriptblockedforurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto PluginsAllowedForUrls = 75;
      case 75: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (602 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pluginsallowedforurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto PluginsBlockedForUrls = 76;
      case 76: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (610 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pluginsblockedforurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto PopupsAllowedForUrls = 77;
      case 77: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (618 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_popupsallowedforurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto PopupsBlockedForUrls = 78;
      case 78: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (626 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_popupsblockedforurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto CookiesAllowedForUrls = 79;
      case 79: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (634 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cookiesallowedforurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto EnabledPlugins = 80;
      case 80: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (642 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enabledplugins()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto DisabledPluginsExceptions = 81;
      case 81: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (650 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_disabledpluginsexceptions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto TranslateEnabled = 82;
      case 82: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (658 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_translateenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto AllowOutdatedPlugins = 83;
      case 83: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (666 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_allowoutdatedplugins()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto BookmarkBarEnabled = 84;
      case 84: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (674 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bookmarkbarenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto EditBookmarksEnabled = 85;
      case 85: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (682 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_editbookmarksenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto AllowFileSelectionDialogs = 86;
      case 86: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (690 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_allowfileselectiondialogs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto DisabledSchemes = 87;
      case 87: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (698 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_disabledschemes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto DiskCacheDir = 90;
      case 90: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (722 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_diskcachedir()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto AllowCrossOriginAuthPrompt = 91;
      case 91: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (730 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_allowcrossoriginauthprompt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto MaxConnectionsPerProxy = 94;
      case 94: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (754 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_maxconnectionsperproxy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto IncognitoModeAvailability = 95;
      case 95: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (762 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_incognitomodeavailability()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto RemoteAccessHostFirewallTraversal = 97;
      case 97: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (778 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_remoteaccesshostfirewalltraversal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto ImportBookmarks = 99;
      case 99: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (794 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_importbookmarks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto ImportHistory = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_importhistory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto ImportHomepage = 101;
      case 101: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (810 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_importhomepage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto ImportSearchEngine = 102;
      case 102: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (818 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_importsearchengine()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto ImportSavedPasswords = 103;
      case 103: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (826 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_importsavedpasswords()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto AutoSelectCertificateForUrls = 104;
      case 104: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (834 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_autoselectcertificateforurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto URLBlacklist = 105;
      case 105: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (842 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_urlblacklist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto URLWhitelist = 106;
      case 106: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (850 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_urlwhitelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto NotificationsAllowedForUrls = 107;
      case 107: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (858 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_notificationsallowedforurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto NotificationsBlockedForUrls = 108;
      case 108: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (866 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_notificationsblockedforurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto CloudPrintSubmitEnabled = 111;
      case 111: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (890 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cloudprintsubmitenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto DiskCacheSize = 112;
      case 112: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (898 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_diskcachesize()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto ProxySettings = 118;
      case 118: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (946 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_proxysettings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto DisablePrintPreview = 119;
      case 119: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (954 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_disableprintpreview()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto EnableOnlineRevocationChecks = 131;
      case 131: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1050 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enableonlinerevocationchecks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto BackgroundModeEnabled = 140;
      case 140: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_backgroundmodeenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto RestrictSigninToPattern = 149;
      case 149: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_restrictsignintopattern()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto ExtensionInstallSources = 150;
      case 150: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_extensioninstallsources()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto DefaultMediaStreamSetting = 151;
      case 151: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultmediastreamsetting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto DisableSafeBrowsingProceedAnyway = 152;
      case 152: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_disablesafebrowsingproceedanyway()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto SpellCheckServiceEnabled = 153;
      case 153: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_spellcheckserviceenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto DisableScreenshots = 155;
      case 155: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_disablescreenshots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto RemoteAccessHostDomain = 156;
      case 156: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_remoteaccesshostdomain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto RemoteAccessHostRequireCurtain = 159;
      case 159: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1274 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_remoteaccesshostrequirecurtain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto AudioCaptureAllowed = 162;
      case 162: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1298 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_audiocaptureallowed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto DefaultSearchProviderAlternateURLs = 163;
      case 163: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1306 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultsearchprovideralternateurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto ForceSafeSearch = 164;
      case 164: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1314 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_forcesafesearch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto BuiltInDnsClientEnabled = 167;
      case 167: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1338 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_builtindnsclientenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto VideoCaptureAllowed = 169;
      case 169: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1354 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_videocaptureallowed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto ExtensionAllowedTypes = 170;
      case 170: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1362 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_extensionallowedtypes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto AllowDeletingBrowserHistory = 189;
      case 189: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1514 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_allowdeletingbrowserhistory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto HideWebStoreIcon = 191;
      case 191: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1530 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_hidewebstoreicon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto SigninAllowed = 192;
      case 192: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1538 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_signinallowed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto VariationsRestrictParameter = 198;
      case 198: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1586 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_variationsrestrictparameter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto ContentPackDefaultFilteringBehavior = 206;
      case 206: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1650 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_contentpackdefaultfilteringbehavior()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto ContentPackManualBehaviorHosts = 207;
      case 207: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1658 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_contentpackmanualbehaviorhosts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto ContentPackManualBehaviorURLs = 208;
      case 208: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1666 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_contentpackmanualbehaviorurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto AudioCaptureAllowedUrls = 210;
      case 210: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1682 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_audiocaptureallowedurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto VideoCaptureAllowedUrls = 211;
      case 211: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1690 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_videocaptureallowedurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto ManagedBookmarks = 229;
      case 229: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1834 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_managedbookmarks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto MaxInvalidationFetchDelay = 230;
      case 230: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1842 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_maxinvalidationfetchdelay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderImageURL = 231;
      case 231: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1850 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultsearchproviderimageurl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderSearchURLPostParams = 232;
      case 232: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1858 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultsearchprovidersearchurlpostparams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderSuggestURLPostParams = 233;
      case 233: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1866 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultsearchprovidersuggesturlpostparams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderImageURLPostParams = 235;
      case 235: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1882 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultsearchproviderimageurlpostparams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto RemoteAccessHostAllowClientPairing = 236;
      case 236: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1890 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_remoteaccesshostallowclientpairing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto RequireOnlineRevocationChecksForLocalAnchors = 237;
      case 237: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1898 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_requireonlinerevocationchecksforlocalanchors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto DefaultSearchProviderNewTabURL = 239;
      case 239: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1914 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultsearchprovidernewtaburl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto FullscreenAllowed = 242;
      case 242: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1938 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fullscreenallowed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto ForceEphemeralProfiles = 247;
      case 247: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1978 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_forceephemeralprofiles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto NativeMessagingBlacklist = 253;
      case 253: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2026 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_nativemessagingblacklist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto NativeMessagingWhitelist = 254;
      case 254: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2034 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_nativemessagingwhitelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto NativeMessagingUserLevelHosts = 255;
      case 255: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2042 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_nativemessaginguserlevelhosts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto RemoteAccessHostAllowGnubbyAuth = 259;
      case 259: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2074 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_remoteaccesshostallowgnubbyauth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto WPADQuickCheckEnabled = 263;
      case 263: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_wpadquickcheckenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto RemoteAccessHostAllowRelayedConnection = 265;
      case 265: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_remoteaccesshostallowrelayedconnection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto RemoteAccessHostUdpPortRange = 266;
      case 266: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_remoteaccesshostudpportrange()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto ShowAppsShortcutInBookmarkBar = 269;
      case 269: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_showappsshortcutinbookmarkbar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto RegisteredProtocolHandlers = 270;
      case 270: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_registeredprotocolhandlers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto EnableDeprecatedWebPlatformFeatures = 272;
      case 272: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enabledeprecatedwebplatformfeatures()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto NetworkPredictionOptions = 275;
      case 275: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_networkpredictionoptions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto BrowserGuestModeEnabled = 277;
      case 277: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_browserguestmodeenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto BrowserAddPersonEnabled = 278;
      case 278: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_browseraddpersonenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto ImportAutofillFormData = 279;
      case 279: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_importautofillformdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto ExtensionSettings = 280;
      case 280: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_extensionsettings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto SSLVersionMin = 281;
      case 281: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sslversionmin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto ForceGoogleSafeSearch = 284;
      case 284: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2274 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_forcegooglesafesearch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto ForceYouTubeSafetyMode = 285;
      case 285: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2282 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_forceyoutubesafetymode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto RemoteAccessHostMatchUsername = 287;
      case 287: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2298 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_remoteaccesshostmatchusername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto RemoteAccessHostTokenUrl = 288;
      case 288: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2306 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_remoteaccesshosttokenurl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto RemoteAccessHostTokenValidationUrl = 289;
      case 289: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2314 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_remoteaccesshosttokenvalidationurl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto RemoteAccessHostTokenValidationCertificateIssuer = 290;
      case 290: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2322 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_remoteaccesshosttokenvalidationcertificateissuer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto SSLErrorOverrideAllowed = 302;
      case 302: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2418 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sslerroroverrideallowed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto QuicAllowed = 303;
      case 303: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2426 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_quicallowed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto HardwareAccelerationModeEnabled = 306;
      case 306: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2450 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_hardwareaccelerationmodeenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto DefaultPrinterSelection = 310;
      case 310: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2482 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultprinterselection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto AllowDinosaurEasterEgg = 311;
      case 311: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2490 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_allowdinosaureasteregg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto RemoteAccessHostClientDomain = 318;
      case 318: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2546 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_remoteaccesshostclientdomain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto DefaultWebBluetoothGuardSetting = 322;
      case 322: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2578 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultwebbluetoothguardsetting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto SuppressUnsupportedOSWarning = 326;
      case 326: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2610 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_suppressunsupportedoswarning()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto TaskManagerEndProcessEnabled = 329;
      case 329: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2634 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_taskmanagerendprocessenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto AllowedDomainsForApps = 333;
      case 333: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2666 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_alloweddomainsforapps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto EnableMediaRouter = 335;
      case 335: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2682 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enablemediarouter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto CertificateTransparencyEnforcementDisabledForUrls = 337;
      case 337: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2698 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_certificatetransparencyenforcementdisabledforurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto WebRtcUdpPortRange = 341;
      case 341: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2730 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_webrtcudpportrange()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto ComponentUpdatesEnabled = 344;
      case 344: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2754 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_componentupdatesenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto AlwaysOpenPdfExternally = 349;
      case 349: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2794 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_alwaysopenpdfexternally()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto ForceYouTubeRestrict = 350;
      case 350: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_forceyoutuberestrict()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto NewTabPageLocation = 362;
      case 362: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2898 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_newtabpagelocation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto ShowCastIconInToolbar = 364;
      case 364: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2914 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_showcasticonintoolbar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto RemoteAccessHostDomainList = 370;
      case 370: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2962 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_remoteaccesshostdomainlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto RemoteAccessHostClientDomainList = 371;
      case 371: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2970 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_remoteaccesshostclientdomainlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto BrowserNetworkTimeQueriesEnabled = 372;
      case 372: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2978 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_browsernetworktimequeriesenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto DownloadRestrictions = 373;
      case 373: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2986 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_downloadrestrictions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto PrintPreviewUseSystemDefaultPrinter = 375;
      case 375: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3002 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_printpreviewusesystemdefaultprinter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto CloudPolicyOverridesPlatformPolicy = 383;
      case 383: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3066 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cloudpolicyoverridesplatformpolicy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto RunAllFlashInAllowMode = 393;
      case 393: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_runallflashinallowmode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto AutofillCreditCardEnabled = 394;
      case 394: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_autofillcreditcardenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto NtlmV2Enabled = 395;
      case 395: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ntlmv2enabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto PromptForDownloadLocation = 397;
      case 397: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_promptfordownloadlocation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto IsolateOrigins = 400;
      case 400: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_isolateorigins()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto SitePerProcess = 401;
      case 401: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_siteperprocess()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto UnsafelyTreatInsecureOriginAsSecure = 402;
      case 402: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_unsafelytreatinsecureoriginassecure()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto DefaultDownloadDirectory = 403;
      case 403: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultdownloaddirectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto SecurityKeyPermitAttestation = 404;
      case 404: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_securitykeypermitattestation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto AbusiveExperienceInterventionEnforce = 406;
      case 406: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_abusiveexperienceinterventionenforce()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto SpellcheckLanguage = 407;
      case 407: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3258 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_spellchecklanguage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto SpellcheckEnabled = 410;
      case 410: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3282 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_spellcheckenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto AdsSettingForIntrusiveAdsSites = 411;
      case 411: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3290 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_adssettingforintrusiveadssites()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto PasswordProtectionWarningTrigger = 413;
      case 413: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3306 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_passwordprotectionwarningtrigger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto RelaunchNotification = 421;
      case 421: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3370 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_relaunchnotification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto RelaunchNotificationPeriod = 422;
      case 422: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3378 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_relaunchnotificationperiod()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto SafeBrowsingWhitelistDomains = 424;
      case 424: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3394 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_safebrowsingwhitelistdomains()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto PasswordProtectionLoginURLs = 425;
      case 425: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3402 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_passwordprotectionloginurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto PasswordProtectionChangePasswordURL = 426;
      case 426: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3410 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_passwordprotectionchangepasswordurl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto SafeBrowsingExtendedReportingEnabled = 431;
      case 431: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3450 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_safebrowsingextendedreportingenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto AutoplayAllowed = 432;
      case 432: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3458 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_autoplayallowed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto AutoplayWhitelist = 433;
      case 433: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3466 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_autoplaywhitelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto DefaultWebUsbGuardSetting = 436;
      case 436: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3490 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultwebusbguardsetting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto CertificateTransparencyEnforcementDisabledForCas = 437;
      case 437: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3498 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_certificatetransparencyenforcementdisabledforcas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto CertificateTransparencyEnforcementDisabledForLegacyCas = 438;
      case 438: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3506 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_certificatetransparencyenforcementdisabledforlegacycas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto MediaRouterCastAllowAllIPs = 439;
      case 439: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3514 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mediaroutercastallowallips()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto WebUsbAskForUrls = 441;
      case 441: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3530 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_webusbaskforurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto WebUsbBlockedForUrls = 442;
      case 442: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3538 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_webusbblockedforurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto DeveloperToolsAvailability = 445;
      case 445: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3562 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_developertoolsavailability()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto PromotionalTabsEnabled = 456;
      case 456: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3650 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_promotionaltabsenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto SafeSitesFilterBehavior = 457;
      case 457: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3658 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_safesitesfilterbehavior()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto OverrideSecurityRestrictionsOnInsecureOrigin = 459;
      case 459: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3674 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_overridesecurityrestrictionsoninsecureorigin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto AutofillAddressEnabled = 461;
      case 461: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3690 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_autofilladdressenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto UrlKeyedAnonymizedDataCollectionEnabled = 463;
      case 463: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3706 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_urlkeyedanonymizeddatacollectionenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto WebRtcEventLogCollectionAllowed = 466;
      case 466: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3730 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_webrtceventlogcollectionallowed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto CoalesceH2ConnectionsWithClientCertificatesForHosts = 468;
      case 468: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3746 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_coalesceh2connectionswithclientcertificatesforhosts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto WebAppInstallForceList = 470;
      case 470: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3762 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_webappinstallforcelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto ReportVersionData = 472;
      case 472: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3778 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_reportversiondata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto ReportPolicyData = 473;
      case 473: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3786 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_reportpolicydata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto ReportMachineIDData = 474;
      case 474: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3794 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_reportmachineiddata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto ReportUserIDData = 475;
      case 475: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_reportuseriddata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto PrintingPaperSizeDefault = 481;
      case 481: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3850 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_printingpapersizedefault()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto PrintHeaderFooter = 482;
      case 482: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3858 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_printheaderfooter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto EnterpriseHardwarePlatformAPIEnabled = 485;
      case 485: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3882 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enterprisehardwareplatformapienabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto WebUsbAllowDevicesForUrls = 488;
      case 488: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3906 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_webusballowdevicesforurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto BrowserSignin = 489;
      case 489: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3914 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_browsersignin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto CloudReportingEnabled = 495;
      case 495: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3962 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cloudreportingenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto AlternativeBrowserPath = 496;
      case 496: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3970 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_alternativebrowserpath()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto AlternativeBrowserParameters = 497;
      case 497: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3978 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_alternativebrowserparameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto BrowserSwitcherUrlList = 498;
      case 498: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3986 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_browserswitcherurllist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto BrowserSwitcherUrlGreylist = 499;
      case 499: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3994 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_browserswitcherurlgreylist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto ReportExtensionsAndPluginsData = 501;
      case 501: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4010 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_reportextensionsandpluginsdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto CloudManagementEnrollmentMandatory = 507;
      case 507: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4058 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cloudmanagementenrollmentmandatory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto CloudManagementEnrollmentToken = 512;
      case 512: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4098 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cloudmanagementenrollmenttoken()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto BrowserSwitcherExternalSitelistUrl = 513;
      case 513: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_browserswitcherexternalsitelisturl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto BrowserSwitcherEnabled = 519;
      case 519: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_browserswitcherenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto BrowserSwitcherKeepLastChromeTab = 521;
      case 521: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_browserswitcherkeeplastchrometab()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto BrowserSwitcherDelay = 526;
      case 526: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_browserswitcherdelay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto AuthNegotiateDelegateByKdcPolicy = 530;
      case 530: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_authnegotiatedelegatebykdcpolicy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto AllowPopupsDuringPageUnload = 535;
      case 535: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4282 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_allowpopupsduringpageunload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto RemoteAccessHostAllowFileTransfer = 536;
      case 536: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4290 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_remoteaccesshostallowfiletransfer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto SpellcheckLanguageBlacklist = 538;
      case 538: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4306 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_spellchecklanguageblacklist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto SignedHTTPExchangeEnabled = 544;
      case 544: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4354 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_signedhttpexchangeenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto ExtensionInstallListsMergeEnabled = 546;
      case 546: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4370 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_extensioninstalllistsmergeenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto PolicyListMultipleSourceMergeList = 556;
      case 556: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4450 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_policylistmultiplesourcemergelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto BrowserSwitcherExternalGreylistUrl = 566;
      case 566: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4530 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_browserswitcherexternalgreylisturl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto PolicyDictionaryMultipleSourceMergeList = 567;
      case 567: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4538 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_policydictionarymultiplesourcemergelist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto CommandLineFlagSecurityWarningsEnabled = 568;
      case 568: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4546 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_commandlineflagsecuritywarningsenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto UserFeedbackAllowed = 572;
      case 572: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4578 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_userfeedbackallowed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto BrowserGuestModeEnforced = 576;
      case 576: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4610 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_browserguestmodeenforced()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto PasswordLeakDetectionEnabled = 582;
      case 582: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4658 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_passwordleakdetectionenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto DnsOverHttpsMode = 584;
      case 584: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4674 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dnsoverhttpsmode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto SendFilesForMalwareCheck = 585;
      case 585: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4682 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sendfilesformalwarecheck()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto PolicyAtomicGroupsEnabled = 586;
      case 586: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4690 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_policyatomicgroupsenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto UnsafeEventsReportingEnabled = 587;
      case 587: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4698 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_unsafeeventsreportingenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto BlockLargeFileTransfer = 588;
      case 588: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4706 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_blocklargefiletransfer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto DelayDeliveryUntilVerdict = 589;
      case 589: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4714 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_delaydeliveryuntilverdict()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto AllowPasswordProtectedFiles = 590;
      case 590: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4722 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_allowpasswordprotectedfiles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto CheckContentCompliance = 591;
      case 591: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4730 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_checkcontentcompliance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto URLsToCheckComplianceOfDownloadedContent = 592;
      case 592: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4738 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_urlstocheckcomplianceofdownloadedcontent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto URLsToNotCheckComplianceOfUploadedContent = 593;
      case 593: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4746 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_urlstonotcheckcomplianceofuploadedcontent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto URLsToCheckForMalwareOfUploadedContent = 602;
      case 602: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4818 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_urlstocheckformalwareofuploadedcontent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto HSTSPolicyBypassList = 603;
      case 603: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4826 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_hstspolicybypasslist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto AllowSyncXHRInPageDismissal = 606;
      case 606: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4850 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_allowsyncxhrinpagedismissal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto CloudExtensionRequestEnabled = 610;
      case 610: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4882 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cloudextensionrequestenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto SharedClipboardEnabled = 612;
      case 612: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4898 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sharedclipboardenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto PrintingAllowedBackgroundGraphicsModes = 623;
      case 623: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4986 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_printingallowedbackgroundgraphicsmodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto PrintingBackgroundGraphicsDefault = 624;
      case 624: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4994 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_printingbackgroundgraphicsdefault()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto LegacySameSiteCookieBehaviorEnabled = 625;
      case 625: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5002 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_legacysamesitecookiebehaviorenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto LegacySameSiteCookieBehaviorEnabledForDomainList = 626;
      case 626: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5010 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_legacysamesitecookiebehaviorenabledfordomainlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto TLS13HardeningForLocalAnchorsEnabled = 628;
      case 628: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5026 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tls13hardeningforlocalanchorsenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto AudioSandboxEnabled = 629;
      case 629: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5034 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_audiosandboxenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto CorsMitigationList = 631;
      case 631: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5050 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_corsmitigationlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto CorsLegacyModeEnabled = 632;
      case 632: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5058 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_corslegacymodeenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto ExternalProtocolDialogShowAlwaysOpenCheckbox = 634;
      case 634: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5074 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_externalprotocoldialogshowalwaysopencheckbox()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto DefaultInsecureContentSetting = 635;
      case 635: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5082 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultinsecurecontentsetting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto InsecureContentAllowedForUrls = 636;
      case 636: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5090 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_insecurecontentallowedforurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto InsecureContentBlockedForUrls = 637;
      case 637: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5098 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_insecurecontentblockedforurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto BlockExternalExtensions = 639;
      case 639: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_blockexternalextensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto WebRtcLocalIpsAllowedUrls = 642;
      case 642: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_webrtclocalipsallowedurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto DnsOverHttpsTemplates = 644;
      case 644: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dnsoverhttpstemplates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto GloballyScopeHTTPAuthCacheEnabled = 645;
      case 645: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_globallyscopehttpauthcacheenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto ClickToCallEnabled = 647;
      case 647: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_clicktocallenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto PrinterTypeDenyList = 649;
      case 649: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_printertypedenylist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto ForceLegacyDefaultReferrerPolicy = 650;
      case 650: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_forcelegacydefaultreferrerpolicy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto SyncTypesListDisabled = 651;
      case 651: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_synctypeslistdisabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto AmbientAuthenticationInPrivateModesEnabled = 652;
      case 652: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ambientauthenticationinprivatemodesenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto PaymentMethodQueryEnabled = 653;
      case 653: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_paymentmethodqueryenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto StricterMixedContentTreatmentEnabled = 654;
      case 654: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_strictermixedcontenttreatmentenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto NTPCustomBackgroundEnabled = 655;
      case 655: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ntpcustombackgroundenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto DNSInterceptionChecksEnabled = 656;
      case 656: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dnsinterceptionchecksenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto LocalDiscoveryEnabled = 664;
      case 664: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5314 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_localdiscoveryenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto ChromeVariations = 665;
      case 665: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5322 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_chromevariations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto ScreenCaptureAllowed = 668;
      case 668: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5346 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_screencaptureallowed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto BlockUnsupportedFiletypes = 670;
      case 670: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5362 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_blockunsupportedfiletypes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto URLsToNotCheckForMalwareOfDownloadedContent = 671;
      case 671: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5370 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_urlstonotcheckformalwareofdownloadedcontent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto UserDataSnapshotRetentionLimit = 675;
      case 675: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5402 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_userdatasnapshotretentionlimit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto AllowNativeNotifications = 680;
      case 680: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5442 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_allownativenotifications()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.IntegerPolicyProto SafeBrowsingProtectionLevel = 686;
      case 686: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5490 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_safebrowsingprotectionlevel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto AdvancedProtectionAllowed = 687;
      case 687: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5498 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_advancedprotectionallowed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto ScrollToTextFragmentEnabled = 689;
      case 689: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5514 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_scrolltotextfragmentenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto OnFileAttachedEnterpriseConnector = 695;
      case 695: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5562 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_onfileattachedenterpriseconnector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto OnFileDownloadedEnterpriseConnector = 698;
      case 698: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5586 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_onfiledownloadedenterpriseconnector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto OnBulkDataEntryEnterpriseConnector = 699;
      case 699: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5594 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_onbulkdataentryenterpriseconnector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto OnSecurityEventEnterpriseConnector = 701;
      case 701: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5610 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_onsecurityevententerpriseconnector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto AutoOpenFileTypes = 702;
      case 702: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5618 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_autoopenfiletypes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto AccessibilityImageLabelsEnabled = 705;
      case 705: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5642 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_accessibilityimagelabelsenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto AppCacheForceEnabled = 706;
      case 706: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5650 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_appcacheforceenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto AutoOpenAllowedForURLs = 709;
      case 709: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5674 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_autoopenallowedforurls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringListPolicyProto EnableExperimentalPolicies = 713;
      case 713: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5706 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_enableexperimentalpolicies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto IntensiveWakeUpThrottlingEnabled = 715;
      case 715: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5722 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_intensivewakeupthrottlingenabled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.BooleanPolicyProto DefaultSearchProviderContextMenuAccessAllowed = 717;
      case 717: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5738 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_defaultsearchprovidercontextmenuaccessallowed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_management.StringPolicyProto AutoLaunchProtocolsFromOrigins = 724;
      case 724: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (5794 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_autolaunchprotocolsfromorigins()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_management.CloudPolicySettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_management.CloudPolicySettings)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CloudPolicySettings::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_management.CloudPolicySettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_management.StringPolicyProto HomepageLocation = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::homepagelocation(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto HomepageIsNewTabPage = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::homepageisnewtabpage(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto DefaultBrowserSettingEnabled = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::defaultbrowsersettingenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto AlternateErrorPagesEnabled = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::alternateerrorpagesenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto SearchSuggestEnabled = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::searchsuggestenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto JavascriptEnabled = 11;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      11, _Internal::javascriptenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto IncognitoEnabled = 12;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      12, _Internal::incognitoenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto SavingBrowserHistoryDisabled = 13;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      13, _Internal::savingbrowserhistorydisabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto PrintingEnabled = 14;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      14, _Internal::printingenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto CloudPrintProxyEnabled = 15;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      15, _Internal::cloudprintproxyenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto SafeBrowsingEnabled = 16;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      16, _Internal::safebrowsingenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto MetricsReportingEnabled = 17;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      17, _Internal::metricsreportingenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto PasswordManagerEnabled = 18;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      18, _Internal::passwordmanagerenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto AutoFillEnabled = 20;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      20, _Internal::autofillenabled(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto DisabledPlugins = 21;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      21, _Internal::disabledplugins(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto SyncDisabled = 22;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      22, _Internal::syncdisabled(this), output);
  }

  // optional .enterprise_management.StringPolicyProto ProxyMode = 23;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      23, _Internal::proxymode(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto ProxyServerMode = 24;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      24, _Internal::proxyservermode(this), output);
  }

  // optional .enterprise_management.StringPolicyProto ProxyServer = 25;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      25, _Internal::proxyserver(this), output);
  }

  // optional .enterprise_management.StringPolicyProto ProxyPacUrl = 26;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      26, _Internal::proxypacurl(this), output);
  }

  // optional .enterprise_management.StringPolicyProto ProxyBypassList = 27;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      27, _Internal::proxybypasslist(this), output);
  }

  // optional .enterprise_management.StringPolicyProto AuthSchemes = 28;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      28, _Internal::authschemes(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto DisableAuthNegotiateCnameLookup = 29;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      29, _Internal::disableauthnegotiatecnamelookup(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto EnableAuthNegotiatePort = 30;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      30, _Internal::enableauthnegotiateport(this), output);
  }

  // optional .enterprise_management.StringPolicyProto AuthServerWhitelist = 31;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      31, _Internal::authserverwhitelist(this), output);
  }

  // optional .enterprise_management.StringPolicyProto AuthNegotiateDelegateWhitelist = 32;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      32, _Internal::authnegotiatedelegatewhitelist(this), output);
  }

  // optional .enterprise_management.StringPolicyProto GSSAPILibraryName = 33;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      33, _Internal::gssapilibraryname(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto ExtensionInstallBlacklist = 34;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      34, _Internal::extensioninstallblacklist(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto ExtensionInstallWhitelist = 35;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      35, _Internal::extensioninstallwhitelist(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto ExtensionInstallForcelist = 36;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      36, _Internal::extensioninstallforcelist(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto ShowHomeButton = 37;
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      37, _Internal::showhomebutton(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto DeveloperToolsDisabled = 38;
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      38, _Internal::developertoolsdisabled(this), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .enterprise_management.IntegerPolicyProto RestoreOnStartup = 39;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      39, _Internal::restoreonstartup(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto RestoreOnStartupURLs = 40;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      40, _Internal::restoreonstartupurls(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto BlockThirdPartyCookies = 41;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      41, _Internal::blockthirdpartycookies(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto DefaultSearchProviderEnabled = 42;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      42, _Internal::defaultsearchproviderenabled(this), output);
  }

  // optional .enterprise_management.StringPolicyProto DefaultSearchProviderName = 43;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      43, _Internal::defaultsearchprovidername(this), output);
  }

  // optional .enterprise_management.StringPolicyProto DefaultSearchProviderKeyword = 44;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      44, _Internal::defaultsearchproviderkeyword(this), output);
  }

  // optional .enterprise_management.StringPolicyProto DefaultSearchProviderSearchURL = 45;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      45, _Internal::defaultsearchprovidersearchurl(this), output);
  }

  // optional .enterprise_management.StringPolicyProto DefaultSearchProviderSuggestURL = 46;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      46, _Internal::defaultsearchprovidersuggesturl(this), output);
  }

  // optional .enterprise_management.StringPolicyProto DefaultSearchProviderIconURL = 48;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      48, _Internal::defaultsearchprovidericonurl(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto DefaultSearchProviderEncodings = 49;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      49, _Internal::defaultsearchproviderencodings(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto DefaultCookiesSetting = 50;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      50, _Internal::defaultcookiessetting(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto DefaultImagesSetting = 51;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      51, _Internal::defaultimagessetting(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto DefaultJavaScriptSetting = 52;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      52, _Internal::defaultjavascriptsetting(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto DefaultPluginsSetting = 53;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      53, _Internal::defaultpluginssetting(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto DefaultPopupsSetting = 54;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      54, _Internal::defaultpopupssetting(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto DefaultNotificationsSetting = 55;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      55, _Internal::defaultnotificationssetting(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto DefaultGeolocationSetting = 56;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      56, _Internal::defaultgeolocationsetting(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto Disable3DAPIs = 57;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      57, _Internal::disable3dapis(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto PolicyRefreshRate = 58;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      58, _Internal::policyrefreshrate(this), output);
  }

  // optional .enterprise_management.StringPolicyProto DownloadDirectory = 66;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      66, _Internal::downloaddirectory(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto CookiesBlockedForUrls = 69;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      69, _Internal::cookiesblockedforurls(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto CookiesSessionOnlyForUrls = 70;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      70, _Internal::cookiessessiononlyforurls(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto ImagesAllowedForUrls = 71;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      71, _Internal::imagesallowedforurls(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto ImagesBlockedForUrls = 72;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      72, _Internal::imagesblockedforurls(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto JavaScriptAllowedForUrls = 73;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      73, _Internal::javascriptallowedforurls(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto JavaScriptBlockedForUrls = 74;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      74, _Internal::javascriptblockedforurls(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto PluginsAllowedForUrls = 75;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      75, _Internal::pluginsallowedforurls(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto PluginsBlockedForUrls = 76;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      76, _Internal::pluginsblockedforurls(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto PopupsAllowedForUrls = 77;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      77, _Internal::popupsallowedforurls(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto PopupsBlockedForUrls = 78;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      78, _Internal::popupsblockedforurls(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto CookiesAllowedForUrls = 79;
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      79, _Internal::cookiesallowedforurls(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto EnabledPlugins = 80;
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      80, _Internal::enabledplugins(this), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional .enterprise_management.StringListPolicyProto DisabledPluginsExceptions = 81;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      81, _Internal::disabledpluginsexceptions(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto TranslateEnabled = 82;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      82, _Internal::translateenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto AllowOutdatedPlugins = 83;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      83, _Internal::allowoutdatedplugins(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto BookmarkBarEnabled = 84;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      84, _Internal::bookmarkbarenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto EditBookmarksEnabled = 85;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      85, _Internal::editbookmarksenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto AllowFileSelectionDialogs = 86;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      86, _Internal::allowfileselectiondialogs(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto DisabledSchemes = 87;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      87, _Internal::disabledschemes(this), output);
  }

  // optional .enterprise_management.StringPolicyProto DiskCacheDir = 90;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      90, _Internal::diskcachedir(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto AllowCrossOriginAuthPrompt = 91;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      91, _Internal::allowcrossoriginauthprompt(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto MaxConnectionsPerProxy = 94;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      94, _Internal::maxconnectionsperproxy(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto IncognitoModeAvailability = 95;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      95, _Internal::incognitomodeavailability(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto RemoteAccessHostFirewallTraversal = 97;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      97, _Internal::remoteaccesshostfirewalltraversal(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto ImportBookmarks = 99;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      99, _Internal::importbookmarks(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto ImportHistory = 100;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      100, _Internal::importhistory(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto ImportHomepage = 101;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      101, _Internal::importhomepage(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto ImportSearchEngine = 102;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      102, _Internal::importsearchengine(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto ImportSavedPasswords = 103;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      103, _Internal::importsavedpasswords(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto AutoSelectCertificateForUrls = 104;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      104, _Internal::autoselectcertificateforurls(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto URLBlacklist = 105;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      105, _Internal::urlblacklist(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto URLWhitelist = 106;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      106, _Internal::urlwhitelist(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto NotificationsAllowedForUrls = 107;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      107, _Internal::notificationsallowedforurls(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto NotificationsBlockedForUrls = 108;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      108, _Internal::notificationsblockedforurls(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto CloudPrintSubmitEnabled = 111;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      111, _Internal::cloudprintsubmitenabled(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto DiskCacheSize = 112;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      112, _Internal::diskcachesize(this), output);
  }

  // optional .enterprise_management.StringPolicyProto ProxySettings = 118;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      118, _Internal::proxysettings(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto DisablePrintPreview = 119;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      119, _Internal::disableprintpreview(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto EnableOnlineRevocationChecks = 131;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      131, _Internal::enableonlinerevocationchecks(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto BackgroundModeEnabled = 140;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      140, _Internal::backgroundmodeenabled(this), output);
  }

  // optional .enterprise_management.StringPolicyProto RestrictSigninToPattern = 149;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      149, _Internal::restrictsignintopattern(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto ExtensionInstallSources = 150;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      150, _Internal::extensioninstallsources(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto DefaultMediaStreamSetting = 151;
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      151, _Internal::defaultmediastreamsetting(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto DisableSafeBrowsingProceedAnyway = 152;
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      152, _Internal::disablesafebrowsingproceedanyway(this), output);
  }

  cached_has_bits = _has_bits_[3];
  // optional .enterprise_management.BooleanPolicyProto SpellCheckServiceEnabled = 153;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      153, _Internal::spellcheckserviceenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto DisableScreenshots = 155;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      155, _Internal::disablescreenshots(this), output);
  }

  // optional .enterprise_management.StringPolicyProto RemoteAccessHostDomain = 156;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      156, _Internal::remoteaccesshostdomain(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto RemoteAccessHostRequireCurtain = 159;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      159, _Internal::remoteaccesshostrequirecurtain(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto AudioCaptureAllowed = 162;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      162, _Internal::audiocaptureallowed(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto DefaultSearchProviderAlternateURLs = 163;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      163, _Internal::defaultsearchprovideralternateurls(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto ForceSafeSearch = 164;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      164, _Internal::forcesafesearch(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto BuiltInDnsClientEnabled = 167;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      167, _Internal::builtindnsclientenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto VideoCaptureAllowed = 169;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      169, _Internal::videocaptureallowed(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto ExtensionAllowedTypes = 170;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      170, _Internal::extensionallowedtypes(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto AllowDeletingBrowserHistory = 189;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      189, _Internal::allowdeletingbrowserhistory(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto HideWebStoreIcon = 191;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      191, _Internal::hidewebstoreicon(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto SigninAllowed = 192;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      192, _Internal::signinallowed(this), output);
  }

  // optional .enterprise_management.StringPolicyProto VariationsRestrictParameter = 198;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      198, _Internal::variationsrestrictparameter(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto ContentPackDefaultFilteringBehavior = 206;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      206, _Internal::contentpackdefaultfilteringbehavior(this), output);
  }

  // optional .enterprise_management.StringPolicyProto ContentPackManualBehaviorHosts = 207;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      207, _Internal::contentpackmanualbehaviorhosts(this), output);
  }

  // optional .enterprise_management.StringPolicyProto ContentPackManualBehaviorURLs = 208;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      208, _Internal::contentpackmanualbehaviorurls(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto AudioCaptureAllowedUrls = 210;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      210, _Internal::audiocaptureallowedurls(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto VideoCaptureAllowedUrls = 211;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      211, _Internal::videocaptureallowedurls(this), output);
  }

  // optional .enterprise_management.StringPolicyProto ManagedBookmarks = 229;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      229, _Internal::managedbookmarks(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto MaxInvalidationFetchDelay = 230;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      230, _Internal::maxinvalidationfetchdelay(this), output);
  }

  // optional .enterprise_management.StringPolicyProto DefaultSearchProviderImageURL = 231;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      231, _Internal::defaultsearchproviderimageurl(this), output);
  }

  // optional .enterprise_management.StringPolicyProto DefaultSearchProviderSearchURLPostParams = 232;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      232, _Internal::defaultsearchprovidersearchurlpostparams(this), output);
  }

  // optional .enterprise_management.StringPolicyProto DefaultSearchProviderSuggestURLPostParams = 233;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      233, _Internal::defaultsearchprovidersuggesturlpostparams(this), output);
  }

  // optional .enterprise_management.StringPolicyProto DefaultSearchProviderImageURLPostParams = 235;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      235, _Internal::defaultsearchproviderimageurlpostparams(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto RemoteAccessHostAllowClientPairing = 236;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      236, _Internal::remoteaccesshostallowclientpairing(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto RequireOnlineRevocationChecksForLocalAnchors = 237;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      237, _Internal::requireonlinerevocationchecksforlocalanchors(this), output);
  }

  // optional .enterprise_management.StringPolicyProto DefaultSearchProviderNewTabURL = 239;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      239, _Internal::defaultsearchprovidernewtaburl(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto FullscreenAllowed = 242;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      242, _Internal::fullscreenallowed(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto ForceEphemeralProfiles = 247;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      247, _Internal::forceephemeralprofiles(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto NativeMessagingBlacklist = 253;
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      253, _Internal::nativemessagingblacklist(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto NativeMessagingWhitelist = 254;
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      254, _Internal::nativemessagingwhitelist(this), output);
  }

  cached_has_bits = _has_bits_[4];
  // optional .enterprise_management.BooleanPolicyProto NativeMessagingUserLevelHosts = 255;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      255, _Internal::nativemessaginguserlevelhosts(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto RemoteAccessHostAllowGnubbyAuth = 259;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      259, _Internal::remoteaccesshostallowgnubbyauth(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto WPADQuickCheckEnabled = 263;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      263, _Internal::wpadquickcheckenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto RemoteAccessHostAllowRelayedConnection = 265;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      265, _Internal::remoteaccesshostallowrelayedconnection(this), output);
  }

  // optional .enterprise_management.StringPolicyProto RemoteAccessHostUdpPortRange = 266;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      266, _Internal::remoteaccesshostudpportrange(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto ShowAppsShortcutInBookmarkBar = 269;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      269, _Internal::showappsshortcutinbookmarkbar(this), output);
  }

  // optional .enterprise_management.StringPolicyProto RegisteredProtocolHandlers = 270;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      270, _Internal::registeredprotocolhandlers(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto EnableDeprecatedWebPlatformFeatures = 272;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      272, _Internal::enabledeprecatedwebplatformfeatures(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto NetworkPredictionOptions = 275;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      275, _Internal::networkpredictionoptions(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto BrowserGuestModeEnabled = 277;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      277, _Internal::browserguestmodeenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto BrowserAddPersonEnabled = 278;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      278, _Internal::browseraddpersonenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto ImportAutofillFormData = 279;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      279, _Internal::importautofillformdata(this), output);
  }

  // optional .enterprise_management.StringPolicyProto ExtensionSettings = 280;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      280, _Internal::extensionsettings(this), output);
  }

  // optional .enterprise_management.StringPolicyProto SSLVersionMin = 281;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      281, _Internal::sslversionmin(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto ForceGoogleSafeSearch = 284;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      284, _Internal::forcegooglesafesearch(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto ForceYouTubeSafetyMode = 285;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      285, _Internal::forceyoutubesafetymode(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto RemoteAccessHostMatchUsername = 287;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      287, _Internal::remoteaccesshostmatchusername(this), output);
  }

  // optional .enterprise_management.StringPolicyProto RemoteAccessHostTokenUrl = 288;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      288, _Internal::remoteaccesshosttokenurl(this), output);
  }

  // optional .enterprise_management.StringPolicyProto RemoteAccessHostTokenValidationUrl = 289;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      289, _Internal::remoteaccesshosttokenvalidationurl(this), output);
  }

  // optional .enterprise_management.StringPolicyProto RemoteAccessHostTokenValidationCertificateIssuer = 290;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      290, _Internal::remoteaccesshosttokenvalidationcertificateissuer(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto SSLErrorOverrideAllowed = 302;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      302, _Internal::sslerroroverrideallowed(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto QuicAllowed = 303;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      303, _Internal::quicallowed(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto HardwareAccelerationModeEnabled = 306;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      306, _Internal::hardwareaccelerationmodeenabled(this), output);
  }

  // optional .enterprise_management.StringPolicyProto DefaultPrinterSelection = 310;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      310, _Internal::defaultprinterselection(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto AllowDinosaurEasterEgg = 311;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      311, _Internal::allowdinosaureasteregg(this), output);
  }

  // optional .enterprise_management.StringPolicyProto RemoteAccessHostClientDomain = 318;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      318, _Internal::remoteaccesshostclientdomain(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto DefaultWebBluetoothGuardSetting = 322;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      322, _Internal::defaultwebbluetoothguardsetting(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto SuppressUnsupportedOSWarning = 326;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      326, _Internal::suppressunsupportedoswarning(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto TaskManagerEndProcessEnabled = 329;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      329, _Internal::taskmanagerendprocessenabled(this), output);
  }

  // optional .enterprise_management.StringPolicyProto AllowedDomainsForApps = 333;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      333, _Internal::alloweddomainsforapps(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto EnableMediaRouter = 335;
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      335, _Internal::enablemediarouter(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto CertificateTransparencyEnforcementDisabledForUrls = 337;
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      337, _Internal::certificatetransparencyenforcementdisabledforurls(this), output);
  }

  cached_has_bits = _has_bits_[5];
  // optional .enterprise_management.StringPolicyProto WebRtcUdpPortRange = 341;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      341, _Internal::webrtcudpportrange(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto ComponentUpdatesEnabled = 344;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      344, _Internal::componentupdatesenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto AlwaysOpenPdfExternally = 349;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      349, _Internal::alwaysopenpdfexternally(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto ForceYouTubeRestrict = 350;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      350, _Internal::forceyoutuberestrict(this), output);
  }

  // optional .enterprise_management.StringPolicyProto NewTabPageLocation = 362;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      362, _Internal::newtabpagelocation(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto ShowCastIconInToolbar = 364;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      364, _Internal::showcasticonintoolbar(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto RemoteAccessHostDomainList = 370;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      370, _Internal::remoteaccesshostdomainlist(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto RemoteAccessHostClientDomainList = 371;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      371, _Internal::remoteaccesshostclientdomainlist(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto BrowserNetworkTimeQueriesEnabled = 372;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      372, _Internal::browsernetworktimequeriesenabled(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto DownloadRestrictions = 373;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      373, _Internal::downloadrestrictions(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto PrintPreviewUseSystemDefaultPrinter = 375;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      375, _Internal::printpreviewusesystemdefaultprinter(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto CloudPolicyOverridesPlatformPolicy = 383;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      383, _Internal::cloudpolicyoverridesplatformpolicy(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto RunAllFlashInAllowMode = 393;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      393, _Internal::runallflashinallowmode(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto AutofillCreditCardEnabled = 394;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      394, _Internal::autofillcreditcardenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto NtlmV2Enabled = 395;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      395, _Internal::ntlmv2enabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto PromptForDownloadLocation = 397;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      397, _Internal::promptfordownloadlocation(this), output);
  }

  // optional .enterprise_management.StringPolicyProto IsolateOrigins = 400;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      400, _Internal::isolateorigins(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto SitePerProcess = 401;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      401, _Internal::siteperprocess(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto UnsafelyTreatInsecureOriginAsSecure = 402;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      402, _Internal::unsafelytreatinsecureoriginassecure(this), output);
  }

  // optional .enterprise_management.StringPolicyProto DefaultDownloadDirectory = 403;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      403, _Internal::defaultdownloaddirectory(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto SecurityKeyPermitAttestation = 404;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      404, _Internal::securitykeypermitattestation(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto AbusiveExperienceInterventionEnforce = 406;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      406, _Internal::abusiveexperienceinterventionenforce(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto SpellcheckLanguage = 407;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      407, _Internal::spellchecklanguage(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto SpellcheckEnabled = 410;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      410, _Internal::spellcheckenabled(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto AdsSettingForIntrusiveAdsSites = 411;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      411, _Internal::adssettingforintrusiveadssites(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto PasswordProtectionWarningTrigger = 413;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      413, _Internal::passwordprotectionwarningtrigger(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto RelaunchNotification = 421;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      421, _Internal::relaunchnotification(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto RelaunchNotificationPeriod = 422;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      422, _Internal::relaunchnotificationperiod(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto SafeBrowsingWhitelistDomains = 424;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      424, _Internal::safebrowsingwhitelistdomains(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto PasswordProtectionLoginURLs = 425;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      425, _Internal::passwordprotectionloginurls(this), output);
  }

  // optional .enterprise_management.StringPolicyProto PasswordProtectionChangePasswordURL = 426;
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      426, _Internal::passwordprotectionchangepasswordurl(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto SafeBrowsingExtendedReportingEnabled = 431;
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      431, _Internal::safebrowsingextendedreportingenabled(this), output);
  }

  cached_has_bits = _has_bits_[6];
  // optional .enterprise_management.BooleanPolicyProto AutoplayAllowed = 432;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      432, _Internal::autoplayallowed(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto AutoplayWhitelist = 433;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      433, _Internal::autoplaywhitelist(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto DefaultWebUsbGuardSetting = 436;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      436, _Internal::defaultwebusbguardsetting(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto CertificateTransparencyEnforcementDisabledForCas = 437;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      437, _Internal::certificatetransparencyenforcementdisabledforcas(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto CertificateTransparencyEnforcementDisabledForLegacyCas = 438;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      438, _Internal::certificatetransparencyenforcementdisabledforlegacycas(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto MediaRouterCastAllowAllIPs = 439;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      439, _Internal::mediaroutercastallowallips(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto WebUsbAskForUrls = 441;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      441, _Internal::webusbaskforurls(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto WebUsbBlockedForUrls = 442;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      442, _Internal::webusbblockedforurls(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto DeveloperToolsAvailability = 445;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      445, _Internal::developertoolsavailability(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto PromotionalTabsEnabled = 456;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      456, _Internal::promotionaltabsenabled(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto SafeSitesFilterBehavior = 457;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      457, _Internal::safesitesfilterbehavior(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto OverrideSecurityRestrictionsOnInsecureOrigin = 459;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      459, _Internal::overridesecurityrestrictionsoninsecureorigin(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto AutofillAddressEnabled = 461;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      461, _Internal::autofilladdressenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto UrlKeyedAnonymizedDataCollectionEnabled = 463;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      463, _Internal::urlkeyedanonymizeddatacollectionenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto WebRtcEventLogCollectionAllowed = 466;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      466, _Internal::webrtceventlogcollectionallowed(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto CoalesceH2ConnectionsWithClientCertificatesForHosts = 468;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      468, _Internal::coalesceh2connectionswithclientcertificatesforhosts(this), output);
  }

  // optional .enterprise_management.StringPolicyProto WebAppInstallForceList = 470;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      470, _Internal::webappinstallforcelist(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto ReportVersionData = 472;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      472, _Internal::reportversiondata(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto ReportPolicyData = 473;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      473, _Internal::reportpolicydata(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto ReportMachineIDData = 474;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      474, _Internal::reportmachineiddata(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto ReportUserIDData = 475;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      475, _Internal::reportuseriddata(this), output);
  }

  // optional .enterprise_management.StringPolicyProto PrintingPaperSizeDefault = 481;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      481, _Internal::printingpapersizedefault(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto PrintHeaderFooter = 482;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      482, _Internal::printheaderfooter(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto EnterpriseHardwarePlatformAPIEnabled = 485;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      485, _Internal::enterprisehardwareplatformapienabled(this), output);
  }

  // optional .enterprise_management.StringPolicyProto WebUsbAllowDevicesForUrls = 488;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      488, _Internal::webusballowdevicesforurls(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto BrowserSignin = 489;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      489, _Internal::browsersignin(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto CloudReportingEnabled = 495;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      495, _Internal::cloudreportingenabled(this), output);
  }

  // optional .enterprise_management.StringPolicyProto AlternativeBrowserPath = 496;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      496, _Internal::alternativebrowserpath(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto AlternativeBrowserParameters = 497;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      497, _Internal::alternativebrowserparameters(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto BrowserSwitcherUrlList = 498;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      498, _Internal::browserswitcherurllist(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto BrowserSwitcherUrlGreylist = 499;
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      499, _Internal::browserswitcherurlgreylist(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto ReportExtensionsAndPluginsData = 501;
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      501, _Internal::reportextensionsandpluginsdata(this), output);
  }

  cached_has_bits = _has_bits_[7];
  // optional .enterprise_management.BooleanPolicyProto CloudManagementEnrollmentMandatory = 507;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      507, _Internal::cloudmanagementenrollmentmandatory(this), output);
  }

  // optional .enterprise_management.StringPolicyProto CloudManagementEnrollmentToken = 512;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      512, _Internal::cloudmanagementenrollmenttoken(this), output);
  }

  // optional .enterprise_management.StringPolicyProto BrowserSwitcherExternalSitelistUrl = 513;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      513, _Internal::browserswitcherexternalsitelisturl(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto BrowserSwitcherEnabled = 519;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      519, _Internal::browserswitcherenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto BrowserSwitcherKeepLastChromeTab = 521;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      521, _Internal::browserswitcherkeeplastchrometab(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto BrowserSwitcherDelay = 526;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      526, _Internal::browserswitcherdelay(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto AuthNegotiateDelegateByKdcPolicy = 530;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      530, _Internal::authnegotiatedelegatebykdcpolicy(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto AllowPopupsDuringPageUnload = 535;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      535, _Internal::allowpopupsduringpageunload(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto RemoteAccessHostAllowFileTransfer = 536;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      536, _Internal::remoteaccesshostallowfiletransfer(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto SpellcheckLanguageBlacklist = 538;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      538, _Internal::spellchecklanguageblacklist(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto SignedHTTPExchangeEnabled = 544;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      544, _Internal::signedhttpexchangeenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto ExtensionInstallListsMergeEnabled = 546;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      546, _Internal::extensioninstalllistsmergeenabled(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto PolicyListMultipleSourceMergeList = 556;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      556, _Internal::policylistmultiplesourcemergelist(this), output);
  }

  // optional .enterprise_management.StringPolicyProto BrowserSwitcherExternalGreylistUrl = 566;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      566, _Internal::browserswitcherexternalgreylisturl(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto PolicyDictionaryMultipleSourceMergeList = 567;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      567, _Internal::policydictionarymultiplesourcemergelist(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto CommandLineFlagSecurityWarningsEnabled = 568;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      568, _Internal::commandlineflagsecuritywarningsenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto UserFeedbackAllowed = 572;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      572, _Internal::userfeedbackallowed(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto BrowserGuestModeEnforced = 576;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      576, _Internal::browserguestmodeenforced(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto PasswordLeakDetectionEnabled = 582;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      582, _Internal::passwordleakdetectionenabled(this), output);
  }

  // optional .enterprise_management.StringPolicyProto DnsOverHttpsMode = 584;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      584, _Internal::dnsoverhttpsmode(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto SendFilesForMalwareCheck = 585;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      585, _Internal::sendfilesformalwarecheck(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto PolicyAtomicGroupsEnabled = 586;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      586, _Internal::policyatomicgroupsenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto UnsafeEventsReportingEnabled = 587;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      587, _Internal::unsafeeventsreportingenabled(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto BlockLargeFileTransfer = 588;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      588, _Internal::blocklargefiletransfer(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto DelayDeliveryUntilVerdict = 589;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      589, _Internal::delaydeliveryuntilverdict(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto AllowPasswordProtectedFiles = 590;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      590, _Internal::allowpasswordprotectedfiles(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto CheckContentCompliance = 591;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      591, _Internal::checkcontentcompliance(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto URLsToCheckComplianceOfDownloadedContent = 592;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      592, _Internal::urlstocheckcomplianceofdownloadedcontent(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto URLsToNotCheckComplianceOfUploadedContent = 593;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      593, _Internal::urlstonotcheckcomplianceofuploadedcontent(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto URLsToCheckForMalwareOfUploadedContent = 602;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      602, _Internal::urlstocheckformalwareofuploadedcontent(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto HSTSPolicyBypassList = 603;
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      603, _Internal::hstspolicybypasslist(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto AllowSyncXHRInPageDismissal = 606;
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      606, _Internal::allowsyncxhrinpagedismissal(this), output);
  }

  cached_has_bits = _has_bits_[8];
  // optional .enterprise_management.BooleanPolicyProto CloudExtensionRequestEnabled = 610;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      610, _Internal::cloudextensionrequestenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto SharedClipboardEnabled = 612;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      612, _Internal::sharedclipboardenabled(this), output);
  }

  // optional .enterprise_management.StringPolicyProto PrintingAllowedBackgroundGraphicsModes = 623;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      623, _Internal::printingallowedbackgroundgraphicsmodes(this), output);
  }

  // optional .enterprise_management.StringPolicyProto PrintingBackgroundGraphicsDefault = 624;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      624, _Internal::printingbackgroundgraphicsdefault(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto LegacySameSiteCookieBehaviorEnabled = 625;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      625, _Internal::legacysamesitecookiebehaviorenabled(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto LegacySameSiteCookieBehaviorEnabledForDomainList = 626;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      626, _Internal::legacysamesitecookiebehaviorenabledfordomainlist(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto TLS13HardeningForLocalAnchorsEnabled = 628;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      628, _Internal::tls13hardeningforlocalanchorsenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto AudioSandboxEnabled = 629;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      629, _Internal::audiosandboxenabled(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto CorsMitigationList = 631;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      631, _Internal::corsmitigationlist(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto CorsLegacyModeEnabled = 632;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      632, _Internal::corslegacymodeenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto ExternalProtocolDialogShowAlwaysOpenCheckbox = 634;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      634, _Internal::externalprotocoldialogshowalwaysopencheckbox(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto DefaultInsecureContentSetting = 635;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      635, _Internal::defaultinsecurecontentsetting(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto InsecureContentAllowedForUrls = 636;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      636, _Internal::insecurecontentallowedforurls(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto InsecureContentBlockedForUrls = 637;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      637, _Internal::insecurecontentblockedforurls(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto BlockExternalExtensions = 639;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      639, _Internal::blockexternalextensions(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto WebRtcLocalIpsAllowedUrls = 642;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      642, _Internal::webrtclocalipsallowedurls(this), output);
  }

  // optional .enterprise_management.StringPolicyProto DnsOverHttpsTemplates = 644;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      644, _Internal::dnsoverhttpstemplates(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto GloballyScopeHTTPAuthCacheEnabled = 645;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      645, _Internal::globallyscopehttpauthcacheenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto ClickToCallEnabled = 647;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      647, _Internal::clicktocallenabled(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto PrinterTypeDenyList = 649;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      649, _Internal::printertypedenylist(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto ForceLegacyDefaultReferrerPolicy = 650;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      650, _Internal::forcelegacydefaultreferrerpolicy(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto SyncTypesListDisabled = 651;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      651, _Internal::synctypeslistdisabled(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto AmbientAuthenticationInPrivateModesEnabled = 652;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      652, _Internal::ambientauthenticationinprivatemodesenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto PaymentMethodQueryEnabled = 653;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      653, _Internal::paymentmethodqueryenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto StricterMixedContentTreatmentEnabled = 654;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      654, _Internal::strictermixedcontenttreatmentenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto NTPCustomBackgroundEnabled = 655;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      655, _Internal::ntpcustombackgroundenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto DNSInterceptionChecksEnabled = 656;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      656, _Internal::dnsinterceptionchecksenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto LocalDiscoveryEnabled = 664;
  if (cached_has_bits & 0x08000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      664, _Internal::localdiscoveryenabled(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto ChromeVariations = 665;
  if (cached_has_bits & 0x10000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      665, _Internal::chromevariations(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto ScreenCaptureAllowed = 668;
  if (cached_has_bits & 0x20000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      668, _Internal::screencaptureallowed(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto BlockUnsupportedFiletypes = 670;
  if (cached_has_bits & 0x40000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      670, _Internal::blockunsupportedfiletypes(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto URLsToNotCheckForMalwareOfDownloadedContent = 671;
  if (cached_has_bits & 0x80000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      671, _Internal::urlstonotcheckformalwareofdownloadedcontent(this), output);
  }

  cached_has_bits = _has_bits_[9];
  // optional .enterprise_management.IntegerPolicyProto UserDataSnapshotRetentionLimit = 675;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      675, _Internal::userdatasnapshotretentionlimit(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto AllowNativeNotifications = 680;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      680, _Internal::allownativenotifications(this), output);
  }

  // optional .enterprise_management.IntegerPolicyProto SafeBrowsingProtectionLevel = 686;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      686, _Internal::safebrowsingprotectionlevel(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto AdvancedProtectionAllowed = 687;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      687, _Internal::advancedprotectionallowed(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto ScrollToTextFragmentEnabled = 689;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      689, _Internal::scrolltotextfragmentenabled(this), output);
  }

  // optional .enterprise_management.StringPolicyProto OnFileAttachedEnterpriseConnector = 695;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      695, _Internal::onfileattachedenterpriseconnector(this), output);
  }

  // optional .enterprise_management.StringPolicyProto OnFileDownloadedEnterpriseConnector = 698;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      698, _Internal::onfiledownloadedenterpriseconnector(this), output);
  }

  // optional .enterprise_management.StringPolicyProto OnBulkDataEntryEnterpriseConnector = 699;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      699, _Internal::onbulkdataentryenterpriseconnector(this), output);
  }

  // optional .enterprise_management.StringPolicyProto OnSecurityEventEnterpriseConnector = 701;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      701, _Internal::onsecurityevententerpriseconnector(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto AutoOpenFileTypes = 702;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      702, _Internal::autoopenfiletypes(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto AccessibilityImageLabelsEnabled = 705;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      705, _Internal::accessibilityimagelabelsenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto AppCacheForceEnabled = 706;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      706, _Internal::appcacheforceenabled(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto AutoOpenAllowedForURLs = 709;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      709, _Internal::autoopenallowedforurls(this), output);
  }

  // optional .enterprise_management.StringListPolicyProto EnableExperimentalPolicies = 713;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      713, _Internal::enableexperimentalpolicies(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto IntensiveWakeUpThrottlingEnabled = 715;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      715, _Internal::intensivewakeupthrottlingenabled(this), output);
  }

  // optional .enterprise_management.BooleanPolicyProto DefaultSearchProviderContextMenuAccessAllowed = 717;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      717, _Internal::defaultsearchprovidercontextmenuaccessallowed(this), output);
  }

  // optional .enterprise_management.StringPolicyProto AutoLaunchProtocolsFromOrigins = 724;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      724, _Internal::autolaunchprotocolsfromorigins(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_management.CloudPolicySettings)
}

size_t CloudPolicySettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.CloudPolicySettings)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .enterprise_management.StringPolicyProto HomepageLocation = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *homepagelocation_);
    }

    // optional .enterprise_management.BooleanPolicyProto HomepageIsNewTabPage = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *homepageisnewtabpage_);
    }

    // optional .enterprise_management.BooleanPolicyProto DefaultBrowserSettingEnabled = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultbrowsersettingenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto AlternateErrorPagesEnabled = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *alternateerrorpagesenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto SearchSuggestEnabled = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *searchsuggestenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto JavascriptEnabled = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *javascriptenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto IncognitoEnabled = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *incognitoenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto SavingBrowserHistoryDisabled = 13;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *savingbrowserhistorydisabled_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .enterprise_management.BooleanPolicyProto PrintingEnabled = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *printingenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto CloudPrintProxyEnabled = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cloudprintproxyenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto SafeBrowsingEnabled = 16;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *safebrowsingenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto MetricsReportingEnabled = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metricsreportingenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto PasswordManagerEnabled = 18;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *passwordmanagerenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto AutoFillEnabled = 20;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *autofillenabled_);
    }

    // optional .enterprise_management.StringListPolicyProto DisabledPlugins = 21;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *disabledplugins_);
    }

    // optional .enterprise_management.BooleanPolicyProto SyncDisabled = 22;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *syncdisabled_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .enterprise_management.StringPolicyProto ProxyMode = 23;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *proxymode_);
    }

    // optional .enterprise_management.IntegerPolicyProto ProxyServerMode = 24;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *proxyservermode_);
    }

    // optional .enterprise_management.StringPolicyProto ProxyServer = 25;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *proxyserver_);
    }

    // optional .enterprise_management.StringPolicyProto ProxyPacUrl = 26;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *proxypacurl_);
    }

    // optional .enterprise_management.StringPolicyProto ProxyBypassList = 27;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *proxybypasslist_);
    }

    // optional .enterprise_management.StringPolicyProto AuthSchemes = 28;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *authschemes_);
    }

    // optional .enterprise_management.BooleanPolicyProto DisableAuthNegotiateCnameLookup = 29;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *disableauthnegotiatecnamelookup_);
    }

    // optional .enterprise_management.BooleanPolicyProto EnableAuthNegotiatePort = 30;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enableauthnegotiateport_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .enterprise_management.StringPolicyProto AuthServerWhitelist = 31;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *authserverwhitelist_);
    }

    // optional .enterprise_management.StringPolicyProto AuthNegotiateDelegateWhitelist = 32;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *authnegotiatedelegatewhitelist_);
    }

    // optional .enterprise_management.StringPolicyProto GSSAPILibraryName = 33;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gssapilibraryname_);
    }

    // optional .enterprise_management.StringListPolicyProto ExtensionInstallBlacklist = 34;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *extensioninstallblacklist_);
    }

    // optional .enterprise_management.StringListPolicyProto ExtensionInstallWhitelist = 35;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *extensioninstallwhitelist_);
    }

    // optional .enterprise_management.StringListPolicyProto ExtensionInstallForcelist = 36;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *extensioninstallforcelist_);
    }

    // optional .enterprise_management.BooleanPolicyProto ShowHomeButton = 37;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *showhomebutton_);
    }

    // optional .enterprise_management.BooleanPolicyProto DeveloperToolsDisabled = 38;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *developertoolsdisabled_);
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional .enterprise_management.IntegerPolicyProto RestoreOnStartup = 39;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *restoreonstartup_);
    }

    // optional .enterprise_management.StringListPolicyProto RestoreOnStartupURLs = 40;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *restoreonstartupurls_);
    }

    // optional .enterprise_management.BooleanPolicyProto BlockThirdPartyCookies = 41;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *blockthirdpartycookies_);
    }

    // optional .enterprise_management.BooleanPolicyProto DefaultSearchProviderEnabled = 42;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultsearchproviderenabled_);
    }

    // optional .enterprise_management.StringPolicyProto DefaultSearchProviderName = 43;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultsearchprovidername_);
    }

    // optional .enterprise_management.StringPolicyProto DefaultSearchProviderKeyword = 44;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultsearchproviderkeyword_);
    }

    // optional .enterprise_management.StringPolicyProto DefaultSearchProviderSearchURL = 45;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultsearchprovidersearchurl_);
    }

    // optional .enterprise_management.StringPolicyProto DefaultSearchProviderSuggestURL = 46;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultsearchprovidersuggesturl_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .enterprise_management.StringPolicyProto DefaultSearchProviderIconURL = 48;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultsearchprovidericonurl_);
    }

    // optional .enterprise_management.StringListPolicyProto DefaultSearchProviderEncodings = 49;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultsearchproviderencodings_);
    }

    // optional .enterprise_management.IntegerPolicyProto DefaultCookiesSetting = 50;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultcookiessetting_);
    }

    // optional .enterprise_management.IntegerPolicyProto DefaultImagesSetting = 51;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultimagessetting_);
    }

    // optional .enterprise_management.IntegerPolicyProto DefaultJavaScriptSetting = 52;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultjavascriptsetting_);
    }

    // optional .enterprise_management.IntegerPolicyProto DefaultPluginsSetting = 53;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultpluginssetting_);
    }

    // optional .enterprise_management.IntegerPolicyProto DefaultPopupsSetting = 54;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultpopupssetting_);
    }

    // optional .enterprise_management.IntegerPolicyProto DefaultNotificationsSetting = 55;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultnotificationssetting_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .enterprise_management.IntegerPolicyProto DefaultGeolocationSetting = 56;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultgeolocationsetting_);
    }

    // optional .enterprise_management.BooleanPolicyProto Disable3DAPIs = 57;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *disable3dapis_);
    }

    // optional .enterprise_management.IntegerPolicyProto PolicyRefreshRate = 58;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *policyrefreshrate_);
    }

    // optional .enterprise_management.StringPolicyProto DownloadDirectory = 66;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *downloaddirectory_);
    }

    // optional .enterprise_management.StringListPolicyProto CookiesBlockedForUrls = 69;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cookiesblockedforurls_);
    }

    // optional .enterprise_management.StringListPolicyProto CookiesSessionOnlyForUrls = 70;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cookiessessiononlyforurls_);
    }

    // optional .enterprise_management.StringListPolicyProto ImagesAllowedForUrls = 71;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *imagesallowedforurls_);
    }

    // optional .enterprise_management.StringListPolicyProto ImagesBlockedForUrls = 72;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *imagesblockedforurls_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .enterprise_management.StringListPolicyProto JavaScriptAllowedForUrls = 73;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *javascriptallowedforurls_);
    }

    // optional .enterprise_management.StringListPolicyProto JavaScriptBlockedForUrls = 74;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *javascriptblockedforurls_);
    }

    // optional .enterprise_management.StringListPolicyProto PluginsAllowedForUrls = 75;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pluginsallowedforurls_);
    }

    // optional .enterprise_management.StringListPolicyProto PluginsBlockedForUrls = 76;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pluginsblockedforurls_);
    }

    // optional .enterprise_management.StringListPolicyProto PopupsAllowedForUrls = 77;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *popupsallowedforurls_);
    }

    // optional .enterprise_management.StringListPolicyProto PopupsBlockedForUrls = 78;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *popupsblockedforurls_);
    }

    // optional .enterprise_management.StringListPolicyProto CookiesAllowedForUrls = 79;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cookiesallowedforurls_);
    }

    // optional .enterprise_management.StringListPolicyProto EnabledPlugins = 80;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enabledplugins_);
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional .enterprise_management.StringListPolicyProto DisabledPluginsExceptions = 81;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *disabledpluginsexceptions_);
    }

    // optional .enterprise_management.BooleanPolicyProto TranslateEnabled = 82;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *translateenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto AllowOutdatedPlugins = 83;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *allowoutdatedplugins_);
    }

    // optional .enterprise_management.BooleanPolicyProto BookmarkBarEnabled = 84;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bookmarkbarenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto EditBookmarksEnabled = 85;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *editbookmarksenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto AllowFileSelectionDialogs = 86;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *allowfileselectiondialogs_);
    }

    // optional .enterprise_management.StringListPolicyProto DisabledSchemes = 87;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *disabledschemes_);
    }

    // optional .enterprise_management.StringPolicyProto DiskCacheDir = 90;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *diskcachedir_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .enterprise_management.BooleanPolicyProto AllowCrossOriginAuthPrompt = 91;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *allowcrossoriginauthprompt_);
    }

    // optional .enterprise_management.IntegerPolicyProto MaxConnectionsPerProxy = 94;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *maxconnectionsperproxy_);
    }

    // optional .enterprise_management.IntegerPolicyProto IncognitoModeAvailability = 95;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *incognitomodeavailability_);
    }

    // optional .enterprise_management.BooleanPolicyProto RemoteAccessHostFirewallTraversal = 97;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *remoteaccesshostfirewalltraversal_);
    }

    // optional .enterprise_management.BooleanPolicyProto ImportBookmarks = 99;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *importbookmarks_);
    }

    // optional .enterprise_management.BooleanPolicyProto ImportHistory = 100;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *importhistory_);
    }

    // optional .enterprise_management.BooleanPolicyProto ImportHomepage = 101;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *importhomepage_);
    }

    // optional .enterprise_management.BooleanPolicyProto ImportSearchEngine = 102;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *importsearchengine_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .enterprise_management.BooleanPolicyProto ImportSavedPasswords = 103;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *importsavedpasswords_);
    }

    // optional .enterprise_management.StringListPolicyProto AutoSelectCertificateForUrls = 104;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *autoselectcertificateforurls_);
    }

    // optional .enterprise_management.StringListPolicyProto URLBlacklist = 105;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *urlblacklist_);
    }

    // optional .enterprise_management.StringListPolicyProto URLWhitelist = 106;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *urlwhitelist_);
    }

    // optional .enterprise_management.StringListPolicyProto NotificationsAllowedForUrls = 107;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *notificationsallowedforurls_);
    }

    // optional .enterprise_management.StringListPolicyProto NotificationsBlockedForUrls = 108;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *notificationsblockedforurls_);
    }

    // optional .enterprise_management.BooleanPolicyProto CloudPrintSubmitEnabled = 111;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cloudprintsubmitenabled_);
    }

    // optional .enterprise_management.IntegerPolicyProto DiskCacheSize = 112;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *diskcachesize_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .enterprise_management.StringPolicyProto ProxySettings = 118;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *proxysettings_);
    }

    // optional .enterprise_management.BooleanPolicyProto DisablePrintPreview = 119;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *disableprintpreview_);
    }

    // optional .enterprise_management.BooleanPolicyProto EnableOnlineRevocationChecks = 131;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enableonlinerevocationchecks_);
    }

    // optional .enterprise_management.BooleanPolicyProto BackgroundModeEnabled = 140;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *backgroundmodeenabled_);
    }

    // optional .enterprise_management.StringPolicyProto RestrictSigninToPattern = 149;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *restrictsignintopattern_);
    }

    // optional .enterprise_management.StringListPolicyProto ExtensionInstallSources = 150;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *extensioninstallsources_);
    }

    // optional .enterprise_management.IntegerPolicyProto DefaultMediaStreamSetting = 151;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultmediastreamsetting_);
    }

    // optional .enterprise_management.BooleanPolicyProto DisableSafeBrowsingProceedAnyway = 152;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *disablesafebrowsingproceedanyway_);
    }

  }
  cached_has_bits = _has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    // optional .enterprise_management.BooleanPolicyProto SpellCheckServiceEnabled = 153;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spellcheckserviceenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto DisableScreenshots = 155;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *disablescreenshots_);
    }

    // optional .enterprise_management.StringPolicyProto RemoteAccessHostDomain = 156;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *remoteaccesshostdomain_);
    }

    // optional .enterprise_management.BooleanPolicyProto RemoteAccessHostRequireCurtain = 159;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *remoteaccesshostrequirecurtain_);
    }

    // optional .enterprise_management.BooleanPolicyProto AudioCaptureAllowed = 162;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *audiocaptureallowed_);
    }

    // optional .enterprise_management.StringListPolicyProto DefaultSearchProviderAlternateURLs = 163;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultsearchprovideralternateurls_);
    }

    // optional .enterprise_management.BooleanPolicyProto ForceSafeSearch = 164;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *forcesafesearch_);
    }

    // optional .enterprise_management.BooleanPolicyProto BuiltInDnsClientEnabled = 167;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *builtindnsclientenabled_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .enterprise_management.BooleanPolicyProto VideoCaptureAllowed = 169;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *videocaptureallowed_);
    }

    // optional .enterprise_management.StringListPolicyProto ExtensionAllowedTypes = 170;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *extensionallowedtypes_);
    }

    // optional .enterprise_management.BooleanPolicyProto AllowDeletingBrowserHistory = 189;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *allowdeletingbrowserhistory_);
    }

    // optional .enterprise_management.BooleanPolicyProto HideWebStoreIcon = 191;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hidewebstoreicon_);
    }

    // optional .enterprise_management.BooleanPolicyProto SigninAllowed = 192;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signinallowed_);
    }

    // optional .enterprise_management.StringPolicyProto VariationsRestrictParameter = 198;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *variationsrestrictparameter_);
    }

    // optional .enterprise_management.IntegerPolicyProto ContentPackDefaultFilteringBehavior = 206;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contentpackdefaultfilteringbehavior_);
    }

    // optional .enterprise_management.StringPolicyProto ContentPackManualBehaviorHosts = 207;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contentpackmanualbehaviorhosts_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .enterprise_management.StringPolicyProto ContentPackManualBehaviorURLs = 208;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *contentpackmanualbehaviorurls_);
    }

    // optional .enterprise_management.StringListPolicyProto AudioCaptureAllowedUrls = 210;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *audiocaptureallowedurls_);
    }

    // optional .enterprise_management.StringListPolicyProto VideoCaptureAllowedUrls = 211;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *videocaptureallowedurls_);
    }

    // optional .enterprise_management.StringPolicyProto ManagedBookmarks = 229;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *managedbookmarks_);
    }

    // optional .enterprise_management.IntegerPolicyProto MaxInvalidationFetchDelay = 230;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *maxinvalidationfetchdelay_);
    }

    // optional .enterprise_management.StringPolicyProto DefaultSearchProviderImageURL = 231;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultsearchproviderimageurl_);
    }

    // optional .enterprise_management.StringPolicyProto DefaultSearchProviderSearchURLPostParams = 232;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultsearchprovidersearchurlpostparams_);
    }

    // optional .enterprise_management.StringPolicyProto DefaultSearchProviderSuggestURLPostParams = 233;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultsearchprovidersuggesturlpostparams_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .enterprise_management.StringPolicyProto DefaultSearchProviderImageURLPostParams = 235;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultsearchproviderimageurlpostparams_);
    }

    // optional .enterprise_management.BooleanPolicyProto RemoteAccessHostAllowClientPairing = 236;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *remoteaccesshostallowclientpairing_);
    }

    // optional .enterprise_management.BooleanPolicyProto RequireOnlineRevocationChecksForLocalAnchors = 237;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *requireonlinerevocationchecksforlocalanchors_);
    }

    // optional .enterprise_management.StringPolicyProto DefaultSearchProviderNewTabURL = 239;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultsearchprovidernewtaburl_);
    }

    // optional .enterprise_management.BooleanPolicyProto FullscreenAllowed = 242;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fullscreenallowed_);
    }

    // optional .enterprise_management.BooleanPolicyProto ForceEphemeralProfiles = 247;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *forceephemeralprofiles_);
    }

    // optional .enterprise_management.StringListPolicyProto NativeMessagingBlacklist = 253;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nativemessagingblacklist_);
    }

    // optional .enterprise_management.StringListPolicyProto NativeMessagingWhitelist = 254;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nativemessagingwhitelist_);
    }

  }
  cached_has_bits = _has_bits_[4];
  if (cached_has_bits & 0x000000ffu) {
    // optional .enterprise_management.BooleanPolicyProto NativeMessagingUserLevelHosts = 255;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nativemessaginguserlevelhosts_);
    }

    // optional .enterprise_management.BooleanPolicyProto RemoteAccessHostAllowGnubbyAuth = 259;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *remoteaccesshostallowgnubbyauth_);
    }

    // optional .enterprise_management.BooleanPolicyProto WPADQuickCheckEnabled = 263;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wpadquickcheckenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto RemoteAccessHostAllowRelayedConnection = 265;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *remoteaccesshostallowrelayedconnection_);
    }

    // optional .enterprise_management.StringPolicyProto RemoteAccessHostUdpPortRange = 266;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *remoteaccesshostudpportrange_);
    }

    // optional .enterprise_management.BooleanPolicyProto ShowAppsShortcutInBookmarkBar = 269;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *showappsshortcutinbookmarkbar_);
    }

    // optional .enterprise_management.StringPolicyProto RegisteredProtocolHandlers = 270;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *registeredprotocolhandlers_);
    }

    // optional .enterprise_management.StringListPolicyProto EnableDeprecatedWebPlatformFeatures = 272;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enabledeprecatedwebplatformfeatures_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .enterprise_management.IntegerPolicyProto NetworkPredictionOptions = 275;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *networkpredictionoptions_);
    }

    // optional .enterprise_management.BooleanPolicyProto BrowserGuestModeEnabled = 277;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *browserguestmodeenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto BrowserAddPersonEnabled = 278;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *browseraddpersonenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto ImportAutofillFormData = 279;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *importautofillformdata_);
    }

    // optional .enterprise_management.StringPolicyProto ExtensionSettings = 280;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *extensionsettings_);
    }

    // optional .enterprise_management.StringPolicyProto SSLVersionMin = 281;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sslversionmin_);
    }

    // optional .enterprise_management.BooleanPolicyProto ForceGoogleSafeSearch = 284;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *forcegooglesafesearch_);
    }

    // optional .enterprise_management.BooleanPolicyProto ForceYouTubeSafetyMode = 285;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *forceyoutubesafetymode_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .enterprise_management.BooleanPolicyProto RemoteAccessHostMatchUsername = 287;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *remoteaccesshostmatchusername_);
    }

    // optional .enterprise_management.StringPolicyProto RemoteAccessHostTokenUrl = 288;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *remoteaccesshosttokenurl_);
    }

    // optional .enterprise_management.StringPolicyProto RemoteAccessHostTokenValidationUrl = 289;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *remoteaccesshosttokenvalidationurl_);
    }

    // optional .enterprise_management.StringPolicyProto RemoteAccessHostTokenValidationCertificateIssuer = 290;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *remoteaccesshosttokenvalidationcertificateissuer_);
    }

    // optional .enterprise_management.BooleanPolicyProto SSLErrorOverrideAllowed = 302;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sslerroroverrideallowed_);
    }

    // optional .enterprise_management.BooleanPolicyProto QuicAllowed = 303;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *quicallowed_);
    }

    // optional .enterprise_management.BooleanPolicyProto HardwareAccelerationModeEnabled = 306;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hardwareaccelerationmodeenabled_);
    }

    // optional .enterprise_management.StringPolicyProto DefaultPrinterSelection = 310;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultprinterselection_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .enterprise_management.BooleanPolicyProto AllowDinosaurEasterEgg = 311;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *allowdinosaureasteregg_);
    }

    // optional .enterprise_management.StringPolicyProto RemoteAccessHostClientDomain = 318;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *remoteaccesshostclientdomain_);
    }

    // optional .enterprise_management.IntegerPolicyProto DefaultWebBluetoothGuardSetting = 322;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultwebbluetoothguardsetting_);
    }

    // optional .enterprise_management.BooleanPolicyProto SuppressUnsupportedOSWarning = 326;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *suppressunsupportedoswarning_);
    }

    // optional .enterprise_management.BooleanPolicyProto TaskManagerEndProcessEnabled = 329;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *taskmanagerendprocessenabled_);
    }

    // optional .enterprise_management.StringPolicyProto AllowedDomainsForApps = 333;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *alloweddomainsforapps_);
    }

    // optional .enterprise_management.BooleanPolicyProto EnableMediaRouter = 335;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enablemediarouter_);
    }

    // optional .enterprise_management.StringListPolicyProto CertificateTransparencyEnforcementDisabledForUrls = 337;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *certificatetransparencyenforcementdisabledforurls_);
    }

  }
  cached_has_bits = _has_bits_[5];
  if (cached_has_bits & 0x000000ffu) {
    // optional .enterprise_management.StringPolicyProto WebRtcUdpPortRange = 341;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *webrtcudpportrange_);
    }

    // optional .enterprise_management.BooleanPolicyProto ComponentUpdatesEnabled = 344;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *componentupdatesenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto AlwaysOpenPdfExternally = 349;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *alwaysopenpdfexternally_);
    }

    // optional .enterprise_management.IntegerPolicyProto ForceYouTubeRestrict = 350;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *forceyoutuberestrict_);
    }

    // optional .enterprise_management.StringPolicyProto NewTabPageLocation = 362;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *newtabpagelocation_);
    }

    // optional .enterprise_management.BooleanPolicyProto ShowCastIconInToolbar = 364;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *showcasticonintoolbar_);
    }

    // optional .enterprise_management.StringListPolicyProto RemoteAccessHostDomainList = 370;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *remoteaccesshostdomainlist_);
    }

    // optional .enterprise_management.StringListPolicyProto RemoteAccessHostClientDomainList = 371;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *remoteaccesshostclientdomainlist_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .enterprise_management.BooleanPolicyProto BrowserNetworkTimeQueriesEnabled = 372;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *browsernetworktimequeriesenabled_);
    }

    // optional .enterprise_management.IntegerPolicyProto DownloadRestrictions = 373;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *downloadrestrictions_);
    }

    // optional .enterprise_management.BooleanPolicyProto PrintPreviewUseSystemDefaultPrinter = 375;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *printpreviewusesystemdefaultprinter_);
    }

    // optional .enterprise_management.BooleanPolicyProto CloudPolicyOverridesPlatformPolicy = 383;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cloudpolicyoverridesplatformpolicy_);
    }

    // optional .enterprise_management.BooleanPolicyProto RunAllFlashInAllowMode = 393;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *runallflashinallowmode_);
    }

    // optional .enterprise_management.BooleanPolicyProto AutofillCreditCardEnabled = 394;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *autofillcreditcardenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto NtlmV2Enabled = 395;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ntlmv2enabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto PromptForDownloadLocation = 397;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *promptfordownloadlocation_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .enterprise_management.StringPolicyProto IsolateOrigins = 400;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *isolateorigins_);
    }

    // optional .enterprise_management.BooleanPolicyProto SitePerProcess = 401;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *siteperprocess_);
    }

    // optional .enterprise_management.StringListPolicyProto UnsafelyTreatInsecureOriginAsSecure = 402;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unsafelytreatinsecureoriginassecure_);
    }

    // optional .enterprise_management.StringPolicyProto DefaultDownloadDirectory = 403;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultdownloaddirectory_);
    }

    // optional .enterprise_management.StringListPolicyProto SecurityKeyPermitAttestation = 404;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *securitykeypermitattestation_);
    }

    // optional .enterprise_management.BooleanPolicyProto AbusiveExperienceInterventionEnforce = 406;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *abusiveexperienceinterventionenforce_);
    }

    // optional .enterprise_management.StringListPolicyProto SpellcheckLanguage = 407;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spellchecklanguage_);
    }

    // optional .enterprise_management.BooleanPolicyProto SpellcheckEnabled = 410;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spellcheckenabled_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .enterprise_management.IntegerPolicyProto AdsSettingForIntrusiveAdsSites = 411;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *adssettingforintrusiveadssites_);
    }

    // optional .enterprise_management.IntegerPolicyProto PasswordProtectionWarningTrigger = 413;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *passwordprotectionwarningtrigger_);
    }

    // optional .enterprise_management.IntegerPolicyProto RelaunchNotification = 421;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *relaunchnotification_);
    }

    // optional .enterprise_management.IntegerPolicyProto RelaunchNotificationPeriod = 422;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *relaunchnotificationperiod_);
    }

    // optional .enterprise_management.StringListPolicyProto SafeBrowsingWhitelistDomains = 424;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *safebrowsingwhitelistdomains_);
    }

    // optional .enterprise_management.StringListPolicyProto PasswordProtectionLoginURLs = 425;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *passwordprotectionloginurls_);
    }

    // optional .enterprise_management.StringPolicyProto PasswordProtectionChangePasswordURL = 426;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *passwordprotectionchangepasswordurl_);
    }

    // optional .enterprise_management.BooleanPolicyProto SafeBrowsingExtendedReportingEnabled = 431;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *safebrowsingextendedreportingenabled_);
    }

  }
  cached_has_bits = _has_bits_[6];
  if (cached_has_bits & 0x000000ffu) {
    // optional .enterprise_management.BooleanPolicyProto AutoplayAllowed = 432;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *autoplayallowed_);
    }

    // optional .enterprise_management.StringListPolicyProto AutoplayWhitelist = 433;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *autoplaywhitelist_);
    }

    // optional .enterprise_management.IntegerPolicyProto DefaultWebUsbGuardSetting = 436;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultwebusbguardsetting_);
    }

    // optional .enterprise_management.StringListPolicyProto CertificateTransparencyEnforcementDisabledForCas = 437;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *certificatetransparencyenforcementdisabledforcas_);
    }

    // optional .enterprise_management.StringListPolicyProto CertificateTransparencyEnforcementDisabledForLegacyCas = 438;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *certificatetransparencyenforcementdisabledforlegacycas_);
    }

    // optional .enterprise_management.BooleanPolicyProto MediaRouterCastAllowAllIPs = 439;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mediaroutercastallowallips_);
    }

    // optional .enterprise_management.StringListPolicyProto WebUsbAskForUrls = 441;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *webusbaskforurls_);
    }

    // optional .enterprise_management.StringListPolicyProto WebUsbBlockedForUrls = 442;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *webusbblockedforurls_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .enterprise_management.IntegerPolicyProto DeveloperToolsAvailability = 445;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *developertoolsavailability_);
    }

    // optional .enterprise_management.BooleanPolicyProto PromotionalTabsEnabled = 456;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *promotionaltabsenabled_);
    }

    // optional .enterprise_management.IntegerPolicyProto SafeSitesFilterBehavior = 457;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *safesitesfilterbehavior_);
    }

    // optional .enterprise_management.StringListPolicyProto OverrideSecurityRestrictionsOnInsecureOrigin = 459;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *overridesecurityrestrictionsoninsecureorigin_);
    }

    // optional .enterprise_management.BooleanPolicyProto AutofillAddressEnabled = 461;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *autofilladdressenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto UrlKeyedAnonymizedDataCollectionEnabled = 463;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *urlkeyedanonymizeddatacollectionenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto WebRtcEventLogCollectionAllowed = 466;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *webrtceventlogcollectionallowed_);
    }

    // optional .enterprise_management.StringListPolicyProto CoalesceH2ConnectionsWithClientCertificatesForHosts = 468;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *coalesceh2connectionswithclientcertificatesforhosts_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .enterprise_management.StringPolicyProto WebAppInstallForceList = 470;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *webappinstallforcelist_);
    }

    // optional .enterprise_management.BooleanPolicyProto ReportVersionData = 472;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reportversiondata_);
    }

    // optional .enterprise_management.BooleanPolicyProto ReportPolicyData = 473;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reportpolicydata_);
    }

    // optional .enterprise_management.BooleanPolicyProto ReportMachineIDData = 474;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reportmachineiddata_);
    }

    // optional .enterprise_management.BooleanPolicyProto ReportUserIDData = 475;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reportuseriddata_);
    }

    // optional .enterprise_management.StringPolicyProto PrintingPaperSizeDefault = 481;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *printingpapersizedefault_);
    }

    // optional .enterprise_management.BooleanPolicyProto PrintHeaderFooter = 482;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *printheaderfooter_);
    }

    // optional .enterprise_management.BooleanPolicyProto EnterpriseHardwarePlatformAPIEnabled = 485;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enterprisehardwareplatformapienabled_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .enterprise_management.StringPolicyProto WebUsbAllowDevicesForUrls = 488;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *webusballowdevicesforurls_);
    }

    // optional .enterprise_management.IntegerPolicyProto BrowserSignin = 489;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *browsersignin_);
    }

    // optional .enterprise_management.BooleanPolicyProto CloudReportingEnabled = 495;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cloudreportingenabled_);
    }

    // optional .enterprise_management.StringPolicyProto AlternativeBrowserPath = 496;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *alternativebrowserpath_);
    }

    // optional .enterprise_management.StringListPolicyProto AlternativeBrowserParameters = 497;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *alternativebrowserparameters_);
    }

    // optional .enterprise_management.StringListPolicyProto BrowserSwitcherUrlList = 498;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *browserswitcherurllist_);
    }

    // optional .enterprise_management.StringListPolicyProto BrowserSwitcherUrlGreylist = 499;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *browserswitcherurlgreylist_);
    }

    // optional .enterprise_management.BooleanPolicyProto ReportExtensionsAndPluginsData = 501;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reportextensionsandpluginsdata_);
    }

  }
  cached_has_bits = _has_bits_[7];
  if (cached_has_bits & 0x000000ffu) {
    // optional .enterprise_management.BooleanPolicyProto CloudManagementEnrollmentMandatory = 507;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cloudmanagementenrollmentmandatory_);
    }

    // optional .enterprise_management.StringPolicyProto CloudManagementEnrollmentToken = 512;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cloudmanagementenrollmenttoken_);
    }

    // optional .enterprise_management.StringPolicyProto BrowserSwitcherExternalSitelistUrl = 513;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *browserswitcherexternalsitelisturl_);
    }

    // optional .enterprise_management.BooleanPolicyProto BrowserSwitcherEnabled = 519;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *browserswitcherenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto BrowserSwitcherKeepLastChromeTab = 521;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *browserswitcherkeeplastchrometab_);
    }

    // optional .enterprise_management.IntegerPolicyProto BrowserSwitcherDelay = 526;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *browserswitcherdelay_);
    }

    // optional .enterprise_management.BooleanPolicyProto AuthNegotiateDelegateByKdcPolicy = 530;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *authnegotiatedelegatebykdcpolicy_);
    }

    // optional .enterprise_management.BooleanPolicyProto AllowPopupsDuringPageUnload = 535;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *allowpopupsduringpageunload_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .enterprise_management.BooleanPolicyProto RemoteAccessHostAllowFileTransfer = 536;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *remoteaccesshostallowfiletransfer_);
    }

    // optional .enterprise_management.StringListPolicyProto SpellcheckLanguageBlacklist = 538;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spellchecklanguageblacklist_);
    }

    // optional .enterprise_management.BooleanPolicyProto SignedHTTPExchangeEnabled = 544;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signedhttpexchangeenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto ExtensionInstallListsMergeEnabled = 546;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *extensioninstalllistsmergeenabled_);
    }

    // optional .enterprise_management.StringListPolicyProto PolicyListMultipleSourceMergeList = 556;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *policylistmultiplesourcemergelist_);
    }

    // optional .enterprise_management.StringPolicyProto BrowserSwitcherExternalGreylistUrl = 566;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *browserswitcherexternalgreylisturl_);
    }

    // optional .enterprise_management.StringListPolicyProto PolicyDictionaryMultipleSourceMergeList = 567;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *policydictionarymultiplesourcemergelist_);
    }

    // optional .enterprise_management.BooleanPolicyProto CommandLineFlagSecurityWarningsEnabled = 568;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *commandlineflagsecuritywarningsenabled_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .enterprise_management.BooleanPolicyProto UserFeedbackAllowed = 572;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *userfeedbackallowed_);
    }

    // optional .enterprise_management.BooleanPolicyProto BrowserGuestModeEnforced = 576;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *browserguestmodeenforced_);
    }

    // optional .enterprise_management.BooleanPolicyProto PasswordLeakDetectionEnabled = 582;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *passwordleakdetectionenabled_);
    }

    // optional .enterprise_management.StringPolicyProto DnsOverHttpsMode = 584;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dnsoverhttpsmode_);
    }

    // optional .enterprise_management.IntegerPolicyProto SendFilesForMalwareCheck = 585;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sendfilesformalwarecheck_);
    }

    // optional .enterprise_management.BooleanPolicyProto PolicyAtomicGroupsEnabled = 586;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *policyatomicgroupsenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto UnsafeEventsReportingEnabled = 587;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *unsafeeventsreportingenabled_);
    }

    // optional .enterprise_management.IntegerPolicyProto BlockLargeFileTransfer = 588;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *blocklargefiletransfer_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .enterprise_management.IntegerPolicyProto DelayDeliveryUntilVerdict = 589;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *delaydeliveryuntilverdict_);
    }

    // optional .enterprise_management.IntegerPolicyProto AllowPasswordProtectedFiles = 590;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *allowpasswordprotectedfiles_);
    }

    // optional .enterprise_management.IntegerPolicyProto CheckContentCompliance = 591;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *checkcontentcompliance_);
    }

    // optional .enterprise_management.StringListPolicyProto URLsToCheckComplianceOfDownloadedContent = 592;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *urlstocheckcomplianceofdownloadedcontent_);
    }

    // optional .enterprise_management.StringListPolicyProto URLsToNotCheckComplianceOfUploadedContent = 593;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *urlstonotcheckcomplianceofuploadedcontent_);
    }

    // optional .enterprise_management.StringListPolicyProto URLsToCheckForMalwareOfUploadedContent = 602;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *urlstocheckformalwareofuploadedcontent_);
    }

    // optional .enterprise_management.StringListPolicyProto HSTSPolicyBypassList = 603;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hstspolicybypasslist_);
    }

    // optional .enterprise_management.BooleanPolicyProto AllowSyncXHRInPageDismissal = 606;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *allowsyncxhrinpagedismissal_);
    }

  }
  cached_has_bits = _has_bits_[8];
  if (cached_has_bits & 0x000000ffu) {
    // optional .enterprise_management.BooleanPolicyProto CloudExtensionRequestEnabled = 610;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cloudextensionrequestenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto SharedClipboardEnabled = 612;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sharedclipboardenabled_);
    }

    // optional .enterprise_management.StringPolicyProto PrintingAllowedBackgroundGraphicsModes = 623;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *printingallowedbackgroundgraphicsmodes_);
    }

    // optional .enterprise_management.StringPolicyProto PrintingBackgroundGraphicsDefault = 624;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *printingbackgroundgraphicsdefault_);
    }

    // optional .enterprise_management.IntegerPolicyProto LegacySameSiteCookieBehaviorEnabled = 625;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *legacysamesitecookiebehaviorenabled_);
    }

    // optional .enterprise_management.StringListPolicyProto LegacySameSiteCookieBehaviorEnabledForDomainList = 626;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *legacysamesitecookiebehaviorenabledfordomainlist_);
    }

    // optional .enterprise_management.BooleanPolicyProto TLS13HardeningForLocalAnchorsEnabled = 628;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tls13hardeningforlocalanchorsenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto AudioSandboxEnabled = 629;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *audiosandboxenabled_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .enterprise_management.StringListPolicyProto CorsMitigationList = 631;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *corsmitigationlist_);
    }

    // optional .enterprise_management.BooleanPolicyProto CorsLegacyModeEnabled = 632;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *corslegacymodeenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto ExternalProtocolDialogShowAlwaysOpenCheckbox = 634;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *externalprotocoldialogshowalwaysopencheckbox_);
    }

    // optional .enterprise_management.IntegerPolicyProto DefaultInsecureContentSetting = 635;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultinsecurecontentsetting_);
    }

    // optional .enterprise_management.StringListPolicyProto InsecureContentAllowedForUrls = 636;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *insecurecontentallowedforurls_);
    }

    // optional .enterprise_management.StringListPolicyProto InsecureContentBlockedForUrls = 637;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *insecurecontentblockedforurls_);
    }

    // optional .enterprise_management.BooleanPolicyProto BlockExternalExtensions = 639;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *blockexternalextensions_);
    }

    // optional .enterprise_management.StringListPolicyProto WebRtcLocalIpsAllowedUrls = 642;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *webrtclocalipsallowedurls_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .enterprise_management.StringPolicyProto DnsOverHttpsTemplates = 644;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dnsoverhttpstemplates_);
    }

    // optional .enterprise_management.BooleanPolicyProto GloballyScopeHTTPAuthCacheEnabled = 645;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *globallyscopehttpauthcacheenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto ClickToCallEnabled = 647;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *clicktocallenabled_);
    }

    // optional .enterprise_management.StringListPolicyProto PrinterTypeDenyList = 649;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *printertypedenylist_);
    }

    // optional .enterprise_management.BooleanPolicyProto ForceLegacyDefaultReferrerPolicy = 650;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *forcelegacydefaultreferrerpolicy_);
    }

    // optional .enterprise_management.StringListPolicyProto SyncTypesListDisabled = 651;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *synctypeslistdisabled_);
    }

    // optional .enterprise_management.IntegerPolicyProto AmbientAuthenticationInPrivateModesEnabled = 652;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ambientauthenticationinprivatemodesenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto PaymentMethodQueryEnabled = 653;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *paymentmethodqueryenabled_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .enterprise_management.BooleanPolicyProto StricterMixedContentTreatmentEnabled = 654;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *strictermixedcontenttreatmentenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto NTPCustomBackgroundEnabled = 655;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ntpcustombackgroundenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto DNSInterceptionChecksEnabled = 656;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dnsinterceptionchecksenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto LocalDiscoveryEnabled = 664;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *localdiscoveryenabled_);
    }

    // optional .enterprise_management.IntegerPolicyProto ChromeVariations = 665;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chromevariations_);
    }

    // optional .enterprise_management.BooleanPolicyProto ScreenCaptureAllowed = 668;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *screencaptureallowed_);
    }

    // optional .enterprise_management.IntegerPolicyProto BlockUnsupportedFiletypes = 670;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *blockunsupportedfiletypes_);
    }

    // optional .enterprise_management.StringListPolicyProto URLsToNotCheckForMalwareOfDownloadedContent = 671;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *urlstonotcheckformalwareofdownloadedcontent_);
    }

  }
  cached_has_bits = _has_bits_[9];
  if (cached_has_bits & 0x000000ffu) {
    // optional .enterprise_management.IntegerPolicyProto UserDataSnapshotRetentionLimit = 675;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *userdatasnapshotretentionlimit_);
    }

    // optional .enterprise_management.BooleanPolicyProto AllowNativeNotifications = 680;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *allownativenotifications_);
    }

    // optional .enterprise_management.IntegerPolicyProto SafeBrowsingProtectionLevel = 686;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *safebrowsingprotectionlevel_);
    }

    // optional .enterprise_management.BooleanPolicyProto AdvancedProtectionAllowed = 687;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *advancedprotectionallowed_);
    }

    // optional .enterprise_management.BooleanPolicyProto ScrollToTextFragmentEnabled = 689;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scrolltotextfragmentenabled_);
    }

    // optional .enterprise_management.StringPolicyProto OnFileAttachedEnterpriseConnector = 695;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *onfileattachedenterpriseconnector_);
    }

    // optional .enterprise_management.StringPolicyProto OnFileDownloadedEnterpriseConnector = 698;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *onfiledownloadedenterpriseconnector_);
    }

    // optional .enterprise_management.StringPolicyProto OnBulkDataEntryEnterpriseConnector = 699;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *onbulkdataentryenterpriseconnector_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .enterprise_management.StringPolicyProto OnSecurityEventEnterpriseConnector = 701;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *onsecurityevententerpriseconnector_);
    }

    // optional .enterprise_management.StringListPolicyProto AutoOpenFileTypes = 702;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *autoopenfiletypes_);
    }

    // optional .enterprise_management.BooleanPolicyProto AccessibilityImageLabelsEnabled = 705;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *accessibilityimagelabelsenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto AppCacheForceEnabled = 706;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *appcacheforceenabled_);
    }

    // optional .enterprise_management.StringListPolicyProto AutoOpenAllowedForURLs = 709;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *autoopenallowedforurls_);
    }

    // optional .enterprise_management.StringListPolicyProto EnableExperimentalPolicies = 713;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *enableexperimentalpolicies_);
    }

    // optional .enterprise_management.BooleanPolicyProto IntensiveWakeUpThrottlingEnabled = 715;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *intensivewakeupthrottlingenabled_);
    }

    // optional .enterprise_management.BooleanPolicyProto DefaultSearchProviderContextMenuAccessAllowed = 717;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *defaultsearchprovidercontextmenuaccessallowed_);
    }

  }
  // optional .enterprise_management.StringPolicyProto AutoLaunchProtocolsFromOrigins = 724;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *autolaunchprotocolsfromorigins_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloudPolicySettings::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CloudPolicySettings*>(
      &from));
}

void CloudPolicySettings::MergeFrom(const CloudPolicySettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.CloudPolicySettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_homepagelocation()->::enterprise_management::StringPolicyProto::MergeFrom(from.homepagelocation());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_homepageisnewtabpage()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.homepageisnewtabpage());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_defaultbrowsersettingenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.defaultbrowsersettingenabled());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_alternateerrorpagesenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.alternateerrorpagesenabled());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_searchsuggestenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.searchsuggestenabled());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_javascriptenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.javascriptenabled());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_incognitoenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.incognitoenabled());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_savingbrowserhistorydisabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.savingbrowserhistorydisabled());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_printingenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.printingenabled());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_cloudprintproxyenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.cloudprintproxyenabled());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_safebrowsingenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.safebrowsingenabled());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_metricsreportingenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.metricsreportingenabled());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_passwordmanagerenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.passwordmanagerenabled());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_autofillenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.autofillenabled());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_disabledplugins()->::enterprise_management::StringListPolicyProto::MergeFrom(from.disabledplugins());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_syncdisabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.syncdisabled());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_proxymode()->::enterprise_management::StringPolicyProto::MergeFrom(from.proxymode());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_proxyservermode()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.proxyservermode());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_proxyserver()->::enterprise_management::StringPolicyProto::MergeFrom(from.proxyserver());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_proxypacurl()->::enterprise_management::StringPolicyProto::MergeFrom(from.proxypacurl());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_proxybypasslist()->::enterprise_management::StringPolicyProto::MergeFrom(from.proxybypasslist());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_authschemes()->::enterprise_management::StringPolicyProto::MergeFrom(from.authschemes());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_disableauthnegotiatecnamelookup()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.disableauthnegotiatecnamelookup());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_enableauthnegotiateport()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.enableauthnegotiateport());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_authserverwhitelist()->::enterprise_management::StringPolicyProto::MergeFrom(from.authserverwhitelist());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_authnegotiatedelegatewhitelist()->::enterprise_management::StringPolicyProto::MergeFrom(from.authnegotiatedelegatewhitelist());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_gssapilibraryname()->::enterprise_management::StringPolicyProto::MergeFrom(from.gssapilibraryname());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_extensioninstallblacklist()->::enterprise_management::StringListPolicyProto::MergeFrom(from.extensioninstallblacklist());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_extensioninstallwhitelist()->::enterprise_management::StringListPolicyProto::MergeFrom(from.extensioninstallwhitelist());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_extensioninstallforcelist()->::enterprise_management::StringListPolicyProto::MergeFrom(from.extensioninstallforcelist());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_showhomebutton()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.showhomebutton());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_developertoolsdisabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.developertoolsdisabled());
    }
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_restoreonstartup()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.restoreonstartup());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_restoreonstartupurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.restoreonstartupurls());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_blockthirdpartycookies()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.blockthirdpartycookies());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_defaultsearchproviderenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.defaultsearchproviderenabled());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_defaultsearchprovidername()->::enterprise_management::StringPolicyProto::MergeFrom(from.defaultsearchprovidername());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_defaultsearchproviderkeyword()->::enterprise_management::StringPolicyProto::MergeFrom(from.defaultsearchproviderkeyword());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_defaultsearchprovidersearchurl()->::enterprise_management::StringPolicyProto::MergeFrom(from.defaultsearchprovidersearchurl());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_defaultsearchprovidersuggesturl()->::enterprise_management::StringPolicyProto::MergeFrom(from.defaultsearchprovidersuggesturl());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_defaultsearchprovidericonurl()->::enterprise_management::StringPolicyProto::MergeFrom(from.defaultsearchprovidericonurl());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_defaultsearchproviderencodings()->::enterprise_management::StringListPolicyProto::MergeFrom(from.defaultsearchproviderencodings());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_defaultcookiessetting()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.defaultcookiessetting());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_defaultimagessetting()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.defaultimagessetting());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_defaultjavascriptsetting()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.defaultjavascriptsetting());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_defaultpluginssetting()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.defaultpluginssetting());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_defaultpopupssetting()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.defaultpopupssetting());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_defaultnotificationssetting()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.defaultnotificationssetting());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_defaultgeolocationsetting()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.defaultgeolocationsetting());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_disable3dapis()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.disable3dapis());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_policyrefreshrate()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.policyrefreshrate());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_downloaddirectory()->::enterprise_management::StringPolicyProto::MergeFrom(from.downloaddirectory());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_cookiesblockedforurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.cookiesblockedforurls());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_cookiessessiononlyforurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.cookiessessiononlyforurls());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_imagesallowedforurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.imagesallowedforurls());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_imagesblockedforurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.imagesblockedforurls());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_javascriptallowedforurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.javascriptallowedforurls());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_javascriptblockedforurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.javascriptblockedforurls());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_pluginsallowedforurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.pluginsallowedforurls());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_pluginsblockedforurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.pluginsblockedforurls());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_popupsallowedforurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.popupsallowedforurls());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_popupsblockedforurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.popupsblockedforurls());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_cookiesallowedforurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.cookiesallowedforurls());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_enabledplugins()->::enterprise_management::StringListPolicyProto::MergeFrom(from.enabledplugins());
    }
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_disabledpluginsexceptions()->::enterprise_management::StringListPolicyProto::MergeFrom(from.disabledpluginsexceptions());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_translateenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.translateenabled());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_allowoutdatedplugins()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.allowoutdatedplugins());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_bookmarkbarenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.bookmarkbarenabled());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_editbookmarksenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.editbookmarksenabled());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_allowfileselectiondialogs()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.allowfileselectiondialogs());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_disabledschemes()->::enterprise_management::StringListPolicyProto::MergeFrom(from.disabledschemes());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_diskcachedir()->::enterprise_management::StringPolicyProto::MergeFrom(from.diskcachedir());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_allowcrossoriginauthprompt()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.allowcrossoriginauthprompt());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_maxconnectionsperproxy()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.maxconnectionsperproxy());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_incognitomodeavailability()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.incognitomodeavailability());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_remoteaccesshostfirewalltraversal()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.remoteaccesshostfirewalltraversal());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_importbookmarks()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.importbookmarks());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_importhistory()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.importhistory());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_importhomepage()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.importhomepage());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_importsearchengine()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.importsearchengine());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_importsavedpasswords()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.importsavedpasswords());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_autoselectcertificateforurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.autoselectcertificateforurls());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_urlblacklist()->::enterprise_management::StringListPolicyProto::MergeFrom(from.urlblacklist());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_urlwhitelist()->::enterprise_management::StringListPolicyProto::MergeFrom(from.urlwhitelist());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_notificationsallowedforurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.notificationsallowedforurls());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_notificationsblockedforurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.notificationsblockedforurls());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_cloudprintsubmitenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.cloudprintsubmitenabled());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_diskcachesize()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.diskcachesize());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_proxysettings()->::enterprise_management::StringPolicyProto::MergeFrom(from.proxysettings());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_disableprintpreview()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.disableprintpreview());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_enableonlinerevocationchecks()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.enableonlinerevocationchecks());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_backgroundmodeenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.backgroundmodeenabled());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_restrictsignintopattern()->::enterprise_management::StringPolicyProto::MergeFrom(from.restrictsignintopattern());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_extensioninstallsources()->::enterprise_management::StringListPolicyProto::MergeFrom(from.extensioninstallsources());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_defaultmediastreamsetting()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.defaultmediastreamsetting());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_disablesafebrowsingproceedanyway()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.disablesafebrowsingproceedanyway());
    }
  }
  cached_has_bits = from._has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_spellcheckserviceenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.spellcheckserviceenabled());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_disablescreenshots()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.disablescreenshots());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_remoteaccesshostdomain()->::enterprise_management::StringPolicyProto::MergeFrom(from.remoteaccesshostdomain());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_remoteaccesshostrequirecurtain()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.remoteaccesshostrequirecurtain());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_audiocaptureallowed()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.audiocaptureallowed());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_defaultsearchprovideralternateurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.defaultsearchprovideralternateurls());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_forcesafesearch()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.forcesafesearch());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_builtindnsclientenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.builtindnsclientenabled());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_videocaptureallowed()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.videocaptureallowed());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_extensionallowedtypes()->::enterprise_management::StringListPolicyProto::MergeFrom(from.extensionallowedtypes());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_allowdeletingbrowserhistory()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.allowdeletingbrowserhistory());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_hidewebstoreicon()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.hidewebstoreicon());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_signinallowed()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.signinallowed());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_variationsrestrictparameter()->::enterprise_management::StringPolicyProto::MergeFrom(from.variationsrestrictparameter());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_contentpackdefaultfilteringbehavior()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.contentpackdefaultfilteringbehavior());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_contentpackmanualbehaviorhosts()->::enterprise_management::StringPolicyProto::MergeFrom(from.contentpackmanualbehaviorhosts());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_contentpackmanualbehaviorurls()->::enterprise_management::StringPolicyProto::MergeFrom(from.contentpackmanualbehaviorurls());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_audiocaptureallowedurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.audiocaptureallowedurls());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_videocaptureallowedurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.videocaptureallowedurls());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_managedbookmarks()->::enterprise_management::StringPolicyProto::MergeFrom(from.managedbookmarks());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_maxinvalidationfetchdelay()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.maxinvalidationfetchdelay());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_defaultsearchproviderimageurl()->::enterprise_management::StringPolicyProto::MergeFrom(from.defaultsearchproviderimageurl());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_defaultsearchprovidersearchurlpostparams()->::enterprise_management::StringPolicyProto::MergeFrom(from.defaultsearchprovidersearchurlpostparams());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_defaultsearchprovidersuggesturlpostparams()->::enterprise_management::StringPolicyProto::MergeFrom(from.defaultsearchprovidersuggesturlpostparams());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_defaultsearchproviderimageurlpostparams()->::enterprise_management::StringPolicyProto::MergeFrom(from.defaultsearchproviderimageurlpostparams());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_remoteaccesshostallowclientpairing()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.remoteaccesshostallowclientpairing());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_requireonlinerevocationchecksforlocalanchors()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.requireonlinerevocationchecksforlocalanchors());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_defaultsearchprovidernewtaburl()->::enterprise_management::StringPolicyProto::MergeFrom(from.defaultsearchprovidernewtaburl());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_fullscreenallowed()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.fullscreenallowed());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_forceephemeralprofiles()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.forceephemeralprofiles());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_nativemessagingblacklist()->::enterprise_management::StringListPolicyProto::MergeFrom(from.nativemessagingblacklist());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_nativemessagingwhitelist()->::enterprise_management::StringListPolicyProto::MergeFrom(from.nativemessagingwhitelist());
    }
  }
  cached_has_bits = from._has_bits_[4];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_nativemessaginguserlevelhosts()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.nativemessaginguserlevelhosts());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_remoteaccesshostallowgnubbyauth()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.remoteaccesshostallowgnubbyauth());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_wpadquickcheckenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.wpadquickcheckenabled());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_remoteaccesshostallowrelayedconnection()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.remoteaccesshostallowrelayedconnection());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_remoteaccesshostudpportrange()->::enterprise_management::StringPolicyProto::MergeFrom(from.remoteaccesshostudpportrange());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_showappsshortcutinbookmarkbar()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.showappsshortcutinbookmarkbar());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_registeredprotocolhandlers()->::enterprise_management::StringPolicyProto::MergeFrom(from.registeredprotocolhandlers());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_enabledeprecatedwebplatformfeatures()->::enterprise_management::StringListPolicyProto::MergeFrom(from.enabledeprecatedwebplatformfeatures());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_networkpredictionoptions()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.networkpredictionoptions());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_browserguestmodeenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.browserguestmodeenabled());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_browseraddpersonenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.browseraddpersonenabled());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_importautofillformdata()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.importautofillformdata());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_extensionsettings()->::enterprise_management::StringPolicyProto::MergeFrom(from.extensionsettings());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_sslversionmin()->::enterprise_management::StringPolicyProto::MergeFrom(from.sslversionmin());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_forcegooglesafesearch()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.forcegooglesafesearch());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_forceyoutubesafetymode()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.forceyoutubesafetymode());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_remoteaccesshostmatchusername()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.remoteaccesshostmatchusername());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_remoteaccesshosttokenurl()->::enterprise_management::StringPolicyProto::MergeFrom(from.remoteaccesshosttokenurl());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_remoteaccesshosttokenvalidationurl()->::enterprise_management::StringPolicyProto::MergeFrom(from.remoteaccesshosttokenvalidationurl());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_remoteaccesshosttokenvalidationcertificateissuer()->::enterprise_management::StringPolicyProto::MergeFrom(from.remoteaccesshosttokenvalidationcertificateissuer());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_sslerroroverrideallowed()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.sslerroroverrideallowed());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_quicallowed()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.quicallowed());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_hardwareaccelerationmodeenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.hardwareaccelerationmodeenabled());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_defaultprinterselection()->::enterprise_management::StringPolicyProto::MergeFrom(from.defaultprinterselection());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_allowdinosaureasteregg()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.allowdinosaureasteregg());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_remoteaccesshostclientdomain()->::enterprise_management::StringPolicyProto::MergeFrom(from.remoteaccesshostclientdomain());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_defaultwebbluetoothguardsetting()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.defaultwebbluetoothguardsetting());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_suppressunsupportedoswarning()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.suppressunsupportedoswarning());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_taskmanagerendprocessenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.taskmanagerendprocessenabled());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_alloweddomainsforapps()->::enterprise_management::StringPolicyProto::MergeFrom(from.alloweddomainsforapps());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_enablemediarouter()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.enablemediarouter());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_certificatetransparencyenforcementdisabledforurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.certificatetransparencyenforcementdisabledforurls());
    }
  }
  cached_has_bits = from._has_bits_[5];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_webrtcudpportrange()->::enterprise_management::StringPolicyProto::MergeFrom(from.webrtcudpportrange());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_componentupdatesenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.componentupdatesenabled());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_alwaysopenpdfexternally()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.alwaysopenpdfexternally());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_forceyoutuberestrict()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.forceyoutuberestrict());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_newtabpagelocation()->::enterprise_management::StringPolicyProto::MergeFrom(from.newtabpagelocation());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_showcasticonintoolbar()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.showcasticonintoolbar());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_remoteaccesshostdomainlist()->::enterprise_management::StringListPolicyProto::MergeFrom(from.remoteaccesshostdomainlist());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_remoteaccesshostclientdomainlist()->::enterprise_management::StringListPolicyProto::MergeFrom(from.remoteaccesshostclientdomainlist());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_browsernetworktimequeriesenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.browsernetworktimequeriesenabled());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_downloadrestrictions()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.downloadrestrictions());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_printpreviewusesystemdefaultprinter()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.printpreviewusesystemdefaultprinter());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_cloudpolicyoverridesplatformpolicy()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.cloudpolicyoverridesplatformpolicy());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_runallflashinallowmode()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.runallflashinallowmode());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_autofillcreditcardenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.autofillcreditcardenabled());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_ntlmv2enabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.ntlmv2enabled());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_promptfordownloadlocation()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.promptfordownloadlocation());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_isolateorigins()->::enterprise_management::StringPolicyProto::MergeFrom(from.isolateorigins());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_siteperprocess()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.siteperprocess());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_unsafelytreatinsecureoriginassecure()->::enterprise_management::StringListPolicyProto::MergeFrom(from.unsafelytreatinsecureoriginassecure());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_defaultdownloaddirectory()->::enterprise_management::StringPolicyProto::MergeFrom(from.defaultdownloaddirectory());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_securitykeypermitattestation()->::enterprise_management::StringListPolicyProto::MergeFrom(from.securitykeypermitattestation());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_abusiveexperienceinterventionenforce()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.abusiveexperienceinterventionenforce());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_spellchecklanguage()->::enterprise_management::StringListPolicyProto::MergeFrom(from.spellchecklanguage());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_spellcheckenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.spellcheckenabled());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_adssettingforintrusiveadssites()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.adssettingforintrusiveadssites());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_passwordprotectionwarningtrigger()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.passwordprotectionwarningtrigger());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_relaunchnotification()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.relaunchnotification());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_relaunchnotificationperiod()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.relaunchnotificationperiod());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_safebrowsingwhitelistdomains()->::enterprise_management::StringListPolicyProto::MergeFrom(from.safebrowsingwhitelistdomains());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_passwordprotectionloginurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.passwordprotectionloginurls());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_passwordprotectionchangepasswordurl()->::enterprise_management::StringPolicyProto::MergeFrom(from.passwordprotectionchangepasswordurl());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_safebrowsingextendedreportingenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.safebrowsingextendedreportingenabled());
    }
  }
  cached_has_bits = from._has_bits_[6];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_autoplayallowed()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.autoplayallowed());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_autoplaywhitelist()->::enterprise_management::StringListPolicyProto::MergeFrom(from.autoplaywhitelist());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_defaultwebusbguardsetting()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.defaultwebusbguardsetting());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_certificatetransparencyenforcementdisabledforcas()->::enterprise_management::StringListPolicyProto::MergeFrom(from.certificatetransparencyenforcementdisabledforcas());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_certificatetransparencyenforcementdisabledforlegacycas()->::enterprise_management::StringListPolicyProto::MergeFrom(from.certificatetransparencyenforcementdisabledforlegacycas());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_mediaroutercastallowallips()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.mediaroutercastallowallips());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_webusbaskforurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.webusbaskforurls());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_webusbblockedforurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.webusbblockedforurls());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_developertoolsavailability()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.developertoolsavailability());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_promotionaltabsenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.promotionaltabsenabled());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_safesitesfilterbehavior()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.safesitesfilterbehavior());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_overridesecurityrestrictionsoninsecureorigin()->::enterprise_management::StringListPolicyProto::MergeFrom(from.overridesecurityrestrictionsoninsecureorigin());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_autofilladdressenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.autofilladdressenabled());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_urlkeyedanonymizeddatacollectionenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.urlkeyedanonymizeddatacollectionenabled());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_webrtceventlogcollectionallowed()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.webrtceventlogcollectionallowed());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_coalesceh2connectionswithclientcertificatesforhosts()->::enterprise_management::StringListPolicyProto::MergeFrom(from.coalesceh2connectionswithclientcertificatesforhosts());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_webappinstallforcelist()->::enterprise_management::StringPolicyProto::MergeFrom(from.webappinstallforcelist());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_reportversiondata()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.reportversiondata());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_reportpolicydata()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.reportpolicydata());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_reportmachineiddata()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.reportmachineiddata());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_reportuseriddata()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.reportuseriddata());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_printingpapersizedefault()->::enterprise_management::StringPolicyProto::MergeFrom(from.printingpapersizedefault());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_printheaderfooter()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.printheaderfooter());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_enterprisehardwareplatformapienabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.enterprisehardwareplatformapienabled());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_webusballowdevicesforurls()->::enterprise_management::StringPolicyProto::MergeFrom(from.webusballowdevicesforurls());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_browsersignin()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.browsersignin());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_cloudreportingenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.cloudreportingenabled());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_alternativebrowserpath()->::enterprise_management::StringPolicyProto::MergeFrom(from.alternativebrowserpath());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_alternativebrowserparameters()->::enterprise_management::StringListPolicyProto::MergeFrom(from.alternativebrowserparameters());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_browserswitcherurllist()->::enterprise_management::StringListPolicyProto::MergeFrom(from.browserswitcherurllist());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_browserswitcherurlgreylist()->::enterprise_management::StringListPolicyProto::MergeFrom(from.browserswitcherurlgreylist());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_reportextensionsandpluginsdata()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.reportextensionsandpluginsdata());
    }
  }
  cached_has_bits = from._has_bits_[7];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_cloudmanagementenrollmentmandatory()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.cloudmanagementenrollmentmandatory());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cloudmanagementenrollmenttoken()->::enterprise_management::StringPolicyProto::MergeFrom(from.cloudmanagementenrollmenttoken());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_browserswitcherexternalsitelisturl()->::enterprise_management::StringPolicyProto::MergeFrom(from.browserswitcherexternalsitelisturl());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_browserswitcherenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.browserswitcherenabled());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_browserswitcherkeeplastchrometab()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.browserswitcherkeeplastchrometab());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_browserswitcherdelay()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.browserswitcherdelay());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_authnegotiatedelegatebykdcpolicy()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.authnegotiatedelegatebykdcpolicy());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_allowpopupsduringpageunload()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.allowpopupsduringpageunload());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_remoteaccesshostallowfiletransfer()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.remoteaccesshostallowfiletransfer());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_spellchecklanguageblacklist()->::enterprise_management::StringListPolicyProto::MergeFrom(from.spellchecklanguageblacklist());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_signedhttpexchangeenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.signedhttpexchangeenabled());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_extensioninstalllistsmergeenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.extensioninstalllistsmergeenabled());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_policylistmultiplesourcemergelist()->::enterprise_management::StringListPolicyProto::MergeFrom(from.policylistmultiplesourcemergelist());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_browserswitcherexternalgreylisturl()->::enterprise_management::StringPolicyProto::MergeFrom(from.browserswitcherexternalgreylisturl());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_policydictionarymultiplesourcemergelist()->::enterprise_management::StringListPolicyProto::MergeFrom(from.policydictionarymultiplesourcemergelist());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_commandlineflagsecuritywarningsenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.commandlineflagsecuritywarningsenabled());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_userfeedbackallowed()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.userfeedbackallowed());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_browserguestmodeenforced()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.browserguestmodeenforced());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_passwordleakdetectionenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.passwordleakdetectionenabled());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_dnsoverhttpsmode()->::enterprise_management::StringPolicyProto::MergeFrom(from.dnsoverhttpsmode());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_sendfilesformalwarecheck()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.sendfilesformalwarecheck());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_policyatomicgroupsenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.policyatomicgroupsenabled());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_unsafeeventsreportingenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.unsafeeventsreportingenabled());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_blocklargefiletransfer()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.blocklargefiletransfer());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_delaydeliveryuntilverdict()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.delaydeliveryuntilverdict());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_allowpasswordprotectedfiles()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.allowpasswordprotectedfiles());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_checkcontentcompliance()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.checkcontentcompliance());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_urlstocheckcomplianceofdownloadedcontent()->::enterprise_management::StringListPolicyProto::MergeFrom(from.urlstocheckcomplianceofdownloadedcontent());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_urlstonotcheckcomplianceofuploadedcontent()->::enterprise_management::StringListPolicyProto::MergeFrom(from.urlstonotcheckcomplianceofuploadedcontent());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_urlstocheckformalwareofuploadedcontent()->::enterprise_management::StringListPolicyProto::MergeFrom(from.urlstocheckformalwareofuploadedcontent());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_hstspolicybypasslist()->::enterprise_management::StringListPolicyProto::MergeFrom(from.hstspolicybypasslist());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_allowsyncxhrinpagedismissal()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.allowsyncxhrinpagedismissal());
    }
  }
  cached_has_bits = from._has_bits_[8];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_cloudextensionrequestenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.cloudextensionrequestenabled());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_sharedclipboardenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.sharedclipboardenabled());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_printingallowedbackgroundgraphicsmodes()->::enterprise_management::StringPolicyProto::MergeFrom(from.printingallowedbackgroundgraphicsmodes());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_printingbackgroundgraphicsdefault()->::enterprise_management::StringPolicyProto::MergeFrom(from.printingbackgroundgraphicsdefault());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_legacysamesitecookiebehaviorenabled()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.legacysamesitecookiebehaviorenabled());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_legacysamesitecookiebehaviorenabledfordomainlist()->::enterprise_management::StringListPolicyProto::MergeFrom(from.legacysamesitecookiebehaviorenabledfordomainlist());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_tls13hardeningforlocalanchorsenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.tls13hardeningforlocalanchorsenabled());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_audiosandboxenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.audiosandboxenabled());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_corsmitigationlist()->::enterprise_management::StringListPolicyProto::MergeFrom(from.corsmitigationlist());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_corslegacymodeenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.corslegacymodeenabled());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_externalprotocoldialogshowalwaysopencheckbox()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.externalprotocoldialogshowalwaysopencheckbox());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_defaultinsecurecontentsetting()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.defaultinsecurecontentsetting());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_insecurecontentallowedforurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.insecurecontentallowedforurls());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_insecurecontentblockedforurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.insecurecontentblockedforurls());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_blockexternalextensions()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.blockexternalextensions());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_webrtclocalipsallowedurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.webrtclocalipsallowedurls());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_dnsoverhttpstemplates()->::enterprise_management::StringPolicyProto::MergeFrom(from.dnsoverhttpstemplates());
    }
    if (cached_has_bits & 0x00020000u) {
      mutable_globallyscopehttpauthcacheenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.globallyscopehttpauthcacheenabled());
    }
    if (cached_has_bits & 0x00040000u) {
      mutable_clicktocallenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.clicktocallenabled());
    }
    if (cached_has_bits & 0x00080000u) {
      mutable_printertypedenylist()->::enterprise_management::StringListPolicyProto::MergeFrom(from.printertypedenylist());
    }
    if (cached_has_bits & 0x00100000u) {
      mutable_forcelegacydefaultreferrerpolicy()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.forcelegacydefaultreferrerpolicy());
    }
    if (cached_has_bits & 0x00200000u) {
      mutable_synctypeslistdisabled()->::enterprise_management::StringListPolicyProto::MergeFrom(from.synctypeslistdisabled());
    }
    if (cached_has_bits & 0x00400000u) {
      mutable_ambientauthenticationinprivatemodesenabled()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.ambientauthenticationinprivatemodesenabled());
    }
    if (cached_has_bits & 0x00800000u) {
      mutable_paymentmethodqueryenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.paymentmethodqueryenabled());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      mutable_strictermixedcontenttreatmentenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.strictermixedcontenttreatmentenabled());
    }
    if (cached_has_bits & 0x02000000u) {
      mutable_ntpcustombackgroundenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.ntpcustombackgroundenabled());
    }
    if (cached_has_bits & 0x04000000u) {
      mutable_dnsinterceptionchecksenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.dnsinterceptionchecksenabled());
    }
    if (cached_has_bits & 0x08000000u) {
      mutable_localdiscoveryenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.localdiscoveryenabled());
    }
    if (cached_has_bits & 0x10000000u) {
      mutable_chromevariations()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.chromevariations());
    }
    if (cached_has_bits & 0x20000000u) {
      mutable_screencaptureallowed()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.screencaptureallowed());
    }
    if (cached_has_bits & 0x40000000u) {
      mutable_blockunsupportedfiletypes()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.blockunsupportedfiletypes());
    }
    if (cached_has_bits & 0x80000000u) {
      mutable_urlstonotcheckformalwareofdownloadedcontent()->::enterprise_management::StringListPolicyProto::MergeFrom(from.urlstonotcheckformalwareofdownloadedcontent());
    }
  }
  cached_has_bits = from._has_bits_[9];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_userdatasnapshotretentionlimit()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.userdatasnapshotretentionlimit());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_allownativenotifications()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.allownativenotifications());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_safebrowsingprotectionlevel()->::enterprise_management::IntegerPolicyProto::MergeFrom(from.safebrowsingprotectionlevel());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_advancedprotectionallowed()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.advancedprotectionallowed());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_scrolltotextfragmentenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.scrolltotextfragmentenabled());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_onfileattachedenterpriseconnector()->::enterprise_management::StringPolicyProto::MergeFrom(from.onfileattachedenterpriseconnector());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_onfiledownloadedenterpriseconnector()->::enterprise_management::StringPolicyProto::MergeFrom(from.onfiledownloadedenterpriseconnector());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_onbulkdataentryenterpriseconnector()->::enterprise_management::StringPolicyProto::MergeFrom(from.onbulkdataentryenterpriseconnector());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_onsecurityevententerpriseconnector()->::enterprise_management::StringPolicyProto::MergeFrom(from.onsecurityevententerpriseconnector());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_autoopenfiletypes()->::enterprise_management::StringListPolicyProto::MergeFrom(from.autoopenfiletypes());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_accessibilityimagelabelsenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.accessibilityimagelabelsenabled());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_appcacheforceenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.appcacheforceenabled());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_autoopenallowedforurls()->::enterprise_management::StringListPolicyProto::MergeFrom(from.autoopenallowedforurls());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_enableexperimentalpolicies()->::enterprise_management::StringListPolicyProto::MergeFrom(from.enableexperimentalpolicies());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_intensivewakeupthrottlingenabled()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.intensivewakeupthrottlingenabled());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_defaultsearchprovidercontextmenuaccessallowed()->::enterprise_management::BooleanPolicyProto::MergeFrom(from.defaultsearchprovidercontextmenuaccessallowed());
    }
  }
  if (cached_has_bits & 0x00010000u) {
    mutable_autolaunchprotocolsfromorigins()->::enterprise_management::StringPolicyProto::MergeFrom(from.autolaunchprotocolsfromorigins());
  }
}

void CloudPolicySettings::CopyFrom(const CloudPolicySettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.CloudPolicySettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudPolicySettings::IsInitialized() const {
  return true;
}

void CloudPolicySettings::InternalSwap(CloudPolicySettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  swap(_has_bits_[3], other->_has_bits_[3]);
  swap(_has_bits_[4], other->_has_bits_[4]);
  swap(_has_bits_[5], other->_has_bits_[5]);
  swap(_has_bits_[6], other->_has_bits_[6]);
  swap(_has_bits_[7], other->_has_bits_[7]);
  swap(_has_bits_[8], other->_has_bits_[8]);
  swap(_has_bits_[9], other->_has_bits_[9]);
  swap(homepagelocation_, other->homepagelocation_);
  swap(homepageisnewtabpage_, other->homepageisnewtabpage_);
  swap(defaultbrowsersettingenabled_, other->defaultbrowsersettingenabled_);
  swap(alternateerrorpagesenabled_, other->alternateerrorpagesenabled_);
  swap(searchsuggestenabled_, other->searchsuggestenabled_);
  swap(javascriptenabled_, other->javascriptenabled_);
  swap(incognitoenabled_, other->incognitoenabled_);
  swap(savingbrowserhistorydisabled_, other->savingbrowserhistorydisabled_);
  swap(printingenabled_, other->printingenabled_);
  swap(cloudprintproxyenabled_, other->cloudprintproxyenabled_);
  swap(safebrowsingenabled_, other->safebrowsingenabled_);
  swap(metricsreportingenabled_, other->metricsreportingenabled_);
  swap(passwordmanagerenabled_, other->passwordmanagerenabled_);
  swap(autofillenabled_, other->autofillenabled_);
  swap(disabledplugins_, other->disabledplugins_);
  swap(syncdisabled_, other->syncdisabled_);
  swap(proxymode_, other->proxymode_);
  swap(proxyservermode_, other->proxyservermode_);
  swap(proxyserver_, other->proxyserver_);
  swap(proxypacurl_, other->proxypacurl_);
  swap(proxybypasslist_, other->proxybypasslist_);
  swap(authschemes_, other->authschemes_);
  swap(disableauthnegotiatecnamelookup_, other->disableauthnegotiatecnamelookup_);
  swap(enableauthnegotiateport_, other->enableauthnegotiateport_);
  swap(authserverwhitelist_, other->authserverwhitelist_);
  swap(authnegotiatedelegatewhitelist_, other->authnegotiatedelegatewhitelist_);
  swap(gssapilibraryname_, other->gssapilibraryname_);
  swap(extensioninstallblacklist_, other->extensioninstallblacklist_);
  swap(extensioninstallwhitelist_, other->extensioninstallwhitelist_);
  swap(extensioninstallforcelist_, other->extensioninstallforcelist_);
  swap(showhomebutton_, other->showhomebutton_);
  swap(developertoolsdisabled_, other->developertoolsdisabled_);
  swap(restoreonstartup_, other->restoreonstartup_);
  swap(restoreonstartupurls_, other->restoreonstartupurls_);
  swap(blockthirdpartycookies_, other->blockthirdpartycookies_);
  swap(defaultsearchproviderenabled_, other->defaultsearchproviderenabled_);
  swap(defaultsearchprovidername_, other->defaultsearchprovidername_);
  swap(defaultsearchproviderkeyword_, other->defaultsearchproviderkeyword_);
  swap(defaultsearchprovidersearchurl_, other->defaultsearchprovidersearchurl_);
  swap(defaultsearchprovidersuggesturl_, other->defaultsearchprovidersuggesturl_);
  swap(defaultsearchprovidericonurl_, other->defaultsearchprovidericonurl_);
  swap(defaultsearchproviderencodings_, other->defaultsearchproviderencodings_);
  swap(defaultcookiessetting_, other->defaultcookiessetting_);
  swap(defaultimagessetting_, other->defaultimagessetting_);
  swap(defaultjavascriptsetting_, other->defaultjavascriptsetting_);
  swap(defaultpluginssetting_, other->defaultpluginssetting_);
  swap(defaultpopupssetting_, other->defaultpopupssetting_);
  swap(defaultnotificationssetting_, other->defaultnotificationssetting_);
  swap(defaultgeolocationsetting_, other->defaultgeolocationsetting_);
  swap(disable3dapis_, other->disable3dapis_);
  swap(policyrefreshrate_, other->policyrefreshrate_);
  swap(downloaddirectory_, other->downloaddirectory_);
  swap(cookiesblockedforurls_, other->cookiesblockedforurls_);
  swap(cookiessessiononlyforurls_, other->cookiessessiononlyforurls_);
  swap(imagesallowedforurls_, other->imagesallowedforurls_);
  swap(imagesblockedforurls_, other->imagesblockedforurls_);
  swap(javascriptallowedforurls_, other->javascriptallowedforurls_);
  swap(javascriptblockedforurls_, other->javascriptblockedforurls_);
  swap(pluginsallowedforurls_, other->pluginsallowedforurls_);
  swap(pluginsblockedforurls_, other->pluginsblockedforurls_);
  swap(popupsallowedforurls_, other->popupsallowedforurls_);
  swap(popupsblockedforurls_, other->popupsblockedforurls_);
  swap(cookiesallowedforurls_, other->cookiesallowedforurls_);
  swap(enabledplugins_, other->enabledplugins_);
  swap(disabledpluginsexceptions_, other->disabledpluginsexceptions_);
  swap(translateenabled_, other->translateenabled_);
  swap(allowoutdatedplugins_, other->allowoutdatedplugins_);
  swap(bookmarkbarenabled_, other->bookmarkbarenabled_);
  swap(editbookmarksenabled_, other->editbookmarksenabled_);
  swap(allowfileselectiondialogs_, other->allowfileselectiondialogs_);
  swap(disabledschemes_, other->disabledschemes_);
  swap(diskcachedir_, other->diskcachedir_);
  swap(allowcrossoriginauthprompt_, other->allowcrossoriginauthprompt_);
  swap(maxconnectionsperproxy_, other->maxconnectionsperproxy_);
  swap(incognitomodeavailability_, other->incognitomodeavailability_);
  swap(remoteaccesshostfirewalltraversal_, other->remoteaccesshostfirewalltraversal_);
  swap(importbookmarks_, other->importbookmarks_);
  swap(importhistory_, other->importhistory_);
  swap(importhomepage_, other->importhomepage_);
  swap(importsearchengine_, other->importsearchengine_);
  swap(importsavedpasswords_, other->importsavedpasswords_);
  swap(autoselectcertificateforurls_, other->autoselectcertificateforurls_);
  swap(urlblacklist_, other->urlblacklist_);
  swap(urlwhitelist_, other->urlwhitelist_);
  swap(notificationsallowedforurls_, other->notificationsallowedforurls_);
  swap(notificationsblockedforurls_, other->notificationsblockedforurls_);
  swap(cloudprintsubmitenabled_, other->cloudprintsubmitenabled_);
  swap(diskcachesize_, other->diskcachesize_);
  swap(proxysettings_, other->proxysettings_);
  swap(disableprintpreview_, other->disableprintpreview_);
  swap(enableonlinerevocationchecks_, other->enableonlinerevocationchecks_);
  swap(backgroundmodeenabled_, other->backgroundmodeenabled_);
  swap(restrictsignintopattern_, other->restrictsignintopattern_);
  swap(extensioninstallsources_, other->extensioninstallsources_);
  swap(defaultmediastreamsetting_, other->defaultmediastreamsetting_);
  swap(disablesafebrowsingproceedanyway_, other->disablesafebrowsingproceedanyway_);
  swap(spellcheckserviceenabled_, other->spellcheckserviceenabled_);
  swap(disablescreenshots_, other->disablescreenshots_);
  swap(remoteaccesshostdomain_, other->remoteaccesshostdomain_);
  swap(remoteaccesshostrequirecurtain_, other->remoteaccesshostrequirecurtain_);
  swap(audiocaptureallowed_, other->audiocaptureallowed_);
  swap(defaultsearchprovideralternateurls_, other->defaultsearchprovideralternateurls_);
  swap(forcesafesearch_, other->forcesafesearch_);
  swap(builtindnsclientenabled_, other->builtindnsclientenabled_);
  swap(videocaptureallowed_, other->videocaptureallowed_);
  swap(extensionallowedtypes_, other->extensionallowedtypes_);
  swap(allowdeletingbrowserhistory_, other->allowdeletingbrowserhistory_);
  swap(hidewebstoreicon_, other->hidewebstoreicon_);
  swap(signinallowed_, other->signinallowed_);
  swap(variationsrestrictparameter_, other->variationsrestrictparameter_);
  swap(contentpackdefaultfilteringbehavior_, other->contentpackdefaultfilteringbehavior_);
  swap(contentpackmanualbehaviorhosts_, other->contentpackmanualbehaviorhosts_);
  swap(contentpackmanualbehaviorurls_, other->contentpackmanualbehaviorurls_);
  swap(audiocaptureallowedurls_, other->audiocaptureallowedurls_);
  swap(videocaptureallowedurls_, other->videocaptureallowedurls_);
  swap(managedbookmarks_, other->managedbookmarks_);
  swap(maxinvalidationfetchdelay_, other->maxinvalidationfetchdelay_);
  swap(defaultsearchproviderimageurl_, other->defaultsearchproviderimageurl_);
  swap(defaultsearchprovidersearchurlpostparams_, other->defaultsearchprovidersearchurlpostparams_);
  swap(defaultsearchprovidersuggesturlpostparams_, other->defaultsearchprovidersuggesturlpostparams_);
  swap(defaultsearchproviderimageurlpostparams_, other->defaultsearchproviderimageurlpostparams_);
  swap(remoteaccesshostallowclientpairing_, other->remoteaccesshostallowclientpairing_);
  swap(requireonlinerevocationchecksforlocalanchors_, other->requireonlinerevocationchecksforlocalanchors_);
  swap(defaultsearchprovidernewtaburl_, other->defaultsearchprovidernewtaburl_);
  swap(fullscreenallowed_, other->fullscreenallowed_);
  swap(forceephemeralprofiles_, other->forceephemeralprofiles_);
  swap(nativemessagingblacklist_, other->nativemessagingblacklist_);
  swap(nativemessagingwhitelist_, other->nativemessagingwhitelist_);
  swap(nativemessaginguserlevelhosts_, other->nativemessaginguserlevelhosts_);
  swap(remoteaccesshostallowgnubbyauth_, other->remoteaccesshostallowgnubbyauth_);
  swap(wpadquickcheckenabled_, other->wpadquickcheckenabled_);
  swap(remoteaccesshostallowrelayedconnection_, other->remoteaccesshostallowrelayedconnection_);
  swap(remoteaccesshostudpportrange_, other->remoteaccesshostudpportrange_);
  swap(showappsshortcutinbookmarkbar_, other->showappsshortcutinbookmarkbar_);
  swap(registeredprotocolhandlers_, other->registeredprotocolhandlers_);
  swap(enabledeprecatedwebplatformfeatures_, other->enabledeprecatedwebplatformfeatures_);
  swap(networkpredictionoptions_, other->networkpredictionoptions_);
  swap(browserguestmodeenabled_, other->browserguestmodeenabled_);
  swap(browseraddpersonenabled_, other->browseraddpersonenabled_);
  swap(importautofillformdata_, other->importautofillformdata_);
  swap(extensionsettings_, other->extensionsettings_);
  swap(sslversionmin_, other->sslversionmin_);
  swap(forcegooglesafesearch_, other->forcegooglesafesearch_);
  swap(forceyoutubesafetymode_, other->forceyoutubesafetymode_);
  swap(remoteaccesshostmatchusername_, other->remoteaccesshostmatchusername_);
  swap(remoteaccesshosttokenurl_, other->remoteaccesshosttokenurl_);
  swap(remoteaccesshosttokenvalidationurl_, other->remoteaccesshosttokenvalidationurl_);
  swap(remoteaccesshosttokenvalidationcertificateissuer_, other->remoteaccesshosttokenvalidationcertificateissuer_);
  swap(sslerroroverrideallowed_, other->sslerroroverrideallowed_);
  swap(quicallowed_, other->quicallowed_);
  swap(hardwareaccelerationmodeenabled_, other->hardwareaccelerationmodeenabled_);
  swap(defaultprinterselection_, other->defaultprinterselection_);
  swap(allowdinosaureasteregg_, other->allowdinosaureasteregg_);
  swap(remoteaccesshostclientdomain_, other->remoteaccesshostclientdomain_);
  swap(defaultwebbluetoothguardsetting_, other->defaultwebbluetoothguardsetting_);
  swap(suppressunsupportedoswarning_, other->suppressunsupportedoswarning_);
  swap(taskmanagerendprocessenabled_, other->taskmanagerendprocessenabled_);
  swap(alloweddomainsforapps_, other->alloweddomainsforapps_);
  swap(enablemediarouter_, other->enablemediarouter_);
  swap(certificatetransparencyenforcementdisabledforurls_, other->certificatetransparencyenforcementdisabledforurls_);
  swap(webrtcudpportrange_, other->webrtcudpportrange_);
  swap(componentupdatesenabled_, other->componentupdatesenabled_);
  swap(alwaysopenpdfexternally_, other->alwaysopenpdfexternally_);
  swap(forceyoutuberestrict_, other->forceyoutuberestrict_);
  swap(newtabpagelocation_, other->newtabpagelocation_);
  swap(showcasticonintoolbar_, other->showcasticonintoolbar_);
  swap(remoteaccesshostdomainlist_, other->remoteaccesshostdomainlist_);
  swap(remoteaccesshostclientdomainlist_, other->remoteaccesshostclientdomainlist_);
  swap(browsernetworktimequeriesenabled_, other->browsernetworktimequeriesenabled_);
  swap(downloadrestrictions_, other->downloadrestrictions_);
  swap(printpreviewusesystemdefaultprinter_, other->printpreviewusesystemdefaultprinter_);
  swap(cloudpolicyoverridesplatformpolicy_, other->cloudpolicyoverridesplatformpolicy_);
  swap(runallflashinallowmode_, other->runallflashinallowmode_);
  swap(autofillcreditcardenabled_, other->autofillcreditcardenabled_);
  swap(ntlmv2enabled_, other->ntlmv2enabled_);
  swap(promptfordownloadlocation_, other->promptfordownloadlocation_);
  swap(isolateorigins_, other->isolateorigins_);
  swap(siteperprocess_, other->siteperprocess_);
  swap(unsafelytreatinsecureoriginassecure_, other->unsafelytreatinsecureoriginassecure_);
  swap(defaultdownloaddirectory_, other->defaultdownloaddirectory_);
  swap(securitykeypermitattestation_, other->securitykeypermitattestation_);
  swap(abusiveexperienceinterventionenforce_, other->abusiveexperienceinterventionenforce_);
  swap(spellchecklanguage_, other->spellchecklanguage_);
  swap(spellcheckenabled_, other->spellcheckenabled_);
  swap(adssettingforintrusiveadssites_, other->adssettingforintrusiveadssites_);
  swap(passwordprotectionwarningtrigger_, other->passwordprotectionwarningtrigger_);
  swap(relaunchnotification_, other->relaunchnotification_);
  swap(relaunchnotificationperiod_, other->relaunchnotificationperiod_);
  swap(safebrowsingwhitelistdomains_, other->safebrowsingwhitelistdomains_);
  swap(passwordprotectionloginurls_, other->passwordprotectionloginurls_);
  swap(passwordprotectionchangepasswordurl_, other->passwordprotectionchangepasswordurl_);
  swap(safebrowsingextendedreportingenabled_, other->safebrowsingextendedreportingenabled_);
  swap(autoplayallowed_, other->autoplayallowed_);
  swap(autoplaywhitelist_, other->autoplaywhitelist_);
  swap(defaultwebusbguardsetting_, other->defaultwebusbguardsetting_);
  swap(certificatetransparencyenforcementdisabledforcas_, other->certificatetransparencyenforcementdisabledforcas_);
  swap(certificatetransparencyenforcementdisabledforlegacycas_, other->certificatetransparencyenforcementdisabledforlegacycas_);
  swap(mediaroutercastallowallips_, other->mediaroutercastallowallips_);
  swap(webusbaskforurls_, other->webusbaskforurls_);
  swap(webusbblockedforurls_, other->webusbblockedforurls_);
  swap(developertoolsavailability_, other->developertoolsavailability_);
  swap(promotionaltabsenabled_, other->promotionaltabsenabled_);
  swap(safesitesfilterbehavior_, other->safesitesfilterbehavior_);
  swap(overridesecurityrestrictionsoninsecureorigin_, other->overridesecurityrestrictionsoninsecureorigin_);
  swap(autofilladdressenabled_, other->autofilladdressenabled_);
  swap(urlkeyedanonymizeddatacollectionenabled_, other->urlkeyedanonymizeddatacollectionenabled_);
  swap(webrtceventlogcollectionallowed_, other->webrtceventlogcollectionallowed_);
  swap(coalesceh2connectionswithclientcertificatesforhosts_, other->coalesceh2connectionswithclientcertificatesforhosts_);
  swap(webappinstallforcelist_, other->webappinstallforcelist_);
  swap(reportversiondata_, other->reportversiondata_);
  swap(reportpolicydata_, other->reportpolicydata_);
  swap(reportmachineiddata_, other->reportmachineiddata_);
  swap(reportuseriddata_, other->reportuseriddata_);
  swap(printingpapersizedefault_, other->printingpapersizedefault_);
  swap(printheaderfooter_, other->printheaderfooter_);
  swap(enterprisehardwareplatformapienabled_, other->enterprisehardwareplatformapienabled_);
  swap(webusballowdevicesforurls_, other->webusballowdevicesforurls_);
  swap(browsersignin_, other->browsersignin_);
  swap(cloudreportingenabled_, other->cloudreportingenabled_);
  swap(alternativebrowserpath_, other->alternativebrowserpath_);
  swap(alternativebrowserparameters_, other->alternativebrowserparameters_);
  swap(browserswitcherurllist_, other->browserswitcherurllist_);
  swap(browserswitcherurlgreylist_, other->browserswitcherurlgreylist_);
  swap(reportextensionsandpluginsdata_, other->reportextensionsandpluginsdata_);
  swap(cloudmanagementenrollmentmandatory_, other->cloudmanagementenrollmentmandatory_);
  swap(cloudmanagementenrollmenttoken_, other->cloudmanagementenrollmenttoken_);
  swap(browserswitcherexternalsitelisturl_, other->browserswitcherexternalsitelisturl_);
  swap(browserswitcherenabled_, other->browserswitcherenabled_);
  swap(browserswitcherkeeplastchrometab_, other->browserswitcherkeeplastchrometab_);
  swap(browserswitcherdelay_, other->browserswitcherdelay_);
  swap(authnegotiatedelegatebykdcpolicy_, other->authnegotiatedelegatebykdcpolicy_);
  swap(allowpopupsduringpageunload_, other->allowpopupsduringpageunload_);
  swap(remoteaccesshostallowfiletransfer_, other->remoteaccesshostallowfiletransfer_);
  swap(spellchecklanguageblacklist_, other->spellchecklanguageblacklist_);
  swap(signedhttpexchangeenabled_, other->signedhttpexchangeenabled_);
  swap(extensioninstalllistsmergeenabled_, other->extensioninstalllistsmergeenabled_);
  swap(policylistmultiplesourcemergelist_, other->policylistmultiplesourcemergelist_);
  swap(browserswitcherexternalgreylisturl_, other->browserswitcherexternalgreylisturl_);
  swap(policydictionarymultiplesourcemergelist_, other->policydictionarymultiplesourcemergelist_);
  swap(commandlineflagsecuritywarningsenabled_, other->commandlineflagsecuritywarningsenabled_);
  swap(userfeedbackallowed_, other->userfeedbackallowed_);
  swap(browserguestmodeenforced_, other->browserguestmodeenforced_);
  swap(passwordleakdetectionenabled_, other->passwordleakdetectionenabled_);
  swap(dnsoverhttpsmode_, other->dnsoverhttpsmode_);
  swap(sendfilesformalwarecheck_, other->sendfilesformalwarecheck_);
  swap(policyatomicgroupsenabled_, other->policyatomicgroupsenabled_);
  swap(unsafeeventsreportingenabled_, other->unsafeeventsreportingenabled_);
  swap(blocklargefiletransfer_, other->blocklargefiletransfer_);
  swap(delaydeliveryuntilverdict_, other->delaydeliveryuntilverdict_);
  swap(allowpasswordprotectedfiles_, other->allowpasswordprotectedfiles_);
  swap(checkcontentcompliance_, other->checkcontentcompliance_);
  swap(urlstocheckcomplianceofdownloadedcontent_, other->urlstocheckcomplianceofdownloadedcontent_);
  swap(urlstonotcheckcomplianceofuploadedcontent_, other->urlstonotcheckcomplianceofuploadedcontent_);
  swap(urlstocheckformalwareofuploadedcontent_, other->urlstocheckformalwareofuploadedcontent_);
  swap(hstspolicybypasslist_, other->hstspolicybypasslist_);
  swap(allowsyncxhrinpagedismissal_, other->allowsyncxhrinpagedismissal_);
  swap(cloudextensionrequestenabled_, other->cloudextensionrequestenabled_);
  swap(sharedclipboardenabled_, other->sharedclipboardenabled_);
  swap(printingallowedbackgroundgraphicsmodes_, other->printingallowedbackgroundgraphicsmodes_);
  swap(printingbackgroundgraphicsdefault_, other->printingbackgroundgraphicsdefault_);
  swap(legacysamesitecookiebehaviorenabled_, other->legacysamesitecookiebehaviorenabled_);
  swap(legacysamesitecookiebehaviorenabledfordomainlist_, other->legacysamesitecookiebehaviorenabledfordomainlist_);
  swap(tls13hardeningforlocalanchorsenabled_, other->tls13hardeningforlocalanchorsenabled_);
  swap(audiosandboxenabled_, other->audiosandboxenabled_);
  swap(corsmitigationlist_, other->corsmitigationlist_);
  swap(corslegacymodeenabled_, other->corslegacymodeenabled_);
  swap(externalprotocoldialogshowalwaysopencheckbox_, other->externalprotocoldialogshowalwaysopencheckbox_);
  swap(defaultinsecurecontentsetting_, other->defaultinsecurecontentsetting_);
  swap(insecurecontentallowedforurls_, other->insecurecontentallowedforurls_);
  swap(insecurecontentblockedforurls_, other->insecurecontentblockedforurls_);
  swap(blockexternalextensions_, other->blockexternalextensions_);
  swap(webrtclocalipsallowedurls_, other->webrtclocalipsallowedurls_);
  swap(dnsoverhttpstemplates_, other->dnsoverhttpstemplates_);
  swap(globallyscopehttpauthcacheenabled_, other->globallyscopehttpauthcacheenabled_);
  swap(clicktocallenabled_, other->clicktocallenabled_);
  swap(printertypedenylist_, other->printertypedenylist_);
  swap(forcelegacydefaultreferrerpolicy_, other->forcelegacydefaultreferrerpolicy_);
  swap(synctypeslistdisabled_, other->synctypeslistdisabled_);
  swap(ambientauthenticationinprivatemodesenabled_, other->ambientauthenticationinprivatemodesenabled_);
  swap(paymentmethodqueryenabled_, other->paymentmethodqueryenabled_);
  swap(strictermixedcontenttreatmentenabled_, other->strictermixedcontenttreatmentenabled_);
  swap(ntpcustombackgroundenabled_, other->ntpcustombackgroundenabled_);
  swap(dnsinterceptionchecksenabled_, other->dnsinterceptionchecksenabled_);
  swap(localdiscoveryenabled_, other->localdiscoveryenabled_);
  swap(chromevariations_, other->chromevariations_);
  swap(screencaptureallowed_, other->screencaptureallowed_);
  swap(blockunsupportedfiletypes_, other->blockunsupportedfiletypes_);
  swap(urlstonotcheckformalwareofdownloadedcontent_, other->urlstonotcheckformalwareofdownloadedcontent_);
  swap(userdatasnapshotretentionlimit_, other->userdatasnapshotretentionlimit_);
  swap(allownativenotifications_, other->allownativenotifications_);
  swap(safebrowsingprotectionlevel_, other->safebrowsingprotectionlevel_);
  swap(advancedprotectionallowed_, other->advancedprotectionallowed_);
  swap(scrolltotextfragmentenabled_, other->scrolltotextfragmentenabled_);
  swap(onfileattachedenterpriseconnector_, other->onfileattachedenterpriseconnector_);
  swap(onfiledownloadedenterpriseconnector_, other->onfiledownloadedenterpriseconnector_);
  swap(onbulkdataentryenterpriseconnector_, other->onbulkdataentryenterpriseconnector_);
  swap(onsecurityevententerpriseconnector_, other->onsecurityevententerpriseconnector_);
  swap(autoopenfiletypes_, other->autoopenfiletypes_);
  swap(accessibilityimagelabelsenabled_, other->accessibilityimagelabelsenabled_);
  swap(appcacheforceenabled_, other->appcacheforceenabled_);
  swap(autoopenallowedforurls_, other->autoopenallowedforurls_);
  swap(enableexperimentalpolicies_, other->enableexperimentalpolicies_);
  swap(intensivewakeupthrottlingenabled_, other->intensivewakeupthrottlingenabled_);
  swap(defaultsearchprovidercontextmenuaccessallowed_, other->defaultsearchprovidercontextmenuaccessallowed_);
  swap(autolaunchprotocolsfromorigins_, other->autolaunchprotocolsfromorigins_);
}

std::string CloudPolicySettings::GetTypeName() const {
  return "enterprise_management.CloudPolicySettings";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace enterprise_management
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::enterprise_management::CloudPolicySettings* Arena::CreateMaybeMessage< ::enterprise_management::CloudPolicySettings >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_management::CloudPolicySettings >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

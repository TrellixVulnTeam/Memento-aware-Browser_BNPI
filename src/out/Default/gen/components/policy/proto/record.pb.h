// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: record.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_record_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_record_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "record_constants.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_record_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_record_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace reporting {
class EncryptedRecord;
class EncryptedRecordDefaultTypeInternal;
extern EncryptedRecordDefaultTypeInternal _EncryptedRecord_default_instance_;
class EncryptionInfo;
class EncryptionInfoDefaultTypeInternal;
extern EncryptionInfoDefaultTypeInternal _EncryptionInfo_default_instance_;
class Record;
class RecordDefaultTypeInternal;
extern RecordDefaultTypeInternal _Record_default_instance_;
class SequencingInformation;
class SequencingInformationDefaultTypeInternal;
extern SequencingInformationDefaultTypeInternal _SequencingInformation_default_instance_;
class WrappedRecord;
class WrappedRecordDefaultTypeInternal;
extern WrappedRecordDefaultTypeInternal _WrappedRecord_default_instance_;
}  // namespace reporting
PROTOBUF_NAMESPACE_OPEN
template<> ::reporting::EncryptedRecord* Arena::CreateMaybeMessage<::reporting::EncryptedRecord>(Arena*);
template<> ::reporting::EncryptionInfo* Arena::CreateMaybeMessage<::reporting::EncryptionInfo>(Arena*);
template<> ::reporting::Record* Arena::CreateMaybeMessage<::reporting::Record>(Arena*);
template<> ::reporting::SequencingInformation* Arena::CreateMaybeMessage<::reporting::SequencingInformation>(Arena*);
template<> ::reporting::WrappedRecord* Arena::CreateMaybeMessage<::reporting::WrappedRecord>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace reporting {

// ===================================================================

class Record :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:reporting.Record) */ {
 public:
  Record();
  virtual ~Record();

  Record(const Record& from);
  Record(Record&& from) noexcept
    : Record() {
    *this = ::std::move(from);
  }

  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }
  inline Record& operator=(Record&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Record& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Record* internal_default_instance() {
    return reinterpret_cast<const Record*>(
               &_Record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Record& a, Record& b) {
    a.Swap(&b);
  }
  inline void Swap(Record* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Record* New() const final {
    return CreateMaybeMessage<Record>(nullptr);
  }

  Record* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Record>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Record& from);
  void MergeFrom(const Record& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Record* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reporting.Record";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kDmTokenFieldNumber = 3,
    kDestinationFieldNumber = 2,
  };
  // optional string data = 1;
  bool has_data() const;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // optional string dm_token = 3;
  bool has_dm_token() const;
  void clear_dm_token();
  const std::string& dm_token() const;
  void set_dm_token(const std::string& value);
  void set_dm_token(std::string&& value);
  void set_dm_token(const char* value);
  void set_dm_token(const char* value, size_t size);
  std::string* mutable_dm_token();
  std::string* release_dm_token();
  void set_allocated_dm_token(std::string* dm_token);

  // optional .reporting.Destination destination = 2;
  bool has_destination() const;
  void clear_destination();
  ::reporting::Destination destination() const;
  void set_destination(::reporting::Destination value);

  // @@protoc_insertion_point(class_scope:reporting.Record)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dm_token_;
  int destination_;
  friend struct ::TableStruct_record_2eproto;
};
// -------------------------------------------------------------------

class WrappedRecord :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:reporting.WrappedRecord) */ {
 public:
  WrappedRecord();
  virtual ~WrappedRecord();

  WrappedRecord(const WrappedRecord& from);
  WrappedRecord(WrappedRecord&& from) noexcept
    : WrappedRecord() {
    *this = ::std::move(from);
  }

  inline WrappedRecord& operator=(const WrappedRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline WrappedRecord& operator=(WrappedRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const WrappedRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WrappedRecord* internal_default_instance() {
    return reinterpret_cast<const WrappedRecord*>(
               &_WrappedRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WrappedRecord& a, WrappedRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(WrappedRecord* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WrappedRecord* New() const final {
    return CreateMaybeMessage<WrappedRecord>(nullptr);
  }

  WrappedRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WrappedRecord>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const WrappedRecord& from);
  void MergeFrom(const WrappedRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WrappedRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reporting.WrappedRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordDigestFieldNumber = 2,
    kLastRecordDigestFieldNumber = 3,
    kRecordFieldNumber = 1,
  };
  // optional string record_digest = 2;
  bool has_record_digest() const;
  void clear_record_digest();
  const std::string& record_digest() const;
  void set_record_digest(const std::string& value);
  void set_record_digest(std::string&& value);
  void set_record_digest(const char* value);
  void set_record_digest(const char* value, size_t size);
  std::string* mutable_record_digest();
  std::string* release_record_digest();
  void set_allocated_record_digest(std::string* record_digest);

  // optional string last_record_digest = 3;
  bool has_last_record_digest() const;
  void clear_last_record_digest();
  const std::string& last_record_digest() const;
  void set_last_record_digest(const std::string& value);
  void set_last_record_digest(std::string&& value);
  void set_last_record_digest(const char* value);
  void set_last_record_digest(const char* value, size_t size);
  std::string* mutable_last_record_digest();
  std::string* release_last_record_digest();
  void set_allocated_last_record_digest(std::string* last_record_digest);

  // optional .reporting.Record record = 1;
  bool has_record() const;
  void clear_record();
  const ::reporting::Record& record() const;
  ::reporting::Record* release_record();
  ::reporting::Record* mutable_record();
  void set_allocated_record(::reporting::Record* record);

  // @@protoc_insertion_point(class_scope:reporting.WrappedRecord)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_digest_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_record_digest_;
  ::reporting::Record* record_;
  friend struct ::TableStruct_record_2eproto;
};
// -------------------------------------------------------------------

class EncryptionInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:reporting.EncryptionInfo) */ {
 public:
  EncryptionInfo();
  virtual ~EncryptionInfo();

  EncryptionInfo(const EncryptionInfo& from);
  EncryptionInfo(EncryptionInfo&& from) noexcept
    : EncryptionInfo() {
    *this = ::std::move(from);
  }

  inline EncryptionInfo& operator=(const EncryptionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptionInfo& operator=(EncryptionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const EncryptionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EncryptionInfo* internal_default_instance() {
    return reinterpret_cast<const EncryptionInfo*>(
               &_EncryptionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EncryptionInfo& a, EncryptionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptionInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EncryptionInfo* New() const final {
    return CreateMaybeMessage<EncryptionInfo>(nullptr);
  }

  EncryptionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EncryptionInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EncryptionInfo& from);
  void MergeFrom(const EncryptionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EncryptionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reporting.EncryptionInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptionKeyFieldNumber = 1,
    kPublicKeyIdFieldNumber = 2,
  };
  // optional bytes encryption_key = 1;
  bool has_encryption_key() const;
  void clear_encryption_key();
  const std::string& encryption_key() const;
  void set_encryption_key(const std::string& value);
  void set_encryption_key(std::string&& value);
  void set_encryption_key(const char* value);
  void set_encryption_key(const void* value, size_t size);
  std::string* mutable_encryption_key();
  std::string* release_encryption_key();
  void set_allocated_encryption_key(std::string* encryption_key);

  // optional uint64 public_key_id = 2;
  bool has_public_key_id() const;
  void clear_public_key_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 public_key_id() const;
  void set_public_key_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:reporting.EncryptionInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encryption_key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 public_key_id_;
  friend struct ::TableStruct_record_2eproto;
};
// -------------------------------------------------------------------

class SequencingInformation :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:reporting.SequencingInformation) */ {
 public:
  SequencingInformation();
  virtual ~SequencingInformation();

  SequencingInformation(const SequencingInformation& from);
  SequencingInformation(SequencingInformation&& from) noexcept
    : SequencingInformation() {
    *this = ::std::move(from);
  }

  inline SequencingInformation& operator=(const SequencingInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SequencingInformation& operator=(SequencingInformation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SequencingInformation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SequencingInformation* internal_default_instance() {
    return reinterpret_cast<const SequencingInformation*>(
               &_SequencingInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SequencingInformation& a, SequencingInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(SequencingInformation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SequencingInformation* New() const final {
    return CreateMaybeMessage<SequencingInformation>(nullptr);
  }

  SequencingInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SequencingInformation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SequencingInformation& from);
  void MergeFrom(const SequencingInformation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SequencingInformation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reporting.SequencingInformation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSequencingIdFieldNumber = 1,
    kGenerationIdFieldNumber = 2,
    kPriorityFieldNumber = 3,
  };
  // optional uint64 sequencing_id = 1;
  bool has_sequencing_id() const;
  void clear_sequencing_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 sequencing_id() const;
  void set_sequencing_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 generation_id = 2;
  bool has_generation_id() const;
  void clear_generation_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 generation_id() const;
  void set_generation_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional .reporting.Priority priority = 3;
  bool has_priority() const;
  void clear_priority();
  ::reporting::Priority priority() const;
  void set_priority(::reporting::Priority value);

  // @@protoc_insertion_point(class_scope:reporting.SequencingInformation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sequencing_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 generation_id_;
  int priority_;
  friend struct ::TableStruct_record_2eproto;
};
// -------------------------------------------------------------------

class EncryptedRecord :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:reporting.EncryptedRecord) */ {
 public:
  EncryptedRecord();
  virtual ~EncryptedRecord();

  EncryptedRecord(const EncryptedRecord& from);
  EncryptedRecord(EncryptedRecord&& from) noexcept
    : EncryptedRecord() {
    *this = ::std::move(from);
  }

  inline EncryptedRecord& operator=(const EncryptedRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptedRecord& operator=(EncryptedRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const EncryptedRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EncryptedRecord* internal_default_instance() {
    return reinterpret_cast<const EncryptedRecord*>(
               &_EncryptedRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EncryptedRecord& a, EncryptedRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptedRecord* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EncryptedRecord* New() const final {
    return CreateMaybeMessage<EncryptedRecord>(nullptr);
  }

  EncryptedRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EncryptedRecord>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EncryptedRecord& from);
  void MergeFrom(const EncryptedRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EncryptedRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reporting.EncryptedRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptedWrappedRecordFieldNumber = 1,
    kEncryptionInfoFieldNumber = 2,
    kSequencingInformationFieldNumber = 3,
  };
  // optional string encrypted_wrapped_record = 1;
  bool has_encrypted_wrapped_record() const;
  void clear_encrypted_wrapped_record();
  const std::string& encrypted_wrapped_record() const;
  void set_encrypted_wrapped_record(const std::string& value);
  void set_encrypted_wrapped_record(std::string&& value);
  void set_encrypted_wrapped_record(const char* value);
  void set_encrypted_wrapped_record(const char* value, size_t size);
  std::string* mutable_encrypted_wrapped_record();
  std::string* release_encrypted_wrapped_record();
  void set_allocated_encrypted_wrapped_record(std::string* encrypted_wrapped_record);

  // optional .reporting.EncryptionInfo encryption_info = 2;
  bool has_encryption_info() const;
  void clear_encryption_info();
  const ::reporting::EncryptionInfo& encryption_info() const;
  ::reporting::EncryptionInfo* release_encryption_info();
  ::reporting::EncryptionInfo* mutable_encryption_info();
  void set_allocated_encryption_info(::reporting::EncryptionInfo* encryption_info);

  // optional .reporting.SequencingInformation sequencing_information = 3;
  bool has_sequencing_information() const;
  void clear_sequencing_information();
  const ::reporting::SequencingInformation& sequencing_information() const;
  ::reporting::SequencingInformation* release_sequencing_information();
  ::reporting::SequencingInformation* mutable_sequencing_information();
  void set_allocated_sequencing_information(::reporting::SequencingInformation* sequencing_information);

  // @@protoc_insertion_point(class_scope:reporting.EncryptedRecord)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_wrapped_record_;
  ::reporting::EncryptionInfo* encryption_info_;
  ::reporting::SequencingInformation* sequencing_information_;
  friend struct ::TableStruct_record_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Record

// optional string data = 1;
inline bool Record::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Record::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Record::data() const {
  // @@protoc_insertion_point(field_get:reporting.Record.data)
  return data_.GetNoArena();
}
inline void Record::set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:reporting.Record.data)
}
inline void Record::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:reporting.Record.data)
}
inline void Record::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:reporting.Record.data)
}
inline void Record::set_data(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:reporting.Record.data)
}
inline std::string* Record::mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:reporting.Record.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Record::release_data() {
  // @@protoc_insertion_point(field_release:reporting.Record.data)
  if (!has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Record::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:reporting.Record.data)
}

// optional .reporting.Destination destination = 2;
inline bool Record::has_destination() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Record::clear_destination() {
  destination_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::reporting::Destination Record::destination() const {
  // @@protoc_insertion_point(field_get:reporting.Record.destination)
  return static_cast< ::reporting::Destination >(destination_);
}
inline void Record::set_destination(::reporting::Destination value) {
  assert(::reporting::Destination_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  destination_ = value;
  // @@protoc_insertion_point(field_set:reporting.Record.destination)
}

// optional string dm_token = 3;
inline bool Record::has_dm_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Record::clear_dm_token() {
  dm_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Record::dm_token() const {
  // @@protoc_insertion_point(field_get:reporting.Record.dm_token)
  return dm_token_.GetNoArena();
}
inline void Record::set_dm_token(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  dm_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:reporting.Record.dm_token)
}
inline void Record::set_dm_token(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  dm_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:reporting.Record.dm_token)
}
inline void Record::set_dm_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  dm_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:reporting.Record.dm_token)
}
inline void Record::set_dm_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  dm_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:reporting.Record.dm_token)
}
inline std::string* Record::mutable_dm_token() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:reporting.Record.dm_token)
  return dm_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Record::release_dm_token() {
  // @@protoc_insertion_point(field_release:reporting.Record.dm_token)
  if (!has_dm_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return dm_token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Record::set_allocated_dm_token(std::string* dm_token) {
  if (dm_token != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dm_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dm_token);
  // @@protoc_insertion_point(field_set_allocated:reporting.Record.dm_token)
}

// -------------------------------------------------------------------

// WrappedRecord

// optional .reporting.Record record = 1;
inline bool WrappedRecord::has_record() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WrappedRecord::clear_record() {
  if (record_ != nullptr) record_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::reporting::Record& WrappedRecord::record() const {
  const ::reporting::Record* p = record_;
  // @@protoc_insertion_point(field_get:reporting.WrappedRecord.record)
  return p != nullptr ? *p : *reinterpret_cast<const ::reporting::Record*>(
      &::reporting::_Record_default_instance_);
}
inline ::reporting::Record* WrappedRecord::release_record() {
  // @@protoc_insertion_point(field_release:reporting.WrappedRecord.record)
  _has_bits_[0] &= ~0x00000004u;
  ::reporting::Record* temp = record_;
  record_ = nullptr;
  return temp;
}
inline ::reporting::Record* WrappedRecord::mutable_record() {
  _has_bits_[0] |= 0x00000004u;
  if (record_ == nullptr) {
    auto* p = CreateMaybeMessage<::reporting::Record>(GetArenaNoVirtual());
    record_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reporting.WrappedRecord.record)
  return record_;
}
inline void WrappedRecord::set_allocated_record(::reporting::Record* record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete record_;
  }
  if (record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  record_ = record;
  // @@protoc_insertion_point(field_set_allocated:reporting.WrappedRecord.record)
}

// optional string record_digest = 2;
inline bool WrappedRecord::has_record_digest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WrappedRecord::clear_record_digest() {
  record_digest_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WrappedRecord::record_digest() const {
  // @@protoc_insertion_point(field_get:reporting.WrappedRecord.record_digest)
  return record_digest_.GetNoArena();
}
inline void WrappedRecord::set_record_digest(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  record_digest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:reporting.WrappedRecord.record_digest)
}
inline void WrappedRecord::set_record_digest(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  record_digest_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:reporting.WrappedRecord.record_digest)
}
inline void WrappedRecord::set_record_digest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  record_digest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:reporting.WrappedRecord.record_digest)
}
inline void WrappedRecord::set_record_digest(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  record_digest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:reporting.WrappedRecord.record_digest)
}
inline std::string* WrappedRecord::mutable_record_digest() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:reporting.WrappedRecord.record_digest)
  return record_digest_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WrappedRecord::release_record_digest() {
  // @@protoc_insertion_point(field_release:reporting.WrappedRecord.record_digest)
  if (!has_record_digest()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return record_digest_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WrappedRecord::set_allocated_record_digest(std::string* record_digest) {
  if (record_digest != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  record_digest_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record_digest);
  // @@protoc_insertion_point(field_set_allocated:reporting.WrappedRecord.record_digest)
}

// optional string last_record_digest = 3;
inline bool WrappedRecord::has_last_record_digest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WrappedRecord::clear_last_record_digest() {
  last_record_digest_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WrappedRecord::last_record_digest() const {
  // @@protoc_insertion_point(field_get:reporting.WrappedRecord.last_record_digest)
  return last_record_digest_.GetNoArena();
}
inline void WrappedRecord::set_last_record_digest(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  last_record_digest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:reporting.WrappedRecord.last_record_digest)
}
inline void WrappedRecord::set_last_record_digest(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  last_record_digest_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:reporting.WrappedRecord.last_record_digest)
}
inline void WrappedRecord::set_last_record_digest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  last_record_digest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:reporting.WrappedRecord.last_record_digest)
}
inline void WrappedRecord::set_last_record_digest(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  last_record_digest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:reporting.WrappedRecord.last_record_digest)
}
inline std::string* WrappedRecord::mutable_last_record_digest() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:reporting.WrappedRecord.last_record_digest)
  return last_record_digest_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WrappedRecord::release_last_record_digest() {
  // @@protoc_insertion_point(field_release:reporting.WrappedRecord.last_record_digest)
  if (!has_last_record_digest()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return last_record_digest_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WrappedRecord::set_allocated_last_record_digest(std::string* last_record_digest) {
  if (last_record_digest != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  last_record_digest_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_record_digest);
  // @@protoc_insertion_point(field_set_allocated:reporting.WrappedRecord.last_record_digest)
}

// -------------------------------------------------------------------

// EncryptionInfo

// optional bytes encryption_key = 1;
inline bool EncryptionInfo::has_encryption_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EncryptionInfo::clear_encryption_key() {
  encryption_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EncryptionInfo::encryption_key() const {
  // @@protoc_insertion_point(field_get:reporting.EncryptionInfo.encryption_key)
  return encryption_key_.GetNoArena();
}
inline void EncryptionInfo::set_encryption_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  encryption_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:reporting.EncryptionInfo.encryption_key)
}
inline void EncryptionInfo::set_encryption_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  encryption_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:reporting.EncryptionInfo.encryption_key)
}
inline void EncryptionInfo::set_encryption_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  encryption_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:reporting.EncryptionInfo.encryption_key)
}
inline void EncryptionInfo::set_encryption_key(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  encryption_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:reporting.EncryptionInfo.encryption_key)
}
inline std::string* EncryptionInfo::mutable_encryption_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:reporting.EncryptionInfo.encryption_key)
  return encryption_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EncryptionInfo::release_encryption_key() {
  // @@protoc_insertion_point(field_release:reporting.EncryptionInfo.encryption_key)
  if (!has_encryption_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return encryption_key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EncryptionInfo::set_allocated_encryption_key(std::string* encryption_key) {
  if (encryption_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  encryption_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encryption_key);
  // @@protoc_insertion_point(field_set_allocated:reporting.EncryptionInfo.encryption_key)
}

// optional uint64 public_key_id = 2;
inline bool EncryptionInfo::has_public_key_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EncryptionInfo::clear_public_key_id() {
  public_key_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EncryptionInfo::public_key_id() const {
  // @@protoc_insertion_point(field_get:reporting.EncryptionInfo.public_key_id)
  return public_key_id_;
}
inline void EncryptionInfo::set_public_key_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  public_key_id_ = value;
  // @@protoc_insertion_point(field_set:reporting.EncryptionInfo.public_key_id)
}

// -------------------------------------------------------------------

// SequencingInformation

// optional uint64 sequencing_id = 1;
inline bool SequencingInformation::has_sequencing_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SequencingInformation::clear_sequencing_id() {
  sequencing_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SequencingInformation::sequencing_id() const {
  // @@protoc_insertion_point(field_get:reporting.SequencingInformation.sequencing_id)
  return sequencing_id_;
}
inline void SequencingInformation::set_sequencing_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  sequencing_id_ = value;
  // @@protoc_insertion_point(field_set:reporting.SequencingInformation.sequencing_id)
}

// optional uint64 generation_id = 2;
inline bool SequencingInformation::has_generation_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SequencingInformation::clear_generation_id() {
  generation_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SequencingInformation::generation_id() const {
  // @@protoc_insertion_point(field_get:reporting.SequencingInformation.generation_id)
  return generation_id_;
}
inline void SequencingInformation::set_generation_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  generation_id_ = value;
  // @@protoc_insertion_point(field_set:reporting.SequencingInformation.generation_id)
}

// optional .reporting.Priority priority = 3;
inline bool SequencingInformation::has_priority() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SequencingInformation::clear_priority() {
  priority_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::reporting::Priority SequencingInformation::priority() const {
  // @@protoc_insertion_point(field_get:reporting.SequencingInformation.priority)
  return static_cast< ::reporting::Priority >(priority_);
}
inline void SequencingInformation::set_priority(::reporting::Priority value) {
  assert(::reporting::Priority_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  priority_ = value;
  // @@protoc_insertion_point(field_set:reporting.SequencingInformation.priority)
}

// -------------------------------------------------------------------

// EncryptedRecord

// optional string encrypted_wrapped_record = 1;
inline bool EncryptedRecord::has_encrypted_wrapped_record() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EncryptedRecord::clear_encrypted_wrapped_record() {
  encrypted_wrapped_record_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EncryptedRecord::encrypted_wrapped_record() const {
  // @@protoc_insertion_point(field_get:reporting.EncryptedRecord.encrypted_wrapped_record)
  return encrypted_wrapped_record_.GetNoArena();
}
inline void EncryptedRecord::set_encrypted_wrapped_record(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  encrypted_wrapped_record_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:reporting.EncryptedRecord.encrypted_wrapped_record)
}
inline void EncryptedRecord::set_encrypted_wrapped_record(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  encrypted_wrapped_record_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:reporting.EncryptedRecord.encrypted_wrapped_record)
}
inline void EncryptedRecord::set_encrypted_wrapped_record(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  encrypted_wrapped_record_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:reporting.EncryptedRecord.encrypted_wrapped_record)
}
inline void EncryptedRecord::set_encrypted_wrapped_record(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  encrypted_wrapped_record_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:reporting.EncryptedRecord.encrypted_wrapped_record)
}
inline std::string* EncryptedRecord::mutable_encrypted_wrapped_record() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:reporting.EncryptedRecord.encrypted_wrapped_record)
  return encrypted_wrapped_record_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EncryptedRecord::release_encrypted_wrapped_record() {
  // @@protoc_insertion_point(field_release:reporting.EncryptedRecord.encrypted_wrapped_record)
  if (!has_encrypted_wrapped_record()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return encrypted_wrapped_record_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EncryptedRecord::set_allocated_encrypted_wrapped_record(std::string* encrypted_wrapped_record) {
  if (encrypted_wrapped_record != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  encrypted_wrapped_record_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encrypted_wrapped_record);
  // @@protoc_insertion_point(field_set_allocated:reporting.EncryptedRecord.encrypted_wrapped_record)
}

// optional .reporting.EncryptionInfo encryption_info = 2;
inline bool EncryptedRecord::has_encryption_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EncryptedRecord::clear_encryption_info() {
  if (encryption_info_ != nullptr) encryption_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::reporting::EncryptionInfo& EncryptedRecord::encryption_info() const {
  const ::reporting::EncryptionInfo* p = encryption_info_;
  // @@protoc_insertion_point(field_get:reporting.EncryptedRecord.encryption_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::reporting::EncryptionInfo*>(
      &::reporting::_EncryptionInfo_default_instance_);
}
inline ::reporting::EncryptionInfo* EncryptedRecord::release_encryption_info() {
  // @@protoc_insertion_point(field_release:reporting.EncryptedRecord.encryption_info)
  _has_bits_[0] &= ~0x00000002u;
  ::reporting::EncryptionInfo* temp = encryption_info_;
  encryption_info_ = nullptr;
  return temp;
}
inline ::reporting::EncryptionInfo* EncryptedRecord::mutable_encryption_info() {
  _has_bits_[0] |= 0x00000002u;
  if (encryption_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::reporting::EncryptionInfo>(GetArenaNoVirtual());
    encryption_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reporting.EncryptedRecord.encryption_info)
  return encryption_info_;
}
inline void EncryptedRecord::set_allocated_encryption_info(::reporting::EncryptionInfo* encryption_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete encryption_info_;
  }
  if (encryption_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      encryption_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encryption_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  encryption_info_ = encryption_info;
  // @@protoc_insertion_point(field_set_allocated:reporting.EncryptedRecord.encryption_info)
}

// optional .reporting.SequencingInformation sequencing_information = 3;
inline bool EncryptedRecord::has_sequencing_information() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EncryptedRecord::clear_sequencing_information() {
  if (sequencing_information_ != nullptr) sequencing_information_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::reporting::SequencingInformation& EncryptedRecord::sequencing_information() const {
  const ::reporting::SequencingInformation* p = sequencing_information_;
  // @@protoc_insertion_point(field_get:reporting.EncryptedRecord.sequencing_information)
  return p != nullptr ? *p : *reinterpret_cast<const ::reporting::SequencingInformation*>(
      &::reporting::_SequencingInformation_default_instance_);
}
inline ::reporting::SequencingInformation* EncryptedRecord::release_sequencing_information() {
  // @@protoc_insertion_point(field_release:reporting.EncryptedRecord.sequencing_information)
  _has_bits_[0] &= ~0x00000004u;
  ::reporting::SequencingInformation* temp = sequencing_information_;
  sequencing_information_ = nullptr;
  return temp;
}
inline ::reporting::SequencingInformation* EncryptedRecord::mutable_sequencing_information() {
  _has_bits_[0] |= 0x00000004u;
  if (sequencing_information_ == nullptr) {
    auto* p = CreateMaybeMessage<::reporting::SequencingInformation>(GetArenaNoVirtual());
    sequencing_information_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reporting.EncryptedRecord.sequencing_information)
  return sequencing_information_;
}
inline void EncryptedRecord::set_allocated_sequencing_information(::reporting::SequencingInformation* sequencing_information) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sequencing_information_;
  }
  if (sequencing_information) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sequencing_information = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sequencing_information, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sequencing_information_ = sequencing_information;
  // @@protoc_insertion_point(field_set_allocated:reporting.EncryptedRecord.sequencing_information)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace reporting

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_record_2eproto

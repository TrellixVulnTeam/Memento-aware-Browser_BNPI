// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chrome_extension_policy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chrome_5fextension_5fpolicy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chrome_5fextension_5fpolicy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include "components/policy/proto/policy_proto_export.h"
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chrome_5fextension_5fpolicy_2eproto POLICY_PROTO_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct POLICY_PROTO_EXPORT TableStruct_chrome_5fextension_5fpolicy_2eproto {
static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
PROTOBUF_SECTION_VARIABLE(protodesc_cold);
static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
PROTOBUF_SECTION_VARIABLE(protodesc_cold);
static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
PROTOBUF_SECTION_VARIABLE(protodesc_cold);
static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace enterprise_management {
class ExternalPolicyData;
class ExternalPolicyDataDefaultTypeInternal;
POLICY_PROTO_EXPORT extern ExternalPolicyDataDefaultTypeInternal _ExternalPolicyData_default_instance_;
}  // namespace enterprise_management
PROTOBUF_NAMESPACE_OPEN
template<> POLICY_PROTO_EXPORT ::enterprise_management::ExternalPolicyData* Arena::CreateMaybeMessage<::enterprise_management::ExternalPolicyData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace enterprise_management {

// ===================================================================

class POLICY_PROTO_EXPORT ExternalPolicyData :
public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.ExternalPolicyData) */ {
public:
ExternalPolicyData();
virtual ~ExternalPolicyData();

ExternalPolicyData(const ExternalPolicyData& from);
ExternalPolicyData(ExternalPolicyData&& from) noexcept
: ExternalPolicyData() {
*this = ::std::move(from);
}

inline ExternalPolicyData& operator=(const ExternalPolicyData& from) {
CopyFrom(from);
return *this;
}
inline ExternalPolicyData& operator=(ExternalPolicyData&& from) noexcept {
if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
if (this != &from) InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields();
}
inline std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields();
}

static const ExternalPolicyData& default_instance();

static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
static inline const ExternalPolicyData* internal_default_instance() {
return reinterpret_cast<const ExternalPolicyData*>(
&_ExternalPolicyData_default_instance_);
}
static constexpr int kIndexInFileMessages =
0;

friend void swap(ExternalPolicyData& a, ExternalPolicyData& b) {
a.Swap(&b);
}
inline void Swap(ExternalPolicyData* other) {
if (other == this) return;
InternalSwap(other);
}

// implements Message ----------------------------------------------

inline ExternalPolicyData* New() const final {
return CreateMaybeMessage<ExternalPolicyData>(nullptr);
}

ExternalPolicyData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
return CreateMaybeMessage<ExternalPolicyData>(arena);
}
void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
final;
void CopyFrom(const ExternalPolicyData& from);
void MergeFrom(const ExternalPolicyData& from);
PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
#else
bool MergePartialFromCodedStream(
::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
void SerializeWithCachedSizes(
::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
void DiscardUnknownFields();
int GetCachedSize() const final { return _cached_size_.Get(); }

private:
inline void SharedCtor();
inline void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(ExternalPolicyData* other);
friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
return "enterprise_management.ExternalPolicyData";
}
private:
inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
return nullptr;
}
inline void* MaybeArenaPtr() const {
return nullptr;
}
public:

std::string GetTypeName() const final;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

enum : int {
kDownloadUrlFieldNumber = 1,
kSecureHashFieldNumber = 2,
};
// optional string download_url = 1;
bool has_download_url() const;
void clear_download_url();
const std::string& download_url() const;
void set_download_url(const std::string& value);
void set_download_url(std::string&& value);
void set_download_url(const char* value);
void set_download_url(const char* value, size_t size);
std::string* mutable_download_url();
std::string* release_download_url();
void set_allocated_download_url(std::string* download_url);

// optional bytes secure_hash = 2;
bool has_secure_hash() const;
void clear_secure_hash();
const std::string& secure_hash() const;
void set_secure_hash(const std::string& value);
void set_secure_hash(std::string&& value);
void set_secure_hash(const char* value);
void set_secure_hash(const void* value, size_t size);
std::string* mutable_secure_hash();
std::string* release_secure_hash();
void set_allocated_secure_hash(std::string* secure_hash);

// @@protoc_insertion_point(class_scope:enterprise_management.ExternalPolicyData)
private:
class _Internal;

::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr download_url_;
::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secure_hash_;
friend struct ::TableStruct_chrome_5fextension_5fpolicy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExternalPolicyData

// optional string download_url = 1;
inline bool ExternalPolicyData::has_download_url() const {
return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExternalPolicyData::clear_download_url() {
download_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
_has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ExternalPolicyData::download_url() const {
// @@protoc_insertion_point(field_get:enterprise_management.ExternalPolicyData.download_url)
return download_url_.GetNoArena();
}
inline void ExternalPolicyData::set_download_url(const std::string& value) {
_has_bits_[0] |= 0x00000001u;
download_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.ExternalPolicyData.download_url)
}
inline void ExternalPolicyData::set_download_url(std::string&& value) {
_has_bits_[0] |= 0x00000001u;
download_url_.SetNoArena(
&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.ExternalPolicyData.download_url)
}
inline void ExternalPolicyData::set_download_url(const char* value) {
GOOGLE_DCHECK(value != nullptr);
_has_bits_[0] |= 0x00000001u;
download_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.ExternalPolicyData.download_url)
}
inline void ExternalPolicyData::set_download_url(const char* value, size_t size) {
_has_bits_[0] |= 0x00000001u;
download_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.ExternalPolicyData.download_url)
}
inline std::string* ExternalPolicyData::mutable_download_url() {
_has_bits_[0] |= 0x00000001u;
// @@protoc_insertion_point(field_mutable:enterprise_management.ExternalPolicyData.download_url)
return download_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExternalPolicyData::release_download_url() {
// @@protoc_insertion_point(field_release:enterprise_management.ExternalPolicyData.download_url)
if (!has_download_url()) {
return nullptr;
}
_has_bits_[0] &= ~0x00000001u;
return download_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalPolicyData::set_allocated_download_url(std::string* download_url) {
if (download_url != nullptr) {
_has_bits_[0] |= 0x00000001u;
} else {
_has_bits_[0] &= ~0x00000001u;
}
download_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), download_url);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.ExternalPolicyData.download_url)
}

// optional bytes secure_hash = 2;
inline bool ExternalPolicyData::has_secure_hash() const {
return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExternalPolicyData::clear_secure_hash() {
secure_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
_has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ExternalPolicyData::secure_hash() const {
// @@protoc_insertion_point(field_get:enterprise_management.ExternalPolicyData.secure_hash)
return secure_hash_.GetNoArena();
}
inline void ExternalPolicyData::set_secure_hash(const std::string& value) {
_has_bits_[0] |= 0x00000002u;
secure_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
// @@protoc_insertion_point(field_set:enterprise_management.ExternalPolicyData.secure_hash)
}
inline void ExternalPolicyData::set_secure_hash(std::string&& value) {
_has_bits_[0] |= 0x00000002u;
secure_hash_.SetNoArena(
&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
// @@protoc_insertion_point(field_set_rvalue:enterprise_management.ExternalPolicyData.secure_hash)
}
inline void ExternalPolicyData::set_secure_hash(const char* value) {
GOOGLE_DCHECK(value != nullptr);
_has_bits_[0] |= 0x00000002u;
secure_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
// @@protoc_insertion_point(field_set_char:enterprise_management.ExternalPolicyData.secure_hash)
}
inline void ExternalPolicyData::set_secure_hash(const void* value, size_t size) {
_has_bits_[0] |= 0x00000002u;
secure_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
::std::string(reinterpret_cast<const char*>(value), size));
// @@protoc_insertion_point(field_set_pointer:enterprise_management.ExternalPolicyData.secure_hash)
}
inline std::string* ExternalPolicyData::mutable_secure_hash() {
_has_bits_[0] |= 0x00000002u;
// @@protoc_insertion_point(field_mutable:enterprise_management.ExternalPolicyData.secure_hash)
return secure_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExternalPolicyData::release_secure_hash() {
// @@protoc_insertion_point(field_release:enterprise_management.ExternalPolicyData.secure_hash)
if (!has_secure_hash()) {
return nullptr;
}
_has_bits_[0] &= ~0x00000002u;
return secure_hash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExternalPolicyData::set_allocated_secure_hash(std::string* secure_hash) {
if (secure_hash != nullptr) {
_has_bits_[0] |= 0x00000002u;
} else {
_has_bits_[0] &= ~0x00000002u;
}
secure_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secure_hash);
// @@protoc_insertion_point(field_set_allocated:enterprise_management.ExternalPolicyData.secure_hash)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace enterprise_management

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chrome_5fextension_5fpolicy_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: record_constants.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_record_5fconstants_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_record_5fconstants_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_record_5fconstants_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_record_5fconstants_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace reporting {

enum Destination : int {
  UNDEFINED_DESTINATION = 0,
  UPLOAD_EVENTS = 1
};
bool Destination_IsValid(int value);
constexpr Destination Destination_MIN = UNDEFINED_DESTINATION;
constexpr Destination Destination_MAX = UPLOAD_EVENTS;
constexpr int Destination_ARRAYSIZE = Destination_MAX + 1;

const std::string& Destination_Name(Destination value);
template<typename T>
inline const std::string& Destination_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Destination>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Destination_Name.");
  return Destination_Name(static_cast<Destination>(enum_t_value));
}
bool Destination_Parse(
    const std::string& name, Destination* value);
enum Priority : int {
  UNDEFINED_PRIORITY = 0,
  IMMEDIATE = 1,
  FAST_BATCH = 2,
  SLOW_BATCH = 3,
  BACKGROUND_BATCH = 4
};
bool Priority_IsValid(int value);
constexpr Priority Priority_MIN = UNDEFINED_PRIORITY;
constexpr Priority Priority_MAX = BACKGROUND_BATCH;
constexpr int Priority_ARRAYSIZE = Priority_MAX + 1;

const std::string& Priority_Name(Priority value);
template<typename T>
inline const std::string& Priority_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Priority>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Priority_Name.");
  return Priority_Name(static_cast<Priority>(enum_t_value));
}
bool Priority_Parse(
    const std::string& name, Priority* value);
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace reporting

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::reporting::Destination> : ::std::true_type {};
template <> struct is_proto_enum< ::reporting::Priority> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_record_5fconstants_2eproto

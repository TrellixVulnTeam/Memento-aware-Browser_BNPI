// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: annotations.proto

#include "annotations.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_dom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HtmlPath_dom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_math_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rectangle_math_2eproto;
namespace userfeedback {
class AnnotationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Annotation> _instance;
} _Annotation_default_instance_;
}  // namespace userfeedback
static void InitDefaultsscc_info_Annotation_annotations_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userfeedback::_Annotation_default_instance_;
    new (ptr) ::userfeedback::Annotation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userfeedback::Annotation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Annotation_annotations_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Annotation_annotations_2eproto}, {
      &scc_info_Rectangle_math_2eproto.base,
      &scc_info_HtmlPath_dom_2eproto.base,}};

namespace userfeedback {

// ===================================================================

void Annotation::InitAsDefaultInstance() {
  ::userfeedback::_Annotation_default_instance_._instance.get_mutable()->rectangle_ = const_cast< ::userfeedback::Rectangle*>(
      ::userfeedback::Rectangle::internal_default_instance());
  ::userfeedback::_Annotation_default_instance_._instance.get_mutable()->annotatedelementpath_ = const_cast< ::userfeedback::HtmlPath*>(
      ::userfeedback::HtmlPath::internal_default_instance());
}
class Annotation::_Internal {
 public:
  using HasBits = decltype(std::declval<Annotation>()._has_bits_);
  static const ::userfeedback::Rectangle& rectangle(const Annotation* msg);
  static void set_has_rectangle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_snippet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::userfeedback::HtmlPath& annotatedelementpath(const Annotation* msg);
  static void set_has_annotatedelementpath(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::userfeedback::Rectangle&
Annotation::_Internal::rectangle(const Annotation* msg) {
  return *msg->rectangle_;
}
const ::userfeedback::HtmlPath&
Annotation::_Internal::annotatedelementpath(const Annotation* msg) {
  return *msg->annotatedelementpath_;
}
void Annotation::clear_rectangle() {
  if (rectangle_ != nullptr) rectangle_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Annotation::clear_annotatedelementpath() {
  if (annotatedelementpath_ != nullptr) annotatedelementpath_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
Annotation::Annotation()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userfeedback.Annotation)
}
Annotation::Annotation(const Annotation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  snippet_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_snippet()) {
    snippet_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.snippet_);
  }
  if (from.has_rectangle()) {
    rectangle_ = new ::userfeedback::Rectangle(*from.rectangle_);
  } else {
    rectangle_ = nullptr;
  }
  if (from.has_annotatedelementpath()) {
    annotatedelementpath_ = new ::userfeedback::HtmlPath(*from.annotatedelementpath_);
  } else {
    annotatedelementpath_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:userfeedback.Annotation)
}

void Annotation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Annotation_annotations_2eproto.base);
  snippet_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rectangle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&annotatedelementpath_) -
      reinterpret_cast<char*>(&rectangle_)) + sizeof(annotatedelementpath_));
}

Annotation::~Annotation() {
  // @@protoc_insertion_point(destructor:userfeedback.Annotation)
  SharedDtor();
}

void Annotation::SharedDtor() {
  snippet_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rectangle_;
  if (this != internal_default_instance()) delete annotatedelementpath_;
}

void Annotation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Annotation& Annotation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Annotation_annotations_2eproto.base);
  return *internal_default_instance();
}


void Annotation::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.Annotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      snippet_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rectangle_ != nullptr);
      rectangle_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(annotatedelementpath_ != nullptr);
      annotatedelementpath_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Annotation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .userfeedback.Rectangle rectangle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_rectangle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string snippet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_snippet(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .userfeedback.HtmlPath annotatedElementPath = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_annotatedelementpath(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Annotation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:userfeedback.Annotation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .userfeedback.Rectangle rectangle = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rectangle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string snippet = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_snippet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .userfeedback.HtmlPath annotatedElementPath = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_annotatedelementpath()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userfeedback.Annotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userfeedback.Annotation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Annotation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userfeedback.Annotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .userfeedback.Rectangle rectangle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::rectangle(this), output);
  }

  // optional string snippet = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->snippet(), output);
  }

  // optional .userfeedback.HtmlPath annotatedElementPath = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::annotatedelementpath(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:userfeedback.Annotation)
}

size_t Annotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.Annotation)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required .userfeedback.Rectangle rectangle = 1;
  if (has_rectangle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rectangle_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string snippet = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->snippet());
  }

  // optional .userfeedback.HtmlPath annotatedElementPath = 3;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *annotatedelementpath_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Annotation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Annotation*>(
      &from));
}

void Annotation::MergeFrom(const Annotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.Annotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      snippet_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.snippet_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_rectangle()->::userfeedback::Rectangle::MergeFrom(from.rectangle());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_annotatedelementpath()->::userfeedback::HtmlPath::MergeFrom(from.annotatedelementpath());
    }
  }
}

void Annotation::CopyFrom(const Annotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.Annotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Annotation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_rectangle()) {
    if (!this->rectangle_->IsInitialized()) return false;
  }
  return true;
}

void Annotation::InternalSwap(Annotation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  snippet_.Swap(&other->snippet_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rectangle_, other->rectangle_);
  swap(annotatedelementpath_, other->annotatedelementpath_);
}

std::string Annotation::GetTypeName() const {
  return "userfeedback.Annotation";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace userfeedback
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::userfeedback::Annotation* Arena::CreateMaybeMessage< ::userfeedback::Annotation >(Arena* arena) {
  return Arena::CreateInternal< ::userfeedback::Annotation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: web.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_web_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_web_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "annotations.pb.h"
#include "dom.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_web_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_web_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace userfeedback {
class ExtensionDetails;
class ExtensionDetailsDefaultTypeInternal;
extern ExtensionDetailsDefaultTypeInternal _ExtensionDetails_default_instance_;
class InternalWebData;
class InternalWebDataDefaultTypeInternal;
extern InternalWebDataDefaultTypeInternal _InternalWebData_default_instance_;
class ProductSpecificBinaryData;
class ProductSpecificBinaryDataDefaultTypeInternal;
extern ProductSpecificBinaryDataDefaultTypeInternal _ProductSpecificBinaryData_default_instance_;
class ProductSpecificData;
class ProductSpecificDataDefaultTypeInternal;
extern ProductSpecificDataDefaultTypeInternal _ProductSpecificData_default_instance_;
class WebData;
class WebDataDefaultTypeInternal;
extern WebDataDefaultTypeInternal _WebData_default_instance_;
}  // namespace userfeedback
PROTOBUF_NAMESPACE_OPEN
template<> ::userfeedback::ExtensionDetails* Arena::CreateMaybeMessage<::userfeedback::ExtensionDetails>(Arena*);
template<> ::userfeedback::InternalWebData* Arena::CreateMaybeMessage<::userfeedback::InternalWebData>(Arena*);
template<> ::userfeedback::ProductSpecificBinaryData* Arena::CreateMaybeMessage<::userfeedback::ProductSpecificBinaryData>(Arena*);
template<> ::userfeedback::ProductSpecificData* Arena::CreateMaybeMessage<::userfeedback::ProductSpecificData>(Arena*);
template<> ::userfeedback::WebData* Arena::CreateMaybeMessage<::userfeedback::WebData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace userfeedback {

// ===================================================================

class WebData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:userfeedback.WebData) */ {
 public:
  WebData();
  virtual ~WebData();

  WebData(const WebData& from);
  WebData(WebData&& from) noexcept
    : WebData() {
    *this = ::std::move(from);
  }

  inline WebData& operator=(const WebData& from) {
    CopyFrom(from);
    return *this;
  }
  inline WebData& operator=(WebData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const WebData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WebData* internal_default_instance() {
    return reinterpret_cast<const WebData*>(
               &_WebData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WebData& a, WebData& b) {
    a.Swap(&b);
  }
  inline void Swap(WebData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WebData* New() const final {
    return CreateMaybeMessage<WebData>(nullptr);
  }

  WebData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WebData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const WebData& from);
  void MergeFrom(const WebData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WebData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userfeedback.WebData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnotationFieldNumber = 4,
    kProductSpecificDataFieldNumber = 6,
    kProductSpecificBinaryDataNameFieldNumber = 7,
    kUrlFieldNumber = 3,
    kSuggestionIdFieldNumber = 5,
    kNavigatorFieldNumber = 1,
    kExtensionDetailsFieldNumber = 2,
  };
  // repeated .userfeedback.Annotation annotation = 4;
  int annotation_size() const;
  void clear_annotation();
  ::userfeedback::Annotation* mutable_annotation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userfeedback::Annotation >*
      mutable_annotation();
  const ::userfeedback::Annotation& annotation(int index) const;
  ::userfeedback::Annotation* add_annotation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userfeedback::Annotation >&
      annotation() const;

  // repeated .userfeedback.ProductSpecificData product_specific_data = 6;
  int product_specific_data_size() const;
  void clear_product_specific_data();
  ::userfeedback::ProductSpecificData* mutable_product_specific_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userfeedback::ProductSpecificData >*
      mutable_product_specific_data();
  const ::userfeedback::ProductSpecificData& product_specific_data(int index) const;
  ::userfeedback::ProductSpecificData* add_product_specific_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userfeedback::ProductSpecificData >&
      product_specific_data() const;

  // repeated string product_specific_binary_data_name = 7;
  int product_specific_binary_data_name_size() const;
  void clear_product_specific_binary_data_name();
  const std::string& product_specific_binary_data_name(int index) const;
  std::string* mutable_product_specific_binary_data_name(int index);
  void set_product_specific_binary_data_name(int index, const std::string& value);
  void set_product_specific_binary_data_name(int index, std::string&& value);
  void set_product_specific_binary_data_name(int index, const char* value);
  void set_product_specific_binary_data_name(int index, const char* value, size_t size);
  std::string* add_product_specific_binary_data_name();
  void add_product_specific_binary_data_name(const std::string& value);
  void add_product_specific_binary_data_name(std::string&& value);
  void add_product_specific_binary_data_name(const char* value);
  void add_product_specific_binary_data_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& product_specific_binary_data_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_product_specific_binary_data_name();

  // optional string url = 3;
  bool has_url() const;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // optional string suggestion_id = 5;
  bool has_suggestion_id() const;
  void clear_suggestion_id();
  const std::string& suggestion_id() const;
  void set_suggestion_id(const std::string& value);
  void set_suggestion_id(std::string&& value);
  void set_suggestion_id(const char* value);
  void set_suggestion_id(const char* value, size_t size);
  std::string* mutable_suggestion_id();
  std::string* release_suggestion_id();
  void set_allocated_suggestion_id(std::string* suggestion_id);

  // optional .userfeedback.Navigator navigator = 1;
  bool has_navigator() const;
  void clear_navigator();
  const ::userfeedback::Navigator& navigator() const;
  ::userfeedback::Navigator* release_navigator();
  ::userfeedback::Navigator* mutable_navigator();
  void set_allocated_navigator(::userfeedback::Navigator* navigator);

  // optional .userfeedback.ExtensionDetails extension_details = 2;
  bool has_extension_details() const;
  void clear_extension_details();
  const ::userfeedback::ExtensionDetails& extension_details() const;
  ::userfeedback::ExtensionDetails* release_extension_details();
  ::userfeedback::ExtensionDetails* mutable_extension_details();
  void set_allocated_extension_details(::userfeedback::ExtensionDetails* extension_details);

  // @@protoc_insertion_point(class_scope:userfeedback.WebData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userfeedback::Annotation > annotation_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userfeedback::ProductSpecificData > product_specific_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> product_specific_binary_data_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suggestion_id_;
  ::userfeedback::Navigator* navigator_;
  ::userfeedback::ExtensionDetails* extension_details_;
  friend struct ::TableStruct_web_2eproto;
};
// -------------------------------------------------------------------

class ExtensionDetails :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:userfeedback.ExtensionDetails) */ {
 public:
  ExtensionDetails();
  virtual ~ExtensionDetails();

  ExtensionDetails(const ExtensionDetails& from);
  ExtensionDetails(ExtensionDetails&& from) noexcept
    : ExtensionDetails() {
    *this = ::std::move(from);
  }

  inline ExtensionDetails& operator=(const ExtensionDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtensionDetails& operator=(ExtensionDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ExtensionDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExtensionDetails* internal_default_instance() {
    return reinterpret_cast<const ExtensionDetails*>(
               &_ExtensionDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ExtensionDetails& a, ExtensionDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtensionDetails* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExtensionDetails* New() const final {
    return CreateMaybeMessage<ExtensionDetails>(nullptr);
  }

  ExtensionDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExtensionDetails>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ExtensionDetails& from);
  void MergeFrom(const ExtensionDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExtensionDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userfeedback.ExtensionDetails";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtensionVersionFieldNumber = 1,
    kProtocolVersionFieldNumber = 2,
  };
  // required string extension_version = 1;
  bool has_extension_version() const;
  void clear_extension_version();
  const std::string& extension_version() const;
  void set_extension_version(const std::string& value);
  void set_extension_version(std::string&& value);
  void set_extension_version(const char* value);
  void set_extension_version(const char* value, size_t size);
  std::string* mutable_extension_version();
  std::string* release_extension_version();
  void set_allocated_extension_version(std::string* extension_version);

  // required string protocol_version = 2;
  bool has_protocol_version() const;
  void clear_protocol_version();
  const std::string& protocol_version() const;
  void set_protocol_version(const std::string& value);
  void set_protocol_version(std::string&& value);
  void set_protocol_version(const char* value);
  void set_protocol_version(const char* value, size_t size);
  std::string* mutable_protocol_version();
  std::string* release_protocol_version();
  void set_allocated_protocol_version(std::string* protocol_version);

  // @@protoc_insertion_point(class_scope:userfeedback.ExtensionDetails)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extension_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_version_;
  friend struct ::TableStruct_web_2eproto;
};
// -------------------------------------------------------------------

class InternalWebData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:userfeedback.InternalWebData) */ {
 public:
  InternalWebData();
  virtual ~InternalWebData();

  InternalWebData(const InternalWebData& from);
  InternalWebData(InternalWebData&& from) noexcept
    : InternalWebData() {
    *this = ::std::move(from);
  }

  inline InternalWebData& operator=(const InternalWebData& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternalWebData& operator=(InternalWebData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const InternalWebData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InternalWebData* internal_default_instance() {
    return reinterpret_cast<const InternalWebData*>(
               &_InternalWebData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InternalWebData& a, InternalWebData& b) {
    a.Swap(&b);
  }
  inline void Swap(InternalWebData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InternalWebData* New() const final {
    return CreateMaybeMessage<InternalWebData>(nullptr);
  }

  InternalWebData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InternalWebData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const InternalWebData& from);
  void MergeFrom(const InternalWebData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InternalWebData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userfeedback.InternalWebData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailReceiverFieldNumber = 1,
    kSubjectFieldNumber = 2,
    kDEPRECATEDUrgentFieldNumber = 3,
  };
  // repeated string email_receiver = 1;
  int email_receiver_size() const;
  void clear_email_receiver();
  const std::string& email_receiver(int index) const;
  std::string* mutable_email_receiver(int index);
  void set_email_receiver(int index, const std::string& value);
  void set_email_receiver(int index, std::string&& value);
  void set_email_receiver(int index, const char* value);
  void set_email_receiver(int index, const char* value, size_t size);
  std::string* add_email_receiver();
  void add_email_receiver(const std::string& value);
  void add_email_receiver(std::string&& value);
  void add_email_receiver(const char* value);
  void add_email_receiver(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& email_receiver() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_email_receiver();

  // optional string subject = 2;
  bool has_subject() const;
  void clear_subject();
  const std::string& subject() const;
  void set_subject(const std::string& value);
  void set_subject(std::string&& value);
  void set_subject(const char* value);
  void set_subject(const char* value, size_t size);
  std::string* mutable_subject();
  std::string* release_subject();
  void set_allocated_subject(std::string* subject);

  // optional bool DEPRECATED_urgent = 3 [default = false];
  bool has_deprecated_urgent() const;
  void clear_deprecated_urgent();
  bool deprecated_urgent() const;
  void set_deprecated_urgent(bool value);

  // @@protoc_insertion_point(class_scope:userfeedback.InternalWebData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> email_receiver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_;
  bool deprecated_urgent_;
  friend struct ::TableStruct_web_2eproto;
};
// -------------------------------------------------------------------

class ProductSpecificData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:userfeedback.ProductSpecificData) */ {
 public:
  ProductSpecificData();
  virtual ~ProductSpecificData();

  ProductSpecificData(const ProductSpecificData& from);
  ProductSpecificData(ProductSpecificData&& from) noexcept
    : ProductSpecificData() {
    *this = ::std::move(from);
  }

  inline ProductSpecificData& operator=(const ProductSpecificData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProductSpecificData& operator=(ProductSpecificData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ProductSpecificData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProductSpecificData* internal_default_instance() {
    return reinterpret_cast<const ProductSpecificData*>(
               &_ProductSpecificData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProductSpecificData& a, ProductSpecificData& b) {
    a.Swap(&b);
  }
  inline void Swap(ProductSpecificData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProductSpecificData* New() const final {
    return CreateMaybeMessage<ProductSpecificData>(nullptr);
  }

  ProductSpecificData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProductSpecificData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ProductSpecificData& from);
  void MergeFrom(const ProductSpecificData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProductSpecificData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userfeedback.ProductSpecificData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required string key = 1;
  bool has_key() const;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // optional string value = 2;
  bool has_value() const;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // @@protoc_insertion_point(class_scope:userfeedback.ProductSpecificData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_web_2eproto;
};
// -------------------------------------------------------------------

class ProductSpecificBinaryData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:userfeedback.ProductSpecificBinaryData) */ {
 public:
  ProductSpecificBinaryData();
  virtual ~ProductSpecificBinaryData();

  ProductSpecificBinaryData(const ProductSpecificBinaryData& from);
  ProductSpecificBinaryData(ProductSpecificBinaryData&& from) noexcept
    : ProductSpecificBinaryData() {
    *this = ::std::move(from);
  }

  inline ProductSpecificBinaryData& operator=(const ProductSpecificBinaryData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProductSpecificBinaryData& operator=(ProductSpecificBinaryData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ProductSpecificBinaryData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProductSpecificBinaryData* internal_default_instance() {
    return reinterpret_cast<const ProductSpecificBinaryData*>(
               &_ProductSpecificBinaryData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ProductSpecificBinaryData& a, ProductSpecificBinaryData& b) {
    a.Swap(&b);
  }
  inline void Swap(ProductSpecificBinaryData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProductSpecificBinaryData* New() const final {
    return CreateMaybeMessage<ProductSpecificBinaryData>(nullptr);
  }

  ProductSpecificBinaryData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProductSpecificBinaryData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ProductSpecificBinaryData& from);
  void MergeFrom(const ProductSpecificBinaryData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProductSpecificBinaryData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userfeedback.ProductSpecificBinaryData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMimeTypeFieldNumber = 2,
    kDataFieldNumber = 3,
  };
  // required string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string mime_type = 2;
  bool has_mime_type() const;
  void clear_mime_type();
  const std::string& mime_type() const;
  void set_mime_type(const std::string& value);
  void set_mime_type(std::string&& value);
  void set_mime_type(const char* value);
  void set_mime_type(const char* value, size_t size);
  std::string* mutable_mime_type();
  std::string* release_mime_type();
  void set_allocated_mime_type(std::string* mime_type);

  // optional bytes data = 3;
  bool has_data() const;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // @@protoc_insertion_point(class_scope:userfeedback.ProductSpecificBinaryData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mime_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  friend struct ::TableStruct_web_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WebData

// optional .userfeedback.Navigator navigator = 1;
inline bool WebData::has_navigator() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::userfeedback::Navigator& WebData::navigator() const {
  const ::userfeedback::Navigator* p = navigator_;
  // @@protoc_insertion_point(field_get:userfeedback.WebData.navigator)
  return p != nullptr ? *p : *reinterpret_cast<const ::userfeedback::Navigator*>(
      &::userfeedback::_Navigator_default_instance_);
}
inline ::userfeedback::Navigator* WebData::release_navigator() {
  // @@protoc_insertion_point(field_release:userfeedback.WebData.navigator)
  _has_bits_[0] &= ~0x00000004u;
  ::userfeedback::Navigator* temp = navigator_;
  navigator_ = nullptr;
  return temp;
}
inline ::userfeedback::Navigator* WebData::mutable_navigator() {
  _has_bits_[0] |= 0x00000004u;
  if (navigator_ == nullptr) {
    auto* p = CreateMaybeMessage<::userfeedback::Navigator>(GetArenaNoVirtual());
    navigator_ = p;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.WebData.navigator)
  return navigator_;
}
inline void WebData::set_allocated_navigator(::userfeedback::Navigator* navigator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(navigator_);
  }
  if (navigator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      navigator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, navigator, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  navigator_ = navigator;
  // @@protoc_insertion_point(field_set_allocated:userfeedback.WebData.navigator)
}

// optional .userfeedback.ExtensionDetails extension_details = 2;
inline bool WebData::has_extension_details() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WebData::clear_extension_details() {
  if (extension_details_ != nullptr) extension_details_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::userfeedback::ExtensionDetails& WebData::extension_details() const {
  const ::userfeedback::ExtensionDetails* p = extension_details_;
  // @@protoc_insertion_point(field_get:userfeedback.WebData.extension_details)
  return p != nullptr ? *p : *reinterpret_cast<const ::userfeedback::ExtensionDetails*>(
      &::userfeedback::_ExtensionDetails_default_instance_);
}
inline ::userfeedback::ExtensionDetails* WebData::release_extension_details() {
  // @@protoc_insertion_point(field_release:userfeedback.WebData.extension_details)
  _has_bits_[0] &= ~0x00000008u;
  ::userfeedback::ExtensionDetails* temp = extension_details_;
  extension_details_ = nullptr;
  return temp;
}
inline ::userfeedback::ExtensionDetails* WebData::mutable_extension_details() {
  _has_bits_[0] |= 0x00000008u;
  if (extension_details_ == nullptr) {
    auto* p = CreateMaybeMessage<::userfeedback::ExtensionDetails>(GetArenaNoVirtual());
    extension_details_ = p;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.WebData.extension_details)
  return extension_details_;
}
inline void WebData::set_allocated_extension_details(::userfeedback::ExtensionDetails* extension_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete extension_details_;
  }
  if (extension_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      extension_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_details, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  extension_details_ = extension_details;
  // @@protoc_insertion_point(field_set_allocated:userfeedback.WebData.extension_details)
}

// optional string url = 3;
inline bool WebData::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WebData::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WebData::url() const {
  // @@protoc_insertion_point(field_get:userfeedback.WebData.url)
  return url_.GetNoArena();
}
inline void WebData::set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.WebData.url)
}
inline void WebData::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.WebData.url)
}
inline void WebData::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.WebData.url)
}
inline void WebData::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.WebData.url)
}
inline std::string* WebData::mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:userfeedback.WebData.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WebData::release_url() {
  // @@protoc_insertion_point(field_release:userfeedback.WebData.url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WebData::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.WebData.url)
}

// repeated .userfeedback.Annotation annotation = 4;
inline int WebData::annotation_size() const {
  return annotation_.size();
}
inline ::userfeedback::Annotation* WebData::mutable_annotation(int index) {
  // @@protoc_insertion_point(field_mutable:userfeedback.WebData.annotation)
  return annotation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userfeedback::Annotation >*
WebData::mutable_annotation() {
  // @@protoc_insertion_point(field_mutable_list:userfeedback.WebData.annotation)
  return &annotation_;
}
inline const ::userfeedback::Annotation& WebData::annotation(int index) const {
  // @@protoc_insertion_point(field_get:userfeedback.WebData.annotation)
  return annotation_.Get(index);
}
inline ::userfeedback::Annotation* WebData::add_annotation() {
  // @@protoc_insertion_point(field_add:userfeedback.WebData.annotation)
  return annotation_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userfeedback::Annotation >&
WebData::annotation() const {
  // @@protoc_insertion_point(field_list:userfeedback.WebData.annotation)
  return annotation_;
}

// optional string suggestion_id = 5;
inline bool WebData::has_suggestion_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WebData::clear_suggestion_id() {
  suggestion_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WebData::suggestion_id() const {
  // @@protoc_insertion_point(field_get:userfeedback.WebData.suggestion_id)
  return suggestion_id_.GetNoArena();
}
inline void WebData::set_suggestion_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  suggestion_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.WebData.suggestion_id)
}
inline void WebData::set_suggestion_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  suggestion_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.WebData.suggestion_id)
}
inline void WebData::set_suggestion_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  suggestion_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.WebData.suggestion_id)
}
inline void WebData::set_suggestion_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  suggestion_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.WebData.suggestion_id)
}
inline std::string* WebData::mutable_suggestion_id() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:userfeedback.WebData.suggestion_id)
  return suggestion_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WebData::release_suggestion_id() {
  // @@protoc_insertion_point(field_release:userfeedback.WebData.suggestion_id)
  if (!has_suggestion_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return suggestion_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WebData::set_allocated_suggestion_id(std::string* suggestion_id) {
  if (suggestion_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  suggestion_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), suggestion_id);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.WebData.suggestion_id)
}

// repeated .userfeedback.ProductSpecificData product_specific_data = 6;
inline int WebData::product_specific_data_size() const {
  return product_specific_data_.size();
}
inline void WebData::clear_product_specific_data() {
  product_specific_data_.Clear();
}
inline ::userfeedback::ProductSpecificData* WebData::mutable_product_specific_data(int index) {
  // @@protoc_insertion_point(field_mutable:userfeedback.WebData.product_specific_data)
  return product_specific_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userfeedback::ProductSpecificData >*
WebData::mutable_product_specific_data() {
  // @@protoc_insertion_point(field_mutable_list:userfeedback.WebData.product_specific_data)
  return &product_specific_data_;
}
inline const ::userfeedback::ProductSpecificData& WebData::product_specific_data(int index) const {
  // @@protoc_insertion_point(field_get:userfeedback.WebData.product_specific_data)
  return product_specific_data_.Get(index);
}
inline ::userfeedback::ProductSpecificData* WebData::add_product_specific_data() {
  // @@protoc_insertion_point(field_add:userfeedback.WebData.product_specific_data)
  return product_specific_data_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userfeedback::ProductSpecificData >&
WebData::product_specific_data() const {
  // @@protoc_insertion_point(field_list:userfeedback.WebData.product_specific_data)
  return product_specific_data_;
}

// repeated string product_specific_binary_data_name = 7;
inline int WebData::product_specific_binary_data_name_size() const {
  return product_specific_binary_data_name_.size();
}
inline void WebData::clear_product_specific_binary_data_name() {
  product_specific_binary_data_name_.Clear();
}
inline const std::string& WebData::product_specific_binary_data_name(int index) const {
  // @@protoc_insertion_point(field_get:userfeedback.WebData.product_specific_binary_data_name)
  return product_specific_binary_data_name_.Get(index);
}
inline std::string* WebData::mutable_product_specific_binary_data_name(int index) {
  // @@protoc_insertion_point(field_mutable:userfeedback.WebData.product_specific_binary_data_name)
  return product_specific_binary_data_name_.Mutable(index);
}
inline void WebData::set_product_specific_binary_data_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:userfeedback.WebData.product_specific_binary_data_name)
  product_specific_binary_data_name_.Mutable(index)->assign(value);
}
inline void WebData::set_product_specific_binary_data_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:userfeedback.WebData.product_specific_binary_data_name)
  product_specific_binary_data_name_.Mutable(index)->assign(std::move(value));
}
inline void WebData::set_product_specific_binary_data_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  product_specific_binary_data_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:userfeedback.WebData.product_specific_binary_data_name)
}
inline void WebData::set_product_specific_binary_data_name(int index, const char* value, size_t size) {
  product_specific_binary_data_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:userfeedback.WebData.product_specific_binary_data_name)
}
inline std::string* WebData::add_product_specific_binary_data_name() {
  // @@protoc_insertion_point(field_add_mutable:userfeedback.WebData.product_specific_binary_data_name)
  return product_specific_binary_data_name_.Add();
}
inline void WebData::add_product_specific_binary_data_name(const std::string& value) {
  product_specific_binary_data_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:userfeedback.WebData.product_specific_binary_data_name)
}
inline void WebData::add_product_specific_binary_data_name(std::string&& value) {
  product_specific_binary_data_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:userfeedback.WebData.product_specific_binary_data_name)
}
inline void WebData::add_product_specific_binary_data_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  product_specific_binary_data_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:userfeedback.WebData.product_specific_binary_data_name)
}
inline void WebData::add_product_specific_binary_data_name(const char* value, size_t size) {
  product_specific_binary_data_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:userfeedback.WebData.product_specific_binary_data_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WebData::product_specific_binary_data_name() const {
  // @@protoc_insertion_point(field_list:userfeedback.WebData.product_specific_binary_data_name)
  return product_specific_binary_data_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
WebData::mutable_product_specific_binary_data_name() {
  // @@protoc_insertion_point(field_mutable_list:userfeedback.WebData.product_specific_binary_data_name)
  return &product_specific_binary_data_name_;
}

// -------------------------------------------------------------------

// ExtensionDetails

// required string extension_version = 1;
inline bool ExtensionDetails::has_extension_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExtensionDetails::clear_extension_version() {
  extension_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ExtensionDetails::extension_version() const {
  // @@protoc_insertion_point(field_get:userfeedback.ExtensionDetails.extension_version)
  return extension_version_.GetNoArena();
}
inline void ExtensionDetails::set_extension_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  extension_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.ExtensionDetails.extension_version)
}
inline void ExtensionDetails::set_extension_version(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  extension_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.ExtensionDetails.extension_version)
}
inline void ExtensionDetails::set_extension_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  extension_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.ExtensionDetails.extension_version)
}
inline void ExtensionDetails::set_extension_version(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  extension_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.ExtensionDetails.extension_version)
}
inline std::string* ExtensionDetails::mutable_extension_version() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:userfeedback.ExtensionDetails.extension_version)
  return extension_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExtensionDetails::release_extension_version() {
  // @@protoc_insertion_point(field_release:userfeedback.ExtensionDetails.extension_version)
  if (!has_extension_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return extension_version_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExtensionDetails::set_allocated_extension_version(std::string* extension_version) {
  if (extension_version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  extension_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extension_version);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ExtensionDetails.extension_version)
}

// required string protocol_version = 2;
inline bool ExtensionDetails::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExtensionDetails::clear_protocol_version() {
  protocol_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ExtensionDetails::protocol_version() const {
  // @@protoc_insertion_point(field_get:userfeedback.ExtensionDetails.protocol_version)
  return protocol_version_.GetNoArena();
}
inline void ExtensionDetails::set_protocol_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  protocol_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.ExtensionDetails.protocol_version)
}
inline void ExtensionDetails::set_protocol_version(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  protocol_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.ExtensionDetails.protocol_version)
}
inline void ExtensionDetails::set_protocol_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  protocol_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.ExtensionDetails.protocol_version)
}
inline void ExtensionDetails::set_protocol_version(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  protocol_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.ExtensionDetails.protocol_version)
}
inline std::string* ExtensionDetails::mutable_protocol_version() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:userfeedback.ExtensionDetails.protocol_version)
  return protocol_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExtensionDetails::release_protocol_version() {
  // @@protoc_insertion_point(field_release:userfeedback.ExtensionDetails.protocol_version)
  if (!has_protocol_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return protocol_version_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExtensionDetails::set_allocated_protocol_version(std::string* protocol_version) {
  if (protocol_version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  protocol_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol_version);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ExtensionDetails.protocol_version)
}

// -------------------------------------------------------------------

// InternalWebData

// repeated string email_receiver = 1;
inline int InternalWebData::email_receiver_size() const {
  return email_receiver_.size();
}
inline void InternalWebData::clear_email_receiver() {
  email_receiver_.Clear();
}
inline const std::string& InternalWebData::email_receiver(int index) const {
  // @@protoc_insertion_point(field_get:userfeedback.InternalWebData.email_receiver)
  return email_receiver_.Get(index);
}
inline std::string* InternalWebData::mutable_email_receiver(int index) {
  // @@protoc_insertion_point(field_mutable:userfeedback.InternalWebData.email_receiver)
  return email_receiver_.Mutable(index);
}
inline void InternalWebData::set_email_receiver(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:userfeedback.InternalWebData.email_receiver)
  email_receiver_.Mutable(index)->assign(value);
}
inline void InternalWebData::set_email_receiver(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:userfeedback.InternalWebData.email_receiver)
  email_receiver_.Mutable(index)->assign(std::move(value));
}
inline void InternalWebData::set_email_receiver(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  email_receiver_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:userfeedback.InternalWebData.email_receiver)
}
inline void InternalWebData::set_email_receiver(int index, const char* value, size_t size) {
  email_receiver_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:userfeedback.InternalWebData.email_receiver)
}
inline std::string* InternalWebData::add_email_receiver() {
  // @@protoc_insertion_point(field_add_mutable:userfeedback.InternalWebData.email_receiver)
  return email_receiver_.Add();
}
inline void InternalWebData::add_email_receiver(const std::string& value) {
  email_receiver_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:userfeedback.InternalWebData.email_receiver)
}
inline void InternalWebData::add_email_receiver(std::string&& value) {
  email_receiver_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:userfeedback.InternalWebData.email_receiver)
}
inline void InternalWebData::add_email_receiver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  email_receiver_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:userfeedback.InternalWebData.email_receiver)
}
inline void InternalWebData::add_email_receiver(const char* value, size_t size) {
  email_receiver_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:userfeedback.InternalWebData.email_receiver)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InternalWebData::email_receiver() const {
  // @@protoc_insertion_point(field_list:userfeedback.InternalWebData.email_receiver)
  return email_receiver_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InternalWebData::mutable_email_receiver() {
  // @@protoc_insertion_point(field_mutable_list:userfeedback.InternalWebData.email_receiver)
  return &email_receiver_;
}

// optional string subject = 2;
inline bool InternalWebData::has_subject() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InternalWebData::clear_subject() {
  subject_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InternalWebData::subject() const {
  // @@protoc_insertion_point(field_get:userfeedback.InternalWebData.subject)
  return subject_.GetNoArena();
}
inline void InternalWebData::set_subject(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  subject_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.InternalWebData.subject)
}
inline void InternalWebData::set_subject(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  subject_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.InternalWebData.subject)
}
inline void InternalWebData::set_subject(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  subject_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.InternalWebData.subject)
}
inline void InternalWebData::set_subject(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  subject_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.InternalWebData.subject)
}
inline std::string* InternalWebData::mutable_subject() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:userfeedback.InternalWebData.subject)
  return subject_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InternalWebData::release_subject() {
  // @@protoc_insertion_point(field_release:userfeedback.InternalWebData.subject)
  if (!has_subject()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return subject_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InternalWebData::set_allocated_subject(std::string* subject) {
  if (subject != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  subject_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subject);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.InternalWebData.subject)
}

// optional bool DEPRECATED_urgent = 3 [default = false];
inline bool InternalWebData::has_deprecated_urgent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InternalWebData::clear_deprecated_urgent() {
  deprecated_urgent_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool InternalWebData::deprecated_urgent() const {
  // @@protoc_insertion_point(field_get:userfeedback.InternalWebData.DEPRECATED_urgent)
  return deprecated_urgent_;
}
inline void InternalWebData::set_deprecated_urgent(bool value) {
  _has_bits_[0] |= 0x00000002u;
  deprecated_urgent_ = value;
  // @@protoc_insertion_point(field_set:userfeedback.InternalWebData.DEPRECATED_urgent)
}

// -------------------------------------------------------------------

// ProductSpecificData

// required string key = 1;
inline bool ProductSpecificData::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProductSpecificData::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProductSpecificData::key() const {
  // @@protoc_insertion_point(field_get:userfeedback.ProductSpecificData.key)
  return key_.GetNoArena();
}
inline void ProductSpecificData::set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.ProductSpecificData.key)
}
inline void ProductSpecificData::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.ProductSpecificData.key)
}
inline void ProductSpecificData::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.ProductSpecificData.key)
}
inline void ProductSpecificData::set_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.ProductSpecificData.key)
}
inline std::string* ProductSpecificData::mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:userfeedback.ProductSpecificData.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProductSpecificData::release_key() {
  // @@protoc_insertion_point(field_release:userfeedback.ProductSpecificData.key)
  if (!has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProductSpecificData::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ProductSpecificData.key)
}

// optional string value = 2;
inline bool ProductSpecificData::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProductSpecificData::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ProductSpecificData::value() const {
  // @@protoc_insertion_point(field_get:userfeedback.ProductSpecificData.value)
  return value_.GetNoArena();
}
inline void ProductSpecificData::set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.ProductSpecificData.value)
}
inline void ProductSpecificData::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.ProductSpecificData.value)
}
inline void ProductSpecificData::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.ProductSpecificData.value)
}
inline void ProductSpecificData::set_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.ProductSpecificData.value)
}
inline std::string* ProductSpecificData::mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:userfeedback.ProductSpecificData.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProductSpecificData::release_value() {
  // @@protoc_insertion_point(field_release:userfeedback.ProductSpecificData.value)
  if (!has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProductSpecificData::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ProductSpecificData.value)
}

// -------------------------------------------------------------------

// ProductSpecificBinaryData

// required string name = 1;
inline bool ProductSpecificBinaryData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProductSpecificBinaryData::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProductSpecificBinaryData::name() const {
  // @@protoc_insertion_point(field_get:userfeedback.ProductSpecificBinaryData.name)
  return name_.GetNoArena();
}
inline void ProductSpecificBinaryData::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.ProductSpecificBinaryData.name)
}
inline void ProductSpecificBinaryData::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.ProductSpecificBinaryData.name)
}
inline void ProductSpecificBinaryData::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.ProductSpecificBinaryData.name)
}
inline void ProductSpecificBinaryData::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.ProductSpecificBinaryData.name)
}
inline std::string* ProductSpecificBinaryData::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:userfeedback.ProductSpecificBinaryData.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProductSpecificBinaryData::release_name() {
  // @@protoc_insertion_point(field_release:userfeedback.ProductSpecificBinaryData.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProductSpecificBinaryData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ProductSpecificBinaryData.name)
}

// optional string mime_type = 2;
inline bool ProductSpecificBinaryData::has_mime_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProductSpecificBinaryData::clear_mime_type() {
  mime_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ProductSpecificBinaryData::mime_type() const {
  // @@protoc_insertion_point(field_get:userfeedback.ProductSpecificBinaryData.mime_type)
  return mime_type_.GetNoArena();
}
inline void ProductSpecificBinaryData::set_mime_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  mime_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.ProductSpecificBinaryData.mime_type)
}
inline void ProductSpecificBinaryData::set_mime_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  mime_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.ProductSpecificBinaryData.mime_type)
}
inline void ProductSpecificBinaryData::set_mime_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  mime_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.ProductSpecificBinaryData.mime_type)
}
inline void ProductSpecificBinaryData::set_mime_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  mime_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.ProductSpecificBinaryData.mime_type)
}
inline std::string* ProductSpecificBinaryData::mutable_mime_type() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:userfeedback.ProductSpecificBinaryData.mime_type)
  return mime_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProductSpecificBinaryData::release_mime_type() {
  // @@protoc_insertion_point(field_release:userfeedback.ProductSpecificBinaryData.mime_type)
  if (!has_mime_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return mime_type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProductSpecificBinaryData::set_allocated_mime_type(std::string* mime_type) {
  if (mime_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mime_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mime_type);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ProductSpecificBinaryData.mime_type)
}

// optional bytes data = 3;
inline bool ProductSpecificBinaryData::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProductSpecificBinaryData::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ProductSpecificBinaryData::data() const {
  // @@protoc_insertion_point(field_get:userfeedback.ProductSpecificBinaryData.data)
  return data_.GetNoArena();
}
inline void ProductSpecificBinaryData::set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.ProductSpecificBinaryData.data)
}
inline void ProductSpecificBinaryData::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.ProductSpecificBinaryData.data)
}
inline void ProductSpecificBinaryData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.ProductSpecificBinaryData.data)
}
inline void ProductSpecificBinaryData::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.ProductSpecificBinaryData.data)
}
inline std::string* ProductSpecificBinaryData::mutable_data() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:userfeedback.ProductSpecificBinaryData.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProductSpecificBinaryData::release_data() {
  // @@protoc_insertion_point(field_release:userfeedback.ProductSpecificBinaryData.data)
  if (!has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProductSpecificBinaryData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ProductSpecificBinaryData.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace userfeedback

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_web_2eproto

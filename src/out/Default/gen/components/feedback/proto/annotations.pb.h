// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: annotations.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_annotations_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_annotations_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "math.pb.h"
#include "dom.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_annotations_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_annotations_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace userfeedback {
class Annotation;
class AnnotationDefaultTypeInternal;
extern AnnotationDefaultTypeInternal _Annotation_default_instance_;
}  // namespace userfeedback
PROTOBUF_NAMESPACE_OPEN
template<> ::userfeedback::Annotation* Arena::CreateMaybeMessage<::userfeedback::Annotation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace userfeedback {

// ===================================================================

class Annotation :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:userfeedback.Annotation) */ {
 public:
  Annotation();
  virtual ~Annotation();

  Annotation(const Annotation& from);
  Annotation(Annotation&& from) noexcept
    : Annotation() {
    *this = ::std::move(from);
  }

  inline Annotation& operator=(const Annotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Annotation& operator=(Annotation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Annotation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Annotation* internal_default_instance() {
    return reinterpret_cast<const Annotation*>(
               &_Annotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Annotation& a, Annotation& b) {
    a.Swap(&b);
  }
  inline void Swap(Annotation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Annotation* New() const final {
    return CreateMaybeMessage<Annotation>(nullptr);
  }

  Annotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Annotation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Annotation& from);
  void MergeFrom(const Annotation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Annotation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userfeedback.Annotation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnippetFieldNumber = 2,
    kRectangleFieldNumber = 1,
    kAnnotatedElementPathFieldNumber = 3,
  };
  // optional string snippet = 2;
  bool has_snippet() const;
  void clear_snippet();
  const std::string& snippet() const;
  void set_snippet(const std::string& value);
  void set_snippet(std::string&& value);
  void set_snippet(const char* value);
  void set_snippet(const char* value, size_t size);
  std::string* mutable_snippet();
  std::string* release_snippet();
  void set_allocated_snippet(std::string* snippet);

  // required .userfeedback.Rectangle rectangle = 1;
  bool has_rectangle() const;
  void clear_rectangle();
  const ::userfeedback::Rectangle& rectangle() const;
  ::userfeedback::Rectangle* release_rectangle();
  ::userfeedback::Rectangle* mutable_rectangle();
  void set_allocated_rectangle(::userfeedback::Rectangle* rectangle);

  // optional .userfeedback.HtmlPath annotatedElementPath = 3;
  bool has_annotatedelementpath() const;
  void clear_annotatedelementpath();
  const ::userfeedback::HtmlPath& annotatedelementpath() const;
  ::userfeedback::HtmlPath* release_annotatedelementpath();
  ::userfeedback::HtmlPath* mutable_annotatedelementpath();
  void set_allocated_annotatedelementpath(::userfeedback::HtmlPath* annotatedelementpath);

  // @@protoc_insertion_point(class_scope:userfeedback.Annotation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snippet_;
  ::userfeedback::Rectangle* rectangle_;
  ::userfeedback::HtmlPath* annotatedelementpath_;
  friend struct ::TableStruct_annotations_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Annotation

// required .userfeedback.Rectangle rectangle = 1;
inline bool Annotation::has_rectangle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::userfeedback::Rectangle& Annotation::rectangle() const {
  const ::userfeedback::Rectangle* p = rectangle_;
  // @@protoc_insertion_point(field_get:userfeedback.Annotation.rectangle)
  return p != nullptr ? *p : *reinterpret_cast<const ::userfeedback::Rectangle*>(
      &::userfeedback::_Rectangle_default_instance_);
}
inline ::userfeedback::Rectangle* Annotation::release_rectangle() {
  // @@protoc_insertion_point(field_release:userfeedback.Annotation.rectangle)
  _has_bits_[0] &= ~0x00000002u;
  ::userfeedback::Rectangle* temp = rectangle_;
  rectangle_ = nullptr;
  return temp;
}
inline ::userfeedback::Rectangle* Annotation::mutable_rectangle() {
  _has_bits_[0] |= 0x00000002u;
  if (rectangle_ == nullptr) {
    auto* p = CreateMaybeMessage<::userfeedback::Rectangle>(GetArenaNoVirtual());
    rectangle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.Annotation.rectangle)
  return rectangle_;
}
inline void Annotation::set_allocated_rectangle(::userfeedback::Rectangle* rectangle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rectangle_);
  }
  if (rectangle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rectangle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rectangle, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  rectangle_ = rectangle;
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Annotation.rectangle)
}

// optional string snippet = 2;
inline bool Annotation::has_snippet() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Annotation::clear_snippet() {
  snippet_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Annotation::snippet() const {
  // @@protoc_insertion_point(field_get:userfeedback.Annotation.snippet)
  return snippet_.GetNoArena();
}
inline void Annotation::set_snippet(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  snippet_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.Annotation.snippet)
}
inline void Annotation::set_snippet(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  snippet_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.Annotation.snippet)
}
inline void Annotation::set_snippet(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  snippet_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.Annotation.snippet)
}
inline void Annotation::set_snippet(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  snippet_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.Annotation.snippet)
}
inline std::string* Annotation::mutable_snippet() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:userfeedback.Annotation.snippet)
  return snippet_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Annotation::release_snippet() {
  // @@protoc_insertion_point(field_release:userfeedback.Annotation.snippet)
  if (!has_snippet()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return snippet_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Annotation::set_allocated_snippet(std::string* snippet) {
  if (snippet != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  snippet_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snippet);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Annotation.snippet)
}

// optional .userfeedback.HtmlPath annotatedElementPath = 3;
inline bool Annotation::has_annotatedelementpath() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::userfeedback::HtmlPath& Annotation::annotatedelementpath() const {
  const ::userfeedback::HtmlPath* p = annotatedelementpath_;
  // @@protoc_insertion_point(field_get:userfeedback.Annotation.annotatedElementPath)
  return p != nullptr ? *p : *reinterpret_cast<const ::userfeedback::HtmlPath*>(
      &::userfeedback::_HtmlPath_default_instance_);
}
inline ::userfeedback::HtmlPath* Annotation::release_annotatedelementpath() {
  // @@protoc_insertion_point(field_release:userfeedback.Annotation.annotatedElementPath)
  _has_bits_[0] &= ~0x00000004u;
  ::userfeedback::HtmlPath* temp = annotatedelementpath_;
  annotatedelementpath_ = nullptr;
  return temp;
}
inline ::userfeedback::HtmlPath* Annotation::mutable_annotatedelementpath() {
  _has_bits_[0] |= 0x00000004u;
  if (annotatedelementpath_ == nullptr) {
    auto* p = CreateMaybeMessage<::userfeedback::HtmlPath>(GetArenaNoVirtual());
    annotatedelementpath_ = p;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.Annotation.annotatedElementPath)
  return annotatedelementpath_;
}
inline void Annotation::set_allocated_annotatedelementpath(::userfeedback::HtmlPath* annotatedelementpath) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotatedelementpath_);
  }
  if (annotatedelementpath) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      annotatedelementpath = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotatedelementpath, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  annotatedelementpath_ = annotatedelementpath;
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Annotation.annotatedElementPath)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace userfeedback

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_annotations_2eproto

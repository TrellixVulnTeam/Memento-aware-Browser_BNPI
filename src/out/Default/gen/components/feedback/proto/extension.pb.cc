// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: extension.proto

#include "extension.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_chrome_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChromeData_chrome_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommonData_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_math_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dimensions_math_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_web_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExtensionDetails_web_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HtmlDocument_dom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_extension_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PostedScreenshot_extension_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_web_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProductSpecificBinaryData_web_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_web_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_WebData_web_2eproto;
namespace userfeedback {
class ExtensionPageRequestParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExtensionPageRequestParams> _instance;
} _ExtensionPageRequestParams_default_instance_;
class PostedScreenshotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PostedScreenshot> _instance;
} _PostedScreenshot_default_instance_;
class ExtensionErrorsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExtensionErrors> _instance;
} _ExtensionErrors_default_instance_;
class ExtensionSubmitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExtensionSubmit> _instance;
} _ExtensionSubmit_default_instance_;
class SuggestQueryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SuggestQuery> _instance;
} _SuggestQuery_default_instance_;
}  // namespace userfeedback
static void InitDefaultsscc_info_ExtensionErrors_extension_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userfeedback::_ExtensionErrors_default_instance_;
    new (ptr) ::userfeedback::ExtensionErrors();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userfeedback::ExtensionErrors::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExtensionErrors_extension_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ExtensionErrors_extension_2eproto}, {}};

static void InitDefaultsscc_info_ExtensionPageRequestParams_extension_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userfeedback::_ExtensionPageRequestParams_default_instance_;
    new (ptr) ::userfeedback::ExtensionPageRequestParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userfeedback::ExtensionPageRequestParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExtensionPageRequestParams_extension_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ExtensionPageRequestParams_extension_2eproto}, {
      &scc_info_ExtensionDetails_web_2eproto.base,}};

static void InitDefaultsscc_info_ExtensionSubmit_extension_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userfeedback::_ExtensionSubmit_default_instance_;
    new (ptr) ::userfeedback::ExtensionSubmit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userfeedback::ExtensionSubmit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ExtensionSubmit_extension_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_ExtensionSubmit_extension_2eproto}, {
      &scc_info_CommonData_common_2eproto.base,
      &scc_info_WebData_web_2eproto.base,
      &scc_info_PostedScreenshot_extension_2eproto.base,
      &scc_info_ChromeData_chrome_2eproto.base,
      &scc_info_ProductSpecificBinaryData_web_2eproto.base,}};

static void InitDefaultsscc_info_PostedScreenshot_extension_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userfeedback::_PostedScreenshot_default_instance_;
    new (ptr) ::userfeedback::PostedScreenshot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userfeedback::PostedScreenshot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PostedScreenshot_extension_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PostedScreenshot_extension_2eproto}, {
      &scc_info_Dimensions_math_2eproto.base,}};

static void InitDefaultsscc_info_SuggestQuery_extension_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::userfeedback::_SuggestQuery_default_instance_;
    new (ptr) ::userfeedback::SuggestQuery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::userfeedback::SuggestQuery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_SuggestQuery_extension_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_SuggestQuery_extension_2eproto}, {
      &scc_info_CommonData_common_2eproto.base,
      &scc_info_WebData_web_2eproto.base,
      &scc_info_HtmlDocument_dom_2eproto.base,
      &scc_info_ChromeData_chrome_2eproto.base,}};

namespace userfeedback {

// ===================================================================

void ExtensionPageRequestParams::InitAsDefaultInstance() {
  ::userfeedback::_ExtensionPageRequestParams_default_instance_._instance.get_mutable()->extension_details_ = const_cast< ::userfeedback::ExtensionDetails*>(
      ::userfeedback::ExtensionDetails::internal_default_instance());
}
class ExtensionPageRequestParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ExtensionPageRequestParams>()._has_bits_);
  static const ::userfeedback::ExtensionDetails& extension_details(const ExtensionPageRequestParams* msg);
  static void set_has_extension_details(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::userfeedback::ExtensionDetails&
ExtensionPageRequestParams::_Internal::extension_details(const ExtensionPageRequestParams* msg) {
  return *msg->extension_details_;
}
void ExtensionPageRequestParams::clear_extension_details() {
  if (extension_details_ != nullptr) extension_details_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ExtensionPageRequestParams::ExtensionPageRequestParams()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userfeedback.ExtensionPageRequestParams)
}
ExtensionPageRequestParams::ExtensionPageRequestParams(const ExtensionPageRequestParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.has_extension_details()) {
    extension_details_ = new ::userfeedback::ExtensionDetails(*from.extension_details_);
  } else {
    extension_details_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:userfeedback.ExtensionPageRequestParams)
}

void ExtensionPageRequestParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExtensionPageRequestParams_extension_2eproto.base);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extension_details_ = nullptr;
}

ExtensionPageRequestParams::~ExtensionPageRequestParams() {
  // @@protoc_insertion_point(destructor:userfeedback.ExtensionPageRequestParams)
  SharedDtor();
}

void ExtensionPageRequestParams::SharedDtor() {
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete extension_details_;
}

void ExtensionPageRequestParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExtensionPageRequestParams& ExtensionPageRequestParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExtensionPageRequestParams_extension_2eproto.base);
  return *internal_default_instance();
}


void ExtensionPageRequestParams::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.ExtensionPageRequestParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(extension_details_ != nullptr);
      extension_details_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExtensionPageRequestParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .userfeedback.ExtensionDetails extension_details = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_extension_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_url(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExtensionPageRequestParams::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:userfeedback.ExtensionPageRequestParams)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .userfeedback.ExtensionDetails extension_details = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_extension_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string url = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userfeedback.ExtensionPageRequestParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userfeedback.ExtensionPageRequestParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExtensionPageRequestParams::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userfeedback.ExtensionPageRequestParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .userfeedback.ExtensionDetails extension_details = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::extension_details(this), output);
  }

  // required string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:userfeedback.ExtensionPageRequestParams)
}

size_t ExtensionPageRequestParams::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:userfeedback.ExtensionPageRequestParams)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_extension_details()) {
    // required .userfeedback.ExtensionDetails extension_details = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extension_details_);
  }

  return total_size;
}
size_t ExtensionPageRequestParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.ExtensionPageRequestParams)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string url = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->url());

    // required .userfeedback.ExtensionDetails extension_details = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extension_details_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtensionPageRequestParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ExtensionPageRequestParams*>(
      &from));
}

void ExtensionPageRequestParams::MergeFrom(const ExtensionPageRequestParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.ExtensionPageRequestParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_extension_details()->::userfeedback::ExtensionDetails::MergeFrom(from.extension_details());
    }
  }
}

void ExtensionPageRequestParams::CopyFrom(const ExtensionPageRequestParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.ExtensionPageRequestParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionPageRequestParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_extension_details()) {
    if (!this->extension_details_->IsInitialized()) return false;
  }
  return true;
}

void ExtensionPageRequestParams::InternalSwap(ExtensionPageRequestParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(extension_details_, other->extension_details_);
}

std::string ExtensionPageRequestParams::GetTypeName() const {
  return "userfeedback.ExtensionPageRequestParams";
}


// ===================================================================

void PostedScreenshot::InitAsDefaultInstance() {
  ::userfeedback::_PostedScreenshot_default_instance_._instance.get_mutable()->dimensions_ = const_cast< ::userfeedback::Dimensions*>(
      ::userfeedback::Dimensions::internal_default_instance());
}
class PostedScreenshot::_Internal {
 public:
  using HasBits = decltype(std::declval<PostedScreenshot>()._has_bits_);
  static void set_has_mime_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::userfeedback::Dimensions& dimensions(const PostedScreenshot* msg);
  static void set_has_dimensions(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_base64_content(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_binary_content(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::userfeedback::Dimensions&
PostedScreenshot::_Internal::dimensions(const PostedScreenshot* msg) {
  return *msg->dimensions_;
}
void PostedScreenshot::clear_dimensions() {
  if (dimensions_ != nullptr) dimensions_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
PostedScreenshot::PostedScreenshot()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userfeedback.PostedScreenshot)
}
PostedScreenshot::PostedScreenshot(const PostedScreenshot& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mime_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_mime_type()) {
    mime_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mime_type_);
  }
  base64_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_base64_content()) {
    base64_content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.base64_content_);
  }
  binary_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_binary_content()) {
    binary_content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.binary_content_);
  }
  if (from.has_dimensions()) {
    dimensions_ = new ::userfeedback::Dimensions(*from.dimensions_);
  } else {
    dimensions_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:userfeedback.PostedScreenshot)
}

void PostedScreenshot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PostedScreenshot_extension_2eproto.base);
  mime_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base64_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  binary_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dimensions_ = nullptr;
}

PostedScreenshot::~PostedScreenshot() {
  // @@protoc_insertion_point(destructor:userfeedback.PostedScreenshot)
  SharedDtor();
}

void PostedScreenshot::SharedDtor() {
  mime_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base64_content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  binary_content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dimensions_;
}

void PostedScreenshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PostedScreenshot& PostedScreenshot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PostedScreenshot_extension_2eproto.base);
  return *internal_default_instance();
}


void PostedScreenshot::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.PostedScreenshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mime_type_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      base64_content_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      binary_content_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(dimensions_ != nullptr);
      dimensions_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PostedScreenshot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string mime_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_mime_type(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .userfeedback.Dimensions dimensions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_dimensions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string base64_content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_base64_content(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes binary_content = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_binary_content(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PostedScreenshot::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:userfeedback.PostedScreenshot)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mime_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_mime_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .userfeedback.Dimensions dimensions = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dimensions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string base64_content = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_base64_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes binary_content = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binary_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userfeedback.PostedScreenshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userfeedback.PostedScreenshot)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PostedScreenshot::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userfeedback.PostedScreenshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string mime_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mime_type(), output);
  }

  // required .userfeedback.Dimensions dimensions = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::dimensions(this), output);
  }

  // optional string base64_content = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->base64_content(), output);
  }

  // optional bytes binary_content = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->binary_content(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:userfeedback.PostedScreenshot)
}

size_t PostedScreenshot::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:userfeedback.PostedScreenshot)
  size_t total_size = 0;

  if (has_mime_type()) {
    // required string mime_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->mime_type());
  }

  if (has_dimensions()) {
    // required .userfeedback.Dimensions dimensions = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dimensions_);
  }

  return total_size;
}
size_t PostedScreenshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.PostedScreenshot)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required string mime_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->mime_type());

    // required .userfeedback.Dimensions dimensions = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dimensions_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string base64_content = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->base64_content());
    }

    // optional bytes binary_content = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->binary_content());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostedScreenshot::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PostedScreenshot*>(
      &from));
}

void PostedScreenshot::MergeFrom(const PostedScreenshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.PostedScreenshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      mime_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mime_type_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      base64_content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.base64_content_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      binary_content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.binary_content_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_dimensions()->::userfeedback::Dimensions::MergeFrom(from.dimensions());
    }
  }
}

void PostedScreenshot::CopyFrom(const PostedScreenshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.PostedScreenshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostedScreenshot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;
  if (has_dimensions()) {
    if (!this->dimensions_->IsInitialized()) return false;
  }
  return true;
}

void PostedScreenshot::InternalSwap(PostedScreenshot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mime_type_.Swap(&other->mime_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  base64_content_.Swap(&other->base64_content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  binary_content_.Swap(&other->binary_content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dimensions_, other->dimensions_);
}

std::string PostedScreenshot::GetTypeName() const {
  return "userfeedback.PostedScreenshot";
}


// ===================================================================

void ExtensionErrors::InitAsDefaultInstance() {
}
class ExtensionErrors::_Internal {
 public:
  using HasBits = decltype(std::declval<ExtensionErrors>()._has_bits_);
  static void set_has_number_of_attempts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ExtensionErrors::ExtensionErrors()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userfeedback.ExtensionErrors)
}
ExtensionErrors::ExtensionErrors(const ExtensionErrors& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errors_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_errors()) {
    errors_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errors_);
  }
  number_of_attempts_ = from.number_of_attempts_;
  // @@protoc_insertion_point(copy_constructor:userfeedback.ExtensionErrors)
}

void ExtensionErrors::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExtensionErrors_extension_2eproto.base);
  errors_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  number_of_attempts_ = 0;
}

ExtensionErrors::~ExtensionErrors() {
  // @@protoc_insertion_point(destructor:userfeedback.ExtensionErrors)
  SharedDtor();
}

void ExtensionErrors::SharedDtor() {
  errors_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExtensionErrors::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExtensionErrors& ExtensionErrors::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExtensionErrors_extension_2eproto.base);
  return *internal_default_instance();
}


void ExtensionErrors::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.ExtensionErrors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    errors_.ClearNonDefaultToEmptyNoArena();
  }
  number_of_attempts_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExtensionErrors::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 number_of_attempts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_number_of_attempts(&has_bits);
          number_of_attempts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string errors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_errors(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExtensionErrors::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:userfeedback.ExtensionErrors)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 number_of_attempts = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_number_of_attempts(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_of_attempts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string errors = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_errors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userfeedback.ExtensionErrors)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userfeedback.ExtensionErrors)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExtensionErrors::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userfeedback.ExtensionErrors)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 number_of_attempts = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->number_of_attempts(), output);
  }

  // required string errors = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errors(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:userfeedback.ExtensionErrors)
}

size_t ExtensionErrors::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:userfeedback.ExtensionErrors)
  size_t total_size = 0;

  if (has_errors()) {
    // required string errors = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->errors());
  }

  if (has_number_of_attempts()) {
    // required int32 number_of_attempts = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->number_of_attempts());
  }

  return total_size;
}
size_t ExtensionErrors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.ExtensionErrors)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string errors = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->errors());

    // required int32 number_of_attempts = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->number_of_attempts());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtensionErrors::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ExtensionErrors*>(
      &from));
}

void ExtensionErrors::MergeFrom(const ExtensionErrors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.ExtensionErrors)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      errors_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errors_);
    }
    if (cached_has_bits & 0x00000002u) {
      number_of_attempts_ = from.number_of_attempts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExtensionErrors::CopyFrom(const ExtensionErrors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.ExtensionErrors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionErrors::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ExtensionErrors::InternalSwap(ExtensionErrors* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  errors_.Swap(&other->errors_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(number_of_attempts_, other->number_of_attempts_);
}

std::string ExtensionErrors::GetTypeName() const {
  return "userfeedback.ExtensionErrors";
}


// ===================================================================

void ExtensionSubmit::InitAsDefaultInstance() {
  ::userfeedback::_ExtensionSubmit_default_instance_._instance.get_mutable()->common_data_ = const_cast< ::userfeedback::CommonData*>(
      ::userfeedback::CommonData::internal_default_instance());
  ::userfeedback::_ExtensionSubmit_default_instance_._instance.get_mutable()->web_data_ = const_cast< ::userfeedback::WebData*>(
      ::userfeedback::WebData::internal_default_instance());
  ::userfeedback::_ExtensionSubmit_default_instance_._instance.get_mutable()->screenshot_ = const_cast< ::userfeedback::PostedScreenshot*>(
      ::userfeedback::PostedScreenshot::internal_default_instance());
  ::userfeedback::_ExtensionSubmit_default_instance_._instance.get_mutable()->chrome_data_ = const_cast< ::userfeedback::ChromeData*>(
      ::userfeedback::ChromeData::internal_default_instance());
}
class ExtensionSubmit::_Internal {
 public:
  using HasBits = decltype(std::declval<ExtensionSubmit>()._has_bits_);
  static const ::userfeedback::CommonData& common_data(const ExtensionSubmit* msg);
  static void set_has_common_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::userfeedback::WebData& web_data(const ExtensionSubmit* msg);
  static void set_has_web_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::userfeedback::PostedScreenshot& screenshot(const ExtensionSubmit* msg);
  static void set_has_screenshot(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::userfeedback::ChromeData& chrome_data(const ExtensionSubmit* msg);
  static void set_has_chrome_data(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_category_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_product_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bucket(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::userfeedback::CommonData&
ExtensionSubmit::_Internal::common_data(const ExtensionSubmit* msg) {
  return *msg->common_data_;
}
const ::userfeedback::WebData&
ExtensionSubmit::_Internal::web_data(const ExtensionSubmit* msg) {
  return *msg->web_data_;
}
const ::userfeedback::PostedScreenshot&
ExtensionSubmit::_Internal::screenshot(const ExtensionSubmit* msg) {
  return *msg->screenshot_;
}
const ::userfeedback::ChromeData&
ExtensionSubmit::_Internal::chrome_data(const ExtensionSubmit* msg) {
  return *msg->chrome_data_;
}
void ExtensionSubmit::clear_common_data() {
  if (common_data_ != nullptr) common_data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ExtensionSubmit::clear_web_data() {
  if (web_data_ != nullptr) web_data_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ExtensionSubmit::clear_chrome_data() {
  if (chrome_data_ != nullptr) chrome_data_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void ExtensionSubmit::clear_product_specific_binary_data() {
  product_specific_binary_data_.Clear();
}
ExtensionSubmit::ExtensionSubmit()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userfeedback.ExtensionSubmit)
}
ExtensionSubmit::ExtensionSubmit(const ExtensionSubmit& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      product_specific_binary_data_(from.product_specific_binary_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  category_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_category_tag()) {
    category_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.category_tag_);
  }
  bucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_bucket()) {
    bucket_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bucket_);
  }
  if (from.has_common_data()) {
    common_data_ = new ::userfeedback::CommonData(*from.common_data_);
  } else {
    common_data_ = nullptr;
  }
  if (from.has_web_data()) {
    web_data_ = new ::userfeedback::WebData(*from.web_data_);
  } else {
    web_data_ = nullptr;
  }
  if (from.has_screenshot()) {
    screenshot_ = new ::userfeedback::PostedScreenshot(*from.screenshot_);
  } else {
    screenshot_ = nullptr;
  }
  if (from.has_chrome_data()) {
    chrome_data_ = new ::userfeedback::ChromeData(*from.chrome_data_);
  } else {
    chrome_data_ = nullptr;
  }
  ::memcpy(&type_id_, &from.type_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&product_id_) -
    reinterpret_cast<char*>(&type_id_)) + sizeof(product_id_));
  // @@protoc_insertion_point(copy_constructor:userfeedback.ExtensionSubmit)
}

void ExtensionSubmit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExtensionSubmit_extension_2eproto.base);
  category_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bucket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&common_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&product_id_) -
      reinterpret_cast<char*>(&common_data_)) + sizeof(product_id_));
}

ExtensionSubmit::~ExtensionSubmit() {
  // @@protoc_insertion_point(destructor:userfeedback.ExtensionSubmit)
  SharedDtor();
}

void ExtensionSubmit::SharedDtor() {
  category_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bucket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete common_data_;
  if (this != internal_default_instance()) delete web_data_;
  if (this != internal_default_instance()) delete screenshot_;
  if (this != internal_default_instance()) delete chrome_data_;
}

void ExtensionSubmit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExtensionSubmit& ExtensionSubmit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExtensionSubmit_extension_2eproto.base);
  return *internal_default_instance();
}


void ExtensionSubmit::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.ExtensionSubmit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  product_specific_binary_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      category_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      bucket_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(common_data_ != nullptr);
      common_data_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(web_data_ != nullptr);
      web_data_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(screenshot_ != nullptr);
      screenshot_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(chrome_data_ != nullptr);
      chrome_data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&type_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&product_id_) -
        reinterpret_cast<char*>(&type_id_)) + sizeof(product_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExtensionSubmit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .userfeedback.CommonData common_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_common_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .userfeedback.WebData web_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_web_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 type_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_type_id(&has_bits);
          type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .userfeedback.PostedScreenshot screenshot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_screenshot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .userfeedback.ChromeData chrome_data = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_chrome_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .userfeedback.ProductSpecificBinaryData product_specific_binary_data = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_product_specific_binary_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 122);
        } else goto handle_unusual;
        continue;
      // optional string category_tag = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_category_tag(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 product_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_product_id(&has_bits);
          product_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string bucket = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_bucket(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExtensionSubmit::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:userfeedback.ExtensionSubmit)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .userfeedback.CommonData common_data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_common_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .userfeedback.WebData web_data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_web_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_type_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .userfeedback.PostedScreenshot screenshot = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_screenshot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .userfeedback.ChromeData chrome_data = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_chrome_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .userfeedback.ProductSpecificBinaryData product_specific_binary_data = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_product_specific_binary_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string category_tag = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_category_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 product_id = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_product_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &product_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string bucket = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_bucket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userfeedback.ExtensionSubmit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userfeedback.ExtensionSubmit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExtensionSubmit::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userfeedback.ExtensionSubmit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .userfeedback.CommonData common_data = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::common_data(this), output);
  }

  // required .userfeedback.WebData web_data = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::web_data(this), output);
  }

  // required int32 type_id = 3;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->type_id(), output);
  }

  // optional .userfeedback.PostedScreenshot screenshot = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::screenshot(this), output);
  }

  // optional .userfeedback.ChromeData chrome_data = 14;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      14, _Internal::chrome_data(this), output);
  }

  // repeated .userfeedback.ProductSpecificBinaryData product_specific_binary_data = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->product_specific_binary_data_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      15,
      this->product_specific_binary_data(static_cast<int>(i)),
      output);
  }

  // optional string category_tag = 16;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->category_tag(), output);
  }

  // optional int32 product_id = 17;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(17, this->product_id(), output);
  }

  // optional string bucket = 18;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->bucket(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:userfeedback.ExtensionSubmit)
}

size_t ExtensionSubmit::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:userfeedback.ExtensionSubmit)
  size_t total_size = 0;

  if (has_common_data()) {
    // required .userfeedback.CommonData common_data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_data_);
  }

  if (has_web_data()) {
    // required .userfeedback.WebData web_data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *web_data_);
  }

  if (has_type_id()) {
    // required int32 type_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->type_id());
  }

  return total_size;
}
size_t ExtensionSubmit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.ExtensionSubmit)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x0000004c) ^ 0x0000004c) == 0) {  // All required fields are present.
    // required .userfeedback.CommonData common_data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_data_);

    // required .userfeedback.WebData web_data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *web_data_);

    // required int32 type_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->type_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .userfeedback.ProductSpecificBinaryData product_specific_binary_data = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->product_specific_binary_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->product_specific_binary_data(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string category_tag = 16;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->category_tag());
    }

    // optional string bucket = 18;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->bucket());
    }

  }
  if (cached_has_bits & 0x00000030u) {
    // optional .userfeedback.PostedScreenshot screenshot = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *screenshot_);
    }

    // optional .userfeedback.ChromeData chrome_data = 14;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chrome_data_);
    }

  }
  // optional int32 product_id = 17;
  if (cached_has_bits & 0x00000080u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->product_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtensionSubmit::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ExtensionSubmit*>(
      &from));
}

void ExtensionSubmit::MergeFrom(const ExtensionSubmit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.ExtensionSubmit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  product_specific_binary_data_.MergeFrom(from.product_specific_binary_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      category_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.category_tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      bucket_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bucket_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_common_data()->::userfeedback::CommonData::MergeFrom(from.common_data());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_web_data()->::userfeedback::WebData::MergeFrom(from.web_data());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_screenshot()->::userfeedback::PostedScreenshot::MergeFrom(from.screenshot());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_chrome_data()->::userfeedback::ChromeData::MergeFrom(from.chrome_data());
    }
    if (cached_has_bits & 0x00000040u) {
      type_id_ = from.type_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      product_id_ = from.product_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExtensionSubmit::CopyFrom(const ExtensionSubmit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.ExtensionSubmit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionSubmit::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000004c) != 0x0000004c) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->product_specific_binary_data())) return false;
  if (has_web_data()) {
    if (!this->web_data_->IsInitialized()) return false;
  }
  if (has_screenshot()) {
    if (!this->screenshot_->IsInitialized()) return false;
  }
  return true;
}

void ExtensionSubmit::InternalSwap(ExtensionSubmit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&product_specific_binary_data_)->InternalSwap(CastToBase(&other->product_specific_binary_data_));
  category_tag_.Swap(&other->category_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  bucket_.Swap(&other->bucket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(common_data_, other->common_data_);
  swap(web_data_, other->web_data_);
  swap(screenshot_, other->screenshot_);
  swap(chrome_data_, other->chrome_data_);
  swap(type_id_, other->type_id_);
  swap(product_id_, other->product_id_);
}

std::string ExtensionSubmit::GetTypeName() const {
  return "userfeedback.ExtensionSubmit";
}


// ===================================================================

void SuggestQuery::InitAsDefaultInstance() {
  ::userfeedback::_SuggestQuery_default_instance_._instance.get_mutable()->common_data_ = const_cast< ::userfeedback::CommonData*>(
      ::userfeedback::CommonData::internal_default_instance());
  ::userfeedback::_SuggestQuery_default_instance_._instance.get_mutable()->web_data_ = const_cast< ::userfeedback::WebData*>(
      ::userfeedback::WebData::internal_default_instance());
  ::userfeedback::_SuggestQuery_default_instance_._instance.get_mutable()->html_document_structure_ = const_cast< ::userfeedback::HtmlDocument*>(
      ::userfeedback::HtmlDocument::internal_default_instance());
  ::userfeedback::_SuggestQuery_default_instance_._instance.get_mutable()->chrome_data_ = const_cast< ::userfeedback::ChromeData*>(
      ::userfeedback::ChromeData::internal_default_instance());
}
class SuggestQuery::_Internal {
 public:
  using HasBits = decltype(std::declval<SuggestQuery>()._has_bits_);
  static const ::userfeedback::CommonData& common_data(const SuggestQuery* msg);
  static void set_has_common_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::userfeedback::WebData& web_data(const SuggestQuery* msg);
  static void set_has_web_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::userfeedback::HtmlDocument& html_document_structure(const SuggestQuery* msg);
  static void set_has_html_document_structure(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::userfeedback::ChromeData& chrome_data(const SuggestQuery* msg);
  static void set_has_chrome_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::userfeedback::CommonData&
SuggestQuery::_Internal::common_data(const SuggestQuery* msg) {
  return *msg->common_data_;
}
const ::userfeedback::WebData&
SuggestQuery::_Internal::web_data(const SuggestQuery* msg) {
  return *msg->web_data_;
}
const ::userfeedback::HtmlDocument&
SuggestQuery::_Internal::html_document_structure(const SuggestQuery* msg) {
  return *msg->html_document_structure_;
}
const ::userfeedback::ChromeData&
SuggestQuery::_Internal::chrome_data(const SuggestQuery* msg) {
  return *msg->chrome_data_;
}
void SuggestQuery::clear_common_data() {
  if (common_data_ != nullptr) common_data_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SuggestQuery::clear_web_data() {
  if (web_data_ != nullptr) web_data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SuggestQuery::clear_html_document_structure() {
  if (html_document_structure_ != nullptr) html_document_structure_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SuggestQuery::clear_chrome_data() {
  if (chrome_data_ != nullptr) chrome_data_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
SuggestQuery::SuggestQuery()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:userfeedback.SuggestQuery)
}
SuggestQuery::SuggestQuery(const SuggestQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_common_data()) {
    common_data_ = new ::userfeedback::CommonData(*from.common_data_);
  } else {
    common_data_ = nullptr;
  }
  if (from.has_web_data()) {
    web_data_ = new ::userfeedback::WebData(*from.web_data_);
  } else {
    web_data_ = nullptr;
  }
  if (from.has_html_document_structure()) {
    html_document_structure_ = new ::userfeedback::HtmlDocument(*from.html_document_structure_);
  } else {
    html_document_structure_ = nullptr;
  }
  if (from.has_chrome_data()) {
    chrome_data_ = new ::userfeedback::ChromeData(*from.chrome_data_);
  } else {
    chrome_data_ = nullptr;
  }
  type_id_ = from.type_id_;
  // @@protoc_insertion_point(copy_constructor:userfeedback.SuggestQuery)
}

void SuggestQuery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SuggestQuery_extension_2eproto.base);
  ::memset(&common_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_id_) -
      reinterpret_cast<char*>(&common_data_)) + sizeof(type_id_));
}

SuggestQuery::~SuggestQuery() {
  // @@protoc_insertion_point(destructor:userfeedback.SuggestQuery)
  SharedDtor();
}

void SuggestQuery::SharedDtor() {
  if (this != internal_default_instance()) delete common_data_;
  if (this != internal_default_instance()) delete web_data_;
  if (this != internal_default_instance()) delete html_document_structure_;
  if (this != internal_default_instance()) delete chrome_data_;
}

void SuggestQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SuggestQuery& SuggestQuery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SuggestQuery_extension_2eproto.base);
  return *internal_default_instance();
}


void SuggestQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.SuggestQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(common_data_ != nullptr);
      common_data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(web_data_ != nullptr);
      web_data_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(html_document_structure_ != nullptr);
      html_document_structure_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(chrome_data_ != nullptr);
      chrome_data_->Clear();
    }
  }
  type_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SuggestQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .userfeedback.CommonData common_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_common_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .userfeedback.WebData web_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_web_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 type_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_type_id(&has_bits);
          type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .userfeedback.HtmlDocument html_document_structure = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_html_document_structure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .userfeedback.ChromeData chrome_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_chrome_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SuggestQuery::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:userfeedback.SuggestQuery)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .userfeedback.CommonData common_data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_common_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .userfeedback.WebData web_data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_web_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 type_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_type_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .userfeedback.HtmlDocument html_document_structure = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_html_document_structure()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .userfeedback.ChromeData chrome_data = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_chrome_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:userfeedback.SuggestQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:userfeedback.SuggestQuery)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SuggestQuery::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:userfeedback.SuggestQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .userfeedback.CommonData common_data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::common_data(this), output);
  }

  // required .userfeedback.WebData web_data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::web_data(this), output);
  }

  // required int32 type_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->type_id(), output);
  }

  // optional .userfeedback.HtmlDocument html_document_structure = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::html_document_structure(this), output);
  }

  // optional .userfeedback.ChromeData chrome_data = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::chrome_data(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:userfeedback.SuggestQuery)
}

size_t SuggestQuery::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:userfeedback.SuggestQuery)
  size_t total_size = 0;

  if (has_common_data()) {
    // required .userfeedback.CommonData common_data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_data_);
  }

  if (has_web_data()) {
    // required .userfeedback.WebData web_data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *web_data_);
  }

  if (has_type_id()) {
    // required int32 type_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->type_id());
  }

  return total_size;
}
size_t SuggestQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.SuggestQuery)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000013) ^ 0x00000013) == 0) {  // All required fields are present.
    // required .userfeedback.CommonData common_data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_data_);

    // required .userfeedback.WebData web_data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *web_data_);

    // required int32 type_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->type_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional .userfeedback.HtmlDocument html_document_structure = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *html_document_structure_);
    }

    // optional .userfeedback.ChromeData chrome_data = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chrome_data_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SuggestQuery::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SuggestQuery*>(
      &from));
}

void SuggestQuery::MergeFrom(const SuggestQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.SuggestQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_common_data()->::userfeedback::CommonData::MergeFrom(from.common_data());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_web_data()->::userfeedback::WebData::MergeFrom(from.web_data());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_html_document_structure()->::userfeedback::HtmlDocument::MergeFrom(from.html_document_structure());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_chrome_data()->::userfeedback::ChromeData::MergeFrom(from.chrome_data());
    }
    if (cached_has_bits & 0x00000010u) {
      type_id_ = from.type_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SuggestQuery::CopyFrom(const SuggestQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.SuggestQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuggestQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;
  if (has_web_data()) {
    if (!this->web_data_->IsInitialized()) return false;
  }
  if (has_html_document_structure()) {
    if (!this->html_document_structure_->IsInitialized()) return false;
  }
  return true;
}

void SuggestQuery::InternalSwap(SuggestQuery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(common_data_, other->common_data_);
  swap(web_data_, other->web_data_);
  swap(html_document_structure_, other->html_document_structure_);
  swap(chrome_data_, other->chrome_data_);
  swap(type_id_, other->type_id_);
}

std::string SuggestQuery::GetTypeName() const {
  return "userfeedback.SuggestQuery";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace userfeedback
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::userfeedback::ExtensionPageRequestParams* Arena::CreateMaybeMessage< ::userfeedback::ExtensionPageRequestParams >(Arena* arena) {
  return Arena::CreateInternal< ::userfeedback::ExtensionPageRequestParams >(arena);
}
template<> PROTOBUF_NOINLINE ::userfeedback::PostedScreenshot* Arena::CreateMaybeMessage< ::userfeedback::PostedScreenshot >(Arena* arena) {
  return Arena::CreateInternal< ::userfeedback::PostedScreenshot >(arena);
}
template<> PROTOBUF_NOINLINE ::userfeedback::ExtensionErrors* Arena::CreateMaybeMessage< ::userfeedback::ExtensionErrors >(Arena* arena) {
  return Arena::CreateInternal< ::userfeedback::ExtensionErrors >(arena);
}
template<> PROTOBUF_NOINLINE ::userfeedback::ExtensionSubmit* Arena::CreateMaybeMessage< ::userfeedback::ExtensionSubmit >(Arena* arena) {
  return Arena::CreateInternal< ::userfeedback::ExtensionSubmit >(arena);
}
template<> PROTOBUF_NOINLINE ::userfeedback::SuggestQuery* Arena::CreateMaybeMessage< ::userfeedback::SuggestQuery >(Arena* arena) {
  return Arena::CreateInternal< ::userfeedback::SuggestQuery >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

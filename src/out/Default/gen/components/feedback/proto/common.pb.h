// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace userfeedback {
class CommonData;
class CommonDataDefaultTypeInternal;
extern CommonDataDefaultTypeInternal _CommonData_default_instance_;
}  // namespace userfeedback
PROTOBUF_NAMESPACE_OPEN
template<> ::userfeedback::CommonData* Arena::CreateMaybeMessage<::userfeedback::CommonData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace userfeedback {

// ===================================================================

class CommonData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:userfeedback.CommonData) */ {
 public:
  CommonData();
  virtual ~CommonData();

  CommonData(const CommonData& from);
  CommonData(CommonData&& from) noexcept
    : CommonData() {
    *this = ::std::move(from);
  }

  inline CommonData& operator=(const CommonData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonData& operator=(CommonData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CommonData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonData* internal_default_instance() {
    return reinterpret_cast<const CommonData*>(
               &_CommonData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommonData& a, CommonData& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonData* New() const final {
    return CreateMaybeMessage<CommonData>(nullptr);
  }

  CommonData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CommonData& from);
  void MergeFrom(const CommonData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CommonData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userfeedback.CommonData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kUserEmailFieldNumber = 3,
    kDescriptionTranslatedFieldNumber = 4,
    kSourceDescriptionLanguageFieldNumber = 5,
    kUiLanguageFieldNumber = 6,
    kUniqueReportIdentifierFieldNumber = 7,
    kGaiaIdFieldNumber = 1,
  };
  // optional string description = 2;
  bool has_description() const;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);

  // optional string user_email = 3;
  bool has_user_email() const;
  void clear_user_email();
  const std::string& user_email() const;
  void set_user_email(const std::string& value);
  void set_user_email(std::string&& value);
  void set_user_email(const char* value);
  void set_user_email(const char* value, size_t size);
  std::string* mutable_user_email();
  std::string* release_user_email();
  void set_allocated_user_email(std::string* user_email);

  // optional string description_translated = 4;
  bool has_description_translated() const;
  void clear_description_translated();
  const std::string& description_translated() const;
  void set_description_translated(const std::string& value);
  void set_description_translated(std::string&& value);
  void set_description_translated(const char* value);
  void set_description_translated(const char* value, size_t size);
  std::string* mutable_description_translated();
  std::string* release_description_translated();
  void set_allocated_description_translated(std::string* description_translated);

  // optional string source_description_language = 5 [default = "en"];
  bool has_source_description_language() const;
  void clear_source_description_language();
  const std::string& source_description_language() const;
  void set_source_description_language(const std::string& value);
  void set_source_description_language(std::string&& value);
  void set_source_description_language(const char* value);
  void set_source_description_language(const char* value, size_t size);
  std::string* mutable_source_description_language();
  std::string* release_source_description_language();
  void set_allocated_source_description_language(std::string* source_description_language);

  // optional string ui_language = 6 [default = "en_US"];
  bool has_ui_language() const;
  void clear_ui_language();
  const std::string& ui_language() const;
  void set_ui_language(const std::string& value);
  void set_ui_language(std::string&& value);
  void set_ui_language(const char* value);
  void set_ui_language(const char* value, size_t size);
  std::string* mutable_ui_language();
  std::string* release_ui_language();
  void set_allocated_ui_language(std::string* ui_language);

  // optional string unique_report_identifier = 7;
  bool has_unique_report_identifier() const;
  void clear_unique_report_identifier();
  const std::string& unique_report_identifier() const;
  void set_unique_report_identifier(const std::string& value);
  void set_unique_report_identifier(std::string&& value);
  void set_unique_report_identifier(const char* value);
  void set_unique_report_identifier(const char* value, size_t size);
  std::string* mutable_unique_report_identifier();
  std::string* release_unique_report_identifier();
  void set_allocated_unique_report_identifier(std::string* unique_report_identifier);

  // optional fixed64 gaia_id = 1;
  bool has_gaia_id() const;
  void clear_gaia_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 gaia_id() const;
  void set_gaia_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:userfeedback.CommonData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_translated_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_source_description_language_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_description_language_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_ui_language_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ui_language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_report_identifier_;
  ::PROTOBUF_NAMESPACE_ID::uint64 gaia_id_;
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommonData

// optional fixed64 gaia_id = 1;
inline bool CommonData::has_gaia_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CommonData::clear_gaia_id() {
  gaia_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommonData::gaia_id() const {
  // @@protoc_insertion_point(field_get:userfeedback.CommonData.gaia_id)
  return gaia_id_;
}
inline void CommonData::set_gaia_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  gaia_id_ = value;
  // @@protoc_insertion_point(field_set:userfeedback.CommonData.gaia_id)
}

// optional string description = 2;
inline bool CommonData::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommonData::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommonData::description() const {
  // @@protoc_insertion_point(field_get:userfeedback.CommonData.description)
  return description_.GetNoArena();
}
inline void CommonData::set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.CommonData.description)
}
inline void CommonData::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.CommonData.description)
}
inline void CommonData::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.CommonData.description)
}
inline void CommonData::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.CommonData.description)
}
inline std::string* CommonData::mutable_description() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:userfeedback.CommonData.description)
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommonData::release_description() {
  // @@protoc_insertion_point(field_release:userfeedback.CommonData.description)
  if (!has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return description_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CommonData::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.CommonData.description)
}

// optional string description_translated = 4;
inline bool CommonData::has_description_translated() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommonData::clear_description_translated() {
  description_translated_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CommonData::description_translated() const {
  // @@protoc_insertion_point(field_get:userfeedback.CommonData.description_translated)
  return description_translated_.GetNoArena();
}
inline void CommonData::set_description_translated(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  description_translated_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.CommonData.description_translated)
}
inline void CommonData::set_description_translated(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  description_translated_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.CommonData.description_translated)
}
inline void CommonData::set_description_translated(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  description_translated_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.CommonData.description_translated)
}
inline void CommonData::set_description_translated(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  description_translated_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.CommonData.description_translated)
}
inline std::string* CommonData::mutable_description_translated() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:userfeedback.CommonData.description_translated)
  return description_translated_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommonData::release_description_translated() {
  // @@protoc_insertion_point(field_release:userfeedback.CommonData.description_translated)
  if (!has_description_translated()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return description_translated_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CommonData::set_allocated_description_translated(std::string* description_translated) {
  if (description_translated != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  description_translated_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description_translated);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.CommonData.description_translated)
}

// optional string source_description_language = 5 [default = "en"];
inline bool CommonData::has_source_description_language() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommonData::clear_source_description_language() {
  source_description_language_.ClearToDefaultNoArena(&::userfeedback::CommonData::_i_give_permission_to_break_this_code_default_source_description_language_.get());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CommonData::source_description_language() const {
  // @@protoc_insertion_point(field_get:userfeedback.CommonData.source_description_language)
  return source_description_language_.GetNoArena();
}
inline void CommonData::set_source_description_language(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  source_description_language_.SetNoArena(&::userfeedback::CommonData::_i_give_permission_to_break_this_code_default_source_description_language_.get(), value);
  // @@protoc_insertion_point(field_set:userfeedback.CommonData.source_description_language)
}
inline void CommonData::set_source_description_language(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  source_description_language_.SetNoArena(
    &::userfeedback::CommonData::_i_give_permission_to_break_this_code_default_source_description_language_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.CommonData.source_description_language)
}
inline void CommonData::set_source_description_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  source_description_language_.SetNoArena(&::userfeedback::CommonData::_i_give_permission_to_break_this_code_default_source_description_language_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.CommonData.source_description_language)
}
inline void CommonData::set_source_description_language(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  source_description_language_.SetNoArena(&::userfeedback::CommonData::_i_give_permission_to_break_this_code_default_source_description_language_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.CommonData.source_description_language)
}
inline std::string* CommonData::mutable_source_description_language() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:userfeedback.CommonData.source_description_language)
  return source_description_language_.MutableNoArena(&::userfeedback::CommonData::_i_give_permission_to_break_this_code_default_source_description_language_.get());
}
inline std::string* CommonData::release_source_description_language() {
  // @@protoc_insertion_point(field_release:userfeedback.CommonData.source_description_language)
  if (!has_source_description_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return source_description_language_.ReleaseNonDefaultNoArena(&::userfeedback::CommonData::_i_give_permission_to_break_this_code_default_source_description_language_.get());
}
inline void CommonData::set_allocated_source_description_language(std::string* source_description_language) {
  if (source_description_language != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  source_description_language_.SetAllocatedNoArena(&::userfeedback::CommonData::_i_give_permission_to_break_this_code_default_source_description_language_.get(), source_description_language);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.CommonData.source_description_language)
}

// optional string ui_language = 6 [default = "en_US"];
inline bool CommonData::has_ui_language() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CommonData::clear_ui_language() {
  ui_language_.ClearToDefaultNoArena(&::userfeedback::CommonData::_i_give_permission_to_break_this_code_default_ui_language_.get());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CommonData::ui_language() const {
  // @@protoc_insertion_point(field_get:userfeedback.CommonData.ui_language)
  return ui_language_.GetNoArena();
}
inline void CommonData::set_ui_language(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  ui_language_.SetNoArena(&::userfeedback::CommonData::_i_give_permission_to_break_this_code_default_ui_language_.get(), value);
  // @@protoc_insertion_point(field_set:userfeedback.CommonData.ui_language)
}
inline void CommonData::set_ui_language(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  ui_language_.SetNoArena(
    &::userfeedback::CommonData::_i_give_permission_to_break_this_code_default_ui_language_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.CommonData.ui_language)
}
inline void CommonData::set_ui_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  ui_language_.SetNoArena(&::userfeedback::CommonData::_i_give_permission_to_break_this_code_default_ui_language_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.CommonData.ui_language)
}
inline void CommonData::set_ui_language(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  ui_language_.SetNoArena(&::userfeedback::CommonData::_i_give_permission_to_break_this_code_default_ui_language_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.CommonData.ui_language)
}
inline std::string* CommonData::mutable_ui_language() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:userfeedback.CommonData.ui_language)
  return ui_language_.MutableNoArena(&::userfeedback::CommonData::_i_give_permission_to_break_this_code_default_ui_language_.get());
}
inline std::string* CommonData::release_ui_language() {
  // @@protoc_insertion_point(field_release:userfeedback.CommonData.ui_language)
  if (!has_ui_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return ui_language_.ReleaseNonDefaultNoArena(&::userfeedback::CommonData::_i_give_permission_to_break_this_code_default_ui_language_.get());
}
inline void CommonData::set_allocated_ui_language(std::string* ui_language) {
  if (ui_language != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  ui_language_.SetAllocatedNoArena(&::userfeedback::CommonData::_i_give_permission_to_break_this_code_default_ui_language_.get(), ui_language);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.CommonData.ui_language)
}

// optional string user_email = 3;
inline bool CommonData::has_user_email() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommonData::clear_user_email() {
  user_email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CommonData::user_email() const {
  // @@protoc_insertion_point(field_get:userfeedback.CommonData.user_email)
  return user_email_.GetNoArena();
}
inline void CommonData::set_user_email(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  user_email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.CommonData.user_email)
}
inline void CommonData::set_user_email(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  user_email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.CommonData.user_email)
}
inline void CommonData::set_user_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  user_email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.CommonData.user_email)
}
inline void CommonData::set_user_email(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  user_email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.CommonData.user_email)
}
inline std::string* CommonData::mutable_user_email() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:userfeedback.CommonData.user_email)
  return user_email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommonData::release_user_email() {
  // @@protoc_insertion_point(field_release:userfeedback.CommonData.user_email)
  if (!has_user_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return user_email_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CommonData::set_allocated_user_email(std::string* user_email) {
  if (user_email != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  user_email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_email);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.CommonData.user_email)
}

// optional string unique_report_identifier = 7;
inline bool CommonData::has_unique_report_identifier() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CommonData::clear_unique_report_identifier() {
  unique_report_identifier_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CommonData::unique_report_identifier() const {
  // @@protoc_insertion_point(field_get:userfeedback.CommonData.unique_report_identifier)
  return unique_report_identifier_.GetNoArena();
}
inline void CommonData::set_unique_report_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  unique_report_identifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.CommonData.unique_report_identifier)
}
inline void CommonData::set_unique_report_identifier(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  unique_report_identifier_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.CommonData.unique_report_identifier)
}
inline void CommonData::set_unique_report_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  unique_report_identifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.CommonData.unique_report_identifier)
}
inline void CommonData::set_unique_report_identifier(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  unique_report_identifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.CommonData.unique_report_identifier)
}
inline std::string* CommonData::mutable_unique_report_identifier() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:userfeedback.CommonData.unique_report_identifier)
  return unique_report_identifier_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommonData::release_unique_report_identifier() {
  // @@protoc_insertion_point(field_release:userfeedback.CommonData.unique_report_identifier)
  if (!has_unique_report_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return unique_report_identifier_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CommonData::set_allocated_unique_report_identifier(std::string* unique_report_identifier) {
  if (unique_report_identifier != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  unique_report_identifier_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unique_report_identifier);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.CommonData.unique_report_identifier)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace userfeedback

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto

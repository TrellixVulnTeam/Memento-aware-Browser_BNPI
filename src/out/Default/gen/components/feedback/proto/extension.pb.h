// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: extension.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_extension_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_extension_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "common.pb.h"
#include "chrome.pb.h"
#include "dom.pb.h"
#include "math.pb.h"
#include "web.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_extension_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_extension_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace userfeedback {
class ExtensionErrors;
class ExtensionErrorsDefaultTypeInternal;
extern ExtensionErrorsDefaultTypeInternal _ExtensionErrors_default_instance_;
class ExtensionPageRequestParams;
class ExtensionPageRequestParamsDefaultTypeInternal;
extern ExtensionPageRequestParamsDefaultTypeInternal _ExtensionPageRequestParams_default_instance_;
class ExtensionSubmit;
class ExtensionSubmitDefaultTypeInternal;
extern ExtensionSubmitDefaultTypeInternal _ExtensionSubmit_default_instance_;
class PostedScreenshot;
class PostedScreenshotDefaultTypeInternal;
extern PostedScreenshotDefaultTypeInternal _PostedScreenshot_default_instance_;
class SuggestQuery;
class SuggestQueryDefaultTypeInternal;
extern SuggestQueryDefaultTypeInternal _SuggestQuery_default_instance_;
}  // namespace userfeedback
PROTOBUF_NAMESPACE_OPEN
template<> ::userfeedback::ExtensionErrors* Arena::CreateMaybeMessage<::userfeedback::ExtensionErrors>(Arena*);
template<> ::userfeedback::ExtensionPageRequestParams* Arena::CreateMaybeMessage<::userfeedback::ExtensionPageRequestParams>(Arena*);
template<> ::userfeedback::ExtensionSubmit* Arena::CreateMaybeMessage<::userfeedback::ExtensionSubmit>(Arena*);
template<> ::userfeedback::PostedScreenshot* Arena::CreateMaybeMessage<::userfeedback::PostedScreenshot>(Arena*);
template<> ::userfeedback::SuggestQuery* Arena::CreateMaybeMessage<::userfeedback::SuggestQuery>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace userfeedback {

// ===================================================================

class ExtensionPageRequestParams :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:userfeedback.ExtensionPageRequestParams) */ {
 public:
  ExtensionPageRequestParams();
  virtual ~ExtensionPageRequestParams();

  ExtensionPageRequestParams(const ExtensionPageRequestParams& from);
  ExtensionPageRequestParams(ExtensionPageRequestParams&& from) noexcept
    : ExtensionPageRequestParams() {
    *this = ::std::move(from);
  }

  inline ExtensionPageRequestParams& operator=(const ExtensionPageRequestParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtensionPageRequestParams& operator=(ExtensionPageRequestParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ExtensionPageRequestParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExtensionPageRequestParams* internal_default_instance() {
    return reinterpret_cast<const ExtensionPageRequestParams*>(
               &_ExtensionPageRequestParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ExtensionPageRequestParams& a, ExtensionPageRequestParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtensionPageRequestParams* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExtensionPageRequestParams* New() const final {
    return CreateMaybeMessage<ExtensionPageRequestParams>(nullptr);
  }

  ExtensionPageRequestParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExtensionPageRequestParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ExtensionPageRequestParams& from);
  void MergeFrom(const ExtensionPageRequestParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExtensionPageRequestParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userfeedback.ExtensionPageRequestParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kExtensionDetailsFieldNumber = 1,
  };
  // required string url = 2;
  bool has_url() const;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // required .userfeedback.ExtensionDetails extension_details = 1;
  bool has_extension_details() const;
  void clear_extension_details();
  const ::userfeedback::ExtensionDetails& extension_details() const;
  ::userfeedback::ExtensionDetails* release_extension_details();
  ::userfeedback::ExtensionDetails* mutable_extension_details();
  void set_allocated_extension_details(::userfeedback::ExtensionDetails* extension_details);

  // @@protoc_insertion_point(class_scope:userfeedback.ExtensionPageRequestParams)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::userfeedback::ExtensionDetails* extension_details_;
  friend struct ::TableStruct_extension_2eproto;
};
// -------------------------------------------------------------------

class PostedScreenshot :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:userfeedback.PostedScreenshot) */ {
 public:
  PostedScreenshot();
  virtual ~PostedScreenshot();

  PostedScreenshot(const PostedScreenshot& from);
  PostedScreenshot(PostedScreenshot&& from) noexcept
    : PostedScreenshot() {
    *this = ::std::move(from);
  }

  inline PostedScreenshot& operator=(const PostedScreenshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostedScreenshot& operator=(PostedScreenshot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PostedScreenshot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PostedScreenshot* internal_default_instance() {
    return reinterpret_cast<const PostedScreenshot*>(
               &_PostedScreenshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PostedScreenshot& a, PostedScreenshot& b) {
    a.Swap(&b);
  }
  inline void Swap(PostedScreenshot* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostedScreenshot* New() const final {
    return CreateMaybeMessage<PostedScreenshot>(nullptr);
  }

  PostedScreenshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostedScreenshot>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PostedScreenshot& from);
  void MergeFrom(const PostedScreenshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PostedScreenshot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userfeedback.PostedScreenshot";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMimeTypeFieldNumber = 1,
    kBase64ContentFieldNumber = 3,
    kBinaryContentFieldNumber = 4,
    kDimensionsFieldNumber = 2,
  };
  // required string mime_type = 1;
  bool has_mime_type() const;
  void clear_mime_type();
  const std::string& mime_type() const;
  void set_mime_type(const std::string& value);
  void set_mime_type(std::string&& value);
  void set_mime_type(const char* value);
  void set_mime_type(const char* value, size_t size);
  std::string* mutable_mime_type();
  std::string* release_mime_type();
  void set_allocated_mime_type(std::string* mime_type);

  // optional string base64_content = 3;
  bool has_base64_content() const;
  void clear_base64_content();
  const std::string& base64_content() const;
  void set_base64_content(const std::string& value);
  void set_base64_content(std::string&& value);
  void set_base64_content(const char* value);
  void set_base64_content(const char* value, size_t size);
  std::string* mutable_base64_content();
  std::string* release_base64_content();
  void set_allocated_base64_content(std::string* base64_content);

  // optional bytes binary_content = 4;
  bool has_binary_content() const;
  void clear_binary_content();
  const std::string& binary_content() const;
  void set_binary_content(const std::string& value);
  void set_binary_content(std::string&& value);
  void set_binary_content(const char* value);
  void set_binary_content(const void* value, size_t size);
  std::string* mutable_binary_content();
  std::string* release_binary_content();
  void set_allocated_binary_content(std::string* binary_content);

  // required .userfeedback.Dimensions dimensions = 2;
  bool has_dimensions() const;
  void clear_dimensions();
  const ::userfeedback::Dimensions& dimensions() const;
  ::userfeedback::Dimensions* release_dimensions();
  ::userfeedback::Dimensions* mutable_dimensions();
  void set_allocated_dimensions(::userfeedback::Dimensions* dimensions);

  // @@protoc_insertion_point(class_scope:userfeedback.PostedScreenshot)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mime_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base64_content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr binary_content_;
  ::userfeedback::Dimensions* dimensions_;
  friend struct ::TableStruct_extension_2eproto;
};
// -------------------------------------------------------------------

class ExtensionErrors :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:userfeedback.ExtensionErrors) */ {
 public:
  ExtensionErrors();
  virtual ~ExtensionErrors();

  ExtensionErrors(const ExtensionErrors& from);
  ExtensionErrors(ExtensionErrors&& from) noexcept
    : ExtensionErrors() {
    *this = ::std::move(from);
  }

  inline ExtensionErrors& operator=(const ExtensionErrors& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtensionErrors& operator=(ExtensionErrors&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ExtensionErrors& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExtensionErrors* internal_default_instance() {
    return reinterpret_cast<const ExtensionErrors*>(
               &_ExtensionErrors_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ExtensionErrors& a, ExtensionErrors& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtensionErrors* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExtensionErrors* New() const final {
    return CreateMaybeMessage<ExtensionErrors>(nullptr);
  }

  ExtensionErrors* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExtensionErrors>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ExtensionErrors& from);
  void MergeFrom(const ExtensionErrors& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExtensionErrors* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userfeedback.ExtensionErrors";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorsFieldNumber = 2,
    kNumberOfAttemptsFieldNumber = 1,
  };
  // required string errors = 2;
  bool has_errors() const;
  void clear_errors();
  const std::string& errors() const;
  void set_errors(const std::string& value);
  void set_errors(std::string&& value);
  void set_errors(const char* value);
  void set_errors(const char* value, size_t size);
  std::string* mutable_errors();
  std::string* release_errors();
  void set_allocated_errors(std::string* errors);

  // required int32 number_of_attempts = 1;
  bool has_number_of_attempts() const;
  void clear_number_of_attempts();
  ::PROTOBUF_NAMESPACE_ID::int32 number_of_attempts() const;
  void set_number_of_attempts(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:userfeedback.ExtensionErrors)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errors_;
  ::PROTOBUF_NAMESPACE_ID::int32 number_of_attempts_;
  friend struct ::TableStruct_extension_2eproto;
};
// -------------------------------------------------------------------

class ExtensionSubmit :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:userfeedback.ExtensionSubmit) */ {
 public:
  ExtensionSubmit();
  virtual ~ExtensionSubmit();

  ExtensionSubmit(const ExtensionSubmit& from);
  ExtensionSubmit(ExtensionSubmit&& from) noexcept
    : ExtensionSubmit() {
    *this = ::std::move(from);
  }

  inline ExtensionSubmit& operator=(const ExtensionSubmit& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtensionSubmit& operator=(ExtensionSubmit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ExtensionSubmit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExtensionSubmit* internal_default_instance() {
    return reinterpret_cast<const ExtensionSubmit*>(
               &_ExtensionSubmit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ExtensionSubmit& a, ExtensionSubmit& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtensionSubmit* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExtensionSubmit* New() const final {
    return CreateMaybeMessage<ExtensionSubmit>(nullptr);
  }

  ExtensionSubmit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExtensionSubmit>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ExtensionSubmit& from);
  void MergeFrom(const ExtensionSubmit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ExtensionSubmit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userfeedback.ExtensionSubmit";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductSpecificBinaryDataFieldNumber = 15,
    kCategoryTagFieldNumber = 16,
    kBucketFieldNumber = 18,
    kCommonDataFieldNumber = 1,
    kWebDataFieldNumber = 2,
    kScreenshotFieldNumber = 4,
    kChromeDataFieldNumber = 14,
    kTypeIdFieldNumber = 3,
    kProductIdFieldNumber = 17,
  };
  // repeated .userfeedback.ProductSpecificBinaryData product_specific_binary_data = 15;
  int product_specific_binary_data_size() const;
  void clear_product_specific_binary_data();
  ::userfeedback::ProductSpecificBinaryData* mutable_product_specific_binary_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userfeedback::ProductSpecificBinaryData >*
      mutable_product_specific_binary_data();
  const ::userfeedback::ProductSpecificBinaryData& product_specific_binary_data(int index) const;
  ::userfeedback::ProductSpecificBinaryData* add_product_specific_binary_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userfeedback::ProductSpecificBinaryData >&
      product_specific_binary_data() const;

  // optional string category_tag = 16;
  bool has_category_tag() const;
  void clear_category_tag();
  const std::string& category_tag() const;
  void set_category_tag(const std::string& value);
  void set_category_tag(std::string&& value);
  void set_category_tag(const char* value);
  void set_category_tag(const char* value, size_t size);
  std::string* mutable_category_tag();
  std::string* release_category_tag();
  void set_allocated_category_tag(std::string* category_tag);

  // optional string bucket = 18;
  bool has_bucket() const;
  void clear_bucket();
  const std::string& bucket() const;
  void set_bucket(const std::string& value);
  void set_bucket(std::string&& value);
  void set_bucket(const char* value);
  void set_bucket(const char* value, size_t size);
  std::string* mutable_bucket();
  std::string* release_bucket();
  void set_allocated_bucket(std::string* bucket);

  // required .userfeedback.CommonData common_data = 1;
  bool has_common_data() const;
  void clear_common_data();
  const ::userfeedback::CommonData& common_data() const;
  ::userfeedback::CommonData* release_common_data();
  ::userfeedback::CommonData* mutable_common_data();
  void set_allocated_common_data(::userfeedback::CommonData* common_data);

  // required .userfeedback.WebData web_data = 2;
  bool has_web_data() const;
  void clear_web_data();
  const ::userfeedback::WebData& web_data() const;
  ::userfeedback::WebData* release_web_data();
  ::userfeedback::WebData* mutable_web_data();
  void set_allocated_web_data(::userfeedback::WebData* web_data);

  // optional .userfeedback.PostedScreenshot screenshot = 4;
  bool has_screenshot() const;
  void clear_screenshot();
  const ::userfeedback::PostedScreenshot& screenshot() const;
  ::userfeedback::PostedScreenshot* release_screenshot();
  ::userfeedback::PostedScreenshot* mutable_screenshot();
  void set_allocated_screenshot(::userfeedback::PostedScreenshot* screenshot);

  // optional .userfeedback.ChromeData chrome_data = 14;
  bool has_chrome_data() const;
  void clear_chrome_data();
  const ::userfeedback::ChromeData& chrome_data() const;
  ::userfeedback::ChromeData* release_chrome_data();
  ::userfeedback::ChromeData* mutable_chrome_data();
  void set_allocated_chrome_data(::userfeedback::ChromeData* chrome_data);

  // required int32 type_id = 3;
  bool has_type_id() const;
  void clear_type_id();
  ::PROTOBUF_NAMESPACE_ID::int32 type_id() const;
  void set_type_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 product_id = 17;
  bool has_product_id() const;
  void clear_product_id();
  ::PROTOBUF_NAMESPACE_ID::int32 product_id() const;
  void set_product_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:userfeedback.ExtensionSubmit)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userfeedback::ProductSpecificBinaryData > product_specific_binary_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bucket_;
  ::userfeedback::CommonData* common_data_;
  ::userfeedback::WebData* web_data_;
  ::userfeedback::PostedScreenshot* screenshot_;
  ::userfeedback::ChromeData* chrome_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 product_id_;
  friend struct ::TableStruct_extension_2eproto;
};
// -------------------------------------------------------------------

class SuggestQuery :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:userfeedback.SuggestQuery) */ {
 public:
  SuggestQuery();
  virtual ~SuggestQuery();

  SuggestQuery(const SuggestQuery& from);
  SuggestQuery(SuggestQuery&& from) noexcept
    : SuggestQuery() {
    *this = ::std::move(from);
  }

  inline SuggestQuery& operator=(const SuggestQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline SuggestQuery& operator=(SuggestQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SuggestQuery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SuggestQuery* internal_default_instance() {
    return reinterpret_cast<const SuggestQuery*>(
               &_SuggestQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SuggestQuery& a, SuggestQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(SuggestQuery* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SuggestQuery* New() const final {
    return CreateMaybeMessage<SuggestQuery>(nullptr);
  }

  SuggestQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SuggestQuery>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SuggestQuery& from);
  void MergeFrom(const SuggestQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SuggestQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userfeedback.SuggestQuery";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonDataFieldNumber = 1,
    kWebDataFieldNumber = 2,
    kHtmlDocumentStructureFieldNumber = 4,
    kChromeDataFieldNumber = 5,
    kTypeIdFieldNumber = 3,
  };
  // required .userfeedback.CommonData common_data = 1;
  bool has_common_data() const;
  void clear_common_data();
  const ::userfeedback::CommonData& common_data() const;
  ::userfeedback::CommonData* release_common_data();
  ::userfeedback::CommonData* mutable_common_data();
  void set_allocated_common_data(::userfeedback::CommonData* common_data);

  // required .userfeedback.WebData web_data = 2;
  bool has_web_data() const;
  void clear_web_data();
  const ::userfeedback::WebData& web_data() const;
  ::userfeedback::WebData* release_web_data();
  ::userfeedback::WebData* mutable_web_data();
  void set_allocated_web_data(::userfeedback::WebData* web_data);

  // optional .userfeedback.HtmlDocument html_document_structure = 4;
  bool has_html_document_structure() const;
  void clear_html_document_structure();
  const ::userfeedback::HtmlDocument& html_document_structure() const;
  ::userfeedback::HtmlDocument* release_html_document_structure();
  ::userfeedback::HtmlDocument* mutable_html_document_structure();
  void set_allocated_html_document_structure(::userfeedback::HtmlDocument* html_document_structure);

  // optional .userfeedback.ChromeData chrome_data = 5;
  bool has_chrome_data() const;
  void clear_chrome_data();
  const ::userfeedback::ChromeData& chrome_data() const;
  ::userfeedback::ChromeData* release_chrome_data();
  ::userfeedback::ChromeData* mutable_chrome_data();
  void set_allocated_chrome_data(::userfeedback::ChromeData* chrome_data);

  // required int32 type_id = 3;
  bool has_type_id() const;
  void clear_type_id();
  ::PROTOBUF_NAMESPACE_ID::int32 type_id() const;
  void set_type_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:userfeedback.SuggestQuery)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::userfeedback::CommonData* common_data_;
  ::userfeedback::WebData* web_data_;
  ::userfeedback::HtmlDocument* html_document_structure_;
  ::userfeedback::ChromeData* chrome_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_id_;
  friend struct ::TableStruct_extension_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExtensionPageRequestParams

// required .userfeedback.ExtensionDetails extension_details = 1;
inline bool ExtensionPageRequestParams::has_extension_details() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::userfeedback::ExtensionDetails& ExtensionPageRequestParams::extension_details() const {
  const ::userfeedback::ExtensionDetails* p = extension_details_;
  // @@protoc_insertion_point(field_get:userfeedback.ExtensionPageRequestParams.extension_details)
  return p != nullptr ? *p : *reinterpret_cast<const ::userfeedback::ExtensionDetails*>(
      &::userfeedback::_ExtensionDetails_default_instance_);
}
inline ::userfeedback::ExtensionDetails* ExtensionPageRequestParams::release_extension_details() {
  // @@protoc_insertion_point(field_release:userfeedback.ExtensionPageRequestParams.extension_details)
  _has_bits_[0] &= ~0x00000002u;
  ::userfeedback::ExtensionDetails* temp = extension_details_;
  extension_details_ = nullptr;
  return temp;
}
inline ::userfeedback::ExtensionDetails* ExtensionPageRequestParams::mutable_extension_details() {
  _has_bits_[0] |= 0x00000002u;
  if (extension_details_ == nullptr) {
    auto* p = CreateMaybeMessage<::userfeedback::ExtensionDetails>(GetArenaNoVirtual());
    extension_details_ = p;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.ExtensionPageRequestParams.extension_details)
  return extension_details_;
}
inline void ExtensionPageRequestParams::set_allocated_extension_details(::userfeedback::ExtensionDetails* extension_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extension_details_);
  }
  if (extension_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      extension_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extension_details, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  extension_details_ = extension_details;
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ExtensionPageRequestParams.extension_details)
}

// required string url = 2;
inline bool ExtensionPageRequestParams::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExtensionPageRequestParams::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ExtensionPageRequestParams::url() const {
  // @@protoc_insertion_point(field_get:userfeedback.ExtensionPageRequestParams.url)
  return url_.GetNoArena();
}
inline void ExtensionPageRequestParams::set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.ExtensionPageRequestParams.url)
}
inline void ExtensionPageRequestParams::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.ExtensionPageRequestParams.url)
}
inline void ExtensionPageRequestParams::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.ExtensionPageRequestParams.url)
}
inline void ExtensionPageRequestParams::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.ExtensionPageRequestParams.url)
}
inline std::string* ExtensionPageRequestParams::mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:userfeedback.ExtensionPageRequestParams.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExtensionPageRequestParams::release_url() {
  // @@protoc_insertion_point(field_release:userfeedback.ExtensionPageRequestParams.url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExtensionPageRequestParams::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ExtensionPageRequestParams.url)
}

// -------------------------------------------------------------------

// PostedScreenshot

// required string mime_type = 1;
inline bool PostedScreenshot::has_mime_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PostedScreenshot::clear_mime_type() {
  mime_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PostedScreenshot::mime_type() const {
  // @@protoc_insertion_point(field_get:userfeedback.PostedScreenshot.mime_type)
  return mime_type_.GetNoArena();
}
inline void PostedScreenshot::set_mime_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mime_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.PostedScreenshot.mime_type)
}
inline void PostedScreenshot::set_mime_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  mime_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.PostedScreenshot.mime_type)
}
inline void PostedScreenshot::set_mime_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  mime_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.PostedScreenshot.mime_type)
}
inline void PostedScreenshot::set_mime_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  mime_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.PostedScreenshot.mime_type)
}
inline std::string* PostedScreenshot::mutable_mime_type() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:userfeedback.PostedScreenshot.mime_type)
  return mime_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostedScreenshot::release_mime_type() {
  // @@protoc_insertion_point(field_release:userfeedback.PostedScreenshot.mime_type)
  if (!has_mime_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mime_type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostedScreenshot::set_allocated_mime_type(std::string* mime_type) {
  if (mime_type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mime_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mime_type);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.PostedScreenshot.mime_type)
}

// required .userfeedback.Dimensions dimensions = 2;
inline bool PostedScreenshot::has_dimensions() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::userfeedback::Dimensions& PostedScreenshot::dimensions() const {
  const ::userfeedback::Dimensions* p = dimensions_;
  // @@protoc_insertion_point(field_get:userfeedback.PostedScreenshot.dimensions)
  return p != nullptr ? *p : *reinterpret_cast<const ::userfeedback::Dimensions*>(
      &::userfeedback::_Dimensions_default_instance_);
}
inline ::userfeedback::Dimensions* PostedScreenshot::release_dimensions() {
  // @@protoc_insertion_point(field_release:userfeedback.PostedScreenshot.dimensions)
  _has_bits_[0] &= ~0x00000008u;
  ::userfeedback::Dimensions* temp = dimensions_;
  dimensions_ = nullptr;
  return temp;
}
inline ::userfeedback::Dimensions* PostedScreenshot::mutable_dimensions() {
  _has_bits_[0] |= 0x00000008u;
  if (dimensions_ == nullptr) {
    auto* p = CreateMaybeMessage<::userfeedback::Dimensions>(GetArenaNoVirtual());
    dimensions_ = p;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.PostedScreenshot.dimensions)
  return dimensions_;
}
inline void PostedScreenshot::set_allocated_dimensions(::userfeedback::Dimensions* dimensions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dimensions_);
  }
  if (dimensions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dimensions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dimensions, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  dimensions_ = dimensions;
  // @@protoc_insertion_point(field_set_allocated:userfeedback.PostedScreenshot.dimensions)
}

// optional string base64_content = 3;
inline bool PostedScreenshot::has_base64_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PostedScreenshot::clear_base64_content() {
  base64_content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PostedScreenshot::base64_content() const {
  // @@protoc_insertion_point(field_get:userfeedback.PostedScreenshot.base64_content)
  return base64_content_.GetNoArena();
}
inline void PostedScreenshot::set_base64_content(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  base64_content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.PostedScreenshot.base64_content)
}
inline void PostedScreenshot::set_base64_content(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  base64_content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.PostedScreenshot.base64_content)
}
inline void PostedScreenshot::set_base64_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  base64_content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.PostedScreenshot.base64_content)
}
inline void PostedScreenshot::set_base64_content(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  base64_content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.PostedScreenshot.base64_content)
}
inline std::string* PostedScreenshot::mutable_base64_content() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:userfeedback.PostedScreenshot.base64_content)
  return base64_content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostedScreenshot::release_base64_content() {
  // @@protoc_insertion_point(field_release:userfeedback.PostedScreenshot.base64_content)
  if (!has_base64_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return base64_content_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostedScreenshot::set_allocated_base64_content(std::string* base64_content) {
  if (base64_content != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  base64_content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base64_content);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.PostedScreenshot.base64_content)
}

// optional bytes binary_content = 4;
inline bool PostedScreenshot::has_binary_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PostedScreenshot::clear_binary_content() {
  binary_content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PostedScreenshot::binary_content() const {
  // @@protoc_insertion_point(field_get:userfeedback.PostedScreenshot.binary_content)
  return binary_content_.GetNoArena();
}
inline void PostedScreenshot::set_binary_content(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  binary_content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.PostedScreenshot.binary_content)
}
inline void PostedScreenshot::set_binary_content(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  binary_content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.PostedScreenshot.binary_content)
}
inline void PostedScreenshot::set_binary_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  binary_content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.PostedScreenshot.binary_content)
}
inline void PostedScreenshot::set_binary_content(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  binary_content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.PostedScreenshot.binary_content)
}
inline std::string* PostedScreenshot::mutable_binary_content() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:userfeedback.PostedScreenshot.binary_content)
  return binary_content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PostedScreenshot::release_binary_content() {
  // @@protoc_insertion_point(field_release:userfeedback.PostedScreenshot.binary_content)
  if (!has_binary_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return binary_content_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PostedScreenshot::set_allocated_binary_content(std::string* binary_content) {
  if (binary_content != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  binary_content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), binary_content);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.PostedScreenshot.binary_content)
}

// -------------------------------------------------------------------

// ExtensionErrors

// required int32 number_of_attempts = 1;
inline bool ExtensionErrors::has_number_of_attempts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExtensionErrors::clear_number_of_attempts() {
  number_of_attempts_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExtensionErrors::number_of_attempts() const {
  // @@protoc_insertion_point(field_get:userfeedback.ExtensionErrors.number_of_attempts)
  return number_of_attempts_;
}
inline void ExtensionErrors::set_number_of_attempts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  number_of_attempts_ = value;
  // @@protoc_insertion_point(field_set:userfeedback.ExtensionErrors.number_of_attempts)
}

// required string errors = 2;
inline bool ExtensionErrors::has_errors() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExtensionErrors::clear_errors() {
  errors_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ExtensionErrors::errors() const {
  // @@protoc_insertion_point(field_get:userfeedback.ExtensionErrors.errors)
  return errors_.GetNoArena();
}
inline void ExtensionErrors::set_errors(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  errors_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.ExtensionErrors.errors)
}
inline void ExtensionErrors::set_errors(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  errors_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.ExtensionErrors.errors)
}
inline void ExtensionErrors::set_errors(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  errors_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.ExtensionErrors.errors)
}
inline void ExtensionErrors::set_errors(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  errors_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.ExtensionErrors.errors)
}
inline std::string* ExtensionErrors::mutable_errors() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:userfeedback.ExtensionErrors.errors)
  return errors_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExtensionErrors::release_errors() {
  // @@protoc_insertion_point(field_release:userfeedback.ExtensionErrors.errors)
  if (!has_errors()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return errors_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExtensionErrors::set_allocated_errors(std::string* errors) {
  if (errors != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  errors_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errors);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ExtensionErrors.errors)
}

// -------------------------------------------------------------------

// ExtensionSubmit

// required .userfeedback.CommonData common_data = 1;
inline bool ExtensionSubmit::has_common_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::userfeedback::CommonData& ExtensionSubmit::common_data() const {
  const ::userfeedback::CommonData* p = common_data_;
  // @@protoc_insertion_point(field_get:userfeedback.ExtensionSubmit.common_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::userfeedback::CommonData*>(
      &::userfeedback::_CommonData_default_instance_);
}
inline ::userfeedback::CommonData* ExtensionSubmit::release_common_data() {
  // @@protoc_insertion_point(field_release:userfeedback.ExtensionSubmit.common_data)
  _has_bits_[0] &= ~0x00000004u;
  ::userfeedback::CommonData* temp = common_data_;
  common_data_ = nullptr;
  return temp;
}
inline ::userfeedback::CommonData* ExtensionSubmit::mutable_common_data() {
  _has_bits_[0] |= 0x00000004u;
  if (common_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::userfeedback::CommonData>(GetArenaNoVirtual());
    common_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.ExtensionSubmit.common_data)
  return common_data_;
}
inline void ExtensionSubmit::set_allocated_common_data(::userfeedback::CommonData* common_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_data_);
  }
  if (common_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      common_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  common_data_ = common_data;
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ExtensionSubmit.common_data)
}

// required .userfeedback.WebData web_data = 2;
inline bool ExtensionSubmit::has_web_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::userfeedback::WebData& ExtensionSubmit::web_data() const {
  const ::userfeedback::WebData* p = web_data_;
  // @@protoc_insertion_point(field_get:userfeedback.ExtensionSubmit.web_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::userfeedback::WebData*>(
      &::userfeedback::_WebData_default_instance_);
}
inline ::userfeedback::WebData* ExtensionSubmit::release_web_data() {
  // @@protoc_insertion_point(field_release:userfeedback.ExtensionSubmit.web_data)
  _has_bits_[0] &= ~0x00000008u;
  ::userfeedback::WebData* temp = web_data_;
  web_data_ = nullptr;
  return temp;
}
inline ::userfeedback::WebData* ExtensionSubmit::mutable_web_data() {
  _has_bits_[0] |= 0x00000008u;
  if (web_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::userfeedback::WebData>(GetArenaNoVirtual());
    web_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.ExtensionSubmit.web_data)
  return web_data_;
}
inline void ExtensionSubmit::set_allocated_web_data(::userfeedback::WebData* web_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(web_data_);
  }
  if (web_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      web_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, web_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  web_data_ = web_data;
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ExtensionSubmit.web_data)
}

// required int32 type_id = 3;
inline bool ExtensionSubmit::has_type_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ExtensionSubmit::clear_type_id() {
  type_id_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExtensionSubmit::type_id() const {
  // @@protoc_insertion_point(field_get:userfeedback.ExtensionSubmit.type_id)
  return type_id_;
}
inline void ExtensionSubmit::set_type_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  type_id_ = value;
  // @@protoc_insertion_point(field_set:userfeedback.ExtensionSubmit.type_id)
}

// optional .userfeedback.PostedScreenshot screenshot = 4;
inline bool ExtensionSubmit::has_screenshot() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExtensionSubmit::clear_screenshot() {
  if (screenshot_ != nullptr) screenshot_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::userfeedback::PostedScreenshot& ExtensionSubmit::screenshot() const {
  const ::userfeedback::PostedScreenshot* p = screenshot_;
  // @@protoc_insertion_point(field_get:userfeedback.ExtensionSubmit.screenshot)
  return p != nullptr ? *p : *reinterpret_cast<const ::userfeedback::PostedScreenshot*>(
      &::userfeedback::_PostedScreenshot_default_instance_);
}
inline ::userfeedback::PostedScreenshot* ExtensionSubmit::release_screenshot() {
  // @@protoc_insertion_point(field_release:userfeedback.ExtensionSubmit.screenshot)
  _has_bits_[0] &= ~0x00000010u;
  ::userfeedback::PostedScreenshot* temp = screenshot_;
  screenshot_ = nullptr;
  return temp;
}
inline ::userfeedback::PostedScreenshot* ExtensionSubmit::mutable_screenshot() {
  _has_bits_[0] |= 0x00000010u;
  if (screenshot_ == nullptr) {
    auto* p = CreateMaybeMessage<::userfeedback::PostedScreenshot>(GetArenaNoVirtual());
    screenshot_ = p;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.ExtensionSubmit.screenshot)
  return screenshot_;
}
inline void ExtensionSubmit::set_allocated_screenshot(::userfeedback::PostedScreenshot* screenshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete screenshot_;
  }
  if (screenshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      screenshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, screenshot, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  screenshot_ = screenshot;
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ExtensionSubmit.screenshot)
}

// optional .userfeedback.ChromeData chrome_data = 14;
inline bool ExtensionSubmit::has_chrome_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::userfeedback::ChromeData& ExtensionSubmit::chrome_data() const {
  const ::userfeedback::ChromeData* p = chrome_data_;
  // @@protoc_insertion_point(field_get:userfeedback.ExtensionSubmit.chrome_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::userfeedback::ChromeData*>(
      &::userfeedback::_ChromeData_default_instance_);
}
inline ::userfeedback::ChromeData* ExtensionSubmit::release_chrome_data() {
  // @@protoc_insertion_point(field_release:userfeedback.ExtensionSubmit.chrome_data)
  _has_bits_[0] &= ~0x00000020u;
  ::userfeedback::ChromeData* temp = chrome_data_;
  chrome_data_ = nullptr;
  return temp;
}
inline ::userfeedback::ChromeData* ExtensionSubmit::mutable_chrome_data() {
  _has_bits_[0] |= 0x00000020u;
  if (chrome_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::userfeedback::ChromeData>(GetArenaNoVirtual());
    chrome_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.ExtensionSubmit.chrome_data)
  return chrome_data_;
}
inline void ExtensionSubmit::set_allocated_chrome_data(::userfeedback::ChromeData* chrome_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_data_);
  }
  if (chrome_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chrome_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  chrome_data_ = chrome_data;
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ExtensionSubmit.chrome_data)
}

// repeated .userfeedback.ProductSpecificBinaryData product_specific_binary_data = 15;
inline int ExtensionSubmit::product_specific_binary_data_size() const {
  return product_specific_binary_data_.size();
}
inline ::userfeedback::ProductSpecificBinaryData* ExtensionSubmit::mutable_product_specific_binary_data(int index) {
  // @@protoc_insertion_point(field_mutable:userfeedback.ExtensionSubmit.product_specific_binary_data)
  return product_specific_binary_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userfeedback::ProductSpecificBinaryData >*
ExtensionSubmit::mutable_product_specific_binary_data() {
  // @@protoc_insertion_point(field_mutable_list:userfeedback.ExtensionSubmit.product_specific_binary_data)
  return &product_specific_binary_data_;
}
inline const ::userfeedback::ProductSpecificBinaryData& ExtensionSubmit::product_specific_binary_data(int index) const {
  // @@protoc_insertion_point(field_get:userfeedback.ExtensionSubmit.product_specific_binary_data)
  return product_specific_binary_data_.Get(index);
}
inline ::userfeedback::ProductSpecificBinaryData* ExtensionSubmit::add_product_specific_binary_data() {
  // @@protoc_insertion_point(field_add:userfeedback.ExtensionSubmit.product_specific_binary_data)
  return product_specific_binary_data_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userfeedback::ProductSpecificBinaryData >&
ExtensionSubmit::product_specific_binary_data() const {
  // @@protoc_insertion_point(field_list:userfeedback.ExtensionSubmit.product_specific_binary_data)
  return product_specific_binary_data_;
}

// optional string category_tag = 16;
inline bool ExtensionSubmit::has_category_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExtensionSubmit::clear_category_tag() {
  category_tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ExtensionSubmit::category_tag() const {
  // @@protoc_insertion_point(field_get:userfeedback.ExtensionSubmit.category_tag)
  return category_tag_.GetNoArena();
}
inline void ExtensionSubmit::set_category_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  category_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.ExtensionSubmit.category_tag)
}
inline void ExtensionSubmit::set_category_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  category_tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.ExtensionSubmit.category_tag)
}
inline void ExtensionSubmit::set_category_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  category_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.ExtensionSubmit.category_tag)
}
inline void ExtensionSubmit::set_category_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  category_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.ExtensionSubmit.category_tag)
}
inline std::string* ExtensionSubmit::mutable_category_tag() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:userfeedback.ExtensionSubmit.category_tag)
  return category_tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExtensionSubmit::release_category_tag() {
  // @@protoc_insertion_point(field_release:userfeedback.ExtensionSubmit.category_tag)
  if (!has_category_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return category_tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExtensionSubmit::set_allocated_category_tag(std::string* category_tag) {
  if (category_tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  category_tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category_tag);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ExtensionSubmit.category_tag)
}

// optional int32 product_id = 17;
inline bool ExtensionSubmit::has_product_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ExtensionSubmit::clear_product_id() {
  product_id_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExtensionSubmit::product_id() const {
  // @@protoc_insertion_point(field_get:userfeedback.ExtensionSubmit.product_id)
  return product_id_;
}
inline void ExtensionSubmit::set_product_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  product_id_ = value;
  // @@protoc_insertion_point(field_set:userfeedback.ExtensionSubmit.product_id)
}

// optional string bucket = 18;
inline bool ExtensionSubmit::has_bucket() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExtensionSubmit::clear_bucket() {
  bucket_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ExtensionSubmit::bucket() const {
  // @@protoc_insertion_point(field_get:userfeedback.ExtensionSubmit.bucket)
  return bucket_.GetNoArena();
}
inline void ExtensionSubmit::set_bucket(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  bucket_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:userfeedback.ExtensionSubmit.bucket)
}
inline void ExtensionSubmit::set_bucket(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  bucket_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:userfeedback.ExtensionSubmit.bucket)
}
inline void ExtensionSubmit::set_bucket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  bucket_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:userfeedback.ExtensionSubmit.bucket)
}
inline void ExtensionSubmit::set_bucket(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  bucket_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:userfeedback.ExtensionSubmit.bucket)
}
inline std::string* ExtensionSubmit::mutable_bucket() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:userfeedback.ExtensionSubmit.bucket)
  return bucket_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExtensionSubmit::release_bucket() {
  // @@protoc_insertion_point(field_release:userfeedback.ExtensionSubmit.bucket)
  if (!has_bucket()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return bucket_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExtensionSubmit::set_allocated_bucket(std::string* bucket) {
  if (bucket != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bucket_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bucket);
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ExtensionSubmit.bucket)
}

// -------------------------------------------------------------------

// SuggestQuery

// required .userfeedback.CommonData common_data = 1;
inline bool SuggestQuery::has_common_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::userfeedback::CommonData& SuggestQuery::common_data() const {
  const ::userfeedback::CommonData* p = common_data_;
  // @@protoc_insertion_point(field_get:userfeedback.SuggestQuery.common_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::userfeedback::CommonData*>(
      &::userfeedback::_CommonData_default_instance_);
}
inline ::userfeedback::CommonData* SuggestQuery::release_common_data() {
  // @@protoc_insertion_point(field_release:userfeedback.SuggestQuery.common_data)
  _has_bits_[0] &= ~0x00000001u;
  ::userfeedback::CommonData* temp = common_data_;
  common_data_ = nullptr;
  return temp;
}
inline ::userfeedback::CommonData* SuggestQuery::mutable_common_data() {
  _has_bits_[0] |= 0x00000001u;
  if (common_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::userfeedback::CommonData>(GetArenaNoVirtual());
    common_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.SuggestQuery.common_data)
  return common_data_;
}
inline void SuggestQuery::set_allocated_common_data(::userfeedback::CommonData* common_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_data_);
  }
  if (common_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      common_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  common_data_ = common_data;
  // @@protoc_insertion_point(field_set_allocated:userfeedback.SuggestQuery.common_data)
}

// required .userfeedback.WebData web_data = 2;
inline bool SuggestQuery::has_web_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::userfeedback::WebData& SuggestQuery::web_data() const {
  const ::userfeedback::WebData* p = web_data_;
  // @@protoc_insertion_point(field_get:userfeedback.SuggestQuery.web_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::userfeedback::WebData*>(
      &::userfeedback::_WebData_default_instance_);
}
inline ::userfeedback::WebData* SuggestQuery::release_web_data() {
  // @@protoc_insertion_point(field_release:userfeedback.SuggestQuery.web_data)
  _has_bits_[0] &= ~0x00000002u;
  ::userfeedback::WebData* temp = web_data_;
  web_data_ = nullptr;
  return temp;
}
inline ::userfeedback::WebData* SuggestQuery::mutable_web_data() {
  _has_bits_[0] |= 0x00000002u;
  if (web_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::userfeedback::WebData>(GetArenaNoVirtual());
    web_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.SuggestQuery.web_data)
  return web_data_;
}
inline void SuggestQuery::set_allocated_web_data(::userfeedback::WebData* web_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(web_data_);
  }
  if (web_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      web_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, web_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  web_data_ = web_data;
  // @@protoc_insertion_point(field_set_allocated:userfeedback.SuggestQuery.web_data)
}

// required int32 type_id = 3;
inline bool SuggestQuery::has_type_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SuggestQuery::clear_type_id() {
  type_id_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SuggestQuery::type_id() const {
  // @@protoc_insertion_point(field_get:userfeedback.SuggestQuery.type_id)
  return type_id_;
}
inline void SuggestQuery::set_type_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  type_id_ = value;
  // @@protoc_insertion_point(field_set:userfeedback.SuggestQuery.type_id)
}

// optional .userfeedback.HtmlDocument html_document_structure = 4;
inline bool SuggestQuery::has_html_document_structure() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::userfeedback::HtmlDocument& SuggestQuery::html_document_structure() const {
  const ::userfeedback::HtmlDocument* p = html_document_structure_;
  // @@protoc_insertion_point(field_get:userfeedback.SuggestQuery.html_document_structure)
  return p != nullptr ? *p : *reinterpret_cast<const ::userfeedback::HtmlDocument*>(
      &::userfeedback::_HtmlDocument_default_instance_);
}
inline ::userfeedback::HtmlDocument* SuggestQuery::release_html_document_structure() {
  // @@protoc_insertion_point(field_release:userfeedback.SuggestQuery.html_document_structure)
  _has_bits_[0] &= ~0x00000004u;
  ::userfeedback::HtmlDocument* temp = html_document_structure_;
  html_document_structure_ = nullptr;
  return temp;
}
inline ::userfeedback::HtmlDocument* SuggestQuery::mutable_html_document_structure() {
  _has_bits_[0] |= 0x00000004u;
  if (html_document_structure_ == nullptr) {
    auto* p = CreateMaybeMessage<::userfeedback::HtmlDocument>(GetArenaNoVirtual());
    html_document_structure_ = p;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.SuggestQuery.html_document_structure)
  return html_document_structure_;
}
inline void SuggestQuery::set_allocated_html_document_structure(::userfeedback::HtmlDocument* html_document_structure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(html_document_structure_);
  }
  if (html_document_structure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      html_document_structure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, html_document_structure, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  html_document_structure_ = html_document_structure;
  // @@protoc_insertion_point(field_set_allocated:userfeedback.SuggestQuery.html_document_structure)
}

// optional .userfeedback.ChromeData chrome_data = 5;
inline bool SuggestQuery::has_chrome_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::userfeedback::ChromeData& SuggestQuery::chrome_data() const {
  const ::userfeedback::ChromeData* p = chrome_data_;
  // @@protoc_insertion_point(field_get:userfeedback.SuggestQuery.chrome_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::userfeedback::ChromeData*>(
      &::userfeedback::_ChromeData_default_instance_);
}
inline ::userfeedback::ChromeData* SuggestQuery::release_chrome_data() {
  // @@protoc_insertion_point(field_release:userfeedback.SuggestQuery.chrome_data)
  _has_bits_[0] &= ~0x00000008u;
  ::userfeedback::ChromeData* temp = chrome_data_;
  chrome_data_ = nullptr;
  return temp;
}
inline ::userfeedback::ChromeData* SuggestQuery::mutable_chrome_data() {
  _has_bits_[0] |= 0x00000008u;
  if (chrome_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::userfeedback::ChromeData>(GetArenaNoVirtual());
    chrome_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:userfeedback.SuggestQuery.chrome_data)
  return chrome_data_;
}
inline void SuggestQuery::set_allocated_chrome_data(::userfeedback::ChromeData* chrome_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_data_);
  }
  if (chrome_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chrome_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  chrome_data_ = chrome_data;
  // @@protoc_insertion_point(field_set_allocated:userfeedback.SuggestQuery.chrome_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace userfeedback

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_extension_2eproto

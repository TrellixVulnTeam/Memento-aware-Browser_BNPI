// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: in_memory_url_index_cache.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_in_5fmemory_5furl_5findex_5fcache_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_in_5fmemory_5furl_5findex_5fcache_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_in_5fmemory_5furl_5findex_5fcache_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_in_5fmemory_5furl_5findex_5fcache_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace in_memory_url_index {
class InMemoryURLIndexCacheItem;
class InMemoryURLIndexCacheItemDefaultTypeInternal;
extern InMemoryURLIndexCacheItemDefaultTypeInternal _InMemoryURLIndexCacheItem_default_instance_;
class InMemoryURLIndexCacheItem_CharWordMapItem;
class InMemoryURLIndexCacheItem_CharWordMapItemDefaultTypeInternal;
extern InMemoryURLIndexCacheItem_CharWordMapItemDefaultTypeInternal _InMemoryURLIndexCacheItem_CharWordMapItem_default_instance_;
class InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry;
class InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntryDefaultTypeInternal;
extern InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntryDefaultTypeInternal _InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry_default_instance_;
class InMemoryURLIndexCacheItem_HistoryInfoMapItem;
class InMemoryURLIndexCacheItem_HistoryInfoMapItemDefaultTypeInternal;
extern InMemoryURLIndexCacheItem_HistoryInfoMapItemDefaultTypeInternal _InMemoryURLIndexCacheItem_HistoryInfoMapItem_default_instance_;
class InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry;
class InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntryDefaultTypeInternal;
extern InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntryDefaultTypeInternal _InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_default_instance_;
class InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo;
class InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfoDefaultTypeInternal;
extern InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfoDefaultTypeInternal _InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo_default_instance_;
class InMemoryURLIndexCacheItem_WordIDHistoryMapItem;
class InMemoryURLIndexCacheItem_WordIDHistoryMapItemDefaultTypeInternal;
extern InMemoryURLIndexCacheItem_WordIDHistoryMapItemDefaultTypeInternal _InMemoryURLIndexCacheItem_WordIDHistoryMapItem_default_instance_;
class InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry;
class InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntryDefaultTypeInternal;
extern InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntryDefaultTypeInternal _InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry_default_instance_;
class InMemoryURLIndexCacheItem_WordListItem;
class InMemoryURLIndexCacheItem_WordListItemDefaultTypeInternal;
extern InMemoryURLIndexCacheItem_WordListItemDefaultTypeInternal _InMemoryURLIndexCacheItem_WordListItem_default_instance_;
class InMemoryURLIndexCacheItem_WordMapItem;
class InMemoryURLIndexCacheItem_WordMapItemDefaultTypeInternal;
extern InMemoryURLIndexCacheItem_WordMapItemDefaultTypeInternal _InMemoryURLIndexCacheItem_WordMapItem_default_instance_;
class InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry;
class InMemoryURLIndexCacheItem_WordMapItem_WordMapEntryDefaultTypeInternal;
extern InMemoryURLIndexCacheItem_WordMapItem_WordMapEntryDefaultTypeInternal _InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry_default_instance_;
class InMemoryURLIndexCacheItem_WordStartsMapItem;
class InMemoryURLIndexCacheItem_WordStartsMapItemDefaultTypeInternal;
extern InMemoryURLIndexCacheItem_WordStartsMapItemDefaultTypeInternal _InMemoryURLIndexCacheItem_WordStartsMapItem_default_instance_;
class InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry;
class InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntryDefaultTypeInternal;
extern InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntryDefaultTypeInternal _InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry_default_instance_;
}  // namespace in_memory_url_index
PROTOBUF_NAMESPACE_OPEN
template<> ::in_memory_url_index::InMemoryURLIndexCacheItem* Arena::CreateMaybeMessage<::in_memory_url_index::InMemoryURLIndexCacheItem>(Arena*);
template<> ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem* Arena::CreateMaybeMessage<::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem>(Arena*);
template<> ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry* Arena::CreateMaybeMessage<::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry>(Arena*);
template<> ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem* Arena::CreateMaybeMessage<::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem>(Arena*);
template<> ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry* Arena::CreateMaybeMessage<::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry>(Arena*);
template<> ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo* Arena::CreateMaybeMessage<::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo>(Arena*);
template<> ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem* Arena::CreateMaybeMessage<::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem>(Arena*);
template<> ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry* Arena::CreateMaybeMessage<::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry>(Arena*);
template<> ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem* Arena::CreateMaybeMessage<::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem>(Arena*);
template<> ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem* Arena::CreateMaybeMessage<::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem>(Arena*);
template<> ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry* Arena::CreateMaybeMessage<::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry>(Arena*);
template<> ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem* Arena::CreateMaybeMessage<::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem>(Arena*);
template<> ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry* Arena::CreateMaybeMessage<::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace in_memory_url_index {

// ===================================================================

class InMemoryURLIndexCacheItem_WordListItem :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem) */ {
 public:
  InMemoryURLIndexCacheItem_WordListItem();
  virtual ~InMemoryURLIndexCacheItem_WordListItem();

  InMemoryURLIndexCacheItem_WordListItem(const InMemoryURLIndexCacheItem_WordListItem& from);
  InMemoryURLIndexCacheItem_WordListItem(InMemoryURLIndexCacheItem_WordListItem&& from) noexcept
    : InMemoryURLIndexCacheItem_WordListItem() {
    *this = ::std::move(from);
  }

  inline InMemoryURLIndexCacheItem_WordListItem& operator=(const InMemoryURLIndexCacheItem_WordListItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline InMemoryURLIndexCacheItem_WordListItem& operator=(InMemoryURLIndexCacheItem_WordListItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const InMemoryURLIndexCacheItem_WordListItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InMemoryURLIndexCacheItem_WordListItem* internal_default_instance() {
    return reinterpret_cast<const InMemoryURLIndexCacheItem_WordListItem*>(
               &_InMemoryURLIndexCacheItem_WordListItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InMemoryURLIndexCacheItem_WordListItem& a, InMemoryURLIndexCacheItem_WordListItem& b) {
    a.Swap(&b);
  }
  inline void Swap(InMemoryURLIndexCacheItem_WordListItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InMemoryURLIndexCacheItem_WordListItem* New() const final {
    return CreateMaybeMessage<InMemoryURLIndexCacheItem_WordListItem>(nullptr);
  }

  InMemoryURLIndexCacheItem_WordListItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InMemoryURLIndexCacheItem_WordListItem>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const InMemoryURLIndexCacheItem_WordListItem& from);
  void MergeFrom(const InMemoryURLIndexCacheItem_WordListItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InMemoryURLIndexCacheItem_WordListItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordFieldNumber = 2,
    kWordCountFieldNumber = 1,
  };
  // repeated string word = 2;
  int word_size() const;
  void clear_word();
  const std::string& word(int index) const;
  std::string* mutable_word(int index);
  void set_word(int index, const std::string& value);
  void set_word(int index, std::string&& value);
  void set_word(int index, const char* value);
  void set_word(int index, const char* value, size_t size);
  std::string* add_word();
  void add_word(const std::string& value);
  void add_word(std::string&& value);
  void add_word(const char* value);
  void add_word(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& word() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_word();

  // required uint32 word_count = 1;
  bool has_word_count() const;
  void clear_word_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 word_count() const;
  void set_word_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> word_;
  ::PROTOBUF_NAMESPACE_ID::uint32 word_count_;
  friend struct ::TableStruct_in_5fmemory_5furl_5findex_5fcache_2eproto;
};
// -------------------------------------------------------------------

class InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry) */ {
 public:
  InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry();
  virtual ~InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry();

  InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry(const InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry& from);
  InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry(InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry&& from) noexcept
    : InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry() {
    *this = ::std::move(from);
  }

  inline InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry& operator=(const InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry& operator=(InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry* internal_default_instance() {
    return reinterpret_cast<const InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry*>(
               &_InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry& a, InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry* New() const final {
    return CreateMaybeMessage<InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry>(nullptr);
  }

  InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry& from);
  void MergeFrom(const InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordFieldNumber = 1,
    kWordIdFieldNumber = 2,
  };
  // required string word = 1;
  bool has_word() const;
  void clear_word();
  const std::string& word() const;
  void set_word(const std::string& value);
  void set_word(std::string&& value);
  void set_word(const char* value);
  void set_word(const char* value, size_t size);
  std::string* mutable_word();
  std::string* release_word();
  void set_allocated_word(std::string* word);

  // required int32 word_id = 2;
  bool has_word_id() const;
  void clear_word_id();
  ::PROTOBUF_NAMESPACE_ID::int32 word_id() const;
  void set_word_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr word_;
  ::PROTOBUF_NAMESPACE_ID::int32 word_id_;
  friend struct ::TableStruct_in_5fmemory_5furl_5findex_5fcache_2eproto;
};
// -------------------------------------------------------------------

class InMemoryURLIndexCacheItem_WordMapItem :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem) */ {
 public:
  InMemoryURLIndexCacheItem_WordMapItem();
  virtual ~InMemoryURLIndexCacheItem_WordMapItem();

  InMemoryURLIndexCacheItem_WordMapItem(const InMemoryURLIndexCacheItem_WordMapItem& from);
  InMemoryURLIndexCacheItem_WordMapItem(InMemoryURLIndexCacheItem_WordMapItem&& from) noexcept
    : InMemoryURLIndexCacheItem_WordMapItem() {
    *this = ::std::move(from);
  }

  inline InMemoryURLIndexCacheItem_WordMapItem& operator=(const InMemoryURLIndexCacheItem_WordMapItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline InMemoryURLIndexCacheItem_WordMapItem& operator=(InMemoryURLIndexCacheItem_WordMapItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const InMemoryURLIndexCacheItem_WordMapItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InMemoryURLIndexCacheItem_WordMapItem* internal_default_instance() {
    return reinterpret_cast<const InMemoryURLIndexCacheItem_WordMapItem*>(
               &_InMemoryURLIndexCacheItem_WordMapItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InMemoryURLIndexCacheItem_WordMapItem& a, InMemoryURLIndexCacheItem_WordMapItem& b) {
    a.Swap(&b);
  }
  inline void Swap(InMemoryURLIndexCacheItem_WordMapItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InMemoryURLIndexCacheItem_WordMapItem* New() const final {
    return CreateMaybeMessage<InMemoryURLIndexCacheItem_WordMapItem>(nullptr);
  }

  InMemoryURLIndexCacheItem_WordMapItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InMemoryURLIndexCacheItem_WordMapItem>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const InMemoryURLIndexCacheItem_WordMapItem& from);
  void MergeFrom(const InMemoryURLIndexCacheItem_WordMapItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InMemoryURLIndexCacheItem_WordMapItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry WordMapEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kWordMapEntryFieldNumber = 2,
    kItemCountFieldNumber = 1,
  };
  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry word_map_entry = 2;
  int word_map_entry_size() const;
  void clear_word_map_entry();
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry* mutable_word_map_entry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry >*
      mutable_word_map_entry();
  const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry& word_map_entry(int index) const;
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry* add_word_map_entry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry >&
      word_map_entry() const;

  // required uint32 item_count = 1;
  bool has_item_count() const;
  void clear_item_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 item_count() const;
  void set_item_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry > word_map_entry_;
  ::PROTOBUF_NAMESPACE_ID::uint32 item_count_;
  friend struct ::TableStruct_in_5fmemory_5furl_5findex_5fcache_2eproto;
};
// -------------------------------------------------------------------

class InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry) */ {
 public:
  InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry();
  virtual ~InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry();

  InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry(const InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry& from);
  InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry(InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry&& from) noexcept
    : InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry() {
    *this = ::std::move(from);
  }

  inline InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry& operator=(const InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry& operator=(InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry* internal_default_instance() {
    return reinterpret_cast<const InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry*>(
               &_InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry& a, InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry* New() const final {
    return CreateMaybeMessage<InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry>(nullptr);
  }

  InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry& from);
  void MergeFrom(const InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWordIdFieldNumber = 3,
    kItemCountFieldNumber = 1,
    kChar16FieldNumber = 2,
  };
  // repeated int32 word_id = 3 [packed = true];
  int word_id_size() const;
  void clear_word_id();
  ::PROTOBUF_NAMESPACE_ID::int32 word_id(int index) const;
  void set_word_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_word_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      word_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_word_id();

  // required uint32 item_count = 1;
  bool has_item_count() const;
  void clear_item_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 item_count() const;
  void set_item_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required int32 char_16 = 2;
  bool has_char_16() const;
  void clear_char_16();
  ::PROTOBUF_NAMESPACE_ID::int32 char_16() const;
  void set_char_16(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > word_id_;
  mutable std::atomic<int> _word_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 item_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 char_16_;
  friend struct ::TableStruct_in_5fmemory_5furl_5findex_5fcache_2eproto;
};
// -------------------------------------------------------------------

class InMemoryURLIndexCacheItem_CharWordMapItem :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem) */ {
 public:
  InMemoryURLIndexCacheItem_CharWordMapItem();
  virtual ~InMemoryURLIndexCacheItem_CharWordMapItem();

  InMemoryURLIndexCacheItem_CharWordMapItem(const InMemoryURLIndexCacheItem_CharWordMapItem& from);
  InMemoryURLIndexCacheItem_CharWordMapItem(InMemoryURLIndexCacheItem_CharWordMapItem&& from) noexcept
    : InMemoryURLIndexCacheItem_CharWordMapItem() {
    *this = ::std::move(from);
  }

  inline InMemoryURLIndexCacheItem_CharWordMapItem& operator=(const InMemoryURLIndexCacheItem_CharWordMapItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline InMemoryURLIndexCacheItem_CharWordMapItem& operator=(InMemoryURLIndexCacheItem_CharWordMapItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const InMemoryURLIndexCacheItem_CharWordMapItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InMemoryURLIndexCacheItem_CharWordMapItem* internal_default_instance() {
    return reinterpret_cast<const InMemoryURLIndexCacheItem_CharWordMapItem*>(
               &_InMemoryURLIndexCacheItem_CharWordMapItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InMemoryURLIndexCacheItem_CharWordMapItem& a, InMemoryURLIndexCacheItem_CharWordMapItem& b) {
    a.Swap(&b);
  }
  inline void Swap(InMemoryURLIndexCacheItem_CharWordMapItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InMemoryURLIndexCacheItem_CharWordMapItem* New() const final {
    return CreateMaybeMessage<InMemoryURLIndexCacheItem_CharWordMapItem>(nullptr);
  }

  InMemoryURLIndexCacheItem_CharWordMapItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InMemoryURLIndexCacheItem_CharWordMapItem>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const InMemoryURLIndexCacheItem_CharWordMapItem& from);
  void MergeFrom(const InMemoryURLIndexCacheItem_CharWordMapItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InMemoryURLIndexCacheItem_CharWordMapItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry CharWordMapEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kCharWordMapEntryFieldNumber = 2,
    kItemCountFieldNumber = 1,
  };
  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry char_word_map_entry = 2;
  int char_word_map_entry_size() const;
  void clear_char_word_map_entry();
  ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry* mutable_char_word_map_entry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry >*
      mutable_char_word_map_entry();
  const ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry& char_word_map_entry(int index) const;
  ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry* add_char_word_map_entry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry >&
      char_word_map_entry() const;

  // required uint32 item_count = 1;
  bool has_item_count() const;
  void clear_item_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 item_count() const;
  void set_item_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry > char_word_map_entry_;
  ::PROTOBUF_NAMESPACE_ID::uint32 item_count_;
  friend struct ::TableStruct_in_5fmemory_5furl_5findex_5fcache_2eproto;
};
// -------------------------------------------------------------------

class InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry) */ {
 public:
  InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry();
  virtual ~InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry();

  InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry(const InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry& from);
  InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry(InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry&& from) noexcept
    : InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry() {
    *this = ::std::move(from);
  }

  inline InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry& operator=(const InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry& operator=(InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry* internal_default_instance() {
    return reinterpret_cast<const InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry*>(
               &_InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry& a, InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry* New() const final {
    return CreateMaybeMessage<InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry>(nullptr);
  }

  InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry& from);
  void MergeFrom(const InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHistoryIdFieldNumber = 3,
    kItemCountFieldNumber = 1,
    kWordIdFieldNumber = 2,
  };
  // repeated int64 history_id = 3 [packed = true];
  int history_id_size() const;
  void clear_history_id();
  ::PROTOBUF_NAMESPACE_ID::int64 history_id(int index) const;
  void set_history_id(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_history_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      history_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_history_id();

  // required uint32 item_count = 1;
  bool has_item_count() const;
  void clear_item_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 item_count() const;
  void set_item_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required int32 word_id = 2;
  bool has_word_id() const;
  void clear_word_id();
  ::PROTOBUF_NAMESPACE_ID::int32 word_id() const;
  void set_word_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > history_id_;
  mutable std::atomic<int> _history_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 item_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 word_id_;
  friend struct ::TableStruct_in_5fmemory_5furl_5findex_5fcache_2eproto;
};
// -------------------------------------------------------------------

class InMemoryURLIndexCacheItem_WordIDHistoryMapItem :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem) */ {
 public:
  InMemoryURLIndexCacheItem_WordIDHistoryMapItem();
  virtual ~InMemoryURLIndexCacheItem_WordIDHistoryMapItem();

  InMemoryURLIndexCacheItem_WordIDHistoryMapItem(const InMemoryURLIndexCacheItem_WordIDHistoryMapItem& from);
  InMemoryURLIndexCacheItem_WordIDHistoryMapItem(InMemoryURLIndexCacheItem_WordIDHistoryMapItem&& from) noexcept
    : InMemoryURLIndexCacheItem_WordIDHistoryMapItem() {
    *this = ::std::move(from);
  }

  inline InMemoryURLIndexCacheItem_WordIDHistoryMapItem& operator=(const InMemoryURLIndexCacheItem_WordIDHistoryMapItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline InMemoryURLIndexCacheItem_WordIDHistoryMapItem& operator=(InMemoryURLIndexCacheItem_WordIDHistoryMapItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const InMemoryURLIndexCacheItem_WordIDHistoryMapItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InMemoryURLIndexCacheItem_WordIDHistoryMapItem* internal_default_instance() {
    return reinterpret_cast<const InMemoryURLIndexCacheItem_WordIDHistoryMapItem*>(
               &_InMemoryURLIndexCacheItem_WordIDHistoryMapItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(InMemoryURLIndexCacheItem_WordIDHistoryMapItem& a, InMemoryURLIndexCacheItem_WordIDHistoryMapItem& b) {
    a.Swap(&b);
  }
  inline void Swap(InMemoryURLIndexCacheItem_WordIDHistoryMapItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InMemoryURLIndexCacheItem_WordIDHistoryMapItem* New() const final {
    return CreateMaybeMessage<InMemoryURLIndexCacheItem_WordIDHistoryMapItem>(nullptr);
  }

  InMemoryURLIndexCacheItem_WordIDHistoryMapItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InMemoryURLIndexCacheItem_WordIDHistoryMapItem>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const InMemoryURLIndexCacheItem_WordIDHistoryMapItem& from);
  void MergeFrom(const InMemoryURLIndexCacheItem_WordIDHistoryMapItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InMemoryURLIndexCacheItem_WordIDHistoryMapItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry WordIDHistoryMapEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kWordIdHistoryMapEntryFieldNumber = 2,
    kItemCountFieldNumber = 1,
  };
  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry word_id_history_map_entry = 2;
  int word_id_history_map_entry_size() const;
  void clear_word_id_history_map_entry();
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry* mutable_word_id_history_map_entry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry >*
      mutable_word_id_history_map_entry();
  const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry& word_id_history_map_entry(int index) const;
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry* add_word_id_history_map_entry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry >&
      word_id_history_map_entry() const;

  // required uint32 item_count = 1;
  bool has_item_count() const;
  void clear_item_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 item_count() const;
  void set_item_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry > word_id_history_map_entry_;
  ::PROTOBUF_NAMESPACE_ID::uint32 item_count_;
  friend struct ::TableStruct_in_5fmemory_5furl_5findex_5fcache_2eproto;
};
// -------------------------------------------------------------------

class InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo) */ {
 public:
  InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo();
  virtual ~InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo();

  InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo(const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo& from);
  InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo(InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo&& from) noexcept
    : InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo() {
    *this = ::std::move(from);
  }

  inline InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo& operator=(const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo& operator=(InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo* internal_default_instance() {
    return reinterpret_cast<const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo*>(
               &_InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo& a, InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo* New() const final {
    return CreateMaybeMessage<InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo>(nullptr);
  }

  InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo& from);
  void MergeFrom(const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVisitTimeFieldNumber = 1,
    kTransitionTypeFieldNumber = 2,
  };
  // required int64 visit_time = 1;
  bool has_visit_time() const;
  void clear_visit_time();
  ::PROTOBUF_NAMESPACE_ID::int64 visit_time() const;
  void set_visit_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required uint64 transition_type = 2;
  bool has_transition_type() const;
  void clear_transition_type();
  ::PROTOBUF_NAMESPACE_ID::uint64 transition_type() const;
  void set_transition_type(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 visit_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 transition_type_;
  friend struct ::TableStruct_in_5fmemory_5furl_5findex_5fcache_2eproto;
};
// -------------------------------------------------------------------

class InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry) */ {
 public:
  InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry();
  virtual ~InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry();

  InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry(const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry& from);
  InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry(InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry&& from) noexcept
    : InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry() {
    *this = ::std::move(from);
  }

  inline InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry& operator=(const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry& operator=(InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry* internal_default_instance() {
    return reinterpret_cast<const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry*>(
               &_InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry& a, InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry* New() const final {
    return CreateMaybeMessage<InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry>(nullptr);
  }

  InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry& from);
  void MergeFrom(const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo VisitInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kVisitsFieldNumber = 7,
    kUrlFieldNumber = 5,
    kTitleFieldNumber = 6,
    kHistoryIdFieldNumber = 1,
    kVisitCountFieldNumber = 2,
    kTypedCountFieldNumber = 3,
    kLastVisitFieldNumber = 4,
  };
  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo visits = 7;
  int visits_size() const;
  void clear_visits();
  ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo* mutable_visits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo >*
      mutable_visits();
  const ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo& visits(int index) const;
  ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo* add_visits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo >&
      visits() const;

  // required string url = 5;
  bool has_url() const;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // optional string title = 6;
  bool has_title() const;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);

  // required int64 history_id = 1;
  bool has_history_id() const;
  void clear_history_id();
  ::PROTOBUF_NAMESPACE_ID::int64 history_id() const;
  void set_history_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // required int32 visit_count = 2;
  bool has_visit_count() const;
  void clear_visit_count();
  ::PROTOBUF_NAMESPACE_ID::int32 visit_count() const;
  void set_visit_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 typed_count = 3;
  bool has_typed_count() const;
  void clear_typed_count();
  ::PROTOBUF_NAMESPACE_ID::int32 typed_count() const;
  void set_typed_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int64 last_visit = 4;
  bool has_last_visit() const;
  void clear_last_visit();
  ::PROTOBUF_NAMESPACE_ID::int64 last_visit() const;
  void set_last_visit(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo > visits_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::int64 history_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 visit_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 typed_count_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_visit_;
  friend struct ::TableStruct_in_5fmemory_5furl_5findex_5fcache_2eproto;
};
// -------------------------------------------------------------------

class InMemoryURLIndexCacheItem_HistoryInfoMapItem :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem) */ {
 public:
  InMemoryURLIndexCacheItem_HistoryInfoMapItem();
  virtual ~InMemoryURLIndexCacheItem_HistoryInfoMapItem();

  InMemoryURLIndexCacheItem_HistoryInfoMapItem(const InMemoryURLIndexCacheItem_HistoryInfoMapItem& from);
  InMemoryURLIndexCacheItem_HistoryInfoMapItem(InMemoryURLIndexCacheItem_HistoryInfoMapItem&& from) noexcept
    : InMemoryURLIndexCacheItem_HistoryInfoMapItem() {
    *this = ::std::move(from);
  }

  inline InMemoryURLIndexCacheItem_HistoryInfoMapItem& operator=(const InMemoryURLIndexCacheItem_HistoryInfoMapItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline InMemoryURLIndexCacheItem_HistoryInfoMapItem& operator=(InMemoryURLIndexCacheItem_HistoryInfoMapItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const InMemoryURLIndexCacheItem_HistoryInfoMapItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InMemoryURLIndexCacheItem_HistoryInfoMapItem* internal_default_instance() {
    return reinterpret_cast<const InMemoryURLIndexCacheItem_HistoryInfoMapItem*>(
               &_InMemoryURLIndexCacheItem_HistoryInfoMapItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(InMemoryURLIndexCacheItem_HistoryInfoMapItem& a, InMemoryURLIndexCacheItem_HistoryInfoMapItem& b) {
    a.Swap(&b);
  }
  inline void Swap(InMemoryURLIndexCacheItem_HistoryInfoMapItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InMemoryURLIndexCacheItem_HistoryInfoMapItem* New() const final {
    return CreateMaybeMessage<InMemoryURLIndexCacheItem_HistoryInfoMapItem>(nullptr);
  }

  InMemoryURLIndexCacheItem_HistoryInfoMapItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InMemoryURLIndexCacheItem_HistoryInfoMapItem>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const InMemoryURLIndexCacheItem_HistoryInfoMapItem& from);
  void MergeFrom(const InMemoryURLIndexCacheItem_HistoryInfoMapItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InMemoryURLIndexCacheItem_HistoryInfoMapItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry HistoryInfoMapEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kHistoryInfoMapEntryFieldNumber = 2,
    kItemCountFieldNumber = 1,
  };
  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry history_info_map_entry = 2;
  int history_info_map_entry_size() const;
  void clear_history_info_map_entry();
  ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry* mutable_history_info_map_entry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry >*
      mutable_history_info_map_entry();
  const ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry& history_info_map_entry(int index) const;
  ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry* add_history_info_map_entry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry >&
      history_info_map_entry() const;

  // required uint32 item_count = 1;
  bool has_item_count() const;
  void clear_item_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 item_count() const;
  void set_item_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry > history_info_map_entry_;
  ::PROTOBUF_NAMESPACE_ID::uint32 item_count_;
  friend struct ::TableStruct_in_5fmemory_5furl_5findex_5fcache_2eproto;
};
// -------------------------------------------------------------------

class InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry) */ {
 public:
  InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry();
  virtual ~InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry();

  InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry(const InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry& from);
  InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry(InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry&& from) noexcept
    : InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry() {
    *this = ::std::move(from);
  }

  inline InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry& operator=(const InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry& operator=(InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry* internal_default_instance() {
    return reinterpret_cast<const InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry*>(
               &_InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry& a, InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry* New() const final {
    return CreateMaybeMessage<InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry>(nullptr);
  }

  InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry& from);
  void MergeFrom(const InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlWordStartsFieldNumber = 2,
    kTitleWordStartsFieldNumber = 3,
    kHistoryIdFieldNumber = 1,
  };
  // repeated int32 url_word_starts = 2 [packed = true];
  int url_word_starts_size() const;
  void clear_url_word_starts();
  ::PROTOBUF_NAMESPACE_ID::int32 url_word_starts(int index) const;
  void set_url_word_starts(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_url_word_starts(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      url_word_starts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_url_word_starts();

  // repeated int32 title_word_starts = 3 [packed = true];
  int title_word_starts_size() const;
  void clear_title_word_starts();
  ::PROTOBUF_NAMESPACE_ID::int32 title_word_starts(int index) const;
  void set_title_word_starts(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_title_word_starts(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      title_word_starts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_title_word_starts();

  // required int64 history_id = 1;
  bool has_history_id() const;
  void clear_history_id();
  ::PROTOBUF_NAMESPACE_ID::int64 history_id() const;
  void set_history_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > url_word_starts_;
  mutable std::atomic<int> _url_word_starts_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > title_word_starts_;
  mutable std::atomic<int> _title_word_starts_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 history_id_;
  friend struct ::TableStruct_in_5fmemory_5furl_5findex_5fcache_2eproto;
};
// -------------------------------------------------------------------

class InMemoryURLIndexCacheItem_WordStartsMapItem :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem) */ {
 public:
  InMemoryURLIndexCacheItem_WordStartsMapItem();
  virtual ~InMemoryURLIndexCacheItem_WordStartsMapItem();

  InMemoryURLIndexCacheItem_WordStartsMapItem(const InMemoryURLIndexCacheItem_WordStartsMapItem& from);
  InMemoryURLIndexCacheItem_WordStartsMapItem(InMemoryURLIndexCacheItem_WordStartsMapItem&& from) noexcept
    : InMemoryURLIndexCacheItem_WordStartsMapItem() {
    *this = ::std::move(from);
  }

  inline InMemoryURLIndexCacheItem_WordStartsMapItem& operator=(const InMemoryURLIndexCacheItem_WordStartsMapItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline InMemoryURLIndexCacheItem_WordStartsMapItem& operator=(InMemoryURLIndexCacheItem_WordStartsMapItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const InMemoryURLIndexCacheItem_WordStartsMapItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InMemoryURLIndexCacheItem_WordStartsMapItem* internal_default_instance() {
    return reinterpret_cast<const InMemoryURLIndexCacheItem_WordStartsMapItem*>(
               &_InMemoryURLIndexCacheItem_WordStartsMapItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(InMemoryURLIndexCacheItem_WordStartsMapItem& a, InMemoryURLIndexCacheItem_WordStartsMapItem& b) {
    a.Swap(&b);
  }
  inline void Swap(InMemoryURLIndexCacheItem_WordStartsMapItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InMemoryURLIndexCacheItem_WordStartsMapItem* New() const final {
    return CreateMaybeMessage<InMemoryURLIndexCacheItem_WordStartsMapItem>(nullptr);
  }

  InMemoryURLIndexCacheItem_WordStartsMapItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InMemoryURLIndexCacheItem_WordStartsMapItem>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const InMemoryURLIndexCacheItem_WordStartsMapItem& from);
  void MergeFrom(const InMemoryURLIndexCacheItem_WordStartsMapItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InMemoryURLIndexCacheItem_WordStartsMapItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry WordStartsMapEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kWordStartsMapEntryFieldNumber = 2,
    kItemCountFieldNumber = 1,
  };
  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry word_starts_map_entry = 2;
  int word_starts_map_entry_size() const;
  void clear_word_starts_map_entry();
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry* mutable_word_starts_map_entry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry >*
      mutable_word_starts_map_entry();
  const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry& word_starts_map_entry(int index) const;
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry* add_word_starts_map_entry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry >&
      word_starts_map_entry() const;

  // required uint32 item_count = 1;
  bool has_item_count() const;
  void clear_item_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 item_count() const;
  void set_item_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry > word_starts_map_entry_;
  ::PROTOBUF_NAMESPACE_ID::uint32 item_count_;
  friend struct ::TableStruct_in_5fmemory_5furl_5findex_5fcache_2eproto;
};
// -------------------------------------------------------------------

class InMemoryURLIndexCacheItem :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:in_memory_url_index.InMemoryURLIndexCacheItem) */ {
 public:
  InMemoryURLIndexCacheItem();
  virtual ~InMemoryURLIndexCacheItem();

  InMemoryURLIndexCacheItem(const InMemoryURLIndexCacheItem& from);
  InMemoryURLIndexCacheItem(InMemoryURLIndexCacheItem&& from) noexcept
    : InMemoryURLIndexCacheItem() {
    *this = ::std::move(from);
  }

  inline InMemoryURLIndexCacheItem& operator=(const InMemoryURLIndexCacheItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline InMemoryURLIndexCacheItem& operator=(InMemoryURLIndexCacheItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const InMemoryURLIndexCacheItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InMemoryURLIndexCacheItem* internal_default_instance() {
    return reinterpret_cast<const InMemoryURLIndexCacheItem*>(
               &_InMemoryURLIndexCacheItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(InMemoryURLIndexCacheItem& a, InMemoryURLIndexCacheItem& b) {
    a.Swap(&b);
  }
  inline void Swap(InMemoryURLIndexCacheItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InMemoryURLIndexCacheItem* New() const final {
    return CreateMaybeMessage<InMemoryURLIndexCacheItem>(nullptr);
  }

  InMemoryURLIndexCacheItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InMemoryURLIndexCacheItem>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const InMemoryURLIndexCacheItem& from);
  void MergeFrom(const InMemoryURLIndexCacheItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InMemoryURLIndexCacheItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "in_memory_url_index.InMemoryURLIndexCacheItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef InMemoryURLIndexCacheItem_WordListItem WordListItem;
  typedef InMemoryURLIndexCacheItem_WordMapItem WordMapItem;
  typedef InMemoryURLIndexCacheItem_CharWordMapItem CharWordMapItem;
  typedef InMemoryURLIndexCacheItem_WordIDHistoryMapItem WordIDHistoryMapItem;
  typedef InMemoryURLIndexCacheItem_HistoryInfoMapItem HistoryInfoMapItem;
  typedef InMemoryURLIndexCacheItem_WordStartsMapItem WordStartsMapItem;

  // accessors -------------------------------------------------------

  enum : int {
    kWordListFieldNumber = 4,
    kWordMapFieldNumber = 5,
    kCharWordMapFieldNumber = 6,
    kWordIdHistoryMapFieldNumber = 7,
    kHistoryInfoMapFieldNumber = 8,
    kWordStartsMapFieldNumber = 9,
    kLastRebuildTimestampFieldNumber = 1,
    kVersionFieldNumber = 2,
    kHistoryItemCountFieldNumber = 3,
  };
  // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem word_list = 4;
  bool has_word_list() const;
  void clear_word_list();
  const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem& word_list() const;
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem* release_word_list();
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem* mutable_word_list();
  void set_allocated_word_list(::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem* word_list);

  // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem word_map = 5;
  bool has_word_map() const;
  void clear_word_map();
  const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem& word_map() const;
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem* release_word_map();
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem* mutable_word_map();
  void set_allocated_word_map(::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem* word_map);

  // optional .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem char_word_map = 6;
  bool has_char_word_map() const;
  void clear_char_word_map();
  const ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem& char_word_map() const;
  ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem* release_char_word_map();
  ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem* mutable_char_word_map();
  void set_allocated_char_word_map(::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem* char_word_map);

  // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem word_id_history_map = 7;
  bool has_word_id_history_map() const;
  void clear_word_id_history_map();
  const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem& word_id_history_map() const;
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem* release_word_id_history_map();
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem* mutable_word_id_history_map();
  void set_allocated_word_id_history_map(::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem* word_id_history_map);

  // optional .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem history_info_map = 8;
  bool has_history_info_map() const;
  void clear_history_info_map();
  const ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem& history_info_map() const;
  ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem* release_history_info_map();
  ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem* mutable_history_info_map();
  void set_allocated_history_info_map(::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem* history_info_map);

  // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem word_starts_map = 9;
  bool has_word_starts_map() const;
  void clear_word_starts_map();
  const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem& word_starts_map() const;
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem* release_word_starts_map();
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem* mutable_word_starts_map();
  void set_allocated_word_starts_map(::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem* word_starts_map);

  // required int64 last_rebuild_timestamp = 1;
  bool has_last_rebuild_timestamp() const;
  void clear_last_rebuild_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 last_rebuild_timestamp() const;
  void set_last_rebuild_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 version = 2;
  bool has_version() const;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 history_item_count = 3;
  bool has_history_item_count() const;
  void clear_history_item_count();
  ::PROTOBUF_NAMESPACE_ID::int32 history_item_count() const;
  void set_history_item_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:in_memory_url_index.InMemoryURLIndexCacheItem)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem* word_list_;
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem* word_map_;
  ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem* char_word_map_;
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem* word_id_history_map_;
  ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem* history_info_map_;
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem* word_starts_map_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_rebuild_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  ::PROTOBUF_NAMESPACE_ID::int32 history_item_count_;
  friend struct ::TableStruct_in_5fmemory_5furl_5findex_5fcache_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InMemoryURLIndexCacheItem_WordListItem

// required uint32 word_count = 1;
inline bool InMemoryURLIndexCacheItem_WordListItem::has_word_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InMemoryURLIndexCacheItem_WordListItem::clear_word_count() {
  word_count_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InMemoryURLIndexCacheItem_WordListItem::word_count() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word_count)
  return word_count_;
}
inline void InMemoryURLIndexCacheItem_WordListItem::set_word_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  word_count_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word_count)
}

// repeated string word = 2;
inline int InMemoryURLIndexCacheItem_WordListItem::word_size() const {
  return word_.size();
}
inline void InMemoryURLIndexCacheItem_WordListItem::clear_word() {
  word_.Clear();
}
inline const std::string& InMemoryURLIndexCacheItem_WordListItem::word(int index) const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
  return word_.Get(index);
}
inline std::string* InMemoryURLIndexCacheItem_WordListItem::mutable_word(int index) {
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
  return word_.Mutable(index);
}
inline void InMemoryURLIndexCacheItem_WordListItem::set_word(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
  word_.Mutable(index)->assign(value);
}
inline void InMemoryURLIndexCacheItem_WordListItem::set_word(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
  word_.Mutable(index)->assign(std::move(value));
}
inline void InMemoryURLIndexCacheItem_WordListItem::set_word(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  word_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
}
inline void InMemoryURLIndexCacheItem_WordListItem::set_word(int index, const char* value, size_t size) {
  word_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
}
inline std::string* InMemoryURLIndexCacheItem_WordListItem::add_word() {
  // @@protoc_insertion_point(field_add_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
  return word_.Add();
}
inline void InMemoryURLIndexCacheItem_WordListItem::add_word(const std::string& value) {
  word_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
}
inline void InMemoryURLIndexCacheItem_WordListItem::add_word(std::string&& value) {
  word_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
}
inline void InMemoryURLIndexCacheItem_WordListItem::add_word(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  word_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
}
inline void InMemoryURLIndexCacheItem_WordListItem::add_word(const char* value, size_t size) {
  word_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InMemoryURLIndexCacheItem_WordListItem::word() const {
  // @@protoc_insertion_point(field_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
  return word_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InMemoryURLIndexCacheItem_WordListItem::mutable_word() {
  // @@protoc_insertion_point(field_mutable_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem.word)
  return &word_;
}

// -------------------------------------------------------------------

// InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry

// required string word = 1;
inline bool InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::has_word() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::clear_word() {
  word_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::word() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry.word)
  return word_.GetNoArena();
}
inline void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::set_word(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  word_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry.word)
}
inline void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::set_word(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  word_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry.word)
}
inline void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::set_word(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  word_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry.word)
}
inline void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::set_word(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  word_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry.word)
}
inline std::string* InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::mutable_word() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry.word)
  return word_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::release_word() {
  // @@protoc_insertion_point(field_release:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry.word)
  if (!has_word()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return word_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::set_allocated_word(std::string* word) {
  if (word != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  word_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), word);
  // @@protoc_insertion_point(field_set_allocated:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry.word)
}

// required int32 word_id = 2;
inline bool InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::has_word_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::clear_word_id() {
  word_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::word_id() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry.word_id)
  return word_id_;
}
inline void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::set_word_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  word_id_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry.word_id)
}

// -------------------------------------------------------------------

// InMemoryURLIndexCacheItem_WordMapItem

// required uint32 item_count = 1;
inline bool InMemoryURLIndexCacheItem_WordMapItem::has_item_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InMemoryURLIndexCacheItem_WordMapItem::clear_item_count() {
  item_count_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InMemoryURLIndexCacheItem_WordMapItem::item_count() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.item_count)
  return item_count_;
}
inline void InMemoryURLIndexCacheItem_WordMapItem::set_item_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  item_count_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.item_count)
}

// repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry word_map_entry = 2;
inline int InMemoryURLIndexCacheItem_WordMapItem::word_map_entry_size() const {
  return word_map_entry_.size();
}
inline void InMemoryURLIndexCacheItem_WordMapItem::clear_word_map_entry() {
  word_map_entry_.Clear();
}
inline ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry* InMemoryURLIndexCacheItem_WordMapItem::mutable_word_map_entry(int index) {
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.word_map_entry)
  return word_map_entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry >*
InMemoryURLIndexCacheItem_WordMapItem::mutable_word_map_entry() {
  // @@protoc_insertion_point(field_mutable_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.word_map_entry)
  return &word_map_entry_;
}
inline const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry& InMemoryURLIndexCacheItem_WordMapItem::word_map_entry(int index) const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.word_map_entry)
  return word_map_entry_.Get(index);
}
inline ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry* InMemoryURLIndexCacheItem_WordMapItem::add_word_map_entry() {
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.word_map_entry)
  return word_map_entry_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry >&
InMemoryURLIndexCacheItem_WordMapItem::word_map_entry() const {
  // @@protoc_insertion_point(field_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.word_map_entry)
  return word_map_entry_;
}

// -------------------------------------------------------------------

// InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry

// required uint32 item_count = 1;
inline bool InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::has_item_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::clear_item_count() {
  item_count_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::item_count() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry.item_count)
  return item_count_;
}
inline void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::set_item_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  item_count_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry.item_count)
}

// required int32 char_16 = 2;
inline bool InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::has_char_16() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::clear_char_16() {
  char_16_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::char_16() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry.char_16)
  return char_16_;
}
inline void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::set_char_16(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  char_16_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry.char_16)
}

// repeated int32 word_id = 3 [packed = true];
inline int InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::word_id_size() const {
  return word_id_.size();
}
inline void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::clear_word_id() {
  word_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::word_id(int index) const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry.word_id)
  return word_id_.Get(index);
}
inline void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::set_word_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  word_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry.word_id)
}
inline void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::add_word_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  word_id_.Add(value);
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry.word_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::word_id() const {
  // @@protoc_insertion_point(field_list:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry.word_id)
  return word_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::mutable_word_id() {
  // @@protoc_insertion_point(field_mutable_list:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry.word_id)
  return &word_id_;
}

// -------------------------------------------------------------------

// InMemoryURLIndexCacheItem_CharWordMapItem

// required uint32 item_count = 1;
inline bool InMemoryURLIndexCacheItem_CharWordMapItem::has_item_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InMemoryURLIndexCacheItem_CharWordMapItem::clear_item_count() {
  item_count_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InMemoryURLIndexCacheItem_CharWordMapItem::item_count() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.item_count)
  return item_count_;
}
inline void InMemoryURLIndexCacheItem_CharWordMapItem::set_item_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  item_count_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.item_count)
}

// repeated .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry char_word_map_entry = 2;
inline int InMemoryURLIndexCacheItem_CharWordMapItem::char_word_map_entry_size() const {
  return char_word_map_entry_.size();
}
inline void InMemoryURLIndexCacheItem_CharWordMapItem::clear_char_word_map_entry() {
  char_word_map_entry_.Clear();
}
inline ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry* InMemoryURLIndexCacheItem_CharWordMapItem::mutable_char_word_map_entry(int index) {
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.char_word_map_entry)
  return char_word_map_entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry >*
InMemoryURLIndexCacheItem_CharWordMapItem::mutable_char_word_map_entry() {
  // @@protoc_insertion_point(field_mutable_list:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.char_word_map_entry)
  return &char_word_map_entry_;
}
inline const ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry& InMemoryURLIndexCacheItem_CharWordMapItem::char_word_map_entry(int index) const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.char_word_map_entry)
  return char_word_map_entry_.Get(index);
}
inline ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry* InMemoryURLIndexCacheItem_CharWordMapItem::add_char_word_map_entry() {
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.char_word_map_entry)
  return char_word_map_entry_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry >&
InMemoryURLIndexCacheItem_CharWordMapItem::char_word_map_entry() const {
  // @@protoc_insertion_point(field_list:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.char_word_map_entry)
  return char_word_map_entry_;
}

// -------------------------------------------------------------------

// InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry

// required uint32 item_count = 1;
inline bool InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::has_item_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::clear_item_count() {
  item_count_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::item_count() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry.item_count)
  return item_count_;
}
inline void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::set_item_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  item_count_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry.item_count)
}

// required int32 word_id = 2;
inline bool InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::has_word_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::clear_word_id() {
  word_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::word_id() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry.word_id)
  return word_id_;
}
inline void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::set_word_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  word_id_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry.word_id)
}

// repeated int64 history_id = 3 [packed = true];
inline int InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::history_id_size() const {
  return history_id_.size();
}
inline void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::clear_history_id() {
  history_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::history_id(int index) const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry.history_id)
  return history_id_.Get(index);
}
inline void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::set_history_id(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  history_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry.history_id)
}
inline void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::add_history_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  history_id_.Add(value);
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry.history_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::history_id() const {
  // @@protoc_insertion_point(field_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry.history_id)
  return history_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::mutable_history_id() {
  // @@protoc_insertion_point(field_mutable_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry.history_id)
  return &history_id_;
}

// -------------------------------------------------------------------

// InMemoryURLIndexCacheItem_WordIDHistoryMapItem

// required uint32 item_count = 1;
inline bool InMemoryURLIndexCacheItem_WordIDHistoryMapItem::has_item_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::clear_item_count() {
  item_count_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InMemoryURLIndexCacheItem_WordIDHistoryMapItem::item_count() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.item_count)
  return item_count_;
}
inline void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::set_item_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  item_count_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.item_count)
}

// repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry word_id_history_map_entry = 2;
inline int InMemoryURLIndexCacheItem_WordIDHistoryMapItem::word_id_history_map_entry_size() const {
  return word_id_history_map_entry_.size();
}
inline void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::clear_word_id_history_map_entry() {
  word_id_history_map_entry_.Clear();
}
inline ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry* InMemoryURLIndexCacheItem_WordIDHistoryMapItem::mutable_word_id_history_map_entry(int index) {
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.word_id_history_map_entry)
  return word_id_history_map_entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry >*
InMemoryURLIndexCacheItem_WordIDHistoryMapItem::mutable_word_id_history_map_entry() {
  // @@protoc_insertion_point(field_mutable_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.word_id_history_map_entry)
  return &word_id_history_map_entry_;
}
inline const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry& InMemoryURLIndexCacheItem_WordIDHistoryMapItem::word_id_history_map_entry(int index) const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.word_id_history_map_entry)
  return word_id_history_map_entry_.Get(index);
}
inline ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry* InMemoryURLIndexCacheItem_WordIDHistoryMapItem::add_word_id_history_map_entry() {
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.word_id_history_map_entry)
  return word_id_history_map_entry_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry >&
InMemoryURLIndexCacheItem_WordIDHistoryMapItem::word_id_history_map_entry() const {
  // @@protoc_insertion_point(field_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.word_id_history_map_entry)
  return word_id_history_map_entry_;
}

// -------------------------------------------------------------------

// InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo

// required int64 visit_time = 1;
inline bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::has_visit_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::clear_visit_time() {
  visit_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::visit_time() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo.visit_time)
  return visit_time_;
}
inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::set_visit_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  visit_time_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo.visit_time)
}

// required uint64 transition_type = 2;
inline bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::has_transition_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::clear_transition_type() {
  transition_type_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::transition_type() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo.transition_type)
  return transition_type_;
}
inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::set_transition_type(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  transition_type_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo.transition_type)
}

// -------------------------------------------------------------------

// InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry

// required int64 history_id = 1;
inline bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::has_history_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::clear_history_id() {
  history_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::history_id() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.history_id)
  return history_id_;
}
inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_history_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  history_id_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.history_id)
}

// required int32 visit_count = 2;
inline bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::has_visit_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::clear_visit_count() {
  visit_count_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::visit_count() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.visit_count)
  return visit_count_;
}
inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_visit_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  visit_count_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.visit_count)
}

// required int32 typed_count = 3;
inline bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::has_typed_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::clear_typed_count() {
  typed_count_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::typed_count() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.typed_count)
  return typed_count_;
}
inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_typed_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  typed_count_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.typed_count)
}

// required int64 last_visit = 4;
inline bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::has_last_visit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::clear_last_visit() {
  last_visit_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::last_visit() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.last_visit)
  return last_visit_;
}
inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_last_visit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  last_visit_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.last_visit)
}

// required string url = 5;
inline bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::url() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.url)
  return url_.GetNoArena();
}
inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.url)
}
inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.url)
}
inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.url)
}
inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.url)
}
inline std::string* InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::release_url() {
  // @@protoc_insertion_point(field_release:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.url)
}

// optional string title = 6;
inline bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::title() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.title)
  return title_.GetNoArena();
}
inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.title)
}
inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.title)
}
inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.title)
}
inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_title(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.title)
}
inline std::string* InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::mutable_title() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.title)
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::release_title() {
  // @@protoc_insertion_point(field_release:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.title)
  if (!has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return title_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.title)
}

// repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo visits = 7;
inline int InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::visits_size() const {
  return visits_.size();
}
inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::clear_visits() {
  visits_.Clear();
}
inline ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo* InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::mutable_visits(int index) {
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.visits)
  return visits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo >*
InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::mutable_visits() {
  // @@protoc_insertion_point(field_mutable_list:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.visits)
  return &visits_;
}
inline const ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo& InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::visits(int index) const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.visits)
  return visits_.Get(index);
}
inline ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo* InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::add_visits() {
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.visits)
  return visits_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo >&
InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::visits() const {
  // @@protoc_insertion_point(field_list:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.visits)
  return visits_;
}

// -------------------------------------------------------------------

// InMemoryURLIndexCacheItem_HistoryInfoMapItem

// required uint32 item_count = 1;
inline bool InMemoryURLIndexCacheItem_HistoryInfoMapItem::has_item_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem::clear_item_count() {
  item_count_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InMemoryURLIndexCacheItem_HistoryInfoMapItem::item_count() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.item_count)
  return item_count_;
}
inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem::set_item_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  item_count_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.item_count)
}

// repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry history_info_map_entry = 2;
inline int InMemoryURLIndexCacheItem_HistoryInfoMapItem::history_info_map_entry_size() const {
  return history_info_map_entry_.size();
}
inline void InMemoryURLIndexCacheItem_HistoryInfoMapItem::clear_history_info_map_entry() {
  history_info_map_entry_.Clear();
}
inline ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry* InMemoryURLIndexCacheItem_HistoryInfoMapItem::mutable_history_info_map_entry(int index) {
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.history_info_map_entry)
  return history_info_map_entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry >*
InMemoryURLIndexCacheItem_HistoryInfoMapItem::mutable_history_info_map_entry() {
  // @@protoc_insertion_point(field_mutable_list:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.history_info_map_entry)
  return &history_info_map_entry_;
}
inline const ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry& InMemoryURLIndexCacheItem_HistoryInfoMapItem::history_info_map_entry(int index) const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.history_info_map_entry)
  return history_info_map_entry_.Get(index);
}
inline ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry* InMemoryURLIndexCacheItem_HistoryInfoMapItem::add_history_info_map_entry() {
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.history_info_map_entry)
  return history_info_map_entry_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry >&
InMemoryURLIndexCacheItem_HistoryInfoMapItem::history_info_map_entry() const {
  // @@protoc_insertion_point(field_list:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.history_info_map_entry)
  return history_info_map_entry_;
}

// -------------------------------------------------------------------

// InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry

// required int64 history_id = 1;
inline bool InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::has_history_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::clear_history_id() {
  history_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::history_id() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.history_id)
  return history_id_;
}
inline void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::set_history_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  history_id_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.history_id)
}

// repeated int32 url_word_starts = 2 [packed = true];
inline int InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::url_word_starts_size() const {
  return url_word_starts_.size();
}
inline void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::clear_url_word_starts() {
  url_word_starts_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::url_word_starts(int index) const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.url_word_starts)
  return url_word_starts_.Get(index);
}
inline void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::set_url_word_starts(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  url_word_starts_.Set(index, value);
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.url_word_starts)
}
inline void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::add_url_word_starts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  url_word_starts_.Add(value);
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.url_word_starts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::url_word_starts() const {
  // @@protoc_insertion_point(field_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.url_word_starts)
  return url_word_starts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::mutable_url_word_starts() {
  // @@protoc_insertion_point(field_mutable_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.url_word_starts)
  return &url_word_starts_;
}

// repeated int32 title_word_starts = 3 [packed = true];
inline int InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::title_word_starts_size() const {
  return title_word_starts_.size();
}
inline void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::clear_title_word_starts() {
  title_word_starts_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::title_word_starts(int index) const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.title_word_starts)
  return title_word_starts_.Get(index);
}
inline void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::set_title_word_starts(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  title_word_starts_.Set(index, value);
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.title_word_starts)
}
inline void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::add_title_word_starts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  title_word_starts_.Add(value);
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.title_word_starts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::title_word_starts() const {
  // @@protoc_insertion_point(field_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.title_word_starts)
  return title_word_starts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::mutable_title_word_starts() {
  // @@protoc_insertion_point(field_mutable_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry.title_word_starts)
  return &title_word_starts_;
}

// -------------------------------------------------------------------

// InMemoryURLIndexCacheItem_WordStartsMapItem

// required uint32 item_count = 1;
inline bool InMemoryURLIndexCacheItem_WordStartsMapItem::has_item_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InMemoryURLIndexCacheItem_WordStartsMapItem::clear_item_count() {
  item_count_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InMemoryURLIndexCacheItem_WordStartsMapItem::item_count() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.item_count)
  return item_count_;
}
inline void InMemoryURLIndexCacheItem_WordStartsMapItem::set_item_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  item_count_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.item_count)
}

// repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry word_starts_map_entry = 2;
inline int InMemoryURLIndexCacheItem_WordStartsMapItem::word_starts_map_entry_size() const {
  return word_starts_map_entry_.size();
}
inline void InMemoryURLIndexCacheItem_WordStartsMapItem::clear_word_starts_map_entry() {
  word_starts_map_entry_.Clear();
}
inline ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry* InMemoryURLIndexCacheItem_WordStartsMapItem::mutable_word_starts_map_entry(int index) {
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.word_starts_map_entry)
  return word_starts_map_entry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry >*
InMemoryURLIndexCacheItem_WordStartsMapItem::mutable_word_starts_map_entry() {
  // @@protoc_insertion_point(field_mutable_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.word_starts_map_entry)
  return &word_starts_map_entry_;
}
inline const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry& InMemoryURLIndexCacheItem_WordStartsMapItem::word_starts_map_entry(int index) const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.word_starts_map_entry)
  return word_starts_map_entry_.Get(index);
}
inline ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry* InMemoryURLIndexCacheItem_WordStartsMapItem::add_word_starts_map_entry() {
  // @@protoc_insertion_point(field_add:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.word_starts_map_entry)
  return word_starts_map_entry_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry >&
InMemoryURLIndexCacheItem_WordStartsMapItem::word_starts_map_entry() const {
  // @@protoc_insertion_point(field_list:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.word_starts_map_entry)
  return word_starts_map_entry_;
}

// -------------------------------------------------------------------

// InMemoryURLIndexCacheItem

// required int64 last_rebuild_timestamp = 1;
inline bool InMemoryURLIndexCacheItem::has_last_rebuild_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InMemoryURLIndexCacheItem::clear_last_rebuild_timestamp() {
  last_rebuild_timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InMemoryURLIndexCacheItem::last_rebuild_timestamp() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.last_rebuild_timestamp)
  return last_rebuild_timestamp_;
}
inline void InMemoryURLIndexCacheItem::set_last_rebuild_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  last_rebuild_timestamp_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.last_rebuild_timestamp)
}

// optional int32 version = 2;
inline bool InMemoryURLIndexCacheItem::has_version() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void InMemoryURLIndexCacheItem::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InMemoryURLIndexCacheItem::version() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.version)
  return version_;
}
inline void InMemoryURLIndexCacheItem::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  version_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.version)
}

// required int32 history_item_count = 3;
inline bool InMemoryURLIndexCacheItem::has_history_item_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void InMemoryURLIndexCacheItem::clear_history_item_count() {
  history_item_count_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InMemoryURLIndexCacheItem::history_item_count() const {
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.history_item_count)
  return history_item_count_;
}
inline void InMemoryURLIndexCacheItem::set_history_item_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  history_item_count_ = value;
  // @@protoc_insertion_point(field_set:in_memory_url_index.InMemoryURLIndexCacheItem.history_item_count)
}

// optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem word_list = 4;
inline bool InMemoryURLIndexCacheItem::has_word_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InMemoryURLIndexCacheItem::clear_word_list() {
  if (word_list_ != nullptr) word_list_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem& InMemoryURLIndexCacheItem::word_list() const {
  const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem* p = word_list_;
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.word_list)
  return p != nullptr ? *p : *reinterpret_cast<const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem*>(
      &::in_memory_url_index::_InMemoryURLIndexCacheItem_WordListItem_default_instance_);
}
inline ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem* InMemoryURLIndexCacheItem::release_word_list() {
  // @@protoc_insertion_point(field_release:in_memory_url_index.InMemoryURLIndexCacheItem.word_list)
  _has_bits_[0] &= ~0x00000001u;
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem* temp = word_list_;
  word_list_ = nullptr;
  return temp;
}
inline ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem* InMemoryURLIndexCacheItem::mutable_word_list() {
  _has_bits_[0] |= 0x00000001u;
  if (word_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem>(GetArenaNoVirtual());
    word_list_ = p;
  }
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.word_list)
  return word_list_;
}
inline void InMemoryURLIndexCacheItem::set_allocated_word_list(::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem* word_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete word_list_;
  }
  if (word_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      word_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, word_list, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  word_list_ = word_list;
  // @@protoc_insertion_point(field_set_allocated:in_memory_url_index.InMemoryURLIndexCacheItem.word_list)
}

// optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem word_map = 5;
inline bool InMemoryURLIndexCacheItem::has_word_map() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InMemoryURLIndexCacheItem::clear_word_map() {
  if (word_map_ != nullptr) word_map_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem& InMemoryURLIndexCacheItem::word_map() const {
  const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem* p = word_map_;
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.word_map)
  return p != nullptr ? *p : *reinterpret_cast<const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem*>(
      &::in_memory_url_index::_InMemoryURLIndexCacheItem_WordMapItem_default_instance_);
}
inline ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem* InMemoryURLIndexCacheItem::release_word_map() {
  // @@protoc_insertion_point(field_release:in_memory_url_index.InMemoryURLIndexCacheItem.word_map)
  _has_bits_[0] &= ~0x00000002u;
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem* temp = word_map_;
  word_map_ = nullptr;
  return temp;
}
inline ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem* InMemoryURLIndexCacheItem::mutable_word_map() {
  _has_bits_[0] |= 0x00000002u;
  if (word_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem>(GetArenaNoVirtual());
    word_map_ = p;
  }
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.word_map)
  return word_map_;
}
inline void InMemoryURLIndexCacheItem::set_allocated_word_map(::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem* word_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete word_map_;
  }
  if (word_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      word_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, word_map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  word_map_ = word_map;
  // @@protoc_insertion_point(field_set_allocated:in_memory_url_index.InMemoryURLIndexCacheItem.word_map)
}

// optional .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem char_word_map = 6;
inline bool InMemoryURLIndexCacheItem::has_char_word_map() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InMemoryURLIndexCacheItem::clear_char_word_map() {
  if (char_word_map_ != nullptr) char_word_map_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem& InMemoryURLIndexCacheItem::char_word_map() const {
  const ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem* p = char_word_map_;
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.char_word_map)
  return p != nullptr ? *p : *reinterpret_cast<const ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem*>(
      &::in_memory_url_index::_InMemoryURLIndexCacheItem_CharWordMapItem_default_instance_);
}
inline ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem* InMemoryURLIndexCacheItem::release_char_word_map() {
  // @@protoc_insertion_point(field_release:in_memory_url_index.InMemoryURLIndexCacheItem.char_word_map)
  _has_bits_[0] &= ~0x00000004u;
  ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem* temp = char_word_map_;
  char_word_map_ = nullptr;
  return temp;
}
inline ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem* InMemoryURLIndexCacheItem::mutable_char_word_map() {
  _has_bits_[0] |= 0x00000004u;
  if (char_word_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem>(GetArenaNoVirtual());
    char_word_map_ = p;
  }
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.char_word_map)
  return char_word_map_;
}
inline void InMemoryURLIndexCacheItem::set_allocated_char_word_map(::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem* char_word_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete char_word_map_;
  }
  if (char_word_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      char_word_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, char_word_map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  char_word_map_ = char_word_map;
  // @@protoc_insertion_point(field_set_allocated:in_memory_url_index.InMemoryURLIndexCacheItem.char_word_map)
}

// optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem word_id_history_map = 7;
inline bool InMemoryURLIndexCacheItem::has_word_id_history_map() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InMemoryURLIndexCacheItem::clear_word_id_history_map() {
  if (word_id_history_map_ != nullptr) word_id_history_map_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem& InMemoryURLIndexCacheItem::word_id_history_map() const {
  const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem* p = word_id_history_map_;
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.word_id_history_map)
  return p != nullptr ? *p : *reinterpret_cast<const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem*>(
      &::in_memory_url_index::_InMemoryURLIndexCacheItem_WordIDHistoryMapItem_default_instance_);
}
inline ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem* InMemoryURLIndexCacheItem::release_word_id_history_map() {
  // @@protoc_insertion_point(field_release:in_memory_url_index.InMemoryURLIndexCacheItem.word_id_history_map)
  _has_bits_[0] &= ~0x00000008u;
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem* temp = word_id_history_map_;
  word_id_history_map_ = nullptr;
  return temp;
}
inline ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem* InMemoryURLIndexCacheItem::mutable_word_id_history_map() {
  _has_bits_[0] |= 0x00000008u;
  if (word_id_history_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem>(GetArenaNoVirtual());
    word_id_history_map_ = p;
  }
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.word_id_history_map)
  return word_id_history_map_;
}
inline void InMemoryURLIndexCacheItem::set_allocated_word_id_history_map(::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem* word_id_history_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete word_id_history_map_;
  }
  if (word_id_history_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      word_id_history_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, word_id_history_map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  word_id_history_map_ = word_id_history_map;
  // @@protoc_insertion_point(field_set_allocated:in_memory_url_index.InMemoryURLIndexCacheItem.word_id_history_map)
}

// optional .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem history_info_map = 8;
inline bool InMemoryURLIndexCacheItem::has_history_info_map() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InMemoryURLIndexCacheItem::clear_history_info_map() {
  if (history_info_map_ != nullptr) history_info_map_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem& InMemoryURLIndexCacheItem::history_info_map() const {
  const ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem* p = history_info_map_;
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.history_info_map)
  return p != nullptr ? *p : *reinterpret_cast<const ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem*>(
      &::in_memory_url_index::_InMemoryURLIndexCacheItem_HistoryInfoMapItem_default_instance_);
}
inline ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem* InMemoryURLIndexCacheItem::release_history_info_map() {
  // @@protoc_insertion_point(field_release:in_memory_url_index.InMemoryURLIndexCacheItem.history_info_map)
  _has_bits_[0] &= ~0x00000010u;
  ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem* temp = history_info_map_;
  history_info_map_ = nullptr;
  return temp;
}
inline ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem* InMemoryURLIndexCacheItem::mutable_history_info_map() {
  _has_bits_[0] |= 0x00000010u;
  if (history_info_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem>(GetArenaNoVirtual());
    history_info_map_ = p;
  }
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.history_info_map)
  return history_info_map_;
}
inline void InMemoryURLIndexCacheItem::set_allocated_history_info_map(::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem* history_info_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete history_info_map_;
  }
  if (history_info_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      history_info_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, history_info_map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  history_info_map_ = history_info_map;
  // @@protoc_insertion_point(field_set_allocated:in_memory_url_index.InMemoryURLIndexCacheItem.history_info_map)
}

// optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem word_starts_map = 9;
inline bool InMemoryURLIndexCacheItem::has_word_starts_map() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InMemoryURLIndexCacheItem::clear_word_starts_map() {
  if (word_starts_map_ != nullptr) word_starts_map_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem& InMemoryURLIndexCacheItem::word_starts_map() const {
  const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem* p = word_starts_map_;
  // @@protoc_insertion_point(field_get:in_memory_url_index.InMemoryURLIndexCacheItem.word_starts_map)
  return p != nullptr ? *p : *reinterpret_cast<const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem*>(
      &::in_memory_url_index::_InMemoryURLIndexCacheItem_WordStartsMapItem_default_instance_);
}
inline ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem* InMemoryURLIndexCacheItem::release_word_starts_map() {
  // @@protoc_insertion_point(field_release:in_memory_url_index.InMemoryURLIndexCacheItem.word_starts_map)
  _has_bits_[0] &= ~0x00000020u;
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem* temp = word_starts_map_;
  word_starts_map_ = nullptr;
  return temp;
}
inline ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem* InMemoryURLIndexCacheItem::mutable_word_starts_map() {
  _has_bits_[0] |= 0x00000020u;
  if (word_starts_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem>(GetArenaNoVirtual());
    word_starts_map_ = p;
  }
  // @@protoc_insertion_point(field_mutable:in_memory_url_index.InMemoryURLIndexCacheItem.word_starts_map)
  return word_starts_map_;
}
inline void InMemoryURLIndexCacheItem::set_allocated_word_starts_map(::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem* word_starts_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete word_starts_map_;
  }
  if (word_starts_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      word_starts_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, word_starts_map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  word_starts_map_ = word_starts_map;
  // @@protoc_insertion_point(field_set_allocated:in_memory_url_index.InMemoryURLIndexCacheItem.word_starts_map)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace in_memory_url_index

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_in_5fmemory_5furl_5findex_5fcache_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: in_memory_url_index_cache.proto

#include "in_memory_url_index_cache.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_in_5fmemory_5furl_5findex_5fcache_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InMemoryURLIndexCacheItem_CharWordMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_in_5fmemory_5furl_5findex_5fcache_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry_in_5fmemory_5furl_5findex_5fcache_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_in_5fmemory_5furl_5findex_5fcache_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InMemoryURLIndexCacheItem_HistoryInfoMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_in_5fmemory_5furl_5findex_5fcache_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_in_5fmemory_5furl_5findex_5fcache_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_in_5fmemory_5furl_5findex_5fcache_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo_in_5fmemory_5furl_5findex_5fcache_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_in_5fmemory_5furl_5findex_5fcache_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InMemoryURLIndexCacheItem_WordIDHistoryMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_in_5fmemory_5furl_5findex_5fcache_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry_in_5fmemory_5furl_5findex_5fcache_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_in_5fmemory_5furl_5findex_5fcache_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InMemoryURLIndexCacheItem_WordListItem_in_5fmemory_5furl_5findex_5fcache_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_in_5fmemory_5furl_5findex_5fcache_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InMemoryURLIndexCacheItem_WordMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_in_5fmemory_5furl_5findex_5fcache_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry_in_5fmemory_5furl_5findex_5fcache_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_in_5fmemory_5furl_5findex_5fcache_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InMemoryURLIndexCacheItem_WordStartsMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_in_5fmemory_5furl_5findex_5fcache_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry_in_5fmemory_5furl_5findex_5fcache_2eproto;
namespace in_memory_url_index {
class InMemoryURLIndexCacheItem_WordListItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InMemoryURLIndexCacheItem_WordListItem> _instance;
} _InMemoryURLIndexCacheItem_WordListItem_default_instance_;
class InMemoryURLIndexCacheItem_WordMapItem_WordMapEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry> _instance;
} _InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry_default_instance_;
class InMemoryURLIndexCacheItem_WordMapItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InMemoryURLIndexCacheItem_WordMapItem> _instance;
} _InMemoryURLIndexCacheItem_WordMapItem_default_instance_;
class InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry> _instance;
} _InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry_default_instance_;
class InMemoryURLIndexCacheItem_CharWordMapItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InMemoryURLIndexCacheItem_CharWordMapItem> _instance;
} _InMemoryURLIndexCacheItem_CharWordMapItem_default_instance_;
class InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry> _instance;
} _InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry_default_instance_;
class InMemoryURLIndexCacheItem_WordIDHistoryMapItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InMemoryURLIndexCacheItem_WordIDHistoryMapItem> _instance;
} _InMemoryURLIndexCacheItem_WordIDHistoryMapItem_default_instance_;
class InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo> _instance;
} _InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo_default_instance_;
class InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry> _instance;
} _InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_default_instance_;
class InMemoryURLIndexCacheItem_HistoryInfoMapItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InMemoryURLIndexCacheItem_HistoryInfoMapItem> _instance;
} _InMemoryURLIndexCacheItem_HistoryInfoMapItem_default_instance_;
class InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry> _instance;
} _InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry_default_instance_;
class InMemoryURLIndexCacheItem_WordStartsMapItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InMemoryURLIndexCacheItem_WordStartsMapItem> _instance;
} _InMemoryURLIndexCacheItem_WordStartsMapItem_default_instance_;
class InMemoryURLIndexCacheItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InMemoryURLIndexCacheItem> _instance;
} _InMemoryURLIndexCacheItem_default_instance_;
}  // namespace in_memory_url_index
static void InitDefaultsscc_info_InMemoryURLIndexCacheItem_in_5fmemory_5furl_5findex_5fcache_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::in_memory_url_index::_InMemoryURLIndexCacheItem_default_instance_;
    new (ptr) ::in_memory_url_index::InMemoryURLIndexCacheItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::in_memory_url_index::InMemoryURLIndexCacheItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_InMemoryURLIndexCacheItem_in_5fmemory_5furl_5findex_5fcache_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsscc_info_InMemoryURLIndexCacheItem_in_5fmemory_5furl_5findex_5fcache_2eproto}, {
      &scc_info_InMemoryURLIndexCacheItem_WordListItem_in_5fmemory_5furl_5findex_5fcache_2eproto.base,
      &scc_info_InMemoryURLIndexCacheItem_WordMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto.base,
      &scc_info_InMemoryURLIndexCacheItem_CharWordMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto.base,
      &scc_info_InMemoryURLIndexCacheItem_WordIDHistoryMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto.base,
      &scc_info_InMemoryURLIndexCacheItem_HistoryInfoMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto.base,
      &scc_info_InMemoryURLIndexCacheItem_WordStartsMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto.base,}};

static void InitDefaultsscc_info_InMemoryURLIndexCacheItem_CharWordMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::in_memory_url_index::_InMemoryURLIndexCacheItem_CharWordMapItem_default_instance_;
    new (ptr) ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InMemoryURLIndexCacheItem_CharWordMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_InMemoryURLIndexCacheItem_CharWordMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto}, {
      &scc_info_InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry_in_5fmemory_5furl_5findex_5fcache_2eproto.base,}};

static void InitDefaultsscc_info_InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry_in_5fmemory_5furl_5findex_5fcache_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::in_memory_url_index::_InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry_default_instance_;
    new (ptr) ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry_in_5fmemory_5furl_5findex_5fcache_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry_in_5fmemory_5furl_5findex_5fcache_2eproto}, {}};

static void InitDefaultsscc_info_InMemoryURLIndexCacheItem_HistoryInfoMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::in_memory_url_index::_InMemoryURLIndexCacheItem_HistoryInfoMapItem_default_instance_;
    new (ptr) ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InMemoryURLIndexCacheItem_HistoryInfoMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_InMemoryURLIndexCacheItem_HistoryInfoMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto}, {
      &scc_info_InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_in_5fmemory_5furl_5findex_5fcache_2eproto.base,}};

static void InitDefaultsscc_info_InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_in_5fmemory_5furl_5findex_5fcache_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::in_memory_url_index::_InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_default_instance_;
    new (ptr) ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_in_5fmemory_5furl_5findex_5fcache_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_in_5fmemory_5furl_5findex_5fcache_2eproto}, {
      &scc_info_InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo_in_5fmemory_5furl_5findex_5fcache_2eproto.base,}};

static void InitDefaultsscc_info_InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo_in_5fmemory_5furl_5findex_5fcache_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::in_memory_url_index::_InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo_default_instance_;
    new (ptr) ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo_in_5fmemory_5furl_5findex_5fcache_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo_in_5fmemory_5furl_5findex_5fcache_2eproto}, {}};

static void InitDefaultsscc_info_InMemoryURLIndexCacheItem_WordIDHistoryMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::in_memory_url_index::_InMemoryURLIndexCacheItem_WordIDHistoryMapItem_default_instance_;
    new (ptr) ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InMemoryURLIndexCacheItem_WordIDHistoryMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_InMemoryURLIndexCacheItem_WordIDHistoryMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto}, {
      &scc_info_InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry_in_5fmemory_5furl_5findex_5fcache_2eproto.base,}};

static void InitDefaultsscc_info_InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry_in_5fmemory_5furl_5findex_5fcache_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::in_memory_url_index::_InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry_default_instance_;
    new (ptr) ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry_in_5fmemory_5furl_5findex_5fcache_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry_in_5fmemory_5furl_5findex_5fcache_2eproto}, {}};

static void InitDefaultsscc_info_InMemoryURLIndexCacheItem_WordListItem_in_5fmemory_5furl_5findex_5fcache_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::in_memory_url_index::_InMemoryURLIndexCacheItem_WordListItem_default_instance_;
    new (ptr) ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InMemoryURLIndexCacheItem_WordListItem_in_5fmemory_5furl_5findex_5fcache_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_InMemoryURLIndexCacheItem_WordListItem_in_5fmemory_5furl_5findex_5fcache_2eproto}, {}};

static void InitDefaultsscc_info_InMemoryURLIndexCacheItem_WordMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::in_memory_url_index::_InMemoryURLIndexCacheItem_WordMapItem_default_instance_;
    new (ptr) ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InMemoryURLIndexCacheItem_WordMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_InMemoryURLIndexCacheItem_WordMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto}, {
      &scc_info_InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry_in_5fmemory_5furl_5findex_5fcache_2eproto.base,}};

static void InitDefaultsscc_info_InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry_in_5fmemory_5furl_5findex_5fcache_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::in_memory_url_index::_InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry_default_instance_;
    new (ptr) ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry_in_5fmemory_5furl_5findex_5fcache_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry_in_5fmemory_5furl_5findex_5fcache_2eproto}, {}};

static void InitDefaultsscc_info_InMemoryURLIndexCacheItem_WordStartsMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::in_memory_url_index::_InMemoryURLIndexCacheItem_WordStartsMapItem_default_instance_;
    new (ptr) ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InMemoryURLIndexCacheItem_WordStartsMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_InMemoryURLIndexCacheItem_WordStartsMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto}, {
      &scc_info_InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry_in_5fmemory_5furl_5findex_5fcache_2eproto.base,}};

static void InitDefaultsscc_info_InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry_in_5fmemory_5furl_5findex_5fcache_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::in_memory_url_index::_InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry_default_instance_;
    new (ptr) ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry_in_5fmemory_5furl_5findex_5fcache_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry_in_5fmemory_5furl_5findex_5fcache_2eproto}, {}};

namespace in_memory_url_index {

// ===================================================================

void InMemoryURLIndexCacheItem_WordListItem::InitAsDefaultInstance() {
}
class InMemoryURLIndexCacheItem_WordListItem::_Internal {
 public:
  using HasBits = decltype(std::declval<InMemoryURLIndexCacheItem_WordListItem>()._has_bits_);
  static void set_has_word_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InMemoryURLIndexCacheItem_WordListItem::InMemoryURLIndexCacheItem_WordListItem()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
}
InMemoryURLIndexCacheItem_WordListItem::InMemoryURLIndexCacheItem_WordListItem(const InMemoryURLIndexCacheItem_WordListItem& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      word_(from.word_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  word_count_ = from.word_count_;
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
}

void InMemoryURLIndexCacheItem_WordListItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InMemoryURLIndexCacheItem_WordListItem_in_5fmemory_5furl_5findex_5fcache_2eproto.base);
  word_count_ = 0u;
}

InMemoryURLIndexCacheItem_WordListItem::~InMemoryURLIndexCacheItem_WordListItem() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_WordListItem::SharedDtor() {
}

void InMemoryURLIndexCacheItem_WordListItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InMemoryURLIndexCacheItem_WordListItem& InMemoryURLIndexCacheItem_WordListItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InMemoryURLIndexCacheItem_WordListItem_in_5fmemory_5furl_5findex_5fcache_2eproto.base);
  return *internal_default_instance();
}


void InMemoryURLIndexCacheItem_WordListItem::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  word_.Clear();
  word_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InMemoryURLIndexCacheItem_WordListItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 word_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_word_count(&has_bits);
          word_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string word = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_word(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InMemoryURLIndexCacheItem_WordListItem::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 word_count = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_word_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &word_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string word = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_word()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InMemoryURLIndexCacheItem_WordListItem::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 word_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->word_count(), output);
  }

  // repeated string word = 2;
  for (int i = 0, n = this->word_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->word(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
}

size_t InMemoryURLIndexCacheItem_WordListItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 word_count = 1;
  if (has_word_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->word_count());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string word = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->word_size());
  for (int i = 0, n = this->word_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->word(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InMemoryURLIndexCacheItem_WordListItem::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const InMemoryURLIndexCacheItem_WordListItem*>(
      &from));
}

void InMemoryURLIndexCacheItem_WordListItem::MergeFrom(const InMemoryURLIndexCacheItem_WordListItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  word_.MergeFrom(from.word_);
  if (from.has_word_count()) {
    set_word_count(from.word_count());
  }
}

void InMemoryURLIndexCacheItem_WordListItem::CopyFrom(const InMemoryURLIndexCacheItem_WordListItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_WordListItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void InMemoryURLIndexCacheItem_WordListItem::InternalSwap(InMemoryURLIndexCacheItem_WordListItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  word_.InternalSwap(CastToBase(&other->word_));
  swap(word_count_, other->word_count_);
}

std::string InMemoryURLIndexCacheItem_WordListItem::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem";
}


// ===================================================================

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::InitAsDefaultInstance() {
}
class InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry>()._has_bits_);
  static void set_has_word(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_word_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
}
InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry(const InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  word_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_word()) {
    word_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.word_);
  }
  word_id_ = from.word_id_;
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
}

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry_in_5fmemory_5furl_5findex_5fcache_2eproto.base);
  word_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  word_id_ = 0;
}

InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::~InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::SharedDtor() {
  word_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry& InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry_in_5fmemory_5furl_5findex_5fcache_2eproto.base);
  return *internal_default_instance();
}


void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    word_.ClearNonDefaultToEmptyNoArena();
  }
  word_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string word = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_word(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 word_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_word_id(&has_bits);
          word_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string word = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_word()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 word_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_word_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &word_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string word = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->word(), output);
  }

  // required int32 word_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->word_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
}

size_t InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  size_t total_size = 0;

  if (has_word()) {
    // required string word = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->word());
  }

  if (has_word_id()) {
    // required int32 word_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->word_id());
  }

  return total_size;
}
size_t InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string word = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->word());

    // required int32 word_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->word_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry*>(
      &from));
}

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::MergeFrom(const InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      word_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.word_);
    }
    if (cached_has_bits & 0x00000002u) {
      word_id_ = from.word_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::CopyFrom(const InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::InternalSwap(InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  word_.Swap(&other->word_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(word_id_, other->word_id_);
}

std::string InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry";
}


// ===================================================================

void InMemoryURLIndexCacheItem_WordMapItem::InitAsDefaultInstance() {
}
class InMemoryURLIndexCacheItem_WordMapItem::_Internal {
 public:
  using HasBits = decltype(std::declval<InMemoryURLIndexCacheItem_WordMapItem>()._has_bits_);
  static void set_has_item_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InMemoryURLIndexCacheItem_WordMapItem::InMemoryURLIndexCacheItem_WordMapItem()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
}
InMemoryURLIndexCacheItem_WordMapItem::InMemoryURLIndexCacheItem_WordMapItem(const InMemoryURLIndexCacheItem_WordMapItem& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      word_map_entry_(from.word_map_entry_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_count_ = from.item_count_;
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
}

void InMemoryURLIndexCacheItem_WordMapItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InMemoryURLIndexCacheItem_WordMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto.base);
  item_count_ = 0u;
}

InMemoryURLIndexCacheItem_WordMapItem::~InMemoryURLIndexCacheItem_WordMapItem() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_WordMapItem::SharedDtor() {
}

void InMemoryURLIndexCacheItem_WordMapItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InMemoryURLIndexCacheItem_WordMapItem& InMemoryURLIndexCacheItem_WordMapItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InMemoryURLIndexCacheItem_WordMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto.base);
  return *internal_default_instance();
}


void InMemoryURLIndexCacheItem_WordMapItem::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  word_map_entry_.Clear();
  item_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InMemoryURLIndexCacheItem_WordMapItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 item_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_count(&has_bits);
          item_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry word_map_entry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_word_map_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InMemoryURLIndexCacheItem_WordMapItem::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_count = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_item_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry word_map_entry = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_word_map_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InMemoryURLIndexCacheItem_WordMapItem::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 item_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->item_count(), output);
  }

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry word_map_entry = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->word_map_entry_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->word_map_entry(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
}

size_t InMemoryURLIndexCacheItem_WordMapItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 item_count = 1;
  if (has_item_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->item_count());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem.WordMapEntry word_map_entry = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->word_map_entry_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->word_map_entry(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InMemoryURLIndexCacheItem_WordMapItem::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const InMemoryURLIndexCacheItem_WordMapItem*>(
      &from));
}

void InMemoryURLIndexCacheItem_WordMapItem::MergeFrom(const InMemoryURLIndexCacheItem_WordMapItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  word_map_entry_.MergeFrom(from.word_map_entry_);
  if (from.has_item_count()) {
    set_item_count(from.item_count());
  }
}

void InMemoryURLIndexCacheItem_WordMapItem::CopyFrom(const InMemoryURLIndexCacheItem_WordMapItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_WordMapItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->word_map_entry())) return false;
  return true;
}

void InMemoryURLIndexCacheItem_WordMapItem::InternalSwap(InMemoryURLIndexCacheItem_WordMapItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&word_map_entry_)->InternalSwap(CastToBase(&other->word_map_entry_));
  swap(item_count_, other->item_count_);
}

std::string InMemoryURLIndexCacheItem_WordMapItem::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem";
}


// ===================================================================

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::InitAsDefaultInstance() {
}
class InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry>()._has_bits_);
  static void set_has_item_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_char_16(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
}
InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry(const InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      word_id_(from.word_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_count_, &from.item_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&char_16_) -
    reinterpret_cast<char*>(&item_count_)) + sizeof(char_16_));
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
}

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::SharedCtor() {
  ::memset(&item_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&char_16_) -
      reinterpret_cast<char*>(&item_count_)) + sizeof(char_16_));
}

InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::~InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::SharedDtor() {
}

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry& InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry_in_5fmemory_5furl_5findex_5fcache_2eproto.base);
  return *internal_default_instance();
}


void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  word_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&char_16_) -
        reinterpret_cast<char*>(&item_count_)) + sizeof(char_16_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 item_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_count(&has_bits);
          item_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 char_16 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_char_16(&has_bits);
          char_16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 word_id = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_word_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_word_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_count = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_item_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 char_16 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_char_16(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &char_16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 word_id = 3 [packed = true];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_word_id())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_word_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 item_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->item_count(), output);
  }

  // required int32 char_16 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->char_16(), output);
  }

  // repeated int32 word_id = 3 [packed = true];
  if (this->word_id_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_word_id_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->word_id_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->word_id(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
}

size_t InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  size_t total_size = 0;

  if (has_item_count()) {
    // required uint32 item_count = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->item_count());
  }

  if (has_char_16()) {
    // required int32 char_16 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->char_16());
  }

  return total_size;
}
size_t InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 item_count = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->item_count());

    // required int32 char_16 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->char_16());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 word_id = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->word_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _word_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry*>(
      &from));
}

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::MergeFrom(const InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  word_id_.MergeFrom(from.word_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_count_ = from.item_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      char_16_ = from.char_16_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::CopyFrom(const InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::InternalSwap(InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  word_id_.InternalSwap(&other->word_id_);
  swap(item_count_, other->item_count_);
  swap(char_16_, other->char_16_);
}

std::string InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry";
}


// ===================================================================

void InMemoryURLIndexCacheItem_CharWordMapItem::InitAsDefaultInstance() {
}
class InMemoryURLIndexCacheItem_CharWordMapItem::_Internal {
 public:
  using HasBits = decltype(std::declval<InMemoryURLIndexCacheItem_CharWordMapItem>()._has_bits_);
  static void set_has_item_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InMemoryURLIndexCacheItem_CharWordMapItem::InMemoryURLIndexCacheItem_CharWordMapItem()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
}
InMemoryURLIndexCacheItem_CharWordMapItem::InMemoryURLIndexCacheItem_CharWordMapItem(const InMemoryURLIndexCacheItem_CharWordMapItem& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      char_word_map_entry_(from.char_word_map_entry_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_count_ = from.item_count_;
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
}

void InMemoryURLIndexCacheItem_CharWordMapItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InMemoryURLIndexCacheItem_CharWordMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto.base);
  item_count_ = 0u;
}

InMemoryURLIndexCacheItem_CharWordMapItem::~InMemoryURLIndexCacheItem_CharWordMapItem() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_CharWordMapItem::SharedDtor() {
}

void InMemoryURLIndexCacheItem_CharWordMapItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InMemoryURLIndexCacheItem_CharWordMapItem& InMemoryURLIndexCacheItem_CharWordMapItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InMemoryURLIndexCacheItem_CharWordMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto.base);
  return *internal_default_instance();
}


void InMemoryURLIndexCacheItem_CharWordMapItem::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  char_word_map_entry_.Clear();
  item_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InMemoryURLIndexCacheItem_CharWordMapItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 item_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_count(&has_bits);
          item_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry char_word_map_entry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_char_word_map_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InMemoryURLIndexCacheItem_CharWordMapItem::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_count = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_item_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry char_word_map_entry = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_char_word_map_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InMemoryURLIndexCacheItem_CharWordMapItem::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 item_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->item_count(), output);
  }

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry char_word_map_entry = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->char_word_map_entry_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->char_word_map_entry(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
}

size_t InMemoryURLIndexCacheItem_CharWordMapItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 item_count = 1;
  if (has_item_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->item_count());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem.CharWordMapEntry char_word_map_entry = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->char_word_map_entry_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->char_word_map_entry(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InMemoryURLIndexCacheItem_CharWordMapItem::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const InMemoryURLIndexCacheItem_CharWordMapItem*>(
      &from));
}

void InMemoryURLIndexCacheItem_CharWordMapItem::MergeFrom(const InMemoryURLIndexCacheItem_CharWordMapItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  char_word_map_entry_.MergeFrom(from.char_word_map_entry_);
  if (from.has_item_count()) {
    set_item_count(from.item_count());
  }
}

void InMemoryURLIndexCacheItem_CharWordMapItem::CopyFrom(const InMemoryURLIndexCacheItem_CharWordMapItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_CharWordMapItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->char_word_map_entry())) return false;
  return true;
}

void InMemoryURLIndexCacheItem_CharWordMapItem::InternalSwap(InMemoryURLIndexCacheItem_CharWordMapItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&char_word_map_entry_)->InternalSwap(CastToBase(&other->char_word_map_entry_));
  swap(item_count_, other->item_count_);
}

std::string InMemoryURLIndexCacheItem_CharWordMapItem::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem";
}


// ===================================================================

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::InitAsDefaultInstance() {
}
class InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry>()._has_bits_);
  static void set_has_item_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_word_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
}
InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry(const InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      history_id_(from.history_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_count_, &from.item_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&word_id_) -
    reinterpret_cast<char*>(&item_count_)) + sizeof(word_id_));
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::SharedCtor() {
  ::memset(&item_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&word_id_) -
      reinterpret_cast<char*>(&item_count_)) + sizeof(word_id_));
}

InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::~InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::SharedDtor() {
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry& InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry_in_5fmemory_5furl_5findex_5fcache_2eproto.base);
  return *internal_default_instance();
}


void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  history_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&word_id_) -
        reinterpret_cast<char*>(&item_count_)) + sizeof(word_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 item_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_count(&has_bits);
          item_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 word_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_word_id(&has_bits);
          word_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 history_id = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_history_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_history_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_count = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_item_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 word_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_word_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &word_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 history_id = 3 [packed = true];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_history_id())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_history_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 item_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->item_count(), output);
  }

  // required int32 word_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->word_id(), output);
  }

  // repeated int64 history_id = 3 [packed = true];
  if (this->history_id_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_history_id_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->history_id_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->history_id(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
}

size_t InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  size_t total_size = 0;

  if (has_item_count()) {
    // required uint32 item_count = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->item_count());
  }

  if (has_word_id()) {
    // required int32 word_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->word_id());
  }

  return total_size;
}
size_t InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 item_count = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->item_count());

    // required int32 word_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->word_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 history_id = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->history_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _history_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry*>(
      &from));
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::MergeFrom(const InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  history_id_.MergeFrom(from.history_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_count_ = from.item_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      word_id_ = from.word_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::CopyFrom(const InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::InternalSwap(InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  history_id_.InternalSwap(&other->history_id_);
  swap(item_count_, other->item_count_);
  swap(word_id_, other->word_id_);
}

std::string InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry";
}


// ===================================================================

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::InitAsDefaultInstance() {
}
class InMemoryURLIndexCacheItem_WordIDHistoryMapItem::_Internal {
 public:
  using HasBits = decltype(std::declval<InMemoryURLIndexCacheItem_WordIDHistoryMapItem>()._has_bits_);
  static void set_has_item_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InMemoryURLIndexCacheItem_WordIDHistoryMapItem::InMemoryURLIndexCacheItem_WordIDHistoryMapItem()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
}
InMemoryURLIndexCacheItem_WordIDHistoryMapItem::InMemoryURLIndexCacheItem_WordIDHistoryMapItem(const InMemoryURLIndexCacheItem_WordIDHistoryMapItem& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      word_id_history_map_entry_(from.word_id_history_map_entry_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_count_ = from.item_count_;
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InMemoryURLIndexCacheItem_WordIDHistoryMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto.base);
  item_count_ = 0u;
}

InMemoryURLIndexCacheItem_WordIDHistoryMapItem::~InMemoryURLIndexCacheItem_WordIDHistoryMapItem() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::SharedDtor() {
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InMemoryURLIndexCacheItem_WordIDHistoryMapItem& InMemoryURLIndexCacheItem_WordIDHistoryMapItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InMemoryURLIndexCacheItem_WordIDHistoryMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto.base);
  return *internal_default_instance();
}


void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  word_id_history_map_entry_.Clear();
  item_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InMemoryURLIndexCacheItem_WordIDHistoryMapItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 item_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_count(&has_bits);
          item_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry word_id_history_map_entry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_word_id_history_map_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InMemoryURLIndexCacheItem_WordIDHistoryMapItem::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_count = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_item_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry word_id_history_map_entry = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_word_id_history_map_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 item_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->item_count(), output);
  }

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry word_id_history_map_entry = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->word_id_history_map_entry_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->word_id_history_map_entry(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
}

size_t InMemoryURLIndexCacheItem_WordIDHistoryMapItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 item_count = 1;
  if (has_item_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->item_count());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem.WordIDHistoryMapEntry word_id_history_map_entry = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->word_id_history_map_entry_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->word_id_history_map_entry(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const InMemoryURLIndexCacheItem_WordIDHistoryMapItem*>(
      &from));
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::MergeFrom(const InMemoryURLIndexCacheItem_WordIDHistoryMapItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  word_id_history_map_entry_.MergeFrom(from.word_id_history_map_entry_);
  if (from.has_item_count()) {
    set_item_count(from.item_count());
  }
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::CopyFrom(const InMemoryURLIndexCacheItem_WordIDHistoryMapItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_WordIDHistoryMapItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->word_id_history_map_entry())) return false;
  return true;
}

void InMemoryURLIndexCacheItem_WordIDHistoryMapItem::InternalSwap(InMemoryURLIndexCacheItem_WordIDHistoryMapItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&word_id_history_map_entry_)->InternalSwap(CastToBase(&other->word_id_history_map_entry_));
  swap(item_count_, other->item_count_);
}

std::string InMemoryURLIndexCacheItem_WordIDHistoryMapItem::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem";
}


// ===================================================================

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::InitAsDefaultInstance() {
}
class InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo>()._has_bits_);
  static void set_has_visit_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_transition_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
}
InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo(const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&visit_time_, &from.visit_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&transition_type_) -
    reinterpret_cast<char*>(&visit_time_)) + sizeof(transition_type_));
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::SharedCtor() {
  ::memset(&visit_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&transition_type_) -
      reinterpret_cast<char*>(&visit_time_)) + sizeof(transition_type_));
}

InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::~InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::SharedDtor() {
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo& InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo_in_5fmemory_5furl_5findex_5fcache_2eproto.base);
  return *internal_default_instance();
}


void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&visit_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&transition_type_) -
        reinterpret_cast<char*>(&visit_time_)) + sizeof(transition_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 visit_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_visit_time(&has_bits);
          visit_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 transition_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_transition_type(&has_bits);
          transition_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 visit_time = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_visit_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &visit_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 transition_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_transition_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transition_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 visit_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->visit_time(), output);
  }

  // required uint64 transition_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->transition_type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
}

size_t InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  size_t total_size = 0;

  if (has_visit_time()) {
    // required int64 visit_time = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->visit_time());
  }

  if (has_transition_type()) {
    // required uint64 transition_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->transition_type());
  }

  return total_size;
}
size_t InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 visit_time = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->visit_time());

    // required uint64 transition_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->transition_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo*>(
      &from));
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::MergeFrom(const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      visit_time_ = from.visit_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      transition_type_ = from.transition_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::CopyFrom(const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::InternalSwap(InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(visit_time_, other->visit_time_);
  swap(transition_type_, other->transition_type_);
}

std::string InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo";
}


// ===================================================================

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::InitAsDefaultInstance() {
}
class InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry>()._has_bits_);
  static void set_has_history_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_visit_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_typed_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_last_visit(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
}
InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry(const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      visits_(from.visits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  ::memcpy(&history_id_, &from.history_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_visit_) -
    reinterpret_cast<char*>(&history_id_)) + sizeof(last_visit_));
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_in_5fmemory_5furl_5findex_5fcache_2eproto.base);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&history_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_visit_) -
      reinterpret_cast<char*>(&history_id_)) + sizeof(last_visit_));
}

InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::~InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::SharedDtor() {
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry& InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_in_5fmemory_5furl_5findex_5fcache_2eproto.base);
  return *internal_default_instance();
}


void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  visits_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      title_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&history_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_visit_) -
        reinterpret_cast<char*>(&history_id_)) + sizeof(last_visit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 history_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_history_id(&has_bits);
          history_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 visit_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_visit_count(&has_bits);
          visit_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 typed_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_typed_count(&has_bits);
          typed_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 last_visit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_last_visit(&has_bits);
          last_visit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_url(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string title = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_title(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo visits = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_visits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 history_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_history_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &history_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 visit_count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_visit_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &visit_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 typed_count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_typed_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &typed_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 last_visit = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_last_visit(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_visit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string url = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo visits = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_visits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 history_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->history_id(), output);
  }

  // required int32 visit_count = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->visit_count(), output);
  }

  // required int32 typed_count = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->typed_count(), output);
  }

  // required int64 last_visit = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->last_visit(), output);
  }

  // required string url = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->url(), output);
  }

  // optional string title = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->title(), output);
  }

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo visits = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->visits_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7,
      this->visits(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
}

size_t InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  size_t total_size = 0;

  if (has_url()) {
    // required string url = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->url());
  }

  if (has_history_id()) {
    // required int64 history_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->history_id());
  }

  if (has_visit_count()) {
    // required int32 visit_count = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->visit_count());
  }

  if (has_typed_count()) {
    // required int32 typed_count = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->typed_count());
  }

  if (has_last_visit()) {
    // required int64 last_visit = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->last_visit());
  }

  return total_size;
}
size_t InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x0000003d) ^ 0x0000003d) == 0) {  // All required fields are present.
    // required string url = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->url());

    // required int64 history_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->history_id());

    // required int32 visit_count = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->visit_count());

    // required int32 typed_count = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->typed_count());

    // required int64 last_visit = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->last_visit());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry.VisitInfo visits = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->visits_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->visits(static_cast<int>(i)));
    }
  }

  // optional string title = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->title());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry*>(
      &from));
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::MergeFrom(const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  visits_.MergeFrom(from.visits_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000004u) {
      history_id_ = from.history_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      visit_count_ = from.visit_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      typed_count_ = from.typed_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      last_visit_ = from.last_visit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::CopyFrom(const InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003d) != 0x0000003d) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->visits())) return false;
  return true;
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::InternalSwap(InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&visits_)->InternalSwap(CastToBase(&other->visits_));
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(history_id_, other->history_id_);
  swap(visit_count_, other->visit_count_);
  swap(typed_count_, other->typed_count_);
  swap(last_visit_, other->last_visit_);
}

std::string InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry";
}


// ===================================================================

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::InitAsDefaultInstance() {
}
class InMemoryURLIndexCacheItem_HistoryInfoMapItem::_Internal {
 public:
  using HasBits = decltype(std::declval<InMemoryURLIndexCacheItem_HistoryInfoMapItem>()._has_bits_);
  static void set_has_item_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InMemoryURLIndexCacheItem_HistoryInfoMapItem::InMemoryURLIndexCacheItem_HistoryInfoMapItem()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
}
InMemoryURLIndexCacheItem_HistoryInfoMapItem::InMemoryURLIndexCacheItem_HistoryInfoMapItem(const InMemoryURLIndexCacheItem_HistoryInfoMapItem& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      history_info_map_entry_(from.history_info_map_entry_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_count_ = from.item_count_;
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InMemoryURLIndexCacheItem_HistoryInfoMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto.base);
  item_count_ = 0u;
}

InMemoryURLIndexCacheItem_HistoryInfoMapItem::~InMemoryURLIndexCacheItem_HistoryInfoMapItem() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::SharedDtor() {
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InMemoryURLIndexCacheItem_HistoryInfoMapItem& InMemoryURLIndexCacheItem_HistoryInfoMapItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InMemoryURLIndexCacheItem_HistoryInfoMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto.base);
  return *internal_default_instance();
}


void InMemoryURLIndexCacheItem_HistoryInfoMapItem::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  history_info_map_entry_.Clear();
  item_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InMemoryURLIndexCacheItem_HistoryInfoMapItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 item_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_count(&has_bits);
          item_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry history_info_map_entry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_history_info_map_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InMemoryURLIndexCacheItem_HistoryInfoMapItem::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_count = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_item_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry history_info_map_entry = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_history_info_map_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 item_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->item_count(), output);
  }

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry history_info_map_entry = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_info_map_entry_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->history_info_map_entry(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
}

size_t InMemoryURLIndexCacheItem_HistoryInfoMapItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 item_count = 1;
  if (has_item_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->item_count());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem.HistoryInfoMapEntry history_info_map_entry = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->history_info_map_entry_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->history_info_map_entry(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const InMemoryURLIndexCacheItem_HistoryInfoMapItem*>(
      &from));
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::MergeFrom(const InMemoryURLIndexCacheItem_HistoryInfoMapItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  history_info_map_entry_.MergeFrom(from.history_info_map_entry_);
  if (from.has_item_count()) {
    set_item_count(from.item_count());
  }
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::CopyFrom(const InMemoryURLIndexCacheItem_HistoryInfoMapItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_HistoryInfoMapItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->history_info_map_entry())) return false;
  return true;
}

void InMemoryURLIndexCacheItem_HistoryInfoMapItem::InternalSwap(InMemoryURLIndexCacheItem_HistoryInfoMapItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&history_info_map_entry_)->InternalSwap(CastToBase(&other->history_info_map_entry_));
  swap(item_count_, other->item_count_);
}

std::string InMemoryURLIndexCacheItem_HistoryInfoMapItem::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem";
}


// ===================================================================

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::InitAsDefaultInstance() {
}
class InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry>()._has_bits_);
  static void set_has_history_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
}
InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry(const InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      url_word_starts_(from.url_word_starts_),
      title_word_starts_(from.title_word_starts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  history_id_ = from.history_id_;
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
}

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::SharedCtor() {
  history_id_ = PROTOBUF_LONGLONG(0);
}

InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::~InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::SharedDtor() {
}

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry& InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry_in_5fmemory_5furl_5findex_5fcache_2eproto.base);
  return *internal_default_instance();
}


void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_word_starts_.Clear();
  title_word_starts_.Clear();
  history_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 history_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_history_id(&has_bits);
          history_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 url_word_starts = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_url_word_starts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          add_url_word_starts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 title_word_starts = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_title_word_starts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_title_word_starts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 history_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_history_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &history_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 url_word_starts = 2 [packed = true];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_url_word_starts())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_url_word_starts())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 title_word_starts = 3 [packed = true];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_title_word_starts())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_title_word_starts())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 history_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->history_id(), output);
  }

  // repeated int32 url_word_starts = 2 [packed = true];
  if (this->url_word_starts_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_url_word_starts_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->url_word_starts_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->url_word_starts(i), output);
  }

  // repeated int32 title_word_starts = 3 [packed = true];
  if (this->title_word_starts_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_title_word_starts_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->title_word_starts_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->title_word_starts(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
}

size_t InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required int64 history_id = 1;
  if (has_history_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->history_id());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 url_word_starts = 2 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->url_word_starts_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _url_word_starts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 title_word_starts = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->title_word_starts_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _title_word_starts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry*>(
      &from));
}

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::MergeFrom(const InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  url_word_starts_.MergeFrom(from.url_word_starts_);
  title_word_starts_.MergeFrom(from.title_word_starts_);
  if (from.has_history_id()) {
    set_history_id(from.history_id());
  }
}

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::CopyFrom(const InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::InternalSwap(InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_word_starts_.InternalSwap(&other->url_word_starts_);
  title_word_starts_.InternalSwap(&other->title_word_starts_);
  swap(history_id_, other->history_id_);
}

std::string InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry";
}


// ===================================================================

void InMemoryURLIndexCacheItem_WordStartsMapItem::InitAsDefaultInstance() {
}
class InMemoryURLIndexCacheItem_WordStartsMapItem::_Internal {
 public:
  using HasBits = decltype(std::declval<InMemoryURLIndexCacheItem_WordStartsMapItem>()._has_bits_);
  static void set_has_item_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

InMemoryURLIndexCacheItem_WordStartsMapItem::InMemoryURLIndexCacheItem_WordStartsMapItem()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
}
InMemoryURLIndexCacheItem_WordStartsMapItem::InMemoryURLIndexCacheItem_WordStartsMapItem(const InMemoryURLIndexCacheItem_WordStartsMapItem& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      word_starts_map_entry_(from.word_starts_map_entry_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_count_ = from.item_count_;
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
}

void InMemoryURLIndexCacheItem_WordStartsMapItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InMemoryURLIndexCacheItem_WordStartsMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto.base);
  item_count_ = 0u;
}

InMemoryURLIndexCacheItem_WordStartsMapItem::~InMemoryURLIndexCacheItem_WordStartsMapItem() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  SharedDtor();
}

void InMemoryURLIndexCacheItem_WordStartsMapItem::SharedDtor() {
}

void InMemoryURLIndexCacheItem_WordStartsMapItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InMemoryURLIndexCacheItem_WordStartsMapItem& InMemoryURLIndexCacheItem_WordStartsMapItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InMemoryURLIndexCacheItem_WordStartsMapItem_in_5fmemory_5furl_5findex_5fcache_2eproto.base);
  return *internal_default_instance();
}


void InMemoryURLIndexCacheItem_WordStartsMapItem::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  word_starts_map_entry_.Clear();
  item_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InMemoryURLIndexCacheItem_WordStartsMapItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 item_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_count(&has_bits);
          item_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry word_starts_map_entry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_word_starts_map_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InMemoryURLIndexCacheItem_WordStartsMapItem::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_count = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_item_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry word_starts_map_entry = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_word_starts_map_entry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InMemoryURLIndexCacheItem_WordStartsMapItem::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 item_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->item_count(), output);
  }

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry word_starts_map_entry = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->word_starts_map_entry_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->word_starts_map_entry(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
}

size_t InMemoryURLIndexCacheItem_WordStartsMapItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required uint32 item_count = 1;
  if (has_item_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->item_count());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem.WordStartsMapEntry word_starts_map_entry = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->word_starts_map_entry_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->word_starts_map_entry(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InMemoryURLIndexCacheItem_WordStartsMapItem::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const InMemoryURLIndexCacheItem_WordStartsMapItem*>(
      &from));
}

void InMemoryURLIndexCacheItem_WordStartsMapItem::MergeFrom(const InMemoryURLIndexCacheItem_WordStartsMapItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  word_starts_map_entry_.MergeFrom(from.word_starts_map_entry_);
  if (from.has_item_count()) {
    set_item_count(from.item_count());
  }
}

void InMemoryURLIndexCacheItem_WordStartsMapItem::CopyFrom(const InMemoryURLIndexCacheItem_WordStartsMapItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem_WordStartsMapItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->word_starts_map_entry())) return false;
  return true;
}

void InMemoryURLIndexCacheItem_WordStartsMapItem::InternalSwap(InMemoryURLIndexCacheItem_WordStartsMapItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&word_starts_map_entry_)->InternalSwap(CastToBase(&other->word_starts_map_entry_));
  swap(item_count_, other->item_count_);
}

std::string InMemoryURLIndexCacheItem_WordStartsMapItem::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem";
}


// ===================================================================

void InMemoryURLIndexCacheItem::InitAsDefaultInstance() {
  ::in_memory_url_index::_InMemoryURLIndexCacheItem_default_instance_._instance.get_mutable()->word_list_ = const_cast< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem*>(
      ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem::internal_default_instance());
  ::in_memory_url_index::_InMemoryURLIndexCacheItem_default_instance_._instance.get_mutable()->word_map_ = const_cast< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem*>(
      ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem::internal_default_instance());
  ::in_memory_url_index::_InMemoryURLIndexCacheItem_default_instance_._instance.get_mutable()->char_word_map_ = const_cast< ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem*>(
      ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem::internal_default_instance());
  ::in_memory_url_index::_InMemoryURLIndexCacheItem_default_instance_._instance.get_mutable()->word_id_history_map_ = const_cast< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem*>(
      ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem::internal_default_instance());
  ::in_memory_url_index::_InMemoryURLIndexCacheItem_default_instance_._instance.get_mutable()->history_info_map_ = const_cast< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem*>(
      ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem::internal_default_instance());
  ::in_memory_url_index::_InMemoryURLIndexCacheItem_default_instance_._instance.get_mutable()->word_starts_map_ = const_cast< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem*>(
      ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem::internal_default_instance());
}
class InMemoryURLIndexCacheItem::_Internal {
 public:
  using HasBits = decltype(std::declval<InMemoryURLIndexCacheItem>()._has_bits_);
  static void set_has_last_rebuild_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_history_item_count(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem& word_list(const InMemoryURLIndexCacheItem* msg);
  static void set_has_word_list(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem& word_map(const InMemoryURLIndexCacheItem* msg);
  static void set_has_word_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem& char_word_map(const InMemoryURLIndexCacheItem* msg);
  static void set_has_char_word_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem& word_id_history_map(const InMemoryURLIndexCacheItem* msg);
  static void set_has_word_id_history_map(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem& history_info_map(const InMemoryURLIndexCacheItem* msg);
  static void set_has_history_info_map(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem& word_starts_map(const InMemoryURLIndexCacheItem* msg);
  static void set_has_word_starts_map(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem&
InMemoryURLIndexCacheItem::_Internal::word_list(const InMemoryURLIndexCacheItem* msg) {
  return *msg->word_list_;
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem&
InMemoryURLIndexCacheItem::_Internal::word_map(const InMemoryURLIndexCacheItem* msg) {
  return *msg->word_map_;
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem&
InMemoryURLIndexCacheItem::_Internal::char_word_map(const InMemoryURLIndexCacheItem* msg) {
  return *msg->char_word_map_;
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem&
InMemoryURLIndexCacheItem::_Internal::word_id_history_map(const InMemoryURLIndexCacheItem* msg) {
  return *msg->word_id_history_map_;
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem&
InMemoryURLIndexCacheItem::_Internal::history_info_map(const InMemoryURLIndexCacheItem* msg) {
  return *msg->history_info_map_;
}
const ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem&
InMemoryURLIndexCacheItem::_Internal::word_starts_map(const InMemoryURLIndexCacheItem* msg) {
  return *msg->word_starts_map_;
}
InMemoryURLIndexCacheItem::InMemoryURLIndexCacheItem()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:in_memory_url_index.InMemoryURLIndexCacheItem)
}
InMemoryURLIndexCacheItem::InMemoryURLIndexCacheItem(const InMemoryURLIndexCacheItem& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_word_list()) {
    word_list_ = new ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem(*from.word_list_);
  } else {
    word_list_ = nullptr;
  }
  if (from.has_word_map()) {
    word_map_ = new ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem(*from.word_map_);
  } else {
    word_map_ = nullptr;
  }
  if (from.has_char_word_map()) {
    char_word_map_ = new ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem(*from.char_word_map_);
  } else {
    char_word_map_ = nullptr;
  }
  if (from.has_word_id_history_map()) {
    word_id_history_map_ = new ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem(*from.word_id_history_map_);
  } else {
    word_id_history_map_ = nullptr;
  }
  if (from.has_history_info_map()) {
    history_info_map_ = new ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem(*from.history_info_map_);
  } else {
    history_info_map_ = nullptr;
  }
  if (from.has_word_starts_map()) {
    word_starts_map_ = new ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem(*from.word_starts_map_);
  } else {
    word_starts_map_ = nullptr;
  }
  ::memcpy(&last_rebuild_timestamp_, &from.last_rebuild_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&history_item_count_) -
    reinterpret_cast<char*>(&last_rebuild_timestamp_)) + sizeof(history_item_count_));
  // @@protoc_insertion_point(copy_constructor:in_memory_url_index.InMemoryURLIndexCacheItem)
}

void InMemoryURLIndexCacheItem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InMemoryURLIndexCacheItem_in_5fmemory_5furl_5findex_5fcache_2eproto.base);
  ::memset(&word_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&history_item_count_) -
      reinterpret_cast<char*>(&word_list_)) + sizeof(history_item_count_));
}

InMemoryURLIndexCacheItem::~InMemoryURLIndexCacheItem() {
  // @@protoc_insertion_point(destructor:in_memory_url_index.InMemoryURLIndexCacheItem)
  SharedDtor();
}

void InMemoryURLIndexCacheItem::SharedDtor() {
  if (this != internal_default_instance()) delete word_list_;
  if (this != internal_default_instance()) delete word_map_;
  if (this != internal_default_instance()) delete char_word_map_;
  if (this != internal_default_instance()) delete word_id_history_map_;
  if (this != internal_default_instance()) delete history_info_map_;
  if (this != internal_default_instance()) delete word_starts_map_;
}

void InMemoryURLIndexCacheItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InMemoryURLIndexCacheItem& InMemoryURLIndexCacheItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InMemoryURLIndexCacheItem_in_5fmemory_5furl_5findex_5fcache_2eproto.base);
  return *internal_default_instance();
}


void InMemoryURLIndexCacheItem::Clear() {
// @@protoc_insertion_point(message_clear_start:in_memory_url_index.InMemoryURLIndexCacheItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(word_list_ != nullptr);
      word_list_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(word_map_ != nullptr);
      word_map_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(char_word_map_ != nullptr);
      char_word_map_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(word_id_history_map_ != nullptr);
      word_id_history_map_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(history_info_map_ != nullptr);
      history_info_map_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(word_starts_map_ != nullptr);
      word_starts_map_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&last_rebuild_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_) -
        reinterpret_cast<char*>(&last_rebuild_timestamp_)) + sizeof(version_));
  }
  history_item_count_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InMemoryURLIndexCacheItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 last_rebuild_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_last_rebuild_timestamp(&has_bits);
          last_rebuild_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 history_item_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_history_item_count(&has_bits);
          history_item_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem word_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_word_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem word_map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_word_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem char_word_map = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_char_word_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem word_id_history_map = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_word_id_history_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem history_info_map = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_history_info_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem word_starts_map = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_word_starts_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InMemoryURLIndexCacheItem::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:in_memory_url_index.InMemoryURLIndexCacheItem)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 last_rebuild_timestamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_last_rebuild_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_rebuild_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 history_item_count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_history_item_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &history_item_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem word_list = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_word_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem word_map = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_word_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem char_word_map = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_char_word_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem word_id_history_map = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_word_id_history_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem history_info_map = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_history_info_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem word_starts_map = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_word_starts_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:in_memory_url_index.InMemoryURLIndexCacheItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:in_memory_url_index.InMemoryURLIndexCacheItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InMemoryURLIndexCacheItem::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:in_memory_url_index.InMemoryURLIndexCacheItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 last_rebuild_timestamp = 1;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->last_rebuild_timestamp(), output);
  }

  // optional int32 version = 2;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->version(), output);
  }

  // required int32 history_item_count = 3;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->history_item_count(), output);
  }

  // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem word_list = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::word_list(this), output);
  }

  // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem word_map = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::word_map(this), output);
  }

  // optional .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem char_word_map = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::char_word_map(this), output);
  }

  // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem word_id_history_map = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::word_id_history_map(this), output);
  }

  // optional .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem history_info_map = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::history_info_map(this), output);
  }

  // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem word_starts_map = 9;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::word_starts_map(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:in_memory_url_index.InMemoryURLIndexCacheItem)
}

size_t InMemoryURLIndexCacheItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:in_memory_url_index.InMemoryURLIndexCacheItem)
  size_t total_size = 0;

  if (has_last_rebuild_timestamp()) {
    // required int64 last_rebuild_timestamp = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->last_rebuild_timestamp());
  }

  if (has_history_item_count()) {
    // required int32 history_item_count = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->history_item_count());
  }

  return total_size;
}
size_t InMemoryURLIndexCacheItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:in_memory_url_index.InMemoryURLIndexCacheItem)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000140) ^ 0x00000140) == 0) {  // All required fields are present.
    // required int64 last_rebuild_timestamp = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->last_rebuild_timestamp());

    // required int32 history_item_count = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->history_item_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordListItem word_list = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *word_list_);
    }

    // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordMapItem word_map = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *word_map_);
    }

    // optional .in_memory_url_index.InMemoryURLIndexCacheItem.CharWordMapItem char_word_map = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *char_word_map_);
    }

    // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordIDHistoryMapItem word_id_history_map = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *word_id_history_map_);
    }

    // optional .in_memory_url_index.InMemoryURLIndexCacheItem.HistoryInfoMapItem history_info_map = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *history_info_map_);
    }

    // optional .in_memory_url_index.InMemoryURLIndexCacheItem.WordStartsMapItem word_starts_map = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *word_starts_map_);
    }

  }
  // optional int32 version = 2;
  if (cached_has_bits & 0x00000080u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->version());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InMemoryURLIndexCacheItem::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const InMemoryURLIndexCacheItem*>(
      &from));
}

void InMemoryURLIndexCacheItem::MergeFrom(const InMemoryURLIndexCacheItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:in_memory_url_index.InMemoryURLIndexCacheItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_word_list()->::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem::MergeFrom(from.word_list());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_word_map()->::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem::MergeFrom(from.word_map());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_char_word_map()->::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem::MergeFrom(from.char_word_map());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_word_id_history_map()->::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem::MergeFrom(from.word_id_history_map());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_history_info_map()->::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem::MergeFrom(from.history_info_map());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_word_starts_map()->::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem::MergeFrom(from.word_starts_map());
    }
    if (cached_has_bits & 0x00000040u) {
      last_rebuild_timestamp_ = from.last_rebuild_timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_history_item_count(from.history_item_count());
  }
}

void InMemoryURLIndexCacheItem::CopyFrom(const InMemoryURLIndexCacheItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:in_memory_url_index.InMemoryURLIndexCacheItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InMemoryURLIndexCacheItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000140) != 0x00000140) return false;
  if (has_word_list()) {
    if (!this->word_list_->IsInitialized()) return false;
  }
  if (has_word_map()) {
    if (!this->word_map_->IsInitialized()) return false;
  }
  if (has_char_word_map()) {
    if (!this->char_word_map_->IsInitialized()) return false;
  }
  if (has_word_id_history_map()) {
    if (!this->word_id_history_map_->IsInitialized()) return false;
  }
  if (has_history_info_map()) {
    if (!this->history_info_map_->IsInitialized()) return false;
  }
  if (has_word_starts_map()) {
    if (!this->word_starts_map_->IsInitialized()) return false;
  }
  return true;
}

void InMemoryURLIndexCacheItem::InternalSwap(InMemoryURLIndexCacheItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(word_list_, other->word_list_);
  swap(word_map_, other->word_map_);
  swap(char_word_map_, other->char_word_map_);
  swap(word_id_history_map_, other->word_id_history_map_);
  swap(history_info_map_, other->history_info_map_);
  swap(word_starts_map_, other->word_starts_map_);
  swap(last_rebuild_timestamp_, other->last_rebuild_timestamp_);
  swap(version_, other->version_);
  swap(history_item_count_, other->history_item_count_);
}

std::string InMemoryURLIndexCacheItem::GetTypeName() const {
  return "in_memory_url_index.InMemoryURLIndexCacheItem";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace in_memory_url_index
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem* Arena::CreateMaybeMessage< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem >(Arena* arena) {
  return Arena::CreateInternal< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordListItem >(arena);
}
template<> PROTOBUF_NOINLINE ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry* Arena::CreateMaybeMessage< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry >(Arena* arena) {
  return Arena::CreateInternal< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem_WordMapEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem* Arena::CreateMaybeMessage< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem >(Arena* arena) {
  return Arena::CreateInternal< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordMapItem >(arena);
}
template<> PROTOBUF_NOINLINE ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry* Arena::CreateMaybeMessage< ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry >(Arena* arena) {
  return Arena::CreateInternal< ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem_CharWordMapEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem* Arena::CreateMaybeMessage< ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem >(Arena* arena) {
  return Arena::CreateInternal< ::in_memory_url_index::InMemoryURLIndexCacheItem_CharWordMapItem >(arena);
}
template<> PROTOBUF_NOINLINE ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry* Arena::CreateMaybeMessage< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry >(Arena* arena) {
  return Arena::CreateInternal< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem_WordIDHistoryMapEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem* Arena::CreateMaybeMessage< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem >(Arena* arena) {
  return Arena::CreateInternal< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordIDHistoryMapItem >(arena);
}
template<> PROTOBUF_NOINLINE ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo* Arena::CreateMaybeMessage< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo >(Arena* arena) {
  return Arena::CreateInternal< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry_VisitInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry* Arena::CreateMaybeMessage< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry >(Arena* arena) {
  return Arena::CreateInternal< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem_HistoryInfoMapEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem* Arena::CreateMaybeMessage< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem >(Arena* arena) {
  return Arena::CreateInternal< ::in_memory_url_index::InMemoryURLIndexCacheItem_HistoryInfoMapItem >(arena);
}
template<> PROTOBUF_NOINLINE ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry* Arena::CreateMaybeMessage< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry >(Arena* arena) {
  return Arena::CreateInternal< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem_WordStartsMapEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem* Arena::CreateMaybeMessage< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem >(Arena* arena) {
  return Arena::CreateInternal< ::in_memory_url_index::InMemoryURLIndexCacheItem_WordStartsMapItem >(arena);
}
template<> PROTOBUF_NOINLINE ::in_memory_url_index::InMemoryURLIndexCacheItem* Arena::CreateMaybeMessage< ::in_memory_url_index::InMemoryURLIndexCacheItem >(Arena* arena) {
  return Arena::CreateInternal< ::in_memory_url_index::InMemoryURLIndexCacheItem >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: site_data.proto

#include "site_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_site_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SiteDataFeatureProto_site_5fdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_site_5fdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SiteDataPerformanceMeasurement_site_5fdata_2eproto;
class SiteDataFeatureProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SiteDataFeatureProto> _instance;
} _SiteDataFeatureProto_default_instance_;
class SiteDataPerformanceMeasurementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SiteDataPerformanceMeasurement> _instance;
} _SiteDataPerformanceMeasurement_default_instance_;
class SiteDataProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SiteDataProto> _instance;
} _SiteDataProto_default_instance_;
static void InitDefaultsscc_info_SiteDataFeatureProto_site_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SiteDataFeatureProto_default_instance_;
    new (ptr) ::SiteDataFeatureProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SiteDataFeatureProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SiteDataFeatureProto_site_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SiteDataFeatureProto_site_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_SiteDataPerformanceMeasurement_site_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SiteDataPerformanceMeasurement_default_instance_;
    new (ptr) ::SiteDataPerformanceMeasurement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SiteDataPerformanceMeasurement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SiteDataPerformanceMeasurement_site_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SiteDataPerformanceMeasurement_site_5fdata_2eproto}, {}};

static void InitDefaultsscc_info_SiteDataProto_site_5fdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SiteDataProto_default_instance_;
    new (ptr) ::SiteDataProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SiteDataProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SiteDataProto_site_5fdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SiteDataProto_site_5fdata_2eproto}, {
      &scc_info_SiteDataFeatureProto_site_5fdata_2eproto.base,
      &scc_info_SiteDataPerformanceMeasurement_site_5fdata_2eproto.base,}};


// ===================================================================

void SiteDataFeatureProto::InitAsDefaultInstance() {
}
class SiteDataFeatureProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SiteDataFeatureProto>()._has_bits_);
  static void set_has_observation_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_use_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SiteDataFeatureProto::SiteDataFeatureProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SiteDataFeatureProto)
}
SiteDataFeatureProto::SiteDataFeatureProto(const SiteDataFeatureProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&observation_duration_, &from.observation_duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_timestamp_) -
    reinterpret_cast<char*>(&observation_duration_)) + sizeof(use_timestamp_));
  // @@protoc_insertion_point(copy_constructor:SiteDataFeatureProto)
}

void SiteDataFeatureProto::SharedCtor() {
  ::memset(&observation_duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_timestamp_) -
      reinterpret_cast<char*>(&observation_duration_)) + sizeof(use_timestamp_));
}

SiteDataFeatureProto::~SiteDataFeatureProto() {
  // @@protoc_insertion_point(destructor:SiteDataFeatureProto)
  SharedDtor();
}

void SiteDataFeatureProto::SharedDtor() {
}

void SiteDataFeatureProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiteDataFeatureProto& SiteDataFeatureProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SiteDataFeatureProto_site_5fdata_2eproto.base);
  return *internal_default_instance();
}


void SiteDataFeatureProto::Clear() {
// @@protoc_insertion_point(message_clear_start:SiteDataFeatureProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&observation_duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_timestamp_) -
        reinterpret_cast<char*>(&observation_duration_)) + sizeof(use_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SiteDataFeatureProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 observation_duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_observation_duration(&has_bits);
          observation_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 use_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_use_timestamp(&has_bits);
          use_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SiteDataFeatureProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:SiteDataFeatureProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 observation_duration = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_observation_duration(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &observation_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 use_timestamp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_use_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &use_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SiteDataFeatureProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SiteDataFeatureProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SiteDataFeatureProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SiteDataFeatureProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 observation_duration = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->observation_duration(), output);
  }

  // optional int64 use_timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->use_timestamp(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:SiteDataFeatureProto)
}

size_t SiteDataFeatureProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SiteDataFeatureProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 observation_duration = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->observation_duration());
    }

    // optional int64 use_timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->use_timestamp());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteDataFeatureProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SiteDataFeatureProto*>(
      &from));
}

void SiteDataFeatureProto::MergeFrom(const SiteDataFeatureProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SiteDataFeatureProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      observation_duration_ = from.observation_duration_;
    }
    if (cached_has_bits & 0x00000002u) {
      use_timestamp_ = from.use_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SiteDataFeatureProto::CopyFrom(const SiteDataFeatureProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SiteDataFeatureProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteDataFeatureProto::IsInitialized() const {
  return true;
}

void SiteDataFeatureProto::InternalSwap(SiteDataFeatureProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(observation_duration_, other->observation_duration_);
  swap(use_timestamp_, other->use_timestamp_);
}

std::string SiteDataFeatureProto::GetTypeName() const {
  return "SiteDataFeatureProto";
}


// ===================================================================

void SiteDataPerformanceMeasurement::InitAsDefaultInstance() {
}
class SiteDataPerformanceMeasurement::_Internal {
 public:
  using HasBits = decltype(std::declval<SiteDataPerformanceMeasurement>()._has_bits_);
  static void set_has_avg_cpu_usage_us(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_avg_footprint_kb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_avg_load_duration_us(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SiteDataPerformanceMeasurement::SiteDataPerformanceMeasurement()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SiteDataPerformanceMeasurement)
}
SiteDataPerformanceMeasurement::SiteDataPerformanceMeasurement(const SiteDataPerformanceMeasurement& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&avg_cpu_usage_us_, &from.avg_cpu_usage_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&avg_load_duration_us_) -
    reinterpret_cast<char*>(&avg_cpu_usage_us_)) + sizeof(avg_load_duration_us_));
  // @@protoc_insertion_point(copy_constructor:SiteDataPerformanceMeasurement)
}

void SiteDataPerformanceMeasurement::SharedCtor() {
  ::memset(&avg_cpu_usage_us_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avg_load_duration_us_) -
      reinterpret_cast<char*>(&avg_cpu_usage_us_)) + sizeof(avg_load_duration_us_));
}

SiteDataPerformanceMeasurement::~SiteDataPerformanceMeasurement() {
  // @@protoc_insertion_point(destructor:SiteDataPerformanceMeasurement)
  SharedDtor();
}

void SiteDataPerformanceMeasurement::SharedDtor() {
}

void SiteDataPerformanceMeasurement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiteDataPerformanceMeasurement& SiteDataPerformanceMeasurement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SiteDataPerformanceMeasurement_site_5fdata_2eproto.base);
  return *internal_default_instance();
}


void SiteDataPerformanceMeasurement::Clear() {
// @@protoc_insertion_point(message_clear_start:SiteDataPerformanceMeasurement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&avg_cpu_usage_us_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&avg_load_duration_us_) -
        reinterpret_cast<char*>(&avg_cpu_usage_us_)) + sizeof(avg_load_duration_us_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SiteDataPerformanceMeasurement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float avg_cpu_usage_us = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_avg_cpu_usage_us(&has_bits);
          avg_cpu_usage_us_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float avg_footprint_kb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_avg_footprint_kb(&has_bits);
          avg_footprint_kb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float avg_load_duration_us = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_avg_load_duration_us(&has_bits);
          avg_load_duration_us_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SiteDataPerformanceMeasurement::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:SiteDataPerformanceMeasurement)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float avg_cpu_usage_us = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_avg_cpu_usage_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &avg_cpu_usage_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float avg_footprint_kb = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_avg_footprint_kb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &avg_footprint_kb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float avg_load_duration_us = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_avg_load_duration_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &avg_load_duration_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SiteDataPerformanceMeasurement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SiteDataPerformanceMeasurement)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SiteDataPerformanceMeasurement::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SiteDataPerformanceMeasurement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float avg_cpu_usage_us = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->avg_cpu_usage_us(), output);
  }

  // optional float avg_footprint_kb = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->avg_footprint_kb(), output);
  }

  // optional float avg_load_duration_us = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->avg_load_duration_us(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:SiteDataPerformanceMeasurement)
}

size_t SiteDataPerformanceMeasurement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SiteDataPerformanceMeasurement)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float avg_cpu_usage_us = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float avg_footprint_kb = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float avg_load_duration_us = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteDataPerformanceMeasurement::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SiteDataPerformanceMeasurement*>(
      &from));
}

void SiteDataPerformanceMeasurement::MergeFrom(const SiteDataPerformanceMeasurement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SiteDataPerformanceMeasurement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      avg_cpu_usage_us_ = from.avg_cpu_usage_us_;
    }
    if (cached_has_bits & 0x00000002u) {
      avg_footprint_kb_ = from.avg_footprint_kb_;
    }
    if (cached_has_bits & 0x00000004u) {
      avg_load_duration_us_ = from.avg_load_duration_us_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SiteDataPerformanceMeasurement::CopyFrom(const SiteDataPerformanceMeasurement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SiteDataPerformanceMeasurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteDataPerformanceMeasurement::IsInitialized() const {
  return true;
}

void SiteDataPerformanceMeasurement::InternalSwap(SiteDataPerformanceMeasurement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(avg_cpu_usage_us_, other->avg_cpu_usage_us_);
  swap(avg_footprint_kb_, other->avg_footprint_kb_);
  swap(avg_load_duration_us_, other->avg_load_duration_us_);
}

std::string SiteDataPerformanceMeasurement::GetTypeName() const {
  return "SiteDataPerformanceMeasurement";
}


// ===================================================================

void SiteDataProto::InitAsDefaultInstance() {
  ::_SiteDataProto_default_instance_._instance.get_mutable()->updates_favicon_in_background_ = const_cast< ::SiteDataFeatureProto*>(
      ::SiteDataFeatureProto::internal_default_instance());
  ::_SiteDataProto_default_instance_._instance.get_mutable()->updates_title_in_background_ = const_cast< ::SiteDataFeatureProto*>(
      ::SiteDataFeatureProto::internal_default_instance());
  ::_SiteDataProto_default_instance_._instance.get_mutable()->uses_audio_in_background_ = const_cast< ::SiteDataFeatureProto*>(
      ::SiteDataFeatureProto::internal_default_instance());
  ::_SiteDataProto_default_instance_._instance.get_mutable()->deprecated_uses_notifications_in_background_ = const_cast< ::SiteDataFeatureProto*>(
      ::SiteDataFeatureProto::internal_default_instance());
  ::_SiteDataProto_default_instance_._instance.get_mutable()->load_time_estimates_ = const_cast< ::SiteDataPerformanceMeasurement*>(
      ::SiteDataPerformanceMeasurement::internal_default_instance());
}
class SiteDataProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SiteDataProto>()._has_bits_);
  static void set_has_last_loaded(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::SiteDataFeatureProto& updates_favicon_in_background(const SiteDataProto* msg);
  static void set_has_updates_favicon_in_background(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::SiteDataFeatureProto& updates_title_in_background(const SiteDataProto* msg);
  static void set_has_updates_title_in_background(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::SiteDataFeatureProto& uses_audio_in_background(const SiteDataProto* msg);
  static void set_has_uses_audio_in_background(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::SiteDataFeatureProto& deprecated_uses_notifications_in_background(const SiteDataProto* msg);
  static void set_has_deprecated_uses_notifications_in_background(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::SiteDataPerformanceMeasurement& load_time_estimates(const SiteDataProto* msg);
  static void set_has_load_time_estimates(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::SiteDataFeatureProto&
SiteDataProto::_Internal::updates_favicon_in_background(const SiteDataProto* msg) {
  return *msg->updates_favicon_in_background_;
}
const ::SiteDataFeatureProto&
SiteDataProto::_Internal::updates_title_in_background(const SiteDataProto* msg) {
  return *msg->updates_title_in_background_;
}
const ::SiteDataFeatureProto&
SiteDataProto::_Internal::uses_audio_in_background(const SiteDataProto* msg) {
  return *msg->uses_audio_in_background_;
}
const ::SiteDataFeatureProto&
SiteDataProto::_Internal::deprecated_uses_notifications_in_background(const SiteDataProto* msg) {
  return *msg->deprecated_uses_notifications_in_background_;
}
const ::SiteDataPerformanceMeasurement&
SiteDataProto::_Internal::load_time_estimates(const SiteDataProto* msg) {
  return *msg->load_time_estimates_;
}
SiteDataProto::SiteDataProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SiteDataProto)
}
SiteDataProto::SiteDataProto(const SiteDataProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_updates_favicon_in_background()) {
    updates_favicon_in_background_ = new ::SiteDataFeatureProto(*from.updates_favicon_in_background_);
  } else {
    updates_favicon_in_background_ = nullptr;
  }
  if (from.has_updates_title_in_background()) {
    updates_title_in_background_ = new ::SiteDataFeatureProto(*from.updates_title_in_background_);
  } else {
    updates_title_in_background_ = nullptr;
  }
  if (from.has_uses_audio_in_background()) {
    uses_audio_in_background_ = new ::SiteDataFeatureProto(*from.uses_audio_in_background_);
  } else {
    uses_audio_in_background_ = nullptr;
  }
  if (from.has_deprecated_uses_notifications_in_background()) {
    deprecated_uses_notifications_in_background_ = new ::SiteDataFeatureProto(*from.deprecated_uses_notifications_in_background_);
  } else {
    deprecated_uses_notifications_in_background_ = nullptr;
  }
  if (from.has_load_time_estimates()) {
    load_time_estimates_ = new ::SiteDataPerformanceMeasurement(*from.load_time_estimates_);
  } else {
    load_time_estimates_ = nullptr;
  }
  last_loaded_ = from.last_loaded_;
  // @@protoc_insertion_point(copy_constructor:SiteDataProto)
}

void SiteDataProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SiteDataProto_site_5fdata_2eproto.base);
  ::memset(&updates_favicon_in_background_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_loaded_) -
      reinterpret_cast<char*>(&updates_favicon_in_background_)) + sizeof(last_loaded_));
}

SiteDataProto::~SiteDataProto() {
  // @@protoc_insertion_point(destructor:SiteDataProto)
  SharedDtor();
}

void SiteDataProto::SharedDtor() {
  if (this != internal_default_instance()) delete updates_favicon_in_background_;
  if (this != internal_default_instance()) delete updates_title_in_background_;
  if (this != internal_default_instance()) delete uses_audio_in_background_;
  if (this != internal_default_instance()) delete deprecated_uses_notifications_in_background_;
  if (this != internal_default_instance()) delete load_time_estimates_;
}

void SiteDataProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiteDataProto& SiteDataProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SiteDataProto_site_5fdata_2eproto.base);
  return *internal_default_instance();
}


void SiteDataProto::Clear() {
// @@protoc_insertion_point(message_clear_start:SiteDataProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(updates_favicon_in_background_ != nullptr);
      updates_favicon_in_background_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(updates_title_in_background_ != nullptr);
      updates_title_in_background_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(uses_audio_in_background_ != nullptr);
      uses_audio_in_background_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(deprecated_uses_notifications_in_background_ != nullptr);
      deprecated_uses_notifications_in_background_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(load_time_estimates_ != nullptr);
      load_time_estimates_->Clear();
    }
  }
  last_loaded_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SiteDataProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 last_loaded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_last_loaded(&has_bits);
          last_loaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SiteDataFeatureProto updates_favicon_in_background = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_updates_favicon_in_background(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SiteDataFeatureProto updates_title_in_background = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_updates_title_in_background(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SiteDataFeatureProto uses_audio_in_background = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_uses_audio_in_background(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SiteDataFeatureProto deprecated_uses_notifications_in_background = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_deprecated_uses_notifications_in_background(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .SiteDataPerformanceMeasurement load_time_estimates = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_load_time_estimates(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SiteDataProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:SiteDataProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 last_loaded = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_last_loaded(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_loaded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SiteDataFeatureProto updates_favicon_in_background = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_updates_favicon_in_background()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SiteDataFeatureProto updates_title_in_background = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_updates_title_in_background()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SiteDataFeatureProto uses_audio_in_background = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_uses_audio_in_background()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SiteDataFeatureProto deprecated_uses_notifications_in_background = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_deprecated_uses_notifications_in_background()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SiteDataPerformanceMeasurement load_time_estimates = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_load_time_estimates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SiteDataProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SiteDataProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SiteDataProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SiteDataProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 last_loaded = 1;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->last_loaded(), output);
  }

  // optional .SiteDataFeatureProto updates_favicon_in_background = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::updates_favicon_in_background(this), output);
  }

  // optional .SiteDataFeatureProto updates_title_in_background = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::updates_title_in_background(this), output);
  }

  // optional .SiteDataFeatureProto uses_audio_in_background = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::uses_audio_in_background(this), output);
  }

  // optional .SiteDataFeatureProto deprecated_uses_notifications_in_background = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5, _Internal::deprecated_uses_notifications_in_background(this), output);
  }

  // optional .SiteDataPerformanceMeasurement load_time_estimates = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::load_time_estimates(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:SiteDataProto)
}

size_t SiteDataProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SiteDataProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .SiteDataFeatureProto updates_favicon_in_background = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *updates_favicon_in_background_);
    }

    // optional .SiteDataFeatureProto updates_title_in_background = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *updates_title_in_background_);
    }

    // optional .SiteDataFeatureProto uses_audio_in_background = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uses_audio_in_background_);
    }

    // optional .SiteDataFeatureProto deprecated_uses_notifications_in_background = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *deprecated_uses_notifications_in_background_);
    }

    // optional .SiteDataPerformanceMeasurement load_time_estimates = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *load_time_estimates_);
    }

    // optional uint32 last_loaded = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->last_loaded());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteDataProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SiteDataProto*>(
      &from));
}

void SiteDataProto::MergeFrom(const SiteDataProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SiteDataProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_updates_favicon_in_background()->::SiteDataFeatureProto::MergeFrom(from.updates_favicon_in_background());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_updates_title_in_background()->::SiteDataFeatureProto::MergeFrom(from.updates_title_in_background());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_uses_audio_in_background()->::SiteDataFeatureProto::MergeFrom(from.uses_audio_in_background());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_deprecated_uses_notifications_in_background()->::SiteDataFeatureProto::MergeFrom(from.deprecated_uses_notifications_in_background());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_load_time_estimates()->::SiteDataPerformanceMeasurement::MergeFrom(from.load_time_estimates());
    }
    if (cached_has_bits & 0x00000020u) {
      last_loaded_ = from.last_loaded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SiteDataProto::CopyFrom(const SiteDataProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SiteDataProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteDataProto::IsInitialized() const {
  return true;
}

void SiteDataProto::InternalSwap(SiteDataProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(updates_favicon_in_background_, other->updates_favicon_in_background_);
  swap(updates_title_in_background_, other->updates_title_in_background_);
  swap(uses_audio_in_background_, other->uses_audio_in_background_);
  swap(deprecated_uses_notifications_in_background_, other->deprecated_uses_notifications_in_background_);
  swap(load_time_estimates_, other->load_time_estimates_);
  swap(last_loaded_, other->last_loaded_);
}

std::string SiteDataProto::GetTypeName() const {
  return "SiteDataProto";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SiteDataFeatureProto* Arena::CreateMaybeMessage< ::SiteDataFeatureProto >(Arena* arena) {
  return Arena::CreateInternal< ::SiteDataFeatureProto >(arena);
}
template<> PROTOBUF_NOINLINE ::SiteDataPerformanceMeasurement* Arena::CreateMaybeMessage< ::SiteDataPerformanceMeasurement >(Arena* arena) {
  return Arena::CreateInternal< ::SiteDataPerformanceMeasurement >(arena);
}
template<> PROTOBUF_NOINLINE ::SiteDataProto* Arena::CreateMaybeMessage< ::SiteDataProto >(Arena* arena) {
  return Arena::CreateInternal< ::SiteDataProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

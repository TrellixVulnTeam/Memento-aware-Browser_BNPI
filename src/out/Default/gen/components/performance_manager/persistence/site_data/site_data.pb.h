// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: site_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_site_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_site_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_site_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_site_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
class SiteDataFeatureProto;
class SiteDataFeatureProtoDefaultTypeInternal;
extern SiteDataFeatureProtoDefaultTypeInternal _SiteDataFeatureProto_default_instance_;
class SiteDataPerformanceMeasurement;
class SiteDataPerformanceMeasurementDefaultTypeInternal;
extern SiteDataPerformanceMeasurementDefaultTypeInternal _SiteDataPerformanceMeasurement_default_instance_;
class SiteDataProto;
class SiteDataProtoDefaultTypeInternal;
extern SiteDataProtoDefaultTypeInternal _SiteDataProto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::SiteDataFeatureProto* Arena::CreateMaybeMessage<::SiteDataFeatureProto>(Arena*);
template<> ::SiteDataPerformanceMeasurement* Arena::CreateMaybeMessage<::SiteDataPerformanceMeasurement>(Arena*);
template<> ::SiteDataProto* Arena::CreateMaybeMessage<::SiteDataProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class SiteDataFeatureProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:SiteDataFeatureProto) */ {
 public:
  SiteDataFeatureProto();
  virtual ~SiteDataFeatureProto();

  SiteDataFeatureProto(const SiteDataFeatureProto& from);
  SiteDataFeatureProto(SiteDataFeatureProto&& from) noexcept
    : SiteDataFeatureProto() {
    *this = ::std::move(from);
  }

  inline SiteDataFeatureProto& operator=(const SiteDataFeatureProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteDataFeatureProto& operator=(SiteDataFeatureProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SiteDataFeatureProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SiteDataFeatureProto* internal_default_instance() {
    return reinterpret_cast<const SiteDataFeatureProto*>(
               &_SiteDataFeatureProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SiteDataFeatureProto& a, SiteDataFeatureProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteDataFeatureProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SiteDataFeatureProto* New() const final {
    return CreateMaybeMessage<SiteDataFeatureProto>(nullptr);
  }

  SiteDataFeatureProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SiteDataFeatureProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SiteDataFeatureProto& from);
  void MergeFrom(const SiteDataFeatureProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SiteDataFeatureProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SiteDataFeatureProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObservationDurationFieldNumber = 1,
    kUseTimestampFieldNumber = 2,
  };
  // optional int64 observation_duration = 1;
  bool has_observation_duration() const;
  void clear_observation_duration();
  ::PROTOBUF_NAMESPACE_ID::int64 observation_duration() const;
  void set_observation_duration(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 use_timestamp = 2;
  bool has_use_timestamp() const;
  void clear_use_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 use_timestamp() const;
  void set_use_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:SiteDataFeatureProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 observation_duration_;
  ::PROTOBUF_NAMESPACE_ID::int64 use_timestamp_;
  friend struct ::TableStruct_site_5fdata_2eproto;
};
// -------------------------------------------------------------------

class SiteDataPerformanceMeasurement :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:SiteDataPerformanceMeasurement) */ {
 public:
  SiteDataPerformanceMeasurement();
  virtual ~SiteDataPerformanceMeasurement();

  SiteDataPerformanceMeasurement(const SiteDataPerformanceMeasurement& from);
  SiteDataPerformanceMeasurement(SiteDataPerformanceMeasurement&& from) noexcept
    : SiteDataPerformanceMeasurement() {
    *this = ::std::move(from);
  }

  inline SiteDataPerformanceMeasurement& operator=(const SiteDataPerformanceMeasurement& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteDataPerformanceMeasurement& operator=(SiteDataPerformanceMeasurement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SiteDataPerformanceMeasurement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SiteDataPerformanceMeasurement* internal_default_instance() {
    return reinterpret_cast<const SiteDataPerformanceMeasurement*>(
               &_SiteDataPerformanceMeasurement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SiteDataPerformanceMeasurement& a, SiteDataPerformanceMeasurement& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteDataPerformanceMeasurement* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SiteDataPerformanceMeasurement* New() const final {
    return CreateMaybeMessage<SiteDataPerformanceMeasurement>(nullptr);
  }

  SiteDataPerformanceMeasurement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SiteDataPerformanceMeasurement>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SiteDataPerformanceMeasurement& from);
  void MergeFrom(const SiteDataPerformanceMeasurement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SiteDataPerformanceMeasurement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SiteDataPerformanceMeasurement";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvgCpuUsageUsFieldNumber = 1,
    kAvgFootprintKbFieldNumber = 2,
    kAvgLoadDurationUsFieldNumber = 3,
  };
  // optional float avg_cpu_usage_us = 1;
  bool has_avg_cpu_usage_us() const;
  void clear_avg_cpu_usage_us();
  float avg_cpu_usage_us() const;
  void set_avg_cpu_usage_us(float value);

  // optional float avg_footprint_kb = 2;
  bool has_avg_footprint_kb() const;
  void clear_avg_footprint_kb();
  float avg_footprint_kb() const;
  void set_avg_footprint_kb(float value);

  // optional float avg_load_duration_us = 3;
  bool has_avg_load_duration_us() const;
  void clear_avg_load_duration_us();
  float avg_load_duration_us() const;
  void set_avg_load_duration_us(float value);

  // @@protoc_insertion_point(class_scope:SiteDataPerformanceMeasurement)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float avg_cpu_usage_us_;
  float avg_footprint_kb_;
  float avg_load_duration_us_;
  friend struct ::TableStruct_site_5fdata_2eproto;
};
// -------------------------------------------------------------------

class SiteDataProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:SiteDataProto) */ {
 public:
  SiteDataProto();
  virtual ~SiteDataProto();

  SiteDataProto(const SiteDataProto& from);
  SiteDataProto(SiteDataProto&& from) noexcept
    : SiteDataProto() {
    *this = ::std::move(from);
  }

  inline SiteDataProto& operator=(const SiteDataProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteDataProto& operator=(SiteDataProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SiteDataProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SiteDataProto* internal_default_instance() {
    return reinterpret_cast<const SiteDataProto*>(
               &_SiteDataProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SiteDataProto& a, SiteDataProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteDataProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SiteDataProto* New() const final {
    return CreateMaybeMessage<SiteDataProto>(nullptr);
  }

  SiteDataProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SiteDataProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SiteDataProto& from);
  void MergeFrom(const SiteDataProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SiteDataProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SiteDataProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatesFaviconInBackgroundFieldNumber = 2,
    kUpdatesTitleInBackgroundFieldNumber = 3,
    kUsesAudioInBackgroundFieldNumber = 4,
    kDeprecatedUsesNotificationsInBackgroundFieldNumber = 5,
    kLoadTimeEstimatesFieldNumber = 6,
    kLastLoadedFieldNumber = 1,
  };
  // optional .SiteDataFeatureProto updates_favicon_in_background = 2;
  bool has_updates_favicon_in_background() const;
  void clear_updates_favicon_in_background();
  const ::SiteDataFeatureProto& updates_favicon_in_background() const;
  ::SiteDataFeatureProto* release_updates_favicon_in_background();
  ::SiteDataFeatureProto* mutable_updates_favicon_in_background();
  void set_allocated_updates_favicon_in_background(::SiteDataFeatureProto* updates_favicon_in_background);

  // optional .SiteDataFeatureProto updates_title_in_background = 3;
  bool has_updates_title_in_background() const;
  void clear_updates_title_in_background();
  const ::SiteDataFeatureProto& updates_title_in_background() const;
  ::SiteDataFeatureProto* release_updates_title_in_background();
  ::SiteDataFeatureProto* mutable_updates_title_in_background();
  void set_allocated_updates_title_in_background(::SiteDataFeatureProto* updates_title_in_background);

  // optional .SiteDataFeatureProto uses_audio_in_background = 4;
  bool has_uses_audio_in_background() const;
  void clear_uses_audio_in_background();
  const ::SiteDataFeatureProto& uses_audio_in_background() const;
  ::SiteDataFeatureProto* release_uses_audio_in_background();
  ::SiteDataFeatureProto* mutable_uses_audio_in_background();
  void set_allocated_uses_audio_in_background(::SiteDataFeatureProto* uses_audio_in_background);

  // optional .SiteDataFeatureProto deprecated_uses_notifications_in_background = 5;
  bool has_deprecated_uses_notifications_in_background() const;
  void clear_deprecated_uses_notifications_in_background();
  const ::SiteDataFeatureProto& deprecated_uses_notifications_in_background() const;
  ::SiteDataFeatureProto* release_deprecated_uses_notifications_in_background();
  ::SiteDataFeatureProto* mutable_deprecated_uses_notifications_in_background();
  void set_allocated_deprecated_uses_notifications_in_background(::SiteDataFeatureProto* deprecated_uses_notifications_in_background);

  // optional .SiteDataPerformanceMeasurement load_time_estimates = 6;
  bool has_load_time_estimates() const;
  void clear_load_time_estimates();
  const ::SiteDataPerformanceMeasurement& load_time_estimates() const;
  ::SiteDataPerformanceMeasurement* release_load_time_estimates();
  ::SiteDataPerformanceMeasurement* mutable_load_time_estimates();
  void set_allocated_load_time_estimates(::SiteDataPerformanceMeasurement* load_time_estimates);

  // optional uint32 last_loaded = 1;
  bool has_last_loaded() const;
  void clear_last_loaded();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_loaded() const;
  void set_last_loaded(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:SiteDataProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::SiteDataFeatureProto* updates_favicon_in_background_;
  ::SiteDataFeatureProto* updates_title_in_background_;
  ::SiteDataFeatureProto* uses_audio_in_background_;
  ::SiteDataFeatureProto* deprecated_uses_notifications_in_background_;
  ::SiteDataPerformanceMeasurement* load_time_estimates_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_loaded_;
  friend struct ::TableStruct_site_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SiteDataFeatureProto

// optional int64 observation_duration = 1;
inline bool SiteDataFeatureProto::has_observation_duration() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SiteDataFeatureProto::clear_observation_duration() {
  observation_duration_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SiteDataFeatureProto::observation_duration() const {
  // @@protoc_insertion_point(field_get:SiteDataFeatureProto.observation_duration)
  return observation_duration_;
}
inline void SiteDataFeatureProto::set_observation_duration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  observation_duration_ = value;
  // @@protoc_insertion_point(field_set:SiteDataFeatureProto.observation_duration)
}

// optional int64 use_timestamp = 2;
inline bool SiteDataFeatureProto::has_use_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SiteDataFeatureProto::clear_use_timestamp() {
  use_timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SiteDataFeatureProto::use_timestamp() const {
  // @@protoc_insertion_point(field_get:SiteDataFeatureProto.use_timestamp)
  return use_timestamp_;
}
inline void SiteDataFeatureProto::set_use_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  use_timestamp_ = value;
  // @@protoc_insertion_point(field_set:SiteDataFeatureProto.use_timestamp)
}

// -------------------------------------------------------------------

// SiteDataPerformanceMeasurement

// optional float avg_cpu_usage_us = 1;
inline bool SiteDataPerformanceMeasurement::has_avg_cpu_usage_us() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SiteDataPerformanceMeasurement::clear_avg_cpu_usage_us() {
  avg_cpu_usage_us_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float SiteDataPerformanceMeasurement::avg_cpu_usage_us() const {
  // @@protoc_insertion_point(field_get:SiteDataPerformanceMeasurement.avg_cpu_usage_us)
  return avg_cpu_usage_us_;
}
inline void SiteDataPerformanceMeasurement::set_avg_cpu_usage_us(float value) {
  _has_bits_[0] |= 0x00000001u;
  avg_cpu_usage_us_ = value;
  // @@protoc_insertion_point(field_set:SiteDataPerformanceMeasurement.avg_cpu_usage_us)
}

// optional float avg_footprint_kb = 2;
inline bool SiteDataPerformanceMeasurement::has_avg_footprint_kb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SiteDataPerformanceMeasurement::clear_avg_footprint_kb() {
  avg_footprint_kb_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float SiteDataPerformanceMeasurement::avg_footprint_kb() const {
  // @@protoc_insertion_point(field_get:SiteDataPerformanceMeasurement.avg_footprint_kb)
  return avg_footprint_kb_;
}
inline void SiteDataPerformanceMeasurement::set_avg_footprint_kb(float value) {
  _has_bits_[0] |= 0x00000002u;
  avg_footprint_kb_ = value;
  // @@protoc_insertion_point(field_set:SiteDataPerformanceMeasurement.avg_footprint_kb)
}

// optional float avg_load_duration_us = 3;
inline bool SiteDataPerformanceMeasurement::has_avg_load_duration_us() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SiteDataPerformanceMeasurement::clear_avg_load_duration_us() {
  avg_load_duration_us_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float SiteDataPerformanceMeasurement::avg_load_duration_us() const {
  // @@protoc_insertion_point(field_get:SiteDataPerformanceMeasurement.avg_load_duration_us)
  return avg_load_duration_us_;
}
inline void SiteDataPerformanceMeasurement::set_avg_load_duration_us(float value) {
  _has_bits_[0] |= 0x00000004u;
  avg_load_duration_us_ = value;
  // @@protoc_insertion_point(field_set:SiteDataPerformanceMeasurement.avg_load_duration_us)
}

// -------------------------------------------------------------------

// SiteDataProto

// optional uint32 last_loaded = 1;
inline bool SiteDataProto::has_last_loaded() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SiteDataProto::clear_last_loaded() {
  last_loaded_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SiteDataProto::last_loaded() const {
  // @@protoc_insertion_point(field_get:SiteDataProto.last_loaded)
  return last_loaded_;
}
inline void SiteDataProto::set_last_loaded(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  last_loaded_ = value;
  // @@protoc_insertion_point(field_set:SiteDataProto.last_loaded)
}

// optional .SiteDataFeatureProto updates_favicon_in_background = 2;
inline bool SiteDataProto::has_updates_favicon_in_background() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SiteDataProto::clear_updates_favicon_in_background() {
  if (updates_favicon_in_background_ != nullptr) updates_favicon_in_background_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::SiteDataFeatureProto& SiteDataProto::updates_favicon_in_background() const {
  const ::SiteDataFeatureProto* p = updates_favicon_in_background_;
  // @@protoc_insertion_point(field_get:SiteDataProto.updates_favicon_in_background)
  return p != nullptr ? *p : *reinterpret_cast<const ::SiteDataFeatureProto*>(
      &::_SiteDataFeatureProto_default_instance_);
}
inline ::SiteDataFeatureProto* SiteDataProto::release_updates_favicon_in_background() {
  // @@protoc_insertion_point(field_release:SiteDataProto.updates_favicon_in_background)
  _has_bits_[0] &= ~0x00000001u;
  ::SiteDataFeatureProto* temp = updates_favicon_in_background_;
  updates_favicon_in_background_ = nullptr;
  return temp;
}
inline ::SiteDataFeatureProto* SiteDataProto::mutable_updates_favicon_in_background() {
  _has_bits_[0] |= 0x00000001u;
  if (updates_favicon_in_background_ == nullptr) {
    auto* p = CreateMaybeMessage<::SiteDataFeatureProto>(GetArenaNoVirtual());
    updates_favicon_in_background_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SiteDataProto.updates_favicon_in_background)
  return updates_favicon_in_background_;
}
inline void SiteDataProto::set_allocated_updates_favicon_in_background(::SiteDataFeatureProto* updates_favicon_in_background) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete updates_favicon_in_background_;
  }
  if (updates_favicon_in_background) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      updates_favicon_in_background = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updates_favicon_in_background, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  updates_favicon_in_background_ = updates_favicon_in_background;
  // @@protoc_insertion_point(field_set_allocated:SiteDataProto.updates_favicon_in_background)
}

// optional .SiteDataFeatureProto updates_title_in_background = 3;
inline bool SiteDataProto::has_updates_title_in_background() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SiteDataProto::clear_updates_title_in_background() {
  if (updates_title_in_background_ != nullptr) updates_title_in_background_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::SiteDataFeatureProto& SiteDataProto::updates_title_in_background() const {
  const ::SiteDataFeatureProto* p = updates_title_in_background_;
  // @@protoc_insertion_point(field_get:SiteDataProto.updates_title_in_background)
  return p != nullptr ? *p : *reinterpret_cast<const ::SiteDataFeatureProto*>(
      &::_SiteDataFeatureProto_default_instance_);
}
inline ::SiteDataFeatureProto* SiteDataProto::release_updates_title_in_background() {
  // @@protoc_insertion_point(field_release:SiteDataProto.updates_title_in_background)
  _has_bits_[0] &= ~0x00000002u;
  ::SiteDataFeatureProto* temp = updates_title_in_background_;
  updates_title_in_background_ = nullptr;
  return temp;
}
inline ::SiteDataFeatureProto* SiteDataProto::mutable_updates_title_in_background() {
  _has_bits_[0] |= 0x00000002u;
  if (updates_title_in_background_ == nullptr) {
    auto* p = CreateMaybeMessage<::SiteDataFeatureProto>(GetArenaNoVirtual());
    updates_title_in_background_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SiteDataProto.updates_title_in_background)
  return updates_title_in_background_;
}
inline void SiteDataProto::set_allocated_updates_title_in_background(::SiteDataFeatureProto* updates_title_in_background) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete updates_title_in_background_;
  }
  if (updates_title_in_background) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      updates_title_in_background = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updates_title_in_background, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  updates_title_in_background_ = updates_title_in_background;
  // @@protoc_insertion_point(field_set_allocated:SiteDataProto.updates_title_in_background)
}

// optional .SiteDataFeatureProto uses_audio_in_background = 4;
inline bool SiteDataProto::has_uses_audio_in_background() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SiteDataProto::clear_uses_audio_in_background() {
  if (uses_audio_in_background_ != nullptr) uses_audio_in_background_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::SiteDataFeatureProto& SiteDataProto::uses_audio_in_background() const {
  const ::SiteDataFeatureProto* p = uses_audio_in_background_;
  // @@protoc_insertion_point(field_get:SiteDataProto.uses_audio_in_background)
  return p != nullptr ? *p : *reinterpret_cast<const ::SiteDataFeatureProto*>(
      &::_SiteDataFeatureProto_default_instance_);
}
inline ::SiteDataFeatureProto* SiteDataProto::release_uses_audio_in_background() {
  // @@protoc_insertion_point(field_release:SiteDataProto.uses_audio_in_background)
  _has_bits_[0] &= ~0x00000004u;
  ::SiteDataFeatureProto* temp = uses_audio_in_background_;
  uses_audio_in_background_ = nullptr;
  return temp;
}
inline ::SiteDataFeatureProto* SiteDataProto::mutable_uses_audio_in_background() {
  _has_bits_[0] |= 0x00000004u;
  if (uses_audio_in_background_ == nullptr) {
    auto* p = CreateMaybeMessage<::SiteDataFeatureProto>(GetArenaNoVirtual());
    uses_audio_in_background_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SiteDataProto.uses_audio_in_background)
  return uses_audio_in_background_;
}
inline void SiteDataProto::set_allocated_uses_audio_in_background(::SiteDataFeatureProto* uses_audio_in_background) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete uses_audio_in_background_;
  }
  if (uses_audio_in_background) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uses_audio_in_background = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uses_audio_in_background, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  uses_audio_in_background_ = uses_audio_in_background;
  // @@protoc_insertion_point(field_set_allocated:SiteDataProto.uses_audio_in_background)
}

// optional .SiteDataFeatureProto deprecated_uses_notifications_in_background = 5;
inline bool SiteDataProto::has_deprecated_uses_notifications_in_background() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SiteDataProto::clear_deprecated_uses_notifications_in_background() {
  if (deprecated_uses_notifications_in_background_ != nullptr) deprecated_uses_notifications_in_background_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::SiteDataFeatureProto& SiteDataProto::deprecated_uses_notifications_in_background() const {
  const ::SiteDataFeatureProto* p = deprecated_uses_notifications_in_background_;
  // @@protoc_insertion_point(field_get:SiteDataProto.deprecated_uses_notifications_in_background)
  return p != nullptr ? *p : *reinterpret_cast<const ::SiteDataFeatureProto*>(
      &::_SiteDataFeatureProto_default_instance_);
}
inline ::SiteDataFeatureProto* SiteDataProto::release_deprecated_uses_notifications_in_background() {
  // @@protoc_insertion_point(field_release:SiteDataProto.deprecated_uses_notifications_in_background)
  _has_bits_[0] &= ~0x00000008u;
  ::SiteDataFeatureProto* temp = deprecated_uses_notifications_in_background_;
  deprecated_uses_notifications_in_background_ = nullptr;
  return temp;
}
inline ::SiteDataFeatureProto* SiteDataProto::mutable_deprecated_uses_notifications_in_background() {
  _has_bits_[0] |= 0x00000008u;
  if (deprecated_uses_notifications_in_background_ == nullptr) {
    auto* p = CreateMaybeMessage<::SiteDataFeatureProto>(GetArenaNoVirtual());
    deprecated_uses_notifications_in_background_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SiteDataProto.deprecated_uses_notifications_in_background)
  return deprecated_uses_notifications_in_background_;
}
inline void SiteDataProto::set_allocated_deprecated_uses_notifications_in_background(::SiteDataFeatureProto* deprecated_uses_notifications_in_background) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete deprecated_uses_notifications_in_background_;
  }
  if (deprecated_uses_notifications_in_background) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      deprecated_uses_notifications_in_background = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_uses_notifications_in_background, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  deprecated_uses_notifications_in_background_ = deprecated_uses_notifications_in_background;
  // @@protoc_insertion_point(field_set_allocated:SiteDataProto.deprecated_uses_notifications_in_background)
}

// optional .SiteDataPerformanceMeasurement load_time_estimates = 6;
inline bool SiteDataProto::has_load_time_estimates() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SiteDataProto::clear_load_time_estimates() {
  if (load_time_estimates_ != nullptr) load_time_estimates_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::SiteDataPerformanceMeasurement& SiteDataProto::load_time_estimates() const {
  const ::SiteDataPerformanceMeasurement* p = load_time_estimates_;
  // @@protoc_insertion_point(field_get:SiteDataProto.load_time_estimates)
  return p != nullptr ? *p : *reinterpret_cast<const ::SiteDataPerformanceMeasurement*>(
      &::_SiteDataPerformanceMeasurement_default_instance_);
}
inline ::SiteDataPerformanceMeasurement* SiteDataProto::release_load_time_estimates() {
  // @@protoc_insertion_point(field_release:SiteDataProto.load_time_estimates)
  _has_bits_[0] &= ~0x00000010u;
  ::SiteDataPerformanceMeasurement* temp = load_time_estimates_;
  load_time_estimates_ = nullptr;
  return temp;
}
inline ::SiteDataPerformanceMeasurement* SiteDataProto::mutable_load_time_estimates() {
  _has_bits_[0] |= 0x00000010u;
  if (load_time_estimates_ == nullptr) {
    auto* p = CreateMaybeMessage<::SiteDataPerformanceMeasurement>(GetArenaNoVirtual());
    load_time_estimates_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SiteDataProto.load_time_estimates)
  return load_time_estimates_;
}
inline void SiteDataProto::set_allocated_load_time_estimates(::SiteDataPerformanceMeasurement* load_time_estimates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete load_time_estimates_;
  }
  if (load_time_estimates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      load_time_estimates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, load_time_estimates, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  load_time_estimates_ = load_time_estimates;
  // @@protoc_insertion_point(field_set_allocated:SiteDataProto.load_time_estimates)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_site_5fdata_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tile_response.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tile_5fresponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tile_5fresponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tile_5fresponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tile_5fresponse_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace query_tiles {
namespace proto {
class ServerResponse;
class ServerResponseDefaultTypeInternal;
extern ServerResponseDefaultTypeInternal _ServerResponse_default_instance_;
class TileImage;
class TileImageDefaultTypeInternal;
extern TileImageDefaultTypeInternal _TileImage_default_instance_;
class TileInfo;
class TileInfoDefaultTypeInternal;
extern TileInfoDefaultTypeInternal _TileInfo_default_instance_;
class TileInfoGroup;
class TileInfoGroupDefaultTypeInternal;
extern TileInfoGroupDefaultTypeInternal _TileInfoGroup_default_instance_;
}  // namespace proto
}  // namespace query_tiles
PROTOBUF_NAMESPACE_OPEN
template<> ::query_tiles::proto::ServerResponse* Arena::CreateMaybeMessage<::query_tiles::proto::ServerResponse>(Arena*);
template<> ::query_tiles::proto::TileImage* Arena::CreateMaybeMessage<::query_tiles::proto::TileImage>(Arena*);
template<> ::query_tiles::proto::TileInfo* Arena::CreateMaybeMessage<::query_tiles::proto::TileInfo>(Arena*);
template<> ::query_tiles::proto::TileInfoGroup* Arena::CreateMaybeMessage<::query_tiles::proto::TileInfoGroup>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace query_tiles {
namespace proto {

// ===================================================================

class TileImage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:query_tiles.proto.TileImage) */ {
 public:
  TileImage();
  virtual ~TileImage();

  TileImage(const TileImage& from);
  TileImage(TileImage&& from) noexcept
    : TileImage() {
    *this = ::std::move(from);
  }

  inline TileImage& operator=(const TileImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TileImage& operator=(TileImage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TileImage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TileImage* internal_default_instance() {
    return reinterpret_cast<const TileImage*>(
               &_TileImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TileImage& a, TileImage& b) {
    a.Swap(&b);
  }
  inline void Swap(TileImage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TileImage* New() const final {
    return CreateMaybeMessage<TileImage>(nullptr);
  }

  TileImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TileImage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TileImage& from);
  void MergeFrom(const TileImage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TileImage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "query_tiles.proto.TileImage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // @@protoc_insertion_point(class_scope:query_tiles.proto.TileImage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tile_5fresponse_2eproto;
};
// -------------------------------------------------------------------

class TileInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:query_tiles.proto.TileInfo) */ {
 public:
  TileInfo();
  virtual ~TileInfo();

  TileInfo(const TileInfo& from);
  TileInfo(TileInfo&& from) noexcept
    : TileInfo() {
    *this = ::std::move(from);
  }

  inline TileInfo& operator=(const TileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TileInfo& operator=(TileInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TileInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TileInfo* internal_default_instance() {
    return reinterpret_cast<const TileInfo*>(
               &_TileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TileInfo& a, TileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TileInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TileInfo* New() const final {
    return CreateMaybeMessage<TileInfo>(nullptr);
  }

  TileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TileInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TileInfo& from);
  void MergeFrom(const TileInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TileInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "query_tiles.proto.TileInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTileImagesFieldNumber = 3,
    kSubTileIdsFieldNumber = 7,
    kSearchParamsFieldNumber = 8,
    kTileIdFieldNumber = 1,
    kQueryStringFieldNumber = 2,
    kDisplayTextFieldNumber = 4,
    kAccessibilityTextFieldNumber = 5,
    kIsTopLevelFieldNumber = 6,
  };
  // repeated .query_tiles.proto.TileImage tile_images = 3;
  int tile_images_size() const;
  void clear_tile_images();
  ::query_tiles::proto::TileImage* mutable_tile_images(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::TileImage >*
      mutable_tile_images();
  const ::query_tiles::proto::TileImage& tile_images(int index) const;
  ::query_tiles::proto::TileImage* add_tile_images();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::TileImage >&
      tile_images() const;

  // repeated string sub_tile_ids = 7;
  int sub_tile_ids_size() const;
  void clear_sub_tile_ids();
  const std::string& sub_tile_ids(int index) const;
  std::string* mutable_sub_tile_ids(int index);
  void set_sub_tile_ids(int index, const std::string& value);
  void set_sub_tile_ids(int index, std::string&& value);
  void set_sub_tile_ids(int index, const char* value);
  void set_sub_tile_ids(int index, const char* value, size_t size);
  std::string* add_sub_tile_ids();
  void add_sub_tile_ids(const std::string& value);
  void add_sub_tile_ids(std::string&& value);
  void add_sub_tile_ids(const char* value);
  void add_sub_tile_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& sub_tile_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_sub_tile_ids();

  // repeated string search_params = 8;
  int search_params_size() const;
  void clear_search_params();
  const std::string& search_params(int index) const;
  std::string* mutable_search_params(int index);
  void set_search_params(int index, const std::string& value);
  void set_search_params(int index, std::string&& value);
  void set_search_params(int index, const char* value);
  void set_search_params(int index, const char* value, size_t size);
  std::string* add_search_params();
  void add_search_params(const std::string& value);
  void add_search_params(std::string&& value);
  void add_search_params(const char* value);
  void add_search_params(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& search_params() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_search_params();

  // string tile_id = 1;
  void clear_tile_id();
  const std::string& tile_id() const;
  void set_tile_id(const std::string& value);
  void set_tile_id(std::string&& value);
  void set_tile_id(const char* value);
  void set_tile_id(const char* value, size_t size);
  std::string* mutable_tile_id();
  std::string* release_tile_id();
  void set_allocated_tile_id(std::string* tile_id);

  // string query_string = 2;
  void clear_query_string();
  const std::string& query_string() const;
  void set_query_string(const std::string& value);
  void set_query_string(std::string&& value);
  void set_query_string(const char* value);
  void set_query_string(const char* value, size_t size);
  std::string* mutable_query_string();
  std::string* release_query_string();
  void set_allocated_query_string(std::string* query_string);

  // string display_text = 4;
  void clear_display_text();
  const std::string& display_text() const;
  void set_display_text(const std::string& value);
  void set_display_text(std::string&& value);
  void set_display_text(const char* value);
  void set_display_text(const char* value, size_t size);
  std::string* mutable_display_text();
  std::string* release_display_text();
  void set_allocated_display_text(std::string* display_text);

  // string accessibility_text = 5;
  void clear_accessibility_text();
  const std::string& accessibility_text() const;
  void set_accessibility_text(const std::string& value);
  void set_accessibility_text(std::string&& value);
  void set_accessibility_text(const char* value);
  void set_accessibility_text(const char* value, size_t size);
  std::string* mutable_accessibility_text();
  std::string* release_accessibility_text();
  void set_allocated_accessibility_text(std::string* accessibility_text);

  // bool is_top_level = 6;
  void clear_is_top_level();
  bool is_top_level() const;
  void set_is_top_level(bool value);

  // @@protoc_insertion_point(class_scope:query_tiles.proto.TileInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::TileImage > tile_images_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> sub_tile_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> search_params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tile_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accessibility_text_;
  bool is_top_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tile_5fresponse_2eproto;
};
// -------------------------------------------------------------------

class TileInfoGroup :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:query_tiles.proto.TileInfoGroup) */ {
 public:
  TileInfoGroup();
  virtual ~TileInfoGroup();

  TileInfoGroup(const TileInfoGroup& from);
  TileInfoGroup(TileInfoGroup&& from) noexcept
    : TileInfoGroup() {
    *this = ::std::move(from);
  }

  inline TileInfoGroup& operator=(const TileInfoGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline TileInfoGroup& operator=(TileInfoGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const TileInfoGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TileInfoGroup* internal_default_instance() {
    return reinterpret_cast<const TileInfoGroup*>(
               &_TileInfoGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TileInfoGroup& a, TileInfoGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(TileInfoGroup* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TileInfoGroup* New() const final {
    return CreateMaybeMessage<TileInfoGroup>(nullptr);
  }

  TileInfoGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TileInfoGroup>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TileInfoGroup& from);
  void MergeFrom(const TileInfoGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TileInfoGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "query_tiles.proto.TileInfoGroup";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTilesFieldNumber = 1,
    kLocaleFieldNumber = 2,
  };
  // repeated .query_tiles.proto.TileInfo tiles = 1;
  int tiles_size() const;
  void clear_tiles();
  ::query_tiles::proto::TileInfo* mutable_tiles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::TileInfo >*
      mutable_tiles();
  const ::query_tiles::proto::TileInfo& tiles(int index) const;
  ::query_tiles::proto::TileInfo* add_tiles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::TileInfo >&
      tiles() const;

  // string locale = 2;
  void clear_locale();
  const std::string& locale() const;
  void set_locale(const std::string& value);
  void set_locale(std::string&& value);
  void set_locale(const char* value);
  void set_locale(const char* value, size_t size);
  std::string* mutable_locale();
  std::string* release_locale();
  void set_allocated_locale(std::string* locale);

  // @@protoc_insertion_point(class_scope:query_tiles.proto.TileInfoGroup)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::TileInfo > tiles_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr locale_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tile_5fresponse_2eproto;
};
// -------------------------------------------------------------------

class ServerResponse :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:query_tiles.proto.ServerResponse) */ {
 public:
  ServerResponse();
  virtual ~ServerResponse();

  ServerResponse(const ServerResponse& from);
  ServerResponse(ServerResponse&& from) noexcept
    : ServerResponse() {
    *this = ::std::move(from);
  }

  inline ServerResponse& operator=(const ServerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerResponse& operator=(ServerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ServerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerResponse* internal_default_instance() {
    return reinterpret_cast<const ServerResponse*>(
               &_ServerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ServerResponse& a, ServerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerResponse* New() const final {
    return CreateMaybeMessage<ServerResponse>(nullptr);
  }

  ServerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ServerResponse& from);
  void MergeFrom(const ServerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "query_tiles.proto.ServerResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTileGroupFieldNumber = 1,
  };
  // .query_tiles.proto.TileInfoGroup tile_group = 1;
  bool has_tile_group() const;
  void clear_tile_group();
  const ::query_tiles::proto::TileInfoGroup& tile_group() const;
  ::query_tiles::proto::TileInfoGroup* release_tile_group();
  ::query_tiles::proto::TileInfoGroup* mutable_tile_group();
  void set_allocated_tile_group(::query_tiles::proto::TileInfoGroup* tile_group);

  // @@protoc_insertion_point(class_scope:query_tiles.proto.ServerResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::query_tiles::proto::TileInfoGroup* tile_group_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tile_5fresponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TileImage

// string url = 1;
inline void TileImage::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TileImage::url() const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.TileImage.url)
  return url_.GetNoArena();
}
inline void TileImage::set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:query_tiles.proto.TileImage.url)
}
inline void TileImage::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:query_tiles.proto.TileImage.url)
}
inline void TileImage::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:query_tiles.proto.TileImage.url)
}
inline void TileImage::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:query_tiles.proto.TileImage.url)
}
inline std::string* TileImage::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:query_tiles.proto.TileImage.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TileImage::release_url() {
  // @@protoc_insertion_point(field_release:query_tiles.proto.TileImage.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TileImage::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:query_tiles.proto.TileImage.url)
}

// -------------------------------------------------------------------

// TileInfo

// string tile_id = 1;
inline void TileInfo::clear_tile_id() {
  tile_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TileInfo::tile_id() const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.TileInfo.tile_id)
  return tile_id_.GetNoArena();
}
inline void TileInfo::set_tile_id(const std::string& value) {
  
  tile_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:query_tiles.proto.TileInfo.tile_id)
}
inline void TileInfo::set_tile_id(std::string&& value) {
  
  tile_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:query_tiles.proto.TileInfo.tile_id)
}
inline void TileInfo::set_tile_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tile_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:query_tiles.proto.TileInfo.tile_id)
}
inline void TileInfo::set_tile_id(const char* value, size_t size) {
  
  tile_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:query_tiles.proto.TileInfo.tile_id)
}
inline std::string* TileInfo::mutable_tile_id() {
  
  // @@protoc_insertion_point(field_mutable:query_tiles.proto.TileInfo.tile_id)
  return tile_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TileInfo::release_tile_id() {
  // @@protoc_insertion_point(field_release:query_tiles.proto.TileInfo.tile_id)
  
  return tile_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TileInfo::set_allocated_tile_id(std::string* tile_id) {
  if (tile_id != nullptr) {
    
  } else {
    
  }
  tile_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tile_id);
  // @@protoc_insertion_point(field_set_allocated:query_tiles.proto.TileInfo.tile_id)
}

// string query_string = 2;
inline void TileInfo::clear_query_string() {
  query_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TileInfo::query_string() const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.TileInfo.query_string)
  return query_string_.GetNoArena();
}
inline void TileInfo::set_query_string(const std::string& value) {
  
  query_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:query_tiles.proto.TileInfo.query_string)
}
inline void TileInfo::set_query_string(std::string&& value) {
  
  query_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:query_tiles.proto.TileInfo.query_string)
}
inline void TileInfo::set_query_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  query_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:query_tiles.proto.TileInfo.query_string)
}
inline void TileInfo::set_query_string(const char* value, size_t size) {
  
  query_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:query_tiles.proto.TileInfo.query_string)
}
inline std::string* TileInfo::mutable_query_string() {
  
  // @@protoc_insertion_point(field_mutable:query_tiles.proto.TileInfo.query_string)
  return query_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TileInfo::release_query_string() {
  // @@protoc_insertion_point(field_release:query_tiles.proto.TileInfo.query_string)
  
  return query_string_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TileInfo::set_allocated_query_string(std::string* query_string) {
  if (query_string != nullptr) {
    
  } else {
    
  }
  query_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query_string);
  // @@protoc_insertion_point(field_set_allocated:query_tiles.proto.TileInfo.query_string)
}

// repeated .query_tiles.proto.TileImage tile_images = 3;
inline int TileInfo::tile_images_size() const {
  return tile_images_.size();
}
inline void TileInfo::clear_tile_images() {
  tile_images_.Clear();
}
inline ::query_tiles::proto::TileImage* TileInfo::mutable_tile_images(int index) {
  // @@protoc_insertion_point(field_mutable:query_tiles.proto.TileInfo.tile_images)
  return tile_images_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::TileImage >*
TileInfo::mutable_tile_images() {
  // @@protoc_insertion_point(field_mutable_list:query_tiles.proto.TileInfo.tile_images)
  return &tile_images_;
}
inline const ::query_tiles::proto::TileImage& TileInfo::tile_images(int index) const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.TileInfo.tile_images)
  return tile_images_.Get(index);
}
inline ::query_tiles::proto::TileImage* TileInfo::add_tile_images() {
  // @@protoc_insertion_point(field_add:query_tiles.proto.TileInfo.tile_images)
  return tile_images_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::TileImage >&
TileInfo::tile_images() const {
  // @@protoc_insertion_point(field_list:query_tiles.proto.TileInfo.tile_images)
  return tile_images_;
}

// string display_text = 4;
inline void TileInfo::clear_display_text() {
  display_text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TileInfo::display_text() const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.TileInfo.display_text)
  return display_text_.GetNoArena();
}
inline void TileInfo::set_display_text(const std::string& value) {
  
  display_text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:query_tiles.proto.TileInfo.display_text)
}
inline void TileInfo::set_display_text(std::string&& value) {
  
  display_text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:query_tiles.proto.TileInfo.display_text)
}
inline void TileInfo::set_display_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:query_tiles.proto.TileInfo.display_text)
}
inline void TileInfo::set_display_text(const char* value, size_t size) {
  
  display_text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:query_tiles.proto.TileInfo.display_text)
}
inline std::string* TileInfo::mutable_display_text() {
  
  // @@protoc_insertion_point(field_mutable:query_tiles.proto.TileInfo.display_text)
  return display_text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TileInfo::release_display_text() {
  // @@protoc_insertion_point(field_release:query_tiles.proto.TileInfo.display_text)
  
  return display_text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TileInfo::set_allocated_display_text(std::string* display_text) {
  if (display_text != nullptr) {
    
  } else {
    
  }
  display_text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_text);
  // @@protoc_insertion_point(field_set_allocated:query_tiles.proto.TileInfo.display_text)
}

// string accessibility_text = 5;
inline void TileInfo::clear_accessibility_text() {
  accessibility_text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TileInfo::accessibility_text() const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.TileInfo.accessibility_text)
  return accessibility_text_.GetNoArena();
}
inline void TileInfo::set_accessibility_text(const std::string& value) {
  
  accessibility_text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:query_tiles.proto.TileInfo.accessibility_text)
}
inline void TileInfo::set_accessibility_text(std::string&& value) {
  
  accessibility_text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:query_tiles.proto.TileInfo.accessibility_text)
}
inline void TileInfo::set_accessibility_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accessibility_text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:query_tiles.proto.TileInfo.accessibility_text)
}
inline void TileInfo::set_accessibility_text(const char* value, size_t size) {
  
  accessibility_text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:query_tiles.proto.TileInfo.accessibility_text)
}
inline std::string* TileInfo::mutable_accessibility_text() {
  
  // @@protoc_insertion_point(field_mutable:query_tiles.proto.TileInfo.accessibility_text)
  return accessibility_text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TileInfo::release_accessibility_text() {
  // @@protoc_insertion_point(field_release:query_tiles.proto.TileInfo.accessibility_text)
  
  return accessibility_text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TileInfo::set_allocated_accessibility_text(std::string* accessibility_text) {
  if (accessibility_text != nullptr) {
    
  } else {
    
  }
  accessibility_text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accessibility_text);
  // @@protoc_insertion_point(field_set_allocated:query_tiles.proto.TileInfo.accessibility_text)
}

// bool is_top_level = 6;
inline void TileInfo::clear_is_top_level() {
  is_top_level_ = false;
}
inline bool TileInfo::is_top_level() const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.TileInfo.is_top_level)
  return is_top_level_;
}
inline void TileInfo::set_is_top_level(bool value) {
  
  is_top_level_ = value;
  // @@protoc_insertion_point(field_set:query_tiles.proto.TileInfo.is_top_level)
}

// repeated string sub_tile_ids = 7;
inline int TileInfo::sub_tile_ids_size() const {
  return sub_tile_ids_.size();
}
inline void TileInfo::clear_sub_tile_ids() {
  sub_tile_ids_.Clear();
}
inline const std::string& TileInfo::sub_tile_ids(int index) const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.TileInfo.sub_tile_ids)
  return sub_tile_ids_.Get(index);
}
inline std::string* TileInfo::mutable_sub_tile_ids(int index) {
  // @@protoc_insertion_point(field_mutable:query_tiles.proto.TileInfo.sub_tile_ids)
  return sub_tile_ids_.Mutable(index);
}
inline void TileInfo::set_sub_tile_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:query_tiles.proto.TileInfo.sub_tile_ids)
  sub_tile_ids_.Mutable(index)->assign(value);
}
inline void TileInfo::set_sub_tile_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:query_tiles.proto.TileInfo.sub_tile_ids)
  sub_tile_ids_.Mutable(index)->assign(std::move(value));
}
inline void TileInfo::set_sub_tile_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sub_tile_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:query_tiles.proto.TileInfo.sub_tile_ids)
}
inline void TileInfo::set_sub_tile_ids(int index, const char* value, size_t size) {
  sub_tile_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:query_tiles.proto.TileInfo.sub_tile_ids)
}
inline std::string* TileInfo::add_sub_tile_ids() {
  // @@protoc_insertion_point(field_add_mutable:query_tiles.proto.TileInfo.sub_tile_ids)
  return sub_tile_ids_.Add();
}
inline void TileInfo::add_sub_tile_ids(const std::string& value) {
  sub_tile_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:query_tiles.proto.TileInfo.sub_tile_ids)
}
inline void TileInfo::add_sub_tile_ids(std::string&& value) {
  sub_tile_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:query_tiles.proto.TileInfo.sub_tile_ids)
}
inline void TileInfo::add_sub_tile_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sub_tile_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:query_tiles.proto.TileInfo.sub_tile_ids)
}
inline void TileInfo::add_sub_tile_ids(const char* value, size_t size) {
  sub_tile_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:query_tiles.proto.TileInfo.sub_tile_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TileInfo::sub_tile_ids() const {
  // @@protoc_insertion_point(field_list:query_tiles.proto.TileInfo.sub_tile_ids)
  return sub_tile_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TileInfo::mutable_sub_tile_ids() {
  // @@protoc_insertion_point(field_mutable_list:query_tiles.proto.TileInfo.sub_tile_ids)
  return &sub_tile_ids_;
}

// repeated string search_params = 8;
inline int TileInfo::search_params_size() const {
  return search_params_.size();
}
inline void TileInfo::clear_search_params() {
  search_params_.Clear();
}
inline const std::string& TileInfo::search_params(int index) const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.TileInfo.search_params)
  return search_params_.Get(index);
}
inline std::string* TileInfo::mutable_search_params(int index) {
  // @@protoc_insertion_point(field_mutable:query_tiles.proto.TileInfo.search_params)
  return search_params_.Mutable(index);
}
inline void TileInfo::set_search_params(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:query_tiles.proto.TileInfo.search_params)
  search_params_.Mutable(index)->assign(value);
}
inline void TileInfo::set_search_params(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:query_tiles.proto.TileInfo.search_params)
  search_params_.Mutable(index)->assign(std::move(value));
}
inline void TileInfo::set_search_params(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  search_params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:query_tiles.proto.TileInfo.search_params)
}
inline void TileInfo::set_search_params(int index, const char* value, size_t size) {
  search_params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:query_tiles.proto.TileInfo.search_params)
}
inline std::string* TileInfo::add_search_params() {
  // @@protoc_insertion_point(field_add_mutable:query_tiles.proto.TileInfo.search_params)
  return search_params_.Add();
}
inline void TileInfo::add_search_params(const std::string& value) {
  search_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:query_tiles.proto.TileInfo.search_params)
}
inline void TileInfo::add_search_params(std::string&& value) {
  search_params_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:query_tiles.proto.TileInfo.search_params)
}
inline void TileInfo::add_search_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  search_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:query_tiles.proto.TileInfo.search_params)
}
inline void TileInfo::add_search_params(const char* value, size_t size) {
  search_params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:query_tiles.proto.TileInfo.search_params)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TileInfo::search_params() const {
  // @@protoc_insertion_point(field_list:query_tiles.proto.TileInfo.search_params)
  return search_params_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TileInfo::mutable_search_params() {
  // @@protoc_insertion_point(field_mutable_list:query_tiles.proto.TileInfo.search_params)
  return &search_params_;
}

// -------------------------------------------------------------------

// TileInfoGroup

// repeated .query_tiles.proto.TileInfo tiles = 1;
inline int TileInfoGroup::tiles_size() const {
  return tiles_.size();
}
inline void TileInfoGroup::clear_tiles() {
  tiles_.Clear();
}
inline ::query_tiles::proto::TileInfo* TileInfoGroup::mutable_tiles(int index) {
  // @@protoc_insertion_point(field_mutable:query_tiles.proto.TileInfoGroup.tiles)
  return tiles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::TileInfo >*
TileInfoGroup::mutable_tiles() {
  // @@protoc_insertion_point(field_mutable_list:query_tiles.proto.TileInfoGroup.tiles)
  return &tiles_;
}
inline const ::query_tiles::proto::TileInfo& TileInfoGroup::tiles(int index) const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.TileInfoGroup.tiles)
  return tiles_.Get(index);
}
inline ::query_tiles::proto::TileInfo* TileInfoGroup::add_tiles() {
  // @@protoc_insertion_point(field_add:query_tiles.proto.TileInfoGroup.tiles)
  return tiles_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::query_tiles::proto::TileInfo >&
TileInfoGroup::tiles() const {
  // @@protoc_insertion_point(field_list:query_tiles.proto.TileInfoGroup.tiles)
  return tiles_;
}

// string locale = 2;
inline void TileInfoGroup::clear_locale() {
  locale_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TileInfoGroup::locale() const {
  // @@protoc_insertion_point(field_get:query_tiles.proto.TileInfoGroup.locale)
  return locale_.GetNoArena();
}
inline void TileInfoGroup::set_locale(const std::string& value) {
  
  locale_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:query_tiles.proto.TileInfoGroup.locale)
}
inline void TileInfoGroup::set_locale(std::string&& value) {
  
  locale_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:query_tiles.proto.TileInfoGroup.locale)
}
inline void TileInfoGroup::set_locale(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  locale_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:query_tiles.proto.TileInfoGroup.locale)
}
inline void TileInfoGroup::set_locale(const char* value, size_t size) {
  
  locale_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:query_tiles.proto.TileInfoGroup.locale)
}
inline std::string* TileInfoGroup::mutable_locale() {
  
  // @@protoc_insertion_point(field_mutable:query_tiles.proto.TileInfoGroup.locale)
  return locale_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TileInfoGroup::release_locale() {
  // @@protoc_insertion_point(field_release:query_tiles.proto.TileInfoGroup.locale)
  
  return locale_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TileInfoGroup::set_allocated_locale(std::string* locale) {
  if (locale != nullptr) {
    
  } else {
    
  }
  locale_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), locale);
  // @@protoc_insertion_point(field_set_allocated:query_tiles.proto.TileInfoGroup.locale)
}

// -------------------------------------------------------------------

// ServerResponse

// .query_tiles.proto.TileInfoGroup tile_group = 1;
inline bool ServerResponse::has_tile_group() const {
  return this != internal_default_instance() && tile_group_ != nullptr;
}
inline void ServerResponse::clear_tile_group() {
  if (GetArenaNoVirtual() == nullptr && tile_group_ != nullptr) {
    delete tile_group_;
  }
  tile_group_ = nullptr;
}
inline const ::query_tiles::proto::TileInfoGroup& ServerResponse::tile_group() const {
  const ::query_tiles::proto::TileInfoGroup* p = tile_group_;
  // @@protoc_insertion_point(field_get:query_tiles.proto.ServerResponse.tile_group)
  return p != nullptr ? *p : *reinterpret_cast<const ::query_tiles::proto::TileInfoGroup*>(
      &::query_tiles::proto::_TileInfoGroup_default_instance_);
}
inline ::query_tiles::proto::TileInfoGroup* ServerResponse::release_tile_group() {
  // @@protoc_insertion_point(field_release:query_tiles.proto.ServerResponse.tile_group)
  
  ::query_tiles::proto::TileInfoGroup* temp = tile_group_;
  tile_group_ = nullptr;
  return temp;
}
inline ::query_tiles::proto::TileInfoGroup* ServerResponse::mutable_tile_group() {
  
  if (tile_group_ == nullptr) {
    auto* p = CreateMaybeMessage<::query_tiles::proto::TileInfoGroup>(GetArenaNoVirtual());
    tile_group_ = p;
  }
  // @@protoc_insertion_point(field_mutable:query_tiles.proto.ServerResponse.tile_group)
  return tile_group_;
}
inline void ServerResponse::set_allocated_tile_group(::query_tiles::proto::TileInfoGroup* tile_group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tile_group_;
  }
  if (tile_group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tile_group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tile_group, submessage_arena);
    }
    
  } else {
    
  }
  tile_group_ = tile_group;
  // @@protoc_insertion_point(field_set_allocated:query_tiles.proto.ServerResponse.tile_group)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace query_tiles

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tile_5fresponse_2eproto

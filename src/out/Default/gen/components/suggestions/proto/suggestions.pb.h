// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: suggestions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_suggestions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_suggestions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_suggestions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_suggestions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace suggestions {
class ChromeSuggestion;
class ChromeSuggestionDefaultTypeInternal;
extern ChromeSuggestionDefaultTypeInternal _ChromeSuggestion_default_instance_;
class ImageData;
class ImageDataDefaultTypeInternal;
extern ImageDataDefaultTypeInternal _ImageData_default_instance_;
class SuggestionsBlacklist;
class SuggestionsBlacklistDefaultTypeInternal;
extern SuggestionsBlacklistDefaultTypeInternal _SuggestionsBlacklist_default_instance_;
class SuggestionsProfile;
class SuggestionsProfileDefaultTypeInternal;
extern SuggestionsProfileDefaultTypeInternal _SuggestionsProfile_default_instance_;
}  // namespace suggestions
PROTOBUF_NAMESPACE_OPEN
template<> ::suggestions::ChromeSuggestion* Arena::CreateMaybeMessage<::suggestions::ChromeSuggestion>(Arena*);
template<> ::suggestions::ImageData* Arena::CreateMaybeMessage<::suggestions::ImageData>(Arena*);
template<> ::suggestions::SuggestionsBlacklist* Arena::CreateMaybeMessage<::suggestions::SuggestionsBlacklist>(Arena*);
template<> ::suggestions::SuggestionsProfile* Arena::CreateMaybeMessage<::suggestions::SuggestionsProfile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace suggestions {

enum ProviderId : int {
  SERVER0 = 0,
  SERVER8 = 8,
  SERVER9 = 9,
  SERVER10 = 10,
  SERVER11 = 11
};
bool ProviderId_IsValid(int value);
constexpr ProviderId ProviderId_MIN = SERVER0;
constexpr ProviderId ProviderId_MAX = SERVER11;
constexpr int ProviderId_ARRAYSIZE = ProviderId_MAX + 1;

const std::string& ProviderId_Name(ProviderId value);
template<typename T>
inline const std::string& ProviderId_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProviderId>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProviderId_Name.");
  return ProviderId_Name(static_cast<ProviderId>(enum_t_value));
}
bool ProviderId_Parse(
    const std::string& name, ProviderId* value);
// ===================================================================

class SuggestionsProfile :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:suggestions.SuggestionsProfile) */ {
 public:
  SuggestionsProfile();
  virtual ~SuggestionsProfile();

  SuggestionsProfile(const SuggestionsProfile& from);
  SuggestionsProfile(SuggestionsProfile&& from) noexcept
    : SuggestionsProfile() {
    *this = ::std::move(from);
  }

  inline SuggestionsProfile& operator=(const SuggestionsProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline SuggestionsProfile& operator=(SuggestionsProfile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SuggestionsProfile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SuggestionsProfile* internal_default_instance() {
    return reinterpret_cast<const SuggestionsProfile*>(
               &_SuggestionsProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SuggestionsProfile& a, SuggestionsProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(SuggestionsProfile* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SuggestionsProfile* New() const final {
    return CreateMaybeMessage<SuggestionsProfile>(nullptr);
  }

  SuggestionsProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SuggestionsProfile>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SuggestionsProfile& from);
  void MergeFrom(const SuggestionsProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SuggestionsProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "suggestions.SuggestionsProfile";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuggestionsFieldNumber = 1,
    kTimestampFieldNumber = 16,
  };
  // repeated .suggestions.ChromeSuggestion suggestions = 1;
  int suggestions_size() const;
  void clear_suggestions();
  ::suggestions::ChromeSuggestion* mutable_suggestions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::suggestions::ChromeSuggestion >*
      mutable_suggestions();
  const ::suggestions::ChromeSuggestion& suggestions(int index) const;
  ::suggestions::ChromeSuggestion* add_suggestions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::suggestions::ChromeSuggestion >&
      suggestions() const;

  // optional int64 timestamp = 16;
  bool has_timestamp() const;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:suggestions.SuggestionsProfile)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::suggestions::ChromeSuggestion > suggestions_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  friend struct ::TableStruct_suggestions_2eproto;
};
// -------------------------------------------------------------------

class ChromeSuggestion :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:suggestions.ChromeSuggestion) */ {
 public:
  ChromeSuggestion();
  virtual ~ChromeSuggestion();

  ChromeSuggestion(const ChromeSuggestion& from);
  ChromeSuggestion(ChromeSuggestion&& from) noexcept
    : ChromeSuggestion() {
    *this = ::std::move(from);
  }

  inline ChromeSuggestion& operator=(const ChromeSuggestion& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeSuggestion& operator=(ChromeSuggestion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ChromeSuggestion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChromeSuggestion* internal_default_instance() {
    return reinterpret_cast<const ChromeSuggestion*>(
               &_ChromeSuggestion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChromeSuggestion& a, ChromeSuggestion& b) {
    a.Swap(&b);
  }
  inline void Swap(ChromeSuggestion* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChromeSuggestion* New() const final {
    return CreateMaybeMessage<ChromeSuggestion>(nullptr);
  }

  ChromeSuggestion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChromeSuggestion>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ChromeSuggestion& from);
  void MergeFrom(const ChromeSuggestion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeSuggestion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "suggestions.ChromeSuggestion";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProvidersFieldNumber = 5,
    kUrlFieldNumber = 1,
    kTitleFieldNumber = 2,
    kFaviconUrlFieldNumber = 3,
    kExpiryTsFieldNumber = 7,
  };
  // repeated .suggestions.ProviderId providers = 5;
  int providers_size() const;
  void clear_providers();
  ::suggestions::ProviderId providers(int index) const;
  void set_providers(int index, ::suggestions::ProviderId value);
  void add_providers(::suggestions::ProviderId value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& providers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_providers();

  // optional string url = 1;
  bool has_url() const;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // optional string title = 2;
  bool has_title() const;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);

  // optional string favicon_url = 3;
  bool has_favicon_url() const;
  void clear_favicon_url();
  const std::string& favicon_url() const;
  void set_favicon_url(const std::string& value);
  void set_favicon_url(std::string&& value);
  void set_favicon_url(const char* value);
  void set_favicon_url(const char* value, size_t size);
  std::string* mutable_favicon_url();
  std::string* release_favicon_url();
  void set_allocated_favicon_url(std::string* favicon_url);

  // optional int64 expiry_ts = 7;
  bool has_expiry_ts() const;
  void clear_expiry_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 expiry_ts() const;
  void set_expiry_ts(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:suggestions.ChromeSuggestion)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> providers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr favicon_url_;
  ::PROTOBUF_NAMESPACE_ID::int64 expiry_ts_;
  friend struct ::TableStruct_suggestions_2eproto;
};
// -------------------------------------------------------------------

class SuggestionsBlacklist :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:suggestions.SuggestionsBlacklist) */ {
 public:
  SuggestionsBlacklist();
  virtual ~SuggestionsBlacklist();

  SuggestionsBlacklist(const SuggestionsBlacklist& from);
  SuggestionsBlacklist(SuggestionsBlacklist&& from) noexcept
    : SuggestionsBlacklist() {
    *this = ::std::move(from);
  }

  inline SuggestionsBlacklist& operator=(const SuggestionsBlacklist& from) {
    CopyFrom(from);
    return *this;
  }
  inline SuggestionsBlacklist& operator=(SuggestionsBlacklist&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SuggestionsBlacklist& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SuggestionsBlacklist* internal_default_instance() {
    return reinterpret_cast<const SuggestionsBlacklist*>(
               &_SuggestionsBlacklist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SuggestionsBlacklist& a, SuggestionsBlacklist& b) {
    a.Swap(&b);
  }
  inline void Swap(SuggestionsBlacklist* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SuggestionsBlacklist* New() const final {
    return CreateMaybeMessage<SuggestionsBlacklist>(nullptr);
  }

  SuggestionsBlacklist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SuggestionsBlacklist>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SuggestionsBlacklist& from);
  void MergeFrom(const SuggestionsBlacklist& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SuggestionsBlacklist* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "suggestions.SuggestionsBlacklist";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlsFieldNumber = 1,
  };
  // repeated string urls = 1;
  int urls_size() const;
  void clear_urls();
  const std::string& urls(int index) const;
  std::string* mutable_urls(int index);
  void set_urls(int index, const std::string& value);
  void set_urls(int index, std::string&& value);
  void set_urls(int index, const char* value);
  void set_urls(int index, const char* value, size_t size);
  std::string* add_urls();
  void add_urls(const std::string& value);
  void add_urls(std::string&& value);
  void add_urls(const char* value);
  void add_urls(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& urls() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_urls();

  // @@protoc_insertion_point(class_scope:suggestions.SuggestionsBlacklist)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> urls_;
  friend struct ::TableStruct_suggestions_2eproto;
};
// -------------------------------------------------------------------

class ImageData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:suggestions.ImageData) */ {
 public:
  ImageData();
  virtual ~ImageData();

  ImageData(const ImageData& from);
  ImageData(ImageData&& from) noexcept
    : ImageData() {
    *this = ::std::move(from);
  }

  inline ImageData& operator=(const ImageData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageData& operator=(ImageData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ImageData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageData* internal_default_instance() {
    return reinterpret_cast<const ImageData*>(
               &_ImageData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ImageData& a, ImageData& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImageData* New() const final {
    return CreateMaybeMessage<ImageData>(nullptr);
  }

  ImageData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImageData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ImageData& from);
  void MergeFrom(const ImageData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImageData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "suggestions.ImageData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // optional string url = 1;
  bool has_url() const;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // optional bytes data = 2;
  bool has_data() const;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // @@protoc_insertion_point(class_scope:suggestions.ImageData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  friend struct ::TableStruct_suggestions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SuggestionsProfile

// repeated .suggestions.ChromeSuggestion suggestions = 1;
inline int SuggestionsProfile::suggestions_size() const {
  return suggestions_.size();
}
inline void SuggestionsProfile::clear_suggestions() {
  suggestions_.Clear();
}
inline ::suggestions::ChromeSuggestion* SuggestionsProfile::mutable_suggestions(int index) {
  // @@protoc_insertion_point(field_mutable:suggestions.SuggestionsProfile.suggestions)
  return suggestions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::suggestions::ChromeSuggestion >*
SuggestionsProfile::mutable_suggestions() {
  // @@protoc_insertion_point(field_mutable_list:suggestions.SuggestionsProfile.suggestions)
  return &suggestions_;
}
inline const ::suggestions::ChromeSuggestion& SuggestionsProfile::suggestions(int index) const {
  // @@protoc_insertion_point(field_get:suggestions.SuggestionsProfile.suggestions)
  return suggestions_.Get(index);
}
inline ::suggestions::ChromeSuggestion* SuggestionsProfile::add_suggestions() {
  // @@protoc_insertion_point(field_add:suggestions.SuggestionsProfile.suggestions)
  return suggestions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::suggestions::ChromeSuggestion >&
SuggestionsProfile::suggestions() const {
  // @@protoc_insertion_point(field_list:suggestions.SuggestionsProfile.suggestions)
  return suggestions_;
}

// optional int64 timestamp = 16;
inline bool SuggestionsProfile::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SuggestionsProfile::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SuggestionsProfile::timestamp() const {
  // @@protoc_insertion_point(field_get:suggestions.SuggestionsProfile.timestamp)
  return timestamp_;
}
inline void SuggestionsProfile::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:suggestions.SuggestionsProfile.timestamp)
}

// -------------------------------------------------------------------

// ChromeSuggestion

// optional string url = 1;
inline bool ChromeSuggestion::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChromeSuggestion::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChromeSuggestion::url() const {
  // @@protoc_insertion_point(field_get:suggestions.ChromeSuggestion.url)
  return url_.GetNoArena();
}
inline void ChromeSuggestion::set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suggestions.ChromeSuggestion.url)
}
inline void ChromeSuggestion::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suggestions.ChromeSuggestion.url)
}
inline void ChromeSuggestion::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suggestions.ChromeSuggestion.url)
}
inline void ChromeSuggestion::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suggestions.ChromeSuggestion.url)
}
inline std::string* ChromeSuggestion::mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:suggestions.ChromeSuggestion.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChromeSuggestion::release_url() {
  // @@protoc_insertion_point(field_release:suggestions.ChromeSuggestion.url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeSuggestion::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:suggestions.ChromeSuggestion.url)
}

// optional string title = 2;
inline bool ChromeSuggestion::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChromeSuggestion::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChromeSuggestion::title() const {
  // @@protoc_insertion_point(field_get:suggestions.ChromeSuggestion.title)
  return title_.GetNoArena();
}
inline void ChromeSuggestion::set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suggestions.ChromeSuggestion.title)
}
inline void ChromeSuggestion::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suggestions.ChromeSuggestion.title)
}
inline void ChromeSuggestion::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suggestions.ChromeSuggestion.title)
}
inline void ChromeSuggestion::set_title(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suggestions.ChromeSuggestion.title)
}
inline std::string* ChromeSuggestion::mutable_title() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:suggestions.ChromeSuggestion.title)
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChromeSuggestion::release_title() {
  // @@protoc_insertion_point(field_release:suggestions.ChromeSuggestion.title)
  if (!has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return title_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeSuggestion::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:suggestions.ChromeSuggestion.title)
}

// optional string favicon_url = 3;
inline bool ChromeSuggestion::has_favicon_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChromeSuggestion::clear_favicon_url() {
  favicon_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ChromeSuggestion::favicon_url() const {
  // @@protoc_insertion_point(field_get:suggestions.ChromeSuggestion.favicon_url)
  return favicon_url_.GetNoArena();
}
inline void ChromeSuggestion::set_favicon_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  favicon_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suggestions.ChromeSuggestion.favicon_url)
}
inline void ChromeSuggestion::set_favicon_url(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  favicon_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suggestions.ChromeSuggestion.favicon_url)
}
inline void ChromeSuggestion::set_favicon_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  favicon_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suggestions.ChromeSuggestion.favicon_url)
}
inline void ChromeSuggestion::set_favicon_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  favicon_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suggestions.ChromeSuggestion.favicon_url)
}
inline std::string* ChromeSuggestion::mutable_favicon_url() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:suggestions.ChromeSuggestion.favicon_url)
  return favicon_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChromeSuggestion::release_favicon_url() {
  // @@protoc_insertion_point(field_release:suggestions.ChromeSuggestion.favicon_url)
  if (!has_favicon_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return favicon_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChromeSuggestion::set_allocated_favicon_url(std::string* favicon_url) {
  if (favicon_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  favicon_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), favicon_url);
  // @@protoc_insertion_point(field_set_allocated:suggestions.ChromeSuggestion.favicon_url)
}

// repeated .suggestions.ProviderId providers = 5;
inline int ChromeSuggestion::providers_size() const {
  return providers_.size();
}
inline void ChromeSuggestion::clear_providers() {
  providers_.Clear();
}
inline ::suggestions::ProviderId ChromeSuggestion::providers(int index) const {
  // @@protoc_insertion_point(field_get:suggestions.ChromeSuggestion.providers)
  return static_cast< ::suggestions::ProviderId >(providers_.Get(index));
}
inline void ChromeSuggestion::set_providers(int index, ::suggestions::ProviderId value) {
  assert(::suggestions::ProviderId_IsValid(value));
  providers_.Set(index, value);
  // @@protoc_insertion_point(field_set:suggestions.ChromeSuggestion.providers)
}
inline void ChromeSuggestion::add_providers(::suggestions::ProviderId value) {
  assert(::suggestions::ProviderId_IsValid(value));
  providers_.Add(value);
  // @@protoc_insertion_point(field_add:suggestions.ChromeSuggestion.providers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ChromeSuggestion::providers() const {
  // @@protoc_insertion_point(field_list:suggestions.ChromeSuggestion.providers)
  return providers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ChromeSuggestion::mutable_providers() {
  // @@protoc_insertion_point(field_mutable_list:suggestions.ChromeSuggestion.providers)
  return &providers_;
}

// optional int64 expiry_ts = 7;
inline bool ChromeSuggestion::has_expiry_ts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChromeSuggestion::clear_expiry_ts() {
  expiry_ts_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChromeSuggestion::expiry_ts() const {
  // @@protoc_insertion_point(field_get:suggestions.ChromeSuggestion.expiry_ts)
  return expiry_ts_;
}
inline void ChromeSuggestion::set_expiry_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  expiry_ts_ = value;
  // @@protoc_insertion_point(field_set:suggestions.ChromeSuggestion.expiry_ts)
}

// -------------------------------------------------------------------

// SuggestionsBlacklist

// repeated string urls = 1;
inline int SuggestionsBlacklist::urls_size() const {
  return urls_.size();
}
inline void SuggestionsBlacklist::clear_urls() {
  urls_.Clear();
}
inline const std::string& SuggestionsBlacklist::urls(int index) const {
  // @@protoc_insertion_point(field_get:suggestions.SuggestionsBlacklist.urls)
  return urls_.Get(index);
}
inline std::string* SuggestionsBlacklist::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:suggestions.SuggestionsBlacklist.urls)
  return urls_.Mutable(index);
}
inline void SuggestionsBlacklist::set_urls(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:suggestions.SuggestionsBlacklist.urls)
  urls_.Mutable(index)->assign(value);
}
inline void SuggestionsBlacklist::set_urls(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:suggestions.SuggestionsBlacklist.urls)
  urls_.Mutable(index)->assign(std::move(value));
}
inline void SuggestionsBlacklist::set_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:suggestions.SuggestionsBlacklist.urls)
}
inline void SuggestionsBlacklist::set_urls(int index, const char* value, size_t size) {
  urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:suggestions.SuggestionsBlacklist.urls)
}
inline std::string* SuggestionsBlacklist::add_urls() {
  // @@protoc_insertion_point(field_add_mutable:suggestions.SuggestionsBlacklist.urls)
  return urls_.Add();
}
inline void SuggestionsBlacklist::add_urls(const std::string& value) {
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:suggestions.SuggestionsBlacklist.urls)
}
inline void SuggestionsBlacklist::add_urls(std::string&& value) {
  urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:suggestions.SuggestionsBlacklist.urls)
}
inline void SuggestionsBlacklist::add_urls(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:suggestions.SuggestionsBlacklist.urls)
}
inline void SuggestionsBlacklist::add_urls(const char* value, size_t size) {
  urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:suggestions.SuggestionsBlacklist.urls)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SuggestionsBlacklist::urls() const {
  // @@protoc_insertion_point(field_list:suggestions.SuggestionsBlacklist.urls)
  return urls_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SuggestionsBlacklist::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:suggestions.SuggestionsBlacklist.urls)
  return &urls_;
}

// -------------------------------------------------------------------

// ImageData

// optional string url = 1;
inline bool ImageData::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageData::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ImageData::url() const {
  // @@protoc_insertion_point(field_get:suggestions.ImageData.url)
  return url_.GetNoArena();
}
inline void ImageData::set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suggestions.ImageData.url)
}
inline void ImageData::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suggestions.ImageData.url)
}
inline void ImageData::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suggestions.ImageData.url)
}
inline void ImageData::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suggestions.ImageData.url)
}
inline std::string* ImageData::mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:suggestions.ImageData.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ImageData::release_url() {
  // @@protoc_insertion_point(field_release:suggestions.ImageData.url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ImageData::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:suggestions.ImageData.url)
}

// optional bytes data = 2;
inline bool ImageData::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageData::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ImageData::data() const {
  // @@protoc_insertion_point(field_get:suggestions.ImageData.data)
  return data_.GetNoArena();
}
inline void ImageData::set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:suggestions.ImageData.data)
}
inline void ImageData::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:suggestions.ImageData.data)
}
inline void ImageData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:suggestions.ImageData.data)
}
inline void ImageData::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:suggestions.ImageData.data)
}
inline std::string* ImageData::mutable_data() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:suggestions.ImageData.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ImageData::release_data() {
  // @@protoc_insertion_point(field_release:suggestions.ImageData.data)
  if (!has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ImageData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:suggestions.ImageData.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace suggestions

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::suggestions::ProviderId> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_suggestions_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: entry.proto

#include "entry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_request_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RequestParams_request_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scheduling_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SchedulingParams_scheduling_2eproto;
namespace protodb {
class EntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Entry> _instance;
} _Entry_default_instance_;
}  // namespace protodb
static void InitDefaultsscc_info_Entry_entry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protodb::_Entry_default_instance_;
    new (ptr) ::protodb::Entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protodb::Entry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Entry_entry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Entry_entry_2eproto}, {
      &scc_info_SchedulingParams_scheduling_2eproto.base,
      &scc_info_RequestParams_request_2eproto.base,}};

namespace protodb {
bool Entry_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Entry_State_strings[5] = {};

static const char Entry_State_names[] =
  "ACTIVE"
  "AVAILABLE"
  "COMPLETE"
  "NEW"
  "PAUSED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Entry_State_entries[] = {
  { {Entry_State_names + 0, 6}, 2 },
  { {Entry_State_names + 6, 9}, 1 },
  { {Entry_State_names + 15, 8}, 4 },
  { {Entry_State_names + 23, 3}, 0 },
  { {Entry_State_names + 26, 6}, 3 },
};

static const int Entry_State_entries_by_number[] = {
  3, // 0 -> NEW
  1, // 1 -> AVAILABLE
  0, // 2 -> ACTIVE
  4, // 3 -> PAUSED
  2, // 4 -> COMPLETE
};

const std::string& Entry_State_Name(
    Entry_State value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Entry_State_entries,
          Entry_State_entries_by_number,
          5, Entry_State_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Entry_State_entries,
      Entry_State_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Entry_State_strings[idx].get();
}
bool Entry_State_Parse(
    const std::string& name, Entry_State* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Entry_State_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<Entry_State>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Entry_State Entry::NEW;
constexpr Entry_State Entry::AVAILABLE;
constexpr Entry_State Entry::ACTIVE;
constexpr Entry_State Entry::PAUSED;
constexpr Entry_State Entry::COMPLETE;
constexpr Entry_State Entry::State_MIN;
constexpr Entry_State Entry::State_MAX;
constexpr int Entry::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DownloadClient_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DownloadClient_strings[10] = {};

static const char DownloadClient_names[] =
  "BACKGROUND_FETCH"
  "BOUNDARY"
  "DEBUGGING"
  "INVALID"
  "MOUNTAIN_INTERNAL"
  "OFFLINE_PAGE_PREFETCH"
  "PLUGIN_VM_IMAGE"
  "TEST"
  "TEST_2"
  "TEST_3";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DownloadClient_entries[] = {
  { {DownloadClient_names + 0, 16}, 5 },
  { {DownloadClient_names + 16, 8}, 9 },
  { {DownloadClient_names + 24, 9}, 6 },
  { {DownloadClient_names + 33, 7}, 0 },
  { {DownloadClient_names + 40, 17}, 7 },
  { {DownloadClient_names + 57, 21}, 4 },
  { {DownloadClient_names + 78, 15}, 8 },
  { {DownloadClient_names + 93, 4}, 1 },
  { {DownloadClient_names + 97, 6}, 2 },
  { {DownloadClient_names + 103, 6}, 3 },
};

static const int DownloadClient_entries_by_number[] = {
  3, // 0 -> INVALID
  7, // 1 -> TEST
  8, // 2 -> TEST_2
  9, // 3 -> TEST_3
  5, // 4 -> OFFLINE_PAGE_PREFETCH
  0, // 5 -> BACKGROUND_FETCH
  2, // 6 -> DEBUGGING
  4, // 7 -> MOUNTAIN_INTERNAL
  6, // 8 -> PLUGIN_VM_IMAGE
  1, // 9 -> BOUNDARY
};

const std::string& DownloadClient_Name(
    DownloadClient value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DownloadClient_entries,
          DownloadClient_entries_by_number,
          10, DownloadClient_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DownloadClient_entries,
      DownloadClient_entries_by_number,
      10, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DownloadClient_strings[idx].get();
}
bool DownloadClient_Parse(
    const std::string& name, DownloadClient* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DownloadClient_entries, 10, name, &int_value);
  if (success) {
    *value = static_cast<DownloadClient>(int_value);
  }
  return success;
}

// ===================================================================

void Entry::InitAsDefaultInstance() {
  ::protodb::_Entry_default_instance_._instance.get_mutable()->scheduling_params_ = const_cast< ::protodb::SchedulingParams*>(
      ::protodb::SchedulingParams::internal_default_instance());
  ::protodb::_Entry_default_instance_._instance.get_mutable()->request_params_ = const_cast< ::protodb::RequestParams*>(
      ::protodb::RequestParams::internal_default_instance());
}
class Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<Entry>()._has_bits_);
  static void set_has_name_space(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protodb::SchedulingParams& scheduling_params(const Entry* msg);
  static void set_has_scheduling_params(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::protodb::RequestParams& request_params(const Entry* msg);
  static void set_has_request_params(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_target_file_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_create_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_completion_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_attempt_count(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_traffic_annotation(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_bytes_downloaded(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_last_cleanup_check_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_resumption_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_has_upload_data(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_response_headers(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_did_received_response(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_require_response_headers(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

const ::protodb::SchedulingParams&
Entry::_Internal::scheduling_params(const Entry* msg) {
  return *msg->scheduling_params_;
}
const ::protodb::RequestParams&
Entry::_Internal::request_params(const Entry* msg) {
  return *msg->request_params_;
}
void Entry::clear_scheduling_params() {
  if (scheduling_params_ != nullptr) scheduling_params_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void Entry::clear_request_params() {
  if (request_params_ != nullptr) request_params_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
Entry::Entry()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protodb.Entry)
}
Entry::Entry(const Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      url_chain_(from.url_chain_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_guid()) {
    guid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guid_);
  }
  target_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_target_file_path()) {
    target_file_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_file_path_);
  }
  response_headers_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_response_headers()) {
    response_headers_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.response_headers_);
  }
  if (from.has_scheduling_params()) {
    scheduling_params_ = new ::protodb::SchedulingParams(*from.scheduling_params_);
  } else {
    scheduling_params_ = nullptr;
  }
  if (from.has_request_params()) {
    request_params_ = new ::protodb::RequestParams(*from.request_params_);
  } else {
    request_params_ = nullptr;
  }
  ::memcpy(&name_space_, &from.name_space_,
    static_cast<size_t>(reinterpret_cast<char*>(&require_response_headers_) -
    reinterpret_cast<char*>(&name_space_)) + sizeof(require_response_headers_));
  // @@protoc_insertion_point(copy_constructor:protodb.Entry)
}

void Entry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Entry_entry_2eproto.base);
  guid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  response_headers_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&scheduling_params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&require_response_headers_) -
      reinterpret_cast<char*>(&scheduling_params_)) + sizeof(require_response_headers_));
}

Entry::~Entry() {
  // @@protoc_insertion_point(destructor:protodb.Entry)
  SharedDtor();
}

void Entry::SharedDtor() {
  guid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  response_headers_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete scheduling_params_;
  if (this != internal_default_instance()) delete request_params_;
}

void Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Entry& Entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Entry_entry_2eproto.base);
  return *internal_default_instance();
}


void Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:protodb.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_chain_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      guid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      target_file_path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      response_headers_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(scheduling_params_ != nullptr);
      scheduling_params_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(request_params_ != nullptr);
      request_params_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&name_space_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&create_time_) -
        reinterpret_cast<char*>(&name_space_)) + sizeof(create_time_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&completion_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&did_received_response_) -
        reinterpret_cast<char*>(&completion_time_)) + sizeof(did_received_response_));
  }
  require_response_headers_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protodb.DownloadClient name_space = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protodb::DownloadClient_IsValid(val))) {
            set_name_space(static_cast<::protodb::DownloadClient>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string guid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_guid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protodb.SchedulingParams scheduling_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_scheduling_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protodb.RequestParams request_params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_request_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protodb.Entry.State state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protodb::Entry_State_IsValid(val))) {
            set_state(static_cast<::protodb::Entry_State>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string target_file_path = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_target_file_path(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 create_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_create_time(&has_bits);
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 completion_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_completion_time(&has_bits);
          completion_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 attempt_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_attempt_count(&has_bits);
          attempt_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 traffic_annotation = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_traffic_annotation(&has_bits);
          traffic_annotation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 bytes_downloaded = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_bytes_downloaded(&has_bits);
          bytes_downloaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_cleanup_check_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_last_cleanup_check_time(&has_bits);
          last_cleanup_check_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 resumption_count = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_resumption_count(&has_bits);
          resumption_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_upload_data = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_has_upload_data(&has_bits);
          has_upload_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string url_chain = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_url_chain(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 386);
        } else goto handle_unusual;
        continue;
      // optional string response_headers = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_response_headers(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool did_received_response = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_did_received_response(&has_bits);
          did_received_response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool require_response_headers = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_require_response_headers(&has_bits);
          require_response_headers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Entry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:protodb.Entry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protodb.DownloadClient name_space = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protodb::DownloadClient_IsValid(value)) {
            set_name_space(static_cast< ::protodb::DownloadClient >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string guid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protodb.SchedulingParams scheduling_params = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_scheduling_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protodb.RequestParams request_params = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_request_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protodb.Entry.State state = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protodb::Entry_State_IsValid(value)) {
            set_state(static_cast< ::protodb::Entry_State >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string target_file_path = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_target_file_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 create_time = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_create_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 completion_time = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_completion_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &completion_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 attempt_count = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_attempt_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attempt_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 traffic_annotation = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_traffic_annotation(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &traffic_annotation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bytes_downloaded = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_bytes_downloaded(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_downloaded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_cleanup_check_time = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_last_cleanup_check_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_cleanup_check_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 resumption_count = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_resumption_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resumption_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_upload_data = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_has_upload_data(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_upload_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string url_chain = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_url_chain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string response_headers = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_response_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool did_received_response = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_did_received_response(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &did_received_response_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool require_response_headers = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_require_response_headers(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &require_response_headers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protodb.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protodb.Entry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Entry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protodb.Entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protodb.DownloadClient name_space = 1;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->name_space(), output);
  }

  // optional string guid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->guid(), output);
  }

  // optional .protodb.SchedulingParams scheduling_params = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::scheduling_params(this), output);
  }

  // optional .protodb.RequestParams request_params = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::request_params(this), output);
  }

  // optional .protodb.Entry.State state = 5;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->state(), output);
  }

  // optional string target_file_path = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->target_file_path(), output);
  }

  // optional int64 create_time = 7;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->create_time(), output);
  }

  // optional int64 completion_time = 8;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->completion_time(), output);
  }

  // optional uint32 attempt_count = 9;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(9, this->attempt_count(), output);
  }

  // optional int32 traffic_annotation = 10;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->traffic_annotation(), output);
  }

  // optional uint64 bytes_downloaded = 11;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(11, this->bytes_downloaded(), output);
  }

  // optional int64 last_cleanup_check_time = 12;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(12, this->last_cleanup_check_time(), output);
  }

  // optional uint32 resumption_count = 14;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(14, this->resumption_count(), output);
  }

  // optional bool has_upload_data = 15;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(15, this->has_upload_data(), output);
  }

  // repeated string url_chain = 16;
  for (int i = 0, n = this->url_chain_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      16, this->url_chain(i), output);
  }

  // optional string response_headers = 17;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->response_headers(), output);
  }

  // optional bool did_received_response = 18;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(18, this->did_received_response(), output);
  }

  // optional bool require_response_headers = 19;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(19, this->require_response_headers(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:protodb.Entry)
}

size_t Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protodb.Entry)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string url_chain = 16;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->url_chain_size());
  for (int i = 0, n = this->url_chain_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->url_chain(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string guid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional string target_file_path = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->target_file_path());
    }

    // optional string response_headers = 17;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->response_headers());
    }

    // optional .protodb.SchedulingParams scheduling_params = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scheduling_params_);
    }

    // optional .protodb.RequestParams request_params = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_params_);
    }

    // optional .protodb.DownloadClient name_space = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->name_space());
    }

    // optional .protodb.Entry.State state = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional int64 create_time = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->create_time());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int64 completion_time = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->completion_time());
    }

    // optional uint32 attempt_count = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->attempt_count());
    }

    // optional int32 traffic_annotation = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->traffic_annotation());
    }

    // optional uint64 bytes_downloaded = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->bytes_downloaded());
    }

    // optional int64 last_cleanup_check_time = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_cleanup_check_time());
    }

    // optional uint32 resumption_count = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->resumption_count());
    }

    // optional bool has_upload_data = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool did_received_response = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  // optional bool require_response_headers = 19;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Entry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Entry*>(
      &from));
}

void Entry::MergeFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protodb.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  url_chain_.MergeFrom(from.url_chain_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      guid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.guid_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      target_file_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_file_path_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      response_headers_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.response_headers_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_scheduling_params()->::protodb::SchedulingParams::MergeFrom(from.scheduling_params());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_request_params()->::protodb::RequestParams::MergeFrom(from.request_params());
    }
    if (cached_has_bits & 0x00000020u) {
      name_space_ = from.name_space_;
    }
    if (cached_has_bits & 0x00000040u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000080u) {
      create_time_ = from.create_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      completion_time_ = from.completion_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      attempt_count_ = from.attempt_count_;
    }
    if (cached_has_bits & 0x00000400u) {
      traffic_annotation_ = from.traffic_annotation_;
    }
    if (cached_has_bits & 0x00000800u) {
      bytes_downloaded_ = from.bytes_downloaded_;
    }
    if (cached_has_bits & 0x00001000u) {
      last_cleanup_check_time_ = from.last_cleanup_check_time_;
    }
    if (cached_has_bits & 0x00002000u) {
      resumption_count_ = from.resumption_count_;
    }
    if (cached_has_bits & 0x00004000u) {
      has_upload_data_ = from.has_upload_data_;
    }
    if (cached_has_bits & 0x00008000u) {
      did_received_response_ = from.did_received_response_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_require_response_headers(from.require_response_headers());
  }
}

void Entry::CopyFrom(const Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protodb.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entry::IsInitialized() const {
  return true;
}

void Entry::InternalSwap(Entry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_chain_.InternalSwap(CastToBase(&other->url_chain_));
  guid_.Swap(&other->guid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  target_file_path_.Swap(&other->target_file_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  response_headers_.Swap(&other->response_headers_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(scheduling_params_, other->scheduling_params_);
  swap(request_params_, other->request_params_);
  swap(name_space_, other->name_space_);
  swap(state_, other->state_);
  swap(create_time_, other->create_time_);
  swap(completion_time_, other->completion_time_);
  swap(attempt_count_, other->attempt_count_);
  swap(traffic_annotation_, other->traffic_annotation_);
  swap(bytes_downloaded_, other->bytes_downloaded_);
  swap(last_cleanup_check_time_, other->last_cleanup_check_time_);
  swap(resumption_count_, other->resumption_count_);
  swap(has_upload_data_, other->has_upload_data_);
  swap(did_received_response_, other->did_received_response_);
  swap(require_response_headers_, other->require_response_headers_);
}

std::string Entry::GetTypeName() const {
  return "protodb.Entry";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protodb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protodb::Entry* Arena::CreateMaybeMessage< ::protodb::Entry >(Arena* arena) {
  return Arena::CreateInternal< ::protodb::Entry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scheduling.proto

#include "scheduling.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace protodb {
class SchedulingParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SchedulingParams> _instance;
} _SchedulingParams_default_instance_;
}  // namespace protodb
static void InitDefaultsscc_info_SchedulingParams_scheduling_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protodb::_SchedulingParams_default_instance_;
    new (ptr) ::protodb::SchedulingParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protodb::SchedulingParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SchedulingParams_scheduling_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SchedulingParams_scheduling_2eproto}, {}};

namespace protodb {
bool SchedulingParams_NetworkRequirements_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SchedulingParams_NetworkRequirements_strings[3] = {};

static const char SchedulingParams_NetworkRequirements_names[] =
  "NONE"
  "OPTIMISTIC"
  "UNMETERED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SchedulingParams_NetworkRequirements_entries[] = {
  { {SchedulingParams_NetworkRequirements_names + 0, 4}, 0 },
  { {SchedulingParams_NetworkRequirements_names + 4, 10}, 1 },
  { {SchedulingParams_NetworkRequirements_names + 14, 9}, 2 },
};

static const int SchedulingParams_NetworkRequirements_entries_by_number[] = {
  0, // 0 -> NONE
  1, // 1 -> OPTIMISTIC
  2, // 2 -> UNMETERED
};

const std::string& SchedulingParams_NetworkRequirements_Name(
    SchedulingParams_NetworkRequirements value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SchedulingParams_NetworkRequirements_entries,
          SchedulingParams_NetworkRequirements_entries_by_number,
          3, SchedulingParams_NetworkRequirements_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SchedulingParams_NetworkRequirements_entries,
      SchedulingParams_NetworkRequirements_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SchedulingParams_NetworkRequirements_strings[idx].get();
}
bool SchedulingParams_NetworkRequirements_Parse(
    const std::string& name, SchedulingParams_NetworkRequirements* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SchedulingParams_NetworkRequirements_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<SchedulingParams_NetworkRequirements>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SchedulingParams_NetworkRequirements SchedulingParams::NONE;
constexpr SchedulingParams_NetworkRequirements SchedulingParams::OPTIMISTIC;
constexpr SchedulingParams_NetworkRequirements SchedulingParams::UNMETERED;
constexpr SchedulingParams_NetworkRequirements SchedulingParams::NetworkRequirements_MIN;
constexpr SchedulingParams_NetworkRequirements SchedulingParams::NetworkRequirements_MAX;
constexpr int SchedulingParams::NetworkRequirements_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool SchedulingParams_BatteryRequirements_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SchedulingParams_BatteryRequirements_strings[3] = {};

static const char SchedulingParams_BatteryRequirements_names[] =
  "BATTERY_CHARGING"
  "BATTERY_INSENSITIVE"
  "BATTERY_SENSITIVE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SchedulingParams_BatteryRequirements_entries[] = {
  { {SchedulingParams_BatteryRequirements_names + 0, 16}, 2 },
  { {SchedulingParams_BatteryRequirements_names + 16, 19}, 0 },
  { {SchedulingParams_BatteryRequirements_names + 35, 17}, 1 },
};

static const int SchedulingParams_BatteryRequirements_entries_by_number[] = {
  1, // 0 -> BATTERY_INSENSITIVE
  2, // 1 -> BATTERY_SENSITIVE
  0, // 2 -> BATTERY_CHARGING
};

const std::string& SchedulingParams_BatteryRequirements_Name(
    SchedulingParams_BatteryRequirements value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SchedulingParams_BatteryRequirements_entries,
          SchedulingParams_BatteryRequirements_entries_by_number,
          3, SchedulingParams_BatteryRequirements_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SchedulingParams_BatteryRequirements_entries,
      SchedulingParams_BatteryRequirements_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SchedulingParams_BatteryRequirements_strings[idx].get();
}
bool SchedulingParams_BatteryRequirements_Parse(
    const std::string& name, SchedulingParams_BatteryRequirements* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SchedulingParams_BatteryRequirements_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<SchedulingParams_BatteryRequirements>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SchedulingParams_BatteryRequirements SchedulingParams::BATTERY_INSENSITIVE;
constexpr SchedulingParams_BatteryRequirements SchedulingParams::BATTERY_SENSITIVE;
constexpr SchedulingParams_BatteryRequirements SchedulingParams::BATTERY_CHARGING;
constexpr SchedulingParams_BatteryRequirements SchedulingParams::BatteryRequirements_MIN;
constexpr SchedulingParams_BatteryRequirements SchedulingParams::BatteryRequirements_MAX;
constexpr int SchedulingParams::BatteryRequirements_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool SchedulingParams_Priority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SchedulingParams_Priority_strings[4] = {};

static const char SchedulingParams_Priority_names[] =
  "HIGH"
  "LOW"
  "NORMAL"
  "UI";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SchedulingParams_Priority_entries[] = {
  { {SchedulingParams_Priority_names + 0, 4}, 2 },
  { {SchedulingParams_Priority_names + 4, 3}, 0 },
  { {SchedulingParams_Priority_names + 7, 6}, 1 },
  { {SchedulingParams_Priority_names + 13, 2}, 3 },
};

static const int SchedulingParams_Priority_entries_by_number[] = {
  1, // 0 -> LOW
  2, // 1 -> NORMAL
  0, // 2 -> HIGH
  3, // 3 -> UI
};

const std::string& SchedulingParams_Priority_Name(
    SchedulingParams_Priority value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SchedulingParams_Priority_entries,
          SchedulingParams_Priority_entries_by_number,
          4, SchedulingParams_Priority_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SchedulingParams_Priority_entries,
      SchedulingParams_Priority_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SchedulingParams_Priority_strings[idx].get();
}
bool SchedulingParams_Priority_Parse(
    const std::string& name, SchedulingParams_Priority* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SchedulingParams_Priority_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<SchedulingParams_Priority>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SchedulingParams_Priority SchedulingParams::LOW;
constexpr SchedulingParams_Priority SchedulingParams::NORMAL;
constexpr SchedulingParams_Priority SchedulingParams::HIGH;
constexpr SchedulingParams_Priority SchedulingParams::UI;
constexpr SchedulingParams_Priority SchedulingParams::Priority_MIN;
constexpr SchedulingParams_Priority SchedulingParams::Priority_MAX;
constexpr int SchedulingParams::Priority_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SchedulingParams::InitAsDefaultInstance() {
}
class SchedulingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SchedulingParams>()._has_bits_);
  static void set_has_cancel_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_network_requirements(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_battery_requirements(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SchedulingParams::SchedulingParams()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protodb.SchedulingParams)
}
SchedulingParams::SchedulingParams(const SchedulingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cancel_time_, &from.cancel_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&battery_requirements_) -
    reinterpret_cast<char*>(&cancel_time_)) + sizeof(battery_requirements_));
  // @@protoc_insertion_point(copy_constructor:protodb.SchedulingParams)
}

void SchedulingParams::SharedCtor() {
  ::memset(&cancel_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&battery_requirements_) -
      reinterpret_cast<char*>(&cancel_time_)) + sizeof(battery_requirements_));
}

SchedulingParams::~SchedulingParams() {
  // @@protoc_insertion_point(destructor:protodb.SchedulingParams)
  SharedDtor();
}

void SchedulingParams::SharedDtor() {
}

void SchedulingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SchedulingParams& SchedulingParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SchedulingParams_scheduling_2eproto.base);
  return *internal_default_instance();
}


void SchedulingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:protodb.SchedulingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&cancel_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&battery_requirements_) -
        reinterpret_cast<char*>(&cancel_time_)) + sizeof(battery_requirements_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SchedulingParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 cancel_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cancel_time(&has_bits);
          cancel_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protodb.SchedulingParams.Priority priority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protodb::SchedulingParams_Priority_IsValid(val))) {
            set_priority(static_cast<::protodb::SchedulingParams_Priority>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .protodb.SchedulingParams.NetworkRequirements network_requirements = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protodb::SchedulingParams_NetworkRequirements_IsValid(val))) {
            set_network_requirements(static_cast<::protodb::SchedulingParams_NetworkRequirements>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .protodb.SchedulingParams.BatteryRequirements battery_requirements = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protodb::SchedulingParams_BatteryRequirements_IsValid(val))) {
            set_battery_requirements(static_cast<::protodb::SchedulingParams_BatteryRequirements>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SchedulingParams::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:protodb.SchedulingParams)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 cancel_time = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_cancel_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &cancel_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protodb.SchedulingParams.Priority priority = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protodb::SchedulingParams_Priority_IsValid(value)) {
            set_priority(static_cast< ::protodb::SchedulingParams_Priority >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protodb.SchedulingParams.NetworkRequirements network_requirements = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protodb::SchedulingParams_NetworkRequirements_IsValid(value)) {
            set_network_requirements(static_cast< ::protodb::SchedulingParams_NetworkRequirements >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protodb.SchedulingParams.BatteryRequirements battery_requirements = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protodb::SchedulingParams_BatteryRequirements_IsValid(value)) {
            set_battery_requirements(static_cast< ::protodb::SchedulingParams_BatteryRequirements >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protodb.SchedulingParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protodb.SchedulingParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SchedulingParams::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protodb.SchedulingParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 cancel_time = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->cancel_time(), output);
  }

  // optional .protodb.SchedulingParams.Priority priority = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->priority(), output);
  }

  // optional .protodb.SchedulingParams.NetworkRequirements network_requirements = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->network_requirements(), output);
  }

  // optional .protodb.SchedulingParams.BatteryRequirements battery_requirements = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->battery_requirements(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:protodb.SchedulingParams)
}

size_t SchedulingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protodb.SchedulingParams)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 cancel_time = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->cancel_time());
    }

    // optional .protodb.SchedulingParams.Priority priority = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->priority());
    }

    // optional .protodb.SchedulingParams.NetworkRequirements network_requirements = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->network_requirements());
    }

    // optional .protodb.SchedulingParams.BatteryRequirements battery_requirements = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->battery_requirements());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SchedulingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SchedulingParams*>(
      &from));
}

void SchedulingParams::MergeFrom(const SchedulingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protodb.SchedulingParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      cancel_time_ = from.cancel_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      priority_ = from.priority_;
    }
    if (cached_has_bits & 0x00000004u) {
      network_requirements_ = from.network_requirements_;
    }
    if (cached_has_bits & 0x00000008u) {
      battery_requirements_ = from.battery_requirements_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SchedulingParams::CopyFrom(const SchedulingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protodb.SchedulingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SchedulingParams::IsInitialized() const {
  return true;
}

void SchedulingParams::InternalSwap(SchedulingParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cancel_time_, other->cancel_time_);
  swap(priority_, other->priority_);
  swap(network_requirements_, other->network_requirements_);
  swap(battery_requirements_, other->battery_requirements_);
}

std::string SchedulingParams::GetTypeName() const {
  return "protodb.SchedulingParams";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protodb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protodb::SchedulingParams* Arena::CreateMaybeMessage< ::protodb::SchedulingParams >(Arena* arena) {
  return Arena::CreateInternal< ::protodb::SchedulingParams >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: entry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_entry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_entry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "request.pb.h"
#include "scheduling.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_entry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_entry_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace protodb {
class Entry;
class EntryDefaultTypeInternal;
extern EntryDefaultTypeInternal _Entry_default_instance_;
}  // namespace protodb
PROTOBUF_NAMESPACE_OPEN
template<> ::protodb::Entry* Arena::CreateMaybeMessage<::protodb::Entry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protodb {

enum Entry_State : int {
  Entry_State_NEW = 0,
  Entry_State_AVAILABLE = 1,
  Entry_State_ACTIVE = 2,
  Entry_State_PAUSED = 3,
  Entry_State_COMPLETE = 4
};
bool Entry_State_IsValid(int value);
constexpr Entry_State Entry_State_State_MIN = Entry_State_NEW;
constexpr Entry_State Entry_State_State_MAX = Entry_State_COMPLETE;
constexpr int Entry_State_State_ARRAYSIZE = Entry_State_State_MAX + 1;

const std::string& Entry_State_Name(Entry_State value);
template<typename T>
inline const std::string& Entry_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Entry_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Entry_State_Name.");
  return Entry_State_Name(static_cast<Entry_State>(enum_t_value));
}
bool Entry_State_Parse(
    const std::string& name, Entry_State* value);
enum DownloadClient : int {
  INVALID = 0,
  TEST = 1,
  TEST_2 = 2,
  TEST_3 = 3,
  OFFLINE_PAGE_PREFETCH = 4,
  BACKGROUND_FETCH = 5,
  DEBUGGING = 6,
  MOUNTAIN_INTERNAL = 7,
  PLUGIN_VM_IMAGE = 8,
  BOUNDARY = 9
};
bool DownloadClient_IsValid(int value);
constexpr DownloadClient DownloadClient_MIN = INVALID;
constexpr DownloadClient DownloadClient_MAX = BOUNDARY;
constexpr int DownloadClient_ARRAYSIZE = DownloadClient_MAX + 1;

const std::string& DownloadClient_Name(DownloadClient value);
template<typename T>
inline const std::string& DownloadClient_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DownloadClient>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DownloadClient_Name.");
  return DownloadClient_Name(static_cast<DownloadClient>(enum_t_value));
}
bool DownloadClient_Parse(
    const std::string& name, DownloadClient* value);
// ===================================================================

class Entry :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:protodb.Entry) */ {
 public:
  Entry();
  virtual ~Entry();

  Entry(const Entry& from);
  Entry(Entry&& from) noexcept
    : Entry() {
    *this = ::std::move(from);
  }

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entry& operator=(Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Entry* internal_default_instance() {
    return reinterpret_cast<const Entry*>(
               &_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Entry& a, Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(Entry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Entry* New() const final {
    return CreateMaybeMessage<Entry>(nullptr);
  }

  Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Entry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Entry& from);
  void MergeFrom(const Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protodb.Entry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Entry_State State;
  static constexpr State NEW =
    Entry_State_NEW;
  static constexpr State AVAILABLE =
    Entry_State_AVAILABLE;
  static constexpr State ACTIVE =
    Entry_State_ACTIVE;
  static constexpr State PAUSED =
    Entry_State_PAUSED;
  static constexpr State COMPLETE =
    Entry_State_COMPLETE;
  static inline bool State_IsValid(int value) {
    return Entry_State_IsValid(value);
  }
  static constexpr State State_MIN =
    Entry_State_State_MIN;
  static constexpr State State_MAX =
    Entry_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    Entry_State_State_ARRAYSIZE;
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return Entry_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return Entry_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUrlChainFieldNumber = 16,
    kGuidFieldNumber = 2,
    kTargetFilePathFieldNumber = 6,
    kResponseHeadersFieldNumber = 17,
    kSchedulingParamsFieldNumber = 3,
    kRequestParamsFieldNumber = 4,
    kNameSpaceFieldNumber = 1,
    kStateFieldNumber = 5,
    kCreateTimeFieldNumber = 7,
    kCompletionTimeFieldNumber = 8,
    kAttemptCountFieldNumber = 9,
    kTrafficAnnotationFieldNumber = 10,
    kBytesDownloadedFieldNumber = 11,
    kLastCleanupCheckTimeFieldNumber = 12,
    kResumptionCountFieldNumber = 14,
    kHasUploadDataFieldNumber = 15,
    kDidReceivedResponseFieldNumber = 18,
    kRequireResponseHeadersFieldNumber = 19,
  };
  // repeated string url_chain = 16;
  int url_chain_size() const;
  void clear_url_chain();
  const std::string& url_chain(int index) const;
  std::string* mutable_url_chain(int index);
  void set_url_chain(int index, const std::string& value);
  void set_url_chain(int index, std::string&& value);
  void set_url_chain(int index, const char* value);
  void set_url_chain(int index, const char* value, size_t size);
  std::string* add_url_chain();
  void add_url_chain(const std::string& value);
  void add_url_chain(std::string&& value);
  void add_url_chain(const char* value);
  void add_url_chain(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& url_chain() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_url_chain();

  // optional string guid = 2;
  bool has_guid() const;
  void clear_guid();
  const std::string& guid() const;
  void set_guid(const std::string& value);
  void set_guid(std::string&& value);
  void set_guid(const char* value);
  void set_guid(const char* value, size_t size);
  std::string* mutable_guid();
  std::string* release_guid();
  void set_allocated_guid(std::string* guid);

  // optional string target_file_path = 6;
  bool has_target_file_path() const;
  void clear_target_file_path();
  const std::string& target_file_path() const;
  void set_target_file_path(const std::string& value);
  void set_target_file_path(std::string&& value);
  void set_target_file_path(const char* value);
  void set_target_file_path(const char* value, size_t size);
  std::string* mutable_target_file_path();
  std::string* release_target_file_path();
  void set_allocated_target_file_path(std::string* target_file_path);

  // optional string response_headers = 17;
  bool has_response_headers() const;
  void clear_response_headers();
  const std::string& response_headers() const;
  void set_response_headers(const std::string& value);
  void set_response_headers(std::string&& value);
  void set_response_headers(const char* value);
  void set_response_headers(const char* value, size_t size);
  std::string* mutable_response_headers();
  std::string* release_response_headers();
  void set_allocated_response_headers(std::string* response_headers);

  // optional .protodb.SchedulingParams scheduling_params = 3;
  bool has_scheduling_params() const;
  void clear_scheduling_params();
  const ::protodb::SchedulingParams& scheduling_params() const;
  ::protodb::SchedulingParams* release_scheduling_params();
  ::protodb::SchedulingParams* mutable_scheduling_params();
  void set_allocated_scheduling_params(::protodb::SchedulingParams* scheduling_params);

  // optional .protodb.RequestParams request_params = 4;
  bool has_request_params() const;
  void clear_request_params();
  const ::protodb::RequestParams& request_params() const;
  ::protodb::RequestParams* release_request_params();
  ::protodb::RequestParams* mutable_request_params();
  void set_allocated_request_params(::protodb::RequestParams* request_params);

  // optional .protodb.DownloadClient name_space = 1;
  bool has_name_space() const;
  void clear_name_space();
  ::protodb::DownloadClient name_space() const;
  void set_name_space(::protodb::DownloadClient value);

  // optional .protodb.Entry.State state = 5;
  bool has_state() const;
  void clear_state();
  ::protodb::Entry_State state() const;
  void set_state(::protodb::Entry_State value);

  // optional int64 create_time = 7;
  bool has_create_time() const;
  void clear_create_time();
  ::PROTOBUF_NAMESPACE_ID::int64 create_time() const;
  void set_create_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 completion_time = 8;
  bool has_completion_time() const;
  void clear_completion_time();
  ::PROTOBUF_NAMESPACE_ID::int64 completion_time() const;
  void set_completion_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 attempt_count = 9;
  bool has_attempt_count() const;
  void clear_attempt_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 attempt_count() const;
  void set_attempt_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 traffic_annotation = 10;
  bool has_traffic_annotation() const;
  void clear_traffic_annotation();
  ::PROTOBUF_NAMESPACE_ID::int32 traffic_annotation() const;
  void set_traffic_annotation(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint64 bytes_downloaded = 11;
  bool has_bytes_downloaded() const;
  void clear_bytes_downloaded();
  ::PROTOBUF_NAMESPACE_ID::uint64 bytes_downloaded() const;
  void set_bytes_downloaded(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional int64 last_cleanup_check_time = 12;
  bool has_last_cleanup_check_time() const;
  void clear_last_cleanup_check_time();
  ::PROTOBUF_NAMESPACE_ID::int64 last_cleanup_check_time() const;
  void set_last_cleanup_check_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional uint32 resumption_count = 14;
  bool has_resumption_count() const;
  void clear_resumption_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 resumption_count() const;
  void set_resumption_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool has_upload_data = 15;
  bool has_has_upload_data() const;
  void clear_has_upload_data();
  bool has_upload_data() const;
  void set_has_upload_data(bool value);

  // optional bool did_received_response = 18;
  bool has_did_received_response() const;
  void clear_did_received_response();
  bool did_received_response() const;
  void set_did_received_response(bool value);

  // optional bool require_response_headers = 19;
  bool has_require_response_headers() const;
  void clear_require_response_headers();
  bool require_response_headers() const;
  void set_require_response_headers(bool value);

  // @@protoc_insertion_point(class_scope:protodb.Entry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> url_chain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_file_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_headers_;
  ::protodb::SchedulingParams* scheduling_params_;
  ::protodb::RequestParams* request_params_;
  int name_space_;
  int state_;
  ::PROTOBUF_NAMESPACE_ID::int64 create_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 completion_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 attempt_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 traffic_annotation_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bytes_downloaded_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_cleanup_check_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 resumption_count_;
  bool has_upload_data_;
  bool did_received_response_;
  bool require_response_headers_;
  friend struct ::TableStruct_entry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Entry

// optional .protodb.DownloadClient name_space = 1;
inline bool Entry::has_name_space() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Entry::clear_name_space() {
  name_space_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::protodb::DownloadClient Entry::name_space() const {
  // @@protoc_insertion_point(field_get:protodb.Entry.name_space)
  return static_cast< ::protodb::DownloadClient >(name_space_);
}
inline void Entry::set_name_space(::protodb::DownloadClient value) {
  assert(::protodb::DownloadClient_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  name_space_ = value;
  // @@protoc_insertion_point(field_set:protodb.Entry.name_space)
}

// optional string guid = 2;
inline bool Entry::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Entry::clear_guid() {
  guid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Entry::guid() const {
  // @@protoc_insertion_point(field_get:protodb.Entry.guid)
  return guid_.GetNoArena();
}
inline void Entry::set_guid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protodb.Entry.guid)
}
inline void Entry::set_guid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  guid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protodb.Entry.guid)
}
inline void Entry::set_guid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protodb.Entry.guid)
}
inline void Entry::set_guid(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  guid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protodb.Entry.guid)
}
inline std::string* Entry::mutable_guid() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:protodb.Entry.guid)
  return guid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Entry::release_guid() {
  // @@protoc_insertion_point(field_release:protodb.Entry.guid)
  if (!has_guid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return guid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_allocated_guid(std::string* guid) {
  if (guid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  guid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guid);
  // @@protoc_insertion_point(field_set_allocated:protodb.Entry.guid)
}

// optional .protodb.SchedulingParams scheduling_params = 3;
inline bool Entry::has_scheduling_params() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::protodb::SchedulingParams& Entry::scheduling_params() const {
  const ::protodb::SchedulingParams* p = scheduling_params_;
  // @@protoc_insertion_point(field_get:protodb.Entry.scheduling_params)
  return p != nullptr ? *p : *reinterpret_cast<const ::protodb::SchedulingParams*>(
      &::protodb::_SchedulingParams_default_instance_);
}
inline ::protodb::SchedulingParams* Entry::release_scheduling_params() {
  // @@protoc_insertion_point(field_release:protodb.Entry.scheduling_params)
  _has_bits_[0] &= ~0x00000008u;
  ::protodb::SchedulingParams* temp = scheduling_params_;
  scheduling_params_ = nullptr;
  return temp;
}
inline ::protodb::SchedulingParams* Entry::mutable_scheduling_params() {
  _has_bits_[0] |= 0x00000008u;
  if (scheduling_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::protodb::SchedulingParams>(GetArenaNoVirtual());
    scheduling_params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protodb.Entry.scheduling_params)
  return scheduling_params_;
}
inline void Entry::set_allocated_scheduling_params(::protodb::SchedulingParams* scheduling_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scheduling_params_);
  }
  if (scheduling_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scheduling_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scheduling_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  scheduling_params_ = scheduling_params;
  // @@protoc_insertion_point(field_set_allocated:protodb.Entry.scheduling_params)
}

// optional .protodb.RequestParams request_params = 4;
inline bool Entry::has_request_params() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::protodb::RequestParams& Entry::request_params() const {
  const ::protodb::RequestParams* p = request_params_;
  // @@protoc_insertion_point(field_get:protodb.Entry.request_params)
  return p != nullptr ? *p : *reinterpret_cast<const ::protodb::RequestParams*>(
      &::protodb::_RequestParams_default_instance_);
}
inline ::protodb::RequestParams* Entry::release_request_params() {
  // @@protoc_insertion_point(field_release:protodb.Entry.request_params)
  _has_bits_[0] &= ~0x00000010u;
  ::protodb::RequestParams* temp = request_params_;
  request_params_ = nullptr;
  return temp;
}
inline ::protodb::RequestParams* Entry::mutable_request_params() {
  _has_bits_[0] |= 0x00000010u;
  if (request_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::protodb::RequestParams>(GetArenaNoVirtual());
    request_params_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protodb.Entry.request_params)
  return request_params_;
}
inline void Entry::set_allocated_request_params(::protodb::RequestParams* request_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_params_);
  }
  if (request_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      request_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  request_params_ = request_params;
  // @@protoc_insertion_point(field_set_allocated:protodb.Entry.request_params)
}

// optional .protodb.Entry.State state = 5;
inline bool Entry::has_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Entry::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::protodb::Entry_State Entry::state() const {
  // @@protoc_insertion_point(field_get:protodb.Entry.state)
  return static_cast< ::protodb::Entry_State >(state_);
}
inline void Entry::set_state(::protodb::Entry_State value) {
  assert(::protodb::Entry_State_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  state_ = value;
  // @@protoc_insertion_point(field_set:protodb.Entry.state)
}

// optional string target_file_path = 6;
inline bool Entry::has_target_file_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Entry::clear_target_file_path() {
  target_file_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Entry::target_file_path() const {
  // @@protoc_insertion_point(field_get:protodb.Entry.target_file_path)
  return target_file_path_.GetNoArena();
}
inline void Entry::set_target_file_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  target_file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protodb.Entry.target_file_path)
}
inline void Entry::set_target_file_path(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  target_file_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protodb.Entry.target_file_path)
}
inline void Entry::set_target_file_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  target_file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protodb.Entry.target_file_path)
}
inline void Entry::set_target_file_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  target_file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protodb.Entry.target_file_path)
}
inline std::string* Entry::mutable_target_file_path() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:protodb.Entry.target_file_path)
  return target_file_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Entry::release_target_file_path() {
  // @@protoc_insertion_point(field_release:protodb.Entry.target_file_path)
  if (!has_target_file_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return target_file_path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_allocated_target_file_path(std::string* target_file_path) {
  if (target_file_path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  target_file_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_file_path);
  // @@protoc_insertion_point(field_set_allocated:protodb.Entry.target_file_path)
}

// optional int64 create_time = 7;
inline bool Entry::has_create_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Entry::clear_create_time() {
  create_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Entry::create_time() const {
  // @@protoc_insertion_point(field_get:protodb.Entry.create_time)
  return create_time_;
}
inline void Entry::set_create_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  create_time_ = value;
  // @@protoc_insertion_point(field_set:protodb.Entry.create_time)
}

// optional int64 completion_time = 8;
inline bool Entry::has_completion_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Entry::clear_completion_time() {
  completion_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Entry::completion_time() const {
  // @@protoc_insertion_point(field_get:protodb.Entry.completion_time)
  return completion_time_;
}
inline void Entry::set_completion_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  completion_time_ = value;
  // @@protoc_insertion_point(field_set:protodb.Entry.completion_time)
}

// optional uint32 attempt_count = 9;
inline bool Entry::has_attempt_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Entry::clear_attempt_count() {
  attempt_count_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Entry::attempt_count() const {
  // @@protoc_insertion_point(field_get:protodb.Entry.attempt_count)
  return attempt_count_;
}
inline void Entry::set_attempt_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  attempt_count_ = value;
  // @@protoc_insertion_point(field_set:protodb.Entry.attempt_count)
}

// optional int32 traffic_annotation = 10;
inline bool Entry::has_traffic_annotation() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Entry::clear_traffic_annotation() {
  traffic_annotation_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Entry::traffic_annotation() const {
  // @@protoc_insertion_point(field_get:protodb.Entry.traffic_annotation)
  return traffic_annotation_;
}
inline void Entry::set_traffic_annotation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  traffic_annotation_ = value;
  // @@protoc_insertion_point(field_set:protodb.Entry.traffic_annotation)
}

// optional uint64 bytes_downloaded = 11;
inline bool Entry::has_bytes_downloaded() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Entry::clear_bytes_downloaded() {
  bytes_downloaded_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Entry::bytes_downloaded() const {
  // @@protoc_insertion_point(field_get:protodb.Entry.bytes_downloaded)
  return bytes_downloaded_;
}
inline void Entry::set_bytes_downloaded(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  bytes_downloaded_ = value;
  // @@protoc_insertion_point(field_set:protodb.Entry.bytes_downloaded)
}

// optional int64 last_cleanup_check_time = 12;
inline bool Entry::has_last_cleanup_check_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Entry::clear_last_cleanup_check_time() {
  last_cleanup_check_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Entry::last_cleanup_check_time() const {
  // @@protoc_insertion_point(field_get:protodb.Entry.last_cleanup_check_time)
  return last_cleanup_check_time_;
}
inline void Entry::set_last_cleanup_check_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00001000u;
  last_cleanup_check_time_ = value;
  // @@protoc_insertion_point(field_set:protodb.Entry.last_cleanup_check_time)
}

// optional uint32 resumption_count = 14;
inline bool Entry::has_resumption_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Entry::clear_resumption_count() {
  resumption_count_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Entry::resumption_count() const {
  // @@protoc_insertion_point(field_get:protodb.Entry.resumption_count)
  return resumption_count_;
}
inline void Entry::set_resumption_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  resumption_count_ = value;
  // @@protoc_insertion_point(field_set:protodb.Entry.resumption_count)
}

// optional bool has_upload_data = 15;
inline bool Entry::has_has_upload_data() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Entry::clear_has_upload_data() {
  has_upload_data_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool Entry::has_upload_data() const {
  // @@protoc_insertion_point(field_get:protodb.Entry.has_upload_data)
  return has_upload_data_;
}
inline void Entry::set_has_upload_data(bool value) {
  _has_bits_[0] |= 0x00004000u;
  has_upload_data_ = value;
  // @@protoc_insertion_point(field_set:protodb.Entry.has_upload_data)
}

// repeated string url_chain = 16;
inline int Entry::url_chain_size() const {
  return url_chain_.size();
}
inline void Entry::clear_url_chain() {
  url_chain_.Clear();
}
inline const std::string& Entry::url_chain(int index) const {
  // @@protoc_insertion_point(field_get:protodb.Entry.url_chain)
  return url_chain_.Get(index);
}
inline std::string* Entry::mutable_url_chain(int index) {
  // @@protoc_insertion_point(field_mutable:protodb.Entry.url_chain)
  return url_chain_.Mutable(index);
}
inline void Entry::set_url_chain(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protodb.Entry.url_chain)
  url_chain_.Mutable(index)->assign(value);
}
inline void Entry::set_url_chain(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protodb.Entry.url_chain)
  url_chain_.Mutable(index)->assign(std::move(value));
}
inline void Entry::set_url_chain(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  url_chain_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protodb.Entry.url_chain)
}
inline void Entry::set_url_chain(int index, const char* value, size_t size) {
  url_chain_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protodb.Entry.url_chain)
}
inline std::string* Entry::add_url_chain() {
  // @@protoc_insertion_point(field_add_mutable:protodb.Entry.url_chain)
  return url_chain_.Add();
}
inline void Entry::add_url_chain(const std::string& value) {
  url_chain_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protodb.Entry.url_chain)
}
inline void Entry::add_url_chain(std::string&& value) {
  url_chain_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protodb.Entry.url_chain)
}
inline void Entry::add_url_chain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  url_chain_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protodb.Entry.url_chain)
}
inline void Entry::add_url_chain(const char* value, size_t size) {
  url_chain_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protodb.Entry.url_chain)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Entry::url_chain() const {
  // @@protoc_insertion_point(field_list:protodb.Entry.url_chain)
  return url_chain_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Entry::mutable_url_chain() {
  // @@protoc_insertion_point(field_mutable_list:protodb.Entry.url_chain)
  return &url_chain_;
}

// optional string response_headers = 17;
inline bool Entry::has_response_headers() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Entry::clear_response_headers() {
  response_headers_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Entry::response_headers() const {
  // @@protoc_insertion_point(field_get:protodb.Entry.response_headers)
  return response_headers_.GetNoArena();
}
inline void Entry::set_response_headers(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  response_headers_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protodb.Entry.response_headers)
}
inline void Entry::set_response_headers(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  response_headers_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protodb.Entry.response_headers)
}
inline void Entry::set_response_headers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  response_headers_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protodb.Entry.response_headers)
}
inline void Entry::set_response_headers(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  response_headers_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protodb.Entry.response_headers)
}
inline std::string* Entry::mutable_response_headers() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:protodb.Entry.response_headers)
  return response_headers_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Entry::release_response_headers() {
  // @@protoc_insertion_point(field_release:protodb.Entry.response_headers)
  if (!has_response_headers()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return response_headers_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Entry::set_allocated_response_headers(std::string* response_headers) {
  if (response_headers != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  response_headers_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response_headers);
  // @@protoc_insertion_point(field_set_allocated:protodb.Entry.response_headers)
}

// optional bool did_received_response = 18;
inline bool Entry::has_did_received_response() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Entry::clear_did_received_response() {
  did_received_response_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool Entry::did_received_response() const {
  // @@protoc_insertion_point(field_get:protodb.Entry.did_received_response)
  return did_received_response_;
}
inline void Entry::set_did_received_response(bool value) {
  _has_bits_[0] |= 0x00008000u;
  did_received_response_ = value;
  // @@protoc_insertion_point(field_set:protodb.Entry.did_received_response)
}

// optional bool require_response_headers = 19;
inline bool Entry::has_require_response_headers() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Entry::clear_require_response_headers() {
  require_response_headers_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool Entry::require_response_headers() const {
  // @@protoc_insertion_point(field_get:protodb.Entry.require_response_headers)
  return require_response_headers_;
}
inline void Entry::set_require_response_headers(bool value) {
  _has_bits_[0] |= 0x00010000u;
  require_response_headers_ = value;
  // @@protoc_insertion_point(field_set:protodb.Entry.require_response_headers)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protodb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protodb::Entry_State> : ::std::true_type {};
template <> struct is_proto_enum< ::protodb::DownloadClient> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_entry_2eproto

// components/spellcheck/common/spellcheck.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SPELLCHECK_COMMON_SPELLCHECK_MOJOM_TEST_UTILS_H_
#define COMPONENTS_SPELLCHECK_COMMON_SPELLCHECK_MOJOM_TEST_UTILS_H_

#include "components/spellcheck/common/spellcheck.mojom.h"


namespace spellcheck {
namespace mojom {


class  SpellCheckerInterceptorForTesting : public SpellChecker {
  virtual SpellChecker* GetForwardingInterface() = 0;
  void Initialize(std::vector<SpellCheckBDictLanguagePtr> dictionaries, const std::vector<std::string>& custom_words, bool enable) override;
  void CustomDictionaryChanged(const std::vector<std::string>& words_added, const std::vector<std::string>& words_removed) override;
};
class  SpellCheckerAsyncWaiter {
 public:
  explicit SpellCheckerAsyncWaiter(SpellChecker* proxy);
  ~SpellCheckerAsyncWaiter();

 private:
  SpellChecker* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(SpellCheckerAsyncWaiter);
};


class  SpellCheckHostInterceptorForTesting : public SpellCheckHost {
  virtual SpellCheckHost* GetForwardingInterface() = 0;
  void RequestDictionary() override;
  void NotifyChecked(const ::base::string16& word, bool misspelled) override;
  void CallSpellingService(const ::base::string16& text, CallSpellingServiceCallback callback) override;
};
class  SpellCheckHostAsyncWaiter {
 public:
  explicit SpellCheckHostAsyncWaiter(SpellCheckHost* proxy);
  ~SpellCheckHostAsyncWaiter();
  void CallSpellingService(
      const ::base::string16& text, bool* out_success, std::vector<::SpellCheckResult>* out_results);

 private:
  SpellCheckHost* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(SpellCheckHostAsyncWaiter);
};




}  // namespace mojom
}  // namespace spellcheck

#endif  // COMPONENTS_SPELLCHECK_COMMON_SPELLCHECK_MOJOM_TEST_UTILS_H_
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: performance_hints_metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_performance_5fhints_5fmetadata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_performance_5fhints_5fmetadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_performance_5fhints_5fmetadata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_performance_5fhints_5fmetadata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace optimization_guide {
namespace proto {
class PerformanceHint;
class PerformanceHintDefaultTypeInternal;
extern PerformanceHintDefaultTypeInternal _PerformanceHint_default_instance_;
class PerformanceHintsMetadata;
class PerformanceHintsMetadataDefaultTypeInternal;
extern PerformanceHintsMetadataDefaultTypeInternal _PerformanceHintsMetadata_default_instance_;
}  // namespace proto
}  // namespace optimization_guide
PROTOBUF_NAMESPACE_OPEN
template<> ::optimization_guide::proto::PerformanceHint* Arena::CreateMaybeMessage<::optimization_guide::proto::PerformanceHint>(Arena*);
template<> ::optimization_guide::proto::PerformanceHintsMetadata* Arena::CreateMaybeMessage<::optimization_guide::proto::PerformanceHintsMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace optimization_guide {
namespace proto {

enum PerformanceClass : int {
  PERFORMANCE_UNKNOWN = 0,
  PERFORMANCE_SLOW = 1,
  PERFORMANCE_FAST = 2,
  PERFORMANCE_NORMAL = 3
};
bool PerformanceClass_IsValid(int value);
constexpr PerformanceClass PerformanceClass_MIN = PERFORMANCE_UNKNOWN;
constexpr PerformanceClass PerformanceClass_MAX = PERFORMANCE_NORMAL;
constexpr int PerformanceClass_ARRAYSIZE = PerformanceClass_MAX + 1;

const std::string& PerformanceClass_Name(PerformanceClass value);
template<typename T>
inline const std::string& PerformanceClass_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PerformanceClass>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PerformanceClass_Name.");
  return PerformanceClass_Name(static_cast<PerformanceClass>(enum_t_value));
}
bool PerformanceClass_Parse(
    const std::string& name, PerformanceClass* value);
// ===================================================================

class PerformanceHint :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:optimization_guide.proto.PerformanceHint) */ {
 public:
  PerformanceHint();
  virtual ~PerformanceHint();

  PerformanceHint(const PerformanceHint& from);
  PerformanceHint(PerformanceHint&& from) noexcept
    : PerformanceHint() {
    *this = ::std::move(from);
  }

  inline PerformanceHint& operator=(const PerformanceHint& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerformanceHint& operator=(PerformanceHint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerformanceHint& default_instance();

  enum KeyCase {
    kWildcardPattern = 1,
    KEY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerformanceHint* internal_default_instance() {
    return reinterpret_cast<const PerformanceHint*>(
               &_PerformanceHint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PerformanceHint& a, PerformanceHint& b) {
    a.Swap(&b);
  }
  inline void Swap(PerformanceHint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerformanceHint* New() const final {
    return CreateMaybeMessage<PerformanceHint>(nullptr);
  }

  PerformanceHint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerformanceHint>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerformanceHint& from);
  void MergeFrom(const PerformanceHint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerformanceHint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimization_guide.proto.PerformanceHint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPerformanceClassFieldNumber = 2,
    kWildcardPatternFieldNumber = 1,
  };
  // optional .optimization_guide.proto.PerformanceClass performance_class = 2;
  bool has_performance_class() const;
  void clear_performance_class();
  ::optimization_guide::proto::PerformanceClass performance_class() const;
  void set_performance_class(::optimization_guide::proto::PerformanceClass value);

  // optional string wildcard_pattern = 1;
  bool has_wildcard_pattern() const;
  void clear_wildcard_pattern();
  const std::string& wildcard_pattern() const;
  void set_wildcard_pattern(const std::string& value);
  void set_wildcard_pattern(std::string&& value);
  void set_wildcard_pattern(const char* value);
  void set_wildcard_pattern(const char* value, size_t size);
  std::string* mutable_wildcard_pattern();
  std::string* release_wildcard_pattern();
  void set_allocated_wildcard_pattern(std::string* wildcard_pattern);

  void clear_key();
  KeyCase key_case() const;
  // @@protoc_insertion_point(class_scope:optimization_guide.proto.PerformanceHint)
 private:
  class _Internal;
  void set_has_wildcard_pattern();

  inline bool has_key() const;
  inline void clear_has_key();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int performance_class_;
  union KeyUnion {
    KeyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wildcard_pattern_;
  } key_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_performance_5fhints_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class PerformanceHintsMetadata :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:optimization_guide.proto.PerformanceHintsMetadata) */ {
 public:
  PerformanceHintsMetadata();
  virtual ~PerformanceHintsMetadata();

  PerformanceHintsMetadata(const PerformanceHintsMetadata& from);
  PerformanceHintsMetadata(PerformanceHintsMetadata&& from) noexcept
    : PerformanceHintsMetadata() {
    *this = ::std::move(from);
  }

  inline PerformanceHintsMetadata& operator=(const PerformanceHintsMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerformanceHintsMetadata& operator=(PerformanceHintsMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PerformanceHintsMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerformanceHintsMetadata* internal_default_instance() {
    return reinterpret_cast<const PerformanceHintsMetadata*>(
               &_PerformanceHintsMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PerformanceHintsMetadata& a, PerformanceHintsMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(PerformanceHintsMetadata* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerformanceHintsMetadata* New() const final {
    return CreateMaybeMessage<PerformanceHintsMetadata>(nullptr);
  }

  PerformanceHintsMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerformanceHintsMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PerformanceHintsMetadata& from);
  void MergeFrom(const PerformanceHintsMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PerformanceHintsMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimization_guide.proto.PerformanceHintsMetadata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPerformanceHintsFieldNumber = 1,
    kPageHintFieldNumber = 2,
  };
  // repeated .optimization_guide.proto.PerformanceHint performance_hints = 1;
  int performance_hints_size() const;
  void clear_performance_hints();
  ::optimization_guide::proto::PerformanceHint* mutable_performance_hints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::PerformanceHint >*
      mutable_performance_hints();
  const ::optimization_guide::proto::PerformanceHint& performance_hints(int index) const;
  ::optimization_guide::proto::PerformanceHint* add_performance_hints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::PerformanceHint >&
      performance_hints() const;

  // optional .optimization_guide.proto.PerformanceHint page_hint = 2;
  bool has_page_hint() const;
  void clear_page_hint();
  const ::optimization_guide::proto::PerformanceHint& page_hint() const;
  ::optimization_guide::proto::PerformanceHint* release_page_hint();
  ::optimization_guide::proto::PerformanceHint* mutable_page_hint();
  void set_allocated_page_hint(::optimization_guide::proto::PerformanceHint* page_hint);

  // @@protoc_insertion_point(class_scope:optimization_guide.proto.PerformanceHintsMetadata)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::PerformanceHint > performance_hints_;
  ::optimization_guide::proto::PerformanceHint* page_hint_;
  friend struct ::TableStruct_performance_5fhints_5fmetadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PerformanceHint

// optional string wildcard_pattern = 1;
inline bool PerformanceHint::has_wildcard_pattern() const {
  return key_case() == kWildcardPattern;
}
inline void PerformanceHint::set_has_wildcard_pattern() {
  _oneof_case_[0] = kWildcardPattern;
}
inline void PerformanceHint::clear_wildcard_pattern() {
  if (has_wildcard_pattern()) {
    key_.wildcard_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_key();
  }
}
inline const std::string& PerformanceHint::wildcard_pattern() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.PerformanceHint.wildcard_pattern)
  if (has_wildcard_pattern()) {
    return key_.wildcard_pattern_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PerformanceHint::set_wildcard_pattern(const std::string& value) {
  // @@protoc_insertion_point(field_set:optimization_guide.proto.PerformanceHint.wildcard_pattern)
  if (!has_wildcard_pattern()) {
    clear_key();
    set_has_wildcard_pattern();
    key_.wildcard_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  key_.wildcard_pattern_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:optimization_guide.proto.PerformanceHint.wildcard_pattern)
}
inline void PerformanceHint::set_wildcard_pattern(std::string&& value) {
  // @@protoc_insertion_point(field_set:optimization_guide.proto.PerformanceHint.wildcard_pattern)
  if (!has_wildcard_pattern()) {
    clear_key();
    set_has_wildcard_pattern();
    key_.wildcard_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  key_.wildcard_pattern_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:optimization_guide.proto.PerformanceHint.wildcard_pattern)
}
inline void PerformanceHint::set_wildcard_pattern(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_wildcard_pattern()) {
    clear_key();
    set_has_wildcard_pattern();
    key_.wildcard_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  key_.wildcard_pattern_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:optimization_guide.proto.PerformanceHint.wildcard_pattern)
}
inline void PerformanceHint::set_wildcard_pattern(const char* value, size_t size) {
  if (!has_wildcard_pattern()) {
    clear_key();
    set_has_wildcard_pattern();
    key_.wildcard_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  key_.wildcard_pattern_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:optimization_guide.proto.PerformanceHint.wildcard_pattern)
}
inline std::string* PerformanceHint::mutable_wildcard_pattern() {
  if (!has_wildcard_pattern()) {
    clear_key();
    set_has_wildcard_pattern();
    key_.wildcard_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.PerformanceHint.wildcard_pattern)
  return key_.wildcard_pattern_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PerformanceHint::release_wildcard_pattern() {
  // @@protoc_insertion_point(field_release:optimization_guide.proto.PerformanceHint.wildcard_pattern)
  if (has_wildcard_pattern()) {
    clear_has_key();
    return key_.wildcard_pattern_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void PerformanceHint::set_allocated_wildcard_pattern(std::string* wildcard_pattern) {
  if (has_key()) {
    clear_key();
  }
  if (wildcard_pattern != nullptr) {
    set_has_wildcard_pattern();
    key_.wildcard_pattern_.UnsafeSetDefault(wildcard_pattern);
  }
  // @@protoc_insertion_point(field_set_allocated:optimization_guide.proto.PerformanceHint.wildcard_pattern)
}

// optional .optimization_guide.proto.PerformanceClass performance_class = 2;
inline bool PerformanceHint::has_performance_class() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerformanceHint::clear_performance_class() {
  performance_class_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::optimization_guide::proto::PerformanceClass PerformanceHint::performance_class() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.PerformanceHint.performance_class)
  return static_cast< ::optimization_guide::proto::PerformanceClass >(performance_class_);
}
inline void PerformanceHint::set_performance_class(::optimization_guide::proto::PerformanceClass value) {
  assert(::optimization_guide::proto::PerformanceClass_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  performance_class_ = value;
  // @@protoc_insertion_point(field_set:optimization_guide.proto.PerformanceHint.performance_class)
}

inline bool PerformanceHint::has_key() const {
  return key_case() != KEY_NOT_SET;
}
inline void PerformanceHint::clear_has_key() {
  _oneof_case_[0] = KEY_NOT_SET;
}
inline PerformanceHint::KeyCase PerformanceHint::key_case() const {
  return PerformanceHint::KeyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PerformanceHintsMetadata

// repeated .optimization_guide.proto.PerformanceHint performance_hints = 1;
inline int PerformanceHintsMetadata::performance_hints_size() const {
  return performance_hints_.size();
}
inline void PerformanceHintsMetadata::clear_performance_hints() {
  performance_hints_.Clear();
}
inline ::optimization_guide::proto::PerformanceHint* PerformanceHintsMetadata::mutable_performance_hints(int index) {
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.PerformanceHintsMetadata.performance_hints)
  return performance_hints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::PerformanceHint >*
PerformanceHintsMetadata::mutable_performance_hints() {
  // @@protoc_insertion_point(field_mutable_list:optimization_guide.proto.PerformanceHintsMetadata.performance_hints)
  return &performance_hints_;
}
inline const ::optimization_guide::proto::PerformanceHint& PerformanceHintsMetadata::performance_hints(int index) const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.PerformanceHintsMetadata.performance_hints)
  return performance_hints_.Get(index);
}
inline ::optimization_guide::proto::PerformanceHint* PerformanceHintsMetadata::add_performance_hints() {
  // @@protoc_insertion_point(field_add:optimization_guide.proto.PerformanceHintsMetadata.performance_hints)
  return performance_hints_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::PerformanceHint >&
PerformanceHintsMetadata::performance_hints() const {
  // @@protoc_insertion_point(field_list:optimization_guide.proto.PerformanceHintsMetadata.performance_hints)
  return performance_hints_;
}

// optional .optimization_guide.proto.PerformanceHint page_hint = 2;
inline bool PerformanceHintsMetadata::has_page_hint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PerformanceHintsMetadata::clear_page_hint() {
  if (page_hint_ != nullptr) page_hint_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::optimization_guide::proto::PerformanceHint& PerformanceHintsMetadata::page_hint() const {
  const ::optimization_guide::proto::PerformanceHint* p = page_hint_;
  // @@protoc_insertion_point(field_get:optimization_guide.proto.PerformanceHintsMetadata.page_hint)
  return p != nullptr ? *p : *reinterpret_cast<const ::optimization_guide::proto::PerformanceHint*>(
      &::optimization_guide::proto::_PerformanceHint_default_instance_);
}
inline ::optimization_guide::proto::PerformanceHint* PerformanceHintsMetadata::release_page_hint() {
  // @@protoc_insertion_point(field_release:optimization_guide.proto.PerformanceHintsMetadata.page_hint)
  _has_bits_[0] &= ~0x00000001u;
  ::optimization_guide::proto::PerformanceHint* temp = page_hint_;
  page_hint_ = nullptr;
  return temp;
}
inline ::optimization_guide::proto::PerformanceHint* PerformanceHintsMetadata::mutable_page_hint() {
  _has_bits_[0] |= 0x00000001u;
  if (page_hint_ == nullptr) {
    auto* p = CreateMaybeMessage<::optimization_guide::proto::PerformanceHint>(GetArenaNoVirtual());
    page_hint_ = p;
  }
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.PerformanceHintsMetadata.page_hint)
  return page_hint_;
}
inline void PerformanceHintsMetadata::set_allocated_page_hint(::optimization_guide::proto::PerformanceHint* page_hint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete page_hint_;
  }
  if (page_hint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      page_hint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, page_hint, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  page_hint_ = page_hint;
  // @@protoc_insertion_point(field_set_allocated:optimization_guide.proto.PerformanceHintsMetadata.page_hint)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace optimization_guide

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::optimization_guide::proto::PerformanceClass> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_performance_5fhints_5fmetadata_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common_types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_5ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_5ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_5ftypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_5ftypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace optimization_guide {
namespace proto {

enum EffectiveConnectionType : int {
  EFFECTIVE_CONNECTION_TYPE_UNKNOWN = 0,
  EFFECTIVE_CONNECTION_TYPE_OFFLINE = 1,
  EFFECTIVE_CONNECTION_TYPE_SLOW_2G = 2,
  EFFECTIVE_CONNECTION_TYPE_2G = 3,
  EFFECTIVE_CONNECTION_TYPE_3G = 4,
  EFFECTIVE_CONNECTION_TYPE_4G = 5
};
bool EffectiveConnectionType_IsValid(int value);
constexpr EffectiveConnectionType EffectiveConnectionType_MIN = EFFECTIVE_CONNECTION_TYPE_UNKNOWN;
constexpr EffectiveConnectionType EffectiveConnectionType_MAX = EFFECTIVE_CONNECTION_TYPE_4G;
constexpr int EffectiveConnectionType_ARRAYSIZE = EffectiveConnectionType_MAX + 1;

const std::string& EffectiveConnectionType_Name(EffectiveConnectionType value);
template<typename T>
inline const std::string& EffectiveConnectionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EffectiveConnectionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EffectiveConnectionType_Name.");
  return EffectiveConnectionType_Name(static_cast<EffectiveConnectionType>(enum_t_value));
}
bool EffectiveConnectionType_Parse(
    const std::string& name, EffectiveConnectionType* value);
enum RequestContext : int {
  CONTEXT_UNSPECIFIED = 0,
  CONTEXT_PAGE_NAVIGATION = 2,
  CONTEXT_BATCH_UPDATE = 3
};
bool RequestContext_IsValid(int value);
constexpr RequestContext RequestContext_MIN = CONTEXT_UNSPECIFIED;
constexpr RequestContext RequestContext_MAX = CONTEXT_BATCH_UPDATE;
constexpr int RequestContext_ARRAYSIZE = RequestContext_MAX + 1;

const std::string& RequestContext_Name(RequestContext value);
template<typename T>
inline const std::string& RequestContext_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RequestContext>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RequestContext_Name.");
  return RequestContext_Name(static_cast<RequestContext>(enum_t_value));
}
bool RequestContext_Parse(
    const std::string& name, RequestContext* value);
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace optimization_guide

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::optimization_guide::proto::EffectiveConnectionType> : ::std::true_type {};
template <> struct is_proto_enum< ::optimization_guide::proto::RequestContext> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_5ftypes_2eproto

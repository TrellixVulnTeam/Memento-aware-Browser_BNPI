// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: performance_hints_metadata.proto

#include "performance_hints_metadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_performance_5fhints_5fmetadata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerformanceHint_performance_5fhints_5fmetadata_2eproto;
namespace optimization_guide {
namespace proto {
class PerformanceHintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerformanceHint> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wildcard_pattern_;
} _PerformanceHint_default_instance_;
class PerformanceHintsMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PerformanceHintsMetadata> _instance;
} _PerformanceHintsMetadata_default_instance_;
}  // namespace proto
}  // namespace optimization_guide
static void InitDefaultsscc_info_PerformanceHint_performance_5fhints_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::optimization_guide::proto::_PerformanceHint_default_instance_;
    new (ptr) ::optimization_guide::proto::PerformanceHint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::optimization_guide::proto::PerformanceHint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PerformanceHint_performance_5fhints_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PerformanceHint_performance_5fhints_5fmetadata_2eproto}, {}};

static void InitDefaultsscc_info_PerformanceHintsMetadata_performance_5fhints_5fmetadata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::optimization_guide::proto::_PerformanceHintsMetadata_default_instance_;
    new (ptr) ::optimization_guide::proto::PerformanceHintsMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::optimization_guide::proto::PerformanceHintsMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PerformanceHintsMetadata_performance_5fhints_5fmetadata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PerformanceHintsMetadata_performance_5fhints_5fmetadata_2eproto}, {
      &scc_info_PerformanceHint_performance_5fhints_5fmetadata_2eproto.base,}};

namespace optimization_guide {
namespace proto {
bool PerformanceClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PerformanceClass_strings[4] = {};

static const char PerformanceClass_names[] =
  "PERFORMANCE_FAST"
  "PERFORMANCE_NORMAL"
  "PERFORMANCE_SLOW"
  "PERFORMANCE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PerformanceClass_entries[] = {
  { {PerformanceClass_names + 0, 16}, 2 },
  { {PerformanceClass_names + 16, 18}, 3 },
  { {PerformanceClass_names + 34, 16}, 1 },
  { {PerformanceClass_names + 50, 19}, 0 },
};

static const int PerformanceClass_entries_by_number[] = {
  3, // 0 -> PERFORMANCE_UNKNOWN
  2, // 1 -> PERFORMANCE_SLOW
  0, // 2 -> PERFORMANCE_FAST
  1, // 3 -> PERFORMANCE_NORMAL
};

const std::string& PerformanceClass_Name(
    PerformanceClass value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PerformanceClass_entries,
          PerformanceClass_entries_by_number,
          4, PerformanceClass_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PerformanceClass_entries,
      PerformanceClass_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PerformanceClass_strings[idx].get();
}
bool PerformanceClass_Parse(
    const std::string& name, PerformanceClass* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PerformanceClass_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<PerformanceClass>(int_value);
  }
  return success;
}

// ===================================================================

void PerformanceHint::InitAsDefaultInstance() {
}
class PerformanceHint::_Internal {
 public:
  using HasBits = decltype(std::declval<PerformanceHint>()._has_bits_);
  static void set_has_performance_class(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PerformanceHint::PerformanceHint()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:optimization_guide.proto.PerformanceHint)
}
PerformanceHint::PerformanceHint(const PerformanceHint& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  performance_class_ = from.performance_class_;
  clear_has_key();
  switch (from.key_case()) {
    case kWildcardPattern: {
      set_wildcard_pattern(from.wildcard_pattern());
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.PerformanceHint)
}

void PerformanceHint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerformanceHint_performance_5fhints_5fmetadata_2eproto.base);
  performance_class_ = 0;
  clear_has_key();
}

PerformanceHint::~PerformanceHint() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.PerformanceHint)
  SharedDtor();
}

void PerformanceHint::SharedDtor() {
  if (has_key()) {
    clear_key();
  }
}

void PerformanceHint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerformanceHint& PerformanceHint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerformanceHint_performance_5fhints_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void PerformanceHint::clear_key() {
// @@protoc_insertion_point(one_of_clear_start:optimization_guide.proto.PerformanceHint)
  switch (key_case()) {
    case kWildcardPattern: {
      key_.wildcard_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KEY_NOT_SET;
}


void PerformanceHint::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.PerformanceHint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  performance_class_ = 0;
  clear_key();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PerformanceHint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string wildcard_pattern = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_wildcard_pattern(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .optimization_guide.proto.PerformanceClass performance_class = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::optimization_guide::proto::PerformanceClass_IsValid(val))) {
            set_performance_class(static_cast<::optimization_guide::proto::PerformanceClass>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PerformanceHint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:optimization_guide.proto.PerformanceHint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string wildcard_pattern = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_wildcard_pattern()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .optimization_guide.proto.PerformanceClass performance_class = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::optimization_guide::proto::PerformanceClass_IsValid(value)) {
            set_performance_class(static_cast< ::optimization_guide::proto::PerformanceClass >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:optimization_guide.proto.PerformanceHint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:optimization_guide.proto.PerformanceHint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PerformanceHint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:optimization_guide.proto.PerformanceHint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string wildcard_pattern = 1;
  if (has_wildcard_pattern()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->wildcard_pattern(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .optimization_guide.proto.PerformanceClass performance_class = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->performance_class(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:optimization_guide.proto.PerformanceHint)
}

size_t PerformanceHint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.PerformanceHint)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .optimization_guide.proto.PerformanceClass performance_class = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->performance_class());
  }

  switch (key_case()) {
    // optional string wildcard_pattern = 1;
    case kWildcardPattern: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->wildcard_pattern());
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerformanceHint::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PerformanceHint*>(
      &from));
}

void PerformanceHint::MergeFrom(const PerformanceHint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.PerformanceHint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_performance_class()) {
    set_performance_class(from.performance_class());
  }
  switch (from.key_case()) {
    case kWildcardPattern: {
      set_wildcard_pattern(from.wildcard_pattern());
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
}

void PerformanceHint::CopyFrom(const PerformanceHint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.PerformanceHint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerformanceHint::IsInitialized() const {
  return true;
}

void PerformanceHint::InternalSwap(PerformanceHint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(performance_class_, other->performance_class_);
  swap(key_, other->key_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string PerformanceHint::GetTypeName() const {
  return "optimization_guide.proto.PerformanceHint";
}


// ===================================================================

void PerformanceHintsMetadata::InitAsDefaultInstance() {
  ::optimization_guide::proto::_PerformanceHintsMetadata_default_instance_._instance.get_mutable()->page_hint_ = const_cast< ::optimization_guide::proto::PerformanceHint*>(
      ::optimization_guide::proto::PerformanceHint::internal_default_instance());
}
class PerformanceHintsMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<PerformanceHintsMetadata>()._has_bits_);
  static const ::optimization_guide::proto::PerformanceHint& page_hint(const PerformanceHintsMetadata* msg);
  static void set_has_page_hint(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::optimization_guide::proto::PerformanceHint&
PerformanceHintsMetadata::_Internal::page_hint(const PerformanceHintsMetadata* msg) {
  return *msg->page_hint_;
}
PerformanceHintsMetadata::PerformanceHintsMetadata()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:optimization_guide.proto.PerformanceHintsMetadata)
}
PerformanceHintsMetadata::PerformanceHintsMetadata(const PerformanceHintsMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      performance_hints_(from.performance_hints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_page_hint()) {
    page_hint_ = new ::optimization_guide::proto::PerformanceHint(*from.page_hint_);
  } else {
    page_hint_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.PerformanceHintsMetadata)
}

void PerformanceHintsMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PerformanceHintsMetadata_performance_5fhints_5fmetadata_2eproto.base);
  page_hint_ = nullptr;
}

PerformanceHintsMetadata::~PerformanceHintsMetadata() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.PerformanceHintsMetadata)
  SharedDtor();
}

void PerformanceHintsMetadata::SharedDtor() {
  if (this != internal_default_instance()) delete page_hint_;
}

void PerformanceHintsMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PerformanceHintsMetadata& PerformanceHintsMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PerformanceHintsMetadata_performance_5fhints_5fmetadata_2eproto.base);
  return *internal_default_instance();
}


void PerformanceHintsMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.PerformanceHintsMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  performance_hints_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(page_hint_ != nullptr);
    page_hint_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PerformanceHintsMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .optimization_guide.proto.PerformanceHint performance_hints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_performance_hints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional .optimization_guide.proto.PerformanceHint page_hint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_page_hint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PerformanceHintsMetadata::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:optimization_guide.proto.PerformanceHintsMetadata)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .optimization_guide.proto.PerformanceHint performance_hints = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_performance_hints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .optimization_guide.proto.PerformanceHint page_hint = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_page_hint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:optimization_guide.proto.PerformanceHintsMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:optimization_guide.proto.PerformanceHintsMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PerformanceHintsMetadata::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:optimization_guide.proto.PerformanceHintsMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .optimization_guide.proto.PerformanceHint performance_hints = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->performance_hints_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->performance_hints(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .optimization_guide.proto.PerformanceHint page_hint = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::page_hint(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:optimization_guide.proto.PerformanceHintsMetadata)
}

size_t PerformanceHintsMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.PerformanceHintsMetadata)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .optimization_guide.proto.PerformanceHint performance_hints = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->performance_hints_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->performance_hints(static_cast<int>(i)));
    }
  }

  // optional .optimization_guide.proto.PerformanceHint page_hint = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *page_hint_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerformanceHintsMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PerformanceHintsMetadata*>(
      &from));
}

void PerformanceHintsMetadata::MergeFrom(const PerformanceHintsMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.PerformanceHintsMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  performance_hints_.MergeFrom(from.performance_hints_);
  if (from.has_page_hint()) {
    mutable_page_hint()->::optimization_guide::proto::PerformanceHint::MergeFrom(from.page_hint());
  }
}

void PerformanceHintsMetadata::CopyFrom(const PerformanceHintsMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.PerformanceHintsMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerformanceHintsMetadata::IsInitialized() const {
  return true;
}

void PerformanceHintsMetadata::InternalSwap(PerformanceHintsMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&performance_hints_)->InternalSwap(CastToBase(&other->performance_hints_));
  swap(page_hint_, other->page_hint_);
}

std::string PerformanceHintsMetadata::GetTypeName() const {
  return "optimization_guide.proto.PerformanceHintsMetadata";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace optimization_guide
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::PerformanceHint* Arena::CreateMaybeMessage< ::optimization_guide::proto::PerformanceHint >(Arena* arena) {
  return Arena::CreateInternal< ::optimization_guide::proto::PerformanceHint >(arena);
}
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::PerformanceHintsMetadata* Arena::CreateMaybeMessage< ::optimization_guide::proto::PerformanceHintsMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::optimization_guide::proto::PerformanceHintsMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hint_cache.proto

#include "hint_cache.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_hints_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Hint_hints_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_models_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HostModelFeatures_models_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_models_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PredictionModel_models_2eproto;
namespace optimization_guide {
namespace proto {
class StoreEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StoreEntry> _instance;
} _StoreEntry_default_instance_;
}  // namespace proto
}  // namespace optimization_guide
static void InitDefaultsscc_info_StoreEntry_hint_5fcache_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::optimization_guide::proto::_StoreEntry_default_instance_;
    new (ptr) ::optimization_guide::proto::StoreEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::optimization_guide::proto::StoreEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_StoreEntry_hint_5fcache_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_StoreEntry_hint_5fcache_2eproto}, {
      &scc_info_Hint_hints_2eproto.base,
      &scc_info_PredictionModel_models_2eproto.base,
      &scc_info_HostModelFeatures_models_2eproto.base,}};

namespace optimization_guide {
namespace proto {
bool StoreEntryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> StoreEntryType_strings[6] = {};

static const char StoreEntryType_names[] =
  "COMPONENT_HINT"
  "EMPTY"
  "FETCHED_HINT"
  "HOST_MODEL_FEATURES"
  "METADATA"
  "PREDICTION_MODEL";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry StoreEntryType_entries[] = {
  { {StoreEntryType_names + 0, 14}, 2 },
  { {StoreEntryType_names + 14, 5}, 0 },
  { {StoreEntryType_names + 19, 12}, 3 },
  { {StoreEntryType_names + 31, 19}, 5 },
  { {StoreEntryType_names + 50, 8}, 1 },
  { {StoreEntryType_names + 58, 16}, 4 },
};

static const int StoreEntryType_entries_by_number[] = {
  1, // 0 -> EMPTY
  4, // 1 -> METADATA
  0, // 2 -> COMPONENT_HINT
  2, // 3 -> FETCHED_HINT
  5, // 4 -> PREDICTION_MODEL
  3, // 5 -> HOST_MODEL_FEATURES
};

const std::string& StoreEntryType_Name(
    StoreEntryType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          StoreEntryType_entries,
          StoreEntryType_entries_by_number,
          6, StoreEntryType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      StoreEntryType_entries,
      StoreEntryType_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     StoreEntryType_strings[idx].get();
}
bool StoreEntryType_Parse(
    const std::string& name, StoreEntryType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      StoreEntryType_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<StoreEntryType>(int_value);
  }
  return success;
}

// ===================================================================

void StoreEntry::InitAsDefaultInstance() {
  ::optimization_guide::proto::_StoreEntry_default_instance_._instance.get_mutable()->hint_ = const_cast< ::optimization_guide::proto::Hint*>(
      ::optimization_guide::proto::Hint::internal_default_instance());
  ::optimization_guide::proto::_StoreEntry_default_instance_._instance.get_mutable()->prediction_model_ = const_cast< ::optimization_guide::proto::PredictionModel*>(
      ::optimization_guide::proto::PredictionModel::internal_default_instance());
  ::optimization_guide::proto::_StoreEntry_default_instance_._instance.get_mutable()->host_model_features_ = const_cast< ::optimization_guide::proto::HostModelFeatures*>(
      ::optimization_guide::proto::HostModelFeatures::internal_default_instance());
}
class StoreEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<StoreEntry>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::optimization_guide::proto::Hint& hint(const StoreEntry* msg);
  static void set_has_hint(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_update_time_secs(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_entry_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_expiry_time_secs(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::optimization_guide::proto::PredictionModel& prediction_model(const StoreEntry* msg);
  static void set_has_prediction_model(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::optimization_guide::proto::HostModelFeatures& host_model_features(const StoreEntry* msg);
  static void set_has_host_model_features(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::optimization_guide::proto::Hint&
StoreEntry::_Internal::hint(const StoreEntry* msg) {
  return *msg->hint_;
}
const ::optimization_guide::proto::PredictionModel&
StoreEntry::_Internal::prediction_model(const StoreEntry* msg) {
  return *msg->prediction_model_;
}
const ::optimization_guide::proto::HostModelFeatures&
StoreEntry::_Internal::host_model_features(const StoreEntry* msg) {
  return *msg->host_model_features_;
}
void StoreEntry::clear_hint() {
  if (hint_ != nullptr) hint_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void StoreEntry::clear_prediction_model() {
  if (prediction_model_ != nullptr) prediction_model_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void StoreEntry::clear_host_model_features() {
  if (host_model_features_ != nullptr) host_model_features_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
StoreEntry::StoreEntry()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:optimization_guide.proto.StoreEntry)
}
StoreEntry::StoreEntry(const StoreEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_version()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.has_hint()) {
    hint_ = new ::optimization_guide::proto::Hint(*from.hint_);
  } else {
    hint_ = nullptr;
  }
  if (from.has_prediction_model()) {
    prediction_model_ = new ::optimization_guide::proto::PredictionModel(*from.prediction_model_);
  } else {
    prediction_model_ = nullptr;
  }
  if (from.has_host_model_features()) {
    host_model_features_ = new ::optimization_guide::proto::HostModelFeatures(*from.host_model_features_);
  } else {
    host_model_features_ = nullptr;
  }
  ::memcpy(&update_time_secs_, &from.update_time_secs_,
    static_cast<size_t>(reinterpret_cast<char*>(&entry_type_) -
    reinterpret_cast<char*>(&update_time_secs_)) + sizeof(entry_type_));
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.StoreEntry)
}

void StoreEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StoreEntry_hint_5fcache_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&hint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entry_type_) -
      reinterpret_cast<char*>(&hint_)) + sizeof(entry_type_));
}

StoreEntry::~StoreEntry() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.StoreEntry)
  SharedDtor();
}

void StoreEntry::SharedDtor() {
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hint_;
  if (this != internal_default_instance()) delete prediction_model_;
  if (this != internal_default_instance()) delete host_model_features_;
}

void StoreEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StoreEntry& StoreEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StoreEntry_hint_5fcache_2eproto.base);
  return *internal_default_instance();
}


void StoreEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.StoreEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(hint_ != nullptr);
      hint_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(prediction_model_ != nullptr);
      prediction_model_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(host_model_features_ != nullptr);
      host_model_features_->Clear();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    ::memset(&update_time_secs_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&entry_type_) -
        reinterpret_cast<char*>(&update_time_secs_)) + sizeof(entry_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StoreEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_version(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .optimization_guide.proto.Hint hint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_hint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 update_time_secs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_update_time_secs(&has_bits);
          update_time_secs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .optimization_guide.proto.StoreEntryType entry_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::optimization_guide::proto::StoreEntryType_IsValid(val))) {
            set_entry_type(static_cast<::optimization_guide::proto::StoreEntryType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 expiry_time_secs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_expiry_time_secs(&has_bits);
          expiry_time_secs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .optimization_guide.proto.PredictionModel prediction_model = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_prediction_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .optimization_guide.proto.HostModelFeatures host_model_features = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_host_model_features(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StoreEntry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:optimization_guide.proto.StoreEntry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .optimization_guide.proto.Hint hint = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_hint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 update_time_secs = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_update_time_secs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &update_time_secs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .optimization_guide.proto.StoreEntryType entry_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::optimization_guide::proto::StoreEntryType_IsValid(value)) {
            set_entry_type(static_cast< ::optimization_guide::proto::StoreEntryType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 expiry_time_secs = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_expiry_time_secs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiry_time_secs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .optimization_guide.proto.PredictionModel prediction_model = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_prediction_model()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .optimization_guide.proto.HostModelFeatures host_model_features = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_host_model_features()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:optimization_guide.proto.StoreEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:optimization_guide.proto.StoreEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StoreEntry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:optimization_guide.proto.StoreEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // optional .optimization_guide.proto.Hint hint = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::hint(this), output);
  }

  // optional int64 update_time_secs = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->update_time_secs(), output);
  }

  // optional .optimization_guide.proto.StoreEntryType entry_type = 4;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->entry_type(), output);
  }

  // optional int64 expiry_time_secs = 5;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->expiry_time_secs(), output);
  }

  // optional .optimization_guide.proto.PredictionModel prediction_model = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::prediction_model(this), output);
  }

  // optional .optimization_guide.proto.HostModelFeatures host_model_features = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::host_model_features(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:optimization_guide.proto.StoreEntry)
}

size_t StoreEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.StoreEntry)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional .optimization_guide.proto.Hint hint = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hint_);
    }

    // optional .optimization_guide.proto.PredictionModel prediction_model = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *prediction_model_);
    }

    // optional .optimization_guide.proto.HostModelFeatures host_model_features = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *host_model_features_);
    }

    // optional int64 update_time_secs = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->update_time_secs());
    }

    // optional int64 expiry_time_secs = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->expiry_time_secs());
    }

    // optional .optimization_guide.proto.StoreEntryType entry_type = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->entry_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoreEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StoreEntry*>(
      &from));
}

void StoreEntry::MergeFrom(const StoreEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.StoreEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_hint()->::optimization_guide::proto::Hint::MergeFrom(from.hint());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_prediction_model()->::optimization_guide::proto::PredictionModel::MergeFrom(from.prediction_model());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_host_model_features()->::optimization_guide::proto::HostModelFeatures::MergeFrom(from.host_model_features());
    }
    if (cached_has_bits & 0x00000010u) {
      update_time_secs_ = from.update_time_secs_;
    }
    if (cached_has_bits & 0x00000020u) {
      expiry_time_secs_ = from.expiry_time_secs_;
    }
    if (cached_has_bits & 0x00000040u) {
      entry_type_ = from.entry_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StoreEntry::CopyFrom(const StoreEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.StoreEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreEntry::IsInitialized() const {
  return true;
}

void StoreEntry::InternalSwap(StoreEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hint_, other->hint_);
  swap(prediction_model_, other->prediction_model_);
  swap(host_model_features_, other->host_model_features_);
  swap(update_time_secs_, other->update_time_secs_);
  swap(expiry_time_secs_, other->expiry_time_secs_);
  swap(entry_type_, other->entry_type_);
}

std::string StoreEntry::GetTypeName() const {
  return "optimization_guide.proto.StoreEntry";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace optimization_guide
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::StoreEntry* Arena::CreateMaybeMessage< ::optimization_guide::proto::StoreEntry >(Arena* arena) {
  return Arena::CreateInternal< ::optimization_guide::proto::StoreEntry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// components/translate/content/common/translate.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "components/translate/content/common/translate.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "components/translate/content/common/translate.mojom-params-data.h"
#include "components/translate/content/common/translate.mojom-shared-message-ids.h"

#include "components/translate/content/common/translate.mojom-import-headers.h"


#ifndef COMPONENTS_TRANSLATE_CONTENT_COMMON_TRANSLATE_MOJOM_JUMBO_H_
#define COMPONENTS_TRANSLATE_CONTENT_COMMON_TRANSLATE_MOJOM_JUMBO_H_
#include "components/translate/content/common/translate_mojom_traits.h"
#endif
namespace translate {
namespace mojom {
LanguageDetectionDetails::LanguageDetectionDetails()
    : time(),
      url(),
      content_language(),
      cld_language(),
      is_cld_reliable(),
      has_notranslate(),
      html_root_language(),
      adopted_language(),
      contents() {}

LanguageDetectionDetails::LanguageDetectionDetails(
    ::base::Time time_in,
    const ::GURL& url_in,
    const std::string& content_language_in,
    const std::string& cld_language_in,
    bool is_cld_reliable_in,
    bool has_notranslate_in,
    const std::string& html_root_language_in,
    const std::string& adopted_language_in,
    const ::base::string16& contents_in)
    : time(std::move(time_in)),
      url(std::move(url_in)),
      content_language(std::move(content_language_in)),
      cld_language(std::move(cld_language_in)),
      is_cld_reliable(std::move(is_cld_reliable_in)),
      has_notranslate(std::move(has_notranslate_in)),
      html_root_language(std::move(html_root_language_in)),
      adopted_language(std::move(adopted_language_in)),
      contents(std::move(contents_in)) {}

LanguageDetectionDetails::~LanguageDetectionDetails() = default;

bool LanguageDetectionDetails::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char TranslateAgent::Name_[] = "translate.mojom.TranslateAgent";

class TranslateAgent_GetWebLanguageDetectionDetails_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  TranslateAgent_GetWebLanguageDetectionDetails_ForwardToCallback(
      TranslateAgent::GetWebLanguageDetectionDetailsCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  TranslateAgent::GetWebLanguageDetectionDetailsCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(TranslateAgent_GetWebLanguageDetectionDetails_ForwardToCallback);
};

class TranslateAgent_TranslateFrame_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  TranslateAgent_TranslateFrame_ForwardToCallback(
      TranslateAgent::TranslateFrameCallback callback
      ) : callback_(std::move(callback)) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  TranslateAgent::TranslateFrameCallback callback_;
  DISALLOW_COPY_AND_ASSIGN(TranslateAgent_TranslateFrame_ForwardToCallback);
};

TranslateAgentProxy::TranslateAgentProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void TranslateAgentProxy::GetWebLanguageDetectionDetails(
    GetWebLanguageDetectionDetailsCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "translate::mojom::TranslateAgent::GetWebLanguageDetectionDetails");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kTranslateAgent_GetWebLanguageDetectionDetails_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::translate::mojom::internal::TranslateAgent_GetWebLanguageDetectionDetails_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(TranslateAgent::Name_);
  message.set_method_name("GetWebLanguageDetectionDetails");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new TranslateAgent_GetWebLanguageDetectionDetails_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}

void TranslateAgentProxy::TranslateFrame(
    const std::string& in_translate_script, const std::string& in_source_lang, const std::string& in_target_lang, TranslateFrameCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "translate::mojom::TranslateAgent::TranslateFrame");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kTranslateAgent_TranslateFrame_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::translate::mojom::internal::TranslateAgent_TranslateFrame_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->translate_script)::BaseType::BufferWriter
      translate_script_writer;
  mojo::internal::Serialize<mojo::StringDataView>(
      in_translate_script, buffer, &translate_script_writer, &serialization_context);
  params->translate_script.Set(
      translate_script_writer.is_null() ? nullptr : translate_script_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->translate_script.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null translate_script in TranslateAgent.TranslateFrame request");
  typename decltype(params->source_lang)::BaseType::BufferWriter
      source_lang_writer;
  mojo::internal::Serialize<mojo::StringDataView>(
      in_source_lang, buffer, &source_lang_writer, &serialization_context);
  params->source_lang.Set(
      source_lang_writer.is_null() ? nullptr : source_lang_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->source_lang.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null source_lang in TranslateAgent.TranslateFrame request");
  typename decltype(params->target_lang)::BaseType::BufferWriter
      target_lang_writer;
  mojo::internal::Serialize<mojo::StringDataView>(
      in_target_lang, buffer, &target_lang_writer, &serialization_context);
  params->target_lang.Set(
      target_lang_writer.is_null() ? nullptr : target_lang_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->target_lang.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null target_lang in TranslateAgent.TranslateFrame request");
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(TranslateAgent::Name_);
  message.set_method_name("TranslateFrame");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new TranslateAgent_TranslateFrame_ForwardToCallback(
          std::move(callback)));
  ignore_result(receiver_->AcceptWithResponder(&message, std::move(responder)));
}

void TranslateAgentProxy::RevertTranslation(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "translate::mojom::TranslateAgent::RevertTranslation");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kTranslateAgent_RevertTranslation_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::translate::mojom::internal::TranslateAgent_RevertTranslation_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(TranslateAgent::Name_);
  message.set_method_name("RevertTranslation");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}
class TranslateAgent_GetWebLanguageDetectionDetails_ProxyToResponder {
 public:
  static TranslateAgent::GetWebLanguageDetectionDetailsCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<TranslateAgent_GetWebLanguageDetectionDetails_ProxyToResponder> proxy(
        new TranslateAgent_GetWebLanguageDetectionDetails_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&TranslateAgent_GetWebLanguageDetectionDetails_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~TranslateAgent_GetWebLanguageDetectionDetails_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  TranslateAgent_GetWebLanguageDetectionDetails_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "TranslateAgent::GetWebLanguageDetectionDetailsCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const std::string& in_content_meta_language, const std::string& in_html_root_lang, const ::GURL& in_url, bool in_has_notranslate_meta);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(TranslateAgent_GetWebLanguageDetectionDetails_ProxyToResponder);
};

bool TranslateAgent_GetWebLanguageDetectionDetails_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "translate::mojom::TranslateAgent::GetWebLanguageDetectionDetailsCallback",
               "message", message->name());
#endif
  mojo::internal::MessageDispatchContext dispatch_context(message);

  DCHECK(message->is_serialized());
  internal::TranslateAgent_GetWebLanguageDetectionDetails_ResponseParams_Data* params =
      reinterpret_cast<
          internal::TranslateAgent_GetWebLanguageDetectionDetails_ResponseParams_Data*>(
              message->mutable_payload());
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  
  bool success = true;
  std::string p_content_meta_language{};
  std::string p_html_root_lang{};
  ::GURL p_url{};
  bool p_has_notranslate_meta{};
  TranslateAgent_GetWebLanguageDetectionDetails_ResponseParamsDataView input_data_view(params, &serialization_context);
  
  if (success && !input_data_view.ReadContentMetaLanguage(&p_content_meta_language))
    success = false;
  if (success && !input_data_view.ReadHtmlRootLang(&p_html_root_lang))
    success = false;
  if (success && !input_data_view.ReadUrl(&p_url))
    success = false;
  if (success)
    p_has_notranslate_meta = input_data_view.has_notranslate_meta();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        TranslateAgent::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_content_meta_language), 
std::move(p_html_root_lang), 
std::move(p_url), 
std::move(p_has_notranslate_meta));
  return true;
}

void TranslateAgent_GetWebLanguageDetectionDetails_ProxyToResponder::Run(
    const std::string& in_content_meta_language, const std::string& in_html_root_lang, const ::GURL& in_url, bool in_has_notranslate_meta) {
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kTranslateAgent_GetWebLanguageDetectionDetails_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::translate::mojom::internal::TranslateAgent_GetWebLanguageDetectionDetails_ResponseParams_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  typename decltype(params->content_meta_language)::BaseType::BufferWriter
      content_meta_language_writer;
  mojo::internal::Serialize<mojo::StringDataView>(
      in_content_meta_language, buffer, &content_meta_language_writer, &serialization_context);
  params->content_meta_language.Set(
      content_meta_language_writer.is_null() ? nullptr : content_meta_language_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->content_meta_language.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null content_meta_language in ");
  typename decltype(params->html_root_lang)::BaseType::BufferWriter
      html_root_lang_writer;
  mojo::internal::Serialize<mojo::StringDataView>(
      in_html_root_lang, buffer, &html_root_lang_writer, &serialization_context);
  params->html_root_lang.Set(
      html_root_lang_writer.is_null() ? nullptr : html_root_lang_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->html_root_lang.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null html_root_lang in ");
  typename decltype(params->url)::BaseType::BufferWriter
      url_writer;
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_url, buffer, &url_writer, &serialization_context);
  params->url.Set(
      url_writer.is_null() ? nullptr : url_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null url in ");
  params->has_notranslate_meta = in_has_notranslate_meta;
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "(Impl)translate::mojom::TranslateAgent::GetWebLanguageDetectionDetailsCallback",
               "message", message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(TranslateAgent::Name_);
  message.set_method_name("GetWebLanguageDetectionDetails");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class TranslateAgent_TranslateFrame_ProxyToResponder {
 public:
  static TranslateAgent::TranslateFrameCallback CreateCallback(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder) {
    std::unique_ptr<TranslateAgent_TranslateFrame_ProxyToResponder> proxy(
        new TranslateAgent_TranslateFrame_ProxyToResponder(
            request_id, is_sync, responder));
    return base::BindOnce(&TranslateAgent_TranslateFrame_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~TranslateAgent_TranslateFrame_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    responder_ = nullptr;
  }

 private:
  TranslateAgent_TranslateFrame_ProxyToResponder(
      uint64_t request_id,
      bool is_sync,
      std::unique_ptr<mojo::MessageReceiverWithStatus>* responder)
      : request_id_(request_id),
        is_sync_(is_sync),
        responder_(std::move(*responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "TranslateAgent::TranslateFrameCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_cancelled, const std::string& in_original_lang, const std::string& in_translated_lang, ::translate::TranslateErrors::Type in_error);

  uint64_t request_id_;
  bool is_sync_;
  std::unique_ptr<mojo::MessageReceiverWithStatus> responder_;

  DISALLOW_COPY_AND_ASSIGN(TranslateAgent_TranslateFrame_ProxyToResponder);
};

bool TranslateAgent_TranslateFrame_ForwardToCallback::Accept(
    mojo::Message* message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "translate::mojom::TranslateAgent::TranslateFrameCallback",
               "message", message->name());
#endif
  mojo::internal::MessageDispatchContext dispatch_context(message);

  DCHECK(message->is_serialized());
  internal::TranslateAgent_TranslateFrame_ResponseParams_Data* params =
      reinterpret_cast<
          internal::TranslateAgent_TranslateFrame_ResponseParams_Data*>(
              message->mutable_payload());
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  
  bool success = true;
  bool p_cancelled{};
  std::string p_original_lang{};
  std::string p_translated_lang{};
  ::translate::TranslateErrors::Type p_error{};
  TranslateAgent_TranslateFrame_ResponseParamsDataView input_data_view(params, &serialization_context);
  
  if (success)
    p_cancelled = input_data_view.cancelled();
  if (success && !input_data_view.ReadOriginalLang(&p_original_lang))
    success = false;
  if (success && !input_data_view.ReadTranslatedLang(&p_translated_lang))
    success = false;
  if (success && !input_data_view.ReadError(&p_error))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        TranslateAgent::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_cancelled), 
std::move(p_original_lang), 
std::move(p_translated_lang), 
std::move(p_error));
  return true;
}

void TranslateAgent_TranslateFrame_ProxyToResponder::Run(
    bool in_cancelled, const std::string& in_original_lang, const std::string& in_translated_lang, ::translate::TranslateErrors::Type in_error) {
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kTranslateAgent_TranslateFrame_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::translate::mojom::internal::TranslateAgent_TranslateFrame_ResponseParams_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  params->cancelled = in_cancelled;
  typename decltype(params->original_lang)::BaseType::BufferWriter
      original_lang_writer;
  mojo::internal::Serialize<mojo::StringDataView>(
      in_original_lang, buffer, &original_lang_writer, &serialization_context);
  params->original_lang.Set(
      original_lang_writer.is_null() ? nullptr : original_lang_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->original_lang.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null original_lang in ");
  typename decltype(params->translated_lang)::BaseType::BufferWriter
      translated_lang_writer;
  mojo::internal::Serialize<mojo::StringDataView>(
      in_translated_lang, buffer, &translated_lang_writer, &serialization_context);
  params->translated_lang.Set(
      translated_lang_writer.is_null() ? nullptr : translated_lang_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->translated_lang.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null translated_lang in ");
  mojo::internal::Serialize<::translate::mojom::TranslateError>(
      in_error, &params->error);
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1("mojom", "(Impl)translate::mojom::TranslateAgent::TranslateFrameCallback",
               "message", message.name());
#endif

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(TranslateAgent::Name_);
  message.set_method_name("TranslateFrame");
#endif

  message.set_request_id(request_id_);
  ignore_result(responder_->Accept(&message));
  // TODO(darin): Accept() returning false indicates a malformed message, and
  // that may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool TranslateAgentStubDispatch::Accept(
    TranslateAgent* impl,
    mojo::Message* message) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  switch (message->header()->name) {
    case internal::kTranslateAgent_GetWebLanguageDetectionDetails_Name: {
      break;
    }
    case internal::kTranslateAgent_TranslateFrame_Name: {
      break;
    }
    case internal::kTranslateAgent_RevertTranslation_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)translate::mojom::TranslateAgent::RevertTranslation",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)translate::mojom::TranslateAgent::RevertTranslation");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::TranslateAgent_RevertTranslation_Params_Data* params =
          reinterpret_cast<internal::TranslateAgent_RevertTranslation_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      TranslateAgent_RevertTranslation_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            TranslateAgent::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->RevertTranslation();
      return true;
    }
  }
  return false;
}

// static
bool TranslateAgentStubDispatch::AcceptWithResponder(
    TranslateAgent* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kTranslateAgent_GetWebLanguageDetectionDetails_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)translate::mojom::TranslateAgent::GetWebLanguageDetectionDetails",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)translate::mojom::TranslateAgent::GetWebLanguageDetectionDetails");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::TranslateAgent_GetWebLanguageDetectionDetails_Params_Data* params =
          reinterpret_cast<
              internal::TranslateAgent_GetWebLanguageDetectionDetails_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      TranslateAgent_GetWebLanguageDetectionDetails_ParamsDataView input_data_view(params, &serialization_context);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            TranslateAgent::Name_, 0, false);
        return false;
      }
      TranslateAgent::GetWebLanguageDetectionDetailsCallback callback =
          TranslateAgent_GetWebLanguageDetectionDetails_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetWebLanguageDetectionDetails(std::move(callback));
      return true;
    }
    case internal::kTranslateAgent_TranslateFrame_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)translate::mojom::TranslateAgent::TranslateFrame",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)translate::mojom::TranslateAgent::TranslateFrame");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      internal::TranslateAgent_TranslateFrame_Params_Data* params =
          reinterpret_cast<
              internal::TranslateAgent_TranslateFrame_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      std::string p_translate_script{};
      std::string p_source_lang{};
      std::string p_target_lang{};
      TranslateAgent_TranslateFrame_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success && !input_data_view.ReadTranslateScript(&p_translate_script))
        success = false;
      if (success && !input_data_view.ReadSourceLang(&p_source_lang))
        success = false;
      if (success && !input_data_view.ReadTargetLang(&p_target_lang))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            TranslateAgent::Name_, 1, false);
        return false;
      }
      TranslateAgent::TranslateFrameCallback callback =
          TranslateAgent_TranslateFrame_ProxyToResponder::CreateCallback(
              message->request_id(), message_is_sync, &responder);
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->TranslateFrame(
std::move(p_translate_script), 
std::move(p_source_lang), 
std::move(p_target_lang), std::move(callback));
      return true;
    }
    case internal::kTranslateAgent_RevertTranslation_Name: {
      break;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kTranslateAgentValidationInfo[] = {
    {internal::kTranslateAgent_GetWebLanguageDetectionDetails_Name,
     {&internal::TranslateAgent_GetWebLanguageDetectionDetails_Params_Data::Validate,
      &internal::TranslateAgent_GetWebLanguageDetectionDetails_ResponseParams_Data::Validate}},
    {internal::kTranslateAgent_TranslateFrame_Name,
     {&internal::TranslateAgent_TranslateFrame_Params_Data::Validate,
      &internal::TranslateAgent_TranslateFrame_ResponseParams_Data::Validate}},
    {internal::kTranslateAgent_RevertTranslation_Name,
     {&internal::TranslateAgent_RevertTranslation_Params_Data::Validate,
      nullptr /* no response */}},
};

bool TranslateAgentRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::translate::mojom::TranslateAgent::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kTranslateAgentValidationInfo);
}

bool TranslateAgentResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::translate::mojom::TranslateAgent::Name_;
  return mojo::internal::ValidateResponseGeneric(message, name, kTranslateAgentValidationInfo);

}
const char ContentTranslateDriver::Name_[] = "translate.mojom.ContentTranslateDriver";

ContentTranslateDriverProxy::ContentTranslateDriverProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void ContentTranslateDriverProxy::RegisterPage(
    ::mojo::PendingRemote<TranslateAgent> in_translate_agent, const ::translate::LanguageDetectionDetails& in_details, bool in_page_needs_translation) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "translate::mojom::ContentTranslateDriver::RegisterPage");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kContentTranslateDriver_RegisterPage_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::translate::mojom::internal::ContentTranslateDriver_RegisterPage_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::translate::mojom::TranslateAgentInterfaceBase>>(
      in_translate_agent, &params->translate_agent, &serialization_context);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->translate_agent),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid translate_agent in ContentTranslateDriver.RegisterPage request");
  typename decltype(params->details)::BaseType::BufferWriter
      details_writer;
  mojo::internal::Serialize<::translate::mojom::LanguageDetectionDetailsDataView>(
      in_details, buffer, &details_writer, &serialization_context);
  params->details.Set(
      details_writer.is_null() ? nullptr : details_writer.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->details.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null details in ContentTranslateDriver.RegisterPage request");
  params->page_needs_translation = in_page_needs_translation;
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ContentTranslateDriver::Name_);
  message.set_method_name("RegisterPage");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool ContentTranslateDriverStubDispatch::Accept(
    ContentTranslateDriver* impl,
    mojo::Message* message) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  switch (message->header()->name) {
    case internal::kContentTranslateDriver_RegisterPage_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)translate::mojom::ContentTranslateDriver::RegisterPage",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)translate::mojom::ContentTranslateDriver::RegisterPage");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::ContentTranslateDriver_RegisterPage_Params_Data* params =
          reinterpret_cast<internal::ContentTranslateDriver_RegisterPage_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingRemote<TranslateAgent> p_translate_agent{};
      ::translate::LanguageDetectionDetails p_details{};
      bool p_page_needs_translation{};
      ContentTranslateDriver_RegisterPage_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success) {
        p_translate_agent =
            input_data_view.TakeTranslateAgent<decltype(p_translate_agent)>();
      }
      if (success && !input_data_view.ReadDetails(&p_details))
        success = false;
      if (success)
        p_page_needs_translation = input_data_view.page_needs_translation();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            ContentTranslateDriver::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->RegisterPage(
std::move(p_translate_agent), 
std::move(p_details), 
std::move(p_page_needs_translation));
      return true;
    }
  }
  return false;
}

// static
bool ContentTranslateDriverStubDispatch::AcceptWithResponder(
    ContentTranslateDriver* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kContentTranslateDriver_RegisterPage_Name: {
      break;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kContentTranslateDriverValidationInfo[] = {
    {internal::kContentTranslateDriver_RegisterPage_Name,
     {&internal::ContentTranslateDriver_RegisterPage_Params_Data::Validate,
      nullptr /* no response */}},
};

bool ContentTranslateDriverRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::translate::mojom::ContentTranslateDriver::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kContentTranslateDriverValidationInfo);
}

}  // namespace mojom
}  // namespace translate

namespace mojo {


// static
bool StructTraits<::translate::mojom::LanguageDetectionDetails::DataView, ::translate::mojom::LanguageDetectionDetailsPtr>::Read(
    ::translate::mojom::LanguageDetectionDetails::DataView input,
    ::translate::mojom::LanguageDetectionDetailsPtr* output) {
  bool success = true;
  ::translate::mojom::LanguageDetectionDetailsPtr result(::translate::mojom::LanguageDetectionDetails::New());
  
      if (success && !input.ReadTime(&result->time))
        success = false;
      if (success && !input.ReadUrl(&result->url))
        success = false;
      if (success && !input.ReadContentLanguage(&result->content_language))
        success = false;
      if (success && !input.ReadCldLanguage(&result->cld_language))
        success = false;
      if (success)
        result->is_cld_reliable = input.is_cld_reliable();
      if (success)
        result->has_notranslate = input.has_notranslate();
      if (success && !input.ReadHtmlRootLanguage(&result->html_root_language))
        success = false;
      if (success && !input.ReadAdoptedLanguage(&result->adopted_language))
        success = false;
      if (success && !input.ReadContents(&result->contents))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
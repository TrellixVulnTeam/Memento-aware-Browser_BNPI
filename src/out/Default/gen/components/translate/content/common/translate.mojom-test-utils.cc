// components/translate/content/common/translate.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "components/translate/content/common/translate.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/mojom/base/time.mojom.h"
#include "mojo/public/mojom/base/string16.mojom.h"
#include "url/mojom/url.mojom.h"


#ifndef COMPONENTS_TRANSLATE_CONTENT_COMMON_TRANSLATE_MOJOM_JUMBO_H_
#define COMPONENTS_TRANSLATE_CONTENT_COMMON_TRANSLATE_MOJOM_JUMBO_H_
#include "components/translate/content/common/translate_mojom_traits.h"
#endif


namespace translate {
namespace mojom {


void TranslateAgentInterceptorForTesting::GetWebLanguageDetectionDetails(GetWebLanguageDetectionDetailsCallback callback) {
  GetForwardingInterface()->GetWebLanguageDetectionDetails(std::move(callback));
}
void TranslateAgentInterceptorForTesting::TranslateFrame(const std::string& translate_script, const std::string& source_lang, const std::string& target_lang, TranslateFrameCallback callback) {
  GetForwardingInterface()->TranslateFrame(std::move(translate_script), std::move(source_lang), std::move(target_lang), std::move(callback));
}
void TranslateAgentInterceptorForTesting::RevertTranslation() {
  GetForwardingInterface()->RevertTranslation();
}
TranslateAgentAsyncWaiter::TranslateAgentAsyncWaiter(
    TranslateAgent* proxy) : proxy_(proxy) {}

TranslateAgentAsyncWaiter::~TranslateAgentAsyncWaiter() = default;

void TranslateAgentAsyncWaiter::GetWebLanguageDetectionDetails(
    std::string* out_content_meta_language, std::string* out_html_root_lang, ::GURL* out_url, bool* out_has_notranslate_meta) {
  base::RunLoop loop;
  proxy_->GetWebLanguageDetectionDetails(
      base::BindOnce(
          [](base::RunLoop* loop,
             std::string* out_content_meta_language
,
             std::string* out_html_root_lang
,
             ::GURL* out_url
,
             bool* out_has_notranslate_meta
,
             const std::string& content_meta_language,
             const std::string& html_root_lang,
             const ::GURL& url,
             bool has_notranslate_meta) {*out_content_meta_language = std::move(content_meta_language);*out_html_root_lang = std::move(html_root_lang);*out_url = std::move(url);*out_has_notranslate_meta = std::move(has_notranslate_meta);
            loop->Quit();
          },
          &loop,
          out_content_meta_language,
          out_html_root_lang,
          out_url,
          out_has_notranslate_meta));
  loop.Run();
}
void TranslateAgentAsyncWaiter::TranslateFrame(
    const std::string& translate_script, const std::string& source_lang, const std::string& target_lang, bool* out_cancelled, std::string* out_original_lang, std::string* out_translated_lang, ::translate::TranslateErrors::Type* out_error) {
  base::RunLoop loop;
  proxy_->TranslateFrame(std::move(translate_script),std::move(source_lang),std::move(target_lang),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_cancelled
,
             std::string* out_original_lang
,
             std::string* out_translated_lang
,
             ::translate::TranslateErrors::Type* out_error
,
             bool cancelled,
             const std::string& original_lang,
             const std::string& translated_lang,
             ::translate::TranslateErrors::Type error) {*out_cancelled = std::move(cancelled);*out_original_lang = std::move(original_lang);*out_translated_lang = std::move(translated_lang);*out_error = std::move(error);
            loop->Quit();
          },
          &loop,
          out_cancelled,
          out_original_lang,
          out_translated_lang,
          out_error));
  loop.Run();
}



void ContentTranslateDriverInterceptorForTesting::RegisterPage(::mojo::PendingRemote<TranslateAgent> translate_agent, const ::translate::LanguageDetectionDetails& details, bool page_needs_translation) {
  GetForwardingInterface()->RegisterPage(std::move(translate_agent), std::move(details), std::move(page_needs_translation));
}
ContentTranslateDriverAsyncWaiter::ContentTranslateDriverAsyncWaiter(
    ContentTranslateDriver* proxy) : proxy_(proxy) {}

ContentTranslateDriverAsyncWaiter::~ContentTranslateDriverAsyncWaiter() = default;






}  // namespace mojom
}  // namespace translate

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
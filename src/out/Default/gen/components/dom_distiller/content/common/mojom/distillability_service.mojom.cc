// components/dom_distiller/content/common/mojom/distillability_service.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "components/dom_distiller/content/common/mojom/distillability_service.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "components/dom_distiller/content/common/mojom/distillability_service.mojom-params-data.h"
#include "components/dom_distiller/content/common/mojom/distillability_service.mojom-shared-message-ids.h"

#include "components/dom_distiller/content/common/mojom/distillability_service.mojom-import-headers.h"


#ifndef COMPONENTS_DOM_DISTILLER_CONTENT_COMMON_MOJOM_DISTILLABILITY_SERVICE_MOJOM_JUMBO_H_
#define COMPONENTS_DOM_DISTILLER_CONTENT_COMMON_MOJOM_DISTILLABILITY_SERVICE_MOJOM_JUMBO_H_
#endif
namespace dom_distiller {
namespace mojom {
const char DistillabilityService::Name_[] = "dom_distiller.mojom.DistillabilityService";

DistillabilityServiceProxy::DistillabilityServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void DistillabilityServiceProxy::NotifyIsDistillable(
    bool in_page_is_distillable, bool in_is_last_update, bool in_is_mobile_friendly) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "dom_distiller::mojom::DistillabilityService::NotifyIsDistillable");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0);
  
  mojo::Message message(
      internal::kDistillabilityService_NotifyIsDistillable_Name, kFlags, 0, 0, nullptr);
  auto* buffer = message.payload_buffer();
  ::dom_distiller::mojom::internal::DistillabilityService_NotifyIsDistillable_Params_Data::BufferWriter
      params;
  mojo::internal::SerializationContext serialization_context;
  params.Allocate(buffer);
  params->page_is_distillable = in_page_is_distillable;
  params->is_last_update = in_is_last_update;
  params->is_mobile_friendly = in_is_mobile_friendly;
  message.AttachHandlesFromSerializationContext(
      &serialization_context);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DistillabilityService::Name_);
  message.set_method_name("NotifyIsDistillable");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ignore_result(receiver_->Accept(&message));
}

// static
bool DistillabilityServiceStubDispatch::Accept(
    DistillabilityService* impl,
    mojo::Message* message) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  switch (message->header()->name) {
    case internal::kDistillabilityService_NotifyIsDistillable_Name: {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      TRACE_EVENT1(
          "mojom",
          "(Impl)dom_distiller::mojom::DistillabilityService::NotifyIsDistillable",
          "message", message->name());
#endif
      static constexpr uint32_t kMessageHash = base::MD5Hash32Constexpr(
              "(Impl)dom_distiller::mojom::DistillabilityService::NotifyIsDistillable");
      base::TaskAnnotator::ScopedSetIpcHash scoped_ipc_hash(kMessageHash);

      DCHECK(message->is_serialized());
      internal::DistillabilityService_NotifyIsDistillable_Params_Data* params =
          reinterpret_cast<internal::DistillabilityService_NotifyIsDistillable_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      bool p_page_is_distillable{};
      bool p_is_last_update{};
      bool p_is_mobile_friendly{};
      DistillabilityService_NotifyIsDistillable_ParamsDataView input_data_view(params, &serialization_context);
      
      if (success)
        p_page_is_distillable = input_data_view.page_is_distillable();
      if (success)
        p_is_last_update = input_data_view.is_last_update();
      if (success)
        p_is_mobile_friendly = input_data_view.is_mobile_friendly();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DistillabilityService::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->NotifyIsDistillable(
std::move(p_page_is_distillable), 
std::move(p_is_last_update), 
std::move(p_is_mobile_friendly));
      return true;
    }
  }
  return false;
}

// static
bool DistillabilityServiceStubDispatch::AcceptWithResponder(
    DistillabilityService* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  mojo::internal::MessageDispatchContext dispatch_context(message);
  mojo::internal::SerializationContext serialization_context;
  serialization_context.TakeHandlesFromMessage(message);
  const bool message_is_sync = message->has_flag(mojo::Message::kFlagIsSync);
  const uint64_t request_id = message->request_id();
  ALLOW_UNUSED_LOCAL(message_is_sync);
  ALLOW_UNUSED_LOCAL(request_id);
  switch (message->header()->name) {
    case internal::kDistillabilityService_NotifyIsDistillable_Name: {
      break;
    }
  }
  return false;
}


static const std::pair<uint32_t, mojo::internal::GenericValidationInfo> kDistillabilityServiceValidationInfo[] = {
    {internal::kDistillabilityService_NotifyIsDistillable_Name,
     {&internal::DistillabilityService_NotifyIsDistillable_Params_Data::Validate,
      nullptr /* no response */}},
};

bool DistillabilityServiceRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::dom_distiller::mojom::DistillabilityService::Name_;
  return mojo::internal::ValidateRequestGeneric(message, name, kDistillabilityServiceValidationInfo);
}

}  // namespace mojom
}  // namespace dom_distiller

namespace mojo {

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
// components/dom_distiller/content/common/mojom/distiller_javascript_service.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_DOM_DISTILLER_CONTENT_COMMON_MOJOM_DISTILLER_JAVASCRIPT_SERVICE_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_DOM_DISTILLER_CONTENT_COMMON_MOJOM_DISTILLER_JAVASCRIPT_SERVICE_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace dom_distiller {
namespace mojom {
namespace internal {
class  DistillerJavaScriptService_HandleDistillerOpenSettingsCall_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DistillerJavaScriptService_HandleDistillerOpenSettingsCall_Params_Data));
      new (data()) DistillerJavaScriptService_HandleDistillerOpenSettingsCall_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DistillerJavaScriptService_HandleDistillerOpenSettingsCall_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DistillerJavaScriptService_HandleDistillerOpenSettingsCall_Params_Data>(index_);
    }
    DistillerJavaScriptService_HandleDistillerOpenSettingsCall_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  DistillerJavaScriptService_HandleDistillerOpenSettingsCall_Params_Data();
  ~DistillerJavaScriptService_HandleDistillerOpenSettingsCall_Params_Data() = delete;
};
static_assert(sizeof(DistillerJavaScriptService_HandleDistillerOpenSettingsCall_Params_Data) == 8,
              "Bad sizeof(DistillerJavaScriptService_HandleDistillerOpenSettingsCall_Params_Data)");
class  DistillerJavaScriptService_HandleStoreThemePref_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DistillerJavaScriptService_HandleStoreThemePref_Params_Data));
      new (data()) DistillerJavaScriptService_HandleStoreThemePref_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DistillerJavaScriptService_HandleStoreThemePref_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DistillerJavaScriptService_HandleStoreThemePref_Params_Data>(index_);
    }
    DistillerJavaScriptService_HandleStoreThemePref_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t theme;
  uint8_t padfinal_[4];

 private:
  DistillerJavaScriptService_HandleStoreThemePref_Params_Data();
  ~DistillerJavaScriptService_HandleStoreThemePref_Params_Data() = delete;
};
static_assert(sizeof(DistillerJavaScriptService_HandleStoreThemePref_Params_Data) == 16,
              "Bad sizeof(DistillerJavaScriptService_HandleStoreThemePref_Params_Data)");
class  DistillerJavaScriptService_HandleStoreFontFamilyPref_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DistillerJavaScriptService_HandleStoreFontFamilyPref_Params_Data));
      new (data()) DistillerJavaScriptService_HandleStoreFontFamilyPref_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DistillerJavaScriptService_HandleStoreFontFamilyPref_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DistillerJavaScriptService_HandleStoreFontFamilyPref_Params_Data>(index_);
    }
    DistillerJavaScriptService_HandleStoreFontFamilyPref_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t font_family;
  uint8_t padfinal_[4];

 private:
  DistillerJavaScriptService_HandleStoreFontFamilyPref_Params_Data();
  ~DistillerJavaScriptService_HandleStoreFontFamilyPref_Params_Data() = delete;
};
static_assert(sizeof(DistillerJavaScriptService_HandleStoreFontFamilyPref_Params_Data) == 16,
              "Bad sizeof(DistillerJavaScriptService_HandleStoreFontFamilyPref_Params_Data)");

}  // namespace internal
class DistillerJavaScriptService_HandleDistillerOpenSettingsCall_ParamsDataView {
 public:
  DistillerJavaScriptService_HandleDistillerOpenSettingsCall_ParamsDataView() {}

  DistillerJavaScriptService_HandleDistillerOpenSettingsCall_ParamsDataView(
      internal::DistillerJavaScriptService_HandleDistillerOpenSettingsCall_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::DistillerJavaScriptService_HandleDistillerOpenSettingsCall_Params_Data* data_ = nullptr;
};

class DistillerJavaScriptService_HandleStoreThemePref_ParamsDataView {
 public:
  DistillerJavaScriptService_HandleStoreThemePref_ParamsDataView() {}

  DistillerJavaScriptService_HandleStoreThemePref_ParamsDataView(
      internal::DistillerJavaScriptService_HandleStoreThemePref_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadTheme(UserType* output) const {
    auto data_value = data_->theme;
    return mojo::internal::Deserialize<::dom_distiller::mojom::Theme>(
        data_value, output);
  }

  ::dom_distiller::mojom::Theme theme() const {
    return static_cast<::dom_distiller::mojom::Theme>(data_->theme);
  }
 private:
  internal::DistillerJavaScriptService_HandleStoreThemePref_Params_Data* data_ = nullptr;
};

class DistillerJavaScriptService_HandleStoreFontFamilyPref_ParamsDataView {
 public:
  DistillerJavaScriptService_HandleStoreFontFamilyPref_ParamsDataView() {}

  DistillerJavaScriptService_HandleStoreFontFamilyPref_ParamsDataView(
      internal::DistillerJavaScriptService_HandleStoreFontFamilyPref_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFontFamily(UserType* output) const {
    auto data_value = data_->font_family;
    return mojo::internal::Deserialize<::dom_distiller::mojom::FontFamily>(
        data_value, output);
  }

  ::dom_distiller::mojom::FontFamily font_family() const {
    return static_cast<::dom_distiller::mojom::FontFamily>(data_->font_family);
  }
 private:
  internal::DistillerJavaScriptService_HandleStoreFontFamilyPref_Params_Data* data_ = nullptr;
};







}  // namespace mojom
}  // namespace dom_distiller

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // COMPONENTS_DOM_DISTILLER_CONTENT_COMMON_MOJOM_DISTILLER_JAVASCRIPT_SERVICE_MOJOM_PARAMS_DATA_H_
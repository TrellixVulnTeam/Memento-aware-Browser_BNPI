// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: distilled_page.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_distilled_5fpage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_distilled_5fpage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_distilled_5fpage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_distilled_5fpage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace dom_distiller {
class DistilledPageProto;
class DistilledPageProtoDefaultTypeInternal;
extern DistilledPageProtoDefaultTypeInternal _DistilledPageProto_default_instance_;
class DistilledPageProto_DebugInfo;
class DistilledPageProto_DebugInfoDefaultTypeInternal;
extern DistilledPageProto_DebugInfoDefaultTypeInternal _DistilledPageProto_DebugInfo_default_instance_;
class DistilledPageProto_Image;
class DistilledPageProto_ImageDefaultTypeInternal;
extern DistilledPageProto_ImageDefaultTypeInternal _DistilledPageProto_Image_default_instance_;
class DistilledPageProto_PaginationInfo;
class DistilledPageProto_PaginationInfoDefaultTypeInternal;
extern DistilledPageProto_PaginationInfoDefaultTypeInternal _DistilledPageProto_PaginationInfo_default_instance_;
class DistilledPageProto_TimingInfo;
class DistilledPageProto_TimingInfoDefaultTypeInternal;
extern DistilledPageProto_TimingInfoDefaultTypeInternal _DistilledPageProto_TimingInfo_default_instance_;
}  // namespace dom_distiller
PROTOBUF_NAMESPACE_OPEN
template<> ::dom_distiller::DistilledPageProto* Arena::CreateMaybeMessage<::dom_distiller::DistilledPageProto>(Arena*);
template<> ::dom_distiller::DistilledPageProto_DebugInfo* Arena::CreateMaybeMessage<::dom_distiller::DistilledPageProto_DebugInfo>(Arena*);
template<> ::dom_distiller::DistilledPageProto_Image* Arena::CreateMaybeMessage<::dom_distiller::DistilledPageProto_Image>(Arena*);
template<> ::dom_distiller::DistilledPageProto_PaginationInfo* Arena::CreateMaybeMessage<::dom_distiller::DistilledPageProto_PaginationInfo>(Arena*);
template<> ::dom_distiller::DistilledPageProto_TimingInfo* Arena::CreateMaybeMessage<::dom_distiller::DistilledPageProto_TimingInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dom_distiller {

// ===================================================================

class DistilledPageProto_Image :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:dom_distiller.DistilledPageProto.Image) */ {
 public:
  DistilledPageProto_Image();
  virtual ~DistilledPageProto_Image();

  DistilledPageProto_Image(const DistilledPageProto_Image& from);
  DistilledPageProto_Image(DistilledPageProto_Image&& from) noexcept
    : DistilledPageProto_Image() {
    *this = ::std::move(from);
  }

  inline DistilledPageProto_Image& operator=(const DistilledPageProto_Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistilledPageProto_Image& operator=(DistilledPageProto_Image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DistilledPageProto_Image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DistilledPageProto_Image* internal_default_instance() {
    return reinterpret_cast<const DistilledPageProto_Image*>(
               &_DistilledPageProto_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DistilledPageProto_Image& a, DistilledPageProto_Image& b) {
    a.Swap(&b);
  }
  inline void Swap(DistilledPageProto_Image* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DistilledPageProto_Image* New() const final {
    return CreateMaybeMessage<DistilledPageProto_Image>(nullptr);
  }

  DistilledPageProto_Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DistilledPageProto_Image>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DistilledPageProto_Image& from);
  void MergeFrom(const DistilledPageProto_Image& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DistilledPageProto_Image* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dom_distiller.DistilledPageProto.Image";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDataFieldNumber = 2,
    kUrlFieldNumber = 3,
  };
  // required string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required bytes data = 2;
  bool has_data() const;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // optional string url = 3;
  bool has_url() const;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // @@protoc_insertion_point(class_scope:dom_distiller.DistilledPageProto.Image)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  friend struct ::TableStruct_distilled_5fpage_2eproto;
};
// -------------------------------------------------------------------

class DistilledPageProto_DebugInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:dom_distiller.DistilledPageProto.DebugInfo) */ {
 public:
  DistilledPageProto_DebugInfo();
  virtual ~DistilledPageProto_DebugInfo();

  DistilledPageProto_DebugInfo(const DistilledPageProto_DebugInfo& from);
  DistilledPageProto_DebugInfo(DistilledPageProto_DebugInfo&& from) noexcept
    : DistilledPageProto_DebugInfo() {
    *this = ::std::move(from);
  }

  inline DistilledPageProto_DebugInfo& operator=(const DistilledPageProto_DebugInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistilledPageProto_DebugInfo& operator=(DistilledPageProto_DebugInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DistilledPageProto_DebugInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DistilledPageProto_DebugInfo* internal_default_instance() {
    return reinterpret_cast<const DistilledPageProto_DebugInfo*>(
               &_DistilledPageProto_DebugInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DistilledPageProto_DebugInfo& a, DistilledPageProto_DebugInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DistilledPageProto_DebugInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DistilledPageProto_DebugInfo* New() const final {
    return CreateMaybeMessage<DistilledPageProto_DebugInfo>(nullptr);
  }

  DistilledPageProto_DebugInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DistilledPageProto_DebugInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DistilledPageProto_DebugInfo& from);
  void MergeFrom(const DistilledPageProto_DebugInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DistilledPageProto_DebugInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dom_distiller.DistilledPageProto.DebugInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogFieldNumber = 1,
  };
  // optional string log = 1;
  bool has_log() const;
  void clear_log();
  const std::string& log() const;
  void set_log(const std::string& value);
  void set_log(std::string&& value);
  void set_log(const char* value);
  void set_log(const char* value, size_t size);
  std::string* mutable_log();
  std::string* release_log();
  void set_allocated_log(std::string* log);

  // @@protoc_insertion_point(class_scope:dom_distiller.DistilledPageProto.DebugInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_;
  friend struct ::TableStruct_distilled_5fpage_2eproto;
};
// -------------------------------------------------------------------

class DistilledPageProto_PaginationInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:dom_distiller.DistilledPageProto.PaginationInfo) */ {
 public:
  DistilledPageProto_PaginationInfo();
  virtual ~DistilledPageProto_PaginationInfo();

  DistilledPageProto_PaginationInfo(const DistilledPageProto_PaginationInfo& from);
  DistilledPageProto_PaginationInfo(DistilledPageProto_PaginationInfo&& from) noexcept
    : DistilledPageProto_PaginationInfo() {
    *this = ::std::move(from);
  }

  inline DistilledPageProto_PaginationInfo& operator=(const DistilledPageProto_PaginationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistilledPageProto_PaginationInfo& operator=(DistilledPageProto_PaginationInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DistilledPageProto_PaginationInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DistilledPageProto_PaginationInfo* internal_default_instance() {
    return reinterpret_cast<const DistilledPageProto_PaginationInfo*>(
               &_DistilledPageProto_PaginationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DistilledPageProto_PaginationInfo& a, DistilledPageProto_PaginationInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DistilledPageProto_PaginationInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DistilledPageProto_PaginationInfo* New() const final {
    return CreateMaybeMessage<DistilledPageProto_PaginationInfo>(nullptr);
  }

  DistilledPageProto_PaginationInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DistilledPageProto_PaginationInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DistilledPageProto_PaginationInfo& from);
  void MergeFrom(const DistilledPageProto_PaginationInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DistilledPageProto_PaginationInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dom_distiller.DistilledPageProto.PaginationInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNextPageFieldNumber = 1,
    kPrevPageFieldNumber = 2,
    kCanonicalPageFieldNumber = 3,
  };
  // optional string next_page = 1;
  bool has_next_page() const;
  void clear_next_page();
  const std::string& next_page() const;
  void set_next_page(const std::string& value);
  void set_next_page(std::string&& value);
  void set_next_page(const char* value);
  void set_next_page(const char* value, size_t size);
  std::string* mutable_next_page();
  std::string* release_next_page();
  void set_allocated_next_page(std::string* next_page);

  // optional string prev_page = 2;
  bool has_prev_page() const;
  void clear_prev_page();
  const std::string& prev_page() const;
  void set_prev_page(const std::string& value);
  void set_prev_page(std::string&& value);
  void set_prev_page(const char* value);
  void set_prev_page(const char* value, size_t size);
  std::string* mutable_prev_page();
  std::string* release_prev_page();
  void set_allocated_prev_page(std::string* prev_page);

  // optional string canonical_page = 3;
  bool has_canonical_page() const;
  void clear_canonical_page();
  const std::string& canonical_page() const;
  void set_canonical_page(const std::string& value);
  void set_canonical_page(std::string&& value);
  void set_canonical_page(const char* value);
  void set_canonical_page(const char* value, size_t size);
  std::string* mutable_canonical_page();
  std::string* release_canonical_page();
  void set_allocated_canonical_page(std::string* canonical_page);

  // @@protoc_insertion_point(class_scope:dom_distiller.DistilledPageProto.PaginationInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_page_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr canonical_page_;
  friend struct ::TableStruct_distilled_5fpage_2eproto;
};
// -------------------------------------------------------------------

class DistilledPageProto_TimingInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:dom_distiller.DistilledPageProto.TimingInfo) */ {
 public:
  DistilledPageProto_TimingInfo();
  virtual ~DistilledPageProto_TimingInfo();

  DistilledPageProto_TimingInfo(const DistilledPageProto_TimingInfo& from);
  DistilledPageProto_TimingInfo(DistilledPageProto_TimingInfo&& from) noexcept
    : DistilledPageProto_TimingInfo() {
    *this = ::std::move(from);
  }

  inline DistilledPageProto_TimingInfo& operator=(const DistilledPageProto_TimingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistilledPageProto_TimingInfo& operator=(DistilledPageProto_TimingInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DistilledPageProto_TimingInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DistilledPageProto_TimingInfo* internal_default_instance() {
    return reinterpret_cast<const DistilledPageProto_TimingInfo*>(
               &_DistilledPageProto_TimingInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DistilledPageProto_TimingInfo& a, DistilledPageProto_TimingInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DistilledPageProto_TimingInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DistilledPageProto_TimingInfo* New() const final {
    return CreateMaybeMessage<DistilledPageProto_TimingInfo>(nullptr);
  }

  DistilledPageProto_TimingInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DistilledPageProto_TimingInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DistilledPageProto_TimingInfo& from);
  void MergeFrom(const DistilledPageProto_TimingInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DistilledPageProto_TimingInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dom_distiller.DistilledPageProto.TimingInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional double time = 2;
  bool has_time() const;
  void clear_time();
  double time() const;
  void set_time(double value);

  // @@protoc_insertion_point(class_scope:dom_distiller.DistilledPageProto.TimingInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  double time_;
  friend struct ::TableStruct_distilled_5fpage_2eproto;
};
// -------------------------------------------------------------------

class DistilledPageProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:dom_distiller.DistilledPageProto) */ {
 public:
  DistilledPageProto();
  virtual ~DistilledPageProto();

  DistilledPageProto(const DistilledPageProto& from);
  DistilledPageProto(DistilledPageProto&& from) noexcept
    : DistilledPageProto() {
    *this = ::std::move(from);
  }

  inline DistilledPageProto& operator=(const DistilledPageProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistilledPageProto& operator=(DistilledPageProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DistilledPageProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DistilledPageProto* internal_default_instance() {
    return reinterpret_cast<const DistilledPageProto*>(
               &_DistilledPageProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DistilledPageProto& a, DistilledPageProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DistilledPageProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DistilledPageProto* New() const final {
    return CreateMaybeMessage<DistilledPageProto>(nullptr);
  }

  DistilledPageProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DistilledPageProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DistilledPageProto& from);
  void MergeFrom(const DistilledPageProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DistilledPageProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dom_distiller.DistilledPageProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DistilledPageProto_Image Image;
  typedef DistilledPageProto_DebugInfo DebugInfo;
  typedef DistilledPageProto_PaginationInfo PaginationInfo;
  typedef DistilledPageProto_TimingInfo TimingInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 4,
    kTimingInfoFieldNumber = 9,
    kUrlFieldNumber = 1,
    kHtmlFieldNumber = 3,
    kTitleFieldNumber = 5,
    kTextDirectionFieldNumber = 7,
    kDebugInfoFieldNumber = 6,
    kPaginationInfoFieldNumber = 8,
  };
  // repeated .dom_distiller.DistilledPageProto.Image image = 4;
  int image_size() const;
  void clear_image();
  ::dom_distiller::DistilledPageProto_Image* mutable_image(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dom_distiller::DistilledPageProto_Image >*
      mutable_image();
  const ::dom_distiller::DistilledPageProto_Image& image(int index) const;
  ::dom_distiller::DistilledPageProto_Image* add_image();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dom_distiller::DistilledPageProto_Image >&
      image() const;

  // repeated .dom_distiller.DistilledPageProto.TimingInfo timing_info = 9;
  int timing_info_size() const;
  void clear_timing_info();
  ::dom_distiller::DistilledPageProto_TimingInfo* mutable_timing_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dom_distiller::DistilledPageProto_TimingInfo >*
      mutable_timing_info();
  const ::dom_distiller::DistilledPageProto_TimingInfo& timing_info(int index) const;
  ::dom_distiller::DistilledPageProto_TimingInfo* add_timing_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dom_distiller::DistilledPageProto_TimingInfo >&
      timing_info() const;

  // required string url = 1;
  bool has_url() const;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // required string html = 3;
  bool has_html() const;
  void clear_html();
  const std::string& html() const;
  void set_html(const std::string& value);
  void set_html(std::string&& value);
  void set_html(const char* value);
  void set_html(const char* value, size_t size);
  std::string* mutable_html();
  std::string* release_html();
  void set_allocated_html(std::string* html);

  // optional string title = 5;
  bool has_title() const;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);

  // optional string text_direction = 7;
  bool has_text_direction() const;
  void clear_text_direction();
  const std::string& text_direction() const;
  void set_text_direction(const std::string& value);
  void set_text_direction(std::string&& value);
  void set_text_direction(const char* value);
  void set_text_direction(const char* value, size_t size);
  std::string* mutable_text_direction();
  std::string* release_text_direction();
  void set_allocated_text_direction(std::string* text_direction);

  // optional .dom_distiller.DistilledPageProto.DebugInfo debug_info = 6;
  bool has_debug_info() const;
  void clear_debug_info();
  const ::dom_distiller::DistilledPageProto_DebugInfo& debug_info() const;
  ::dom_distiller::DistilledPageProto_DebugInfo* release_debug_info();
  ::dom_distiller::DistilledPageProto_DebugInfo* mutable_debug_info();
  void set_allocated_debug_info(::dom_distiller::DistilledPageProto_DebugInfo* debug_info);

  // optional .dom_distiller.DistilledPageProto.PaginationInfo pagination_info = 8;
  bool has_pagination_info() const;
  void clear_pagination_info();
  const ::dom_distiller::DistilledPageProto_PaginationInfo& pagination_info() const;
  ::dom_distiller::DistilledPageProto_PaginationInfo* release_pagination_info();
  ::dom_distiller::DistilledPageProto_PaginationInfo* mutable_pagination_info();
  void set_allocated_pagination_info(::dom_distiller::DistilledPageProto_PaginationInfo* pagination_info);

  // @@protoc_insertion_point(class_scope:dom_distiller.DistilledPageProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dom_distiller::DistilledPageProto_Image > image_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dom_distiller::DistilledPageProto_TimingInfo > timing_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr html_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_direction_;
  ::dom_distiller::DistilledPageProto_DebugInfo* debug_info_;
  ::dom_distiller::DistilledPageProto_PaginationInfo* pagination_info_;
  friend struct ::TableStruct_distilled_5fpage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DistilledPageProto_Image

// required string name = 1;
inline bool DistilledPageProto_Image::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DistilledPageProto_Image::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DistilledPageProto_Image::name() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.Image.name)
  return name_.GetNoArena();
}
inline void DistilledPageProto_Image::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.Image.name)
}
inline void DistilledPageProto_Image::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.DistilledPageProto.Image.name)
}
inline void DistilledPageProto_Image::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.Image.name)
}
inline void DistilledPageProto_Image::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.Image.name)
}
inline std::string* DistilledPageProto_Image::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.Image.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DistilledPageProto_Image::release_name() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.Image.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DistilledPageProto_Image::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.Image.name)
}

// required bytes data = 2;
inline bool DistilledPageProto_Image::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DistilledPageProto_Image::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DistilledPageProto_Image::data() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.Image.data)
  return data_.GetNoArena();
}
inline void DistilledPageProto_Image::set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.Image.data)
}
inline void DistilledPageProto_Image::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.DistilledPageProto.Image.data)
}
inline void DistilledPageProto_Image::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.Image.data)
}
inline void DistilledPageProto_Image::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.Image.data)
}
inline std::string* DistilledPageProto_Image::mutable_data() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.Image.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DistilledPageProto_Image::release_data() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.Image.data)
  if (!has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DistilledPageProto_Image::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.Image.data)
}

// optional string url = 3;
inline bool DistilledPageProto_Image::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DistilledPageProto_Image::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DistilledPageProto_Image::url() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.Image.url)
  return url_.GetNoArena();
}
inline void DistilledPageProto_Image::set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.Image.url)
}
inline void DistilledPageProto_Image::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.DistilledPageProto.Image.url)
}
inline void DistilledPageProto_Image::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.Image.url)
}
inline void DistilledPageProto_Image::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.Image.url)
}
inline std::string* DistilledPageProto_Image::mutable_url() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.Image.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DistilledPageProto_Image::release_url() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.Image.url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DistilledPageProto_Image::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.Image.url)
}

// -------------------------------------------------------------------

// DistilledPageProto_DebugInfo

// optional string log = 1;
inline bool DistilledPageProto_DebugInfo::has_log() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DistilledPageProto_DebugInfo::clear_log() {
  log_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DistilledPageProto_DebugInfo::log() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.DebugInfo.log)
  return log_.GetNoArena();
}
inline void DistilledPageProto_DebugInfo::set_log(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  log_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.DebugInfo.log)
}
inline void DistilledPageProto_DebugInfo::set_log(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  log_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.DistilledPageProto.DebugInfo.log)
}
inline void DistilledPageProto_DebugInfo::set_log(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  log_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.DebugInfo.log)
}
inline void DistilledPageProto_DebugInfo::set_log(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  log_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.DebugInfo.log)
}
inline std::string* DistilledPageProto_DebugInfo::mutable_log() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.DebugInfo.log)
  return log_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DistilledPageProto_DebugInfo::release_log() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.DebugInfo.log)
  if (!has_log()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return log_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DistilledPageProto_DebugInfo::set_allocated_log(std::string* log) {
  if (log != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  log_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.DebugInfo.log)
}

// -------------------------------------------------------------------

// DistilledPageProto_PaginationInfo

// optional string next_page = 1;
inline bool DistilledPageProto_PaginationInfo::has_next_page() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DistilledPageProto_PaginationInfo::clear_next_page() {
  next_page_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DistilledPageProto_PaginationInfo::next_page() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.PaginationInfo.next_page)
  return next_page_.GetNoArena();
}
inline void DistilledPageProto_PaginationInfo::set_next_page(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  next_page_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.PaginationInfo.next_page)
}
inline void DistilledPageProto_PaginationInfo::set_next_page(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  next_page_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.DistilledPageProto.PaginationInfo.next_page)
}
inline void DistilledPageProto_PaginationInfo::set_next_page(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  next_page_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.PaginationInfo.next_page)
}
inline void DistilledPageProto_PaginationInfo::set_next_page(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  next_page_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.PaginationInfo.next_page)
}
inline std::string* DistilledPageProto_PaginationInfo::mutable_next_page() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.PaginationInfo.next_page)
  return next_page_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DistilledPageProto_PaginationInfo::release_next_page() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.PaginationInfo.next_page)
  if (!has_next_page()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return next_page_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DistilledPageProto_PaginationInfo::set_allocated_next_page(std::string* next_page) {
  if (next_page != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  next_page_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.PaginationInfo.next_page)
}

// optional string prev_page = 2;
inline bool DistilledPageProto_PaginationInfo::has_prev_page() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DistilledPageProto_PaginationInfo::clear_prev_page() {
  prev_page_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DistilledPageProto_PaginationInfo::prev_page() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.PaginationInfo.prev_page)
  return prev_page_.GetNoArena();
}
inline void DistilledPageProto_PaginationInfo::set_prev_page(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  prev_page_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.PaginationInfo.prev_page)
}
inline void DistilledPageProto_PaginationInfo::set_prev_page(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  prev_page_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.DistilledPageProto.PaginationInfo.prev_page)
}
inline void DistilledPageProto_PaginationInfo::set_prev_page(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  prev_page_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.PaginationInfo.prev_page)
}
inline void DistilledPageProto_PaginationInfo::set_prev_page(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  prev_page_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.PaginationInfo.prev_page)
}
inline std::string* DistilledPageProto_PaginationInfo::mutable_prev_page() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.PaginationInfo.prev_page)
  return prev_page_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DistilledPageProto_PaginationInfo::release_prev_page() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.PaginationInfo.prev_page)
  if (!has_prev_page()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return prev_page_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DistilledPageProto_PaginationInfo::set_allocated_prev_page(std::string* prev_page) {
  if (prev_page != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  prev_page_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prev_page);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.PaginationInfo.prev_page)
}

// optional string canonical_page = 3;
inline bool DistilledPageProto_PaginationInfo::has_canonical_page() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DistilledPageProto_PaginationInfo::clear_canonical_page() {
  canonical_page_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DistilledPageProto_PaginationInfo::canonical_page() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.PaginationInfo.canonical_page)
  return canonical_page_.GetNoArena();
}
inline void DistilledPageProto_PaginationInfo::set_canonical_page(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  canonical_page_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.PaginationInfo.canonical_page)
}
inline void DistilledPageProto_PaginationInfo::set_canonical_page(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  canonical_page_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.DistilledPageProto.PaginationInfo.canonical_page)
}
inline void DistilledPageProto_PaginationInfo::set_canonical_page(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  canonical_page_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.PaginationInfo.canonical_page)
}
inline void DistilledPageProto_PaginationInfo::set_canonical_page(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  canonical_page_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.PaginationInfo.canonical_page)
}
inline std::string* DistilledPageProto_PaginationInfo::mutable_canonical_page() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.PaginationInfo.canonical_page)
  return canonical_page_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DistilledPageProto_PaginationInfo::release_canonical_page() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.PaginationInfo.canonical_page)
  if (!has_canonical_page()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return canonical_page_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DistilledPageProto_PaginationInfo::set_allocated_canonical_page(std::string* canonical_page) {
  if (canonical_page != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  canonical_page_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), canonical_page);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.PaginationInfo.canonical_page)
}

// -------------------------------------------------------------------

// DistilledPageProto_TimingInfo

// optional string name = 1;
inline bool DistilledPageProto_TimingInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DistilledPageProto_TimingInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DistilledPageProto_TimingInfo::name() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.TimingInfo.name)
  return name_.GetNoArena();
}
inline void DistilledPageProto_TimingInfo::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.TimingInfo.name)
}
inline void DistilledPageProto_TimingInfo::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.DistilledPageProto.TimingInfo.name)
}
inline void DistilledPageProto_TimingInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.TimingInfo.name)
}
inline void DistilledPageProto_TimingInfo::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.TimingInfo.name)
}
inline std::string* DistilledPageProto_TimingInfo::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.TimingInfo.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DistilledPageProto_TimingInfo::release_name() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.TimingInfo.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DistilledPageProto_TimingInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.TimingInfo.name)
}

// optional double time = 2;
inline bool DistilledPageProto_TimingInfo::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DistilledPageProto_TimingInfo::clear_time() {
  time_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double DistilledPageProto_TimingInfo::time() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.TimingInfo.time)
  return time_;
}
inline void DistilledPageProto_TimingInfo::set_time(double value) {
  _has_bits_[0] |= 0x00000002u;
  time_ = value;
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.TimingInfo.time)
}

// -------------------------------------------------------------------

// DistilledPageProto

// required string url = 1;
inline bool DistilledPageProto::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DistilledPageProto::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DistilledPageProto::url() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.url)
  return url_.GetNoArena();
}
inline void DistilledPageProto::set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.url)
}
inline void DistilledPageProto::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.DistilledPageProto.url)
}
inline void DistilledPageProto::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.url)
}
inline void DistilledPageProto::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.url)
}
inline std::string* DistilledPageProto::mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DistilledPageProto::release_url() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DistilledPageProto::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.url)
}

// required string html = 3;
inline bool DistilledPageProto::has_html() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DistilledPageProto::clear_html() {
  html_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DistilledPageProto::html() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.html)
  return html_.GetNoArena();
}
inline void DistilledPageProto::set_html(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  html_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.html)
}
inline void DistilledPageProto::set_html(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  html_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.DistilledPageProto.html)
}
inline void DistilledPageProto::set_html(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  html_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.html)
}
inline void DistilledPageProto::set_html(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  html_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.html)
}
inline std::string* DistilledPageProto::mutable_html() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.html)
  return html_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DistilledPageProto::release_html() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.html)
  if (!has_html()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return html_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DistilledPageProto::set_allocated_html(std::string* html) {
  if (html != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  html_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), html);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.html)
}

// repeated .dom_distiller.DistilledPageProto.Image image = 4;
inline int DistilledPageProto::image_size() const {
  return image_.size();
}
inline void DistilledPageProto::clear_image() {
  image_.Clear();
}
inline ::dom_distiller::DistilledPageProto_Image* DistilledPageProto::mutable_image(int index) {
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.image)
  return image_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dom_distiller::DistilledPageProto_Image >*
DistilledPageProto::mutable_image() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.DistilledPageProto.image)
  return &image_;
}
inline const ::dom_distiller::DistilledPageProto_Image& DistilledPageProto::image(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.image)
  return image_.Get(index);
}
inline ::dom_distiller::DistilledPageProto_Image* DistilledPageProto::add_image() {
  // @@protoc_insertion_point(field_add:dom_distiller.DistilledPageProto.image)
  return image_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dom_distiller::DistilledPageProto_Image >&
DistilledPageProto::image() const {
  // @@protoc_insertion_point(field_list:dom_distiller.DistilledPageProto.image)
  return image_;
}

// optional string title = 5;
inline bool DistilledPageProto::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DistilledPageProto::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DistilledPageProto::title() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.title)
  return title_.GetNoArena();
}
inline void DistilledPageProto::set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.title)
}
inline void DistilledPageProto::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.DistilledPageProto.title)
}
inline void DistilledPageProto::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.title)
}
inline void DistilledPageProto::set_title(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.title)
}
inline std::string* DistilledPageProto::mutable_title() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.title)
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DistilledPageProto::release_title() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.title)
  if (!has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return title_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DistilledPageProto::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.title)
}

// optional .dom_distiller.DistilledPageProto.DebugInfo debug_info = 6;
inline bool DistilledPageProto::has_debug_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DistilledPageProto::clear_debug_info() {
  if (debug_info_ != nullptr) debug_info_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::dom_distiller::DistilledPageProto_DebugInfo& DistilledPageProto::debug_info() const {
  const ::dom_distiller::DistilledPageProto_DebugInfo* p = debug_info_;
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.debug_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::dom_distiller::DistilledPageProto_DebugInfo*>(
      &::dom_distiller::_DistilledPageProto_DebugInfo_default_instance_);
}
inline ::dom_distiller::DistilledPageProto_DebugInfo* DistilledPageProto::release_debug_info() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.debug_info)
  _has_bits_[0] &= ~0x00000010u;
  ::dom_distiller::DistilledPageProto_DebugInfo* temp = debug_info_;
  debug_info_ = nullptr;
  return temp;
}
inline ::dom_distiller::DistilledPageProto_DebugInfo* DistilledPageProto::mutable_debug_info() {
  _has_bits_[0] |= 0x00000010u;
  if (debug_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::dom_distiller::DistilledPageProto_DebugInfo>(GetArenaNoVirtual());
    debug_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.debug_info)
  return debug_info_;
}
inline void DistilledPageProto::set_allocated_debug_info(::dom_distiller::DistilledPageProto_DebugInfo* debug_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete debug_info_;
  }
  if (debug_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      debug_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  debug_info_ = debug_info;
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.debug_info)
}

// optional string text_direction = 7;
inline bool DistilledPageProto::has_text_direction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DistilledPageProto::clear_text_direction() {
  text_direction_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& DistilledPageProto::text_direction() const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.text_direction)
  return text_direction_.GetNoArena();
}
inline void DistilledPageProto::set_text_direction(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  text_direction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dom_distiller.DistilledPageProto.text_direction)
}
inline void DistilledPageProto::set_text_direction(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  text_direction_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dom_distiller.DistilledPageProto.text_direction)
}
inline void DistilledPageProto::set_text_direction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  text_direction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dom_distiller.DistilledPageProto.text_direction)
}
inline void DistilledPageProto::set_text_direction(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  text_direction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dom_distiller.DistilledPageProto.text_direction)
}
inline std::string* DistilledPageProto::mutable_text_direction() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.text_direction)
  return text_direction_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DistilledPageProto::release_text_direction() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.text_direction)
  if (!has_text_direction()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return text_direction_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DistilledPageProto::set_allocated_text_direction(std::string* text_direction) {
  if (text_direction != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  text_direction_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text_direction);
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.text_direction)
}

// optional .dom_distiller.DistilledPageProto.PaginationInfo pagination_info = 8;
inline bool DistilledPageProto::has_pagination_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DistilledPageProto::clear_pagination_info() {
  if (pagination_info_ != nullptr) pagination_info_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::dom_distiller::DistilledPageProto_PaginationInfo& DistilledPageProto::pagination_info() const {
  const ::dom_distiller::DistilledPageProto_PaginationInfo* p = pagination_info_;
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.pagination_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::dom_distiller::DistilledPageProto_PaginationInfo*>(
      &::dom_distiller::_DistilledPageProto_PaginationInfo_default_instance_);
}
inline ::dom_distiller::DistilledPageProto_PaginationInfo* DistilledPageProto::release_pagination_info() {
  // @@protoc_insertion_point(field_release:dom_distiller.DistilledPageProto.pagination_info)
  _has_bits_[0] &= ~0x00000020u;
  ::dom_distiller::DistilledPageProto_PaginationInfo* temp = pagination_info_;
  pagination_info_ = nullptr;
  return temp;
}
inline ::dom_distiller::DistilledPageProto_PaginationInfo* DistilledPageProto::mutable_pagination_info() {
  _has_bits_[0] |= 0x00000020u;
  if (pagination_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::dom_distiller::DistilledPageProto_PaginationInfo>(GetArenaNoVirtual());
    pagination_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.pagination_info)
  return pagination_info_;
}
inline void DistilledPageProto::set_allocated_pagination_info(::dom_distiller::DistilledPageProto_PaginationInfo* pagination_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pagination_info_;
  }
  if (pagination_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pagination_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  pagination_info_ = pagination_info;
  // @@protoc_insertion_point(field_set_allocated:dom_distiller.DistilledPageProto.pagination_info)
}

// repeated .dom_distiller.DistilledPageProto.TimingInfo timing_info = 9;
inline int DistilledPageProto::timing_info_size() const {
  return timing_info_.size();
}
inline void DistilledPageProto::clear_timing_info() {
  timing_info_.Clear();
}
inline ::dom_distiller::DistilledPageProto_TimingInfo* DistilledPageProto::mutable_timing_info(int index) {
  // @@protoc_insertion_point(field_mutable:dom_distiller.DistilledPageProto.timing_info)
  return timing_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dom_distiller::DistilledPageProto_TimingInfo >*
DistilledPageProto::mutable_timing_info() {
  // @@protoc_insertion_point(field_mutable_list:dom_distiller.DistilledPageProto.timing_info)
  return &timing_info_;
}
inline const ::dom_distiller::DistilledPageProto_TimingInfo& DistilledPageProto::timing_info(int index) const {
  // @@protoc_insertion_point(field_get:dom_distiller.DistilledPageProto.timing_info)
  return timing_info_.Get(index);
}
inline ::dom_distiller::DistilledPageProto_TimingInfo* DistilledPageProto::add_timing_info() {
  // @@protoc_insertion_point(field_add:dom_distiller.DistilledPageProto.timing_info)
  return timing_info_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dom_distiller::DistilledPageProto_TimingInfo >&
DistilledPageProto::timing_info() const {
  // @@protoc_insertion_point(field_list:dom_distiller.DistilledPageProto.timing_info)
  return timing_info_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dom_distiller

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_distilled_5fpage_2eproto

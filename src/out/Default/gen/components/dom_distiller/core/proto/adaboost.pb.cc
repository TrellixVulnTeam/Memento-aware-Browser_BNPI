// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: adaboost.proto

#include "adaboost.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_adaboost_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StumpProto_adaboost_2eproto;
namespace dom_distiller {
class AdaBoostProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdaBoostProto> _instance;
} _AdaBoostProto_default_instance_;
class StumpProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StumpProto> _instance;
} _StumpProto_default_instance_;
}  // namespace dom_distiller
static void InitDefaultsscc_info_AdaBoostProto_adaboost_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dom_distiller::_AdaBoostProto_default_instance_;
    new (ptr) ::dom_distiller::AdaBoostProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dom_distiller::AdaBoostProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AdaBoostProto_adaboost_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AdaBoostProto_adaboost_2eproto}, {
      &scc_info_StumpProto_adaboost_2eproto.base,}};

static void InitDefaultsscc_info_StumpProto_adaboost_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dom_distiller::_StumpProto_default_instance_;
    new (ptr) ::dom_distiller::StumpProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dom_distiller::StumpProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StumpProto_adaboost_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StumpProto_adaboost_2eproto}, {}};

namespace dom_distiller {

// ===================================================================

void AdaBoostProto::InitAsDefaultInstance() {
}
class AdaBoostProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AdaBoostProto>()._has_bits_);
  static void set_has_num_stumps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_features(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AdaBoostProto::AdaBoostProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dom_distiller.AdaBoostProto)
}
AdaBoostProto::AdaBoostProto(const AdaBoostProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      stump_(from.stump_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_stumps_, &from.num_stumps_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_features_) -
    reinterpret_cast<char*>(&num_stumps_)) + sizeof(num_features_));
  // @@protoc_insertion_point(copy_constructor:dom_distiller.AdaBoostProto)
}

void AdaBoostProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdaBoostProto_adaboost_2eproto.base);
  ::memset(&num_stumps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_features_) -
      reinterpret_cast<char*>(&num_stumps_)) + sizeof(num_features_));
}

AdaBoostProto::~AdaBoostProto() {
  // @@protoc_insertion_point(destructor:dom_distiller.AdaBoostProto)
  SharedDtor();
}

void AdaBoostProto::SharedDtor() {
}

void AdaBoostProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdaBoostProto& AdaBoostProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdaBoostProto_adaboost_2eproto.base);
  return *internal_default_instance();
}


void AdaBoostProto::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.AdaBoostProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stump_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&num_stumps_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_features_) -
        reinterpret_cast<char*>(&num_stumps_)) + sizeof(num_features_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AdaBoostProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 num_stumps = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_num_stumps(&has_bits);
          num_stumps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 num_features = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_features(&has_bits);
          num_features_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .dom_distiller.StumpProto stump = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_stump(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AdaBoostProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:dom_distiller.AdaBoostProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num_stumps = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_num_stumps(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_stumps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 num_features = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_num_features(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_features_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dom_distiller.StumpProto stump = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_stump()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dom_distiller.AdaBoostProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dom_distiller.AdaBoostProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AdaBoostProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dom_distiller.AdaBoostProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 num_stumps = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->num_stumps(), output);
  }

  // required int32 num_features = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->num_features(), output);
  }

  // repeated .dom_distiller.StumpProto stump = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stump_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->stump(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:dom_distiller.AdaBoostProto)
}

size_t AdaBoostProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dom_distiller.AdaBoostProto)
  size_t total_size = 0;

  if (has_num_stumps()) {
    // required int32 num_stumps = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num_stumps());
  }

  if (has_num_features()) {
    // required int32 num_features = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num_features());
  }

  return total_size;
}
size_t AdaBoostProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.AdaBoostProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 num_stumps = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num_stumps());

    // required int32 num_features = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num_features());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dom_distiller.StumpProto stump = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->stump_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->stump(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdaBoostProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AdaBoostProto*>(
      &from));
}

void AdaBoostProto::MergeFrom(const AdaBoostProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.AdaBoostProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stump_.MergeFrom(from.stump_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      num_stumps_ = from.num_stumps_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_features_ = from.num_features_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AdaBoostProto::CopyFrom(const AdaBoostProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.AdaBoostProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdaBoostProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->stump())) return false;
  return true;
}

void AdaBoostProto::InternalSwap(AdaBoostProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&stump_)->InternalSwap(CastToBase(&other->stump_));
  swap(num_stumps_, other->num_stumps_);
  swap(num_features_, other->num_features_);
}

std::string AdaBoostProto::GetTypeName() const {
  return "dom_distiller.AdaBoostProto";
}


// ===================================================================

void StumpProto::InitAsDefaultInstance() {
}
class StumpProto::_Internal {
 public:
  using HasBits = decltype(std::declval<StumpProto>()._has_bits_);
  static void set_has_feature_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_split(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

StumpProto::StumpProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dom_distiller.StumpProto)
}
StumpProto::StumpProto(const StumpProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&split_, &from.split_,
    static_cast<size_t>(reinterpret_cast<char*>(&feature_number_) -
    reinterpret_cast<char*>(&split_)) + sizeof(feature_number_));
  // @@protoc_insertion_point(copy_constructor:dom_distiller.StumpProto)
}

void StumpProto::SharedCtor() {
  ::memset(&split_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&feature_number_) -
      reinterpret_cast<char*>(&split_)) + sizeof(feature_number_));
}

StumpProto::~StumpProto() {
  // @@protoc_insertion_point(destructor:dom_distiller.StumpProto)
  SharedDtor();
}

void StumpProto::SharedDtor() {
}

void StumpProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StumpProto& StumpProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StumpProto_adaboost_2eproto.base);
  return *internal_default_instance();
}


void StumpProto::Clear() {
// @@protoc_insertion_point(message_clear_start:dom_distiller.StumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&split_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&feature_number_) -
        reinterpret_cast<char*>(&split_)) + sizeof(feature_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StumpProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 feature_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_feature_number(&has_bits);
          feature_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double split = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_split(&has_bits);
          split_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_weight(&has_bits);
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StumpProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:dom_distiller.StumpProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 feature_number = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_feature_number(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &feature_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double split = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_split(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &split_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double weight = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          _Internal::set_has_weight(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dom_distiller.StumpProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dom_distiller.StumpProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StumpProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dom_distiller.StumpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 feature_number = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->feature_number(), output);
  }

  // required double split = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->split(), output);
  }

  // required double weight = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->weight(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:dom_distiller.StumpProto)
}

size_t StumpProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dom_distiller.StumpProto)
  size_t total_size = 0;

  if (has_split()) {
    // required double split = 2;
    total_size += 1 + 8;
  }

  if (has_weight()) {
    // required double weight = 3;
    total_size += 1 + 8;
  }

  if (has_feature_number()) {
    // required int32 feature_number = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->feature_number());
  }

  return total_size;
}
size_t StumpProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dom_distiller.StumpProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double split = 2;
    total_size += 1 + 8;

    // required double weight = 3;
    total_size += 1 + 8;

    // required int32 feature_number = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->feature_number());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StumpProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const StumpProto*>(
      &from));
}

void StumpProto::MergeFrom(const StumpProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dom_distiller.StumpProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      split_ = from.split_;
    }
    if (cached_has_bits & 0x00000002u) {
      weight_ = from.weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      feature_number_ = from.feature_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StumpProto::CopyFrom(const StumpProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dom_distiller.StumpProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StumpProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void StumpProto::InternalSwap(StumpProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(split_, other->split_);
  swap(weight_, other->weight_);
  swap(feature_number_, other->feature_number_);
}

std::string StumpProto::GetTypeName() const {
  return "dom_distiller.StumpProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dom_distiller
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dom_distiller::AdaBoostProto* Arena::CreateMaybeMessage< ::dom_distiller::AdaBoostProto >(Arena* arena) {
  return Arena::CreateInternal< ::dom_distiller::AdaBoostProto >(arena);
}
template<> PROTOBUF_NOINLINE ::dom_distiller::StumpProto* Arena::CreateMaybeMessage< ::dom_distiller::StumpProto >(Arena* arena) {
  return Arena::CreateInternal< ::dom_distiller::StumpProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

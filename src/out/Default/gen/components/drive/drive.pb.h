// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drive.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_drive_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_drive_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_drive_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_drive_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace drive {
class CapabilitiesInfo;
class CapabilitiesInfoDefaultTypeInternal;
extern CapabilitiesInfoDefaultTypeInternal _CapabilitiesInfo_default_instance_;
class DirectorySpecificInfo;
class DirectorySpecificInfoDefaultTypeInternal;
extern DirectorySpecificInfoDefaultTypeInternal _DirectorySpecificInfo_default_instance_;
class FileCacheEntry;
class FileCacheEntryDefaultTypeInternal;
extern FileCacheEntryDefaultTypeInternal _FileCacheEntry_default_instance_;
class FileSpecificInfo;
class FileSpecificInfoDefaultTypeInternal;
extern FileSpecificInfoDefaultTypeInternal _FileSpecificInfo_default_instance_;
class PlatformFileInfoProto;
class PlatformFileInfoProtoDefaultTypeInternal;
extern PlatformFileInfoProtoDefaultTypeInternal _PlatformFileInfoProto_default_instance_;
class Property;
class PropertyDefaultTypeInternal;
extern PropertyDefaultTypeInternal _Property_default_instance_;
class ResourceEntry;
class ResourceEntryDefaultTypeInternal;
extern ResourceEntryDefaultTypeInternal _ResourceEntry_default_instance_;
class ResourceMetadataHeader;
class ResourceMetadataHeaderDefaultTypeInternal;
extern ResourceMetadataHeaderDefaultTypeInternal _ResourceMetadataHeader_default_instance_;
class TeamDriveRootSpecificInfo;
class TeamDriveRootSpecificInfoDefaultTypeInternal;
extern TeamDriveRootSpecificInfoDefaultTypeInternal _TeamDriveRootSpecificInfo_default_instance_;
}  // namespace drive
PROTOBUF_NAMESPACE_OPEN
template<> ::drive::CapabilitiesInfo* Arena::CreateMaybeMessage<::drive::CapabilitiesInfo>(Arena*);
template<> ::drive::DirectorySpecificInfo* Arena::CreateMaybeMessage<::drive::DirectorySpecificInfo>(Arena*);
template<> ::drive::FileCacheEntry* Arena::CreateMaybeMessage<::drive::FileCacheEntry>(Arena*);
template<> ::drive::FileSpecificInfo* Arena::CreateMaybeMessage<::drive::FileSpecificInfo>(Arena*);
template<> ::drive::PlatformFileInfoProto* Arena::CreateMaybeMessage<::drive::PlatformFileInfoProto>(Arena*);
template<> ::drive::Property* Arena::CreateMaybeMessage<::drive::Property>(Arena*);
template<> ::drive::ResourceEntry* Arena::CreateMaybeMessage<::drive::ResourceEntry>(Arena*);
template<> ::drive::ResourceMetadataHeader* Arena::CreateMaybeMessage<::drive::ResourceMetadataHeader>(Arena*);
template<> ::drive::TeamDriveRootSpecificInfo* Arena::CreateMaybeMessage<::drive::TeamDriveRootSpecificInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace drive {

enum Property_Visibility : int {
  Property_Visibility_PRIVATE = 0,
  Property_Visibility_PUBLIC = 1
};
bool Property_Visibility_IsValid(int value);
constexpr Property_Visibility Property_Visibility_Visibility_MIN = Property_Visibility_PRIVATE;
constexpr Property_Visibility Property_Visibility_Visibility_MAX = Property_Visibility_PUBLIC;
constexpr int Property_Visibility_Visibility_ARRAYSIZE = Property_Visibility_Visibility_MAX + 1;

const std::string& Property_Visibility_Name(Property_Visibility value);
template<typename T>
inline const std::string& Property_Visibility_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Property_Visibility>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Property_Visibility_Name.");
  return Property_Visibility_Name(static_cast<Property_Visibility>(enum_t_value));
}
bool Property_Visibility_Parse(
    const std::string& name, Property_Visibility* value);
enum ResourceEntry_EditState : int {
  ResourceEntry_EditState_CLEAN = 0,
  ResourceEntry_EditState_DIRTY = 1,
  ResourceEntry_EditState_SYNCING = 2
};
bool ResourceEntry_EditState_IsValid(int value);
constexpr ResourceEntry_EditState ResourceEntry_EditState_EditState_MIN = ResourceEntry_EditState_CLEAN;
constexpr ResourceEntry_EditState ResourceEntry_EditState_EditState_MAX = ResourceEntry_EditState_SYNCING;
constexpr int ResourceEntry_EditState_EditState_ARRAYSIZE = ResourceEntry_EditState_EditState_MAX + 1;

const std::string& ResourceEntry_EditState_Name(ResourceEntry_EditState value);
template<typename T>
inline const std::string& ResourceEntry_EditState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResourceEntry_EditState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResourceEntry_EditState_Name.");
  return ResourceEntry_EditState_Name(static_cast<ResourceEntry_EditState>(enum_t_value));
}
bool ResourceEntry_EditState_Parse(
    const std::string& name, ResourceEntry_EditState* value);
// ===================================================================

class PlatformFileInfoProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:drive.PlatformFileInfoProto) */ {
 public:
  PlatformFileInfoProto();
  virtual ~PlatformFileInfoProto();

  PlatformFileInfoProto(const PlatformFileInfoProto& from);
  PlatformFileInfoProto(PlatformFileInfoProto&& from) noexcept
    : PlatformFileInfoProto() {
    *this = ::std::move(from);
  }

  inline PlatformFileInfoProto& operator=(const PlatformFileInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlatformFileInfoProto& operator=(PlatformFileInfoProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PlatformFileInfoProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlatformFileInfoProto* internal_default_instance() {
    return reinterpret_cast<const PlatformFileInfoProto*>(
               &_PlatformFileInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlatformFileInfoProto& a, PlatformFileInfoProto& b) {
    a.Swap(&b);
  }
  inline void Swap(PlatformFileInfoProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlatformFileInfoProto* New() const final {
    return CreateMaybeMessage<PlatformFileInfoProto>(nullptr);
  }

  PlatformFileInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlatformFileInfoProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PlatformFileInfoProto& from);
  void MergeFrom(const PlatformFileInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlatformFileInfoProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "drive.PlatformFileInfoProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizeFieldNumber = 1,
    kLastModifiedFieldNumber = 4,
    kLastAccessedFieldNumber = 5,
    kCreationTimeFieldNumber = 6,
    kIsDirectoryFieldNumber = 2,
    kIsSymbolicLinkFieldNumber = 3,
    kIsTeamDriveRootFieldNumber = 7,
  };
  // optional int64 size = 1;
  bool has_size() const;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 last_modified = 4;
  bool has_last_modified() const;
  void clear_last_modified();
  ::PROTOBUF_NAMESPACE_ID::int64 last_modified() const;
  void set_last_modified(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 last_accessed = 5;
  bool has_last_accessed() const;
  void clear_last_accessed();
  ::PROTOBUF_NAMESPACE_ID::int64 last_accessed() const;
  void set_last_accessed(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 creation_time = 6;
  bool has_creation_time() const;
  void clear_creation_time();
  ::PROTOBUF_NAMESPACE_ID::int64 creation_time() const;
  void set_creation_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional bool is_directory = 2;
  bool has_is_directory() const;
  void clear_is_directory();
  bool is_directory() const;
  void set_is_directory(bool value);

  // optional bool is_symbolic_link = 3;
  bool has_is_symbolic_link() const;
  void clear_is_symbolic_link();
  bool is_symbolic_link() const;
  void set_is_symbolic_link(bool value);

  // optional bool is_team_drive_root = 7;
  bool has_is_team_drive_root() const;
  void clear_is_team_drive_root();
  bool is_team_drive_root() const;
  void set_is_team_drive_root(bool value);

  // @@protoc_insertion_point(class_scope:drive.PlatformFileInfoProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_modified_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_accessed_;
  ::PROTOBUF_NAMESPACE_ID::int64 creation_time_;
  bool is_directory_;
  bool is_symbolic_link_;
  bool is_team_drive_root_;
  friend struct ::TableStruct_drive_2eproto;
};
// -------------------------------------------------------------------

class Property :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:drive.Property) */ {
 public:
  Property();
  virtual ~Property();

  Property(const Property& from);
  Property(Property&& from) noexcept
    : Property() {
    *this = ::std::move(from);
  }

  inline Property& operator=(const Property& from) {
    CopyFrom(from);
    return *this;
  }
  inline Property& operator=(Property&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Property& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Property* internal_default_instance() {
    return reinterpret_cast<const Property*>(
               &_Property_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Property& a, Property& b) {
    a.Swap(&b);
  }
  inline void Swap(Property* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Property* New() const final {
    return CreateMaybeMessage<Property>(nullptr);
  }

  Property* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Property>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Property& from);
  void MergeFrom(const Property& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Property* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "drive.Property";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Property_Visibility Visibility;
  static constexpr Visibility PRIVATE =
    Property_Visibility_PRIVATE;
  static constexpr Visibility PUBLIC =
    Property_Visibility_PUBLIC;
  static inline bool Visibility_IsValid(int value) {
    return Property_Visibility_IsValid(value);
  }
  static constexpr Visibility Visibility_MIN =
    Property_Visibility_Visibility_MIN;
  static constexpr Visibility Visibility_MAX =
    Property_Visibility_Visibility_MAX;
  static constexpr int Visibility_ARRAYSIZE =
    Property_Visibility_Visibility_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Visibility_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Visibility>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Visibility_Name.");
    return Property_Visibility_Name(enum_t_value);
  }
  static inline bool Visibility_Parse(const std::string& name,
      Visibility* value) {
    return Property_Visibility_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kVisibilityFieldNumber = 3,
  };
  // optional string key = 1;
  bool has_key() const;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // optional string value = 2;
  bool has_value() const;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // optional .drive.Property.Visibility visibility = 3;
  bool has_visibility() const;
  void clear_visibility();
  ::drive::Property_Visibility visibility() const;
  void set_visibility(::drive::Property_Visibility value);

  // @@protoc_insertion_point(class_scope:drive.Property)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int visibility_;
  friend struct ::TableStruct_drive_2eproto;
};
// -------------------------------------------------------------------

class CapabilitiesInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:drive.CapabilitiesInfo) */ {
 public:
  CapabilitiesInfo();
  virtual ~CapabilitiesInfo();

  CapabilitiesInfo(const CapabilitiesInfo& from);
  CapabilitiesInfo(CapabilitiesInfo&& from) noexcept
    : CapabilitiesInfo() {
    *this = ::std::move(from);
  }

  inline CapabilitiesInfo& operator=(const CapabilitiesInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CapabilitiesInfo& operator=(CapabilitiesInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CapabilitiesInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CapabilitiesInfo* internal_default_instance() {
    return reinterpret_cast<const CapabilitiesInfo*>(
               &_CapabilitiesInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CapabilitiesInfo& a, CapabilitiesInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CapabilitiesInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CapabilitiesInfo* New() const final {
    return CreateMaybeMessage<CapabilitiesInfo>(nullptr);
  }

  CapabilitiesInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CapabilitiesInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CapabilitiesInfo& from);
  void MergeFrom(const CapabilitiesInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CapabilitiesInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "drive.CapabilitiesInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCanCopyFieldNumber = 1,
    kCanDeleteFieldNumber = 2,
    kCanRenameFieldNumber = 3,
    kCanAddChildrenFieldNumber = 4,
    kCanShareFieldNumber = 5,
  };
  // optional bool can_copy = 1;
  bool has_can_copy() const;
  void clear_can_copy();
  bool can_copy() const;
  void set_can_copy(bool value);

  // optional bool can_delete = 2;
  bool has_can_delete() const;
  void clear_can_delete();
  bool can_delete() const;
  void set_can_delete(bool value);

  // optional bool can_rename = 3;
  bool has_can_rename() const;
  void clear_can_rename();
  bool can_rename() const;
  void set_can_rename(bool value);

  // optional bool can_add_children = 4;
  bool has_can_add_children() const;
  void clear_can_add_children();
  bool can_add_children() const;
  void set_can_add_children(bool value);

  // optional bool can_share = 5;
  bool has_can_share() const;
  void clear_can_share();
  bool can_share() const;
  void set_can_share(bool value);

  // @@protoc_insertion_point(class_scope:drive.CapabilitiesInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool can_copy_;
  bool can_delete_;
  bool can_rename_;
  bool can_add_children_;
  bool can_share_;
  friend struct ::TableStruct_drive_2eproto;
};
// -------------------------------------------------------------------

class FileSpecificInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:drive.FileSpecificInfo) */ {
 public:
  FileSpecificInfo();
  virtual ~FileSpecificInfo();

  FileSpecificInfo(const FileSpecificInfo& from);
  FileSpecificInfo(FileSpecificInfo&& from) noexcept
    : FileSpecificInfo() {
    *this = ::std::move(from);
  }

  inline FileSpecificInfo& operator=(const FileSpecificInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileSpecificInfo& operator=(FileSpecificInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FileSpecificInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileSpecificInfo* internal_default_instance() {
    return reinterpret_cast<const FileSpecificInfo*>(
               &_FileSpecificInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FileSpecificInfo& a, FileSpecificInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FileSpecificInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileSpecificInfo* New() const final {
    return CreateMaybeMessage<FileSpecificInfo>(nullptr);
  }

  FileSpecificInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileSpecificInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FileSpecificInfo& from);
  void MergeFrom(const FileSpecificInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileSpecificInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "drive.FileSpecificInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentMimeTypeFieldNumber = 3,
    kMd5FieldNumber = 4,
    kDocumentExtensionFieldNumber = 5,
    kCacheStateFieldNumber = 11,
    kImageWidthFieldNumber = 8,
    kImageHeightFieldNumber = 9,
    kIsHostedDocumentFieldNumber = 6,
    kImageRotationFieldNumber = 10,
  };
  // optional string content_mime_type = 3;
  bool has_content_mime_type() const;
  void clear_content_mime_type();
  const std::string& content_mime_type() const;
  void set_content_mime_type(const std::string& value);
  void set_content_mime_type(std::string&& value);
  void set_content_mime_type(const char* value);
  void set_content_mime_type(const char* value, size_t size);
  std::string* mutable_content_mime_type();
  std::string* release_content_mime_type();
  void set_allocated_content_mime_type(std::string* content_mime_type);

  // optional string md5 = 4;
  bool has_md5() const;
  void clear_md5();
  const std::string& md5() const;
  void set_md5(const std::string& value);
  void set_md5(std::string&& value);
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  std::string* mutable_md5();
  std::string* release_md5();
  void set_allocated_md5(std::string* md5);

  // optional string document_extension = 5;
  bool has_document_extension() const;
  void clear_document_extension();
  const std::string& document_extension() const;
  void set_document_extension(const std::string& value);
  void set_document_extension(std::string&& value);
  void set_document_extension(const char* value);
  void set_document_extension(const char* value, size_t size);
  std::string* mutable_document_extension();
  std::string* release_document_extension();
  void set_allocated_document_extension(std::string* document_extension);

  // optional .drive.FileCacheEntry cache_state = 11;
  bool has_cache_state() const;
  void clear_cache_state();
  const ::drive::FileCacheEntry& cache_state() const;
  ::drive::FileCacheEntry* release_cache_state();
  ::drive::FileCacheEntry* mutable_cache_state();
  void set_allocated_cache_state(::drive::FileCacheEntry* cache_state);

  // optional int64 image_width = 8;
  bool has_image_width() const;
  void clear_image_width();
  ::PROTOBUF_NAMESPACE_ID::int64 image_width() const;
  void set_image_width(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 image_height = 9;
  bool has_image_height() const;
  void clear_image_height();
  ::PROTOBUF_NAMESPACE_ID::int64 image_height() const;
  void set_image_height(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional bool is_hosted_document = 6;
  bool has_is_hosted_document() const;
  void clear_is_hosted_document();
  bool is_hosted_document() const;
  void set_is_hosted_document(bool value);

  // optional int64 image_rotation = 10;
  bool has_image_rotation() const;
  void clear_image_rotation();
  ::PROTOBUF_NAMESPACE_ID::int64 image_rotation() const;
  void set_image_rotation(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:drive.FileSpecificInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_mime_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr document_extension_;
  ::drive::FileCacheEntry* cache_state_;
  ::PROTOBUF_NAMESPACE_ID::int64 image_width_;
  ::PROTOBUF_NAMESPACE_ID::int64 image_height_;
  bool is_hosted_document_;
  ::PROTOBUF_NAMESPACE_ID::int64 image_rotation_;
  friend struct ::TableStruct_drive_2eproto;
};
// -------------------------------------------------------------------

class TeamDriveRootSpecificInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:drive.TeamDriveRootSpecificInfo) */ {
 public:
  TeamDriveRootSpecificInfo();
  virtual ~TeamDriveRootSpecificInfo();

  TeamDriveRootSpecificInfo(const TeamDriveRootSpecificInfo& from);
  TeamDriveRootSpecificInfo(TeamDriveRootSpecificInfo&& from) noexcept
    : TeamDriveRootSpecificInfo() {
    *this = ::std::move(from);
  }

  inline TeamDriveRootSpecificInfo& operator=(const TeamDriveRootSpecificInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamDriveRootSpecificInfo& operator=(TeamDriveRootSpecificInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TeamDriveRootSpecificInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeamDriveRootSpecificInfo* internal_default_instance() {
    return reinterpret_cast<const TeamDriveRootSpecificInfo*>(
               &_TeamDriveRootSpecificInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TeamDriveRootSpecificInfo& a, TeamDriveRootSpecificInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamDriveRootSpecificInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TeamDriveRootSpecificInfo* New() const final {
    return CreateMaybeMessage<TeamDriveRootSpecificInfo>(nullptr);
  }

  TeamDriveRootSpecificInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TeamDriveRootSpecificInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TeamDriveRootSpecificInfo& from);
  void MergeFrom(const TeamDriveRootSpecificInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TeamDriveRootSpecificInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "drive.TeamDriveRootSpecificInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartPageTokenFieldNumber = 1,
  };
  // optional string start_page_token = 1;
  bool has_start_page_token() const;
  void clear_start_page_token();
  const std::string& start_page_token() const;
  void set_start_page_token(const std::string& value);
  void set_start_page_token(std::string&& value);
  void set_start_page_token(const char* value);
  void set_start_page_token(const char* value, size_t size);
  std::string* mutable_start_page_token();
  std::string* release_start_page_token();
  void set_allocated_start_page_token(std::string* start_page_token);

  // @@protoc_insertion_point(class_scope:drive.TeamDriveRootSpecificInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_page_token_;
  friend struct ::TableStruct_drive_2eproto;
};
// -------------------------------------------------------------------

class DirectorySpecificInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:drive.DirectorySpecificInfo) */ {
 public:
  DirectorySpecificInfo();
  virtual ~DirectorySpecificInfo();

  DirectorySpecificInfo(const DirectorySpecificInfo& from);
  DirectorySpecificInfo(DirectorySpecificInfo&& from) noexcept
    : DirectorySpecificInfo() {
    *this = ::std::move(from);
  }

  inline DirectorySpecificInfo& operator=(const DirectorySpecificInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DirectorySpecificInfo& operator=(DirectorySpecificInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DirectorySpecificInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DirectorySpecificInfo* internal_default_instance() {
    return reinterpret_cast<const DirectorySpecificInfo*>(
               &_DirectorySpecificInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DirectorySpecificInfo& a, DirectorySpecificInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DirectorySpecificInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DirectorySpecificInfo* New() const final {
    return CreateMaybeMessage<DirectorySpecificInfo>(nullptr);
  }

  DirectorySpecificInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DirectorySpecificInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DirectorySpecificInfo& from);
  void MergeFrom(const DirectorySpecificInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DirectorySpecificInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "drive.DirectorySpecificInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartPageTokenFieldNumber = 2,
    kChangestampFieldNumber = 1,
    kLastReadTimeMsFieldNumber = 3,
  };
  // optional string start_page_token = 2;
  bool has_start_page_token() const;
  void clear_start_page_token();
  const std::string& start_page_token() const;
  void set_start_page_token(const std::string& value);
  void set_start_page_token(std::string&& value);
  void set_start_page_token(const char* value);
  void set_start_page_token(const char* value, size_t size);
  std::string* mutable_start_page_token();
  std::string* release_start_page_token();
  void set_allocated_start_page_token(std::string* start_page_token);

  // optional int64 changestamp = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_changestamp() const;
  PROTOBUF_DEPRECATED void clear_changestamp();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int64 changestamp() const;
  PROTOBUF_DEPRECATED void set_changestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 last_read_time_ms = 3;
  bool has_last_read_time_ms() const;
  void clear_last_read_time_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 last_read_time_ms() const;
  void set_last_read_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:drive.DirectorySpecificInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_page_token_;
  ::PROTOBUF_NAMESPACE_ID::int64 changestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_read_time_ms_;
  friend struct ::TableStruct_drive_2eproto;
};
// -------------------------------------------------------------------

class ResourceEntry :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:drive.ResourceEntry) */ {
 public:
  ResourceEntry();
  virtual ~ResourceEntry();

  ResourceEntry(const ResourceEntry& from);
  ResourceEntry(ResourceEntry&& from) noexcept
    : ResourceEntry() {
    *this = ::std::move(from);
  }

  inline ResourceEntry& operator=(const ResourceEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceEntry& operator=(ResourceEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ResourceEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceEntry* internal_default_instance() {
    return reinterpret_cast<const ResourceEntry*>(
               &_ResourceEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ResourceEntry& a, ResourceEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceEntry* New() const final {
    return CreateMaybeMessage<ResourceEntry>(nullptr);
  }

  ResourceEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceEntry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ResourceEntry& from);
  void MergeFrom(const ResourceEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResourceEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "drive.ResourceEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ResourceEntry_EditState EditState;
  static constexpr EditState CLEAN =
    ResourceEntry_EditState_CLEAN;
  static constexpr EditState DIRTY =
    ResourceEntry_EditState_DIRTY;
  static constexpr EditState SYNCING =
    ResourceEntry_EditState_SYNCING;
  static inline bool EditState_IsValid(int value) {
    return ResourceEntry_EditState_IsValid(value);
  }
  static constexpr EditState EditState_MIN =
    ResourceEntry_EditState_EditState_MIN;
  static constexpr EditState EditState_MAX =
    ResourceEntry_EditState_EditState_MAX;
  static constexpr int EditState_ARRAYSIZE =
    ResourceEntry_EditState_EditState_ARRAYSIZE;
  template<typename T>
  static inline const std::string& EditState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EditState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EditState_Name.");
    return ResourceEntry_EditState_Name(enum_t_value);
  }
  static inline bool EditState_Parse(const std::string& name,
      EditState* value) {
    return ResourceEntry_EditState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNewPropertiesFieldNumber = 19,
    kBaseNameFieldNumber = 2,
    kTitleFieldNumber = 3,
    kResourceIdFieldNumber = 4,
    kParentLocalIdFieldNumber = 7,
    kLocalIdFieldNumber = 15,
    kAlternateUrlFieldNumber = 22,
    kFileInfoFieldNumber = 1,
    kFileSpecificInfoFieldNumber = 9,
    kDirectorySpecificInfoFieldNumber = 13,
    kTeamDriveRootSpecificInfoFieldNumber = 23,
    kCapabilitiesInfoFieldNumber = 24,
    kDeletedFieldNumber = 11,
    kStarredFieldNumber = 20,
    kSharedWithMeFieldNumber = 14,
    kSharedFieldNumber = 17,
    kMetadataEditStateFieldNumber = 16,
    kModificationDateFieldNumber = 18,
    kLastModifiedByMeFieldNumber = 21,
  };
  // repeated .drive.Property new_properties = 19;
  int new_properties_size() const;
  void clear_new_properties();
  ::drive::Property* mutable_new_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::drive::Property >*
      mutable_new_properties();
  const ::drive::Property& new_properties(int index) const;
  ::drive::Property* add_new_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::drive::Property >&
      new_properties() const;

  // optional string base_name = 2;
  bool has_base_name() const;
  void clear_base_name();
  const std::string& base_name() const;
  void set_base_name(const std::string& value);
  void set_base_name(std::string&& value);
  void set_base_name(const char* value);
  void set_base_name(const char* value, size_t size);
  std::string* mutable_base_name();
  std::string* release_base_name();
  void set_allocated_base_name(std::string* base_name);

  // optional string title = 3;
  bool has_title() const;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);

  // optional string resource_id = 4;
  bool has_resource_id() const;
  void clear_resource_id();
  const std::string& resource_id() const;
  void set_resource_id(const std::string& value);
  void set_resource_id(std::string&& value);
  void set_resource_id(const char* value);
  void set_resource_id(const char* value, size_t size);
  std::string* mutable_resource_id();
  std::string* release_resource_id();
  void set_allocated_resource_id(std::string* resource_id);

  // optional string parent_local_id = 7;
  bool has_parent_local_id() const;
  void clear_parent_local_id();
  const std::string& parent_local_id() const;
  void set_parent_local_id(const std::string& value);
  void set_parent_local_id(std::string&& value);
  void set_parent_local_id(const char* value);
  void set_parent_local_id(const char* value, size_t size);
  std::string* mutable_parent_local_id();
  std::string* release_parent_local_id();
  void set_allocated_parent_local_id(std::string* parent_local_id);

  // optional string local_id = 15;
  bool has_local_id() const;
  void clear_local_id();
  const std::string& local_id() const;
  void set_local_id(const std::string& value);
  void set_local_id(std::string&& value);
  void set_local_id(const char* value);
  void set_local_id(const char* value, size_t size);
  std::string* mutable_local_id();
  std::string* release_local_id();
  void set_allocated_local_id(std::string* local_id);

  // optional string alternate_url = 22;
  bool has_alternate_url() const;
  void clear_alternate_url();
  const std::string& alternate_url() const;
  void set_alternate_url(const std::string& value);
  void set_alternate_url(std::string&& value);
  void set_alternate_url(const char* value);
  void set_alternate_url(const char* value, size_t size);
  std::string* mutable_alternate_url();
  std::string* release_alternate_url();
  void set_allocated_alternate_url(std::string* alternate_url);

  // optional .drive.PlatformFileInfoProto file_info = 1;
  bool has_file_info() const;
  void clear_file_info();
  const ::drive::PlatformFileInfoProto& file_info() const;
  ::drive::PlatformFileInfoProto* release_file_info();
  ::drive::PlatformFileInfoProto* mutable_file_info();
  void set_allocated_file_info(::drive::PlatformFileInfoProto* file_info);

  // optional .drive.FileSpecificInfo file_specific_info = 9;
  bool has_file_specific_info() const;
  void clear_file_specific_info();
  const ::drive::FileSpecificInfo& file_specific_info() const;
  ::drive::FileSpecificInfo* release_file_specific_info();
  ::drive::FileSpecificInfo* mutable_file_specific_info();
  void set_allocated_file_specific_info(::drive::FileSpecificInfo* file_specific_info);

  // optional .drive.DirectorySpecificInfo directory_specific_info = 13;
  bool has_directory_specific_info() const;
  void clear_directory_specific_info();
  const ::drive::DirectorySpecificInfo& directory_specific_info() const;
  ::drive::DirectorySpecificInfo* release_directory_specific_info();
  ::drive::DirectorySpecificInfo* mutable_directory_specific_info();
  void set_allocated_directory_specific_info(::drive::DirectorySpecificInfo* directory_specific_info);

  // optional .drive.TeamDriveRootSpecificInfo team_drive_root_specific_info = 23;
  bool has_team_drive_root_specific_info() const;
  void clear_team_drive_root_specific_info();
  const ::drive::TeamDriveRootSpecificInfo& team_drive_root_specific_info() const;
  ::drive::TeamDriveRootSpecificInfo* release_team_drive_root_specific_info();
  ::drive::TeamDriveRootSpecificInfo* mutable_team_drive_root_specific_info();
  void set_allocated_team_drive_root_specific_info(::drive::TeamDriveRootSpecificInfo* team_drive_root_specific_info);

  // optional .drive.CapabilitiesInfo capabilities_info = 24;
  bool has_capabilities_info() const;
  void clear_capabilities_info();
  const ::drive::CapabilitiesInfo& capabilities_info() const;
  ::drive::CapabilitiesInfo* release_capabilities_info();
  ::drive::CapabilitiesInfo* mutable_capabilities_info();
  void set_allocated_capabilities_info(::drive::CapabilitiesInfo* capabilities_info);

  // optional bool deleted = 11;
  bool has_deleted() const;
  void clear_deleted();
  bool deleted() const;
  void set_deleted(bool value);

  // optional bool starred = 20;
  bool has_starred() const;
  void clear_starred();
  bool starred() const;
  void set_starred(bool value);

  // optional bool shared_with_me = 14;
  bool has_shared_with_me() const;
  void clear_shared_with_me();
  bool shared_with_me() const;
  void set_shared_with_me(bool value);

  // optional bool shared = 17;
  bool has_shared() const;
  void clear_shared();
  bool shared() const;
  void set_shared(bool value);

  // optional .drive.ResourceEntry.EditState metadata_edit_state = 16;
  bool has_metadata_edit_state() const;
  void clear_metadata_edit_state();
  ::drive::ResourceEntry_EditState metadata_edit_state() const;
  void set_metadata_edit_state(::drive::ResourceEntry_EditState value);

  // optional int64 modification_date = 18;
  bool has_modification_date() const;
  void clear_modification_date();
  ::PROTOBUF_NAMESPACE_ID::int64 modification_date() const;
  void set_modification_date(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 last_modified_by_me = 21;
  bool has_last_modified_by_me() const;
  void clear_last_modified_by_me();
  ::PROTOBUF_NAMESPACE_ID::int64 last_modified_by_me() const;
  void set_last_modified_by_me(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:drive.ResourceEntry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::drive::Property > new_properties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_local_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alternate_url_;
  ::drive::PlatformFileInfoProto* file_info_;
  ::drive::FileSpecificInfo* file_specific_info_;
  ::drive::DirectorySpecificInfo* directory_specific_info_;
  ::drive::TeamDriveRootSpecificInfo* team_drive_root_specific_info_;
  ::drive::CapabilitiesInfo* capabilities_info_;
  bool deleted_;
  bool starred_;
  bool shared_with_me_;
  bool shared_;
  int metadata_edit_state_;
  ::PROTOBUF_NAMESPACE_ID::int64 modification_date_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_modified_by_me_;
  friend struct ::TableStruct_drive_2eproto;
};
// -------------------------------------------------------------------

class ResourceMetadataHeader :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:drive.ResourceMetadataHeader) */ {
 public:
  ResourceMetadataHeader();
  virtual ~ResourceMetadataHeader();

  ResourceMetadataHeader(const ResourceMetadataHeader& from);
  ResourceMetadataHeader(ResourceMetadataHeader&& from) noexcept
    : ResourceMetadataHeader() {
    *this = ::std::move(from);
  }

  inline ResourceMetadataHeader& operator=(const ResourceMetadataHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceMetadataHeader& operator=(ResourceMetadataHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ResourceMetadataHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceMetadataHeader* internal_default_instance() {
    return reinterpret_cast<const ResourceMetadataHeader*>(
               &_ResourceMetadataHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ResourceMetadataHeader& a, ResourceMetadataHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceMetadataHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceMetadataHeader* New() const final {
    return CreateMaybeMessage<ResourceMetadataHeader>(nullptr);
  }

  ResourceMetadataHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceMetadataHeader>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ResourceMetadataHeader& from);
  void MergeFrom(const ResourceMetadataHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResourceMetadataHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "drive.ResourceMetadataHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartPageTokenFieldNumber = 4,
    kLargestChangestampFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // optional string start_page_token = 4;
  bool has_start_page_token() const;
  void clear_start_page_token();
  const std::string& start_page_token() const;
  void set_start_page_token(const std::string& value);
  void set_start_page_token(std::string&& value);
  void set_start_page_token(const char* value);
  void set_start_page_token(const char* value, size_t size);
  std::string* mutable_start_page_token();
  std::string* release_start_page_token();
  void set_allocated_start_page_token(std::string* start_page_token);

  // optional int64 largest_changestamp = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_largest_changestamp() const;
  PROTOBUF_DEPRECATED void clear_largest_changestamp();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int64 largest_changestamp() const;
  PROTOBUF_DEPRECATED void set_largest_changestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 version = 1;
  bool has_version() const;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:drive.ResourceMetadataHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_page_token_;
  ::PROTOBUF_NAMESPACE_ID::int64 largest_changestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  friend struct ::TableStruct_drive_2eproto;
};
// -------------------------------------------------------------------

class FileCacheEntry :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:drive.FileCacheEntry) */ {
 public:
  FileCacheEntry();
  virtual ~FileCacheEntry();

  FileCacheEntry(const FileCacheEntry& from);
  FileCacheEntry(FileCacheEntry&& from) noexcept
    : FileCacheEntry() {
    *this = ::std::move(from);
  }

  inline FileCacheEntry& operator=(const FileCacheEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileCacheEntry& operator=(FileCacheEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FileCacheEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileCacheEntry* internal_default_instance() {
    return reinterpret_cast<const FileCacheEntry*>(
               &_FileCacheEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FileCacheEntry& a, FileCacheEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(FileCacheEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileCacheEntry* New() const final {
    return CreateMaybeMessage<FileCacheEntry>(nullptr);
  }

  FileCacheEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileCacheEntry>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FileCacheEntry& from);
  void MergeFrom(const FileCacheEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileCacheEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "drive.FileCacheEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMd5FieldNumber = 1,
    kIsPresentFieldNumber = 2,
    kIsPinnedFieldNumber = 3,
    kIsDirtyFieldNumber = 4,
  };
  // optional string md5 = 1;
  bool has_md5() const;
  void clear_md5();
  const std::string& md5() const;
  void set_md5(const std::string& value);
  void set_md5(std::string&& value);
  void set_md5(const char* value);
  void set_md5(const char* value, size_t size);
  std::string* mutable_md5();
  std::string* release_md5();
  void set_allocated_md5(std::string* md5);

  // optional bool is_present = 2;
  bool has_is_present() const;
  void clear_is_present();
  bool is_present() const;
  void set_is_present(bool value);

  // optional bool is_pinned = 3;
  bool has_is_pinned() const;
  void clear_is_pinned();
  bool is_pinned() const;
  void set_is_pinned(bool value);

  // optional bool is_dirty = 4;
  bool has_is_dirty() const;
  void clear_is_dirty();
  bool is_dirty() const;
  void set_is_dirty(bool value);

  // @@protoc_insertion_point(class_scope:drive.FileCacheEntry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr md5_;
  bool is_present_;
  bool is_pinned_;
  bool is_dirty_;
  friend struct ::TableStruct_drive_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlatformFileInfoProto

// optional int64 size = 1;
inline bool PlatformFileInfoProto::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlatformFileInfoProto::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlatformFileInfoProto::size() const {
  // @@protoc_insertion_point(field_get:drive.PlatformFileInfoProto.size)
  return size_;
}
inline void PlatformFileInfoProto::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  size_ = value;
  // @@protoc_insertion_point(field_set:drive.PlatformFileInfoProto.size)
}

// optional bool is_directory = 2;
inline bool PlatformFileInfoProto::has_is_directory() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlatformFileInfoProto::clear_is_directory() {
  is_directory_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool PlatformFileInfoProto::is_directory() const {
  // @@protoc_insertion_point(field_get:drive.PlatformFileInfoProto.is_directory)
  return is_directory_;
}
inline void PlatformFileInfoProto::set_is_directory(bool value) {
  _has_bits_[0] |= 0x00000010u;
  is_directory_ = value;
  // @@protoc_insertion_point(field_set:drive.PlatformFileInfoProto.is_directory)
}

// optional bool is_symbolic_link = 3;
inline bool PlatformFileInfoProto::has_is_symbolic_link() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlatformFileInfoProto::clear_is_symbolic_link() {
  is_symbolic_link_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool PlatformFileInfoProto::is_symbolic_link() const {
  // @@protoc_insertion_point(field_get:drive.PlatformFileInfoProto.is_symbolic_link)
  return is_symbolic_link_;
}
inline void PlatformFileInfoProto::set_is_symbolic_link(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_symbolic_link_ = value;
  // @@protoc_insertion_point(field_set:drive.PlatformFileInfoProto.is_symbolic_link)
}

// optional int64 last_modified = 4;
inline bool PlatformFileInfoProto::has_last_modified() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlatformFileInfoProto::clear_last_modified() {
  last_modified_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlatformFileInfoProto::last_modified() const {
  // @@protoc_insertion_point(field_get:drive.PlatformFileInfoProto.last_modified)
  return last_modified_;
}
inline void PlatformFileInfoProto::set_last_modified(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  last_modified_ = value;
  // @@protoc_insertion_point(field_set:drive.PlatformFileInfoProto.last_modified)
}

// optional int64 last_accessed = 5;
inline bool PlatformFileInfoProto::has_last_accessed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlatformFileInfoProto::clear_last_accessed() {
  last_accessed_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlatformFileInfoProto::last_accessed() const {
  // @@protoc_insertion_point(field_get:drive.PlatformFileInfoProto.last_accessed)
  return last_accessed_;
}
inline void PlatformFileInfoProto::set_last_accessed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  last_accessed_ = value;
  // @@protoc_insertion_point(field_set:drive.PlatformFileInfoProto.last_accessed)
}

// optional int64 creation_time = 6;
inline bool PlatformFileInfoProto::has_creation_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlatformFileInfoProto::clear_creation_time() {
  creation_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlatformFileInfoProto::creation_time() const {
  // @@protoc_insertion_point(field_get:drive.PlatformFileInfoProto.creation_time)
  return creation_time_;
}
inline void PlatformFileInfoProto::set_creation_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  creation_time_ = value;
  // @@protoc_insertion_point(field_set:drive.PlatformFileInfoProto.creation_time)
}

// optional bool is_team_drive_root = 7;
inline bool PlatformFileInfoProto::has_is_team_drive_root() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlatformFileInfoProto::clear_is_team_drive_root() {
  is_team_drive_root_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool PlatformFileInfoProto::is_team_drive_root() const {
  // @@protoc_insertion_point(field_get:drive.PlatformFileInfoProto.is_team_drive_root)
  return is_team_drive_root_;
}
inline void PlatformFileInfoProto::set_is_team_drive_root(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_team_drive_root_ = value;
  // @@protoc_insertion_point(field_set:drive.PlatformFileInfoProto.is_team_drive_root)
}

// -------------------------------------------------------------------

// Property

// optional string key = 1;
inline bool Property::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Property::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Property::key() const {
  // @@protoc_insertion_point(field_get:drive.Property.key)
  return key_.GetNoArena();
}
inline void Property::set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:drive.Property.key)
}
inline void Property::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:drive.Property.key)
}
inline void Property::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:drive.Property.key)
}
inline void Property::set_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:drive.Property.key)
}
inline std::string* Property::mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:drive.Property.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Property::release_key() {
  // @@protoc_insertion_point(field_release:drive.Property.key)
  if (!has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Property::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:drive.Property.key)
}

// optional string value = 2;
inline bool Property::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Property::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Property::value() const {
  // @@protoc_insertion_point(field_get:drive.Property.value)
  return value_.GetNoArena();
}
inline void Property::set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:drive.Property.value)
}
inline void Property::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:drive.Property.value)
}
inline void Property::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:drive.Property.value)
}
inline void Property::set_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:drive.Property.value)
}
inline std::string* Property::mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:drive.Property.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Property::release_value() {
  // @@protoc_insertion_point(field_release:drive.Property.value)
  if (!has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Property::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:drive.Property.value)
}

// optional .drive.Property.Visibility visibility = 3;
inline bool Property::has_visibility() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Property::clear_visibility() {
  visibility_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::drive::Property_Visibility Property::visibility() const {
  // @@protoc_insertion_point(field_get:drive.Property.visibility)
  return static_cast< ::drive::Property_Visibility >(visibility_);
}
inline void Property::set_visibility(::drive::Property_Visibility value) {
  assert(::drive::Property_Visibility_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  visibility_ = value;
  // @@protoc_insertion_point(field_set:drive.Property.visibility)
}

// -------------------------------------------------------------------

// CapabilitiesInfo

// optional bool can_copy = 1;
inline bool CapabilitiesInfo::has_can_copy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CapabilitiesInfo::clear_can_copy() {
  can_copy_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CapabilitiesInfo::can_copy() const {
  // @@protoc_insertion_point(field_get:drive.CapabilitiesInfo.can_copy)
  return can_copy_;
}
inline void CapabilitiesInfo::set_can_copy(bool value) {
  _has_bits_[0] |= 0x00000001u;
  can_copy_ = value;
  // @@protoc_insertion_point(field_set:drive.CapabilitiesInfo.can_copy)
}

// optional bool can_delete = 2;
inline bool CapabilitiesInfo::has_can_delete() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CapabilitiesInfo::clear_can_delete() {
  can_delete_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CapabilitiesInfo::can_delete() const {
  // @@protoc_insertion_point(field_get:drive.CapabilitiesInfo.can_delete)
  return can_delete_;
}
inline void CapabilitiesInfo::set_can_delete(bool value) {
  _has_bits_[0] |= 0x00000002u;
  can_delete_ = value;
  // @@protoc_insertion_point(field_set:drive.CapabilitiesInfo.can_delete)
}

// optional bool can_rename = 3;
inline bool CapabilitiesInfo::has_can_rename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CapabilitiesInfo::clear_can_rename() {
  can_rename_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CapabilitiesInfo::can_rename() const {
  // @@protoc_insertion_point(field_get:drive.CapabilitiesInfo.can_rename)
  return can_rename_;
}
inline void CapabilitiesInfo::set_can_rename(bool value) {
  _has_bits_[0] |= 0x00000004u;
  can_rename_ = value;
  // @@protoc_insertion_point(field_set:drive.CapabilitiesInfo.can_rename)
}

// optional bool can_add_children = 4;
inline bool CapabilitiesInfo::has_can_add_children() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CapabilitiesInfo::clear_can_add_children() {
  can_add_children_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CapabilitiesInfo::can_add_children() const {
  // @@protoc_insertion_point(field_get:drive.CapabilitiesInfo.can_add_children)
  return can_add_children_;
}
inline void CapabilitiesInfo::set_can_add_children(bool value) {
  _has_bits_[0] |= 0x00000008u;
  can_add_children_ = value;
  // @@protoc_insertion_point(field_set:drive.CapabilitiesInfo.can_add_children)
}

// optional bool can_share = 5;
inline bool CapabilitiesInfo::has_can_share() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CapabilitiesInfo::clear_can_share() {
  can_share_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CapabilitiesInfo::can_share() const {
  // @@protoc_insertion_point(field_get:drive.CapabilitiesInfo.can_share)
  return can_share_;
}
inline void CapabilitiesInfo::set_can_share(bool value) {
  _has_bits_[0] |= 0x00000010u;
  can_share_ = value;
  // @@protoc_insertion_point(field_set:drive.CapabilitiesInfo.can_share)
}

// -------------------------------------------------------------------

// FileSpecificInfo

// optional string content_mime_type = 3;
inline bool FileSpecificInfo::has_content_mime_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileSpecificInfo::clear_content_mime_type() {
  content_mime_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileSpecificInfo::content_mime_type() const {
  // @@protoc_insertion_point(field_get:drive.FileSpecificInfo.content_mime_type)
  return content_mime_type_.GetNoArena();
}
inline void FileSpecificInfo::set_content_mime_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  content_mime_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:drive.FileSpecificInfo.content_mime_type)
}
inline void FileSpecificInfo::set_content_mime_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  content_mime_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:drive.FileSpecificInfo.content_mime_type)
}
inline void FileSpecificInfo::set_content_mime_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  content_mime_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:drive.FileSpecificInfo.content_mime_type)
}
inline void FileSpecificInfo::set_content_mime_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  content_mime_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:drive.FileSpecificInfo.content_mime_type)
}
inline std::string* FileSpecificInfo::mutable_content_mime_type() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:drive.FileSpecificInfo.content_mime_type)
  return content_mime_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileSpecificInfo::release_content_mime_type() {
  // @@protoc_insertion_point(field_release:drive.FileSpecificInfo.content_mime_type)
  if (!has_content_mime_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return content_mime_type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileSpecificInfo::set_allocated_content_mime_type(std::string* content_mime_type) {
  if (content_mime_type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  content_mime_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content_mime_type);
  // @@protoc_insertion_point(field_set_allocated:drive.FileSpecificInfo.content_mime_type)
}

// optional string md5 = 4;
inline bool FileSpecificInfo::has_md5() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileSpecificInfo::clear_md5() {
  md5_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FileSpecificInfo::md5() const {
  // @@protoc_insertion_point(field_get:drive.FileSpecificInfo.md5)
  return md5_.GetNoArena();
}
inline void FileSpecificInfo::set_md5(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  md5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:drive.FileSpecificInfo.md5)
}
inline void FileSpecificInfo::set_md5(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  md5_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:drive.FileSpecificInfo.md5)
}
inline void FileSpecificInfo::set_md5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  md5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:drive.FileSpecificInfo.md5)
}
inline void FileSpecificInfo::set_md5(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  md5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:drive.FileSpecificInfo.md5)
}
inline std::string* FileSpecificInfo::mutable_md5() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:drive.FileSpecificInfo.md5)
  return md5_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileSpecificInfo::release_md5() {
  // @@protoc_insertion_point(field_release:drive.FileSpecificInfo.md5)
  if (!has_md5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return md5_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileSpecificInfo::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  md5_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:drive.FileSpecificInfo.md5)
}

// optional string document_extension = 5;
inline bool FileSpecificInfo::has_document_extension() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileSpecificInfo::clear_document_extension() {
  document_extension_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FileSpecificInfo::document_extension() const {
  // @@protoc_insertion_point(field_get:drive.FileSpecificInfo.document_extension)
  return document_extension_.GetNoArena();
}
inline void FileSpecificInfo::set_document_extension(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  document_extension_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:drive.FileSpecificInfo.document_extension)
}
inline void FileSpecificInfo::set_document_extension(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  document_extension_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:drive.FileSpecificInfo.document_extension)
}
inline void FileSpecificInfo::set_document_extension(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  document_extension_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:drive.FileSpecificInfo.document_extension)
}
inline void FileSpecificInfo::set_document_extension(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  document_extension_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:drive.FileSpecificInfo.document_extension)
}
inline std::string* FileSpecificInfo::mutable_document_extension() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:drive.FileSpecificInfo.document_extension)
  return document_extension_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileSpecificInfo::release_document_extension() {
  // @@protoc_insertion_point(field_release:drive.FileSpecificInfo.document_extension)
  if (!has_document_extension()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return document_extension_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileSpecificInfo::set_allocated_document_extension(std::string* document_extension) {
  if (document_extension != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  document_extension_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), document_extension);
  // @@protoc_insertion_point(field_set_allocated:drive.FileSpecificInfo.document_extension)
}

// optional bool is_hosted_document = 6;
inline bool FileSpecificInfo::has_is_hosted_document() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FileSpecificInfo::clear_is_hosted_document() {
  is_hosted_document_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool FileSpecificInfo::is_hosted_document() const {
  // @@protoc_insertion_point(field_get:drive.FileSpecificInfo.is_hosted_document)
  return is_hosted_document_;
}
inline void FileSpecificInfo::set_is_hosted_document(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_hosted_document_ = value;
  // @@protoc_insertion_point(field_set:drive.FileSpecificInfo.is_hosted_document)
}

// optional int64 image_width = 8;
inline bool FileSpecificInfo::has_image_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FileSpecificInfo::clear_image_width() {
  image_width_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FileSpecificInfo::image_width() const {
  // @@protoc_insertion_point(field_get:drive.FileSpecificInfo.image_width)
  return image_width_;
}
inline void FileSpecificInfo::set_image_width(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  image_width_ = value;
  // @@protoc_insertion_point(field_set:drive.FileSpecificInfo.image_width)
}

// optional int64 image_height = 9;
inline bool FileSpecificInfo::has_image_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FileSpecificInfo::clear_image_height() {
  image_height_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FileSpecificInfo::image_height() const {
  // @@protoc_insertion_point(field_get:drive.FileSpecificInfo.image_height)
  return image_height_;
}
inline void FileSpecificInfo::set_image_height(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  image_height_ = value;
  // @@protoc_insertion_point(field_set:drive.FileSpecificInfo.image_height)
}

// optional int64 image_rotation = 10;
inline bool FileSpecificInfo::has_image_rotation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FileSpecificInfo::clear_image_rotation() {
  image_rotation_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FileSpecificInfo::image_rotation() const {
  // @@protoc_insertion_point(field_get:drive.FileSpecificInfo.image_rotation)
  return image_rotation_;
}
inline void FileSpecificInfo::set_image_rotation(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  image_rotation_ = value;
  // @@protoc_insertion_point(field_set:drive.FileSpecificInfo.image_rotation)
}

// optional .drive.FileCacheEntry cache_state = 11;
inline bool FileSpecificInfo::has_cache_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FileSpecificInfo::clear_cache_state() {
  if (cache_state_ != nullptr) cache_state_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::drive::FileCacheEntry& FileSpecificInfo::cache_state() const {
  const ::drive::FileCacheEntry* p = cache_state_;
  // @@protoc_insertion_point(field_get:drive.FileSpecificInfo.cache_state)
  return p != nullptr ? *p : *reinterpret_cast<const ::drive::FileCacheEntry*>(
      &::drive::_FileCacheEntry_default_instance_);
}
inline ::drive::FileCacheEntry* FileSpecificInfo::release_cache_state() {
  // @@protoc_insertion_point(field_release:drive.FileSpecificInfo.cache_state)
  _has_bits_[0] &= ~0x00000008u;
  ::drive::FileCacheEntry* temp = cache_state_;
  cache_state_ = nullptr;
  return temp;
}
inline ::drive::FileCacheEntry* FileSpecificInfo::mutable_cache_state() {
  _has_bits_[0] |= 0x00000008u;
  if (cache_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::drive::FileCacheEntry>(GetArenaNoVirtual());
    cache_state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:drive.FileSpecificInfo.cache_state)
  return cache_state_;
}
inline void FileSpecificInfo::set_allocated_cache_state(::drive::FileCacheEntry* cache_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cache_state_;
  }
  if (cache_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cache_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cache_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  cache_state_ = cache_state;
  // @@protoc_insertion_point(field_set_allocated:drive.FileSpecificInfo.cache_state)
}

// -------------------------------------------------------------------

// TeamDriveRootSpecificInfo

// optional string start_page_token = 1;
inline bool TeamDriveRootSpecificInfo::has_start_page_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamDriveRootSpecificInfo::clear_start_page_token() {
  start_page_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TeamDriveRootSpecificInfo::start_page_token() const {
  // @@protoc_insertion_point(field_get:drive.TeamDriveRootSpecificInfo.start_page_token)
  return start_page_token_.GetNoArena();
}
inline void TeamDriveRootSpecificInfo::set_start_page_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  start_page_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:drive.TeamDriveRootSpecificInfo.start_page_token)
}
inline void TeamDriveRootSpecificInfo::set_start_page_token(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  start_page_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:drive.TeamDriveRootSpecificInfo.start_page_token)
}
inline void TeamDriveRootSpecificInfo::set_start_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  start_page_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:drive.TeamDriveRootSpecificInfo.start_page_token)
}
inline void TeamDriveRootSpecificInfo::set_start_page_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  start_page_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:drive.TeamDriveRootSpecificInfo.start_page_token)
}
inline std::string* TeamDriveRootSpecificInfo::mutable_start_page_token() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:drive.TeamDriveRootSpecificInfo.start_page_token)
  return start_page_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TeamDriveRootSpecificInfo::release_start_page_token() {
  // @@protoc_insertion_point(field_release:drive.TeamDriveRootSpecificInfo.start_page_token)
  if (!has_start_page_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return start_page_token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TeamDriveRootSpecificInfo::set_allocated_start_page_token(std::string* start_page_token) {
  if (start_page_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  start_page_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_page_token);
  // @@protoc_insertion_point(field_set_allocated:drive.TeamDriveRootSpecificInfo.start_page_token)
}

// -------------------------------------------------------------------

// DirectorySpecificInfo

// optional int64 changestamp = 1 [deprecated = true];
inline bool DirectorySpecificInfo::has_changestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DirectorySpecificInfo::clear_changestamp() {
  changestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DirectorySpecificInfo::changestamp() const {
  // @@protoc_insertion_point(field_get:drive.DirectorySpecificInfo.changestamp)
  return changestamp_;
}
inline void DirectorySpecificInfo::set_changestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  changestamp_ = value;
  // @@protoc_insertion_point(field_set:drive.DirectorySpecificInfo.changestamp)
}

// optional string start_page_token = 2;
inline bool DirectorySpecificInfo::has_start_page_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DirectorySpecificInfo::clear_start_page_token() {
  start_page_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DirectorySpecificInfo::start_page_token() const {
  // @@protoc_insertion_point(field_get:drive.DirectorySpecificInfo.start_page_token)
  return start_page_token_.GetNoArena();
}
inline void DirectorySpecificInfo::set_start_page_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  start_page_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:drive.DirectorySpecificInfo.start_page_token)
}
inline void DirectorySpecificInfo::set_start_page_token(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  start_page_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:drive.DirectorySpecificInfo.start_page_token)
}
inline void DirectorySpecificInfo::set_start_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  start_page_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:drive.DirectorySpecificInfo.start_page_token)
}
inline void DirectorySpecificInfo::set_start_page_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  start_page_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:drive.DirectorySpecificInfo.start_page_token)
}
inline std::string* DirectorySpecificInfo::mutable_start_page_token() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:drive.DirectorySpecificInfo.start_page_token)
  return start_page_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DirectorySpecificInfo::release_start_page_token() {
  // @@protoc_insertion_point(field_release:drive.DirectorySpecificInfo.start_page_token)
  if (!has_start_page_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return start_page_token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DirectorySpecificInfo::set_allocated_start_page_token(std::string* start_page_token) {
  if (start_page_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  start_page_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_page_token);
  // @@protoc_insertion_point(field_set_allocated:drive.DirectorySpecificInfo.start_page_token)
}

// optional int64 last_read_time_ms = 3;
inline bool DirectorySpecificInfo::has_last_read_time_ms() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DirectorySpecificInfo::clear_last_read_time_ms() {
  last_read_time_ms_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DirectorySpecificInfo::last_read_time_ms() const {
  // @@protoc_insertion_point(field_get:drive.DirectorySpecificInfo.last_read_time_ms)
  return last_read_time_ms_;
}
inline void DirectorySpecificInfo::set_last_read_time_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  last_read_time_ms_ = value;
  // @@protoc_insertion_point(field_set:drive.DirectorySpecificInfo.last_read_time_ms)
}

// -------------------------------------------------------------------

// ResourceEntry

// optional .drive.PlatformFileInfoProto file_info = 1;
inline bool ResourceEntry::has_file_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ResourceEntry::clear_file_info() {
  if (file_info_ != nullptr) file_info_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::drive::PlatformFileInfoProto& ResourceEntry::file_info() const {
  const ::drive::PlatformFileInfoProto* p = file_info_;
  // @@protoc_insertion_point(field_get:drive.ResourceEntry.file_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::drive::PlatformFileInfoProto*>(
      &::drive::_PlatformFileInfoProto_default_instance_);
}
inline ::drive::PlatformFileInfoProto* ResourceEntry::release_file_info() {
  // @@protoc_insertion_point(field_release:drive.ResourceEntry.file_info)
  _has_bits_[0] &= ~0x00000040u;
  ::drive::PlatformFileInfoProto* temp = file_info_;
  file_info_ = nullptr;
  return temp;
}
inline ::drive::PlatformFileInfoProto* ResourceEntry::mutable_file_info() {
  _has_bits_[0] |= 0x00000040u;
  if (file_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::drive::PlatformFileInfoProto>(GetArenaNoVirtual());
    file_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:drive.ResourceEntry.file_info)
  return file_info_;
}
inline void ResourceEntry::set_allocated_file_info(::drive::PlatformFileInfoProto* file_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete file_info_;
  }
  if (file_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      file_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  file_info_ = file_info;
  // @@protoc_insertion_point(field_set_allocated:drive.ResourceEntry.file_info)
}

// optional string base_name = 2;
inline bool ResourceEntry::has_base_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResourceEntry::clear_base_name() {
  base_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResourceEntry::base_name() const {
  // @@protoc_insertion_point(field_get:drive.ResourceEntry.base_name)
  return base_name_.GetNoArena();
}
inline void ResourceEntry::set_base_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  base_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:drive.ResourceEntry.base_name)
}
inline void ResourceEntry::set_base_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  base_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:drive.ResourceEntry.base_name)
}
inline void ResourceEntry::set_base_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  base_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:drive.ResourceEntry.base_name)
}
inline void ResourceEntry::set_base_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  base_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:drive.ResourceEntry.base_name)
}
inline std::string* ResourceEntry::mutable_base_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:drive.ResourceEntry.base_name)
  return base_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResourceEntry::release_base_name() {
  // @@protoc_insertion_point(field_release:drive.ResourceEntry.base_name)
  if (!has_base_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return base_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceEntry::set_allocated_base_name(std::string* base_name) {
  if (base_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  base_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base_name);
  // @@protoc_insertion_point(field_set_allocated:drive.ResourceEntry.base_name)
}

// optional string title = 3;
inline bool ResourceEntry::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResourceEntry::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ResourceEntry::title() const {
  // @@protoc_insertion_point(field_get:drive.ResourceEntry.title)
  return title_.GetNoArena();
}
inline void ResourceEntry::set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:drive.ResourceEntry.title)
}
inline void ResourceEntry::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:drive.ResourceEntry.title)
}
inline void ResourceEntry::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:drive.ResourceEntry.title)
}
inline void ResourceEntry::set_title(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:drive.ResourceEntry.title)
}
inline std::string* ResourceEntry::mutable_title() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:drive.ResourceEntry.title)
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResourceEntry::release_title() {
  // @@protoc_insertion_point(field_release:drive.ResourceEntry.title)
  if (!has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return title_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceEntry::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:drive.ResourceEntry.title)
}

// optional string resource_id = 4;
inline bool ResourceEntry::has_resource_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResourceEntry::clear_resource_id() {
  resource_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ResourceEntry::resource_id() const {
  // @@protoc_insertion_point(field_get:drive.ResourceEntry.resource_id)
  return resource_id_.GetNoArena();
}
inline void ResourceEntry::set_resource_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  resource_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:drive.ResourceEntry.resource_id)
}
inline void ResourceEntry::set_resource_id(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  resource_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:drive.ResourceEntry.resource_id)
}
inline void ResourceEntry::set_resource_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  resource_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:drive.ResourceEntry.resource_id)
}
inline void ResourceEntry::set_resource_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  resource_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:drive.ResourceEntry.resource_id)
}
inline std::string* ResourceEntry::mutable_resource_id() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:drive.ResourceEntry.resource_id)
  return resource_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResourceEntry::release_resource_id() {
  // @@protoc_insertion_point(field_release:drive.ResourceEntry.resource_id)
  if (!has_resource_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return resource_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceEntry::set_allocated_resource_id(std::string* resource_id) {
  if (resource_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  resource_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resource_id);
  // @@protoc_insertion_point(field_set_allocated:drive.ResourceEntry.resource_id)
}

// optional string local_id = 15;
inline bool ResourceEntry::has_local_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResourceEntry::clear_local_id() {
  local_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ResourceEntry::local_id() const {
  // @@protoc_insertion_point(field_get:drive.ResourceEntry.local_id)
  return local_id_.GetNoArena();
}
inline void ResourceEntry::set_local_id(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  local_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:drive.ResourceEntry.local_id)
}
inline void ResourceEntry::set_local_id(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  local_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:drive.ResourceEntry.local_id)
}
inline void ResourceEntry::set_local_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  local_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:drive.ResourceEntry.local_id)
}
inline void ResourceEntry::set_local_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  local_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:drive.ResourceEntry.local_id)
}
inline std::string* ResourceEntry::mutable_local_id() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:drive.ResourceEntry.local_id)
  return local_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResourceEntry::release_local_id() {
  // @@protoc_insertion_point(field_release:drive.ResourceEntry.local_id)
  if (!has_local_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return local_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceEntry::set_allocated_local_id(std::string* local_id) {
  if (local_id != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  local_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_id);
  // @@protoc_insertion_point(field_set_allocated:drive.ResourceEntry.local_id)
}

// optional string parent_local_id = 7;
inline bool ResourceEntry::has_parent_local_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResourceEntry::clear_parent_local_id() {
  parent_local_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ResourceEntry::parent_local_id() const {
  // @@protoc_insertion_point(field_get:drive.ResourceEntry.parent_local_id)
  return parent_local_id_.GetNoArena();
}
inline void ResourceEntry::set_parent_local_id(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  parent_local_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:drive.ResourceEntry.parent_local_id)
}
inline void ResourceEntry::set_parent_local_id(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  parent_local_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:drive.ResourceEntry.parent_local_id)
}
inline void ResourceEntry::set_parent_local_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  parent_local_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:drive.ResourceEntry.parent_local_id)
}
inline void ResourceEntry::set_parent_local_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  parent_local_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:drive.ResourceEntry.parent_local_id)
}
inline std::string* ResourceEntry::mutable_parent_local_id() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:drive.ResourceEntry.parent_local_id)
  return parent_local_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResourceEntry::release_parent_local_id() {
  // @@protoc_insertion_point(field_release:drive.ResourceEntry.parent_local_id)
  if (!has_parent_local_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return parent_local_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceEntry::set_allocated_parent_local_id(std::string* parent_local_id) {
  if (parent_local_id != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  parent_local_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent_local_id);
  // @@protoc_insertion_point(field_set_allocated:drive.ResourceEntry.parent_local_id)
}

// optional bool deleted = 11;
inline bool ResourceEntry::has_deleted() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ResourceEntry::clear_deleted() {
  deleted_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool ResourceEntry::deleted() const {
  // @@protoc_insertion_point(field_get:drive.ResourceEntry.deleted)
  return deleted_;
}
inline void ResourceEntry::set_deleted(bool value) {
  _has_bits_[0] |= 0x00000800u;
  deleted_ = value;
  // @@protoc_insertion_point(field_set:drive.ResourceEntry.deleted)
}

// optional bool starred = 20;
inline bool ResourceEntry::has_starred() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ResourceEntry::clear_starred() {
  starred_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool ResourceEntry::starred() const {
  // @@protoc_insertion_point(field_get:drive.ResourceEntry.starred)
  return starred_;
}
inline void ResourceEntry::set_starred(bool value) {
  _has_bits_[0] |= 0x00001000u;
  starred_ = value;
  // @@protoc_insertion_point(field_set:drive.ResourceEntry.starred)
}

// optional bool shared_with_me = 14;
inline bool ResourceEntry::has_shared_with_me() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ResourceEntry::clear_shared_with_me() {
  shared_with_me_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool ResourceEntry::shared_with_me() const {
  // @@protoc_insertion_point(field_get:drive.ResourceEntry.shared_with_me)
  return shared_with_me_;
}
inline void ResourceEntry::set_shared_with_me(bool value) {
  _has_bits_[0] |= 0x00002000u;
  shared_with_me_ = value;
  // @@protoc_insertion_point(field_set:drive.ResourceEntry.shared_with_me)
}

// optional bool shared = 17;
inline bool ResourceEntry::has_shared() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ResourceEntry::clear_shared() {
  shared_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool ResourceEntry::shared() const {
  // @@protoc_insertion_point(field_get:drive.ResourceEntry.shared)
  return shared_;
}
inline void ResourceEntry::set_shared(bool value) {
  _has_bits_[0] |= 0x00004000u;
  shared_ = value;
  // @@protoc_insertion_point(field_set:drive.ResourceEntry.shared)
}

// optional .drive.CapabilitiesInfo capabilities_info = 24;
inline bool ResourceEntry::has_capabilities_info() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ResourceEntry::clear_capabilities_info() {
  if (capabilities_info_ != nullptr) capabilities_info_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::drive::CapabilitiesInfo& ResourceEntry::capabilities_info() const {
  const ::drive::CapabilitiesInfo* p = capabilities_info_;
  // @@protoc_insertion_point(field_get:drive.ResourceEntry.capabilities_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::drive::CapabilitiesInfo*>(
      &::drive::_CapabilitiesInfo_default_instance_);
}
inline ::drive::CapabilitiesInfo* ResourceEntry::release_capabilities_info() {
  // @@protoc_insertion_point(field_release:drive.ResourceEntry.capabilities_info)
  _has_bits_[0] &= ~0x00000400u;
  ::drive::CapabilitiesInfo* temp = capabilities_info_;
  capabilities_info_ = nullptr;
  return temp;
}
inline ::drive::CapabilitiesInfo* ResourceEntry::mutable_capabilities_info() {
  _has_bits_[0] |= 0x00000400u;
  if (capabilities_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::drive::CapabilitiesInfo>(GetArenaNoVirtual());
    capabilities_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:drive.ResourceEntry.capabilities_info)
  return capabilities_info_;
}
inline void ResourceEntry::set_allocated_capabilities_info(::drive::CapabilitiesInfo* capabilities_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete capabilities_info_;
  }
  if (capabilities_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      capabilities_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capabilities_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  capabilities_info_ = capabilities_info;
  // @@protoc_insertion_point(field_set_allocated:drive.ResourceEntry.capabilities_info)
}

// optional .drive.FileSpecificInfo file_specific_info = 9;
inline bool ResourceEntry::has_file_specific_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ResourceEntry::clear_file_specific_info() {
  if (file_specific_info_ != nullptr) file_specific_info_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::drive::FileSpecificInfo& ResourceEntry::file_specific_info() const {
  const ::drive::FileSpecificInfo* p = file_specific_info_;
  // @@protoc_insertion_point(field_get:drive.ResourceEntry.file_specific_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::drive::FileSpecificInfo*>(
      &::drive::_FileSpecificInfo_default_instance_);
}
inline ::drive::FileSpecificInfo* ResourceEntry::release_file_specific_info() {
  // @@protoc_insertion_point(field_release:drive.ResourceEntry.file_specific_info)
  _has_bits_[0] &= ~0x00000080u;
  ::drive::FileSpecificInfo* temp = file_specific_info_;
  file_specific_info_ = nullptr;
  return temp;
}
inline ::drive::FileSpecificInfo* ResourceEntry::mutable_file_specific_info() {
  _has_bits_[0] |= 0x00000080u;
  if (file_specific_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::drive::FileSpecificInfo>(GetArenaNoVirtual());
    file_specific_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:drive.ResourceEntry.file_specific_info)
  return file_specific_info_;
}
inline void ResourceEntry::set_allocated_file_specific_info(::drive::FileSpecificInfo* file_specific_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete file_specific_info_;
  }
  if (file_specific_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      file_specific_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file_specific_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  file_specific_info_ = file_specific_info;
  // @@protoc_insertion_point(field_set_allocated:drive.ResourceEntry.file_specific_info)
}

// optional .drive.DirectorySpecificInfo directory_specific_info = 13;
inline bool ResourceEntry::has_directory_specific_info() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ResourceEntry::clear_directory_specific_info() {
  if (directory_specific_info_ != nullptr) directory_specific_info_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::drive::DirectorySpecificInfo& ResourceEntry::directory_specific_info() const {
  const ::drive::DirectorySpecificInfo* p = directory_specific_info_;
  // @@protoc_insertion_point(field_get:drive.ResourceEntry.directory_specific_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::drive::DirectorySpecificInfo*>(
      &::drive::_DirectorySpecificInfo_default_instance_);
}
inline ::drive::DirectorySpecificInfo* ResourceEntry::release_directory_specific_info() {
  // @@protoc_insertion_point(field_release:drive.ResourceEntry.directory_specific_info)
  _has_bits_[0] &= ~0x00000100u;
  ::drive::DirectorySpecificInfo* temp = directory_specific_info_;
  directory_specific_info_ = nullptr;
  return temp;
}
inline ::drive::DirectorySpecificInfo* ResourceEntry::mutable_directory_specific_info() {
  _has_bits_[0] |= 0x00000100u;
  if (directory_specific_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::drive::DirectorySpecificInfo>(GetArenaNoVirtual());
    directory_specific_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:drive.ResourceEntry.directory_specific_info)
  return directory_specific_info_;
}
inline void ResourceEntry::set_allocated_directory_specific_info(::drive::DirectorySpecificInfo* directory_specific_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete directory_specific_info_;
  }
  if (directory_specific_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      directory_specific_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, directory_specific_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  directory_specific_info_ = directory_specific_info;
  // @@protoc_insertion_point(field_set_allocated:drive.ResourceEntry.directory_specific_info)
}

// optional .drive.TeamDriveRootSpecificInfo team_drive_root_specific_info = 23;
inline bool ResourceEntry::has_team_drive_root_specific_info() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ResourceEntry::clear_team_drive_root_specific_info() {
  if (team_drive_root_specific_info_ != nullptr) team_drive_root_specific_info_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::drive::TeamDriveRootSpecificInfo& ResourceEntry::team_drive_root_specific_info() const {
  const ::drive::TeamDriveRootSpecificInfo* p = team_drive_root_specific_info_;
  // @@protoc_insertion_point(field_get:drive.ResourceEntry.team_drive_root_specific_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::drive::TeamDriveRootSpecificInfo*>(
      &::drive::_TeamDriveRootSpecificInfo_default_instance_);
}
inline ::drive::TeamDriveRootSpecificInfo* ResourceEntry::release_team_drive_root_specific_info() {
  // @@protoc_insertion_point(field_release:drive.ResourceEntry.team_drive_root_specific_info)
  _has_bits_[0] &= ~0x00000200u;
  ::drive::TeamDriveRootSpecificInfo* temp = team_drive_root_specific_info_;
  team_drive_root_specific_info_ = nullptr;
  return temp;
}
inline ::drive::TeamDriveRootSpecificInfo* ResourceEntry::mutable_team_drive_root_specific_info() {
  _has_bits_[0] |= 0x00000200u;
  if (team_drive_root_specific_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::drive::TeamDriveRootSpecificInfo>(GetArenaNoVirtual());
    team_drive_root_specific_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:drive.ResourceEntry.team_drive_root_specific_info)
  return team_drive_root_specific_info_;
}
inline void ResourceEntry::set_allocated_team_drive_root_specific_info(::drive::TeamDriveRootSpecificInfo* team_drive_root_specific_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete team_drive_root_specific_info_;
  }
  if (team_drive_root_specific_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      team_drive_root_specific_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, team_drive_root_specific_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  team_drive_root_specific_info_ = team_drive_root_specific_info;
  // @@protoc_insertion_point(field_set_allocated:drive.ResourceEntry.team_drive_root_specific_info)
}

// optional .drive.ResourceEntry.EditState metadata_edit_state = 16;
inline bool ResourceEntry::has_metadata_edit_state() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ResourceEntry::clear_metadata_edit_state() {
  metadata_edit_state_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::drive::ResourceEntry_EditState ResourceEntry::metadata_edit_state() const {
  // @@protoc_insertion_point(field_get:drive.ResourceEntry.metadata_edit_state)
  return static_cast< ::drive::ResourceEntry_EditState >(metadata_edit_state_);
}
inline void ResourceEntry::set_metadata_edit_state(::drive::ResourceEntry_EditState value) {
  assert(::drive::ResourceEntry_EditState_IsValid(value));
  _has_bits_[0] |= 0x00008000u;
  metadata_edit_state_ = value;
  // @@protoc_insertion_point(field_set:drive.ResourceEntry.metadata_edit_state)
}

// optional int64 modification_date = 18;
inline bool ResourceEntry::has_modification_date() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ResourceEntry::clear_modification_date() {
  modification_date_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResourceEntry::modification_date() const {
  // @@protoc_insertion_point(field_get:drive.ResourceEntry.modification_date)
  return modification_date_;
}
inline void ResourceEntry::set_modification_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00010000u;
  modification_date_ = value;
  // @@protoc_insertion_point(field_set:drive.ResourceEntry.modification_date)
}

// repeated .drive.Property new_properties = 19;
inline int ResourceEntry::new_properties_size() const {
  return new_properties_.size();
}
inline void ResourceEntry::clear_new_properties() {
  new_properties_.Clear();
}
inline ::drive::Property* ResourceEntry::mutable_new_properties(int index) {
  // @@protoc_insertion_point(field_mutable:drive.ResourceEntry.new_properties)
  return new_properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::drive::Property >*
ResourceEntry::mutable_new_properties() {
  // @@protoc_insertion_point(field_mutable_list:drive.ResourceEntry.new_properties)
  return &new_properties_;
}
inline const ::drive::Property& ResourceEntry::new_properties(int index) const {
  // @@protoc_insertion_point(field_get:drive.ResourceEntry.new_properties)
  return new_properties_.Get(index);
}
inline ::drive::Property* ResourceEntry::add_new_properties() {
  // @@protoc_insertion_point(field_add:drive.ResourceEntry.new_properties)
  return new_properties_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::drive::Property >&
ResourceEntry::new_properties() const {
  // @@protoc_insertion_point(field_list:drive.ResourceEntry.new_properties)
  return new_properties_;
}

// optional int64 last_modified_by_me = 21;
inline bool ResourceEntry::has_last_modified_by_me() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ResourceEntry::clear_last_modified_by_me() {
  last_modified_by_me_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResourceEntry::last_modified_by_me() const {
  // @@protoc_insertion_point(field_get:drive.ResourceEntry.last_modified_by_me)
  return last_modified_by_me_;
}
inline void ResourceEntry::set_last_modified_by_me(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00020000u;
  last_modified_by_me_ = value;
  // @@protoc_insertion_point(field_set:drive.ResourceEntry.last_modified_by_me)
}

// optional string alternate_url = 22;
inline bool ResourceEntry::has_alternate_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResourceEntry::clear_alternate_url() {
  alternate_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ResourceEntry::alternate_url() const {
  // @@protoc_insertion_point(field_get:drive.ResourceEntry.alternate_url)
  return alternate_url_.GetNoArena();
}
inline void ResourceEntry::set_alternate_url(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  alternate_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:drive.ResourceEntry.alternate_url)
}
inline void ResourceEntry::set_alternate_url(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  alternate_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:drive.ResourceEntry.alternate_url)
}
inline void ResourceEntry::set_alternate_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  alternate_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:drive.ResourceEntry.alternate_url)
}
inline void ResourceEntry::set_alternate_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  alternate_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:drive.ResourceEntry.alternate_url)
}
inline std::string* ResourceEntry::mutable_alternate_url() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:drive.ResourceEntry.alternate_url)
  return alternate_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResourceEntry::release_alternate_url() {
  // @@protoc_insertion_point(field_release:drive.ResourceEntry.alternate_url)
  if (!has_alternate_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return alternate_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceEntry::set_allocated_alternate_url(std::string* alternate_url) {
  if (alternate_url != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  alternate_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alternate_url);
  // @@protoc_insertion_point(field_set_allocated:drive.ResourceEntry.alternate_url)
}

// -------------------------------------------------------------------

// ResourceMetadataHeader

// optional int32 version = 1;
inline bool ResourceMetadataHeader::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResourceMetadataHeader::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResourceMetadataHeader::version() const {
  // @@protoc_insertion_point(field_get:drive.ResourceMetadataHeader.version)
  return version_;
}
inline void ResourceMetadataHeader::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  version_ = value;
  // @@protoc_insertion_point(field_set:drive.ResourceMetadataHeader.version)
}

// optional int64 largest_changestamp = 2 [deprecated = true];
inline bool ResourceMetadataHeader::has_largest_changestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResourceMetadataHeader::clear_largest_changestamp() {
  largest_changestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResourceMetadataHeader::largest_changestamp() const {
  // @@protoc_insertion_point(field_get:drive.ResourceMetadataHeader.largest_changestamp)
  return largest_changestamp_;
}
inline void ResourceMetadataHeader::set_largest_changestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  largest_changestamp_ = value;
  // @@protoc_insertion_point(field_set:drive.ResourceMetadataHeader.largest_changestamp)
}

// optional string start_page_token = 4;
inline bool ResourceMetadataHeader::has_start_page_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResourceMetadataHeader::clear_start_page_token() {
  start_page_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResourceMetadataHeader::start_page_token() const {
  // @@protoc_insertion_point(field_get:drive.ResourceMetadataHeader.start_page_token)
  return start_page_token_.GetNoArena();
}
inline void ResourceMetadataHeader::set_start_page_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  start_page_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:drive.ResourceMetadataHeader.start_page_token)
}
inline void ResourceMetadataHeader::set_start_page_token(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  start_page_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:drive.ResourceMetadataHeader.start_page_token)
}
inline void ResourceMetadataHeader::set_start_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  start_page_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:drive.ResourceMetadataHeader.start_page_token)
}
inline void ResourceMetadataHeader::set_start_page_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  start_page_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:drive.ResourceMetadataHeader.start_page_token)
}
inline std::string* ResourceMetadataHeader::mutable_start_page_token() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:drive.ResourceMetadataHeader.start_page_token)
  return start_page_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResourceMetadataHeader::release_start_page_token() {
  // @@protoc_insertion_point(field_release:drive.ResourceMetadataHeader.start_page_token)
  if (!has_start_page_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return start_page_token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceMetadataHeader::set_allocated_start_page_token(std::string* start_page_token) {
  if (start_page_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  start_page_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_page_token);
  // @@protoc_insertion_point(field_set_allocated:drive.ResourceMetadataHeader.start_page_token)
}

// -------------------------------------------------------------------

// FileCacheEntry

// optional string md5 = 1;
inline bool FileCacheEntry::has_md5() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileCacheEntry::clear_md5() {
  md5_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FileCacheEntry::md5() const {
  // @@protoc_insertion_point(field_get:drive.FileCacheEntry.md5)
  return md5_.GetNoArena();
}
inline void FileCacheEntry::set_md5(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  md5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:drive.FileCacheEntry.md5)
}
inline void FileCacheEntry::set_md5(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  md5_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:drive.FileCacheEntry.md5)
}
inline void FileCacheEntry::set_md5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  md5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:drive.FileCacheEntry.md5)
}
inline void FileCacheEntry::set_md5(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  md5_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:drive.FileCacheEntry.md5)
}
inline std::string* FileCacheEntry::mutable_md5() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:drive.FileCacheEntry.md5)
  return md5_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FileCacheEntry::release_md5() {
  // @@protoc_insertion_point(field_release:drive.FileCacheEntry.md5)
  if (!has_md5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return md5_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FileCacheEntry::set_allocated_md5(std::string* md5) {
  if (md5 != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  md5_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), md5);
  // @@protoc_insertion_point(field_set_allocated:drive.FileCacheEntry.md5)
}

// optional bool is_present = 2;
inline bool FileCacheEntry::has_is_present() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileCacheEntry::clear_is_present() {
  is_present_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool FileCacheEntry::is_present() const {
  // @@protoc_insertion_point(field_get:drive.FileCacheEntry.is_present)
  return is_present_;
}
inline void FileCacheEntry::set_is_present(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_present_ = value;
  // @@protoc_insertion_point(field_set:drive.FileCacheEntry.is_present)
}

// optional bool is_pinned = 3;
inline bool FileCacheEntry::has_is_pinned() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileCacheEntry::clear_is_pinned() {
  is_pinned_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool FileCacheEntry::is_pinned() const {
  // @@protoc_insertion_point(field_get:drive.FileCacheEntry.is_pinned)
  return is_pinned_;
}
inline void FileCacheEntry::set_is_pinned(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_pinned_ = value;
  // @@protoc_insertion_point(field_set:drive.FileCacheEntry.is_pinned)
}

// optional bool is_dirty = 4;
inline bool FileCacheEntry::has_is_dirty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FileCacheEntry::clear_is_dirty() {
  is_dirty_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool FileCacheEntry::is_dirty() const {
  // @@protoc_insertion_point(field_get:drive.FileCacheEntry.is_dirty)
  return is_dirty_;
}
inline void FileCacheEntry::set_is_dirty(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_dirty_ = value;
  // @@protoc_insertion_point(field_set:drive.FileCacheEntry.is_dirty)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace drive

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::drive::Property_Visibility> : ::std::true_type {};
template <> struct is_proto_enum< ::drive::ResourceEntry_EditState> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_drive_2eproto

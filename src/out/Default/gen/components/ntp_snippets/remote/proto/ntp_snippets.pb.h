// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ntp_snippets.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ntp_5fsnippets_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ntp_5fsnippets_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ntp_5fsnippets_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ntp_5fsnippets_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace ntp_snippets {
class SnippetImageProto;
class SnippetImageProtoDefaultTypeInternal;
extern SnippetImageProtoDefaultTypeInternal _SnippetImageProto_default_instance_;
class SnippetProto;
class SnippetProtoDefaultTypeInternal;
extern SnippetProtoDefaultTypeInternal _SnippetProto_default_instance_;
class SnippetSourceProto;
class SnippetSourceProtoDefaultTypeInternal;
extern SnippetSourceProtoDefaultTypeInternal _SnippetSourceProto_default_instance_;
}  // namespace ntp_snippets
PROTOBUF_NAMESPACE_OPEN
template<> ::ntp_snippets::SnippetImageProto* Arena::CreateMaybeMessage<::ntp_snippets::SnippetImageProto>(Arena*);
template<> ::ntp_snippets::SnippetProto* Arena::CreateMaybeMessage<::ntp_snippets::SnippetProto>(Arena*);
template<> ::ntp_snippets::SnippetSourceProto* Arena::CreateMaybeMessage<::ntp_snippets::SnippetSourceProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ntp_snippets {

enum SnippetProto_ContentType : int {
  SnippetProto_ContentType_UNKNOWN = 0,
  SnippetProto_ContentType_VIDEO = 1
};
bool SnippetProto_ContentType_IsValid(int value);
constexpr SnippetProto_ContentType SnippetProto_ContentType_ContentType_MIN = SnippetProto_ContentType_UNKNOWN;
constexpr SnippetProto_ContentType SnippetProto_ContentType_ContentType_MAX = SnippetProto_ContentType_VIDEO;
constexpr int SnippetProto_ContentType_ContentType_ARRAYSIZE = SnippetProto_ContentType_ContentType_MAX + 1;

const std::string& SnippetProto_ContentType_Name(SnippetProto_ContentType value);
template<typename T>
inline const std::string& SnippetProto_ContentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SnippetProto_ContentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SnippetProto_ContentType_Name.");
  return SnippetProto_ContentType_Name(static_cast<SnippetProto_ContentType>(enum_t_value));
}
bool SnippetProto_ContentType_Parse(
    const std::string& name, SnippetProto_ContentType* value);
// ===================================================================

class SnippetSourceProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ntp_snippets.SnippetSourceProto) */ {
 public:
  SnippetSourceProto();
  virtual ~SnippetSourceProto();

  SnippetSourceProto(const SnippetSourceProto& from);
  SnippetSourceProto(SnippetSourceProto&& from) noexcept
    : SnippetSourceProto() {
    *this = ::std::move(from);
  }

  inline SnippetSourceProto& operator=(const SnippetSourceProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnippetSourceProto& operator=(SnippetSourceProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SnippetSourceProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnippetSourceProto* internal_default_instance() {
    return reinterpret_cast<const SnippetSourceProto*>(
               &_SnippetSourceProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SnippetSourceProto& a, SnippetSourceProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SnippetSourceProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SnippetSourceProto* New() const final {
    return CreateMaybeMessage<SnippetSourceProto>(nullptr);
  }

  SnippetSourceProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnippetSourceProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SnippetSourceProto& from);
  void MergeFrom(const SnippetSourceProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SnippetSourceProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ntp_snippets.SnippetSourceProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kPublisherNameFieldNumber = 2,
    kAmpUrlFieldNumber = 3,
  };
  // optional string url = 1;
  bool has_url() const;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // optional string publisher_name = 2;
  bool has_publisher_name() const;
  void clear_publisher_name();
  const std::string& publisher_name() const;
  void set_publisher_name(const std::string& value);
  void set_publisher_name(std::string&& value);
  void set_publisher_name(const char* value);
  void set_publisher_name(const char* value, size_t size);
  std::string* mutable_publisher_name();
  std::string* release_publisher_name();
  void set_allocated_publisher_name(std::string* publisher_name);

  // optional string amp_url = 3;
  bool has_amp_url() const;
  void clear_amp_url();
  const std::string& amp_url() const;
  void set_amp_url(const std::string& value);
  void set_amp_url(std::string&& value);
  void set_amp_url(const char* value);
  void set_amp_url(const char* value, size_t size);
  std::string* mutable_amp_url();
  std::string* release_amp_url();
  void set_allocated_amp_url(std::string* amp_url);

  // @@protoc_insertion_point(class_scope:ntp_snippets.SnippetSourceProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publisher_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amp_url_;
  friend struct ::TableStruct_ntp_5fsnippets_2eproto;
};
// -------------------------------------------------------------------

class SnippetProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ntp_snippets.SnippetProto) */ {
 public:
  SnippetProto();
  virtual ~SnippetProto();

  SnippetProto(const SnippetProto& from);
  SnippetProto(SnippetProto&& from) noexcept
    : SnippetProto() {
    *this = ::std::move(from);
  }

  inline SnippetProto& operator=(const SnippetProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnippetProto& operator=(SnippetProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SnippetProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnippetProto* internal_default_instance() {
    return reinterpret_cast<const SnippetProto*>(
               &_SnippetProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SnippetProto& a, SnippetProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SnippetProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SnippetProto* New() const final {
    return CreateMaybeMessage<SnippetProto>(nullptr);
  }

  SnippetProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnippetProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SnippetProto& from);
  void MergeFrom(const SnippetProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SnippetProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ntp_snippets.SnippetProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef SnippetProto_ContentType ContentType;
  static constexpr ContentType UNKNOWN =
    SnippetProto_ContentType_UNKNOWN;
  static constexpr ContentType VIDEO =
    SnippetProto_ContentType_VIDEO;
  static inline bool ContentType_IsValid(int value) {
    return SnippetProto_ContentType_IsValid(value);
  }
  static constexpr ContentType ContentType_MIN =
    SnippetProto_ContentType_ContentType_MIN;
  static constexpr ContentType ContentType_MAX =
    SnippetProto_ContentType_ContentType_MAX;
  static constexpr int ContentType_ARRAYSIZE =
    SnippetProto_ContentType_ContentType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ContentType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ContentType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ContentType_Name.");
    return SnippetProto_ContentType_Name(enum_t_value);
  }
  static inline bool ContentType_Parse(const std::string& name,
      ContentType* value) {
    return SnippetProto_ContentType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
    kTitleFieldNumber = 2,
    kSnippetFieldNumber = 3,
    kSalientImageUrlFieldNumber = 4,
    kSourceFieldNumber = 8,
    kPublishDateFieldNumber = 5,
    kExpiryDateFieldNumber = 6,
    kScoreFieldNumber = 7,
    kDismissedFieldNumber = 9,
    kFetchDateFieldNumber = 11,
    kRemoteCategoryIdFieldNumber = 10,
    kContentTypeFieldNumber = 12,
    kRankFieldNumber = 13,
    kImageDominantColorFieldNumber = 14,
  };
  // repeated string ids = 1;
  int ids_size() const;
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();

  // optional string title = 2;
  bool has_title() const;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);

  // optional string snippet = 3;
  bool has_snippet() const;
  void clear_snippet();
  const std::string& snippet() const;
  void set_snippet(const std::string& value);
  void set_snippet(std::string&& value);
  void set_snippet(const char* value);
  void set_snippet(const char* value, size_t size);
  std::string* mutable_snippet();
  std::string* release_snippet();
  void set_allocated_snippet(std::string* snippet);

  // optional string salient_image_url = 4;
  bool has_salient_image_url() const;
  void clear_salient_image_url();
  const std::string& salient_image_url() const;
  void set_salient_image_url(const std::string& value);
  void set_salient_image_url(std::string&& value);
  void set_salient_image_url(const char* value);
  void set_salient_image_url(const char* value, size_t size);
  std::string* mutable_salient_image_url();
  std::string* release_salient_image_url();
  void set_allocated_salient_image_url(std::string* salient_image_url);

  // optional .ntp_snippets.SnippetSourceProto source = 8;
  bool has_source() const;
  void clear_source();
  const ::ntp_snippets::SnippetSourceProto& source() const;
  ::ntp_snippets::SnippetSourceProto* release_source();
  ::ntp_snippets::SnippetSourceProto* mutable_source();
  void set_allocated_source(::ntp_snippets::SnippetSourceProto* source);

  // optional int64 publish_date = 5;
  bool has_publish_date() const;
  void clear_publish_date();
  ::PROTOBUF_NAMESPACE_ID::int64 publish_date() const;
  void set_publish_date(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 expiry_date = 6;
  bool has_expiry_date() const;
  void clear_expiry_date();
  ::PROTOBUF_NAMESPACE_ID::int64 expiry_date() const;
  void set_expiry_date(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional float score = 7;
  bool has_score() const;
  void clear_score();
  float score() const;
  void set_score(float value);

  // optional bool dismissed = 9;
  bool has_dismissed() const;
  void clear_dismissed();
  bool dismissed() const;
  void set_dismissed(bool value);

  // optional int64 fetch_date = 11;
  bool has_fetch_date() const;
  void clear_fetch_date();
  ::PROTOBUF_NAMESPACE_ID::int64 fetch_date() const;
  void set_fetch_date(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 remote_category_id = 10;
  bool has_remote_category_id() const;
  void clear_remote_category_id();
  ::PROTOBUF_NAMESPACE_ID::int32 remote_category_id() const;
  void set_remote_category_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .ntp_snippets.SnippetProto.ContentType content_type = 12 [default = UNKNOWN];
  bool has_content_type() const;
  void clear_content_type();
  ::ntp_snippets::SnippetProto_ContentType content_type() const;
  void set_content_type(::ntp_snippets::SnippetProto_ContentType value);

  // optional int32 rank = 13;
  bool has_rank() const;
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::int32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional fixed32 image_dominant_color = 14;
  bool has_image_dominant_color() const;
  void clear_image_dominant_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 image_dominant_color() const;
  void set_image_dominant_color(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:ntp_snippets.SnippetProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snippet_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr salient_image_url_;
  ::ntp_snippets::SnippetSourceProto* source_;
  ::PROTOBUF_NAMESPACE_ID::int64 publish_date_;
  ::PROTOBUF_NAMESPACE_ID::int64 expiry_date_;
  float score_;
  bool dismissed_;
  ::PROTOBUF_NAMESPACE_ID::int64 fetch_date_;
  ::PROTOBUF_NAMESPACE_ID::int32 remote_category_id_;
  int content_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 rank_;
  ::PROTOBUF_NAMESPACE_ID::uint32 image_dominant_color_;
  friend struct ::TableStruct_ntp_5fsnippets_2eproto;
};
// -------------------------------------------------------------------

class SnippetImageProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ntp_snippets.SnippetImageProto) */ {
 public:
  SnippetImageProto();
  virtual ~SnippetImageProto();

  SnippetImageProto(const SnippetImageProto& from);
  SnippetImageProto(SnippetImageProto&& from) noexcept
    : SnippetImageProto() {
    *this = ::std::move(from);
  }

  inline SnippetImageProto& operator=(const SnippetImageProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SnippetImageProto& operator=(SnippetImageProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SnippetImageProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SnippetImageProto* internal_default_instance() {
    return reinterpret_cast<const SnippetImageProto*>(
               &_SnippetImageProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SnippetImageProto& a, SnippetImageProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SnippetImageProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SnippetImageProto* New() const final {
    return CreateMaybeMessage<SnippetImageProto>(nullptr);
  }

  SnippetImageProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SnippetImageProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SnippetImageProto& from);
  void MergeFrom(const SnippetImageProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SnippetImageProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ntp_snippets.SnippetImageProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // optional bytes data = 1;
  bool has_data() const;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // @@protoc_insertion_point(class_scope:ntp_snippets.SnippetImageProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  friend struct ::TableStruct_ntp_5fsnippets_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SnippetSourceProto

// optional string url = 1;
inline bool SnippetSourceProto::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SnippetSourceProto::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SnippetSourceProto::url() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetSourceProto.url)
  return url_.GetNoArena();
}
inline void SnippetSourceProto::set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetSourceProto.url)
}
inline void SnippetSourceProto::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ntp_snippets.SnippetSourceProto.url)
}
inline void SnippetSourceProto::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ntp_snippets.SnippetSourceProto.url)
}
inline void SnippetSourceProto::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ntp_snippets.SnippetSourceProto.url)
}
inline std::string* SnippetSourceProto::mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetSourceProto.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SnippetSourceProto::release_url() {
  // @@protoc_insertion_point(field_release:ntp_snippets.SnippetSourceProto.url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SnippetSourceProto::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:ntp_snippets.SnippetSourceProto.url)
}

// optional string publisher_name = 2;
inline bool SnippetSourceProto::has_publisher_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SnippetSourceProto::clear_publisher_name() {
  publisher_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SnippetSourceProto::publisher_name() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetSourceProto.publisher_name)
  return publisher_name_.GetNoArena();
}
inline void SnippetSourceProto::set_publisher_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  publisher_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetSourceProto.publisher_name)
}
inline void SnippetSourceProto::set_publisher_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  publisher_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ntp_snippets.SnippetSourceProto.publisher_name)
}
inline void SnippetSourceProto::set_publisher_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  publisher_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ntp_snippets.SnippetSourceProto.publisher_name)
}
inline void SnippetSourceProto::set_publisher_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  publisher_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ntp_snippets.SnippetSourceProto.publisher_name)
}
inline std::string* SnippetSourceProto::mutable_publisher_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetSourceProto.publisher_name)
  return publisher_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SnippetSourceProto::release_publisher_name() {
  // @@protoc_insertion_point(field_release:ntp_snippets.SnippetSourceProto.publisher_name)
  if (!has_publisher_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return publisher_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SnippetSourceProto::set_allocated_publisher_name(std::string* publisher_name) {
  if (publisher_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  publisher_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), publisher_name);
  // @@protoc_insertion_point(field_set_allocated:ntp_snippets.SnippetSourceProto.publisher_name)
}

// optional string amp_url = 3;
inline bool SnippetSourceProto::has_amp_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SnippetSourceProto::clear_amp_url() {
  amp_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SnippetSourceProto::amp_url() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetSourceProto.amp_url)
  return amp_url_.GetNoArena();
}
inline void SnippetSourceProto::set_amp_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  amp_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetSourceProto.amp_url)
}
inline void SnippetSourceProto::set_amp_url(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  amp_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ntp_snippets.SnippetSourceProto.amp_url)
}
inline void SnippetSourceProto::set_amp_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  amp_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ntp_snippets.SnippetSourceProto.amp_url)
}
inline void SnippetSourceProto::set_amp_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  amp_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ntp_snippets.SnippetSourceProto.amp_url)
}
inline std::string* SnippetSourceProto::mutable_amp_url() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetSourceProto.amp_url)
  return amp_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SnippetSourceProto::release_amp_url() {
  // @@protoc_insertion_point(field_release:ntp_snippets.SnippetSourceProto.amp_url)
  if (!has_amp_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return amp_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SnippetSourceProto::set_allocated_amp_url(std::string* amp_url) {
  if (amp_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  amp_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amp_url);
  // @@protoc_insertion_point(field_set_allocated:ntp_snippets.SnippetSourceProto.amp_url)
}

// -------------------------------------------------------------------

// SnippetProto

// repeated string ids = 1;
inline int SnippetProto::ids_size() const {
  return ids_.size();
}
inline void SnippetProto::clear_ids() {
  ids_.Clear();
}
inline const std::string& SnippetProto::ids(int index) const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.ids)
  return ids_.Get(index);
}
inline std::string* SnippetProto::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetProto.ids)
  return ids_.Mutable(index);
}
inline void SnippetProto::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.ids)
  ids_.Mutable(index)->assign(value);
}
inline void SnippetProto::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void SnippetProto::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ntp_snippets.SnippetProto.ids)
}
inline void SnippetProto::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ntp_snippets.SnippetProto.ids)
}
inline std::string* SnippetProto::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:ntp_snippets.SnippetProto.ids)
  return ids_.Add();
}
inline void SnippetProto::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ntp_snippets.SnippetProto.ids)
}
inline void SnippetProto::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ntp_snippets.SnippetProto.ids)
}
inline void SnippetProto::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ntp_snippets.SnippetProto.ids)
}
inline void SnippetProto::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ntp_snippets.SnippetProto.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SnippetProto::ids() const {
  // @@protoc_insertion_point(field_list:ntp_snippets.SnippetProto.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SnippetProto::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:ntp_snippets.SnippetProto.ids)
  return &ids_;
}

// optional string title = 2;
inline bool SnippetProto::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SnippetProto::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SnippetProto::title() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.title)
  return title_.GetNoArena();
}
inline void SnippetProto::set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.title)
}
inline void SnippetProto::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ntp_snippets.SnippetProto.title)
}
inline void SnippetProto::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ntp_snippets.SnippetProto.title)
}
inline void SnippetProto::set_title(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ntp_snippets.SnippetProto.title)
}
inline std::string* SnippetProto::mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetProto.title)
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SnippetProto::release_title() {
  // @@protoc_insertion_point(field_release:ntp_snippets.SnippetProto.title)
  if (!has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return title_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SnippetProto::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:ntp_snippets.SnippetProto.title)
}

// optional string snippet = 3;
inline bool SnippetProto::has_snippet() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SnippetProto::clear_snippet() {
  snippet_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SnippetProto::snippet() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.snippet)
  return snippet_.GetNoArena();
}
inline void SnippetProto::set_snippet(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  snippet_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.snippet)
}
inline void SnippetProto::set_snippet(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  snippet_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ntp_snippets.SnippetProto.snippet)
}
inline void SnippetProto::set_snippet(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  snippet_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ntp_snippets.SnippetProto.snippet)
}
inline void SnippetProto::set_snippet(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  snippet_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ntp_snippets.SnippetProto.snippet)
}
inline std::string* SnippetProto::mutable_snippet() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetProto.snippet)
  return snippet_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SnippetProto::release_snippet() {
  // @@protoc_insertion_point(field_release:ntp_snippets.SnippetProto.snippet)
  if (!has_snippet()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return snippet_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SnippetProto::set_allocated_snippet(std::string* snippet) {
  if (snippet != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  snippet_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snippet);
  // @@protoc_insertion_point(field_set_allocated:ntp_snippets.SnippetProto.snippet)
}

// optional string salient_image_url = 4;
inline bool SnippetProto::has_salient_image_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SnippetProto::clear_salient_image_url() {
  salient_image_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SnippetProto::salient_image_url() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.salient_image_url)
  return salient_image_url_.GetNoArena();
}
inline void SnippetProto::set_salient_image_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  salient_image_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.salient_image_url)
}
inline void SnippetProto::set_salient_image_url(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  salient_image_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ntp_snippets.SnippetProto.salient_image_url)
}
inline void SnippetProto::set_salient_image_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  salient_image_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ntp_snippets.SnippetProto.salient_image_url)
}
inline void SnippetProto::set_salient_image_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  salient_image_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ntp_snippets.SnippetProto.salient_image_url)
}
inline std::string* SnippetProto::mutable_salient_image_url() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetProto.salient_image_url)
  return salient_image_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SnippetProto::release_salient_image_url() {
  // @@protoc_insertion_point(field_release:ntp_snippets.SnippetProto.salient_image_url)
  if (!has_salient_image_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return salient_image_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SnippetProto::set_allocated_salient_image_url(std::string* salient_image_url) {
  if (salient_image_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  salient_image_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), salient_image_url);
  // @@protoc_insertion_point(field_set_allocated:ntp_snippets.SnippetProto.salient_image_url)
}

// optional int64 publish_date = 5;
inline bool SnippetProto::has_publish_date() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SnippetProto::clear_publish_date() {
  publish_date_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SnippetProto::publish_date() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.publish_date)
  return publish_date_;
}
inline void SnippetProto::set_publish_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  publish_date_ = value;
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.publish_date)
}

// optional int64 expiry_date = 6;
inline bool SnippetProto::has_expiry_date() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SnippetProto::clear_expiry_date() {
  expiry_date_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SnippetProto::expiry_date() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.expiry_date)
  return expiry_date_;
}
inline void SnippetProto::set_expiry_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  expiry_date_ = value;
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.expiry_date)
}

// optional float score = 7;
inline bool SnippetProto::has_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SnippetProto::clear_score() {
  score_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float SnippetProto::score() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.score)
  return score_;
}
inline void SnippetProto::set_score(float value) {
  _has_bits_[0] |= 0x00000040u;
  score_ = value;
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.score)
}

// optional .ntp_snippets.SnippetSourceProto source = 8;
inline bool SnippetProto::has_source() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SnippetProto::clear_source() {
  if (source_ != nullptr) source_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::ntp_snippets::SnippetSourceProto& SnippetProto::source() const {
  const ::ntp_snippets::SnippetSourceProto* p = source_;
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.source)
  return p != nullptr ? *p : *reinterpret_cast<const ::ntp_snippets::SnippetSourceProto*>(
      &::ntp_snippets::_SnippetSourceProto_default_instance_);
}
inline ::ntp_snippets::SnippetSourceProto* SnippetProto::release_source() {
  // @@protoc_insertion_point(field_release:ntp_snippets.SnippetProto.source)
  _has_bits_[0] &= ~0x00000008u;
  ::ntp_snippets::SnippetSourceProto* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::ntp_snippets::SnippetSourceProto* SnippetProto::mutable_source() {
  _has_bits_[0] |= 0x00000008u;
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::ntp_snippets::SnippetSourceProto>(GetArenaNoVirtual());
    source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetProto.source)
  return source_;
}
inline void SnippetProto::set_allocated_source(::ntp_snippets::SnippetSourceProto* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:ntp_snippets.SnippetProto.source)
}

// optional bool dismissed = 9;
inline bool SnippetProto::has_dismissed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SnippetProto::clear_dismissed() {
  dismissed_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool SnippetProto::dismissed() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.dismissed)
  return dismissed_;
}
inline void SnippetProto::set_dismissed(bool value) {
  _has_bits_[0] |= 0x00000080u;
  dismissed_ = value;
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.dismissed)
}

// optional int32 remote_category_id = 10;
inline bool SnippetProto::has_remote_category_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SnippetProto::clear_remote_category_id() {
  remote_category_id_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SnippetProto::remote_category_id() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.remote_category_id)
  return remote_category_id_;
}
inline void SnippetProto::set_remote_category_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  remote_category_id_ = value;
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.remote_category_id)
}

// optional int64 fetch_date = 11;
inline bool SnippetProto::has_fetch_date() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SnippetProto::clear_fetch_date() {
  fetch_date_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SnippetProto::fetch_date() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.fetch_date)
  return fetch_date_;
}
inline void SnippetProto::set_fetch_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  fetch_date_ = value;
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.fetch_date)
}

// optional .ntp_snippets.SnippetProto.ContentType content_type = 12 [default = UNKNOWN];
inline bool SnippetProto::has_content_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SnippetProto::clear_content_type() {
  content_type_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::ntp_snippets::SnippetProto_ContentType SnippetProto::content_type() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.content_type)
  return static_cast< ::ntp_snippets::SnippetProto_ContentType >(content_type_);
}
inline void SnippetProto::set_content_type(::ntp_snippets::SnippetProto_ContentType value) {
  assert(::ntp_snippets::SnippetProto_ContentType_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  content_type_ = value;
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.content_type)
}

// optional int32 rank = 13;
inline bool SnippetProto::has_rank() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SnippetProto::clear_rank() {
  rank_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SnippetProto::rank() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.rank)
  return rank_;
}
inline void SnippetProto::set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  rank_ = value;
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.rank)
}

// optional fixed32 image_dominant_color = 14;
inline bool SnippetProto::has_image_dominant_color() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SnippetProto::clear_image_dominant_color() {
  image_dominant_color_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SnippetProto::image_dominant_color() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetProto.image_dominant_color)
  return image_dominant_color_;
}
inline void SnippetProto::set_image_dominant_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  image_dominant_color_ = value;
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetProto.image_dominant_color)
}

// -------------------------------------------------------------------

// SnippetImageProto

// optional bytes data = 1;
inline bool SnippetImageProto::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SnippetImageProto::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SnippetImageProto::data() const {
  // @@protoc_insertion_point(field_get:ntp_snippets.SnippetImageProto.data)
  return data_.GetNoArena();
}
inline void SnippetImageProto::set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ntp_snippets.SnippetImageProto.data)
}
inline void SnippetImageProto::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ntp_snippets.SnippetImageProto.data)
}
inline void SnippetImageProto::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ntp_snippets.SnippetImageProto.data)
}
inline void SnippetImageProto::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ntp_snippets.SnippetImageProto.data)
}
inline std::string* SnippetImageProto::mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:ntp_snippets.SnippetImageProto.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SnippetImageProto::release_data() {
  // @@protoc_insertion_point(field_release:ntp_snippets.SnippetImageProto.data)
  if (!has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SnippetImageProto::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ntp_snippets.SnippetImageProto.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ntp_snippets

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ntp_snippets::SnippetProto_ContentType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ntp_5fsnippets_2eproto

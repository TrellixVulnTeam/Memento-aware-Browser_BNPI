// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/sync/protocol/wifi_configuration_specifics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fwifi_5fconfiguration_5fspecifics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fwifi_5fconfiguration_5fspecifics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsync_2fprotocol_2fwifi_5fconfiguration_5fspecifics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsync_2fprotocol_2fwifi_5fconfiguration_5fspecifics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace sync_pb {
class WifiConfigurationSpecifics;
class WifiConfigurationSpecificsDefaultTypeInternal;
extern WifiConfigurationSpecificsDefaultTypeInternal _WifiConfigurationSpecifics_default_instance_;
class WifiConfigurationSpecifics_ProxyConfiguration;
class WifiConfigurationSpecifics_ProxyConfigurationDefaultTypeInternal;
extern WifiConfigurationSpecifics_ProxyConfigurationDefaultTypeInternal _WifiConfigurationSpecifics_ProxyConfiguration_default_instance_;
class WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration;
class WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfigurationDefaultTypeInternal;
extern WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfigurationDefaultTypeInternal _WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration_default_instance_;
}  // namespace sync_pb
PROTOBUF_NAMESPACE_OPEN
template<> ::sync_pb::WifiConfigurationSpecifics* Arena::CreateMaybeMessage<::sync_pb::WifiConfigurationSpecifics>(Arena*);
template<> ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration* Arena::CreateMaybeMessage<::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration>(Arena*);
template<> ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* Arena::CreateMaybeMessage<::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sync_pb {

enum WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption : int {
  WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_PROXY_OPTION_UNSPECIFIED = 0,
  WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_PROXY_OPTION_DISABLED = 1,
  WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_PROXY_OPTION_AUTOMATIC = 2,
  WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_PROXY_OPTION_AUTODISCOVERY = 3,
  WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_PROXY_OPTION_MANUAL = 4
};
bool WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_IsValid(int value);
constexpr WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_ProxyOption_MIN = WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_PROXY_OPTION_UNSPECIFIED;
constexpr WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_ProxyOption_MAX = WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_PROXY_OPTION_MANUAL;
constexpr int WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_ProxyOption_ARRAYSIZE = WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_ProxyOption_MAX + 1;

const std::string& WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_Name(WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption value);
template<typename T>
inline const std::string& WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_Name.");
  return WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_Name(static_cast<WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption>(enum_t_value));
}
bool WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_Parse(
    const std::string& name, WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption* value);
enum WifiConfigurationSpecifics_SecurityType : int {
  WifiConfigurationSpecifics_SecurityType_SECURITY_TYPE_UNSPECIFIED = 0,
  WifiConfigurationSpecifics_SecurityType_SECURITY_TYPE_NONE = 1,
  WifiConfigurationSpecifics_SecurityType_SECURITY_TYPE_WEP = 2,
  WifiConfigurationSpecifics_SecurityType_SECURITY_TYPE_PSK = 3
};
bool WifiConfigurationSpecifics_SecurityType_IsValid(int value);
constexpr WifiConfigurationSpecifics_SecurityType WifiConfigurationSpecifics_SecurityType_SecurityType_MIN = WifiConfigurationSpecifics_SecurityType_SECURITY_TYPE_UNSPECIFIED;
constexpr WifiConfigurationSpecifics_SecurityType WifiConfigurationSpecifics_SecurityType_SecurityType_MAX = WifiConfigurationSpecifics_SecurityType_SECURITY_TYPE_PSK;
constexpr int WifiConfigurationSpecifics_SecurityType_SecurityType_ARRAYSIZE = WifiConfigurationSpecifics_SecurityType_SecurityType_MAX + 1;

const std::string& WifiConfigurationSpecifics_SecurityType_Name(WifiConfigurationSpecifics_SecurityType value);
template<typename T>
inline const std::string& WifiConfigurationSpecifics_SecurityType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WifiConfigurationSpecifics_SecurityType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WifiConfigurationSpecifics_SecurityType_Name.");
  return WifiConfigurationSpecifics_SecurityType_Name(static_cast<WifiConfigurationSpecifics_SecurityType>(enum_t_value));
}
bool WifiConfigurationSpecifics_SecurityType_Parse(
    const std::string& name, WifiConfigurationSpecifics_SecurityType* value);
enum WifiConfigurationSpecifics_AutomaticallyConnectOption : int {
  WifiConfigurationSpecifics_AutomaticallyConnectOption_AUTOMATICALLY_CONNECT_UNSPECIFIED = 0,
  WifiConfigurationSpecifics_AutomaticallyConnectOption_AUTOMATICALLY_CONNECT_DISABLED = 1,
  WifiConfigurationSpecifics_AutomaticallyConnectOption_AUTOMATICALLY_CONNECT_ENABLED = 2
};
bool WifiConfigurationSpecifics_AutomaticallyConnectOption_IsValid(int value);
constexpr WifiConfigurationSpecifics_AutomaticallyConnectOption WifiConfigurationSpecifics_AutomaticallyConnectOption_AutomaticallyConnectOption_MIN = WifiConfigurationSpecifics_AutomaticallyConnectOption_AUTOMATICALLY_CONNECT_UNSPECIFIED;
constexpr WifiConfigurationSpecifics_AutomaticallyConnectOption WifiConfigurationSpecifics_AutomaticallyConnectOption_AutomaticallyConnectOption_MAX = WifiConfigurationSpecifics_AutomaticallyConnectOption_AUTOMATICALLY_CONNECT_ENABLED;
constexpr int WifiConfigurationSpecifics_AutomaticallyConnectOption_AutomaticallyConnectOption_ARRAYSIZE = WifiConfigurationSpecifics_AutomaticallyConnectOption_AutomaticallyConnectOption_MAX + 1;

const std::string& WifiConfigurationSpecifics_AutomaticallyConnectOption_Name(WifiConfigurationSpecifics_AutomaticallyConnectOption value);
template<typename T>
inline const std::string& WifiConfigurationSpecifics_AutomaticallyConnectOption_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WifiConfigurationSpecifics_AutomaticallyConnectOption>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WifiConfigurationSpecifics_AutomaticallyConnectOption_Name.");
  return WifiConfigurationSpecifics_AutomaticallyConnectOption_Name(static_cast<WifiConfigurationSpecifics_AutomaticallyConnectOption>(enum_t_value));
}
bool WifiConfigurationSpecifics_AutomaticallyConnectOption_Parse(
    const std::string& name, WifiConfigurationSpecifics_AutomaticallyConnectOption* value);
enum WifiConfigurationSpecifics_IsPreferredOption : int {
  WifiConfigurationSpecifics_IsPreferredOption_IS_PREFERRED_UNSPECIFIED = 0,
  WifiConfigurationSpecifics_IsPreferredOption_IS_PREFERRED_DISABLED = 1,
  WifiConfigurationSpecifics_IsPreferredOption_IS_PREFERRED_ENABLED = 2
};
bool WifiConfigurationSpecifics_IsPreferredOption_IsValid(int value);
constexpr WifiConfigurationSpecifics_IsPreferredOption WifiConfigurationSpecifics_IsPreferredOption_IsPreferredOption_MIN = WifiConfigurationSpecifics_IsPreferredOption_IS_PREFERRED_UNSPECIFIED;
constexpr WifiConfigurationSpecifics_IsPreferredOption WifiConfigurationSpecifics_IsPreferredOption_IsPreferredOption_MAX = WifiConfigurationSpecifics_IsPreferredOption_IS_PREFERRED_ENABLED;
constexpr int WifiConfigurationSpecifics_IsPreferredOption_IsPreferredOption_ARRAYSIZE = WifiConfigurationSpecifics_IsPreferredOption_IsPreferredOption_MAX + 1;

const std::string& WifiConfigurationSpecifics_IsPreferredOption_Name(WifiConfigurationSpecifics_IsPreferredOption value);
template<typename T>
inline const std::string& WifiConfigurationSpecifics_IsPreferredOption_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WifiConfigurationSpecifics_IsPreferredOption>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WifiConfigurationSpecifics_IsPreferredOption_Name.");
  return WifiConfigurationSpecifics_IsPreferredOption_Name(static_cast<WifiConfigurationSpecifics_IsPreferredOption>(enum_t_value));
}
bool WifiConfigurationSpecifics_IsPreferredOption_Parse(
    const std::string& name, WifiConfigurationSpecifics_IsPreferredOption* value);
enum WifiConfigurationSpecifics_MeteredOption : int {
  WifiConfigurationSpecifics_MeteredOption_METERED_OPTION_UNSPECIFIED = 0,
  WifiConfigurationSpecifics_MeteredOption_METERED_OPTION_NO = 1,
  WifiConfigurationSpecifics_MeteredOption_METERED_OPTION_YES = 2,
  WifiConfigurationSpecifics_MeteredOption_METERED_OPTION_AUTO = 3
};
bool WifiConfigurationSpecifics_MeteredOption_IsValid(int value);
constexpr WifiConfigurationSpecifics_MeteredOption WifiConfigurationSpecifics_MeteredOption_MeteredOption_MIN = WifiConfigurationSpecifics_MeteredOption_METERED_OPTION_UNSPECIFIED;
constexpr WifiConfigurationSpecifics_MeteredOption WifiConfigurationSpecifics_MeteredOption_MeteredOption_MAX = WifiConfigurationSpecifics_MeteredOption_METERED_OPTION_AUTO;
constexpr int WifiConfigurationSpecifics_MeteredOption_MeteredOption_ARRAYSIZE = WifiConfigurationSpecifics_MeteredOption_MeteredOption_MAX + 1;

const std::string& WifiConfigurationSpecifics_MeteredOption_Name(WifiConfigurationSpecifics_MeteredOption value);
template<typename T>
inline const std::string& WifiConfigurationSpecifics_MeteredOption_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WifiConfigurationSpecifics_MeteredOption>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WifiConfigurationSpecifics_MeteredOption_Name.");
  return WifiConfigurationSpecifics_MeteredOption_Name(static_cast<WifiConfigurationSpecifics_MeteredOption>(enum_t_value));
}
bool WifiConfigurationSpecifics_MeteredOption_Parse(
    const std::string& name, WifiConfigurationSpecifics_MeteredOption* value);
enum WifiConfigurationSpecifics_DnsOption : int {
  WifiConfigurationSpecifics_DnsOption_DNS_OPTION_UNSPECIFIED = 0,
  WifiConfigurationSpecifics_DnsOption_DNS_OPTION_DEFAULT_DHCP = 1,
  WifiConfigurationSpecifics_DnsOption_DNS_OPTION_CUSTOM = 2
};
bool WifiConfigurationSpecifics_DnsOption_IsValid(int value);
constexpr WifiConfigurationSpecifics_DnsOption WifiConfigurationSpecifics_DnsOption_DnsOption_MIN = WifiConfigurationSpecifics_DnsOption_DNS_OPTION_UNSPECIFIED;
constexpr WifiConfigurationSpecifics_DnsOption WifiConfigurationSpecifics_DnsOption_DnsOption_MAX = WifiConfigurationSpecifics_DnsOption_DNS_OPTION_CUSTOM;
constexpr int WifiConfigurationSpecifics_DnsOption_DnsOption_ARRAYSIZE = WifiConfigurationSpecifics_DnsOption_DnsOption_MAX + 1;

const std::string& WifiConfigurationSpecifics_DnsOption_Name(WifiConfigurationSpecifics_DnsOption value);
template<typename T>
inline const std::string& WifiConfigurationSpecifics_DnsOption_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WifiConfigurationSpecifics_DnsOption>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WifiConfigurationSpecifics_DnsOption_Name.");
  return WifiConfigurationSpecifics_DnsOption_Name(static_cast<WifiConfigurationSpecifics_DnsOption>(enum_t_value));
}
bool WifiConfigurationSpecifics_DnsOption_Parse(
    const std::string& name, WifiConfigurationSpecifics_DnsOption* value);
// ===================================================================

class WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration) */ {
 public:
  WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration();
  virtual ~WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration();

  WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration(const WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration& from);
  WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration(WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration&& from) noexcept
    : WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration() {
    *this = ::std::move(from);
  }

  inline WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration& operator=(const WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration& operator=(WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* internal_default_instance() {
    return reinterpret_cast<const WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration*>(
               &_WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration& a, WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* New() const final {
    return CreateMaybeMessage<WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration>(nullptr);
  }

  WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration& from);
  void MergeFrom(const WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWhitelistedDomainsFieldNumber = 7,
    kHttpProxyUrlFieldNumber = 1,
    kSecureHttpProxyUrlFieldNumber = 3,
    kSocksHostUrlFieldNumber = 5,
    kHttpProxyPortFieldNumber = 2,
    kSecureHttpProxyPortFieldNumber = 4,
    kSocksHostPortFieldNumber = 6,
  };
  // repeated string whitelisted_domains = 7;
  int whitelisted_domains_size() const;
  void clear_whitelisted_domains();
  const std::string& whitelisted_domains(int index) const;
  std::string* mutable_whitelisted_domains(int index);
  void set_whitelisted_domains(int index, const std::string& value);
  void set_whitelisted_domains(int index, std::string&& value);
  void set_whitelisted_domains(int index, const char* value);
  void set_whitelisted_domains(int index, const char* value, size_t size);
  std::string* add_whitelisted_domains();
  void add_whitelisted_domains(const std::string& value);
  void add_whitelisted_domains(std::string&& value);
  void add_whitelisted_domains(const char* value);
  void add_whitelisted_domains(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& whitelisted_domains() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_whitelisted_domains();

  // optional string http_proxy_url = 1;
  bool has_http_proxy_url() const;
  void clear_http_proxy_url();
  const std::string& http_proxy_url() const;
  void set_http_proxy_url(const std::string& value);
  void set_http_proxy_url(std::string&& value);
  void set_http_proxy_url(const char* value);
  void set_http_proxy_url(const char* value, size_t size);
  std::string* mutable_http_proxy_url();
  std::string* release_http_proxy_url();
  void set_allocated_http_proxy_url(std::string* http_proxy_url);

  // optional string secure_http_proxy_url = 3;
  bool has_secure_http_proxy_url() const;
  void clear_secure_http_proxy_url();
  const std::string& secure_http_proxy_url() const;
  void set_secure_http_proxy_url(const std::string& value);
  void set_secure_http_proxy_url(std::string&& value);
  void set_secure_http_proxy_url(const char* value);
  void set_secure_http_proxy_url(const char* value, size_t size);
  std::string* mutable_secure_http_proxy_url();
  std::string* release_secure_http_proxy_url();
  void set_allocated_secure_http_proxy_url(std::string* secure_http_proxy_url);

  // optional string socks_host_url = 5;
  bool has_socks_host_url() const;
  void clear_socks_host_url();
  const std::string& socks_host_url() const;
  void set_socks_host_url(const std::string& value);
  void set_socks_host_url(std::string&& value);
  void set_socks_host_url(const char* value);
  void set_socks_host_url(const char* value, size_t size);
  std::string* mutable_socks_host_url();
  std::string* release_socks_host_url();
  void set_allocated_socks_host_url(std::string* socks_host_url);

  // optional int32 http_proxy_port = 2;
  bool has_http_proxy_port() const;
  void clear_http_proxy_port();
  ::PROTOBUF_NAMESPACE_ID::int32 http_proxy_port() const;
  void set_http_proxy_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 secure_http_proxy_port = 4;
  bool has_secure_http_proxy_port() const;
  void clear_secure_http_proxy_port();
  ::PROTOBUF_NAMESPACE_ID::int32 secure_http_proxy_port() const;
  void set_secure_http_proxy_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 socks_host_port = 6;
  bool has_socks_host_port() const;
  void clear_socks_host_port();
  ::PROTOBUF_NAMESPACE_ID::int32 socks_host_port() const;
  void set_socks_host_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> whitelisted_domains_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr http_proxy_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secure_http_proxy_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr socks_host_url_;
  ::PROTOBUF_NAMESPACE_ID::int32 http_proxy_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 secure_http_proxy_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 socks_host_port_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fwifi_5fconfiguration_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class WifiConfigurationSpecifics_ProxyConfiguration :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration) */ {
 public:
  WifiConfigurationSpecifics_ProxyConfiguration();
  virtual ~WifiConfigurationSpecifics_ProxyConfiguration();

  WifiConfigurationSpecifics_ProxyConfiguration(const WifiConfigurationSpecifics_ProxyConfiguration& from);
  WifiConfigurationSpecifics_ProxyConfiguration(WifiConfigurationSpecifics_ProxyConfiguration&& from) noexcept
    : WifiConfigurationSpecifics_ProxyConfiguration() {
    *this = ::std::move(from);
  }

  inline WifiConfigurationSpecifics_ProxyConfiguration& operator=(const WifiConfigurationSpecifics_ProxyConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline WifiConfigurationSpecifics_ProxyConfiguration& operator=(WifiConfigurationSpecifics_ProxyConfiguration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const WifiConfigurationSpecifics_ProxyConfiguration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WifiConfigurationSpecifics_ProxyConfiguration* internal_default_instance() {
    return reinterpret_cast<const WifiConfigurationSpecifics_ProxyConfiguration*>(
               &_WifiConfigurationSpecifics_ProxyConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WifiConfigurationSpecifics_ProxyConfiguration& a, WifiConfigurationSpecifics_ProxyConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(WifiConfigurationSpecifics_ProxyConfiguration* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WifiConfigurationSpecifics_ProxyConfiguration* New() const final {
    return CreateMaybeMessage<WifiConfigurationSpecifics_ProxyConfiguration>(nullptr);
  }

  WifiConfigurationSpecifics_ProxyConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WifiConfigurationSpecifics_ProxyConfiguration>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const WifiConfigurationSpecifics_ProxyConfiguration& from);
  void MergeFrom(const WifiConfigurationSpecifics_ProxyConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WifiConfigurationSpecifics_ProxyConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.WifiConfigurationSpecifics.ProxyConfiguration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration ManualProxyConfiguration;

  typedef WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption ProxyOption;
  static constexpr ProxyOption PROXY_OPTION_UNSPECIFIED =
    WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_PROXY_OPTION_UNSPECIFIED;
  static constexpr ProxyOption PROXY_OPTION_DISABLED =
    WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_PROXY_OPTION_DISABLED;
  static constexpr ProxyOption PROXY_OPTION_AUTOMATIC =
    WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_PROXY_OPTION_AUTOMATIC;
  static constexpr ProxyOption PROXY_OPTION_AUTODISCOVERY =
    WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_PROXY_OPTION_AUTODISCOVERY;
  static constexpr ProxyOption PROXY_OPTION_MANUAL =
    WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_PROXY_OPTION_MANUAL;
  static inline bool ProxyOption_IsValid(int value) {
    return WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_IsValid(value);
  }
  static constexpr ProxyOption ProxyOption_MIN =
    WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_ProxyOption_MIN;
  static constexpr ProxyOption ProxyOption_MAX =
    WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_ProxyOption_MAX;
  static constexpr int ProxyOption_ARRAYSIZE =
    WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_ProxyOption_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ProxyOption_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ProxyOption>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ProxyOption_Name.");
    return WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_Name(enum_t_value);
  }
  static inline bool ProxyOption_Parse(const std::string& name,
      ProxyOption* value) {
    return WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAutoconfigurationUrlFieldNumber = 2,
    kManualProxyConfigurationFieldNumber = 3,
    kProxyOptionFieldNumber = 1,
  };
  // optional string autoconfiguration_url = 2;
  bool has_autoconfiguration_url() const;
  void clear_autoconfiguration_url();
  const std::string& autoconfiguration_url() const;
  void set_autoconfiguration_url(const std::string& value);
  void set_autoconfiguration_url(std::string&& value);
  void set_autoconfiguration_url(const char* value);
  void set_autoconfiguration_url(const char* value, size_t size);
  std::string* mutable_autoconfiguration_url();
  std::string* release_autoconfiguration_url();
  void set_allocated_autoconfiguration_url(std::string* autoconfiguration_url);

  // optional .sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration manual_proxy_configuration = 3;
  bool has_manual_proxy_configuration() const;
  void clear_manual_proxy_configuration();
  const ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration& manual_proxy_configuration() const;
  ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* release_manual_proxy_configuration();
  ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* mutable_manual_proxy_configuration();
  void set_allocated_manual_proxy_configuration(::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* manual_proxy_configuration);

  // optional .sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ProxyOption proxy_option = 1;
  bool has_proxy_option() const;
  void clear_proxy_option();
  ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption proxy_option() const;
  void set_proxy_option(::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption value);

  // @@protoc_insertion_point(class_scope:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr autoconfiguration_url_;
  ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* manual_proxy_configuration_;
  int proxy_option_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fwifi_5fconfiguration_5fspecifics_2eproto;
};
// -------------------------------------------------------------------

class WifiConfigurationSpecifics :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:sync_pb.WifiConfigurationSpecifics) */ {
 public:
  WifiConfigurationSpecifics();
  virtual ~WifiConfigurationSpecifics();

  WifiConfigurationSpecifics(const WifiConfigurationSpecifics& from);
  WifiConfigurationSpecifics(WifiConfigurationSpecifics&& from) noexcept
    : WifiConfigurationSpecifics() {
    *this = ::std::move(from);
  }

  inline WifiConfigurationSpecifics& operator=(const WifiConfigurationSpecifics& from) {
    CopyFrom(from);
    return *this;
  }
  inline WifiConfigurationSpecifics& operator=(WifiConfigurationSpecifics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const WifiConfigurationSpecifics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WifiConfigurationSpecifics* internal_default_instance() {
    return reinterpret_cast<const WifiConfigurationSpecifics*>(
               &_WifiConfigurationSpecifics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WifiConfigurationSpecifics& a, WifiConfigurationSpecifics& b) {
    a.Swap(&b);
  }
  inline void Swap(WifiConfigurationSpecifics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WifiConfigurationSpecifics* New() const final {
    return CreateMaybeMessage<WifiConfigurationSpecifics>(nullptr);
  }

  WifiConfigurationSpecifics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WifiConfigurationSpecifics>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const WifiConfigurationSpecifics& from);
  void MergeFrom(const WifiConfigurationSpecifics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WifiConfigurationSpecifics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sync_pb.WifiConfigurationSpecifics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef WifiConfigurationSpecifics_ProxyConfiguration ProxyConfiguration;

  typedef WifiConfigurationSpecifics_SecurityType SecurityType;
  static constexpr SecurityType SECURITY_TYPE_UNSPECIFIED =
    WifiConfigurationSpecifics_SecurityType_SECURITY_TYPE_UNSPECIFIED;
  static constexpr SecurityType SECURITY_TYPE_NONE =
    WifiConfigurationSpecifics_SecurityType_SECURITY_TYPE_NONE;
  static constexpr SecurityType SECURITY_TYPE_WEP =
    WifiConfigurationSpecifics_SecurityType_SECURITY_TYPE_WEP;
  static constexpr SecurityType SECURITY_TYPE_PSK =
    WifiConfigurationSpecifics_SecurityType_SECURITY_TYPE_PSK;
  static inline bool SecurityType_IsValid(int value) {
    return WifiConfigurationSpecifics_SecurityType_IsValid(value);
  }
  static constexpr SecurityType SecurityType_MIN =
    WifiConfigurationSpecifics_SecurityType_SecurityType_MIN;
  static constexpr SecurityType SecurityType_MAX =
    WifiConfigurationSpecifics_SecurityType_SecurityType_MAX;
  static constexpr int SecurityType_ARRAYSIZE =
    WifiConfigurationSpecifics_SecurityType_SecurityType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& SecurityType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SecurityType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SecurityType_Name.");
    return WifiConfigurationSpecifics_SecurityType_Name(enum_t_value);
  }
  static inline bool SecurityType_Parse(const std::string& name,
      SecurityType* value) {
    return WifiConfigurationSpecifics_SecurityType_Parse(name, value);
  }

  typedef WifiConfigurationSpecifics_AutomaticallyConnectOption AutomaticallyConnectOption;
  static constexpr AutomaticallyConnectOption AUTOMATICALLY_CONNECT_UNSPECIFIED =
    WifiConfigurationSpecifics_AutomaticallyConnectOption_AUTOMATICALLY_CONNECT_UNSPECIFIED;
  static constexpr AutomaticallyConnectOption AUTOMATICALLY_CONNECT_DISABLED =
    WifiConfigurationSpecifics_AutomaticallyConnectOption_AUTOMATICALLY_CONNECT_DISABLED;
  static constexpr AutomaticallyConnectOption AUTOMATICALLY_CONNECT_ENABLED =
    WifiConfigurationSpecifics_AutomaticallyConnectOption_AUTOMATICALLY_CONNECT_ENABLED;
  static inline bool AutomaticallyConnectOption_IsValid(int value) {
    return WifiConfigurationSpecifics_AutomaticallyConnectOption_IsValid(value);
  }
  static constexpr AutomaticallyConnectOption AutomaticallyConnectOption_MIN =
    WifiConfigurationSpecifics_AutomaticallyConnectOption_AutomaticallyConnectOption_MIN;
  static constexpr AutomaticallyConnectOption AutomaticallyConnectOption_MAX =
    WifiConfigurationSpecifics_AutomaticallyConnectOption_AutomaticallyConnectOption_MAX;
  static constexpr int AutomaticallyConnectOption_ARRAYSIZE =
    WifiConfigurationSpecifics_AutomaticallyConnectOption_AutomaticallyConnectOption_ARRAYSIZE;
  template<typename T>
  static inline const std::string& AutomaticallyConnectOption_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AutomaticallyConnectOption>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AutomaticallyConnectOption_Name.");
    return WifiConfigurationSpecifics_AutomaticallyConnectOption_Name(enum_t_value);
  }
  static inline bool AutomaticallyConnectOption_Parse(const std::string& name,
      AutomaticallyConnectOption* value) {
    return WifiConfigurationSpecifics_AutomaticallyConnectOption_Parse(name, value);
  }

  typedef WifiConfigurationSpecifics_IsPreferredOption IsPreferredOption;
  static constexpr IsPreferredOption IS_PREFERRED_UNSPECIFIED =
    WifiConfigurationSpecifics_IsPreferredOption_IS_PREFERRED_UNSPECIFIED;
  static constexpr IsPreferredOption IS_PREFERRED_DISABLED =
    WifiConfigurationSpecifics_IsPreferredOption_IS_PREFERRED_DISABLED;
  static constexpr IsPreferredOption IS_PREFERRED_ENABLED =
    WifiConfigurationSpecifics_IsPreferredOption_IS_PREFERRED_ENABLED;
  static inline bool IsPreferredOption_IsValid(int value) {
    return WifiConfigurationSpecifics_IsPreferredOption_IsValid(value);
  }
  static constexpr IsPreferredOption IsPreferredOption_MIN =
    WifiConfigurationSpecifics_IsPreferredOption_IsPreferredOption_MIN;
  static constexpr IsPreferredOption IsPreferredOption_MAX =
    WifiConfigurationSpecifics_IsPreferredOption_IsPreferredOption_MAX;
  static constexpr int IsPreferredOption_ARRAYSIZE =
    WifiConfigurationSpecifics_IsPreferredOption_IsPreferredOption_ARRAYSIZE;
  template<typename T>
  static inline const std::string& IsPreferredOption_Name(T enum_t_value) {
    static_assert(::std::is_same<T, IsPreferredOption>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function IsPreferredOption_Name.");
    return WifiConfigurationSpecifics_IsPreferredOption_Name(enum_t_value);
  }
  static inline bool IsPreferredOption_Parse(const std::string& name,
      IsPreferredOption* value) {
    return WifiConfigurationSpecifics_IsPreferredOption_Parse(name, value);
  }

  typedef WifiConfigurationSpecifics_MeteredOption MeteredOption;
  static constexpr MeteredOption METERED_OPTION_UNSPECIFIED =
    WifiConfigurationSpecifics_MeteredOption_METERED_OPTION_UNSPECIFIED;
  static constexpr MeteredOption METERED_OPTION_NO =
    WifiConfigurationSpecifics_MeteredOption_METERED_OPTION_NO;
  static constexpr MeteredOption METERED_OPTION_YES =
    WifiConfigurationSpecifics_MeteredOption_METERED_OPTION_YES;
  static constexpr MeteredOption METERED_OPTION_AUTO =
    WifiConfigurationSpecifics_MeteredOption_METERED_OPTION_AUTO;
  static inline bool MeteredOption_IsValid(int value) {
    return WifiConfigurationSpecifics_MeteredOption_IsValid(value);
  }
  static constexpr MeteredOption MeteredOption_MIN =
    WifiConfigurationSpecifics_MeteredOption_MeteredOption_MIN;
  static constexpr MeteredOption MeteredOption_MAX =
    WifiConfigurationSpecifics_MeteredOption_MeteredOption_MAX;
  static constexpr int MeteredOption_ARRAYSIZE =
    WifiConfigurationSpecifics_MeteredOption_MeteredOption_ARRAYSIZE;
  template<typename T>
  static inline const std::string& MeteredOption_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MeteredOption>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MeteredOption_Name.");
    return WifiConfigurationSpecifics_MeteredOption_Name(enum_t_value);
  }
  static inline bool MeteredOption_Parse(const std::string& name,
      MeteredOption* value) {
    return WifiConfigurationSpecifics_MeteredOption_Parse(name, value);
  }

  typedef WifiConfigurationSpecifics_DnsOption DnsOption;
  static constexpr DnsOption DNS_OPTION_UNSPECIFIED =
    WifiConfigurationSpecifics_DnsOption_DNS_OPTION_UNSPECIFIED;
  static constexpr DnsOption DNS_OPTION_DEFAULT_DHCP =
    WifiConfigurationSpecifics_DnsOption_DNS_OPTION_DEFAULT_DHCP;
  static constexpr DnsOption DNS_OPTION_CUSTOM =
    WifiConfigurationSpecifics_DnsOption_DNS_OPTION_CUSTOM;
  static inline bool DnsOption_IsValid(int value) {
    return WifiConfigurationSpecifics_DnsOption_IsValid(value);
  }
  static constexpr DnsOption DnsOption_MIN =
    WifiConfigurationSpecifics_DnsOption_DnsOption_MIN;
  static constexpr DnsOption DnsOption_MAX =
    WifiConfigurationSpecifics_DnsOption_DnsOption_MAX;
  static constexpr int DnsOption_ARRAYSIZE =
    WifiConfigurationSpecifics_DnsOption_DnsOption_ARRAYSIZE;
  template<typename T>
  static inline const std::string& DnsOption_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DnsOption>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DnsOption_Name.");
    return WifiConfigurationSpecifics_DnsOption_Name(enum_t_value);
  }
  static inline bool DnsOption_Parse(const std::string& name,
      DnsOption* value) {
    return WifiConfigurationSpecifics_DnsOption_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCustomDnsFieldNumber = 8,
    kHexSsidFieldNumber = 1,
    kPassphraseFieldNumber = 3,
    kProxyConfigurationFieldNumber = 7,
    kSecurityTypeFieldNumber = 2,
    kAutomaticallyConnectFieldNumber = 4,
    kIsPreferredFieldNumber = 5,
    kMeteredFieldNumber = 6,
    kLastConnectedTimestampFieldNumber = 9,
    kDnsOptionFieldNumber = 10,
  };
  // repeated string custom_dns = 8;
  int custom_dns_size() const;
  void clear_custom_dns();
  const std::string& custom_dns(int index) const;
  std::string* mutable_custom_dns(int index);
  void set_custom_dns(int index, const std::string& value);
  void set_custom_dns(int index, std::string&& value);
  void set_custom_dns(int index, const char* value);
  void set_custom_dns(int index, const char* value, size_t size);
  std::string* add_custom_dns();
  void add_custom_dns(const std::string& value);
  void add_custom_dns(std::string&& value);
  void add_custom_dns(const char* value);
  void add_custom_dns(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& custom_dns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_custom_dns();

  // optional bytes hex_ssid = 1;
  bool has_hex_ssid() const;
  void clear_hex_ssid();
  const std::string& hex_ssid() const;
  void set_hex_ssid(const std::string& value);
  void set_hex_ssid(std::string&& value);
  void set_hex_ssid(const char* value);
  void set_hex_ssid(const void* value, size_t size);
  std::string* mutable_hex_ssid();
  std::string* release_hex_ssid();
  void set_allocated_hex_ssid(std::string* hex_ssid);

  // optional bytes passphrase = 3;
  bool has_passphrase() const;
  void clear_passphrase();
  const std::string& passphrase() const;
  void set_passphrase(const std::string& value);
  void set_passphrase(std::string&& value);
  void set_passphrase(const char* value);
  void set_passphrase(const void* value, size_t size);
  std::string* mutable_passphrase();
  std::string* release_passphrase();
  void set_allocated_passphrase(std::string* passphrase);

  // optional .sync_pb.WifiConfigurationSpecifics.ProxyConfiguration proxy_configuration = 7;
  bool has_proxy_configuration() const;
  void clear_proxy_configuration();
  const ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration& proxy_configuration() const;
  ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration* release_proxy_configuration();
  ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration* mutable_proxy_configuration();
  void set_allocated_proxy_configuration(::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration* proxy_configuration);

  // optional .sync_pb.WifiConfigurationSpecifics.SecurityType security_type = 2;
  bool has_security_type() const;
  void clear_security_type();
  ::sync_pb::WifiConfigurationSpecifics_SecurityType security_type() const;
  void set_security_type(::sync_pb::WifiConfigurationSpecifics_SecurityType value);

  // optional .sync_pb.WifiConfigurationSpecifics.AutomaticallyConnectOption automatically_connect = 4;
  bool has_automatically_connect() const;
  void clear_automatically_connect();
  ::sync_pb::WifiConfigurationSpecifics_AutomaticallyConnectOption automatically_connect() const;
  void set_automatically_connect(::sync_pb::WifiConfigurationSpecifics_AutomaticallyConnectOption value);

  // optional .sync_pb.WifiConfigurationSpecifics.IsPreferredOption is_preferred = 5;
  bool has_is_preferred() const;
  void clear_is_preferred();
  ::sync_pb::WifiConfigurationSpecifics_IsPreferredOption is_preferred() const;
  void set_is_preferred(::sync_pb::WifiConfigurationSpecifics_IsPreferredOption value);

  // optional .sync_pb.WifiConfigurationSpecifics.MeteredOption metered = 6;
  bool has_metered() const;
  void clear_metered();
  ::sync_pb::WifiConfigurationSpecifics_MeteredOption metered() const;
  void set_metered(::sync_pb::WifiConfigurationSpecifics_MeteredOption value);

  // optional int64 last_connected_timestamp = 9;
  bool has_last_connected_timestamp() const;
  void clear_last_connected_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 last_connected_timestamp() const;
  void set_last_connected_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .sync_pb.WifiConfigurationSpecifics.DnsOption dns_option = 10;
  bool has_dns_option() const;
  void clear_dns_option();
  ::sync_pb::WifiConfigurationSpecifics_DnsOption dns_option() const;
  void set_dns_option(::sync_pb::WifiConfigurationSpecifics_DnsOption value);

  // @@protoc_insertion_point(class_scope:sync_pb.WifiConfigurationSpecifics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> custom_dns_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hex_ssid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passphrase_;
  ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration* proxy_configuration_;
  int security_type_;
  int automatically_connect_;
  int is_preferred_;
  int metered_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_connected_timestamp_;
  int dns_option_;
  friend struct ::TableStruct_components_2fsync_2fprotocol_2fwifi_5fconfiguration_5fspecifics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration

// optional string http_proxy_url = 1;
inline bool WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::has_http_proxy_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::clear_http_proxy_url() {
  http_proxy_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::http_proxy_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.http_proxy_url)
  return http_proxy_url_.GetNoArena();
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_http_proxy_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  http_proxy_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.http_proxy_url)
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_http_proxy_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  http_proxy_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.http_proxy_url)
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_http_proxy_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  http_proxy_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.http_proxy_url)
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_http_proxy_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  http_proxy_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.http_proxy_url)
}
inline std::string* WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::mutable_http_proxy_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.http_proxy_url)
  return http_proxy_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::release_http_proxy_url() {
  // @@protoc_insertion_point(field_release:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.http_proxy_url)
  if (!has_http_proxy_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return http_proxy_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_allocated_http_proxy_url(std::string* http_proxy_url) {
  if (http_proxy_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  http_proxy_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), http_proxy_url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.http_proxy_url)
}

// optional int32 http_proxy_port = 2;
inline bool WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::has_http_proxy_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::clear_http_proxy_port() {
  http_proxy_port_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::http_proxy_port() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.http_proxy_port)
  return http_proxy_port_;
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_http_proxy_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  http_proxy_port_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.http_proxy_port)
}

// optional string secure_http_proxy_url = 3;
inline bool WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::has_secure_http_proxy_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::clear_secure_http_proxy_url() {
  secure_http_proxy_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::secure_http_proxy_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.secure_http_proxy_url)
  return secure_http_proxy_url_.GetNoArena();
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_secure_http_proxy_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  secure_http_proxy_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.secure_http_proxy_url)
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_secure_http_proxy_url(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  secure_http_proxy_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.secure_http_proxy_url)
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_secure_http_proxy_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  secure_http_proxy_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.secure_http_proxy_url)
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_secure_http_proxy_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  secure_http_proxy_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.secure_http_proxy_url)
}
inline std::string* WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::mutable_secure_http_proxy_url() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.secure_http_proxy_url)
  return secure_http_proxy_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::release_secure_http_proxy_url() {
  // @@protoc_insertion_point(field_release:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.secure_http_proxy_url)
  if (!has_secure_http_proxy_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return secure_http_proxy_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_allocated_secure_http_proxy_url(std::string* secure_http_proxy_url) {
  if (secure_http_proxy_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  secure_http_proxy_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secure_http_proxy_url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.secure_http_proxy_url)
}

// optional int32 secure_http_proxy_port = 4;
inline bool WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::has_secure_http_proxy_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::clear_secure_http_proxy_port() {
  secure_http_proxy_port_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::secure_http_proxy_port() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.secure_http_proxy_port)
  return secure_http_proxy_port_;
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_secure_http_proxy_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  secure_http_proxy_port_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.secure_http_proxy_port)
}

// optional string socks_host_url = 5;
inline bool WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::has_socks_host_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::clear_socks_host_url() {
  socks_host_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::socks_host_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.socks_host_url)
  return socks_host_url_.GetNoArena();
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_socks_host_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  socks_host_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.socks_host_url)
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_socks_host_url(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  socks_host_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.socks_host_url)
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_socks_host_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  socks_host_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.socks_host_url)
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_socks_host_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  socks_host_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.socks_host_url)
}
inline std::string* WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::mutable_socks_host_url() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.socks_host_url)
  return socks_host_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::release_socks_host_url() {
  // @@protoc_insertion_point(field_release:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.socks_host_url)
  if (!has_socks_host_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return socks_host_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_allocated_socks_host_url(std::string* socks_host_url) {
  if (socks_host_url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  socks_host_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), socks_host_url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.socks_host_url)
}

// optional int32 socks_host_port = 6;
inline bool WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::has_socks_host_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::clear_socks_host_port() {
  socks_host_port_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::socks_host_port() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.socks_host_port)
  return socks_host_port_;
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_socks_host_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  socks_host_port_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.socks_host_port)
}

// repeated string whitelisted_domains = 7;
inline int WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::whitelisted_domains_size() const {
  return whitelisted_domains_.size();
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::clear_whitelisted_domains() {
  whitelisted_domains_.Clear();
}
inline const std::string& WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::whitelisted_domains(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.whitelisted_domains)
  return whitelisted_domains_.Get(index);
}
inline std::string* WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::mutable_whitelisted_domains(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.whitelisted_domains)
  return whitelisted_domains_.Mutable(index);
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_whitelisted_domains(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.whitelisted_domains)
  whitelisted_domains_.Mutable(index)->assign(value);
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_whitelisted_domains(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.whitelisted_domains)
  whitelisted_domains_.Mutable(index)->assign(std::move(value));
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_whitelisted_domains(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  whitelisted_domains_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.whitelisted_domains)
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::set_whitelisted_domains(int index, const char* value, size_t size) {
  whitelisted_domains_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.whitelisted_domains)
}
inline std::string* WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::add_whitelisted_domains() {
  // @@protoc_insertion_point(field_add_mutable:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.whitelisted_domains)
  return whitelisted_domains_.Add();
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::add_whitelisted_domains(const std::string& value) {
  whitelisted_domains_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.whitelisted_domains)
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::add_whitelisted_domains(std::string&& value) {
  whitelisted_domains_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.whitelisted_domains)
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::add_whitelisted_domains(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  whitelisted_domains_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.whitelisted_domains)
}
inline void WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::add_whitelisted_domains(const char* value, size_t size) {
  whitelisted_domains_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.whitelisted_domains)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::whitelisted_domains() const {
  // @@protoc_insertion_point(field_list:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.whitelisted_domains)
  return whitelisted_domains_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration::mutable_whitelisted_domains() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration.whitelisted_domains)
  return &whitelisted_domains_;
}

// -------------------------------------------------------------------

// WifiConfigurationSpecifics_ProxyConfiguration

// optional .sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ProxyOption proxy_option = 1;
inline bool WifiConfigurationSpecifics_ProxyConfiguration::has_proxy_option() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WifiConfigurationSpecifics_ProxyConfiguration::clear_proxy_option() {
  proxy_option_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption WifiConfigurationSpecifics_ProxyConfiguration::proxy_option() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.proxy_option)
  return static_cast< ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption >(proxy_option_);
}
inline void WifiConfigurationSpecifics_ProxyConfiguration::set_proxy_option(::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption value) {
  assert(::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  proxy_option_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.proxy_option)
}

// optional string autoconfiguration_url = 2;
inline bool WifiConfigurationSpecifics_ProxyConfiguration::has_autoconfiguration_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WifiConfigurationSpecifics_ProxyConfiguration::clear_autoconfiguration_url() {
  autoconfiguration_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WifiConfigurationSpecifics_ProxyConfiguration::autoconfiguration_url() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.autoconfiguration_url)
  return autoconfiguration_url_.GetNoArena();
}
inline void WifiConfigurationSpecifics_ProxyConfiguration::set_autoconfiguration_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  autoconfiguration_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.autoconfiguration_url)
}
inline void WifiConfigurationSpecifics_ProxyConfiguration::set_autoconfiguration_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  autoconfiguration_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.autoconfiguration_url)
}
inline void WifiConfigurationSpecifics_ProxyConfiguration::set_autoconfiguration_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  autoconfiguration_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.autoconfiguration_url)
}
inline void WifiConfigurationSpecifics_ProxyConfiguration::set_autoconfiguration_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  autoconfiguration_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.autoconfiguration_url)
}
inline std::string* WifiConfigurationSpecifics_ProxyConfiguration::mutable_autoconfiguration_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.autoconfiguration_url)
  return autoconfiguration_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WifiConfigurationSpecifics_ProxyConfiguration::release_autoconfiguration_url() {
  // @@protoc_insertion_point(field_release:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.autoconfiguration_url)
  if (!has_autoconfiguration_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return autoconfiguration_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WifiConfigurationSpecifics_ProxyConfiguration::set_allocated_autoconfiguration_url(std::string* autoconfiguration_url) {
  if (autoconfiguration_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  autoconfiguration_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), autoconfiguration_url);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.autoconfiguration_url)
}

// optional .sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.ManualProxyConfiguration manual_proxy_configuration = 3;
inline bool WifiConfigurationSpecifics_ProxyConfiguration::has_manual_proxy_configuration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WifiConfigurationSpecifics_ProxyConfiguration::clear_manual_proxy_configuration() {
  if (manual_proxy_configuration_ != nullptr) manual_proxy_configuration_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration& WifiConfigurationSpecifics_ProxyConfiguration::manual_proxy_configuration() const {
  const ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* p = manual_proxy_configuration_;
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.manual_proxy_configuration)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration*>(
      &::sync_pb::_WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration_default_instance_);
}
inline ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* WifiConfigurationSpecifics_ProxyConfiguration::release_manual_proxy_configuration() {
  // @@protoc_insertion_point(field_release:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.manual_proxy_configuration)
  _has_bits_[0] &= ~0x00000002u;
  ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* temp = manual_proxy_configuration_;
  manual_proxy_configuration_ = nullptr;
  return temp;
}
inline ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* WifiConfigurationSpecifics_ProxyConfiguration::mutable_manual_proxy_configuration() {
  _has_bits_[0] |= 0x00000002u;
  if (manual_proxy_configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration>(GetArenaNoVirtual());
    manual_proxy_configuration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.manual_proxy_configuration)
  return manual_proxy_configuration_;
}
inline void WifiConfigurationSpecifics_ProxyConfiguration::set_allocated_manual_proxy_configuration(::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ManualProxyConfiguration* manual_proxy_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete manual_proxy_configuration_;
  }
  if (manual_proxy_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      manual_proxy_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, manual_proxy_configuration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  manual_proxy_configuration_ = manual_proxy_configuration;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WifiConfigurationSpecifics.ProxyConfiguration.manual_proxy_configuration)
}

// -------------------------------------------------------------------

// WifiConfigurationSpecifics

// optional bytes hex_ssid = 1;
inline bool WifiConfigurationSpecifics::has_hex_ssid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WifiConfigurationSpecifics::clear_hex_ssid() {
  hex_ssid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WifiConfigurationSpecifics::hex_ssid() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.hex_ssid)
  return hex_ssid_.GetNoArena();
}
inline void WifiConfigurationSpecifics::set_hex_ssid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hex_ssid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.hex_ssid)
}
inline void WifiConfigurationSpecifics::set_hex_ssid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  hex_ssid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.WifiConfigurationSpecifics.hex_ssid)
}
inline void WifiConfigurationSpecifics::set_hex_ssid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  hex_ssid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.WifiConfigurationSpecifics.hex_ssid)
}
inline void WifiConfigurationSpecifics::set_hex_ssid(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  hex_ssid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WifiConfigurationSpecifics.hex_ssid)
}
inline std::string* WifiConfigurationSpecifics::mutable_hex_ssid() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:sync_pb.WifiConfigurationSpecifics.hex_ssid)
  return hex_ssid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WifiConfigurationSpecifics::release_hex_ssid() {
  // @@protoc_insertion_point(field_release:sync_pb.WifiConfigurationSpecifics.hex_ssid)
  if (!has_hex_ssid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hex_ssid_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WifiConfigurationSpecifics::set_allocated_hex_ssid(std::string* hex_ssid) {
  if (hex_ssid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hex_ssid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hex_ssid);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WifiConfigurationSpecifics.hex_ssid)
}

// optional .sync_pb.WifiConfigurationSpecifics.SecurityType security_type = 2;
inline bool WifiConfigurationSpecifics::has_security_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WifiConfigurationSpecifics::clear_security_type() {
  security_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::sync_pb::WifiConfigurationSpecifics_SecurityType WifiConfigurationSpecifics::security_type() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.security_type)
  return static_cast< ::sync_pb::WifiConfigurationSpecifics_SecurityType >(security_type_);
}
inline void WifiConfigurationSpecifics::set_security_type(::sync_pb::WifiConfigurationSpecifics_SecurityType value) {
  assert(::sync_pb::WifiConfigurationSpecifics_SecurityType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  security_type_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.security_type)
}

// optional bytes passphrase = 3;
inline bool WifiConfigurationSpecifics::has_passphrase() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WifiConfigurationSpecifics::clear_passphrase() {
  passphrase_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WifiConfigurationSpecifics::passphrase() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.passphrase)
  return passphrase_.GetNoArena();
}
inline void WifiConfigurationSpecifics::set_passphrase(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  passphrase_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.passphrase)
}
inline void WifiConfigurationSpecifics::set_passphrase(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  passphrase_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sync_pb.WifiConfigurationSpecifics.passphrase)
}
inline void WifiConfigurationSpecifics::set_passphrase(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  passphrase_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sync_pb.WifiConfigurationSpecifics.passphrase)
}
inline void WifiConfigurationSpecifics::set_passphrase(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  passphrase_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WifiConfigurationSpecifics.passphrase)
}
inline std::string* WifiConfigurationSpecifics::mutable_passphrase() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:sync_pb.WifiConfigurationSpecifics.passphrase)
  return passphrase_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WifiConfigurationSpecifics::release_passphrase() {
  // @@protoc_insertion_point(field_release:sync_pb.WifiConfigurationSpecifics.passphrase)
  if (!has_passphrase()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return passphrase_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WifiConfigurationSpecifics::set_allocated_passphrase(std::string* passphrase) {
  if (passphrase != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  passphrase_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passphrase);
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WifiConfigurationSpecifics.passphrase)
}

// optional .sync_pb.WifiConfigurationSpecifics.AutomaticallyConnectOption automatically_connect = 4;
inline bool WifiConfigurationSpecifics::has_automatically_connect() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WifiConfigurationSpecifics::clear_automatically_connect() {
  automatically_connect_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::sync_pb::WifiConfigurationSpecifics_AutomaticallyConnectOption WifiConfigurationSpecifics::automatically_connect() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.automatically_connect)
  return static_cast< ::sync_pb::WifiConfigurationSpecifics_AutomaticallyConnectOption >(automatically_connect_);
}
inline void WifiConfigurationSpecifics::set_automatically_connect(::sync_pb::WifiConfigurationSpecifics_AutomaticallyConnectOption value) {
  assert(::sync_pb::WifiConfigurationSpecifics_AutomaticallyConnectOption_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  automatically_connect_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.automatically_connect)
}

// optional .sync_pb.WifiConfigurationSpecifics.IsPreferredOption is_preferred = 5;
inline bool WifiConfigurationSpecifics::has_is_preferred() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WifiConfigurationSpecifics::clear_is_preferred() {
  is_preferred_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::sync_pb::WifiConfigurationSpecifics_IsPreferredOption WifiConfigurationSpecifics::is_preferred() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.is_preferred)
  return static_cast< ::sync_pb::WifiConfigurationSpecifics_IsPreferredOption >(is_preferred_);
}
inline void WifiConfigurationSpecifics::set_is_preferred(::sync_pb::WifiConfigurationSpecifics_IsPreferredOption value) {
  assert(::sync_pb::WifiConfigurationSpecifics_IsPreferredOption_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  is_preferred_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.is_preferred)
}

// optional .sync_pb.WifiConfigurationSpecifics.MeteredOption metered = 6;
inline bool WifiConfigurationSpecifics::has_metered() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WifiConfigurationSpecifics::clear_metered() {
  metered_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::sync_pb::WifiConfigurationSpecifics_MeteredOption WifiConfigurationSpecifics::metered() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.metered)
  return static_cast< ::sync_pb::WifiConfigurationSpecifics_MeteredOption >(metered_);
}
inline void WifiConfigurationSpecifics::set_metered(::sync_pb::WifiConfigurationSpecifics_MeteredOption value) {
  assert(::sync_pb::WifiConfigurationSpecifics_MeteredOption_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  metered_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.metered)
}

// optional .sync_pb.WifiConfigurationSpecifics.ProxyConfiguration proxy_configuration = 7;
inline bool WifiConfigurationSpecifics::has_proxy_configuration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WifiConfigurationSpecifics::clear_proxy_configuration() {
  if (proxy_configuration_ != nullptr) proxy_configuration_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration& WifiConfigurationSpecifics::proxy_configuration() const {
  const ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration* p = proxy_configuration_;
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.proxy_configuration)
  return p != nullptr ? *p : *reinterpret_cast<const ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration*>(
      &::sync_pb::_WifiConfigurationSpecifics_ProxyConfiguration_default_instance_);
}
inline ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration* WifiConfigurationSpecifics::release_proxy_configuration() {
  // @@protoc_insertion_point(field_release:sync_pb.WifiConfigurationSpecifics.proxy_configuration)
  _has_bits_[0] &= ~0x00000004u;
  ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration* temp = proxy_configuration_;
  proxy_configuration_ = nullptr;
  return temp;
}
inline ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration* WifiConfigurationSpecifics::mutable_proxy_configuration() {
  _has_bits_[0] |= 0x00000004u;
  if (proxy_configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration>(GetArenaNoVirtual());
    proxy_configuration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sync_pb.WifiConfigurationSpecifics.proxy_configuration)
  return proxy_configuration_;
}
inline void WifiConfigurationSpecifics::set_allocated_proxy_configuration(::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration* proxy_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete proxy_configuration_;
  }
  if (proxy_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      proxy_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proxy_configuration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  proxy_configuration_ = proxy_configuration;
  // @@protoc_insertion_point(field_set_allocated:sync_pb.WifiConfigurationSpecifics.proxy_configuration)
}

// optional .sync_pb.WifiConfigurationSpecifics.DnsOption dns_option = 10;
inline bool WifiConfigurationSpecifics::has_dns_option() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WifiConfigurationSpecifics::clear_dns_option() {
  dns_option_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::sync_pb::WifiConfigurationSpecifics_DnsOption WifiConfigurationSpecifics::dns_option() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.dns_option)
  return static_cast< ::sync_pb::WifiConfigurationSpecifics_DnsOption >(dns_option_);
}
inline void WifiConfigurationSpecifics::set_dns_option(::sync_pb::WifiConfigurationSpecifics_DnsOption value) {
  assert(::sync_pb::WifiConfigurationSpecifics_DnsOption_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  dns_option_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.dns_option)
}

// repeated string custom_dns = 8;
inline int WifiConfigurationSpecifics::custom_dns_size() const {
  return custom_dns_.size();
}
inline void WifiConfigurationSpecifics::clear_custom_dns() {
  custom_dns_.Clear();
}
inline const std::string& WifiConfigurationSpecifics::custom_dns(int index) const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.custom_dns)
  return custom_dns_.Get(index);
}
inline std::string* WifiConfigurationSpecifics::mutable_custom_dns(int index) {
  // @@protoc_insertion_point(field_mutable:sync_pb.WifiConfigurationSpecifics.custom_dns)
  return custom_dns_.Mutable(index);
}
inline void WifiConfigurationSpecifics::set_custom_dns(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.custom_dns)
  custom_dns_.Mutable(index)->assign(value);
}
inline void WifiConfigurationSpecifics::set_custom_dns(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.custom_dns)
  custom_dns_.Mutable(index)->assign(std::move(value));
}
inline void WifiConfigurationSpecifics::set_custom_dns(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  custom_dns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sync_pb.WifiConfigurationSpecifics.custom_dns)
}
inline void WifiConfigurationSpecifics::set_custom_dns(int index, const char* value, size_t size) {
  custom_dns_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sync_pb.WifiConfigurationSpecifics.custom_dns)
}
inline std::string* WifiConfigurationSpecifics::add_custom_dns() {
  // @@protoc_insertion_point(field_add_mutable:sync_pb.WifiConfigurationSpecifics.custom_dns)
  return custom_dns_.Add();
}
inline void WifiConfigurationSpecifics::add_custom_dns(const std::string& value) {
  custom_dns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sync_pb.WifiConfigurationSpecifics.custom_dns)
}
inline void WifiConfigurationSpecifics::add_custom_dns(std::string&& value) {
  custom_dns_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sync_pb.WifiConfigurationSpecifics.custom_dns)
}
inline void WifiConfigurationSpecifics::add_custom_dns(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  custom_dns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sync_pb.WifiConfigurationSpecifics.custom_dns)
}
inline void WifiConfigurationSpecifics::add_custom_dns(const char* value, size_t size) {
  custom_dns_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sync_pb.WifiConfigurationSpecifics.custom_dns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WifiConfigurationSpecifics::custom_dns() const {
  // @@protoc_insertion_point(field_list:sync_pb.WifiConfigurationSpecifics.custom_dns)
  return custom_dns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
WifiConfigurationSpecifics::mutable_custom_dns() {
  // @@protoc_insertion_point(field_mutable_list:sync_pb.WifiConfigurationSpecifics.custom_dns)
  return &custom_dns_;
}

// optional int64 last_connected_timestamp = 9;
inline bool WifiConfigurationSpecifics::has_last_connected_timestamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WifiConfigurationSpecifics::clear_last_connected_timestamp() {
  last_connected_timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WifiConfigurationSpecifics::last_connected_timestamp() const {
  // @@protoc_insertion_point(field_get:sync_pb.WifiConfigurationSpecifics.last_connected_timestamp)
  return last_connected_timestamp_;
}
inline void WifiConfigurationSpecifics::set_last_connected_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  last_connected_timestamp_ = value;
  // @@protoc_insertion_point(field_set:sync_pb.WifiConfigurationSpecifics.last_connected_timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync_pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sync_pb::WifiConfigurationSpecifics_ProxyConfiguration_ProxyOption> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::WifiConfigurationSpecifics_SecurityType> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::WifiConfigurationSpecifics_AutomaticallyConnectOption> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::WifiConfigurationSpecifics_IsPreferredOption> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::WifiConfigurationSpecifics_MeteredOption> : ::std::true_type {};
template <> struct is_proto_enum< ::sync_pb::WifiConfigurationSpecifics_DnsOption> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsync_2fprotocol_2fwifi_5fconfiguration_5fspecifics_2eproto

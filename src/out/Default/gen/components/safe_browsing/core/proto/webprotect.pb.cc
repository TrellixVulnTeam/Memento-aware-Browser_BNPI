// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webprotect.proto

#include "webprotect.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_webprotect_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DlpDeepScanningClientRequest_webprotect_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_webprotect_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DlpDeepScanningVerdict_webprotect_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_webprotect_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DlpDeepScanningVerdict_MatchedDetector_webprotect_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_webprotect_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DlpDeepScanningVerdict_TriggeredRule_webprotect_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_webprotect_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MalwareDeepScanningClientRequest_webprotect_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_webprotect_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MalwareDeepScanningVerdict_webprotect_2eproto;
namespace safe_browsing {
class MalwareDeepScanningClientRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MalwareDeepScanningClientRequest> _instance;
} _MalwareDeepScanningClientRequest_default_instance_;
class DlpDeepScanningClientRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DlpDeepScanningClientRequest> _instance;
} _DlpDeepScanningClientRequest_default_instance_;
class DeepScanningClientRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeepScanningClientRequest> _instance;
} _DeepScanningClientRequest_default_instance_;
class MalwareDeepScanningVerdictDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MalwareDeepScanningVerdict> _instance;
} _MalwareDeepScanningVerdict_default_instance_;
class DlpDeepScanningVerdict_MatchedDetectorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DlpDeepScanningVerdict_MatchedDetector> _instance;
} _DlpDeepScanningVerdict_MatchedDetector_default_instance_;
class DlpDeepScanningVerdict_TriggeredRuleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DlpDeepScanningVerdict_TriggeredRule> _instance;
} _DlpDeepScanningVerdict_TriggeredRule_default_instance_;
class DlpDeepScanningVerdictDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DlpDeepScanningVerdict> _instance;
} _DlpDeepScanningVerdict_default_instance_;
class DeepScanningClientResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeepScanningClientResponse> _instance;
} _DeepScanningClientResponse_default_instance_;
}  // namespace safe_browsing
static void InitDefaultsscc_info_DeepScanningClientRequest_webprotect_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safe_browsing::_DeepScanningClientRequest_default_instance_;
    new (ptr) ::safe_browsing::DeepScanningClientRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safe_browsing::DeepScanningClientRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeepScanningClientRequest_webprotect_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DeepScanningClientRequest_webprotect_2eproto}, {
      &scc_info_MalwareDeepScanningClientRequest_webprotect_2eproto.base,
      &scc_info_DlpDeepScanningClientRequest_webprotect_2eproto.base,}};

static void InitDefaultsscc_info_DeepScanningClientResponse_webprotect_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safe_browsing::_DeepScanningClientResponse_default_instance_;
    new (ptr) ::safe_browsing::DeepScanningClientResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safe_browsing::DeepScanningClientResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeepScanningClientResponse_webprotect_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DeepScanningClientResponse_webprotect_2eproto}, {
      &scc_info_MalwareDeepScanningVerdict_webprotect_2eproto.base,
      &scc_info_DlpDeepScanningVerdict_webprotect_2eproto.base,}};

static void InitDefaultsscc_info_DlpDeepScanningClientRequest_webprotect_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safe_browsing::_DlpDeepScanningClientRequest_default_instance_;
    new (ptr) ::safe_browsing::DlpDeepScanningClientRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safe_browsing::DlpDeepScanningClientRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DlpDeepScanningClientRequest_webprotect_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DlpDeepScanningClientRequest_webprotect_2eproto}, {}};

static void InitDefaultsscc_info_DlpDeepScanningVerdict_webprotect_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safe_browsing::_DlpDeepScanningVerdict_default_instance_;
    new (ptr) ::safe_browsing::DlpDeepScanningVerdict();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safe_browsing::DlpDeepScanningVerdict::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DlpDeepScanningVerdict_webprotect_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DlpDeepScanningVerdict_webprotect_2eproto}, {
      &scc_info_DlpDeepScanningVerdict_TriggeredRule_webprotect_2eproto.base,}};

static void InitDefaultsscc_info_DlpDeepScanningVerdict_MatchedDetector_webprotect_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safe_browsing::_DlpDeepScanningVerdict_MatchedDetector_default_instance_;
    new (ptr) ::safe_browsing::DlpDeepScanningVerdict_MatchedDetector();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safe_browsing::DlpDeepScanningVerdict_MatchedDetector::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DlpDeepScanningVerdict_MatchedDetector_webprotect_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DlpDeepScanningVerdict_MatchedDetector_webprotect_2eproto}, {}};

static void InitDefaultsscc_info_DlpDeepScanningVerdict_TriggeredRule_webprotect_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safe_browsing::_DlpDeepScanningVerdict_TriggeredRule_default_instance_;
    new (ptr) ::safe_browsing::DlpDeepScanningVerdict_TriggeredRule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safe_browsing::DlpDeepScanningVerdict_TriggeredRule::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DlpDeepScanningVerdict_TriggeredRule_webprotect_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DlpDeepScanningVerdict_TriggeredRule_webprotect_2eproto}, {
      &scc_info_DlpDeepScanningVerdict_MatchedDetector_webprotect_2eproto.base,}};

static void InitDefaultsscc_info_MalwareDeepScanningClientRequest_webprotect_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safe_browsing::_MalwareDeepScanningClientRequest_default_instance_;
    new (ptr) ::safe_browsing::MalwareDeepScanningClientRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safe_browsing::MalwareDeepScanningClientRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MalwareDeepScanningClientRequest_webprotect_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MalwareDeepScanningClientRequest_webprotect_2eproto}, {}};

static void InitDefaultsscc_info_MalwareDeepScanningVerdict_webprotect_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safe_browsing::_MalwareDeepScanningVerdict_default_instance_;
    new (ptr) ::safe_browsing::MalwareDeepScanningVerdict();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safe_browsing::MalwareDeepScanningVerdict::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MalwareDeepScanningVerdict_webprotect_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MalwareDeepScanningVerdict_webprotect_2eproto}, {}};

namespace safe_browsing {
bool MalwareDeepScanningClientRequest_Population_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> MalwareDeepScanningClientRequest_Population_strings[3] = {};

static const char MalwareDeepScanningClientRequest_Population_names[] =
  "POPULATION_ENTERPRISE"
  "POPULATION_TITANIUM"
  "POPULATION_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry MalwareDeepScanningClientRequest_Population_entries[] = {
  { {MalwareDeepScanningClientRequest_Population_names + 0, 21}, 1 },
  { {MalwareDeepScanningClientRequest_Population_names + 21, 19}, 2 },
  { {MalwareDeepScanningClientRequest_Population_names + 40, 18}, 0 },
};

static const int MalwareDeepScanningClientRequest_Population_entries_by_number[] = {
  2, // 0 -> POPULATION_UNKNOWN
  0, // 1 -> POPULATION_ENTERPRISE
  1, // 2 -> POPULATION_TITANIUM
};

const std::string& MalwareDeepScanningClientRequest_Population_Name(
    MalwareDeepScanningClientRequest_Population value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          MalwareDeepScanningClientRequest_Population_entries,
          MalwareDeepScanningClientRequest_Population_entries_by_number,
          3, MalwareDeepScanningClientRequest_Population_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      MalwareDeepScanningClientRequest_Population_entries,
      MalwareDeepScanningClientRequest_Population_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     MalwareDeepScanningClientRequest_Population_strings[idx].get();
}
bool MalwareDeepScanningClientRequest_Population_Parse(
    const std::string& name, MalwareDeepScanningClientRequest_Population* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      MalwareDeepScanningClientRequest_Population_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<MalwareDeepScanningClientRequest_Population>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MalwareDeepScanningClientRequest_Population MalwareDeepScanningClientRequest::POPULATION_UNKNOWN;
constexpr MalwareDeepScanningClientRequest_Population MalwareDeepScanningClientRequest::POPULATION_ENTERPRISE;
constexpr MalwareDeepScanningClientRequest_Population MalwareDeepScanningClientRequest::POPULATION_TITANIUM;
constexpr MalwareDeepScanningClientRequest_Population MalwareDeepScanningClientRequest::Population_MIN;
constexpr MalwareDeepScanningClientRequest_Population MalwareDeepScanningClientRequest::Population_MAX;
constexpr int MalwareDeepScanningClientRequest::Population_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DlpDeepScanningClientRequest_ContentSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DlpDeepScanningClientRequest_ContentSource_strings[4] = {};

static const char DlpDeepScanningClientRequest_ContentSource_names[] =
  "CONTENT_SOURCE_UNKNOWN"
  "FILE_DOWNLOAD"
  "FILE_UPLOAD"
  "WEB_CONTENT_UPLOAD";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DlpDeepScanningClientRequest_ContentSource_entries[] = {
  { {DlpDeepScanningClientRequest_ContentSource_names + 0, 22}, 0 },
  { {DlpDeepScanningClientRequest_ContentSource_names + 22, 13}, 1 },
  { {DlpDeepScanningClientRequest_ContentSource_names + 35, 11}, 2 },
  { {DlpDeepScanningClientRequest_ContentSource_names + 46, 18}, 3 },
};

static const int DlpDeepScanningClientRequest_ContentSource_entries_by_number[] = {
  0, // 0 -> CONTENT_SOURCE_UNKNOWN
  1, // 1 -> FILE_DOWNLOAD
  2, // 2 -> FILE_UPLOAD
  3, // 3 -> WEB_CONTENT_UPLOAD
};

const std::string& DlpDeepScanningClientRequest_ContentSource_Name(
    DlpDeepScanningClientRequest_ContentSource value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DlpDeepScanningClientRequest_ContentSource_entries,
          DlpDeepScanningClientRequest_ContentSource_entries_by_number,
          4, DlpDeepScanningClientRequest_ContentSource_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DlpDeepScanningClientRequest_ContentSource_entries,
      DlpDeepScanningClientRequest_ContentSource_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DlpDeepScanningClientRequest_ContentSource_strings[idx].get();
}
bool DlpDeepScanningClientRequest_ContentSource_Parse(
    const std::string& name, DlpDeepScanningClientRequest_ContentSource* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DlpDeepScanningClientRequest_ContentSource_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<DlpDeepScanningClientRequest_ContentSource>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DlpDeepScanningClientRequest_ContentSource DlpDeepScanningClientRequest::CONTENT_SOURCE_UNKNOWN;
constexpr DlpDeepScanningClientRequest_ContentSource DlpDeepScanningClientRequest::FILE_DOWNLOAD;
constexpr DlpDeepScanningClientRequest_ContentSource DlpDeepScanningClientRequest::FILE_UPLOAD;
constexpr DlpDeepScanningClientRequest_ContentSource DlpDeepScanningClientRequest::WEB_CONTENT_UPLOAD;
constexpr DlpDeepScanningClientRequest_ContentSource DlpDeepScanningClientRequest::ContentSource_MIN;
constexpr DlpDeepScanningClientRequest_ContentSource DlpDeepScanningClientRequest::ContentSource_MAX;
constexpr int DlpDeepScanningClientRequest::ContentSource_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool MalwareDeepScanningVerdict_Verdict_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> MalwareDeepScanningVerdict_Verdict_strings[5] = {};

static const char MalwareDeepScanningVerdict_Verdict_names[] =
  "CLEAN"
  "MALWARE"
  "SCAN_FAILURE"
  "UWS"
  "VERDICT_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry MalwareDeepScanningVerdict_Verdict_entries[] = {
  { {MalwareDeepScanningVerdict_Verdict_names + 0, 5}, 1 },
  { {MalwareDeepScanningVerdict_Verdict_names + 5, 7}, 3 },
  { {MalwareDeepScanningVerdict_Verdict_names + 12, 12}, 4 },
  { {MalwareDeepScanningVerdict_Verdict_names + 24, 3}, 2 },
  { {MalwareDeepScanningVerdict_Verdict_names + 27, 19}, 0 },
};

static const int MalwareDeepScanningVerdict_Verdict_entries_by_number[] = {
  4, // 0 -> VERDICT_UNSPECIFIED
  0, // 1 -> CLEAN
  3, // 2 -> UWS
  1, // 3 -> MALWARE
  2, // 4 -> SCAN_FAILURE
};

const std::string& MalwareDeepScanningVerdict_Verdict_Name(
    MalwareDeepScanningVerdict_Verdict value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          MalwareDeepScanningVerdict_Verdict_entries,
          MalwareDeepScanningVerdict_Verdict_entries_by_number,
          5, MalwareDeepScanningVerdict_Verdict_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      MalwareDeepScanningVerdict_Verdict_entries,
      MalwareDeepScanningVerdict_Verdict_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     MalwareDeepScanningVerdict_Verdict_strings[idx].get();
}
bool MalwareDeepScanningVerdict_Verdict_Parse(
    const std::string& name, MalwareDeepScanningVerdict_Verdict* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      MalwareDeepScanningVerdict_Verdict_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<MalwareDeepScanningVerdict_Verdict>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MalwareDeepScanningVerdict_Verdict MalwareDeepScanningVerdict::VERDICT_UNSPECIFIED;
constexpr MalwareDeepScanningVerdict_Verdict MalwareDeepScanningVerdict::CLEAN;
constexpr MalwareDeepScanningVerdict_Verdict MalwareDeepScanningVerdict::UWS;
constexpr MalwareDeepScanningVerdict_Verdict MalwareDeepScanningVerdict::MALWARE;
constexpr MalwareDeepScanningVerdict_Verdict MalwareDeepScanningVerdict::SCAN_FAILURE;
constexpr MalwareDeepScanningVerdict_Verdict MalwareDeepScanningVerdict::Verdict_MIN;
constexpr MalwareDeepScanningVerdict_Verdict MalwareDeepScanningVerdict::Verdict_MAX;
constexpr int MalwareDeepScanningVerdict::Verdict_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DlpDeepScanningVerdict_TriggeredRule_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DlpDeepScanningVerdict_TriggeredRule_Action_strings[4] = {};

static const char DlpDeepScanningVerdict_TriggeredRule_Action_names[] =
  "ACTION_UNKNOWN"
  "BLOCK"
  "REPORT_ONLY"
  "WARN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DlpDeepScanningVerdict_TriggeredRule_Action_entries[] = {
  { {DlpDeepScanningVerdict_TriggeredRule_Action_names + 0, 14}, 0 },
  { {DlpDeepScanningVerdict_TriggeredRule_Action_names + 14, 5}, 3 },
  { {DlpDeepScanningVerdict_TriggeredRule_Action_names + 19, 11}, 1 },
  { {DlpDeepScanningVerdict_TriggeredRule_Action_names + 30, 4}, 2 },
};

static const int DlpDeepScanningVerdict_TriggeredRule_Action_entries_by_number[] = {
  0, // 0 -> ACTION_UNKNOWN
  2, // 1 -> REPORT_ONLY
  3, // 2 -> WARN
  1, // 3 -> BLOCK
};

const std::string& DlpDeepScanningVerdict_TriggeredRule_Action_Name(
    DlpDeepScanningVerdict_TriggeredRule_Action value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DlpDeepScanningVerdict_TriggeredRule_Action_entries,
          DlpDeepScanningVerdict_TriggeredRule_Action_entries_by_number,
          4, DlpDeepScanningVerdict_TriggeredRule_Action_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DlpDeepScanningVerdict_TriggeredRule_Action_entries,
      DlpDeepScanningVerdict_TriggeredRule_Action_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DlpDeepScanningVerdict_TriggeredRule_Action_strings[idx].get();
}
bool DlpDeepScanningVerdict_TriggeredRule_Action_Parse(
    const std::string& name, DlpDeepScanningVerdict_TriggeredRule_Action* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DlpDeepScanningVerdict_TriggeredRule_Action_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<DlpDeepScanningVerdict_TriggeredRule_Action>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DlpDeepScanningVerdict_TriggeredRule_Action DlpDeepScanningVerdict_TriggeredRule::ACTION_UNKNOWN;
constexpr DlpDeepScanningVerdict_TriggeredRule_Action DlpDeepScanningVerdict_TriggeredRule::REPORT_ONLY;
constexpr DlpDeepScanningVerdict_TriggeredRule_Action DlpDeepScanningVerdict_TriggeredRule::WARN;
constexpr DlpDeepScanningVerdict_TriggeredRule_Action DlpDeepScanningVerdict_TriggeredRule::BLOCK;
constexpr DlpDeepScanningVerdict_TriggeredRule_Action DlpDeepScanningVerdict_TriggeredRule::Action_MIN;
constexpr DlpDeepScanningVerdict_TriggeredRule_Action DlpDeepScanningVerdict_TriggeredRule::Action_MAX;
constexpr int DlpDeepScanningVerdict_TriggeredRule::Action_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DlpDeepScanningVerdict_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DlpDeepScanningVerdict_Status_strings[3] = {};

static const char DlpDeepScanningVerdict_Status_names[] =
  "FAILURE"
  "STATUS_UNKNOWN"
  "SUCCESS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DlpDeepScanningVerdict_Status_entries[] = {
  { {DlpDeepScanningVerdict_Status_names + 0, 7}, 2 },
  { {DlpDeepScanningVerdict_Status_names + 7, 14}, 0 },
  { {DlpDeepScanningVerdict_Status_names + 21, 7}, 1 },
};

static const int DlpDeepScanningVerdict_Status_entries_by_number[] = {
  1, // 0 -> STATUS_UNKNOWN
  2, // 1 -> SUCCESS
  0, // 2 -> FAILURE
};

const std::string& DlpDeepScanningVerdict_Status_Name(
    DlpDeepScanningVerdict_Status value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DlpDeepScanningVerdict_Status_entries,
          DlpDeepScanningVerdict_Status_entries_by_number,
          3, DlpDeepScanningVerdict_Status_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DlpDeepScanningVerdict_Status_entries,
      DlpDeepScanningVerdict_Status_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DlpDeepScanningVerdict_Status_strings[idx].get();
}
bool DlpDeepScanningVerdict_Status_Parse(
    const std::string& name, DlpDeepScanningVerdict_Status* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DlpDeepScanningVerdict_Status_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<DlpDeepScanningVerdict_Status>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DlpDeepScanningVerdict_Status DlpDeepScanningVerdict::STATUS_UNKNOWN;
constexpr DlpDeepScanningVerdict_Status DlpDeepScanningVerdict::SUCCESS;
constexpr DlpDeepScanningVerdict_Status DlpDeepScanningVerdict::FAILURE;
constexpr DlpDeepScanningVerdict_Status DlpDeepScanningVerdict::Status_MIN;
constexpr DlpDeepScanningVerdict_Status DlpDeepScanningVerdict::Status_MAX;
constexpr int DlpDeepScanningVerdict::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void MalwareDeepScanningClientRequest::InitAsDefaultInstance() {
}
class MalwareDeepScanningClientRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MalwareDeepScanningClientRequest>()._has_bits_);
  static void set_has_population(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MalwareDeepScanningClientRequest::MalwareDeepScanningClientRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.MalwareDeepScanningClientRequest)
}
MalwareDeepScanningClientRequest::MalwareDeepScanningClientRequest(const MalwareDeepScanningClientRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  population_ = from.population_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.MalwareDeepScanningClientRequest)
}

void MalwareDeepScanningClientRequest::SharedCtor() {
  population_ = 0;
}

MalwareDeepScanningClientRequest::~MalwareDeepScanningClientRequest() {
  // @@protoc_insertion_point(destructor:safe_browsing.MalwareDeepScanningClientRequest)
  SharedDtor();
}

void MalwareDeepScanningClientRequest::SharedDtor() {
}

void MalwareDeepScanningClientRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MalwareDeepScanningClientRequest& MalwareDeepScanningClientRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MalwareDeepScanningClientRequest_webprotect_2eproto.base);
  return *internal_default_instance();
}


void MalwareDeepScanningClientRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.MalwareDeepScanningClientRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  population_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MalwareDeepScanningClientRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .safe_browsing.MalwareDeepScanningClientRequest.Population population = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::MalwareDeepScanningClientRequest_Population_IsValid(val))) {
            set_population(static_cast<::safe_browsing::MalwareDeepScanningClientRequest_Population>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MalwareDeepScanningClientRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.MalwareDeepScanningClientRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .safe_browsing.MalwareDeepScanningClientRequest.Population population = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::safe_browsing::MalwareDeepScanningClientRequest_Population_IsValid(value)) {
            set_population(static_cast< ::safe_browsing::MalwareDeepScanningClientRequest_Population >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.MalwareDeepScanningClientRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.MalwareDeepScanningClientRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MalwareDeepScanningClientRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.MalwareDeepScanningClientRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .safe_browsing.MalwareDeepScanningClientRequest.Population population = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->population(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.MalwareDeepScanningClientRequest)
}

size_t MalwareDeepScanningClientRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.MalwareDeepScanningClientRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .safe_browsing.MalwareDeepScanningClientRequest.Population population = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->population());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MalwareDeepScanningClientRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MalwareDeepScanningClientRequest*>(
      &from));
}

void MalwareDeepScanningClientRequest::MergeFrom(const MalwareDeepScanningClientRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.MalwareDeepScanningClientRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_population()) {
    set_population(from.population());
  }
}

void MalwareDeepScanningClientRequest::CopyFrom(const MalwareDeepScanningClientRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.MalwareDeepScanningClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MalwareDeepScanningClientRequest::IsInitialized() const {
  return true;
}

void MalwareDeepScanningClientRequest::InternalSwap(MalwareDeepScanningClientRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(population_, other->population_);
}

std::string MalwareDeepScanningClientRequest::GetTypeName() const {
  return "safe_browsing.MalwareDeepScanningClientRequest";
}


// ===================================================================

void DlpDeepScanningClientRequest::InitAsDefaultInstance() {
}
class DlpDeepScanningClientRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DlpDeepScanningClientRequest>()._has_bits_);
  static void set_has_content_source(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DlpDeepScanningClientRequest::DlpDeepScanningClientRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.DlpDeepScanningClientRequest)
}
DlpDeepScanningClientRequest::DlpDeepScanningClientRequest(const DlpDeepScanningClientRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  content_source_ = from.content_source_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.DlpDeepScanningClientRequest)
}

void DlpDeepScanningClientRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DlpDeepScanningClientRequest_webprotect_2eproto.base);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_source_ = 0;
}

DlpDeepScanningClientRequest::~DlpDeepScanningClientRequest() {
  // @@protoc_insertion_point(destructor:safe_browsing.DlpDeepScanningClientRequest)
  SharedDtor();
}

void DlpDeepScanningClientRequest::SharedDtor() {
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DlpDeepScanningClientRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DlpDeepScanningClientRequest& DlpDeepScanningClientRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DlpDeepScanningClientRequest_webprotect_2eproto.base);
  return *internal_default_instance();
}


void DlpDeepScanningClientRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.DlpDeepScanningClientRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    url_.ClearNonDefaultToEmptyNoArena();
  }
  content_source_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DlpDeepScanningClientRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .safe_browsing.DlpDeepScanningClientRequest.ContentSource content_source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::DlpDeepScanningClientRequest_ContentSource_IsValid(val))) {
            set_content_source(static_cast<::safe_browsing::DlpDeepScanningClientRequest_ContentSource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_url(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DlpDeepScanningClientRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.DlpDeepScanningClientRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .safe_browsing.DlpDeepScanningClientRequest.ContentSource content_source = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::safe_browsing::DlpDeepScanningClientRequest_ContentSource_IsValid(value)) {
            set_content_source(static_cast< ::safe_browsing::DlpDeepScanningClientRequest_ContentSource >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.DlpDeepScanningClientRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.DlpDeepScanningClientRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DlpDeepScanningClientRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.DlpDeepScanningClientRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .safe_browsing.DlpDeepScanningClientRequest.ContentSource content_source = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->content_source(), output);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.DlpDeepScanningClientRequest)
}

size_t DlpDeepScanningClientRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.DlpDeepScanningClientRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string url = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional .safe_browsing.DlpDeepScanningClientRequest.ContentSource content_source = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->content_source());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DlpDeepScanningClientRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DlpDeepScanningClientRequest*>(
      &from));
}

void DlpDeepScanningClientRequest::MergeFrom(const DlpDeepScanningClientRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.DlpDeepScanningClientRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      content_source_ = from.content_source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DlpDeepScanningClientRequest::CopyFrom(const DlpDeepScanningClientRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.DlpDeepScanningClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DlpDeepScanningClientRequest::IsInitialized() const {
  return true;
}

void DlpDeepScanningClientRequest::InternalSwap(DlpDeepScanningClientRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(content_source_, other->content_source_);
}

std::string DlpDeepScanningClientRequest::GetTypeName() const {
  return "safe_browsing.DlpDeepScanningClientRequest";
}


// ===================================================================

void DeepScanningClientRequest::InitAsDefaultInstance() {
  ::safe_browsing::_DeepScanningClientRequest_default_instance_._instance.get_mutable()->malware_scan_request_ = const_cast< ::safe_browsing::MalwareDeepScanningClientRequest*>(
      ::safe_browsing::MalwareDeepScanningClientRequest::internal_default_instance());
  ::safe_browsing::_DeepScanningClientRequest_default_instance_._instance.get_mutable()->dlp_scan_request_ = const_cast< ::safe_browsing::DlpDeepScanningClientRequest*>(
      ::safe_browsing::DlpDeepScanningClientRequest::internal_default_instance());
}
class DeepScanningClientRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DeepScanningClientRequest>()._has_bits_);
  static void set_has_dm_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fcm_notification_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::safe_browsing::MalwareDeepScanningClientRequest& malware_scan_request(const DeepScanningClientRequest* msg);
  static void set_has_malware_scan_request(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::safe_browsing::DlpDeepScanningClientRequest& dlp_scan_request(const DeepScanningClientRequest* msg);
  static void set_has_dlp_scan_request(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_request_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_digest(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::safe_browsing::MalwareDeepScanningClientRequest&
DeepScanningClientRequest::_Internal::malware_scan_request(const DeepScanningClientRequest* msg) {
  return *msg->malware_scan_request_;
}
const ::safe_browsing::DlpDeepScanningClientRequest&
DeepScanningClientRequest::_Internal::dlp_scan_request(const DeepScanningClientRequest* msg) {
  return *msg->dlp_scan_request_;
}
DeepScanningClientRequest::DeepScanningClientRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.DeepScanningClientRequest)
}
DeepScanningClientRequest::DeepScanningClientRequest(const DeepScanningClientRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dm_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_dm_token()) {
    dm_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dm_token_);
  }
  fcm_notification_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_fcm_notification_token()) {
    fcm_notification_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fcm_notification_token_);
  }
  request_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_token()) {
    request_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_token_);
  }
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_digest()) {
    digest_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.digest_);
  }
  if (from.has_malware_scan_request()) {
    malware_scan_request_ = new ::safe_browsing::MalwareDeepScanningClientRequest(*from.malware_scan_request_);
  } else {
    malware_scan_request_ = nullptr;
  }
  if (from.has_dlp_scan_request()) {
    dlp_scan_request_ = new ::safe_browsing::DlpDeepScanningClientRequest(*from.dlp_scan_request_);
  } else {
    dlp_scan_request_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.DeepScanningClientRequest)
}

void DeepScanningClientRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeepScanningClientRequest_webprotect_2eproto.base);
  dm_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fcm_notification_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&malware_scan_request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dlp_scan_request_) -
      reinterpret_cast<char*>(&malware_scan_request_)) + sizeof(dlp_scan_request_));
}

DeepScanningClientRequest::~DeepScanningClientRequest() {
  // @@protoc_insertion_point(destructor:safe_browsing.DeepScanningClientRequest)
  SharedDtor();
}

void DeepScanningClientRequest::SharedDtor() {
  dm_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fcm_notification_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  digest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete malware_scan_request_;
  if (this != internal_default_instance()) delete dlp_scan_request_;
}

void DeepScanningClientRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeepScanningClientRequest& DeepScanningClientRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeepScanningClientRequest_webprotect_2eproto.base);
  return *internal_default_instance();
}


void DeepScanningClientRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.DeepScanningClientRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      dm_token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      fcm_notification_token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      request_token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      filename_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      digest_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(malware_scan_request_ != nullptr);
      malware_scan_request_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(dlp_scan_request_ != nullptr);
      dlp_scan_request_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeepScanningClientRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string dm_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_dm_token(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string fcm_notification_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_fcm_notification_token(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .safe_browsing.MalwareDeepScanningClientRequest malware_scan_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_malware_scan_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .safe_browsing.DlpDeepScanningClientRequest dlp_scan_request = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_dlp_scan_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string request_token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_request_token(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string filename = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_filename(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string digest = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_digest(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeepScanningClientRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.DeepScanningClientRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dm_token = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_dm_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fcm_notification_token = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_fcm_notification_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .safe_browsing.MalwareDeepScanningClientRequest malware_scan_request = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_malware_scan_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .safe_browsing.DlpDeepScanningClientRequest dlp_scan_request = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dlp_scan_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_token = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_request_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string digest = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_digest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.DeepScanningClientRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.DeepScanningClientRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeepScanningClientRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.DeepScanningClientRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string dm_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dm_token(), output);
  }

  // optional string fcm_notification_token = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fcm_notification_token(), output);
  }

  // optional .safe_browsing.MalwareDeepScanningClientRequest malware_scan_request = 3;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::malware_scan_request(this), output);
  }

  // optional .safe_browsing.DlpDeepScanningClientRequest dlp_scan_request = 4;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::dlp_scan_request(this), output);
  }

  // optional string request_token = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->request_token(), output);
  }

  // optional string filename = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->filename(), output);
  }

  // optional string digest = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->digest(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.DeepScanningClientRequest)
}

size_t DeepScanningClientRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.DeepScanningClientRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string dm_token = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->dm_token());
    }

    // optional string fcm_notification_token = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->fcm_notification_token());
    }

    // optional string request_token = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->request_token());
    }

    // optional string filename = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string digest = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->digest());
    }

    // optional .safe_browsing.MalwareDeepScanningClientRequest malware_scan_request = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *malware_scan_request_);
    }

    // optional .safe_browsing.DlpDeepScanningClientRequest dlp_scan_request = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dlp_scan_request_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeepScanningClientRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeepScanningClientRequest*>(
      &from));
}

void DeepScanningClientRequest::MergeFrom(const DeepScanningClientRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.DeepScanningClientRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      dm_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dm_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      fcm_notification_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fcm_notification_token_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      request_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_token_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      digest_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.digest_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_malware_scan_request()->::safe_browsing::MalwareDeepScanningClientRequest::MergeFrom(from.malware_scan_request());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_dlp_scan_request()->::safe_browsing::DlpDeepScanningClientRequest::MergeFrom(from.dlp_scan_request());
    }
  }
}

void DeepScanningClientRequest::CopyFrom(const DeepScanningClientRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.DeepScanningClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeepScanningClientRequest::IsInitialized() const {
  return true;
}

void DeepScanningClientRequest::InternalSwap(DeepScanningClientRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  dm_token_.Swap(&other->dm_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fcm_notification_token_.Swap(&other->fcm_notification_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_token_.Swap(&other->request_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  digest_.Swap(&other->digest_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(malware_scan_request_, other->malware_scan_request_);
  swap(dlp_scan_request_, other->dlp_scan_request_);
}

std::string DeepScanningClientRequest::GetTypeName() const {
  return "safe_browsing.DeepScanningClientRequest";
}


// ===================================================================

void MalwareDeepScanningVerdict::InitAsDefaultInstance() {
}
class MalwareDeepScanningVerdict::_Internal {
 public:
  using HasBits = decltype(std::declval<MalwareDeepScanningVerdict>()._has_bits_);
  static void set_has_verdict(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MalwareDeepScanningVerdict::MalwareDeepScanningVerdict()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.MalwareDeepScanningVerdict)
}
MalwareDeepScanningVerdict::MalwareDeepScanningVerdict(const MalwareDeepScanningVerdict& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  verdict_ = from.verdict_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.MalwareDeepScanningVerdict)
}

void MalwareDeepScanningVerdict::SharedCtor() {
  verdict_ = 0;
}

MalwareDeepScanningVerdict::~MalwareDeepScanningVerdict() {
  // @@protoc_insertion_point(destructor:safe_browsing.MalwareDeepScanningVerdict)
  SharedDtor();
}

void MalwareDeepScanningVerdict::SharedDtor() {
}

void MalwareDeepScanningVerdict::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MalwareDeepScanningVerdict& MalwareDeepScanningVerdict::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MalwareDeepScanningVerdict_webprotect_2eproto.base);
  return *internal_default_instance();
}


void MalwareDeepScanningVerdict::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.MalwareDeepScanningVerdict)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  verdict_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MalwareDeepScanningVerdict::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .safe_browsing.MalwareDeepScanningVerdict.Verdict verdict = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::MalwareDeepScanningVerdict_Verdict_IsValid(val))) {
            set_verdict(static_cast<::safe_browsing::MalwareDeepScanningVerdict_Verdict>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MalwareDeepScanningVerdict::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.MalwareDeepScanningVerdict)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .safe_browsing.MalwareDeepScanningVerdict.Verdict verdict = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::safe_browsing::MalwareDeepScanningVerdict_Verdict_IsValid(value)) {
            set_verdict(static_cast< ::safe_browsing::MalwareDeepScanningVerdict_Verdict >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.MalwareDeepScanningVerdict)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.MalwareDeepScanningVerdict)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MalwareDeepScanningVerdict::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.MalwareDeepScanningVerdict)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .safe_browsing.MalwareDeepScanningVerdict.Verdict verdict = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->verdict(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.MalwareDeepScanningVerdict)
}

size_t MalwareDeepScanningVerdict::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.MalwareDeepScanningVerdict)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .safe_browsing.MalwareDeepScanningVerdict.Verdict verdict = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->verdict());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MalwareDeepScanningVerdict::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MalwareDeepScanningVerdict*>(
      &from));
}

void MalwareDeepScanningVerdict::MergeFrom(const MalwareDeepScanningVerdict& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.MalwareDeepScanningVerdict)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_verdict()) {
    set_verdict(from.verdict());
  }
}

void MalwareDeepScanningVerdict::CopyFrom(const MalwareDeepScanningVerdict& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.MalwareDeepScanningVerdict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MalwareDeepScanningVerdict::IsInitialized() const {
  return true;
}

void MalwareDeepScanningVerdict::InternalSwap(MalwareDeepScanningVerdict* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(verdict_, other->verdict_);
}

std::string MalwareDeepScanningVerdict::GetTypeName() const {
  return "safe_browsing.MalwareDeepScanningVerdict";
}


// ===================================================================

void DlpDeepScanningVerdict_MatchedDetector::InitAsDefaultInstance() {
}
class DlpDeepScanningVerdict_MatchedDetector::_Internal {
 public:
  using HasBits = decltype(std::declval<DlpDeepScanningVerdict_MatchedDetector>()._has_bits_);
  static void set_has_detector_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_display_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_detector_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DlpDeepScanningVerdict_MatchedDetector::DlpDeepScanningVerdict_MatchedDetector()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.DlpDeepScanningVerdict.MatchedDetector)
}
DlpDeepScanningVerdict_MatchedDetector::DlpDeepScanningVerdict_MatchedDetector(const DlpDeepScanningVerdict_MatchedDetector& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  detector_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_detector_id()) {
    detector_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.detector_id_);
  }
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_display_name()) {
    display_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.display_name_);
  }
  detector_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_detector_type()) {
    detector_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.detector_type_);
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.DlpDeepScanningVerdict.MatchedDetector)
}

void DlpDeepScanningVerdict_MatchedDetector::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DlpDeepScanningVerdict_MatchedDetector_webprotect_2eproto.base);
  detector_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detector_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DlpDeepScanningVerdict_MatchedDetector::~DlpDeepScanningVerdict_MatchedDetector() {
  // @@protoc_insertion_point(destructor:safe_browsing.DlpDeepScanningVerdict.MatchedDetector)
  SharedDtor();
}

void DlpDeepScanningVerdict_MatchedDetector::SharedDtor() {
  detector_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detector_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DlpDeepScanningVerdict_MatchedDetector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DlpDeepScanningVerdict_MatchedDetector& DlpDeepScanningVerdict_MatchedDetector::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DlpDeepScanningVerdict_MatchedDetector_webprotect_2eproto.base);
  return *internal_default_instance();
}


void DlpDeepScanningVerdict_MatchedDetector::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.DlpDeepScanningVerdict.MatchedDetector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      detector_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      display_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      detector_type_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DlpDeepScanningVerdict_MatchedDetector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string detector_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_detector_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string display_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_display_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string detector_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_detector_type(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DlpDeepScanningVerdict_MatchedDetector::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.DlpDeepScanningVerdict.MatchedDetector)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string detector_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_detector_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string display_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string detector_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_detector_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.DlpDeepScanningVerdict.MatchedDetector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.DlpDeepScanningVerdict.MatchedDetector)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DlpDeepScanningVerdict_MatchedDetector::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.DlpDeepScanningVerdict.MatchedDetector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string detector_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->detector_id(), output);
  }

  // optional string display_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->display_name(), output);
  }

  // optional string detector_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->detector_type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.DlpDeepScanningVerdict.MatchedDetector)
}

size_t DlpDeepScanningVerdict_MatchedDetector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.DlpDeepScanningVerdict.MatchedDetector)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string detector_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->detector_id());
    }

    // optional string display_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->display_name());
    }

    // optional string detector_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->detector_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DlpDeepScanningVerdict_MatchedDetector::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DlpDeepScanningVerdict_MatchedDetector*>(
      &from));
}

void DlpDeepScanningVerdict_MatchedDetector::MergeFrom(const DlpDeepScanningVerdict_MatchedDetector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.DlpDeepScanningVerdict.MatchedDetector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      detector_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.detector_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      display_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.display_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      detector_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.detector_type_);
    }
  }
}

void DlpDeepScanningVerdict_MatchedDetector::CopyFrom(const DlpDeepScanningVerdict_MatchedDetector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.DlpDeepScanningVerdict.MatchedDetector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DlpDeepScanningVerdict_MatchedDetector::IsInitialized() const {
  return true;
}

void DlpDeepScanningVerdict_MatchedDetector::InternalSwap(DlpDeepScanningVerdict_MatchedDetector* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  detector_id_.Swap(&other->detector_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  display_name_.Swap(&other->display_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  detector_type_.Swap(&other->detector_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string DlpDeepScanningVerdict_MatchedDetector::GetTypeName() const {
  return "safe_browsing.DlpDeepScanningVerdict.MatchedDetector";
}


// ===================================================================

void DlpDeepScanningVerdict_TriggeredRule::InitAsDefaultInstance() {
}
class DlpDeepScanningVerdict_TriggeredRule::_Internal {
 public:
  using HasBits = decltype(std::declval<DlpDeepScanningVerdict_TriggeredRule>()._has_bits_);
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rule_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rule_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rule_resource_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rule_severity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DlpDeepScanningVerdict_TriggeredRule::DlpDeepScanningVerdict_TriggeredRule()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.DlpDeepScanningVerdict.TriggeredRule)
}
DlpDeepScanningVerdict_TriggeredRule::DlpDeepScanningVerdict_TriggeredRule(const DlpDeepScanningVerdict_TriggeredRule& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      matched_detectors_(from.matched_detectors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rule_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_rule_name()) {
    rule_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rule_name_);
  }
  rule_resource_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_rule_resource_name()) {
    rule_resource_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rule_resource_name_);
  }
  rule_severity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_rule_severity()) {
    rule_severity_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rule_severity_);
  }
  ::memcpy(&rule_id_, &from.rule_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&rule_id_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.DlpDeepScanningVerdict.TriggeredRule)
}

void DlpDeepScanningVerdict_TriggeredRule::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DlpDeepScanningVerdict_TriggeredRule_webprotect_2eproto.base);
  rule_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rule_resource_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rule_severity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rule_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&rule_id_)) + sizeof(action_));
}

DlpDeepScanningVerdict_TriggeredRule::~DlpDeepScanningVerdict_TriggeredRule() {
  // @@protoc_insertion_point(destructor:safe_browsing.DlpDeepScanningVerdict.TriggeredRule)
  SharedDtor();
}

void DlpDeepScanningVerdict_TriggeredRule::SharedDtor() {
  rule_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rule_resource_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rule_severity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DlpDeepScanningVerdict_TriggeredRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DlpDeepScanningVerdict_TriggeredRule& DlpDeepScanningVerdict_TriggeredRule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DlpDeepScanningVerdict_TriggeredRule_webprotect_2eproto.base);
  return *internal_default_instance();
}


void DlpDeepScanningVerdict_TriggeredRule::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.DlpDeepScanningVerdict.TriggeredRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matched_detectors_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      rule_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      rule_resource_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      rule_severity_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&rule_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&action_) -
        reinterpret_cast<char*>(&rule_id_)) + sizeof(action_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DlpDeepScanningVerdict_TriggeredRule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .safe_browsing.DlpDeepScanningVerdict.TriggeredRule.Action action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::DlpDeepScanningVerdict_TriggeredRule_Action_IsValid(val))) {
            set_action(static_cast<::safe_browsing::DlpDeepScanningVerdict_TriggeredRule_Action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string rule_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_rule_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 rule_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rule_id(&has_bits);
          rule_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string rule_resource_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_rule_resource_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string rule_severity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_rule_severity(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .safe_browsing.DlpDeepScanningVerdict.MatchedDetector matched_detectors = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_matched_detectors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DlpDeepScanningVerdict_TriggeredRule::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.DlpDeepScanningVerdict.TriggeredRule)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .safe_browsing.DlpDeepScanningVerdict.TriggeredRule.Action action = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::safe_browsing::DlpDeepScanningVerdict_TriggeredRule_Action_IsValid(value)) {
            set_action(static_cast< ::safe_browsing::DlpDeepScanningVerdict_TriggeredRule_Action >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string rule_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_rule_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 rule_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_rule_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &rule_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string rule_resource_name = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_rule_resource_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string rule_severity = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_rule_severity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .safe_browsing.DlpDeepScanningVerdict.MatchedDetector matched_detectors = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_matched_detectors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.DlpDeepScanningVerdict.TriggeredRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.DlpDeepScanningVerdict.TriggeredRule)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DlpDeepScanningVerdict_TriggeredRule::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.DlpDeepScanningVerdict.TriggeredRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .safe_browsing.DlpDeepScanningVerdict.TriggeredRule.Action action = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // optional string rule_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rule_name(), output);
  }

  // optional int64 rule_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->rule_id(), output);
  }

  // optional string rule_resource_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->rule_resource_name(), output);
  }

  // optional string rule_severity = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->rule_severity(), output);
  }

  // repeated .safe_browsing.DlpDeepScanningVerdict.MatchedDetector matched_detectors = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matched_detectors_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6,
      this->matched_detectors(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.DlpDeepScanningVerdict.TriggeredRule)
}

size_t DlpDeepScanningVerdict_TriggeredRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.DlpDeepScanningVerdict.TriggeredRule)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.DlpDeepScanningVerdict.MatchedDetector matched_detectors = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->matched_detectors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->matched_detectors(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string rule_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->rule_name());
    }

    // optional string rule_resource_name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->rule_resource_name());
    }

    // optional string rule_severity = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->rule_severity());
    }

    // optional int64 rule_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->rule_id());
    }

    // optional .safe_browsing.DlpDeepScanningVerdict.TriggeredRule.Action action = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->action());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DlpDeepScanningVerdict_TriggeredRule::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DlpDeepScanningVerdict_TriggeredRule*>(
      &from));
}

void DlpDeepScanningVerdict_TriggeredRule::MergeFrom(const DlpDeepScanningVerdict_TriggeredRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.DlpDeepScanningVerdict.TriggeredRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matched_detectors_.MergeFrom(from.matched_detectors_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      rule_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rule_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      rule_resource_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rule_resource_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      rule_severity_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rule_severity_);
    }
    if (cached_has_bits & 0x00000008u) {
      rule_id_ = from.rule_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DlpDeepScanningVerdict_TriggeredRule::CopyFrom(const DlpDeepScanningVerdict_TriggeredRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.DlpDeepScanningVerdict.TriggeredRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DlpDeepScanningVerdict_TriggeredRule::IsInitialized() const {
  return true;
}

void DlpDeepScanningVerdict_TriggeredRule::InternalSwap(DlpDeepScanningVerdict_TriggeredRule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&matched_detectors_)->InternalSwap(CastToBase(&other->matched_detectors_));
  rule_name_.Swap(&other->rule_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rule_resource_name_.Swap(&other->rule_resource_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rule_severity_.Swap(&other->rule_severity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rule_id_, other->rule_id_);
  swap(action_, other->action_);
}

std::string DlpDeepScanningVerdict_TriggeredRule::GetTypeName() const {
  return "safe_browsing.DlpDeepScanningVerdict.TriggeredRule";
}


// ===================================================================

void DlpDeepScanningVerdict::InitAsDefaultInstance() {
}
class DlpDeepScanningVerdict::_Internal {
 public:
  using HasBits = decltype(std::declval<DlpDeepScanningVerdict>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DlpDeepScanningVerdict::DlpDeepScanningVerdict()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.DlpDeepScanningVerdict)
}
DlpDeepScanningVerdict::DlpDeepScanningVerdict(const DlpDeepScanningVerdict& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      triggered_rules_(from.triggered_rules_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:safe_browsing.DlpDeepScanningVerdict)
}

void DlpDeepScanningVerdict::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DlpDeepScanningVerdict_webprotect_2eproto.base);
  status_ = 0;
}

DlpDeepScanningVerdict::~DlpDeepScanningVerdict() {
  // @@protoc_insertion_point(destructor:safe_browsing.DlpDeepScanningVerdict)
  SharedDtor();
}

void DlpDeepScanningVerdict::SharedDtor() {
}

void DlpDeepScanningVerdict::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DlpDeepScanningVerdict& DlpDeepScanningVerdict::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DlpDeepScanningVerdict_webprotect_2eproto.base);
  return *internal_default_instance();
}


void DlpDeepScanningVerdict::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.DlpDeepScanningVerdict)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  triggered_rules_.Clear();
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DlpDeepScanningVerdict::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .safe_browsing.DlpDeepScanningVerdict.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::DlpDeepScanningVerdict_Status_IsValid(val))) {
            set_status(static_cast<::safe_browsing::DlpDeepScanningVerdict_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .safe_browsing.DlpDeepScanningVerdict.TriggeredRule triggered_rules = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_triggered_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DlpDeepScanningVerdict::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.DlpDeepScanningVerdict)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .safe_browsing.DlpDeepScanningVerdict.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::safe_browsing::DlpDeepScanningVerdict_Status_IsValid(value)) {
            set_status(static_cast< ::safe_browsing::DlpDeepScanningVerdict_Status >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .safe_browsing.DlpDeepScanningVerdict.TriggeredRule triggered_rules = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_triggered_rules()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.DlpDeepScanningVerdict)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.DlpDeepScanningVerdict)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DlpDeepScanningVerdict::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.DlpDeepScanningVerdict)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .safe_browsing.DlpDeepScanningVerdict.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // repeated .safe_browsing.DlpDeepScanningVerdict.TriggeredRule triggered_rules = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->triggered_rules_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->triggered_rules(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.DlpDeepScanningVerdict)
}

size_t DlpDeepScanningVerdict::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.DlpDeepScanningVerdict)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.DlpDeepScanningVerdict.TriggeredRule triggered_rules = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->triggered_rules_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->triggered_rules(static_cast<int>(i)));
    }
  }

  // optional .safe_browsing.DlpDeepScanningVerdict.Status status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DlpDeepScanningVerdict::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DlpDeepScanningVerdict*>(
      &from));
}

void DlpDeepScanningVerdict::MergeFrom(const DlpDeepScanningVerdict& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.DlpDeepScanningVerdict)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  triggered_rules_.MergeFrom(from.triggered_rules_);
  if (from.has_status()) {
    set_status(from.status());
  }
}

void DlpDeepScanningVerdict::CopyFrom(const DlpDeepScanningVerdict& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.DlpDeepScanningVerdict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DlpDeepScanningVerdict::IsInitialized() const {
  return true;
}

void DlpDeepScanningVerdict::InternalSwap(DlpDeepScanningVerdict* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&triggered_rules_)->InternalSwap(CastToBase(&other->triggered_rules_));
  swap(status_, other->status_);
}

std::string DlpDeepScanningVerdict::GetTypeName() const {
  return "safe_browsing.DlpDeepScanningVerdict";
}


// ===================================================================

void DeepScanningClientResponse::InitAsDefaultInstance() {
  ::safe_browsing::_DeepScanningClientResponse_default_instance_._instance.get_mutable()->malware_scan_verdict_ = const_cast< ::safe_browsing::MalwareDeepScanningVerdict*>(
      ::safe_browsing::MalwareDeepScanningVerdict::internal_default_instance());
  ::safe_browsing::_DeepScanningClientResponse_default_instance_._instance.get_mutable()->dlp_scan_verdict_ = const_cast< ::safe_browsing::DlpDeepScanningVerdict*>(
      ::safe_browsing::DlpDeepScanningVerdict::internal_default_instance());
}
class DeepScanningClientResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DeepScanningClientResponse>()._has_bits_);
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::safe_browsing::MalwareDeepScanningVerdict& malware_scan_verdict(const DeepScanningClientResponse* msg);
  static void set_has_malware_scan_verdict(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::safe_browsing::DlpDeepScanningVerdict& dlp_scan_verdict(const DeepScanningClientResponse* msg);
  static void set_has_dlp_scan_verdict(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::safe_browsing::MalwareDeepScanningVerdict&
DeepScanningClientResponse::_Internal::malware_scan_verdict(const DeepScanningClientResponse* msg) {
  return *msg->malware_scan_verdict_;
}
const ::safe_browsing::DlpDeepScanningVerdict&
DeepScanningClientResponse::_Internal::dlp_scan_verdict(const DeepScanningClientResponse* msg) {
  return *msg->dlp_scan_verdict_;
}
DeepScanningClientResponse::DeepScanningClientResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.DeepScanningClientResponse)
}
DeepScanningClientResponse::DeepScanningClientResponse(const DeepScanningClientResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.has_malware_scan_verdict()) {
    malware_scan_verdict_ = new ::safe_browsing::MalwareDeepScanningVerdict(*from.malware_scan_verdict_);
  } else {
    malware_scan_verdict_ = nullptr;
  }
  if (from.has_dlp_scan_verdict()) {
    dlp_scan_verdict_ = new ::safe_browsing::DlpDeepScanningVerdict(*from.dlp_scan_verdict_);
  } else {
    dlp_scan_verdict_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:safe_browsing.DeepScanningClientResponse)
}

void DeepScanningClientResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeepScanningClientResponse_webprotect_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&malware_scan_verdict_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dlp_scan_verdict_) -
      reinterpret_cast<char*>(&malware_scan_verdict_)) + sizeof(dlp_scan_verdict_));
}

DeepScanningClientResponse::~DeepScanningClientResponse() {
  // @@protoc_insertion_point(destructor:safe_browsing.DeepScanningClientResponse)
  SharedDtor();
}

void DeepScanningClientResponse::SharedDtor() {
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete malware_scan_verdict_;
  if (this != internal_default_instance()) delete dlp_scan_verdict_;
}

void DeepScanningClientResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeepScanningClientResponse& DeepScanningClientResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeepScanningClientResponse_webprotect_2eproto.base);
  return *internal_default_instance();
}


void DeepScanningClientResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.DeepScanningClientResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(malware_scan_verdict_ != nullptr);
      malware_scan_verdict_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(dlp_scan_verdict_ != nullptr);
      dlp_scan_verdict_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DeepScanningClientResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_token(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .safe_browsing.MalwareDeepScanningVerdict malware_scan_verdict = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_malware_scan_verdict(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .safe_browsing.DlpDeepScanningVerdict dlp_scan_verdict = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_dlp_scan_verdict(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DeepScanningClientResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.DeepScanningClientResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .safe_browsing.MalwareDeepScanningVerdict malware_scan_verdict = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_malware_scan_verdict()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .safe_browsing.DlpDeepScanningVerdict dlp_scan_verdict = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dlp_scan_verdict()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.DeepScanningClientResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.DeepScanningClientResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DeepScanningClientResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.DeepScanningClientResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // optional .safe_browsing.MalwareDeepScanningVerdict malware_scan_verdict = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::malware_scan_verdict(this), output);
  }

  // optional .safe_browsing.DlpDeepScanningVerdict dlp_scan_verdict = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::dlp_scan_verdict(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.DeepScanningClientResponse)
}

size_t DeepScanningClientResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.DeepScanningClientResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string token = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional .safe_browsing.MalwareDeepScanningVerdict malware_scan_verdict = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *malware_scan_verdict_);
    }

    // optional .safe_browsing.DlpDeepScanningVerdict dlp_scan_verdict = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dlp_scan_verdict_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeepScanningClientResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DeepScanningClientResponse*>(
      &from));
}

void DeepScanningClientResponse::MergeFrom(const DeepScanningClientResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.DeepScanningClientResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_malware_scan_verdict()->::safe_browsing::MalwareDeepScanningVerdict::MergeFrom(from.malware_scan_verdict());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_dlp_scan_verdict()->::safe_browsing::DlpDeepScanningVerdict::MergeFrom(from.dlp_scan_verdict());
    }
  }
}

void DeepScanningClientResponse::CopyFrom(const DeepScanningClientResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.DeepScanningClientResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeepScanningClientResponse::IsInitialized() const {
  return true;
}

void DeepScanningClientResponse::InternalSwap(DeepScanningClientResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(malware_scan_verdict_, other->malware_scan_verdict_);
  swap(dlp_scan_verdict_, other->dlp_scan_verdict_);
}

std::string DeepScanningClientResponse::GetTypeName() const {
  return "safe_browsing.DeepScanningClientResponse";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace safe_browsing
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::safe_browsing::MalwareDeepScanningClientRequest* Arena::CreateMaybeMessage< ::safe_browsing::MalwareDeepScanningClientRequest >(Arena* arena) {
  return Arena::CreateInternal< ::safe_browsing::MalwareDeepScanningClientRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::DlpDeepScanningClientRequest* Arena::CreateMaybeMessage< ::safe_browsing::DlpDeepScanningClientRequest >(Arena* arena) {
  return Arena::CreateInternal< ::safe_browsing::DlpDeepScanningClientRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::DeepScanningClientRequest* Arena::CreateMaybeMessage< ::safe_browsing::DeepScanningClientRequest >(Arena* arena) {
  return Arena::CreateInternal< ::safe_browsing::DeepScanningClientRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::MalwareDeepScanningVerdict* Arena::CreateMaybeMessage< ::safe_browsing::MalwareDeepScanningVerdict >(Arena* arena) {
  return Arena::CreateInternal< ::safe_browsing::MalwareDeepScanningVerdict >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::DlpDeepScanningVerdict_MatchedDetector* Arena::CreateMaybeMessage< ::safe_browsing::DlpDeepScanningVerdict_MatchedDetector >(Arena* arena) {
  return Arena::CreateInternal< ::safe_browsing::DlpDeepScanningVerdict_MatchedDetector >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::DlpDeepScanningVerdict_TriggeredRule* Arena::CreateMaybeMessage< ::safe_browsing::DlpDeepScanningVerdict_TriggeredRule >(Arena* arena) {
  return Arena::CreateInternal< ::safe_browsing::DlpDeepScanningVerdict_TriggeredRule >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::DlpDeepScanningVerdict* Arena::CreateMaybeMessage< ::safe_browsing::DlpDeepScanningVerdict >(Arena* arena) {
  return Arena::CreateInternal< ::safe_browsing::DlpDeepScanningVerdict >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::DeepScanningClientResponse* Arena::CreateMaybeMessage< ::safe_browsing::DeepScanningClientResponse >(Arena* arena) {
  return Arena::CreateInternal< ::safe_browsing::DeepScanningClientResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

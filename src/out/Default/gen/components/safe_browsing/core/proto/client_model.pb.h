// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/safe_browsing/core/proto/client_model.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fsafe_5fbrowsing_2fcore_2fproto_2fclient_5fmodel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fsafe_5fbrowsing_2fcore_2fproto_2fclient_5fmodel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "components/safe_browsing/core/proto/csd.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fsafe_5fbrowsing_2fcore_2fproto_2fclient_5fmodel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fsafe_5fbrowsing_2fcore_2fproto_2fclient_5fmodel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace safe_browsing {
class ClientSideModel;
class ClientSideModelDefaultTypeInternal;
extern ClientSideModelDefaultTypeInternal _ClientSideModel_default_instance_;
class ClientSideModel_IPSubnet;
class ClientSideModel_IPSubnetDefaultTypeInternal;
extern ClientSideModel_IPSubnetDefaultTypeInternal _ClientSideModel_IPSubnet_default_instance_;
class ClientSideModel_Rule;
class ClientSideModel_RuleDefaultTypeInternal;
extern ClientSideModel_RuleDefaultTypeInternal _ClientSideModel_Rule_default_instance_;
class MatchConfig;
class MatchConfigDefaultTypeInternal;
extern MatchConfigDefaultTypeInternal _MatchConfig_default_instance_;
class MatchRule;
class MatchRuleDefaultTypeInternal;
extern MatchRuleDefaultTypeInternal _MatchRule_default_instance_;
class MatchRule_ColorRange;
class MatchRule_ColorRangeDefaultTypeInternal;
extern MatchRule_ColorRangeDefaultTypeInternal _MatchRule_ColorRange_default_instance_;
class VisionModel;
class VisionModelDefaultTypeInternal;
extern VisionModelDefaultTypeInternal _VisionModel_default_instance_;
class VisualTarget;
class VisualTargetDefaultTypeInternal;
extern VisualTargetDefaultTypeInternal _VisualTarget_default_instance_;
}  // namespace safe_browsing
PROTOBUF_NAMESPACE_OPEN
template<> ::safe_browsing::ClientSideModel* Arena::CreateMaybeMessage<::safe_browsing::ClientSideModel>(Arena*);
template<> ::safe_browsing::ClientSideModel_IPSubnet* Arena::CreateMaybeMessage<::safe_browsing::ClientSideModel_IPSubnet>(Arena*);
template<> ::safe_browsing::ClientSideModel_Rule* Arena::CreateMaybeMessage<::safe_browsing::ClientSideModel_Rule>(Arena*);
template<> ::safe_browsing::MatchConfig* Arena::CreateMaybeMessage<::safe_browsing::MatchConfig>(Arena*);
template<> ::safe_browsing::MatchRule* Arena::CreateMaybeMessage<::safe_browsing::MatchRule>(Arena*);
template<> ::safe_browsing::MatchRule_ColorRange* Arena::CreateMaybeMessage<::safe_browsing::MatchRule_ColorRange>(Arena*);
template<> ::safe_browsing::VisionModel* Arena::CreateMaybeMessage<::safe_browsing::VisionModel>(Arena*);
template<> ::safe_browsing::VisualTarget* Arena::CreateMaybeMessage<::safe_browsing::VisualTarget>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace safe_browsing {

// ===================================================================

class ClientSideModel_Rule :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientSideModel.Rule) */ {
 public:
  ClientSideModel_Rule();
  virtual ~ClientSideModel_Rule();

  ClientSideModel_Rule(const ClientSideModel_Rule& from);
  ClientSideModel_Rule(ClientSideModel_Rule&& from) noexcept
    : ClientSideModel_Rule() {
    *this = ::std::move(from);
  }

  inline ClientSideModel_Rule& operator=(const ClientSideModel_Rule& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientSideModel_Rule& operator=(ClientSideModel_Rule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ClientSideModel_Rule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientSideModel_Rule* internal_default_instance() {
    return reinterpret_cast<const ClientSideModel_Rule*>(
               &_ClientSideModel_Rule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientSideModel_Rule& a, ClientSideModel_Rule& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientSideModel_Rule* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientSideModel_Rule* New() const final {
    return CreateMaybeMessage<ClientSideModel_Rule>(nullptr);
  }

  ClientSideModel_Rule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientSideModel_Rule>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ClientSideModel_Rule& from);
  void MergeFrom(const ClientSideModel_Rule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientSideModel_Rule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientSideModel.Rule";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureFieldNumber = 1,
    kWeightFieldNumber = 2,
  };
  // repeated int32 feature = 1;
  int feature_size() const;
  void clear_feature();
  ::PROTOBUF_NAMESPACE_ID::int32 feature(int index) const;
  void set_feature(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_feature(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      feature() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_feature();

  // required float weight = 2;
  bool has_weight() const;
  void clear_weight();
  float weight() const;
  void set_weight(float value);

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientSideModel.Rule)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > feature_;
  float weight_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fproto_2fclient_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class ClientSideModel_IPSubnet :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientSideModel.IPSubnet) */ {
 public:
  ClientSideModel_IPSubnet();
  virtual ~ClientSideModel_IPSubnet();

  ClientSideModel_IPSubnet(const ClientSideModel_IPSubnet& from);
  ClientSideModel_IPSubnet(ClientSideModel_IPSubnet&& from) noexcept
    : ClientSideModel_IPSubnet() {
    *this = ::std::move(from);
  }

  inline ClientSideModel_IPSubnet& operator=(const ClientSideModel_IPSubnet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientSideModel_IPSubnet& operator=(ClientSideModel_IPSubnet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ClientSideModel_IPSubnet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientSideModel_IPSubnet* internal_default_instance() {
    return reinterpret_cast<const ClientSideModel_IPSubnet*>(
               &_ClientSideModel_IPSubnet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClientSideModel_IPSubnet& a, ClientSideModel_IPSubnet& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientSideModel_IPSubnet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientSideModel_IPSubnet* New() const final {
    return CreateMaybeMessage<ClientSideModel_IPSubnet>(nullptr);
  }

  ClientSideModel_IPSubnet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientSideModel_IPSubnet>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ClientSideModel_IPSubnet& from);
  void MergeFrom(const ClientSideModel_IPSubnet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientSideModel_IPSubnet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientSideModel.IPSubnet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // required bytes prefix = 1;
  bool has_prefix() const;
  void clear_prefix();
  const std::string& prefix() const;
  void set_prefix(const std::string& value);
  void set_prefix(std::string&& value);
  void set_prefix(const char* value);
  void set_prefix(const void* value, size_t size);
  std::string* mutable_prefix();
  std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);

  // optional int32 size = 2 [default = 128];
  bool has_size() const;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientSideModel.IPSubnet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fproto_2fclient_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class ClientSideModel :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.ClientSideModel) */ {
 public:
  ClientSideModel();
  virtual ~ClientSideModel();

  ClientSideModel(const ClientSideModel& from);
  ClientSideModel(ClientSideModel&& from) noexcept
    : ClientSideModel() {
    *this = ::std::move(from);
  }

  inline ClientSideModel& operator=(const ClientSideModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientSideModel& operator=(ClientSideModel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ClientSideModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientSideModel* internal_default_instance() {
    return reinterpret_cast<const ClientSideModel*>(
               &_ClientSideModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClientSideModel& a, ClientSideModel& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientSideModel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientSideModel* New() const final {
    return CreateMaybeMessage<ClientSideModel>(nullptr);
  }

  ClientSideModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientSideModel>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ClientSideModel& from);
  void MergeFrom(const ClientSideModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientSideModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.ClientSideModel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientSideModel_Rule Rule;
  typedef ClientSideModel_IPSubnet IPSubnet;

  // accessors -------------------------------------------------------

  enum : int {
    kHashesFieldNumber = 1,
    kRuleFieldNumber = 2,
    kPageTermFieldNumber = 3,
    kPageWordFieldNumber = 4,
    kBadSubnetFieldNumber = 7,
    kVisionModelFieldNumber = 12,
    kMaxWordsPerTermFieldNumber = 5,
    kVersionFieldNumber = 6,
    kMurmurHashSeedFieldNumber = 8,
    kThresholdProbabilityFieldNumber = 11,
    kMaxShinglesPerPageFieldNumber = 9,
    kShingleSizeFieldNumber = 10,
  };
  // repeated bytes hashes = 1;
  int hashes_size() const;
  void clear_hashes();
  const std::string& hashes(int index) const;
  std::string* mutable_hashes(int index);
  void set_hashes(int index, const std::string& value);
  void set_hashes(int index, std::string&& value);
  void set_hashes(int index, const char* value);
  void set_hashes(int index, const void* value, size_t size);
  std::string* add_hashes();
  void add_hashes(const std::string& value);
  void add_hashes(std::string&& value);
  void add_hashes(const char* value);
  void add_hashes(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& hashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_hashes();

  // repeated .safe_browsing.ClientSideModel.Rule rule = 2;
  int rule_size() const;
  void clear_rule();
  ::safe_browsing::ClientSideModel_Rule* mutable_rule(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSideModel_Rule >*
      mutable_rule();
  const ::safe_browsing::ClientSideModel_Rule& rule(int index) const;
  ::safe_browsing::ClientSideModel_Rule* add_rule();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSideModel_Rule >&
      rule() const;

  // repeated int32 page_term = 3;
  int page_term_size() const;
  void clear_page_term();
  ::PROTOBUF_NAMESPACE_ID::int32 page_term(int index) const;
  void set_page_term(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_page_term(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      page_term() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_page_term();

  // repeated fixed32 page_word = 4;
  int page_word_size() const;
  void clear_page_word();
  ::PROTOBUF_NAMESPACE_ID::uint32 page_word(int index) const;
  void set_page_word(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_page_word(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      page_word() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_page_word();

  // repeated .safe_browsing.ClientSideModel.IPSubnet bad_subnet = 7;
  int bad_subnet_size() const;
  void clear_bad_subnet();
  ::safe_browsing::ClientSideModel_IPSubnet* mutable_bad_subnet(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSideModel_IPSubnet >*
      mutable_bad_subnet();
  const ::safe_browsing::ClientSideModel_IPSubnet& bad_subnet(int index) const;
  ::safe_browsing::ClientSideModel_IPSubnet* add_bad_subnet();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSideModel_IPSubnet >&
      bad_subnet() const;

  // optional .safe_browsing.VisionModel vision_model = 12;
  bool has_vision_model() const;
  void clear_vision_model();
  const ::safe_browsing::VisionModel& vision_model() const;
  ::safe_browsing::VisionModel* release_vision_model();
  ::safe_browsing::VisionModel* mutable_vision_model();
  void set_allocated_vision_model(::safe_browsing::VisionModel* vision_model);

  // required int32 max_words_per_term = 5;
  bool has_max_words_per_term() const;
  void clear_max_words_per_term();
  ::PROTOBUF_NAMESPACE_ID::int32 max_words_per_term() const;
  void set_max_words_per_term(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 version = 6;
  bool has_version() const;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional fixed32 murmur_hash_seed = 8;
  bool has_murmur_hash_seed() const;
  void clear_murmur_hash_seed();
  ::PROTOBUF_NAMESPACE_ID::uint32 murmur_hash_seed() const;
  void set_murmur_hash_seed(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional float threshold_probability = 11 [default = 0.5];
  bool has_threshold_probability() const;
  void clear_threshold_probability();
  float threshold_probability() const;
  void set_threshold_probability(float value);

  // optional int32 max_shingles_per_page = 9 [default = 200];
  bool has_max_shingles_per_page() const;
  void clear_max_shingles_per_page();
  ::PROTOBUF_NAMESPACE_ID::int32 max_shingles_per_page() const;
  void set_max_shingles_per_page(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 shingle_size = 10 [default = 4];
  bool has_shingle_size() const;
  void clear_shingle_size();
  ::PROTOBUF_NAMESPACE_ID::int32 shingle_size() const;
  void set_shingle_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:safe_browsing.ClientSideModel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> hashes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSideModel_Rule > rule_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > page_term_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > page_word_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSideModel_IPSubnet > bad_subnet_;
  ::safe_browsing::VisionModel* vision_model_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_words_per_term_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 murmur_hash_seed_;
  float threshold_probability_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_shingles_per_page_;
  ::PROTOBUF_NAMESPACE_ID::int32 shingle_size_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fproto_2fclient_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class VisionModel :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.VisionModel) */ {
 public:
  VisionModel();
  virtual ~VisionModel();

  VisionModel(const VisionModel& from);
  VisionModel(VisionModel&& from) noexcept
    : VisionModel() {
    *this = ::std::move(from);
  }

  inline VisionModel& operator=(const VisionModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisionModel& operator=(VisionModel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const VisionModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VisionModel* internal_default_instance() {
    return reinterpret_cast<const VisionModel*>(
               &_VisionModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VisionModel& a, VisionModel& b) {
    a.Swap(&b);
  }
  inline void Swap(VisionModel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VisionModel* New() const final {
    return CreateMaybeMessage<VisionModel>(nullptr);
  }

  VisionModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VisionModel>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const VisionModel& from);
  void MergeFrom(const VisionModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VisionModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.VisionModel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetsFieldNumber = 1,
  };
  // repeated .safe_browsing.VisualTarget targets = 1;
  int targets_size() const;
  void clear_targets();
  ::safe_browsing::VisualTarget* mutable_targets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::VisualTarget >*
      mutable_targets();
  const ::safe_browsing::VisualTarget& targets(int index) const;
  ::safe_browsing::VisualTarget* add_targets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::VisualTarget >&
      targets() const;

  // @@protoc_insertion_point(class_scope:safe_browsing.VisionModel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::VisualTarget > targets_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fproto_2fclient_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class VisualTarget :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.VisualTarget) */ {
 public:
  VisualTarget();
  virtual ~VisualTarget();

  VisualTarget(const VisualTarget& from);
  VisualTarget(VisualTarget&& from) noexcept
    : VisualTarget() {
    *this = ::std::move(from);
  }

  inline VisualTarget& operator=(const VisualTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisualTarget& operator=(VisualTarget&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const VisualTarget& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VisualTarget* internal_default_instance() {
    return reinterpret_cast<const VisualTarget*>(
               &_VisualTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VisualTarget& a, VisualTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(VisualTarget* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VisualTarget* New() const final {
    return CreateMaybeMessage<VisualTarget>(nullptr);
  }

  VisualTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VisualTarget>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const VisualTarget& from);
  void MergeFrom(const VisualTarget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VisualTarget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.VisualTarget";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBinsFieldNumber = 5,
    kDigestFieldNumber = 1,
    kHashFieldNumber = 3,
    kMatchConfigFieldNumber = 6,
    kTimestampUsecFieldNumber = 2,
    kDimensionSizeFieldNumber = 4,
  };
  // repeated .safe_browsing.VisualFeatures.ColorHistogramBin bins = 5;
  int bins_size() const;
  void clear_bins();
  ::safe_browsing::VisualFeatures_ColorHistogramBin* mutable_bins(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::VisualFeatures_ColorHistogramBin >*
      mutable_bins();
  const ::safe_browsing::VisualFeatures_ColorHistogramBin& bins(int index) const;
  ::safe_browsing::VisualFeatures_ColorHistogramBin* add_bins();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::VisualFeatures_ColorHistogramBin >&
      bins() const;

  // optional bytes digest = 1;
  bool has_digest() const;
  void clear_digest();
  const std::string& digest() const;
  void set_digest(const std::string& value);
  void set_digest(std::string&& value);
  void set_digest(const char* value);
  void set_digest(const void* value, size_t size);
  std::string* mutable_digest();
  std::string* release_digest();
  void set_allocated_digest(std::string* digest);

  // optional bytes hash = 3;
  bool has_hash() const;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);

  // optional .safe_browsing.MatchConfig match_config = 6;
  bool has_match_config() const;
  void clear_match_config();
  const ::safe_browsing::MatchConfig& match_config() const;
  ::safe_browsing::MatchConfig* release_match_config();
  ::safe_browsing::MatchConfig* mutable_match_config();
  void set_allocated_match_config(::safe_browsing::MatchConfig* match_config);

  // optional int64 timestamp_usec = 2;
  bool has_timestamp_usec() const;
  void clear_timestamp_usec();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_usec() const;
  void set_timestamp_usec(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 dimension_size = 4;
  bool has_dimension_size() const;
  void clear_dimension_size();
  ::PROTOBUF_NAMESPACE_ID::int32 dimension_size() const;
  void set_dimension_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:safe_browsing.VisualTarget)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::VisualFeatures_ColorHistogramBin > bins_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr digest_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::safe_browsing::MatchConfig* match_config_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_usec_;
  ::PROTOBUF_NAMESPACE_ID::int32 dimension_size_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fproto_2fclient_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class MatchConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.MatchConfig) */ {
 public:
  MatchConfig();
  virtual ~MatchConfig();

  MatchConfig(const MatchConfig& from);
  MatchConfig(MatchConfig&& from) noexcept
    : MatchConfig() {
    *this = ::std::move(from);
  }

  inline MatchConfig& operator=(const MatchConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchConfig& operator=(MatchConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MatchConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatchConfig* internal_default_instance() {
    return reinterpret_cast<const MatchConfig*>(
               &_MatchConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MatchConfig& a, MatchConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchConfig* New() const final {
    return CreateMaybeMessage<MatchConfig>(nullptr);
  }

  MatchConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MatchConfig& from);
  void MergeFrom(const MatchConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MatchConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.MatchConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchRuleFieldNumber = 1,
  };
  // repeated .safe_browsing.MatchRule match_rule = 1;
  int match_rule_size() const;
  void clear_match_rule();
  ::safe_browsing::MatchRule* mutable_match_rule(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::MatchRule >*
      mutable_match_rule();
  const ::safe_browsing::MatchRule& match_rule(int index) const;
  ::safe_browsing::MatchRule* add_match_rule();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::MatchRule >&
      match_rule() const;

  // @@protoc_insertion_point(class_scope:safe_browsing.MatchConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::MatchRule > match_rule_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fproto_2fclient_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class MatchRule_ColorRange :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.MatchRule.ColorRange) */ {
 public:
  MatchRule_ColorRange();
  virtual ~MatchRule_ColorRange();

  MatchRule_ColorRange(const MatchRule_ColorRange& from);
  MatchRule_ColorRange(MatchRule_ColorRange&& from) noexcept
    : MatchRule_ColorRange() {
    *this = ::std::move(from);
  }

  inline MatchRule_ColorRange& operator=(const MatchRule_ColorRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchRule_ColorRange& operator=(MatchRule_ColorRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MatchRule_ColorRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatchRule_ColorRange* internal_default_instance() {
    return reinterpret_cast<const MatchRule_ColorRange*>(
               &_MatchRule_ColorRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MatchRule_ColorRange& a, MatchRule_ColorRange& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchRule_ColorRange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchRule_ColorRange* New() const final {
    return CreateMaybeMessage<MatchRule_ColorRange>(nullptr);
  }

  MatchRule_ColorRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchRule_ColorRange>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MatchRule_ColorRange& from);
  void MergeFrom(const MatchRule_ColorRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MatchRule_ColorRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.MatchRule.ColorRange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLowFieldNumber = 1,
    kHighFieldNumber = 2,
  };
  // optional int32 low = 1;
  bool has_low() const;
  void clear_low();
  ::PROTOBUF_NAMESPACE_ID::int32 low() const;
  void set_low(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 high = 2;
  bool has_high() const;
  void clear_high();
  ::PROTOBUF_NAMESPACE_ID::int32 high() const;
  void set_high(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:safe_browsing.MatchRule.ColorRange)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 low_;
  ::PROTOBUF_NAMESPACE_ID::int32 high_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fproto_2fclient_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class MatchRule :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:safe_browsing.MatchRule) */ {
 public:
  MatchRule();
  virtual ~MatchRule();

  MatchRule(const MatchRule& from);
  MatchRule(MatchRule&& from) noexcept
    : MatchRule() {
    *this = ::std::move(from);
  }

  inline MatchRule& operator=(const MatchRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchRule& operator=(MatchRule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MatchRule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatchRule* internal_default_instance() {
    return reinterpret_cast<const MatchRule*>(
               &_MatchRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MatchRule& a, MatchRule& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchRule* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchRule* New() const final {
    return CreateMaybeMessage<MatchRule>(nullptr);
  }

  MatchRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchRule>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MatchRule& from);
  void MergeFrom(const MatchRule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MatchRule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "safe_browsing.MatchRule";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef MatchRule_ColorRange ColorRange;

  // accessors -------------------------------------------------------

  enum : int {
    kColorRangeFieldNumber = 3,
    kHashDistanceFieldNumber = 1,
    kColorDistanceFieldNumber = 2,
  };
  // repeated .safe_browsing.MatchRule.ColorRange color_range = 3;
  int color_range_size() const;
  void clear_color_range();
  ::safe_browsing::MatchRule_ColorRange* mutable_color_range(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::MatchRule_ColorRange >*
      mutable_color_range();
  const ::safe_browsing::MatchRule_ColorRange& color_range(int index) const;
  ::safe_browsing::MatchRule_ColorRange* add_color_range();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::MatchRule_ColorRange >&
      color_range() const;

  // optional double hash_distance = 1;
  bool has_hash_distance() const;
  void clear_hash_distance();
  double hash_distance() const;
  void set_hash_distance(double value);

  // optional double color_distance = 2;
  bool has_color_distance() const;
  void clear_color_distance();
  double color_distance() const;
  void set_color_distance(double value);

  // @@protoc_insertion_point(class_scope:safe_browsing.MatchRule)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::MatchRule_ColorRange > color_range_;
  double hash_distance_;
  double color_distance_;
  friend struct ::TableStruct_components_2fsafe_5fbrowsing_2fcore_2fproto_2fclient_5fmodel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientSideModel_Rule

// repeated int32 feature = 1;
inline int ClientSideModel_Rule::feature_size() const {
  return feature_.size();
}
inline void ClientSideModel_Rule::clear_feature() {
  feature_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientSideModel_Rule::feature(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.Rule.feature)
  return feature_.Get(index);
}
inline void ClientSideModel_Rule::set_feature(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  feature_.Set(index, value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.Rule.feature)
}
inline void ClientSideModel_Rule::add_feature(::PROTOBUF_NAMESPACE_ID::int32 value) {
  feature_.Add(value);
  // @@protoc_insertion_point(field_add:safe_browsing.ClientSideModel.Rule.feature)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ClientSideModel_Rule::feature() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientSideModel.Rule.feature)
  return feature_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ClientSideModel_Rule::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientSideModel.Rule.feature)
  return &feature_;
}

// required float weight = 2;
inline bool ClientSideModel_Rule::has_weight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientSideModel_Rule::clear_weight() {
  weight_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float ClientSideModel_Rule::weight() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.Rule.weight)
  return weight_;
}
inline void ClientSideModel_Rule::set_weight(float value) {
  _has_bits_[0] |= 0x00000001u;
  weight_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.Rule.weight)
}

// -------------------------------------------------------------------

// ClientSideModel_IPSubnet

// required bytes prefix = 1;
inline bool ClientSideModel_IPSubnet::has_prefix() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientSideModel_IPSubnet::clear_prefix() {
  prefix_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientSideModel_IPSubnet::prefix() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.IPSubnet.prefix)
  return prefix_.GetNoArena();
}
inline void ClientSideModel_IPSubnet::set_prefix(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.IPSubnet.prefix)
}
inline void ClientSideModel_IPSubnet::set_prefix(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  prefix_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:safe_browsing.ClientSideModel.IPSubnet.prefix)
}
inline void ClientSideModel_IPSubnet::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safe_browsing.ClientSideModel.IPSubnet.prefix)
}
inline void ClientSideModel_IPSubnet::set_prefix(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  prefix_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safe_browsing.ClientSideModel.IPSubnet.prefix)
}
inline std::string* ClientSideModel_IPSubnet::mutable_prefix() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSideModel.IPSubnet.prefix)
  return prefix_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientSideModel_IPSubnet::release_prefix() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSideModel.IPSubnet.prefix)
  if (!has_prefix()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return prefix_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientSideModel_IPSubnet::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  prefix_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix);
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSideModel.IPSubnet.prefix)
}

// optional int32 size = 2 [default = 128];
inline bool ClientSideModel_IPSubnet::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientSideModel_IPSubnet::clear_size() {
  size_ = 128;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientSideModel_IPSubnet::size() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.IPSubnet.size)
  return size_;
}
inline void ClientSideModel_IPSubnet::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  size_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.IPSubnet.size)
}

// -------------------------------------------------------------------

// ClientSideModel

// repeated bytes hashes = 1;
inline int ClientSideModel::hashes_size() const {
  return hashes_.size();
}
inline void ClientSideModel::clear_hashes() {
  hashes_.Clear();
}
inline const std::string& ClientSideModel::hashes(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.hashes)
  return hashes_.Get(index);
}
inline std::string* ClientSideModel::mutable_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSideModel.hashes)
  return hashes_.Mutable(index);
}
inline void ClientSideModel::set_hashes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.hashes)
  hashes_.Mutable(index)->assign(value);
}
inline void ClientSideModel::set_hashes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.hashes)
  hashes_.Mutable(index)->assign(std::move(value));
}
inline void ClientSideModel::set_hashes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hashes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:safe_browsing.ClientSideModel.hashes)
}
inline void ClientSideModel::set_hashes(int index, const void* value, size_t size) {
  hashes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:safe_browsing.ClientSideModel.hashes)
}
inline std::string* ClientSideModel::add_hashes() {
  // @@protoc_insertion_point(field_add_mutable:safe_browsing.ClientSideModel.hashes)
  return hashes_.Add();
}
inline void ClientSideModel::add_hashes(const std::string& value) {
  hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:safe_browsing.ClientSideModel.hashes)
}
inline void ClientSideModel::add_hashes(std::string&& value) {
  hashes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:safe_browsing.ClientSideModel.hashes)
}
inline void ClientSideModel::add_hashes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hashes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:safe_browsing.ClientSideModel.hashes)
}
inline void ClientSideModel::add_hashes(const void* value, size_t size) {
  hashes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:safe_browsing.ClientSideModel.hashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ClientSideModel::hashes() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientSideModel.hashes)
  return hashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ClientSideModel::mutable_hashes() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientSideModel.hashes)
  return &hashes_;
}

// repeated .safe_browsing.ClientSideModel.Rule rule = 2;
inline int ClientSideModel::rule_size() const {
  return rule_.size();
}
inline void ClientSideModel::clear_rule() {
  rule_.Clear();
}
inline ::safe_browsing::ClientSideModel_Rule* ClientSideModel::mutable_rule(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSideModel.rule)
  return rule_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSideModel_Rule >*
ClientSideModel::mutable_rule() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientSideModel.rule)
  return &rule_;
}
inline const ::safe_browsing::ClientSideModel_Rule& ClientSideModel::rule(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.rule)
  return rule_.Get(index);
}
inline ::safe_browsing::ClientSideModel_Rule* ClientSideModel::add_rule() {
  // @@protoc_insertion_point(field_add:safe_browsing.ClientSideModel.rule)
  return rule_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSideModel_Rule >&
ClientSideModel::rule() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientSideModel.rule)
  return rule_;
}

// repeated int32 page_term = 3;
inline int ClientSideModel::page_term_size() const {
  return page_term_.size();
}
inline void ClientSideModel::clear_page_term() {
  page_term_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientSideModel::page_term(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.page_term)
  return page_term_.Get(index);
}
inline void ClientSideModel::set_page_term(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  page_term_.Set(index, value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.page_term)
}
inline void ClientSideModel::add_page_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  page_term_.Add(value);
  // @@protoc_insertion_point(field_add:safe_browsing.ClientSideModel.page_term)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ClientSideModel::page_term() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientSideModel.page_term)
  return page_term_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ClientSideModel::mutable_page_term() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientSideModel.page_term)
  return &page_term_;
}

// repeated fixed32 page_word = 4;
inline int ClientSideModel::page_word_size() const {
  return page_word_.size();
}
inline void ClientSideModel::clear_page_word() {
  page_word_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClientSideModel::page_word(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.page_word)
  return page_word_.Get(index);
}
inline void ClientSideModel::set_page_word(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  page_word_.Set(index, value);
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.page_word)
}
inline void ClientSideModel::add_page_word(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  page_word_.Add(value);
  // @@protoc_insertion_point(field_add:safe_browsing.ClientSideModel.page_word)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ClientSideModel::page_word() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientSideModel.page_word)
  return page_word_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ClientSideModel::mutable_page_word() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientSideModel.page_word)
  return &page_word_;
}

// required int32 max_words_per_term = 5;
inline bool ClientSideModel::has_max_words_per_term() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientSideModel::clear_max_words_per_term() {
  max_words_per_term_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientSideModel::max_words_per_term() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.max_words_per_term)
  return max_words_per_term_;
}
inline void ClientSideModel::set_max_words_per_term(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  max_words_per_term_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.max_words_per_term)
}

// optional int32 version = 6;
inline bool ClientSideModel::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientSideModel::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientSideModel::version() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.version)
  return version_;
}
inline void ClientSideModel::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  version_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.version)
}

// repeated .safe_browsing.ClientSideModel.IPSubnet bad_subnet = 7;
inline int ClientSideModel::bad_subnet_size() const {
  return bad_subnet_.size();
}
inline void ClientSideModel::clear_bad_subnet() {
  bad_subnet_.Clear();
}
inline ::safe_browsing::ClientSideModel_IPSubnet* ClientSideModel::mutable_bad_subnet(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSideModel.bad_subnet)
  return bad_subnet_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSideModel_IPSubnet >*
ClientSideModel::mutable_bad_subnet() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.ClientSideModel.bad_subnet)
  return &bad_subnet_;
}
inline const ::safe_browsing::ClientSideModel_IPSubnet& ClientSideModel::bad_subnet(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.bad_subnet)
  return bad_subnet_.Get(index);
}
inline ::safe_browsing::ClientSideModel_IPSubnet* ClientSideModel::add_bad_subnet() {
  // @@protoc_insertion_point(field_add:safe_browsing.ClientSideModel.bad_subnet)
  return bad_subnet_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::ClientSideModel_IPSubnet >&
ClientSideModel::bad_subnet() const {
  // @@protoc_insertion_point(field_list:safe_browsing.ClientSideModel.bad_subnet)
  return bad_subnet_;
}

// optional fixed32 murmur_hash_seed = 8;
inline bool ClientSideModel::has_murmur_hash_seed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientSideModel::clear_murmur_hash_seed() {
  murmur_hash_seed_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClientSideModel::murmur_hash_seed() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.murmur_hash_seed)
  return murmur_hash_seed_;
}
inline void ClientSideModel::set_murmur_hash_seed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  murmur_hash_seed_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.murmur_hash_seed)
}

// optional int32 max_shingles_per_page = 9 [default = 200];
inline bool ClientSideModel::has_max_shingles_per_page() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClientSideModel::clear_max_shingles_per_page() {
  max_shingles_per_page_ = 200;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientSideModel::max_shingles_per_page() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.max_shingles_per_page)
  return max_shingles_per_page_;
}
inline void ClientSideModel::set_max_shingles_per_page(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  max_shingles_per_page_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.max_shingles_per_page)
}

// optional int32 shingle_size = 10 [default = 4];
inline bool ClientSideModel::has_shingle_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ClientSideModel::clear_shingle_size() {
  shingle_size_ = 4;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientSideModel::shingle_size() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.shingle_size)
  return shingle_size_;
}
inline void ClientSideModel::set_shingle_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  shingle_size_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.shingle_size)
}

// optional float threshold_probability = 11 [default = 0.5];
inline bool ClientSideModel::has_threshold_probability() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClientSideModel::clear_threshold_probability() {
  threshold_probability_ = 0.5f;
  _has_bits_[0] &= ~0x00000010u;
}
inline float ClientSideModel::threshold_probability() const {
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.threshold_probability)
  return threshold_probability_;
}
inline void ClientSideModel::set_threshold_probability(float value) {
  _has_bits_[0] |= 0x00000010u;
  threshold_probability_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.ClientSideModel.threshold_probability)
}

// optional .safe_browsing.VisionModel vision_model = 12;
inline bool ClientSideModel::has_vision_model() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientSideModel::clear_vision_model() {
  if (vision_model_ != nullptr) vision_model_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::safe_browsing::VisionModel& ClientSideModel::vision_model() const {
  const ::safe_browsing::VisionModel* p = vision_model_;
  // @@protoc_insertion_point(field_get:safe_browsing.ClientSideModel.vision_model)
  return p != nullptr ? *p : *reinterpret_cast<const ::safe_browsing::VisionModel*>(
      &::safe_browsing::_VisionModel_default_instance_);
}
inline ::safe_browsing::VisionModel* ClientSideModel::release_vision_model() {
  // @@protoc_insertion_point(field_release:safe_browsing.ClientSideModel.vision_model)
  _has_bits_[0] &= ~0x00000001u;
  ::safe_browsing::VisionModel* temp = vision_model_;
  vision_model_ = nullptr;
  return temp;
}
inline ::safe_browsing::VisionModel* ClientSideModel::mutable_vision_model() {
  _has_bits_[0] |= 0x00000001u;
  if (vision_model_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::VisionModel>(GetArenaNoVirtual());
    vision_model_ = p;
  }
  // @@protoc_insertion_point(field_mutable:safe_browsing.ClientSideModel.vision_model)
  return vision_model_;
}
inline void ClientSideModel::set_allocated_vision_model(::safe_browsing::VisionModel* vision_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vision_model_;
  }
  if (vision_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vision_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vision_model, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  vision_model_ = vision_model;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.ClientSideModel.vision_model)
}

// -------------------------------------------------------------------

// VisionModel

// repeated .safe_browsing.VisualTarget targets = 1;
inline int VisionModel::targets_size() const {
  return targets_.size();
}
inline void VisionModel::clear_targets() {
  targets_.Clear();
}
inline ::safe_browsing::VisualTarget* VisionModel::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.VisionModel.targets)
  return targets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::VisualTarget >*
VisionModel::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.VisionModel.targets)
  return &targets_;
}
inline const ::safe_browsing::VisualTarget& VisionModel::targets(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.VisionModel.targets)
  return targets_.Get(index);
}
inline ::safe_browsing::VisualTarget* VisionModel::add_targets() {
  // @@protoc_insertion_point(field_add:safe_browsing.VisionModel.targets)
  return targets_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::VisualTarget >&
VisionModel::targets() const {
  // @@protoc_insertion_point(field_list:safe_browsing.VisionModel.targets)
  return targets_;
}

// -------------------------------------------------------------------

// VisualTarget

// optional bytes digest = 1;
inline bool VisualTarget::has_digest() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VisualTarget::clear_digest() {
  digest_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VisualTarget::digest() const {
  // @@protoc_insertion_point(field_get:safe_browsing.VisualTarget.digest)
  return digest_.GetNoArena();
}
inline void VisualTarget::set_digest(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  digest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safe_browsing.VisualTarget.digest)
}
inline void VisualTarget::set_digest(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  digest_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:safe_browsing.VisualTarget.digest)
}
inline void VisualTarget::set_digest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  digest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safe_browsing.VisualTarget.digest)
}
inline void VisualTarget::set_digest(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  digest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safe_browsing.VisualTarget.digest)
}
inline std::string* VisualTarget::mutable_digest() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:safe_browsing.VisualTarget.digest)
  return digest_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VisualTarget::release_digest() {
  // @@protoc_insertion_point(field_release:safe_browsing.VisualTarget.digest)
  if (!has_digest()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return digest_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VisualTarget::set_allocated_digest(std::string* digest) {
  if (digest != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  digest_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), digest);
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.VisualTarget.digest)
}

// optional int64 timestamp_usec = 2;
inline bool VisualTarget::has_timestamp_usec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VisualTarget::clear_timestamp_usec() {
  timestamp_usec_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VisualTarget::timestamp_usec() const {
  // @@protoc_insertion_point(field_get:safe_browsing.VisualTarget.timestamp_usec)
  return timestamp_usec_;
}
inline void VisualTarget::set_timestamp_usec(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  timestamp_usec_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.VisualTarget.timestamp_usec)
}

// optional bytes hash = 3;
inline bool VisualTarget::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VisualTarget::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VisualTarget::hash() const {
  // @@protoc_insertion_point(field_get:safe_browsing.VisualTarget.hash)
  return hash_.GetNoArena();
}
inline void VisualTarget::set_hash(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:safe_browsing.VisualTarget.hash)
}
inline void VisualTarget::set_hash(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:safe_browsing.VisualTarget.hash)
}
inline void VisualTarget::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:safe_browsing.VisualTarget.hash)
}
inline void VisualTarget::set_hash(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:safe_browsing.VisualTarget.hash)
}
inline std::string* VisualTarget::mutable_hash() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:safe_browsing.VisualTarget.hash)
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VisualTarget::release_hash() {
  // @@protoc_insertion_point(field_release:safe_browsing.VisualTarget.hash)
  if (!has_hash()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return hash_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VisualTarget::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.VisualTarget.hash)
}

// optional int32 dimension_size = 4;
inline bool VisualTarget::has_dimension_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VisualTarget::clear_dimension_size() {
  dimension_size_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VisualTarget::dimension_size() const {
  // @@protoc_insertion_point(field_get:safe_browsing.VisualTarget.dimension_size)
  return dimension_size_;
}
inline void VisualTarget::set_dimension_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  dimension_size_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.VisualTarget.dimension_size)
}

// repeated .safe_browsing.VisualFeatures.ColorHistogramBin bins = 5;
inline int VisualTarget::bins_size() const {
  return bins_.size();
}
inline ::safe_browsing::VisualFeatures_ColorHistogramBin* VisualTarget::mutable_bins(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.VisualTarget.bins)
  return bins_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::VisualFeatures_ColorHistogramBin >*
VisualTarget::mutable_bins() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.VisualTarget.bins)
  return &bins_;
}
inline const ::safe_browsing::VisualFeatures_ColorHistogramBin& VisualTarget::bins(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.VisualTarget.bins)
  return bins_.Get(index);
}
inline ::safe_browsing::VisualFeatures_ColorHistogramBin* VisualTarget::add_bins() {
  // @@protoc_insertion_point(field_add:safe_browsing.VisualTarget.bins)
  return bins_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::VisualFeatures_ColorHistogramBin >&
VisualTarget::bins() const {
  // @@protoc_insertion_point(field_list:safe_browsing.VisualTarget.bins)
  return bins_;
}

// optional .safe_browsing.MatchConfig match_config = 6;
inline bool VisualTarget::has_match_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VisualTarget::clear_match_config() {
  if (match_config_ != nullptr) match_config_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::safe_browsing::MatchConfig& VisualTarget::match_config() const {
  const ::safe_browsing::MatchConfig* p = match_config_;
  // @@protoc_insertion_point(field_get:safe_browsing.VisualTarget.match_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::safe_browsing::MatchConfig*>(
      &::safe_browsing::_MatchConfig_default_instance_);
}
inline ::safe_browsing::MatchConfig* VisualTarget::release_match_config() {
  // @@protoc_insertion_point(field_release:safe_browsing.VisualTarget.match_config)
  _has_bits_[0] &= ~0x00000004u;
  ::safe_browsing::MatchConfig* temp = match_config_;
  match_config_ = nullptr;
  return temp;
}
inline ::safe_browsing::MatchConfig* VisualTarget::mutable_match_config() {
  _has_bits_[0] |= 0x00000004u;
  if (match_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::MatchConfig>(GetArenaNoVirtual());
    match_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:safe_browsing.VisualTarget.match_config)
  return match_config_;
}
inline void VisualTarget::set_allocated_match_config(::safe_browsing::MatchConfig* match_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete match_config_;
  }
  if (match_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      match_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  match_config_ = match_config;
  // @@protoc_insertion_point(field_set_allocated:safe_browsing.VisualTarget.match_config)
}

// -------------------------------------------------------------------

// MatchConfig

// repeated .safe_browsing.MatchRule match_rule = 1;
inline int MatchConfig::match_rule_size() const {
  return match_rule_.size();
}
inline void MatchConfig::clear_match_rule() {
  match_rule_.Clear();
}
inline ::safe_browsing::MatchRule* MatchConfig::mutable_match_rule(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.MatchConfig.match_rule)
  return match_rule_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::MatchRule >*
MatchConfig::mutable_match_rule() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.MatchConfig.match_rule)
  return &match_rule_;
}
inline const ::safe_browsing::MatchRule& MatchConfig::match_rule(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.MatchConfig.match_rule)
  return match_rule_.Get(index);
}
inline ::safe_browsing::MatchRule* MatchConfig::add_match_rule() {
  // @@protoc_insertion_point(field_add:safe_browsing.MatchConfig.match_rule)
  return match_rule_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::MatchRule >&
MatchConfig::match_rule() const {
  // @@protoc_insertion_point(field_list:safe_browsing.MatchConfig.match_rule)
  return match_rule_;
}

// -------------------------------------------------------------------

// MatchRule_ColorRange

// optional int32 low = 1;
inline bool MatchRule_ColorRange::has_low() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchRule_ColorRange::clear_low() {
  low_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchRule_ColorRange::low() const {
  // @@protoc_insertion_point(field_get:safe_browsing.MatchRule.ColorRange.low)
  return low_;
}
inline void MatchRule_ColorRange::set_low(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  low_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.MatchRule.ColorRange.low)
}

// optional int32 high = 2;
inline bool MatchRule_ColorRange::has_high() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchRule_ColorRange::clear_high() {
  high_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchRule_ColorRange::high() const {
  // @@protoc_insertion_point(field_get:safe_browsing.MatchRule.ColorRange.high)
  return high_;
}
inline void MatchRule_ColorRange::set_high(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  high_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.MatchRule.ColorRange.high)
}

// -------------------------------------------------------------------

// MatchRule

// optional double hash_distance = 1;
inline bool MatchRule::has_hash_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchRule::clear_hash_distance() {
  hash_distance_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double MatchRule::hash_distance() const {
  // @@protoc_insertion_point(field_get:safe_browsing.MatchRule.hash_distance)
  return hash_distance_;
}
inline void MatchRule::set_hash_distance(double value) {
  _has_bits_[0] |= 0x00000001u;
  hash_distance_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.MatchRule.hash_distance)
}

// optional double color_distance = 2;
inline bool MatchRule::has_color_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchRule::clear_color_distance() {
  color_distance_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double MatchRule::color_distance() const {
  // @@protoc_insertion_point(field_get:safe_browsing.MatchRule.color_distance)
  return color_distance_;
}
inline void MatchRule::set_color_distance(double value) {
  _has_bits_[0] |= 0x00000002u;
  color_distance_ = value;
  // @@protoc_insertion_point(field_set:safe_browsing.MatchRule.color_distance)
}

// repeated .safe_browsing.MatchRule.ColorRange color_range = 3;
inline int MatchRule::color_range_size() const {
  return color_range_.size();
}
inline void MatchRule::clear_color_range() {
  color_range_.Clear();
}
inline ::safe_browsing::MatchRule_ColorRange* MatchRule::mutable_color_range(int index) {
  // @@protoc_insertion_point(field_mutable:safe_browsing.MatchRule.color_range)
  return color_range_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::MatchRule_ColorRange >*
MatchRule::mutable_color_range() {
  // @@protoc_insertion_point(field_mutable_list:safe_browsing.MatchRule.color_range)
  return &color_range_;
}
inline const ::safe_browsing::MatchRule_ColorRange& MatchRule::color_range(int index) const {
  // @@protoc_insertion_point(field_get:safe_browsing.MatchRule.color_range)
  return color_range_.Get(index);
}
inline ::safe_browsing::MatchRule_ColorRange* MatchRule::add_color_range() {
  // @@protoc_insertion_point(field_add:safe_browsing.MatchRule.color_range)
  return color_range_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::safe_browsing::MatchRule_ColorRange >&
MatchRule::color_range() const {
  // @@protoc_insertion_point(field_list:safe_browsing.MatchRule.color_range)
  return color_range_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace safe_browsing

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fsafe_5fbrowsing_2fcore_2fproto_2fclient_5fmodel_2eproto

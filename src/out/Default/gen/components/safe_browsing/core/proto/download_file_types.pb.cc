// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: download_file_types.proto

#include "download_file_types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_download_5ffile_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DownloadFileType_download_5ffile_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_download_5ffile_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DownloadFileType_PlatformSettings_download_5ffile_5ftypes_2eproto;
namespace safe_browsing {
class DownloadFileType_PlatformSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DownloadFileType_PlatformSettings> _instance;
} _DownloadFileType_PlatformSettings_default_instance_;
class DownloadFileTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DownloadFileType> _instance;
} _DownloadFileType_default_instance_;
class DownloadFileTypeConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DownloadFileTypeConfig> _instance;
} _DownloadFileTypeConfig_default_instance_;
}  // namespace safe_browsing
static void InitDefaultsscc_info_DownloadFileType_download_5ffile_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safe_browsing::_DownloadFileType_default_instance_;
    new (ptr) ::safe_browsing::DownloadFileType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safe_browsing::DownloadFileType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DownloadFileType_download_5ffile_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DownloadFileType_download_5ffile_5ftypes_2eproto}, {
      &scc_info_DownloadFileType_PlatformSettings_download_5ffile_5ftypes_2eproto.base,}};

static void InitDefaultsscc_info_DownloadFileType_PlatformSettings_download_5ffile_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safe_browsing::_DownloadFileType_PlatformSettings_default_instance_;
    new (ptr) ::safe_browsing::DownloadFileType_PlatformSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safe_browsing::DownloadFileType_PlatformSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DownloadFileType_PlatformSettings_download_5ffile_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DownloadFileType_PlatformSettings_download_5ffile_5ftypes_2eproto}, {}};

static void InitDefaultsscc_info_DownloadFileTypeConfig_download_5ffile_5ftypes_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::safe_browsing::_DownloadFileTypeConfig_default_instance_;
    new (ptr) ::safe_browsing::DownloadFileTypeConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::safe_browsing::DownloadFileTypeConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DownloadFileTypeConfig_download_5ffile_5ftypes_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DownloadFileTypeConfig_download_5ffile_5ftypes_2eproto}, {
      &scc_info_DownloadFileType_download_5ffile_5ftypes_2eproto.base,}};

namespace safe_browsing {
bool DownloadFileType_PingSetting_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DownloadFileType_PingSetting_strings[3] = {};

static const char DownloadFileType_PingSetting_names[] =
  "FULL_PING"
  "NO_PING"
  "SAMPLED_PING";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DownloadFileType_PingSetting_entries[] = {
  { {DownloadFileType_PingSetting_names + 0, 9}, 2 },
  { {DownloadFileType_PingSetting_names + 9, 7}, 1 },
  { {DownloadFileType_PingSetting_names + 16, 12}, 0 },
};

static const int DownloadFileType_PingSetting_entries_by_number[] = {
  2, // 0 -> SAMPLED_PING
  1, // 1 -> NO_PING
  0, // 2 -> FULL_PING
};

const std::string& DownloadFileType_PingSetting_Name(
    DownloadFileType_PingSetting value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DownloadFileType_PingSetting_entries,
          DownloadFileType_PingSetting_entries_by_number,
          3, DownloadFileType_PingSetting_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DownloadFileType_PingSetting_entries,
      DownloadFileType_PingSetting_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DownloadFileType_PingSetting_strings[idx].get();
}
bool DownloadFileType_PingSetting_Parse(
    const std::string& name, DownloadFileType_PingSetting* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DownloadFileType_PingSetting_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<DownloadFileType_PingSetting>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DownloadFileType_PingSetting DownloadFileType::SAMPLED_PING;
constexpr DownloadFileType_PingSetting DownloadFileType::NO_PING;
constexpr DownloadFileType_PingSetting DownloadFileType::FULL_PING;
constexpr DownloadFileType_PingSetting DownloadFileType::PingSetting_MIN;
constexpr DownloadFileType_PingSetting DownloadFileType::PingSetting_MAX;
constexpr int DownloadFileType::PingSetting_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DownloadFileType_DangerLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DownloadFileType_DangerLevel_strings[3] = {};

static const char DownloadFileType_DangerLevel_names[] =
  "ALLOW_ON_USER_GESTURE"
  "DANGEROUS"
  "NOT_DANGEROUS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DownloadFileType_DangerLevel_entries[] = {
  { {DownloadFileType_DangerLevel_names + 0, 21}, 1 },
  { {DownloadFileType_DangerLevel_names + 21, 9}, 2 },
  { {DownloadFileType_DangerLevel_names + 30, 13}, 0 },
};

static const int DownloadFileType_DangerLevel_entries_by_number[] = {
  2, // 0 -> NOT_DANGEROUS
  0, // 1 -> ALLOW_ON_USER_GESTURE
  1, // 2 -> DANGEROUS
};

const std::string& DownloadFileType_DangerLevel_Name(
    DownloadFileType_DangerLevel value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DownloadFileType_DangerLevel_entries,
          DownloadFileType_DangerLevel_entries_by_number,
          3, DownloadFileType_DangerLevel_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DownloadFileType_DangerLevel_entries,
      DownloadFileType_DangerLevel_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DownloadFileType_DangerLevel_strings[idx].get();
}
bool DownloadFileType_DangerLevel_Parse(
    const std::string& name, DownloadFileType_DangerLevel* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DownloadFileType_DangerLevel_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<DownloadFileType_DangerLevel>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DownloadFileType_DangerLevel DownloadFileType::NOT_DANGEROUS;
constexpr DownloadFileType_DangerLevel DownloadFileType::ALLOW_ON_USER_GESTURE;
constexpr DownloadFileType_DangerLevel DownloadFileType::DANGEROUS;
constexpr DownloadFileType_DangerLevel DownloadFileType::DangerLevel_MIN;
constexpr DownloadFileType_DangerLevel DownloadFileType::DangerLevel_MAX;
constexpr int DownloadFileType::DangerLevel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DownloadFileType_AutoOpenHint_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DownloadFileType_AutoOpenHint_strings[2] = {};

static const char DownloadFileType_AutoOpenHint_names[] =
  "ALLOW_AUTO_OPEN"
  "DISALLOW_AUTO_OPEN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DownloadFileType_AutoOpenHint_entries[] = {
  { {DownloadFileType_AutoOpenHint_names + 0, 15}, 1 },
  { {DownloadFileType_AutoOpenHint_names + 15, 18}, 0 },
};

static const int DownloadFileType_AutoOpenHint_entries_by_number[] = {
  1, // 0 -> DISALLOW_AUTO_OPEN
  0, // 1 -> ALLOW_AUTO_OPEN
};

const std::string& DownloadFileType_AutoOpenHint_Name(
    DownloadFileType_AutoOpenHint value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DownloadFileType_AutoOpenHint_entries,
          DownloadFileType_AutoOpenHint_entries_by_number,
          2, DownloadFileType_AutoOpenHint_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DownloadFileType_AutoOpenHint_entries,
      DownloadFileType_AutoOpenHint_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DownloadFileType_AutoOpenHint_strings[idx].get();
}
bool DownloadFileType_AutoOpenHint_Parse(
    const std::string& name, DownloadFileType_AutoOpenHint* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DownloadFileType_AutoOpenHint_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<DownloadFileType_AutoOpenHint>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DownloadFileType_AutoOpenHint DownloadFileType::DISALLOW_AUTO_OPEN;
constexpr DownloadFileType_AutoOpenHint DownloadFileType::ALLOW_AUTO_OPEN;
constexpr DownloadFileType_AutoOpenHint DownloadFileType::AutoOpenHint_MIN;
constexpr DownloadFileType_AutoOpenHint DownloadFileType::AutoOpenHint_MAX;
constexpr int DownloadFileType::AutoOpenHint_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DownloadFileType_PlatformType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DownloadFileType_PlatformType_strings[6] = {};

static const char DownloadFileType_PlatformType_names[] =
  "PLATFORM_ANDROID"
  "PLATFORM_ANY"
  "PLATFORM_CHROME_OS"
  "PLATFORM_LINUX"
  "PLATFORM_MAC"
  "PLATFORM_WINDOWS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DownloadFileType_PlatformType_entries[] = {
  { {DownloadFileType_PlatformType_names + 0, 16}, 1 },
  { {DownloadFileType_PlatformType_names + 16, 12}, 0 },
  { {DownloadFileType_PlatformType_names + 28, 18}, 2 },
  { {DownloadFileType_PlatformType_names + 46, 14}, 3 },
  { {DownloadFileType_PlatformType_names + 60, 12}, 4 },
  { {DownloadFileType_PlatformType_names + 72, 16}, 5 },
};

static const int DownloadFileType_PlatformType_entries_by_number[] = {
  1, // 0 -> PLATFORM_ANY
  0, // 1 -> PLATFORM_ANDROID
  2, // 2 -> PLATFORM_CHROME_OS
  3, // 3 -> PLATFORM_LINUX
  4, // 4 -> PLATFORM_MAC
  5, // 5 -> PLATFORM_WINDOWS
};

const std::string& DownloadFileType_PlatformType_Name(
    DownloadFileType_PlatformType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DownloadFileType_PlatformType_entries,
          DownloadFileType_PlatformType_entries_by_number,
          6, DownloadFileType_PlatformType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DownloadFileType_PlatformType_entries,
      DownloadFileType_PlatformType_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DownloadFileType_PlatformType_strings[idx].get();
}
bool DownloadFileType_PlatformType_Parse(
    const std::string& name, DownloadFileType_PlatformType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DownloadFileType_PlatformType_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<DownloadFileType_PlatformType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DownloadFileType_PlatformType DownloadFileType::PLATFORM_ANY;
constexpr DownloadFileType_PlatformType DownloadFileType::PLATFORM_ANDROID;
constexpr DownloadFileType_PlatformType DownloadFileType::PLATFORM_CHROME_OS;
constexpr DownloadFileType_PlatformType DownloadFileType::PLATFORM_LINUX;
constexpr DownloadFileType_PlatformType DownloadFileType::PLATFORM_MAC;
constexpr DownloadFileType_PlatformType DownloadFileType::PLATFORM_WINDOWS;
constexpr DownloadFileType_PlatformType DownloadFileType::PlatformType_MIN;
constexpr DownloadFileType_PlatformType DownloadFileType::PlatformType_MAX;
constexpr int DownloadFileType::PlatformType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DownloadFileType_InspectionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DownloadFileType_InspectionType_strings[4] = {};

static const char DownloadFileType_InspectionType_names[] =
  "DMG"
  "NONE"
  "RAR"
  "ZIP";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DownloadFileType_InspectionType_entries[] = {
  { {DownloadFileType_InspectionType_names + 0, 3}, 3 },
  { {DownloadFileType_InspectionType_names + 3, 4}, 0 },
  { {DownloadFileType_InspectionType_names + 7, 3}, 2 },
  { {DownloadFileType_InspectionType_names + 10, 3}, 1 },
};

static const int DownloadFileType_InspectionType_entries_by_number[] = {
  1, // 0 -> NONE
  3, // 1 -> ZIP
  2, // 2 -> RAR
  0, // 3 -> DMG
};

const std::string& DownloadFileType_InspectionType_Name(
    DownloadFileType_InspectionType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DownloadFileType_InspectionType_entries,
          DownloadFileType_InspectionType_entries_by_number,
          4, DownloadFileType_InspectionType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DownloadFileType_InspectionType_entries,
      DownloadFileType_InspectionType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DownloadFileType_InspectionType_strings[idx].get();
}
bool DownloadFileType_InspectionType_Parse(
    const std::string& name, DownloadFileType_InspectionType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DownloadFileType_InspectionType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<DownloadFileType_InspectionType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DownloadFileType_InspectionType DownloadFileType::NONE;
constexpr DownloadFileType_InspectionType DownloadFileType::ZIP;
constexpr DownloadFileType_InspectionType DownloadFileType::RAR;
constexpr DownloadFileType_InspectionType DownloadFileType::DMG;
constexpr DownloadFileType_InspectionType DownloadFileType::InspectionType_MIN;
constexpr DownloadFileType_InspectionType DownloadFileType::InspectionType_MAX;
constexpr int DownloadFileType::InspectionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void DownloadFileType_PlatformSettings::InitAsDefaultInstance() {
}
class DownloadFileType_PlatformSettings::_Internal {
 public:
  using HasBits = decltype(std::declval<DownloadFileType_PlatformSettings>()._has_bits_);
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_danger_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_auto_open_hint(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_file_size_to_analyze(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

DownloadFileType_PlatformSettings::DownloadFileType_PlatformSettings()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.DownloadFileType.PlatformSettings)
}
DownloadFileType_PlatformSettings::DownloadFileType_PlatformSettings(const DownloadFileType_PlatformSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&platform_, &from.platform_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_file_size_to_analyze_) -
    reinterpret_cast<char*>(&platform_)) + sizeof(max_file_size_to_analyze_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.DownloadFileType.PlatformSettings)
}

void DownloadFileType_PlatformSettings::SharedCtor() {
  ::memset(&platform_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auto_open_hint_) -
      reinterpret_cast<char*>(&platform_)) + sizeof(auto_open_hint_));
  max_file_size_to_analyze_ = PROTOBUF_ULONGLONG(18446744073709551615);
}

DownloadFileType_PlatformSettings::~DownloadFileType_PlatformSettings() {
  // @@protoc_insertion_point(destructor:safe_browsing.DownloadFileType.PlatformSettings)
  SharedDtor();
}

void DownloadFileType_PlatformSettings::SharedDtor() {
}

void DownloadFileType_PlatformSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DownloadFileType_PlatformSettings& DownloadFileType_PlatformSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DownloadFileType_PlatformSettings_download_5ffile_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void DownloadFileType_PlatformSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.DownloadFileType.PlatformSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&platform_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&auto_open_hint_) -
        reinterpret_cast<char*>(&platform_)) + sizeof(auto_open_hint_));
    max_file_size_to_analyze_ = PROTOBUF_ULONGLONG(18446744073709551615);
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DownloadFileType_PlatformSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .safe_browsing.DownloadFileType.PlatformType platform = 1 [default = PLATFORM_ANY];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::DownloadFileType_PlatformType_IsValid(val))) {
            set_platform(static_cast<::safe_browsing::DownloadFileType_PlatformType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .safe_browsing.DownloadFileType.DangerLevel danger_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::DownloadFileType_DangerLevel_IsValid(val))) {
            set_danger_level(static_cast<::safe_browsing::DownloadFileType_DangerLevel>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .safe_browsing.DownloadFileType.AutoOpenHint auto_open_hint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::DownloadFileType_AutoOpenHint_IsValid(val))) {
            set_auto_open_hint(static_cast<::safe_browsing::DownloadFileType_AutoOpenHint>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 max_file_size_to_analyze = 4 [default = 18446744073709551615];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_file_size_to_analyze(&has_bits);
          max_file_size_to_analyze_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DownloadFileType_PlatformSettings::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.DownloadFileType.PlatformSettings)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .safe_browsing.DownloadFileType.PlatformType platform = 1 [default = PLATFORM_ANY];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::safe_browsing::DownloadFileType_PlatformType_IsValid(value)) {
            set_platform(static_cast< ::safe_browsing::DownloadFileType_PlatformType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .safe_browsing.DownloadFileType.DangerLevel danger_level = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::safe_browsing::DownloadFileType_DangerLevel_IsValid(value)) {
            set_danger_level(static_cast< ::safe_browsing::DownloadFileType_DangerLevel >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .safe_browsing.DownloadFileType.AutoOpenHint auto_open_hint = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::safe_browsing::DownloadFileType_AutoOpenHint_IsValid(value)) {
            set_auto_open_hint(static_cast< ::safe_browsing::DownloadFileType_AutoOpenHint >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 max_file_size_to_analyze = 4 [default = 18446744073709551615];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_max_file_size_to_analyze(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_file_size_to_analyze_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.DownloadFileType.PlatformSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.DownloadFileType.PlatformSettings)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DownloadFileType_PlatformSettings::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.DownloadFileType.PlatformSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .safe_browsing.DownloadFileType.PlatformType platform = 1 [default = PLATFORM_ANY];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->platform(), output);
  }

  // optional .safe_browsing.DownloadFileType.DangerLevel danger_level = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->danger_level(), output);
  }

  // optional .safe_browsing.DownloadFileType.AutoOpenHint auto_open_hint = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->auto_open_hint(), output);
  }

  // optional uint64 max_file_size_to_analyze = 4 [default = 18446744073709551615];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->max_file_size_to_analyze(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.DownloadFileType.PlatformSettings)
}

size_t DownloadFileType_PlatformSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.DownloadFileType.PlatformSettings)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .safe_browsing.DownloadFileType.PlatformType platform = 1 [default = PLATFORM_ANY];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->platform());
    }

    // optional .safe_browsing.DownloadFileType.DangerLevel danger_level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->danger_level());
    }

    // optional .safe_browsing.DownloadFileType.AutoOpenHint auto_open_hint = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->auto_open_hint());
    }

    // optional uint64 max_file_size_to_analyze = 4 [default = 18446744073709551615];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->max_file_size_to_analyze());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DownloadFileType_PlatformSettings::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DownloadFileType_PlatformSettings*>(
      &from));
}

void DownloadFileType_PlatformSettings::MergeFrom(const DownloadFileType_PlatformSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.DownloadFileType.PlatformSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      platform_ = from.platform_;
    }
    if (cached_has_bits & 0x00000002u) {
      danger_level_ = from.danger_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      auto_open_hint_ = from.auto_open_hint_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_file_size_to_analyze_ = from.max_file_size_to_analyze_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DownloadFileType_PlatformSettings::CopyFrom(const DownloadFileType_PlatformSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.DownloadFileType.PlatformSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadFileType_PlatformSettings::IsInitialized() const {
  return true;
}

void DownloadFileType_PlatformSettings::InternalSwap(DownloadFileType_PlatformSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(platform_, other->platform_);
  swap(danger_level_, other->danger_level_);
  swap(auto_open_hint_, other->auto_open_hint_);
  swap(max_file_size_to_analyze_, other->max_file_size_to_analyze_);
}

std::string DownloadFileType_PlatformSettings::GetTypeName() const {
  return "safe_browsing.DownloadFileType.PlatformSettings";
}


// ===================================================================

void DownloadFileType::InitAsDefaultInstance() {
}
class DownloadFileType::_Internal {
 public:
  using HasBits = decltype(std::declval<DownloadFileType>()._has_bits_);
  static void set_has_extension(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uma_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_archive(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ping_setting(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_inspection_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

DownloadFileType::DownloadFileType()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.DownloadFileType)
}
DownloadFileType::DownloadFileType(const DownloadFileType& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      platform_settings_(from.platform_settings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extension_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_extension()) {
    extension_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extension_);
  }
  ::memcpy(&uma_value_, &from.uma_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&inspection_type_) -
    reinterpret_cast<char*>(&uma_value_)) + sizeof(inspection_type_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.DownloadFileType)
}

void DownloadFileType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DownloadFileType_download_5ffile_5ftypes_2eproto.base);
  extension_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&uma_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inspection_type_) -
      reinterpret_cast<char*>(&uma_value_)) + sizeof(inspection_type_));
}

DownloadFileType::~DownloadFileType() {
  // @@protoc_insertion_point(destructor:safe_browsing.DownloadFileType)
  SharedDtor();
}

void DownloadFileType::SharedDtor() {
  extension_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DownloadFileType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DownloadFileType& DownloadFileType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DownloadFileType_download_5ffile_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void DownloadFileType::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.DownloadFileType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  platform_settings_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    extension_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&uma_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&inspection_type_) -
        reinterpret_cast<char*>(&uma_value_)) + sizeof(inspection_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DownloadFileType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string extension = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_extension(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 uma_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_uma_value(&has_bits);
          uma_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_archive = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_archive(&has_bits);
          is_archive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .safe_browsing.DownloadFileType.PingSetting ping_setting = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::DownloadFileType_PingSetting_IsValid(val))) {
            set_ping_setting(static_cast<::safe_browsing::DownloadFileType_PingSetting>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .safe_browsing.DownloadFileType.PlatformSettings platform_settings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_platform_settings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // optional .safe_browsing.DownloadFileType.InspectionType inspection_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::safe_browsing::DownloadFileType_InspectionType_IsValid(val))) {
            set_inspection_type(static_cast<::safe_browsing::DownloadFileType_InspectionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DownloadFileType::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.DownloadFileType)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string extension = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_extension()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 uma_value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_uma_value(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &uma_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_archive = 3 [default = false];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_is_archive(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_archive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .safe_browsing.DownloadFileType.PingSetting ping_setting = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::safe_browsing::DownloadFileType_PingSetting_IsValid(value)) {
            set_ping_setting(static_cast< ::safe_browsing::DownloadFileType_PingSetting >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .safe_browsing.DownloadFileType.PlatformSettings platform_settings = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_platform_settings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .safe_browsing.DownloadFileType.InspectionType inspection_type = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::safe_browsing::DownloadFileType_InspectionType_IsValid(value)) {
            set_inspection_type(static_cast< ::safe_browsing::DownloadFileType_InspectionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(48u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.DownloadFileType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.DownloadFileType)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DownloadFileType::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.DownloadFileType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string extension = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->extension(), output);
  }

  // optional int64 uma_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->uma_value(), output);
  }

  // optional bool is_archive = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->is_archive(), output);
  }

  // optional .safe_browsing.DownloadFileType.PingSetting ping_setting = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->ping_setting(), output);
  }

  // repeated .safe_browsing.DownloadFileType.PlatformSettings platform_settings = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->platform_settings_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      5,
      this->platform_settings(static_cast<int>(i)),
      output);
  }

  // optional .safe_browsing.DownloadFileType.InspectionType inspection_type = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->inspection_type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.DownloadFileType)
}

size_t DownloadFileType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.DownloadFileType)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.DownloadFileType.PlatformSettings platform_settings = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->platform_settings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->platform_settings(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string extension = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->extension());
    }

    // optional int64 uma_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->uma_value());
    }

    // optional bool is_archive = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .safe_browsing.DownloadFileType.PingSetting ping_setting = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ping_setting());
    }

    // optional .safe_browsing.DownloadFileType.InspectionType inspection_type = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->inspection_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DownloadFileType::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DownloadFileType*>(
      &from));
}

void DownloadFileType::MergeFrom(const DownloadFileType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.DownloadFileType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  platform_settings_.MergeFrom(from.platform_settings_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      extension_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extension_);
    }
    if (cached_has_bits & 0x00000002u) {
      uma_value_ = from.uma_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_archive_ = from.is_archive_;
    }
    if (cached_has_bits & 0x00000008u) {
      ping_setting_ = from.ping_setting_;
    }
    if (cached_has_bits & 0x00000010u) {
      inspection_type_ = from.inspection_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DownloadFileType::CopyFrom(const DownloadFileType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.DownloadFileType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadFileType::IsInitialized() const {
  return true;
}

void DownloadFileType::InternalSwap(DownloadFileType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&platform_settings_)->InternalSwap(CastToBase(&other->platform_settings_));
  extension_.Swap(&other->extension_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(uma_value_, other->uma_value_);
  swap(is_archive_, other->is_archive_);
  swap(ping_setting_, other->ping_setting_);
  swap(inspection_type_, other->inspection_type_);
}

std::string DownloadFileType::GetTypeName() const {
  return "safe_browsing.DownloadFileType";
}


// ===================================================================

void DownloadFileTypeConfig::InitAsDefaultInstance() {
  ::safe_browsing::_DownloadFileTypeConfig_default_instance_._instance.get_mutable()->default_file_type_ = const_cast< ::safe_browsing::DownloadFileType*>(
      ::safe_browsing::DownloadFileType::internal_default_instance());
}
class DownloadFileTypeConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<DownloadFileTypeConfig>()._has_bits_);
  static void set_has_version_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sampled_ping_probability(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::safe_browsing::DownloadFileType& default_file_type(const DownloadFileTypeConfig* msg);
  static void set_has_default_file_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_archived_binaries_to_report(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::safe_browsing::DownloadFileType&
DownloadFileTypeConfig::_Internal::default_file_type(const DownloadFileTypeConfig* msg) {
  return *msg->default_file_type_;
}
DownloadFileTypeConfig::DownloadFileTypeConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:safe_browsing.DownloadFileTypeConfig)
}
DownloadFileTypeConfig::DownloadFileTypeConfig(const DownloadFileTypeConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      file_types_(from.file_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_default_file_type()) {
    default_file_type_ = new ::safe_browsing::DownloadFileType(*from.default_file_type_);
  } else {
    default_file_type_ = nullptr;
  }
  ::memcpy(&version_id_, &from.version_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_archived_binaries_to_report_) -
    reinterpret_cast<char*>(&version_id_)) + sizeof(max_archived_binaries_to_report_));
  // @@protoc_insertion_point(copy_constructor:safe_browsing.DownloadFileTypeConfig)
}

void DownloadFileTypeConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DownloadFileTypeConfig_download_5ffile_5ftypes_2eproto.base);
  ::memset(&default_file_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_archived_binaries_to_report_) -
      reinterpret_cast<char*>(&default_file_type_)) + sizeof(max_archived_binaries_to_report_));
}

DownloadFileTypeConfig::~DownloadFileTypeConfig() {
  // @@protoc_insertion_point(destructor:safe_browsing.DownloadFileTypeConfig)
  SharedDtor();
}

void DownloadFileTypeConfig::SharedDtor() {
  if (this != internal_default_instance()) delete default_file_type_;
}

void DownloadFileTypeConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DownloadFileTypeConfig& DownloadFileTypeConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DownloadFileTypeConfig_download_5ffile_5ftypes_2eproto.base);
  return *internal_default_instance();
}


void DownloadFileTypeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:safe_browsing.DownloadFileTypeConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_types_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(default_file_type_ != nullptr);
    default_file_type_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&version_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_archived_binaries_to_report_) -
        reinterpret_cast<char*>(&version_id_)) + sizeof(max_archived_binaries_to_report_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DownloadFileTypeConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 version_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version_id(&has_bits);
          version_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float sampled_ping_probability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_sampled_ping_probability(&has_bits);
          sampled_ping_probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .safe_browsing.DownloadFileType file_types = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_file_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // optional .safe_browsing.DownloadFileType default_file_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_default_file_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 max_archived_binaries_to_report = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_max_archived_binaries_to_report(&has_bits);
          max_archived_binaries_to_report_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DownloadFileTypeConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:safe_browsing.DownloadFileTypeConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_version_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sampled_ping_probability = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_sampled_ping_probability(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sampled_ping_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .safe_browsing.DownloadFileType file_types = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_file_types()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .safe_browsing.DownloadFileType default_file_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_default_file_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 max_archived_binaries_to_report = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_max_archived_binaries_to_report(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_archived_binaries_to_report_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:safe_browsing.DownloadFileTypeConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:safe_browsing.DownloadFileTypeConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DownloadFileTypeConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:safe_browsing.DownloadFileTypeConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->version_id(), output);
  }

  // optional float sampled_ping_probability = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->sampled_ping_probability(), output);
  }

  // repeated .safe_browsing.DownloadFileType file_types = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->file_types_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->file_types(static_cast<int>(i)),
      output);
  }

  // optional .safe_browsing.DownloadFileType default_file_type = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::default_file_type(this), output);
  }

  // optional uint64 max_archived_binaries_to_report = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->max_archived_binaries_to_report(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:safe_browsing.DownloadFileTypeConfig)
}

size_t DownloadFileTypeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safe_browsing.DownloadFileTypeConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .safe_browsing.DownloadFileType file_types = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->file_types_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->file_types(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .safe_browsing.DownloadFileType default_file_type = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *default_file_type_);
    }

    // optional uint32 version_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->version_id());
    }

    // optional float sampled_ping_probability = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint64 max_archived_binaries_to_report = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->max_archived_binaries_to_report());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DownloadFileTypeConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DownloadFileTypeConfig*>(
      &from));
}

void DownloadFileTypeConfig::MergeFrom(const DownloadFileTypeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safe_browsing.DownloadFileTypeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  file_types_.MergeFrom(from.file_types_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_default_file_type()->::safe_browsing::DownloadFileType::MergeFrom(from.default_file_type());
    }
    if (cached_has_bits & 0x00000002u) {
      version_id_ = from.version_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      sampled_ping_probability_ = from.sampled_ping_probability_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_archived_binaries_to_report_ = from.max_archived_binaries_to_report_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DownloadFileTypeConfig::CopyFrom(const DownloadFileTypeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safe_browsing.DownloadFileTypeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadFileTypeConfig::IsInitialized() const {
  return true;
}

void DownloadFileTypeConfig::InternalSwap(DownloadFileTypeConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&file_types_)->InternalSwap(CastToBase(&other->file_types_));
  swap(default_file_type_, other->default_file_type_);
  swap(version_id_, other->version_id_);
  swap(sampled_ping_probability_, other->sampled_ping_probability_);
  swap(max_archived_binaries_to_report_, other->max_archived_binaries_to_report_);
}

std::string DownloadFileTypeConfig::GetTypeName() const {
  return "safe_browsing.DownloadFileTypeConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace safe_browsing
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::safe_browsing::DownloadFileType_PlatformSettings* Arena::CreateMaybeMessage< ::safe_browsing::DownloadFileType_PlatformSettings >(Arena* arena) {
  return Arena::CreateInternal< ::safe_browsing::DownloadFileType_PlatformSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::DownloadFileType* Arena::CreateMaybeMessage< ::safe_browsing::DownloadFileType >(Arena* arena) {
  return Arena::CreateInternal< ::safe_browsing::DownloadFileType >(arena);
}
template<> PROTOBUF_NOINLINE ::safe_browsing::DownloadFileTypeConfig* Arena::CreateMaybeMessage< ::safe_browsing::DownloadFileTypeConfig >(Arena* arena) {
  return Arena::CreateInternal< ::safe_browsing::DownloadFileTypeConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// components/page_load_metrics/common/page_load_metrics.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_PAGE_LOAD_METRICS_COMMON_PAGE_LOAD_METRICS_MOJOM_SHARED_INTERNAL_H_
#define COMPONENTS_PAGE_LOAD_METRICS_COMMON_PAGE_LOAD_METRICS_MOJOM_SHARED_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/web_feature/web_feature.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/use_counter/css_property_id.mojom-shared-internal.h"
#include "url/mojom/origin.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace page_load_metrics {
namespace mojom {
namespace internal {
class DocumentTiming_Data;
class LargestContentfulPaintTiming_Data;
class PaintTiming_Data;
class ParseTiming_Data;
class InteractiveTiming_Data;
class PageLoadTiming_Data;
class FrameIntersectionUpdate_Data;
class FrameMetadata_Data;
class PageLoadFeatures_Data;
class ResourceDataUpdate_Data;
class FrameRenderDataUpdate_Data;
class CpuTiming_Data;
class DeferredResourceCounts_Data;
class InputTiming_Data;
class PercentOptional_Data;
class ThroughputUkmData_Data;
class BackForwardCacheTiming_Data;

struct CacheType_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

#pragma pack(push, 1)
class  DocumentTiming_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DocumentTiming_Data));
      new (data()) DocumentTiming_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DocumentTiming_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DocumentTiming_Data>(index_);
    }
    DocumentTiming_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> dom_content_loaded_event_start;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> load_event_start;

 private:
  DocumentTiming_Data();
  ~DocumentTiming_Data() = delete;
};
static_assert(sizeof(DocumentTiming_Data) == 24,
              "Bad sizeof(DocumentTiming_Data)");
// Used by DocumentTiming::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct DocumentTiming_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  DocumentTiming_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~DocumentTiming_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    DocumentTiming_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    DocumentTiming_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  LargestContentfulPaintTiming_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(LargestContentfulPaintTiming_Data));
      new (data()) LargestContentfulPaintTiming_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    LargestContentfulPaintTiming_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<LargestContentfulPaintTiming_Data>(index_);
    }
    LargestContentfulPaintTiming_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> largest_image_paint;
  uint64_t largest_image_paint_size;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> largest_text_paint;
  uint64_t largest_text_paint_size;

 private:
  LargestContentfulPaintTiming_Data();
  ~LargestContentfulPaintTiming_Data() = delete;
};
static_assert(sizeof(LargestContentfulPaintTiming_Data) == 40,
              "Bad sizeof(LargestContentfulPaintTiming_Data)");
// Used by LargestContentfulPaintTiming::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct LargestContentfulPaintTiming_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  LargestContentfulPaintTiming_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~LargestContentfulPaintTiming_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    LargestContentfulPaintTiming_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    LargestContentfulPaintTiming_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  PaintTiming_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PaintTiming_Data));
      new (data()) PaintTiming_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PaintTiming_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PaintTiming_Data>(index_);
    }
    PaintTiming_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> first_paint;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> first_image_paint;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> first_contentful_paint;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> first_meaningful_paint;
  mojo::internal::Pointer<internal::LargestContentfulPaintTiming_Data> largest_contentful_paint;
  mojo::internal::Pointer<internal::LargestContentfulPaintTiming_Data> experimental_largest_contentful_paint;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> first_input_or_scroll_notified_timestamp;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> portal_activated_paint;

 private:
  PaintTiming_Data();
  ~PaintTiming_Data() = delete;
};
static_assert(sizeof(PaintTiming_Data) == 72,
              "Bad sizeof(PaintTiming_Data)");
// Used by PaintTiming::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct PaintTiming_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  PaintTiming_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~PaintTiming_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    PaintTiming_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    PaintTiming_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  ParseTiming_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ParseTiming_Data));
      new (data()) ParseTiming_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ParseTiming_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ParseTiming_Data>(index_);
    }
    ParseTiming_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> parse_start;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> parse_stop;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> parse_blocked_on_script_load_duration;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> parse_blocked_on_script_load_from_document_write_duration;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> parse_blocked_on_script_execution_duration;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> parse_blocked_on_script_execution_from_document_write_duration;

 private:
  ParseTiming_Data();
  ~ParseTiming_Data() = delete;
};
static_assert(sizeof(ParseTiming_Data) == 56,
              "Bad sizeof(ParseTiming_Data)");
// Used by ParseTiming::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct ParseTiming_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  ParseTiming_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~ParseTiming_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    ParseTiming_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    ParseTiming_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  InteractiveTiming_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(InteractiveTiming_Data));
      new (data()) InteractiveTiming_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    InteractiveTiming_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<InteractiveTiming_Data>(index_);
    }
    InteractiveTiming_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> first_input_delay;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> first_input_timestamp;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> longest_input_delay;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> longest_input_timestamp;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> first_scroll_delay;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> first_scroll_timestamp;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> first_input_processing_time;

 private:
  InteractiveTiming_Data();
  ~InteractiveTiming_Data() = delete;
};
static_assert(sizeof(InteractiveTiming_Data) == 64,
              "Bad sizeof(InteractiveTiming_Data)");
// Used by InteractiveTiming::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct InteractiveTiming_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  InteractiveTiming_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~InteractiveTiming_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    InteractiveTiming_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    InteractiveTiming_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  PageLoadTiming_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageLoadTiming_Data));
      new (data()) PageLoadTiming_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageLoadTiming_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageLoadTiming_Data>(index_);
    }
    PageLoadTiming_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> navigation_start;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> response_start;
  mojo::internal::Pointer<internal::DocumentTiming_Data> document_timing;
  mojo::internal::Pointer<internal::InteractiveTiming_Data> interactive_timing;
  mojo::internal::Pointer<internal::PaintTiming_Data> paint_timing;
  mojo::internal::Pointer<internal::ParseTiming_Data> parse_timing;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::BackForwardCacheTiming_Data>>> back_forward_cache_timings;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> input_to_navigation_start;

 private:
  PageLoadTiming_Data();
  ~PageLoadTiming_Data() = delete;
};
static_assert(sizeof(PageLoadTiming_Data) == 72,
              "Bad sizeof(PageLoadTiming_Data)");
// Used by PageLoadTiming::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct PageLoadTiming_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  PageLoadTiming_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~PageLoadTiming_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    PageLoadTiming_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    PageLoadTiming_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  FrameIntersectionUpdate_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameIntersectionUpdate_Data));
      new (data()) FrameIntersectionUpdate_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameIntersectionUpdate_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameIntersectionUpdate_Data>(index_);
    }
    FrameIntersectionUpdate_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> main_frame_document_intersection_rect;

 private:
  FrameIntersectionUpdate_Data();
  ~FrameIntersectionUpdate_Data() = delete;
};
static_assert(sizeof(FrameIntersectionUpdate_Data) == 16,
              "Bad sizeof(FrameIntersectionUpdate_Data)");
// Used by FrameIntersectionUpdate::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct FrameIntersectionUpdate_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  FrameIntersectionUpdate_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~FrameIntersectionUpdate_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    FrameIntersectionUpdate_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    FrameIntersectionUpdate_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  FrameMetadata_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameMetadata_Data));
      new (data()) FrameMetadata_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameMetadata_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameMetadata_Data>(index_);
    }
    FrameMetadata_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t behavior_flags;
  uint8_t pad0_[4];
  mojo::internal::Pointer<internal::FrameIntersectionUpdate_Data> intersection_update;

 private:
  FrameMetadata_Data();
  ~FrameMetadata_Data() = delete;
};
static_assert(sizeof(FrameMetadata_Data) == 24,
              "Bad sizeof(FrameMetadata_Data)");
// Used by FrameMetadata::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct FrameMetadata_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  FrameMetadata_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~FrameMetadata_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    FrameMetadata_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    FrameMetadata_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  PageLoadFeatures_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PageLoadFeatures_Data));
      new (data()) PageLoadFeatures_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PageLoadFeatures_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PageLoadFeatures_Data>(index_);
    }
    PageLoadFeatures_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<int32_t>> features;
  mojo::internal::Pointer<mojo::internal::Array_Data<int32_t>> css_properties;
  mojo::internal::Pointer<mojo::internal::Array_Data<int32_t>> animated_css_properties;

 private:
  PageLoadFeatures_Data();
  ~PageLoadFeatures_Data() = delete;
};
static_assert(sizeof(PageLoadFeatures_Data) == 32,
              "Bad sizeof(PageLoadFeatures_Data)");
// Used by PageLoadFeatures::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct PageLoadFeatures_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  PageLoadFeatures_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~PageLoadFeatures_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    PageLoadFeatures_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    PageLoadFeatures_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  ResourceDataUpdate_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ResourceDataUpdate_Data));
      new (data()) ResourceDataUpdate_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ResourceDataUpdate_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ResourceDataUpdate_Data>(index_);
    }
    ResourceDataUpdate_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t request_id;
  uint8_t is_complete : 1;
  uint8_t reported_as_ad_resource : 1;
  uint8_t is_main_frame_resource : 1;
  uint8_t is_primary_frame_resource : 1;
  uint8_t is_secure_scheme : 1;
  uint8_t proxy_used : 1;
  uint8_t completed_before_fcp : 1;
  uint8_t pad7_[3];
  int64_t delta_bytes;
  int64_t received_data_length;
  int64_t encoded_body_length;
  int64_t decoded_body_length;
  double data_reduction_proxy_compression_ratio_estimate;
  int32_t cache_type;
  uint8_t pad13_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> mime_type;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> origin;

 private:
  ResourceDataUpdate_Data();
  ~ResourceDataUpdate_Data() = delete;
};
static_assert(sizeof(ResourceDataUpdate_Data) == 80,
              "Bad sizeof(ResourceDataUpdate_Data)");
// Used by ResourceDataUpdate::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct ResourceDataUpdate_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  ResourceDataUpdate_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~ResourceDataUpdate_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    ResourceDataUpdate_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    ResourceDataUpdate_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  FrameRenderDataUpdate_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(FrameRenderDataUpdate_Data));
      new (data()) FrameRenderDataUpdate_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    FrameRenderDataUpdate_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<FrameRenderDataUpdate_Data>(index_);
    }
    FrameRenderDataUpdate_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  float layout_shift_delta;
  float layout_shift_delta_before_input_or_scroll;
  uint32_t all_layout_block_count_delta;
  uint32_t ng_layout_block_count_delta;
  uint32_t all_layout_call_count_delta;
  uint32_t ng_layout_call_count_delta;

 private:
  FrameRenderDataUpdate_Data();
  ~FrameRenderDataUpdate_Data() = delete;
};
static_assert(sizeof(FrameRenderDataUpdate_Data) == 32,
              "Bad sizeof(FrameRenderDataUpdate_Data)");
// Used by FrameRenderDataUpdate::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct FrameRenderDataUpdate_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  FrameRenderDataUpdate_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~FrameRenderDataUpdate_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    FrameRenderDataUpdate_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    FrameRenderDataUpdate_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  CpuTiming_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(CpuTiming_Data));
      new (data()) CpuTiming_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    CpuTiming_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<CpuTiming_Data>(index_);
    }
    CpuTiming_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> task_time;

 private:
  CpuTiming_Data();
  ~CpuTiming_Data() = delete;
};
static_assert(sizeof(CpuTiming_Data) == 16,
              "Bad sizeof(CpuTiming_Data)");
// Used by CpuTiming::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct CpuTiming_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  CpuTiming_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~CpuTiming_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    CpuTiming_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    CpuTiming_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  DeferredResourceCounts_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DeferredResourceCounts_Data));
      new (data()) DeferredResourceCounts_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DeferredResourceCounts_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DeferredResourceCounts_Data>(index_);
    }
    DeferredResourceCounts_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint64_t deferred_frames;
  uint64_t frames_loaded_after_deferral;
  uint64_t deferred_images;
  uint64_t images_loaded_after_deferral;

 private:
  DeferredResourceCounts_Data();
  ~DeferredResourceCounts_Data() = delete;
};
static_assert(sizeof(DeferredResourceCounts_Data) == 40,
              "Bad sizeof(DeferredResourceCounts_Data)");
// Used by DeferredResourceCounts::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct DeferredResourceCounts_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  DeferredResourceCounts_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~DeferredResourceCounts_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    DeferredResourceCounts_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    DeferredResourceCounts_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  InputTiming_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(InputTiming_Data));
      new (data()) InputTiming_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    InputTiming_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<InputTiming_Data>(index_);
    }
    InputTiming_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> total_input_delay;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> total_adjusted_input_delay;
  uint64_t num_input_events;

 private:
  InputTiming_Data();
  ~InputTiming_Data() = delete;
};
static_assert(sizeof(InputTiming_Data) == 32,
              "Bad sizeof(InputTiming_Data)");
// Used by InputTiming::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct InputTiming_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  InputTiming_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~InputTiming_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    InputTiming_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    InputTiming_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  PercentOptional_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PercentOptional_Data));
      new (data()) PercentOptional_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PercentOptional_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PercentOptional_Data>(index_);
    }
    PercentOptional_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int8_t percent;
  uint8_t padfinal_[7];

 private:
  PercentOptional_Data();
  ~PercentOptional_Data() = delete;
};
static_assert(sizeof(PercentOptional_Data) == 16,
              "Bad sizeof(PercentOptional_Data)");
// Used by PercentOptional::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct PercentOptional_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  PercentOptional_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~PercentOptional_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    PercentOptional_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    PercentOptional_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  ThroughputUkmData_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(ThroughputUkmData_Data));
      new (data()) ThroughputUkmData_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    ThroughputUkmData_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<ThroughputUkmData_Data>(index_);
    }
    ThroughputUkmData_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t source_id;
  int8_t aggregated_throughput_percent;
  int8_t impl_throughput_percent;
  uint8_t pad2_[6];
  mojo::internal::Pointer<internal::PercentOptional_Data> main_throughput_percent;

 private:
  ThroughputUkmData_Data();
  ~ThroughputUkmData_Data() = delete;
};
static_assert(sizeof(ThroughputUkmData_Data) == 32,
              "Bad sizeof(ThroughputUkmData_Data)");
// Used by ThroughputUkmData::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct ThroughputUkmData_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  ThroughputUkmData_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~ThroughputUkmData_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    ThroughputUkmData_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    ThroughputUkmData_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  BackForwardCacheTiming_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(BackForwardCacheTiming_Data));
      new (data()) BackForwardCacheTiming_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    BackForwardCacheTiming_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<BackForwardCacheTiming_Data>(index_);
    }
    BackForwardCacheTiming_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> first_paint_after_back_forward_cache_restore;

 private:
  BackForwardCacheTiming_Data();
  ~BackForwardCacheTiming_Data() = delete;
};
static_assert(sizeof(BackForwardCacheTiming_Data) == 16,
              "Bad sizeof(BackForwardCacheTiming_Data)");
// Used by BackForwardCacheTiming::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct BackForwardCacheTiming_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  BackForwardCacheTiming_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~BackForwardCacheTiming_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    BackForwardCacheTiming_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    BackForwardCacheTiming_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace page_load_metrics

#endif  // COMPONENTS_PAGE_LOAD_METRICS_COMMON_PAGE_LOAD_METRICS_MOJOM_SHARED_INTERNAL_H_
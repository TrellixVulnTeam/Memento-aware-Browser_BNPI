// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: highlighted_games.proto

#include "highlighted_games.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_date_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Date_date_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_highlighted_5fgames_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HighlightedGame_highlighted_5fgames_2eproto;
namespace games {
class HighlightedGameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HighlightedGame> _instance;
} _HighlightedGame_default_instance_;
class HighlightedGamesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HighlightedGamesResponse> _instance;
} _HighlightedGamesResponse_default_instance_;
}  // namespace games
static void InitDefaultsscc_info_HighlightedGame_highlighted_5fgames_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::games::_HighlightedGame_default_instance_;
    new (ptr) ::games::HighlightedGame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::games::HighlightedGame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HighlightedGame_highlighted_5fgames_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_HighlightedGame_highlighted_5fgames_2eproto}, {
      &scc_info_Date_date_2eproto.base,}};

static void InitDefaultsscc_info_HighlightedGamesResponse_highlighted_5fgames_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::games::_HighlightedGamesResponse_default_instance_;
    new (ptr) ::games::HighlightedGamesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::games::HighlightedGamesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HighlightedGamesResponse_highlighted_5fgames_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_HighlightedGamesResponse_highlighted_5fgames_2eproto}, {
      &scc_info_HighlightedGame_highlighted_5fgames_2eproto.base,}};

namespace games {

// ===================================================================

void HighlightedGame::InitAsDefaultInstance() {
  ::games::_HighlightedGame_default_instance_._instance.get_mutable()->start_date_ = const_cast< ::games::Date*>(
      ::games::Date::internal_default_instance());
  ::games::_HighlightedGame_default_instance_._instance.get_mutable()->end_date_ = const_cast< ::games::Date*>(
      ::games::Date::internal_default_instance());
}
class HighlightedGame::_Internal {
 public:
  static const ::games::Date& start_date(const HighlightedGame* msg);
  static const ::games::Date& end_date(const HighlightedGame* msg);
};

const ::games::Date&
HighlightedGame::_Internal::start_date(const HighlightedGame* msg) {
  return *msg->start_date_;
}
const ::games::Date&
HighlightedGame::_Internal::end_date(const HighlightedGame* msg) {
  return *msg->end_date_;
}
void HighlightedGame::clear_start_date() {
  if (GetArenaNoVirtual() == nullptr && start_date_ != nullptr) {
    delete start_date_;
  }
  start_date_ = nullptr;
}
void HighlightedGame::clear_end_date() {
  if (GetArenaNoVirtual() == nullptr && end_date_ != nullptr) {
    delete end_date_;
  }
  end_date_ = nullptr;
}
HighlightedGame::HighlightedGame()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:games.HighlightedGame)
}
HighlightedGame::HighlightedGame(const HighlightedGame& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start_date()) {
    start_date_ = new ::games::Date(*from.start_date_);
  } else {
    start_date_ = nullptr;
  }
  if (from.has_end_date()) {
    end_date_ = new ::games::Date(*from.end_date_);
  } else {
    end_date_ = nullptr;
  }
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:games.HighlightedGame)
}

void HighlightedGame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HighlightedGame_highlighted_5fgames_2eproto.base);
  ::memset(&start_date_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&start_date_)) + sizeof(game_id_));
}

HighlightedGame::~HighlightedGame() {
  // @@protoc_insertion_point(destructor:games.HighlightedGame)
  SharedDtor();
}

void HighlightedGame::SharedDtor() {
  if (this != internal_default_instance()) delete start_date_;
  if (this != internal_default_instance()) delete end_date_;
}

void HighlightedGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HighlightedGame& HighlightedGame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HighlightedGame_highlighted_5fgames_2eproto.base);
  return *internal_default_instance();
}


void HighlightedGame::Clear() {
// @@protoc_insertion_point(message_clear_start:games.HighlightedGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && start_date_ != nullptr) {
    delete start_date_;
  }
  start_date_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && end_date_ != nullptr) {
    delete end_date_;
  }
  end_date_ = nullptr;
  game_id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HighlightedGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .games.Date start_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_start_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .games.Date end_date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_end_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HighlightedGame::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:games.HighlightedGame)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 game_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .games.Date start_date = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_start_date()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .games.Date end_date = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_end_date()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:games.HighlightedGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:games.HighlightedGame)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HighlightedGame::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:games.HighlightedGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 game_id = 1;
  if (this->game_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->game_id(), output);
  }

  // .games.Date start_date = 2;
  if (this->has_start_date()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::start_date(this), output);
  }

  // .games.Date end_date = 3;
  if (this->has_end_date()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::end_date(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:games.HighlightedGame)
}

size_t HighlightedGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:games.HighlightedGame)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .games.Date start_date = 2;
  if (this->has_start_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_date_);
  }

  // .games.Date end_date = 3;
  if (this->has_end_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_date_);
  }

  // int32 game_id = 1;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->game_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HighlightedGame::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const HighlightedGame*>(
      &from));
}

void HighlightedGame::MergeFrom(const HighlightedGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:games.HighlightedGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start_date()) {
    mutable_start_date()->::games::Date::MergeFrom(from.start_date());
  }
  if (from.has_end_date()) {
    mutable_end_date()->::games::Date::MergeFrom(from.end_date());
  }
  if (from.game_id() != 0) {
    set_game_id(from.game_id());
  }
}

void HighlightedGame::CopyFrom(const HighlightedGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:games.HighlightedGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HighlightedGame::IsInitialized() const {
  return true;
}

void HighlightedGame::InternalSwap(HighlightedGame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(start_date_, other->start_date_);
  swap(end_date_, other->end_date_);
  swap(game_id_, other->game_id_);
}

std::string HighlightedGame::GetTypeName() const {
  return "games.HighlightedGame";
}


// ===================================================================

void HighlightedGamesResponse::InitAsDefaultInstance() {
}
class HighlightedGamesResponse::_Internal {
 public:
};

HighlightedGamesResponse::HighlightedGamesResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:games.HighlightedGamesResponse)
}
HighlightedGamesResponse::HighlightedGamesResponse(const HighlightedGamesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      games_(from.games_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:games.HighlightedGamesResponse)
}

void HighlightedGamesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HighlightedGamesResponse_highlighted_5fgames_2eproto.base);
}

HighlightedGamesResponse::~HighlightedGamesResponse() {
  // @@protoc_insertion_point(destructor:games.HighlightedGamesResponse)
  SharedDtor();
}

void HighlightedGamesResponse::SharedDtor() {
}

void HighlightedGamesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HighlightedGamesResponse& HighlightedGamesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HighlightedGamesResponse_highlighted_5fgames_2eproto.base);
  return *internal_default_instance();
}


void HighlightedGamesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:games.HighlightedGamesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  games_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HighlightedGamesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .games.HighlightedGame games = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_games(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HighlightedGamesResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:games.HighlightedGamesResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .games.HighlightedGame games = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_games()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:games.HighlightedGamesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:games.HighlightedGamesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HighlightedGamesResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:games.HighlightedGamesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .games.HighlightedGame games = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->games_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->games(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:games.HighlightedGamesResponse)
}

size_t HighlightedGamesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:games.HighlightedGamesResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .games.HighlightedGame games = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->games_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->games(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HighlightedGamesResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const HighlightedGamesResponse*>(
      &from));
}

void HighlightedGamesResponse::MergeFrom(const HighlightedGamesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:games.HighlightedGamesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  games_.MergeFrom(from.games_);
}

void HighlightedGamesResponse::CopyFrom(const HighlightedGamesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:games.HighlightedGamesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HighlightedGamesResponse::IsInitialized() const {
  return true;
}

void HighlightedGamesResponse::InternalSwap(HighlightedGamesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&games_)->InternalSwap(CastToBase(&other->games_));
}

std::string HighlightedGamesResponse::GetTypeName() const {
  return "games.HighlightedGamesResponse";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace games
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::games::HighlightedGame* Arena::CreateMaybeMessage< ::games::HighlightedGame >(Arena* arena) {
  return Arena::CreateInternal< ::games::HighlightedGame >(arena);
}
template<> PROTOBUF_NOINLINE ::games::HighlightedGamesResponse* Arena::CreateMaybeMessage< ::games::HighlightedGamesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::games::HighlightedGamesResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_image.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_game_5fimage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_game_5fimage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_game_5fimage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_game_5fimage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace games {
class GameImage;
class GameImageDefaultTypeInternal;
extern GameImageDefaultTypeInternal _GameImage_default_instance_;
}  // namespace games
PROTOBUF_NAMESPACE_OPEN
template<> ::games::GameImage* Arena::CreateMaybeMessage<::games::GameImage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace games {

enum GameImageType : int {
  GAME_IMAGE_TYPE_UNSPECIFIED = 0,
  GAME_IMAGE_TYPE_CARD = 1,
  GAME_IMAGE_TYPE_THUMBNAIL = 2,
  GameImageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GameImageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GameImageType_IsValid(int value);
constexpr GameImageType GameImageType_MIN = GAME_IMAGE_TYPE_UNSPECIFIED;
constexpr GameImageType GameImageType_MAX = GAME_IMAGE_TYPE_THUMBNAIL;
constexpr int GameImageType_ARRAYSIZE = GameImageType_MAX + 1;

const std::string& GameImageType_Name(GameImageType value);
template<typename T>
inline const std::string& GameImageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GameImageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GameImageType_Name.");
  return GameImageType_Name(static_cast<GameImageType>(enum_t_value));
}
bool GameImageType_Parse(
    const std::string& name, GameImageType* value);
// ===================================================================

class GameImage :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:games.GameImage) */ {
 public:
  GameImage();
  virtual ~GameImage();

  GameImage(const GameImage& from);
  GameImage(GameImage&& from) noexcept
    : GameImage() {
    *this = ::std::move(from);
  }

  inline GameImage& operator=(const GameImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameImage& operator=(GameImage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const GameImage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameImage* internal_default_instance() {
    return reinterpret_cast<const GameImage*>(
               &_GameImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GameImage& a, GameImage& b) {
    a.Swap(&b);
  }
  inline void Swap(GameImage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameImage* New() const final {
    return CreateMaybeMessage<GameImage>(nullptr);
  }

  GameImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameImage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GameImage& from);
  void MergeFrom(const GameImage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GameImage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "games.GameImage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string url = 2;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // .games.GameImageType type = 1;
  void clear_type();
  ::games::GameImageType type() const;
  void set_type(::games::GameImageType value);

  // @@protoc_insertion_point(class_scope:games.GameImage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fimage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameImage

// .games.GameImageType type = 1;
inline void GameImage::clear_type() {
  type_ = 0;
}
inline ::games::GameImageType GameImage::type() const {
  // @@protoc_insertion_point(field_get:games.GameImage.type)
  return static_cast< ::games::GameImageType >(type_);
}
inline void GameImage::set_type(::games::GameImageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:games.GameImage.type)
}

// string url = 2;
inline void GameImage::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameImage::url() const {
  // @@protoc_insertion_point(field_get:games.GameImage.url)
  return url_.GetNoArena();
}
inline void GameImage::set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:games.GameImage.url)
}
inline void GameImage::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:games.GameImage.url)
}
inline void GameImage::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:games.GameImage.url)
}
inline void GameImage::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:games.GameImage.url)
}
inline std::string* GameImage::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:games.GameImage.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameImage::release_url() {
  // @@protoc_insertion_point(field_release:games.GameImage.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameImage::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:games.GameImage.url)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace games

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::games::GameImageType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_game_5fimage_2eproto

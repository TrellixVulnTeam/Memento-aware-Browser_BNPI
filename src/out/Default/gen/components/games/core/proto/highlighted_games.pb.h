// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: highlighted_games.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_highlighted_5fgames_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_highlighted_5fgames_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "date.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_highlighted_5fgames_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_highlighted_5fgames_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace games {
class HighlightedGame;
class HighlightedGameDefaultTypeInternal;
extern HighlightedGameDefaultTypeInternal _HighlightedGame_default_instance_;
class HighlightedGamesResponse;
class HighlightedGamesResponseDefaultTypeInternal;
extern HighlightedGamesResponseDefaultTypeInternal _HighlightedGamesResponse_default_instance_;
}  // namespace games
PROTOBUF_NAMESPACE_OPEN
template<> ::games::HighlightedGame* Arena::CreateMaybeMessage<::games::HighlightedGame>(Arena*);
template<> ::games::HighlightedGamesResponse* Arena::CreateMaybeMessage<::games::HighlightedGamesResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace games {

// ===================================================================

class HighlightedGame :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:games.HighlightedGame) */ {
 public:
  HighlightedGame();
  virtual ~HighlightedGame();

  HighlightedGame(const HighlightedGame& from);
  HighlightedGame(HighlightedGame&& from) noexcept
    : HighlightedGame() {
    *this = ::std::move(from);
  }

  inline HighlightedGame& operator=(const HighlightedGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline HighlightedGame& operator=(HighlightedGame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const HighlightedGame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HighlightedGame* internal_default_instance() {
    return reinterpret_cast<const HighlightedGame*>(
               &_HighlightedGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HighlightedGame& a, HighlightedGame& b) {
    a.Swap(&b);
  }
  inline void Swap(HighlightedGame* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HighlightedGame* New() const final {
    return CreateMaybeMessage<HighlightedGame>(nullptr);
  }

  HighlightedGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HighlightedGame>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const HighlightedGame& from);
  void MergeFrom(const HighlightedGame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HighlightedGame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "games.HighlightedGame";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartDateFieldNumber = 2,
    kEndDateFieldNumber = 3,
    kGameIdFieldNumber = 1,
  };
  // .games.Date start_date = 2;
  bool has_start_date() const;
  void clear_start_date();
  const ::games::Date& start_date() const;
  ::games::Date* release_start_date();
  ::games::Date* mutable_start_date();
  void set_allocated_start_date(::games::Date* start_date);

  // .games.Date end_date = 3;
  bool has_end_date() const;
  void clear_end_date();
  const ::games::Date& end_date() const;
  ::games::Date* release_end_date();
  ::games::Date* mutable_end_date();
  void set_allocated_end_date(::games::Date* end_date);

  // int32 game_id = 1;
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::int32 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:games.HighlightedGame)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::games::Date* start_date_;
  ::games::Date* end_date_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_highlighted_5fgames_2eproto;
};
// -------------------------------------------------------------------

class HighlightedGamesResponse :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:games.HighlightedGamesResponse) */ {
 public:
  HighlightedGamesResponse();
  virtual ~HighlightedGamesResponse();

  HighlightedGamesResponse(const HighlightedGamesResponse& from);
  HighlightedGamesResponse(HighlightedGamesResponse&& from) noexcept
    : HighlightedGamesResponse() {
    *this = ::std::move(from);
  }

  inline HighlightedGamesResponse& operator=(const HighlightedGamesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HighlightedGamesResponse& operator=(HighlightedGamesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const HighlightedGamesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HighlightedGamesResponse* internal_default_instance() {
    return reinterpret_cast<const HighlightedGamesResponse*>(
               &_HighlightedGamesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HighlightedGamesResponse& a, HighlightedGamesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HighlightedGamesResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HighlightedGamesResponse* New() const final {
    return CreateMaybeMessage<HighlightedGamesResponse>(nullptr);
  }

  HighlightedGamesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HighlightedGamesResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const HighlightedGamesResponse& from);
  void MergeFrom(const HighlightedGamesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HighlightedGamesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "games.HighlightedGamesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGamesFieldNumber = 1,
  };
  // repeated .games.HighlightedGame games = 1;
  int games_size() const;
  void clear_games();
  ::games::HighlightedGame* mutable_games(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::games::HighlightedGame >*
      mutable_games();
  const ::games::HighlightedGame& games(int index) const;
  ::games::HighlightedGame* add_games();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::games::HighlightedGame >&
      games() const;

  // @@protoc_insertion_point(class_scope:games.HighlightedGamesResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::games::HighlightedGame > games_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_highlighted_5fgames_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HighlightedGame

// int32 game_id = 1;
inline void HighlightedGame::clear_game_id() {
  game_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HighlightedGame::game_id() const {
  // @@protoc_insertion_point(field_get:games.HighlightedGame.game_id)
  return game_id_;
}
inline void HighlightedGame::set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_id_ = value;
  // @@protoc_insertion_point(field_set:games.HighlightedGame.game_id)
}

// .games.Date start_date = 2;
inline bool HighlightedGame::has_start_date() const {
  return this != internal_default_instance() && start_date_ != nullptr;
}
inline const ::games::Date& HighlightedGame::start_date() const {
  const ::games::Date* p = start_date_;
  // @@protoc_insertion_point(field_get:games.HighlightedGame.start_date)
  return p != nullptr ? *p : *reinterpret_cast<const ::games::Date*>(
      &::games::_Date_default_instance_);
}
inline ::games::Date* HighlightedGame::release_start_date() {
  // @@protoc_insertion_point(field_release:games.HighlightedGame.start_date)
  
  ::games::Date* temp = start_date_;
  start_date_ = nullptr;
  return temp;
}
inline ::games::Date* HighlightedGame::mutable_start_date() {
  
  if (start_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::games::Date>(GetArenaNoVirtual());
    start_date_ = p;
  }
  // @@protoc_insertion_point(field_mutable:games.HighlightedGame.start_date)
  return start_date_;
}
inline void HighlightedGame::set_allocated_start_date(::games::Date* start_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_date_);
  }
  if (start_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      start_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_date, submessage_arena);
    }
    
  } else {
    
  }
  start_date_ = start_date;
  // @@protoc_insertion_point(field_set_allocated:games.HighlightedGame.start_date)
}

// .games.Date end_date = 3;
inline bool HighlightedGame::has_end_date() const {
  return this != internal_default_instance() && end_date_ != nullptr;
}
inline const ::games::Date& HighlightedGame::end_date() const {
  const ::games::Date* p = end_date_;
  // @@protoc_insertion_point(field_get:games.HighlightedGame.end_date)
  return p != nullptr ? *p : *reinterpret_cast<const ::games::Date*>(
      &::games::_Date_default_instance_);
}
inline ::games::Date* HighlightedGame::release_end_date() {
  // @@protoc_insertion_point(field_release:games.HighlightedGame.end_date)
  
  ::games::Date* temp = end_date_;
  end_date_ = nullptr;
  return temp;
}
inline ::games::Date* HighlightedGame::mutable_end_date() {
  
  if (end_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::games::Date>(GetArenaNoVirtual());
    end_date_ = p;
  }
  // @@protoc_insertion_point(field_mutable:games.HighlightedGame.end_date)
  return end_date_;
}
inline void HighlightedGame::set_allocated_end_date(::games::Date* end_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_date_);
  }
  if (end_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      end_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_date, submessage_arena);
    }
    
  } else {
    
  }
  end_date_ = end_date;
  // @@protoc_insertion_point(field_set_allocated:games.HighlightedGame.end_date)
}

// -------------------------------------------------------------------

// HighlightedGamesResponse

// repeated .games.HighlightedGame games = 1;
inline int HighlightedGamesResponse::games_size() const {
  return games_.size();
}
inline void HighlightedGamesResponse::clear_games() {
  games_.Clear();
}
inline ::games::HighlightedGame* HighlightedGamesResponse::mutable_games(int index) {
  // @@protoc_insertion_point(field_mutable:games.HighlightedGamesResponse.games)
  return games_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::games::HighlightedGame >*
HighlightedGamesResponse::mutable_games() {
  // @@protoc_insertion_point(field_mutable_list:games.HighlightedGamesResponse.games)
  return &games_;
}
inline const ::games::HighlightedGame& HighlightedGamesResponse::games(int index) const {
  // @@protoc_insertion_point(field_get:games.HighlightedGamesResponse.games)
  return games_.Get(index);
}
inline ::games::HighlightedGame* HighlightedGamesResponse::add_games() {
  // @@protoc_insertion_point(field_add:games.HighlightedGamesResponse.games)
  return games_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::games::HighlightedGame >&
HighlightedGamesResponse::games() const {
  // @@protoc_insertion_point(field_list:games.HighlightedGamesResponse.games)
  return games_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace games

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_highlighted_5fgames_2eproto

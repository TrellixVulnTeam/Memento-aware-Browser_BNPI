// components/metrics/public/mojom/call_stack_profile_collector.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_METRICS_PUBLIC_MOJOM_CALL_STACK_PROFILE_COLLECTOR_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_METRICS_PUBLIC_MOJOM_CALL_STACK_PROFILE_COLLECTOR_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace metrics {
namespace mojom {
namespace internal {
class  CallStackProfileCollector_Collect_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(CallStackProfileCollector_Collect_Params_Data));
      new (data()) CallStackProfileCollector_Collect_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    CallStackProfileCollector_Collect_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<CallStackProfileCollector_Collect_Params_Data>(index_);
    }
    CallStackProfileCollector_Collect_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> start_timestamp;
  mojo::internal::Pointer<internal::SampledProfile_Data> profile;

 private:
  CallStackProfileCollector_Collect_Params_Data();
  ~CallStackProfileCollector_Collect_Params_Data() = delete;
};
static_assert(sizeof(CallStackProfileCollector_Collect_Params_Data) == 24,
              "Bad sizeof(CallStackProfileCollector_Collect_Params_Data)");

}  // namespace internal
class CallStackProfileCollector_Collect_ParamsDataView {
 public:
  CallStackProfileCollector_Collect_ParamsDataView() {}

  CallStackProfileCollector_Collect_ParamsDataView(
      internal::CallStackProfileCollector_Collect_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetStartTimestampDataView(
      ::mojo_base::mojom::TimeTicksDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadStartTimestamp(UserType* output) {
    auto* pointer = data_->start_timestamp.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeTicksDataView>(
        pointer, output, context_);
  }
  inline void GetProfileDataView(
      SampledProfileDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadProfile(UserType* output) {
    auto* pointer = data_->profile.Get();
    return mojo::internal::Deserialize<::metrics::mojom::SampledProfileDataView>(
        pointer, output, context_);
  }
 private:
  internal::CallStackProfileCollector_Collect_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};


inline void CallStackProfileCollector_Collect_ParamsDataView::GetStartTimestampDataView(
    ::mojo_base::mojom::TimeTicksDataView* output) {
  auto pointer = data_->start_timestamp.Get();
  *output = ::mojo_base::mojom::TimeTicksDataView(pointer, context_);
}
inline void CallStackProfileCollector_Collect_ParamsDataView::GetProfileDataView(
    SampledProfileDataView* output) {
  auto pointer = data_->profile.Get();
  *output = SampledProfileDataView(pointer, context_);
}

}  // namespace mojom
}  // namespace metrics

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // COMPONENTS_METRICS_PUBLIC_MOJOM_CALL_STACK_PROFILE_COLLECTOR_MOJOM_PARAMS_DATA_H_
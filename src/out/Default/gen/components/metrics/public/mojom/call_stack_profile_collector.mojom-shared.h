// components/metrics/public/mojom/call_stack_profile_collector.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_METRICS_PUBLIC_MOJOM_CALL_STACK_PROFILE_COLLECTOR_MOJOM_SHARED_H_
#define COMPONENTS_METRICS_PUBLIC_MOJOM_CALL_STACK_PROFILE_COLLECTOR_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "components/metrics/public/mojom/call_stack_profile_collector.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace metrics {
namespace mojom {
class SampledProfileDataView;



}  // namespace mojom
}  // namespace metrics

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::metrics::mojom::SampledProfileDataView> {
  using Data = ::metrics::mojom::internal::SampledProfile_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace metrics {
namespace mojom {
// Interface base classes. They are used for type safety check.
class CallStackProfileCollectorInterfaceBase {};

using CallStackProfileCollectorPtrDataView =
    mojo::InterfacePtrDataView<CallStackProfileCollectorInterfaceBase>;
using CallStackProfileCollectorRequestDataView =
    mojo::InterfaceRequestDataView<CallStackProfileCollectorInterfaceBase>;
using CallStackProfileCollectorAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<CallStackProfileCollectorInterfaceBase>;
using CallStackProfileCollectorAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<CallStackProfileCollectorInterfaceBase>;
class SampledProfileDataView {
 public:
  SampledProfileDataView() {}

  SampledProfileDataView(
      internal::SampledProfile_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetContentsDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadContents(UserType* output) {
    auto* pointer = data_->contents.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::SampledProfile_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};



}  // namespace mojom
}  // namespace metrics

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::metrics::mojom::SampledProfileDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::metrics::mojom::SampledProfileDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::metrics::mojom::internal::SampledProfile_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::contents(input)) in_contents = Traits::contents(input);
    typename decltype((*output)->contents)::BaseType::BufferWriter
        contents_writer;
    mojo::internal::Serialize<mojo::StringDataView>(
        in_contents, buffer, &contents_writer, context);
    (*output)->contents.Set(
        contents_writer.is_null() ? nullptr : contents_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->contents.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null contents in SampledProfile struct");
  }

  static bool Deserialize(::metrics::mojom::internal::SampledProfile_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::metrics::mojom::SampledProfileDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace metrics {
namespace mojom {

inline void SampledProfileDataView::GetContentsDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->contents.Get();
  *output = mojo::StringDataView(pointer, context_);
}



}  // namespace mojom
}  // namespace metrics

#endif  // COMPONENTS_METRICS_PUBLIC_MOJOM_CALL_STACK_PROFILE_COLLECTOR_MOJOM_SHARED_H_
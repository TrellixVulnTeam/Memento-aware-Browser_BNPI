// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: operation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_operation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_operation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "any.pb.h"
#include "status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_operation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_operation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace offline_pages {
namespace proto {
class Operation;
class OperationDefaultTypeInternal;
extern OperationDefaultTypeInternal _Operation_default_instance_;
}  // namespace proto
}  // namespace offline_pages
PROTOBUF_NAMESPACE_OPEN
template<> ::offline_pages::proto::Operation* Arena::CreateMaybeMessage<::offline_pages::proto::Operation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace offline_pages {
namespace proto {

// ===================================================================

class Operation :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:offline_pages.proto.Operation) */ {
 public:
  Operation();
  virtual ~Operation();

  Operation(const Operation& from);
  Operation(Operation&& from) noexcept
    : Operation() {
    *this = ::std::move(from);
  }

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Operation& operator=(Operation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Operation& default_instance();

  enum ResultCase {
    kError = 4,
    kResponse = 5,
    RESULT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Operation* internal_default_instance() {
    return reinterpret_cast<const Operation*>(
               &_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Operation& a, Operation& b) {
    a.Swap(&b);
  }
  inline void Swap(Operation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Operation* New() const final {
    return CreateMaybeMessage<Operation>(nullptr);
  }

  Operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Operation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Operation& from);
  void MergeFrom(const Operation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Operation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "offline_pages.proto.Operation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMetadataFieldNumber = 2,
    kDoneFieldNumber = 3,
    kErrorFieldNumber = 4,
    kResponseFieldNumber = 5,
  };
  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional .offline_pages.proto.Any metadata = 2;
  bool has_metadata() const;
  void clear_metadata();
  const ::offline_pages::proto::Any& metadata() const;
  ::offline_pages::proto::Any* release_metadata();
  ::offline_pages::proto::Any* mutable_metadata();
  void set_allocated_metadata(::offline_pages::proto::Any* metadata);

  // optional bool done = 3;
  bool has_done() const;
  void clear_done();
  bool done() const;
  void set_done(bool value);

  // optional .offline_pages.proto.Status error = 4;
  bool has_error() const;
  void clear_error();
  const ::offline_pages::proto::Status& error() const;
  ::offline_pages::proto::Status* release_error();
  ::offline_pages::proto::Status* mutable_error();
  void set_allocated_error(::offline_pages::proto::Status* error);

  // optional .offline_pages.proto.Any response = 5;
  bool has_response() const;
  void clear_response();
  const ::offline_pages::proto::Any& response() const;
  ::offline_pages::proto::Any* release_response();
  ::offline_pages::proto::Any* mutable_response();
  void set_allocated_response(::offline_pages::proto::Any* response);

  void clear_result();
  ResultCase result_case() const;
  // @@protoc_insertion_point(class_scope:offline_pages.proto.Operation)
 private:
  class _Internal;
  void set_has_error();
  void set_has_response();

  inline bool has_result() const;
  inline void clear_has_result();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::offline_pages::proto::Any* metadata_;
  bool done_;
  union ResultUnion {
    ResultUnion() {}
    ::offline_pages::proto::Status* error_;
    ::offline_pages::proto::Any* response_;
  } result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_operation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Operation

// optional string name = 1;
inline bool Operation::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Operation::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Operation::name() const {
  // @@protoc_insertion_point(field_get:offline_pages.proto.Operation.name)
  return name_.GetNoArena();
}
inline void Operation::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:offline_pages.proto.Operation.name)
}
inline void Operation::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:offline_pages.proto.Operation.name)
}
inline void Operation::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:offline_pages.proto.Operation.name)
}
inline void Operation::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:offline_pages.proto.Operation.name)
}
inline std::string* Operation::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:offline_pages.proto.Operation.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Operation::release_name() {
  // @@protoc_insertion_point(field_release:offline_pages.proto.Operation.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:offline_pages.proto.Operation.name)
}

// optional .offline_pages.proto.Any metadata = 2;
inline bool Operation::has_metadata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::offline_pages::proto::Any& Operation::metadata() const {
  const ::offline_pages::proto::Any* p = metadata_;
  // @@protoc_insertion_point(field_get:offline_pages.proto.Operation.metadata)
  return p != nullptr ? *p : *reinterpret_cast<const ::offline_pages::proto::Any*>(
      &::offline_pages::proto::_Any_default_instance_);
}
inline ::offline_pages::proto::Any* Operation::release_metadata() {
  // @@protoc_insertion_point(field_release:offline_pages.proto.Operation.metadata)
  _has_bits_[0] &= ~0x00000002u;
  ::offline_pages::proto::Any* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::offline_pages::proto::Any* Operation::mutable_metadata() {
  _has_bits_[0] |= 0x00000002u;
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::offline_pages::proto::Any>(GetArenaNoVirtual());
    metadata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:offline_pages.proto.Operation.metadata)
  return metadata_;
}
inline void Operation::set_allocated_metadata(::offline_pages::proto::Any* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:offline_pages.proto.Operation.metadata)
}

// optional bool done = 3;
inline bool Operation::has_done() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Operation::clear_done() {
  done_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Operation::done() const {
  // @@protoc_insertion_point(field_get:offline_pages.proto.Operation.done)
  return done_;
}
inline void Operation::set_done(bool value) {
  _has_bits_[0] |= 0x00000004u;
  done_ = value;
  // @@protoc_insertion_point(field_set:offline_pages.proto.Operation.done)
}

// optional .offline_pages.proto.Status error = 4;
inline bool Operation::has_error() const {
  return result_case() == kError;
}
inline void Operation::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::offline_pages::proto::Status* Operation::release_error() {
  // @@protoc_insertion_point(field_release:offline_pages.proto.Operation.error)
  if (has_error()) {
    clear_has_result();
      ::offline_pages::proto::Status* temp = result_.error_;
    result_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::offline_pages::proto::Status& Operation::error() const {
  // @@protoc_insertion_point(field_get:offline_pages.proto.Operation.error)
  return has_error()
      ? *result_.error_
      : *reinterpret_cast< ::offline_pages::proto::Status*>(&::offline_pages::proto::_Status_default_instance_);
}
inline ::offline_pages::proto::Status* Operation::mutable_error() {
  if (!has_error()) {
    clear_result();
    set_has_error();
    result_.error_ = CreateMaybeMessage< ::offline_pages::proto::Status >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:offline_pages.proto.Operation.error)
  return result_.error_;
}

// optional .offline_pages.proto.Any response = 5;
inline bool Operation::has_response() const {
  return result_case() == kResponse;
}
inline void Operation::set_has_response() {
  _oneof_case_[0] = kResponse;
}
inline ::offline_pages::proto::Any* Operation::release_response() {
  // @@protoc_insertion_point(field_release:offline_pages.proto.Operation.response)
  if (has_response()) {
    clear_has_result();
      ::offline_pages::proto::Any* temp = result_.response_;
    result_.response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::offline_pages::proto::Any& Operation::response() const {
  // @@protoc_insertion_point(field_get:offline_pages.proto.Operation.response)
  return has_response()
      ? *result_.response_
      : *reinterpret_cast< ::offline_pages::proto::Any*>(&::offline_pages::proto::_Any_default_instance_);
}
inline ::offline_pages::proto::Any* Operation::mutable_response() {
  if (!has_response()) {
    clear_result();
    set_has_response();
    result_.response_ = CreateMaybeMessage< ::offline_pages::proto::Any >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:offline_pages.proto.Operation.response)
  return result_.response_;
}

inline bool Operation::has_result() const {
  return result_case() != RESULT_NOT_SET;
}
inline void Operation::clear_has_result() {
  _oneof_case_[0] = RESULT_NOT_SET;
}
inline Operation::ResultCase Operation::result_case() const {
  return Operation::ResultCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace offline_pages

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_operation_2eproto

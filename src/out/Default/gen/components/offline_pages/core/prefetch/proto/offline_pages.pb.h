// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: offline_pages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_offline_5fpages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_offline_5fpages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_offline_5fpages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_offline_5fpages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace offline_pages {
namespace proto {
class Archive;
class ArchiveDefaultTypeInternal;
extern ArchiveDefaultTypeInternal _Archive_default_instance_;
class GeneratePageBundleRequest;
class GeneratePageBundleRequestDefaultTypeInternal;
extern GeneratePageBundleRequestDefaultTypeInternal _GeneratePageBundleRequest_default_instance_;
class PageBundle;
class PageBundleDefaultTypeInternal;
extern PageBundleDefaultTypeInternal _PageBundle_default_instance_;
class PageInfo;
class PageInfoDefaultTypeInternal;
extern PageInfoDefaultTypeInternal _PageInfo_default_instance_;
class PageParameters;
class PageParametersDefaultTypeInternal;
extern PageParametersDefaultTypeInternal _PageParameters_default_instance_;
class Timestamp;
class TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
}  // namespace proto
}  // namespace offline_pages
PROTOBUF_NAMESPACE_OPEN
template<> ::offline_pages::proto::Archive* Arena::CreateMaybeMessage<::offline_pages::proto::Archive>(Arena*);
template<> ::offline_pages::proto::GeneratePageBundleRequest* Arena::CreateMaybeMessage<::offline_pages::proto::GeneratePageBundleRequest>(Arena*);
template<> ::offline_pages::proto::PageBundle* Arena::CreateMaybeMessage<::offline_pages::proto::PageBundle>(Arena*);
template<> ::offline_pages::proto::PageInfo* Arena::CreateMaybeMessage<::offline_pages::proto::PageInfo>(Arena*);
template<> ::offline_pages::proto::PageParameters* Arena::CreateMaybeMessage<::offline_pages::proto::PageParameters>(Arena*);
template<> ::offline_pages::proto::Timestamp* Arena::CreateMaybeMessage<::offline_pages::proto::Timestamp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace offline_pages {
namespace proto {

enum Transformation : int {
  TRANSFORMATION_UNSPECIFIED = 0,
  NO_TRANSFORMATION = 1
};
bool Transformation_IsValid(int value);
constexpr Transformation Transformation_MIN = TRANSFORMATION_UNSPECIFIED;
constexpr Transformation Transformation_MAX = NO_TRANSFORMATION;
constexpr int Transformation_ARRAYSIZE = Transformation_MAX + 1;

const std::string& Transformation_Name(Transformation value);
template<typename T>
inline const std::string& Transformation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Transformation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Transformation_Name.");
  return Transformation_Name(static_cast<Transformation>(enum_t_value));
}
bool Transformation_Parse(
    const std::string& name, Transformation* value);
enum OutputFormat : int {
  FORMAT_UNSPECIFIED = 0,
  FORMAT_MHTML = 1
};
bool OutputFormat_IsValid(int value);
constexpr OutputFormat OutputFormat_MIN = FORMAT_UNSPECIFIED;
constexpr OutputFormat OutputFormat_MAX = FORMAT_MHTML;
constexpr int OutputFormat_ARRAYSIZE = OutputFormat_MAX + 1;

const std::string& OutputFormat_Name(OutputFormat value);
template<typename T>
inline const std::string& OutputFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OutputFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OutputFormat_Name.");
  return OutputFormat_Name(static_cast<OutputFormat>(enum_t_value));
}
bool OutputFormat_Parse(
    const std::string& name, OutputFormat* value);
// ===================================================================

class Timestamp :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:offline_pages.proto.Timestamp) */ {
 public:
  Timestamp();
  virtual ~Timestamp();

  Timestamp(const Timestamp& from);
  Timestamp(Timestamp&& from) noexcept
    : Timestamp() {
    *this = ::std::move(from);
  }

  inline Timestamp& operator=(const Timestamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Timestamp& operator=(Timestamp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Timestamp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Timestamp* internal_default_instance() {
    return reinterpret_cast<const Timestamp*>(
               &_Timestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Timestamp& a, Timestamp& b) {
    a.Swap(&b);
  }
  inline void Swap(Timestamp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Timestamp* New() const final {
    return CreateMaybeMessage<Timestamp>(nullptr);
  }

  Timestamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Timestamp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Timestamp& from);
  void MergeFrom(const Timestamp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Timestamp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "offline_pages.proto.Timestamp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsFieldNumber = 1,
    kNanosFieldNumber = 2,
  };
  // optional int64 seconds = 1;
  bool has_seconds() const;
  void clear_seconds();
  ::PROTOBUF_NAMESPACE_ID::int64 seconds() const;
  void set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 nanos = 2;
  bool has_nanos() const;
  void clear_nanos();
  ::PROTOBUF_NAMESPACE_ID::int32 nanos() const;
  void set_nanos(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:offline_pages.proto.Timestamp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 seconds_;
  ::PROTOBUF_NAMESPACE_ID::int32 nanos_;
  friend struct ::TableStruct_offline_5fpages_2eproto;
};
// -------------------------------------------------------------------

class PageBundle :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:offline_pages.proto.PageBundle) */ {
 public:
  PageBundle();
  virtual ~PageBundle();

  PageBundle(const PageBundle& from);
  PageBundle(PageBundle&& from) noexcept
    : PageBundle() {
    *this = ::std::move(from);
  }

  inline PageBundle& operator=(const PageBundle& from) {
    CopyFrom(from);
    return *this;
  }
  inline PageBundle& operator=(PageBundle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PageBundle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PageBundle* internal_default_instance() {
    return reinterpret_cast<const PageBundle*>(
               &_PageBundle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PageBundle& a, PageBundle& b) {
    a.Swap(&b);
  }
  inline void Swap(PageBundle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PageBundle* New() const final {
    return CreateMaybeMessage<PageBundle>(nullptr);
  }

  PageBundle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PageBundle>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PageBundle& from);
  void MergeFrom(const PageBundle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PageBundle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "offline_pages.proto.PageBundle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArchivesFieldNumber = 1,
  };
  // repeated .offline_pages.proto.Archive archives = 1;
  int archives_size() const;
  void clear_archives();
  ::offline_pages::proto::Archive* mutable_archives(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::offline_pages::proto::Archive >*
      mutable_archives();
  const ::offline_pages::proto::Archive& archives(int index) const;
  ::offline_pages::proto::Archive* add_archives();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::offline_pages::proto::Archive >&
      archives() const;

  // @@protoc_insertion_point(class_scope:offline_pages.proto.PageBundle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::offline_pages::proto::Archive > archives_;
  friend struct ::TableStruct_offline_5fpages_2eproto;
};
// -------------------------------------------------------------------

class Archive :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:offline_pages.proto.Archive) */ {
 public:
  Archive();
  virtual ~Archive();

  Archive(const Archive& from);
  Archive(Archive&& from) noexcept
    : Archive() {
    *this = ::std::move(from);
  }

  inline Archive& operator=(const Archive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Archive& operator=(Archive&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Archive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Archive* internal_default_instance() {
    return reinterpret_cast<const Archive*>(
               &_Archive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Archive& a, Archive& b) {
    a.Swap(&b);
  }
  inline void Swap(Archive* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Archive* New() const final {
    return CreateMaybeMessage<Archive>(nullptr);
  }

  Archive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Archive>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Archive& from);
  void MergeFrom(const Archive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Archive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "offline_pages.proto.Archive";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageInfosFieldNumber = 1,
    kBodyNameFieldNumber = 3,
    kBodyLengthFieldNumber = 4,
    kOutputFormatFieldNumber = 2,
  };
  // repeated .offline_pages.proto.PageInfo page_infos = 1;
  int page_infos_size() const;
  void clear_page_infos();
  ::offline_pages::proto::PageInfo* mutable_page_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::offline_pages::proto::PageInfo >*
      mutable_page_infos();
  const ::offline_pages::proto::PageInfo& page_infos(int index) const;
  ::offline_pages::proto::PageInfo* add_page_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::offline_pages::proto::PageInfo >&
      page_infos() const;

  // optional string body_name = 3;
  bool has_body_name() const;
  void clear_body_name();
  const std::string& body_name() const;
  void set_body_name(const std::string& value);
  void set_body_name(std::string&& value);
  void set_body_name(const char* value);
  void set_body_name(const char* value, size_t size);
  std::string* mutable_body_name();
  std::string* release_body_name();
  void set_allocated_body_name(std::string* body_name);

  // optional int64 body_length = 4;
  bool has_body_length() const;
  void clear_body_length();
  ::PROTOBUF_NAMESPACE_ID::int64 body_length() const;
  void set_body_length(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .offline_pages.proto.OutputFormat output_format = 2;
  bool has_output_format() const;
  void clear_output_format();
  ::offline_pages::proto::OutputFormat output_format() const;
  void set_output_format(::offline_pages::proto::OutputFormat value);

  // @@protoc_insertion_point(class_scope:offline_pages.proto.Archive)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::offline_pages::proto::PageInfo > page_infos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 body_length_;
  int output_format_;
  friend struct ::TableStruct_offline_5fpages_2eproto;
};
// -------------------------------------------------------------------

class PageInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:offline_pages.proto.PageInfo) */ {
 public:
  PageInfo();
  virtual ~PageInfo();

  PageInfo(const PageInfo& from);
  PageInfo(PageInfo&& from) noexcept
    : PageInfo() {
    *this = ::std::move(from);
  }

  inline PageInfo& operator=(const PageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PageInfo& operator=(PageInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PageInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PageInfo* internal_default_instance() {
    return reinterpret_cast<const PageInfo*>(
               &_PageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PageInfo& a, PageInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PageInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PageInfo* New() const final {
    return CreateMaybeMessage<PageInfo>(nullptr);
  }

  PageInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PageInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PageInfo& from);
  void MergeFrom(const PageInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PageInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "offline_pages.proto.PageInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kRedirectUrlFieldNumber = 2,
    kStatusFieldNumber = 3,
    kRenderTimeFieldNumber = 5,
    kTransformationFieldNumber = 4,
  };
  // optional string url = 1;
  bool has_url() const;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // optional string redirect_url = 2;
  bool has_redirect_url() const;
  void clear_redirect_url();
  const std::string& redirect_url() const;
  void set_redirect_url(const std::string& value);
  void set_redirect_url(std::string&& value);
  void set_redirect_url(const char* value);
  void set_redirect_url(const char* value, size_t size);
  std::string* mutable_redirect_url();
  std::string* release_redirect_url();
  void set_allocated_redirect_url(std::string* redirect_url);

  // optional .offline_pages.proto.Status status = 3;
  bool has_status() const;
  void clear_status();
  const ::offline_pages::proto::Status& status() const;
  ::offline_pages::proto::Status* release_status();
  ::offline_pages::proto::Status* mutable_status();
  void set_allocated_status(::offline_pages::proto::Status* status);

  // optional .offline_pages.proto.Timestamp render_time = 5;
  bool has_render_time() const;
  void clear_render_time();
  const ::offline_pages::proto::Timestamp& render_time() const;
  ::offline_pages::proto::Timestamp* release_render_time();
  ::offline_pages::proto::Timestamp* mutable_render_time();
  void set_allocated_render_time(::offline_pages::proto::Timestamp* render_time);

  // optional .offline_pages.proto.Transformation transformation = 4;
  bool has_transformation() const;
  void clear_transformation();
  ::offline_pages::proto::Transformation transformation() const;
  void set_transformation(::offline_pages::proto::Transformation value);

  // @@protoc_insertion_point(class_scope:offline_pages.proto.PageInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr redirect_url_;
  ::offline_pages::proto::Status* status_;
  ::offline_pages::proto::Timestamp* render_time_;
  int transformation_;
  friend struct ::TableStruct_offline_5fpages_2eproto;
};
// -------------------------------------------------------------------

class GeneratePageBundleRequest :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:offline_pages.proto.GeneratePageBundleRequest) */ {
 public:
  GeneratePageBundleRequest();
  virtual ~GeneratePageBundleRequest();

  GeneratePageBundleRequest(const GeneratePageBundleRequest& from);
  GeneratePageBundleRequest(GeneratePageBundleRequest&& from) noexcept
    : GeneratePageBundleRequest() {
    *this = ::std::move(from);
  }

  inline GeneratePageBundleRequest& operator=(const GeneratePageBundleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeneratePageBundleRequest& operator=(GeneratePageBundleRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GeneratePageBundleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeneratePageBundleRequest* internal_default_instance() {
    return reinterpret_cast<const GeneratePageBundleRequest*>(
               &_GeneratePageBundleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GeneratePageBundleRequest& a, GeneratePageBundleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GeneratePageBundleRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeneratePageBundleRequest* New() const final {
    return CreateMaybeMessage<GeneratePageBundleRequest>(nullptr);
  }

  GeneratePageBundleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeneratePageBundleRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GeneratePageBundleRequest& from);
  void MergeFrom(const GeneratePageBundleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GeneratePageBundleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "offline_pages.proto.GeneratePageBundleRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrowserLanguagesFieldNumber = 2,
    kPagesFieldNumber = 6,
    kUserAgentFieldNumber = 1,
    kGcmRegistrationIdFieldNumber = 5,
    kMaxBundleSizeBytesFieldNumber = 4,
    kOutputFormatFieldNumber = 3,
  };
  // repeated string browser_languages = 2;
  int browser_languages_size() const;
  void clear_browser_languages();
  const std::string& browser_languages(int index) const;
  std::string* mutable_browser_languages(int index);
  void set_browser_languages(int index, const std::string& value);
  void set_browser_languages(int index, std::string&& value);
  void set_browser_languages(int index, const char* value);
  void set_browser_languages(int index, const char* value, size_t size);
  std::string* add_browser_languages();
  void add_browser_languages(const std::string& value);
  void add_browser_languages(std::string&& value);
  void add_browser_languages(const char* value);
  void add_browser_languages(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& browser_languages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_browser_languages();

  // repeated .offline_pages.proto.PageParameters pages = 6;
  int pages_size() const;
  void clear_pages();
  ::offline_pages::proto::PageParameters* mutable_pages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::offline_pages::proto::PageParameters >*
      mutable_pages();
  const ::offline_pages::proto::PageParameters& pages(int index) const;
  ::offline_pages::proto::PageParameters* add_pages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::offline_pages::proto::PageParameters >&
      pages() const;

  // optional string user_agent = 1;
  bool has_user_agent() const;
  void clear_user_agent();
  const std::string& user_agent() const;
  void set_user_agent(const std::string& value);
  void set_user_agent(std::string&& value);
  void set_user_agent(const char* value);
  void set_user_agent(const char* value, size_t size);
  std::string* mutable_user_agent();
  std::string* release_user_agent();
  void set_allocated_user_agent(std::string* user_agent);

  // optional string gcm_registration_id = 5;
  bool has_gcm_registration_id() const;
  void clear_gcm_registration_id();
  const std::string& gcm_registration_id() const;
  void set_gcm_registration_id(const std::string& value);
  void set_gcm_registration_id(std::string&& value);
  void set_gcm_registration_id(const char* value);
  void set_gcm_registration_id(const char* value, size_t size);
  std::string* mutable_gcm_registration_id();
  std::string* release_gcm_registration_id();
  void set_allocated_gcm_registration_id(std::string* gcm_registration_id);

  // optional int64 max_bundle_size_bytes = 4;
  bool has_max_bundle_size_bytes() const;
  void clear_max_bundle_size_bytes();
  ::PROTOBUF_NAMESPACE_ID::int64 max_bundle_size_bytes() const;
  void set_max_bundle_size_bytes(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .offline_pages.proto.OutputFormat output_format = 3;
  bool has_output_format() const;
  void clear_output_format();
  ::offline_pages::proto::OutputFormat output_format() const;
  void set_output_format(::offline_pages::proto::OutputFormat value);

  // @@protoc_insertion_point(class_scope:offline_pages.proto.GeneratePageBundleRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> browser_languages_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::offline_pages::proto::PageParameters > pages_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_agent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gcm_registration_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_bundle_size_bytes_;
  int output_format_;
  friend struct ::TableStruct_offline_5fpages_2eproto;
};
// -------------------------------------------------------------------

class PageParameters :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:offline_pages.proto.PageParameters) */ {
 public:
  PageParameters();
  virtual ~PageParameters();

  PageParameters(const PageParameters& from);
  PageParameters(PageParameters&& from) noexcept
    : PageParameters() {
    *this = ::std::move(from);
  }

  inline PageParameters& operator=(const PageParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline PageParameters& operator=(PageParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PageParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PageParameters* internal_default_instance() {
    return reinterpret_cast<const PageParameters*>(
               &_PageParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PageParameters& a, PageParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(PageParameters* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PageParameters* New() const final {
    return CreateMaybeMessage<PageParameters>(nullptr);
  }

  PageParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PageParameters>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PageParameters& from);
  void MergeFrom(const PageParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PageParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "offline_pages.proto.PageParameters";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kTransformationFieldNumber = 2,
  };
  // optional string url = 1;
  bool has_url() const;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // optional .offline_pages.proto.Transformation transformation = 2;
  bool has_transformation() const;
  void clear_transformation();
  ::offline_pages::proto::Transformation transformation() const;
  void set_transformation(::offline_pages::proto::Transformation value);

  // @@protoc_insertion_point(class_scope:offline_pages.proto.PageParameters)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  int transformation_;
  friend struct ::TableStruct_offline_5fpages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Timestamp

// optional int64 seconds = 1;
inline bool Timestamp::has_seconds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Timestamp::clear_seconds() {
  seconds_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Timestamp::seconds() const {
  // @@protoc_insertion_point(field_get:offline_pages.proto.Timestamp.seconds)
  return seconds_;
}
inline void Timestamp::set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  seconds_ = value;
  // @@protoc_insertion_point(field_set:offline_pages.proto.Timestamp.seconds)
}

// optional int32 nanos = 2;
inline bool Timestamp::has_nanos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Timestamp::clear_nanos() {
  nanos_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Timestamp::nanos() const {
  // @@protoc_insertion_point(field_get:offline_pages.proto.Timestamp.nanos)
  return nanos_;
}
inline void Timestamp::set_nanos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  nanos_ = value;
  // @@protoc_insertion_point(field_set:offline_pages.proto.Timestamp.nanos)
}

// -------------------------------------------------------------------

// PageBundle

// repeated .offline_pages.proto.Archive archives = 1;
inline int PageBundle::archives_size() const {
  return archives_.size();
}
inline void PageBundle::clear_archives() {
  archives_.Clear();
}
inline ::offline_pages::proto::Archive* PageBundle::mutable_archives(int index) {
  // @@protoc_insertion_point(field_mutable:offline_pages.proto.PageBundle.archives)
  return archives_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::offline_pages::proto::Archive >*
PageBundle::mutable_archives() {
  // @@protoc_insertion_point(field_mutable_list:offline_pages.proto.PageBundle.archives)
  return &archives_;
}
inline const ::offline_pages::proto::Archive& PageBundle::archives(int index) const {
  // @@protoc_insertion_point(field_get:offline_pages.proto.PageBundle.archives)
  return archives_.Get(index);
}
inline ::offline_pages::proto::Archive* PageBundle::add_archives() {
  // @@protoc_insertion_point(field_add:offline_pages.proto.PageBundle.archives)
  return archives_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::offline_pages::proto::Archive >&
PageBundle::archives() const {
  // @@protoc_insertion_point(field_list:offline_pages.proto.PageBundle.archives)
  return archives_;
}

// -------------------------------------------------------------------

// Archive

// repeated .offline_pages.proto.PageInfo page_infos = 1;
inline int Archive::page_infos_size() const {
  return page_infos_.size();
}
inline void Archive::clear_page_infos() {
  page_infos_.Clear();
}
inline ::offline_pages::proto::PageInfo* Archive::mutable_page_infos(int index) {
  // @@protoc_insertion_point(field_mutable:offline_pages.proto.Archive.page_infos)
  return page_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::offline_pages::proto::PageInfo >*
Archive::mutable_page_infos() {
  // @@protoc_insertion_point(field_mutable_list:offline_pages.proto.Archive.page_infos)
  return &page_infos_;
}
inline const ::offline_pages::proto::PageInfo& Archive::page_infos(int index) const {
  // @@protoc_insertion_point(field_get:offline_pages.proto.Archive.page_infos)
  return page_infos_.Get(index);
}
inline ::offline_pages::proto::PageInfo* Archive::add_page_infos() {
  // @@protoc_insertion_point(field_add:offline_pages.proto.Archive.page_infos)
  return page_infos_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::offline_pages::proto::PageInfo >&
Archive::page_infos() const {
  // @@protoc_insertion_point(field_list:offline_pages.proto.Archive.page_infos)
  return page_infos_;
}

// optional .offline_pages.proto.OutputFormat output_format = 2;
inline bool Archive::has_output_format() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Archive::clear_output_format() {
  output_format_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::offline_pages::proto::OutputFormat Archive::output_format() const {
  // @@protoc_insertion_point(field_get:offline_pages.proto.Archive.output_format)
  return static_cast< ::offline_pages::proto::OutputFormat >(output_format_);
}
inline void Archive::set_output_format(::offline_pages::proto::OutputFormat value) {
  assert(::offline_pages::proto::OutputFormat_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  output_format_ = value;
  // @@protoc_insertion_point(field_set:offline_pages.proto.Archive.output_format)
}

// optional string body_name = 3;
inline bool Archive::has_body_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Archive::clear_body_name() {
  body_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Archive::body_name() const {
  // @@protoc_insertion_point(field_get:offline_pages.proto.Archive.body_name)
  return body_name_.GetNoArena();
}
inline void Archive::set_body_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  body_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:offline_pages.proto.Archive.body_name)
}
inline void Archive::set_body_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  body_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:offline_pages.proto.Archive.body_name)
}
inline void Archive::set_body_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  body_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:offline_pages.proto.Archive.body_name)
}
inline void Archive::set_body_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  body_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:offline_pages.proto.Archive.body_name)
}
inline std::string* Archive::mutable_body_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:offline_pages.proto.Archive.body_name)
  return body_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Archive::release_body_name() {
  // @@protoc_insertion_point(field_release:offline_pages.proto.Archive.body_name)
  if (!has_body_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return body_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Archive::set_allocated_body_name(std::string* body_name) {
  if (body_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  body_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body_name);
  // @@protoc_insertion_point(field_set_allocated:offline_pages.proto.Archive.body_name)
}

// optional int64 body_length = 4;
inline bool Archive::has_body_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Archive::clear_body_length() {
  body_length_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Archive::body_length() const {
  // @@protoc_insertion_point(field_get:offline_pages.proto.Archive.body_length)
  return body_length_;
}
inline void Archive::set_body_length(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  body_length_ = value;
  // @@protoc_insertion_point(field_set:offline_pages.proto.Archive.body_length)
}

// -------------------------------------------------------------------

// PageInfo

// optional string url = 1;
inline bool PageInfo::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PageInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PageInfo::url() const {
  // @@protoc_insertion_point(field_get:offline_pages.proto.PageInfo.url)
  return url_.GetNoArena();
}
inline void PageInfo::set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:offline_pages.proto.PageInfo.url)
}
inline void PageInfo::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:offline_pages.proto.PageInfo.url)
}
inline void PageInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:offline_pages.proto.PageInfo.url)
}
inline void PageInfo::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:offline_pages.proto.PageInfo.url)
}
inline std::string* PageInfo::mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:offline_pages.proto.PageInfo.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PageInfo::release_url() {
  // @@protoc_insertion_point(field_release:offline_pages.proto.PageInfo.url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PageInfo::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:offline_pages.proto.PageInfo.url)
}

// optional string redirect_url = 2;
inline bool PageInfo::has_redirect_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PageInfo::clear_redirect_url() {
  redirect_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PageInfo::redirect_url() const {
  // @@protoc_insertion_point(field_get:offline_pages.proto.PageInfo.redirect_url)
  return redirect_url_.GetNoArena();
}
inline void PageInfo::set_redirect_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  redirect_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:offline_pages.proto.PageInfo.redirect_url)
}
inline void PageInfo::set_redirect_url(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  redirect_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:offline_pages.proto.PageInfo.redirect_url)
}
inline void PageInfo::set_redirect_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  redirect_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:offline_pages.proto.PageInfo.redirect_url)
}
inline void PageInfo::set_redirect_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  redirect_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:offline_pages.proto.PageInfo.redirect_url)
}
inline std::string* PageInfo::mutable_redirect_url() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:offline_pages.proto.PageInfo.redirect_url)
  return redirect_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PageInfo::release_redirect_url() {
  // @@protoc_insertion_point(field_release:offline_pages.proto.PageInfo.redirect_url)
  if (!has_redirect_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return redirect_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PageInfo::set_allocated_redirect_url(std::string* redirect_url) {
  if (redirect_url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  redirect_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), redirect_url);
  // @@protoc_insertion_point(field_set_allocated:offline_pages.proto.PageInfo.redirect_url)
}

// optional .offline_pages.proto.Status status = 3;
inline bool PageInfo::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::offline_pages::proto::Status& PageInfo::status() const {
  const ::offline_pages::proto::Status* p = status_;
  // @@protoc_insertion_point(field_get:offline_pages.proto.PageInfo.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::offline_pages::proto::Status*>(
      &::offline_pages::proto::_Status_default_instance_);
}
inline ::offline_pages::proto::Status* PageInfo::release_status() {
  // @@protoc_insertion_point(field_release:offline_pages.proto.PageInfo.status)
  _has_bits_[0] &= ~0x00000004u;
  ::offline_pages::proto::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::offline_pages::proto::Status* PageInfo::mutable_status() {
  _has_bits_[0] |= 0x00000004u;
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::offline_pages::proto::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:offline_pages.proto.PageInfo.status)
  return status_;
}
inline void PageInfo::set_allocated_status(::offline_pages::proto::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:offline_pages.proto.PageInfo.status)
}

// optional .offline_pages.proto.Transformation transformation = 4;
inline bool PageInfo::has_transformation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PageInfo::clear_transformation() {
  transformation_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::offline_pages::proto::Transformation PageInfo::transformation() const {
  // @@protoc_insertion_point(field_get:offline_pages.proto.PageInfo.transformation)
  return static_cast< ::offline_pages::proto::Transformation >(transformation_);
}
inline void PageInfo::set_transformation(::offline_pages::proto::Transformation value) {
  assert(::offline_pages::proto::Transformation_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  transformation_ = value;
  // @@protoc_insertion_point(field_set:offline_pages.proto.PageInfo.transformation)
}

// optional .offline_pages.proto.Timestamp render_time = 5;
inline bool PageInfo::has_render_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PageInfo::clear_render_time() {
  if (render_time_ != nullptr) render_time_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::offline_pages::proto::Timestamp& PageInfo::render_time() const {
  const ::offline_pages::proto::Timestamp* p = render_time_;
  // @@protoc_insertion_point(field_get:offline_pages.proto.PageInfo.render_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::offline_pages::proto::Timestamp*>(
      &::offline_pages::proto::_Timestamp_default_instance_);
}
inline ::offline_pages::proto::Timestamp* PageInfo::release_render_time() {
  // @@protoc_insertion_point(field_release:offline_pages.proto.PageInfo.render_time)
  _has_bits_[0] &= ~0x00000008u;
  ::offline_pages::proto::Timestamp* temp = render_time_;
  render_time_ = nullptr;
  return temp;
}
inline ::offline_pages::proto::Timestamp* PageInfo::mutable_render_time() {
  _has_bits_[0] |= 0x00000008u;
  if (render_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::offline_pages::proto::Timestamp>(GetArenaNoVirtual());
    render_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:offline_pages.proto.PageInfo.render_time)
  return render_time_;
}
inline void PageInfo::set_allocated_render_time(::offline_pages::proto::Timestamp* render_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete render_time_;
  }
  if (render_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      render_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, render_time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  render_time_ = render_time;
  // @@protoc_insertion_point(field_set_allocated:offline_pages.proto.PageInfo.render_time)
}

// -------------------------------------------------------------------

// GeneratePageBundleRequest

// optional string user_agent = 1;
inline bool GeneratePageBundleRequest::has_user_agent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GeneratePageBundleRequest::clear_user_agent() {
  user_agent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GeneratePageBundleRequest::user_agent() const {
  // @@protoc_insertion_point(field_get:offline_pages.proto.GeneratePageBundleRequest.user_agent)
  return user_agent_.GetNoArena();
}
inline void GeneratePageBundleRequest::set_user_agent(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_agent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:offline_pages.proto.GeneratePageBundleRequest.user_agent)
}
inline void GeneratePageBundleRequest::set_user_agent(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  user_agent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:offline_pages.proto.GeneratePageBundleRequest.user_agent)
}
inline void GeneratePageBundleRequest::set_user_agent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  user_agent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:offline_pages.proto.GeneratePageBundleRequest.user_agent)
}
inline void GeneratePageBundleRequest::set_user_agent(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  user_agent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:offline_pages.proto.GeneratePageBundleRequest.user_agent)
}
inline std::string* GeneratePageBundleRequest::mutable_user_agent() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:offline_pages.proto.GeneratePageBundleRequest.user_agent)
  return user_agent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GeneratePageBundleRequest::release_user_agent() {
  // @@protoc_insertion_point(field_release:offline_pages.proto.GeneratePageBundleRequest.user_agent)
  if (!has_user_agent()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return user_agent_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GeneratePageBundleRequest::set_allocated_user_agent(std::string* user_agent) {
  if (user_agent != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_agent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_agent);
  // @@protoc_insertion_point(field_set_allocated:offline_pages.proto.GeneratePageBundleRequest.user_agent)
}

// repeated string browser_languages = 2;
inline int GeneratePageBundleRequest::browser_languages_size() const {
  return browser_languages_.size();
}
inline void GeneratePageBundleRequest::clear_browser_languages() {
  browser_languages_.Clear();
}
inline const std::string& GeneratePageBundleRequest::browser_languages(int index) const {
  // @@protoc_insertion_point(field_get:offline_pages.proto.GeneratePageBundleRequest.browser_languages)
  return browser_languages_.Get(index);
}
inline std::string* GeneratePageBundleRequest::mutable_browser_languages(int index) {
  // @@protoc_insertion_point(field_mutable:offline_pages.proto.GeneratePageBundleRequest.browser_languages)
  return browser_languages_.Mutable(index);
}
inline void GeneratePageBundleRequest::set_browser_languages(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:offline_pages.proto.GeneratePageBundleRequest.browser_languages)
  browser_languages_.Mutable(index)->assign(value);
}
inline void GeneratePageBundleRequest::set_browser_languages(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:offline_pages.proto.GeneratePageBundleRequest.browser_languages)
  browser_languages_.Mutable(index)->assign(std::move(value));
}
inline void GeneratePageBundleRequest::set_browser_languages(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  browser_languages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:offline_pages.proto.GeneratePageBundleRequest.browser_languages)
}
inline void GeneratePageBundleRequest::set_browser_languages(int index, const char* value, size_t size) {
  browser_languages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:offline_pages.proto.GeneratePageBundleRequest.browser_languages)
}
inline std::string* GeneratePageBundleRequest::add_browser_languages() {
  // @@protoc_insertion_point(field_add_mutable:offline_pages.proto.GeneratePageBundleRequest.browser_languages)
  return browser_languages_.Add();
}
inline void GeneratePageBundleRequest::add_browser_languages(const std::string& value) {
  browser_languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:offline_pages.proto.GeneratePageBundleRequest.browser_languages)
}
inline void GeneratePageBundleRequest::add_browser_languages(std::string&& value) {
  browser_languages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:offline_pages.proto.GeneratePageBundleRequest.browser_languages)
}
inline void GeneratePageBundleRequest::add_browser_languages(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  browser_languages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:offline_pages.proto.GeneratePageBundleRequest.browser_languages)
}
inline void GeneratePageBundleRequest::add_browser_languages(const char* value, size_t size) {
  browser_languages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:offline_pages.proto.GeneratePageBundleRequest.browser_languages)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GeneratePageBundleRequest::browser_languages() const {
  // @@protoc_insertion_point(field_list:offline_pages.proto.GeneratePageBundleRequest.browser_languages)
  return browser_languages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GeneratePageBundleRequest::mutable_browser_languages() {
  // @@protoc_insertion_point(field_mutable_list:offline_pages.proto.GeneratePageBundleRequest.browser_languages)
  return &browser_languages_;
}

// optional .offline_pages.proto.OutputFormat output_format = 3;
inline bool GeneratePageBundleRequest::has_output_format() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GeneratePageBundleRequest::clear_output_format() {
  output_format_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::offline_pages::proto::OutputFormat GeneratePageBundleRequest::output_format() const {
  // @@protoc_insertion_point(field_get:offline_pages.proto.GeneratePageBundleRequest.output_format)
  return static_cast< ::offline_pages::proto::OutputFormat >(output_format_);
}
inline void GeneratePageBundleRequest::set_output_format(::offline_pages::proto::OutputFormat value) {
  assert(::offline_pages::proto::OutputFormat_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  output_format_ = value;
  // @@protoc_insertion_point(field_set:offline_pages.proto.GeneratePageBundleRequest.output_format)
}

// optional int64 max_bundle_size_bytes = 4;
inline bool GeneratePageBundleRequest::has_max_bundle_size_bytes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GeneratePageBundleRequest::clear_max_bundle_size_bytes() {
  max_bundle_size_bytes_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GeneratePageBundleRequest::max_bundle_size_bytes() const {
  // @@protoc_insertion_point(field_get:offline_pages.proto.GeneratePageBundleRequest.max_bundle_size_bytes)
  return max_bundle_size_bytes_;
}
inline void GeneratePageBundleRequest::set_max_bundle_size_bytes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  max_bundle_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:offline_pages.proto.GeneratePageBundleRequest.max_bundle_size_bytes)
}

// optional string gcm_registration_id = 5;
inline bool GeneratePageBundleRequest::has_gcm_registration_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GeneratePageBundleRequest::clear_gcm_registration_id() {
  gcm_registration_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GeneratePageBundleRequest::gcm_registration_id() const {
  // @@protoc_insertion_point(field_get:offline_pages.proto.GeneratePageBundleRequest.gcm_registration_id)
  return gcm_registration_id_.GetNoArena();
}
inline void GeneratePageBundleRequest::set_gcm_registration_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  gcm_registration_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:offline_pages.proto.GeneratePageBundleRequest.gcm_registration_id)
}
inline void GeneratePageBundleRequest::set_gcm_registration_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  gcm_registration_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:offline_pages.proto.GeneratePageBundleRequest.gcm_registration_id)
}
inline void GeneratePageBundleRequest::set_gcm_registration_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  gcm_registration_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:offline_pages.proto.GeneratePageBundleRequest.gcm_registration_id)
}
inline void GeneratePageBundleRequest::set_gcm_registration_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  gcm_registration_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:offline_pages.proto.GeneratePageBundleRequest.gcm_registration_id)
}
inline std::string* GeneratePageBundleRequest::mutable_gcm_registration_id() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:offline_pages.proto.GeneratePageBundleRequest.gcm_registration_id)
  return gcm_registration_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GeneratePageBundleRequest::release_gcm_registration_id() {
  // @@protoc_insertion_point(field_release:offline_pages.proto.GeneratePageBundleRequest.gcm_registration_id)
  if (!has_gcm_registration_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return gcm_registration_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GeneratePageBundleRequest::set_allocated_gcm_registration_id(std::string* gcm_registration_id) {
  if (gcm_registration_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  gcm_registration_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gcm_registration_id);
  // @@protoc_insertion_point(field_set_allocated:offline_pages.proto.GeneratePageBundleRequest.gcm_registration_id)
}

// repeated .offline_pages.proto.PageParameters pages = 6;
inline int GeneratePageBundleRequest::pages_size() const {
  return pages_.size();
}
inline void GeneratePageBundleRequest::clear_pages() {
  pages_.Clear();
}
inline ::offline_pages::proto::PageParameters* GeneratePageBundleRequest::mutable_pages(int index) {
  // @@protoc_insertion_point(field_mutable:offline_pages.proto.GeneratePageBundleRequest.pages)
  return pages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::offline_pages::proto::PageParameters >*
GeneratePageBundleRequest::mutable_pages() {
  // @@protoc_insertion_point(field_mutable_list:offline_pages.proto.GeneratePageBundleRequest.pages)
  return &pages_;
}
inline const ::offline_pages::proto::PageParameters& GeneratePageBundleRequest::pages(int index) const {
  // @@protoc_insertion_point(field_get:offline_pages.proto.GeneratePageBundleRequest.pages)
  return pages_.Get(index);
}
inline ::offline_pages::proto::PageParameters* GeneratePageBundleRequest::add_pages() {
  // @@protoc_insertion_point(field_add:offline_pages.proto.GeneratePageBundleRequest.pages)
  return pages_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::offline_pages::proto::PageParameters >&
GeneratePageBundleRequest::pages() const {
  // @@protoc_insertion_point(field_list:offline_pages.proto.GeneratePageBundleRequest.pages)
  return pages_;
}

// -------------------------------------------------------------------

// PageParameters

// optional string url = 1;
inline bool PageParameters::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PageParameters::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PageParameters::url() const {
  // @@protoc_insertion_point(field_get:offline_pages.proto.PageParameters.url)
  return url_.GetNoArena();
}
inline void PageParameters::set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:offline_pages.proto.PageParameters.url)
}
inline void PageParameters::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:offline_pages.proto.PageParameters.url)
}
inline void PageParameters::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:offline_pages.proto.PageParameters.url)
}
inline void PageParameters::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:offline_pages.proto.PageParameters.url)
}
inline std::string* PageParameters::mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:offline_pages.proto.PageParameters.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PageParameters::release_url() {
  // @@protoc_insertion_point(field_release:offline_pages.proto.PageParameters.url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PageParameters::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:offline_pages.proto.PageParameters.url)
}

// optional .offline_pages.proto.Transformation transformation = 2;
inline bool PageParameters::has_transformation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PageParameters::clear_transformation() {
  transformation_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::offline_pages::proto::Transformation PageParameters::transformation() const {
  // @@protoc_insertion_point(field_get:offline_pages.proto.PageParameters.transformation)
  return static_cast< ::offline_pages::proto::Transformation >(transformation_);
}
inline void PageParameters::set_transformation(::offline_pages::proto::Transformation value) {
  assert(::offline_pages::proto::Transformation_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  transformation_ = value;
  // @@protoc_insertion_point(field_set:offline_pages.proto.PageParameters.transformation)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace offline_pages

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::offline_pages::proto::Transformation> : ::std::true_type {};
template <> struct is_proto_enum< ::offline_pages::proto::OutputFormat> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_offline_5fpages_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reading_list.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_reading_5flist_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_reading_5flist_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_reading_5flist_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_reading_5flist_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace reading_list {
class ReadingListContentSuggestionsExtra;
class ReadingListContentSuggestionsExtraDefaultTypeInternal;
extern ReadingListContentSuggestionsExtraDefaultTypeInternal _ReadingListContentSuggestionsExtra_default_instance_;
class ReadingListLocal;
class ReadingListLocalDefaultTypeInternal;
extern ReadingListLocalDefaultTypeInternal _ReadingListLocal_default_instance_;
}  // namespace reading_list
PROTOBUF_NAMESPACE_OPEN
template<> ::reading_list::ReadingListContentSuggestionsExtra* Arena::CreateMaybeMessage<::reading_list::ReadingListContentSuggestionsExtra>(Arena*);
template<> ::reading_list::ReadingListLocal* Arena::CreateMaybeMessage<::reading_list::ReadingListLocal>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace reading_list {

enum ReadingListLocal_ReadingListEntryStatus : int {
  ReadingListLocal_ReadingListEntryStatus_UNREAD = 0,
  ReadingListLocal_ReadingListEntryStatus_READ = 1,
  ReadingListLocal_ReadingListEntryStatus_UNSEEN = 2
};
bool ReadingListLocal_ReadingListEntryStatus_IsValid(int value);
constexpr ReadingListLocal_ReadingListEntryStatus ReadingListLocal_ReadingListEntryStatus_ReadingListEntryStatus_MIN = ReadingListLocal_ReadingListEntryStatus_UNREAD;
constexpr ReadingListLocal_ReadingListEntryStatus ReadingListLocal_ReadingListEntryStatus_ReadingListEntryStatus_MAX = ReadingListLocal_ReadingListEntryStatus_UNSEEN;
constexpr int ReadingListLocal_ReadingListEntryStatus_ReadingListEntryStatus_ARRAYSIZE = ReadingListLocal_ReadingListEntryStatus_ReadingListEntryStatus_MAX + 1;

const std::string& ReadingListLocal_ReadingListEntryStatus_Name(ReadingListLocal_ReadingListEntryStatus value);
template<typename T>
inline const std::string& ReadingListLocal_ReadingListEntryStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReadingListLocal_ReadingListEntryStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReadingListLocal_ReadingListEntryStatus_Name.");
  return ReadingListLocal_ReadingListEntryStatus_Name(static_cast<ReadingListLocal_ReadingListEntryStatus>(enum_t_value));
}
bool ReadingListLocal_ReadingListEntryStatus_Parse(
    const std::string& name, ReadingListLocal_ReadingListEntryStatus* value);
enum ReadingListLocal_DistillationState : int {
  ReadingListLocal_DistillationState_WAITING = 0,
  ReadingListLocal_DistillationState_PROCESSING = 1,
  ReadingListLocal_DistillationState_PROCESSED = 2,
  ReadingListLocal_DistillationState_WILL_RETRY = 3,
  ReadingListLocal_DistillationState_DISTILLATION_ERROR = 4
};
bool ReadingListLocal_DistillationState_IsValid(int value);
constexpr ReadingListLocal_DistillationState ReadingListLocal_DistillationState_DistillationState_MIN = ReadingListLocal_DistillationState_WAITING;
constexpr ReadingListLocal_DistillationState ReadingListLocal_DistillationState_DistillationState_MAX = ReadingListLocal_DistillationState_DISTILLATION_ERROR;
constexpr int ReadingListLocal_DistillationState_DistillationState_ARRAYSIZE = ReadingListLocal_DistillationState_DistillationState_MAX + 1;

const std::string& ReadingListLocal_DistillationState_Name(ReadingListLocal_DistillationState value);
template<typename T>
inline const std::string& ReadingListLocal_DistillationState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReadingListLocal_DistillationState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReadingListLocal_DistillationState_Name.");
  return ReadingListLocal_DistillationState_Name(static_cast<ReadingListLocal_DistillationState>(enum_t_value));
}
bool ReadingListLocal_DistillationState_Parse(
    const std::string& name, ReadingListLocal_DistillationState* value);
// ===================================================================

class ReadingListLocal :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:reading_list.ReadingListLocal) */ {
 public:
  ReadingListLocal();
  virtual ~ReadingListLocal();

  ReadingListLocal(const ReadingListLocal& from);
  ReadingListLocal(ReadingListLocal&& from) noexcept
    : ReadingListLocal() {
    *this = ::std::move(from);
  }

  inline ReadingListLocal& operator=(const ReadingListLocal& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadingListLocal& operator=(ReadingListLocal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ReadingListLocal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadingListLocal* internal_default_instance() {
    return reinterpret_cast<const ReadingListLocal*>(
               &_ReadingListLocal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReadingListLocal& a, ReadingListLocal& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadingListLocal* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadingListLocal* New() const final {
    return CreateMaybeMessage<ReadingListLocal>(nullptr);
  }

  ReadingListLocal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadingListLocal>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ReadingListLocal& from);
  void MergeFrom(const ReadingListLocal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadingListLocal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reading_list.ReadingListLocal";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ReadingListLocal_ReadingListEntryStatus ReadingListEntryStatus;
  static constexpr ReadingListEntryStatus UNREAD =
    ReadingListLocal_ReadingListEntryStatus_UNREAD;
  static constexpr ReadingListEntryStatus READ =
    ReadingListLocal_ReadingListEntryStatus_READ;
  static constexpr ReadingListEntryStatus UNSEEN =
    ReadingListLocal_ReadingListEntryStatus_UNSEEN;
  static inline bool ReadingListEntryStatus_IsValid(int value) {
    return ReadingListLocal_ReadingListEntryStatus_IsValid(value);
  }
  static constexpr ReadingListEntryStatus ReadingListEntryStatus_MIN =
    ReadingListLocal_ReadingListEntryStatus_ReadingListEntryStatus_MIN;
  static constexpr ReadingListEntryStatus ReadingListEntryStatus_MAX =
    ReadingListLocal_ReadingListEntryStatus_ReadingListEntryStatus_MAX;
  static constexpr int ReadingListEntryStatus_ARRAYSIZE =
    ReadingListLocal_ReadingListEntryStatus_ReadingListEntryStatus_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ReadingListEntryStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReadingListEntryStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReadingListEntryStatus_Name.");
    return ReadingListLocal_ReadingListEntryStatus_Name(enum_t_value);
  }
  static inline bool ReadingListEntryStatus_Parse(const std::string& name,
      ReadingListEntryStatus* value) {
    return ReadingListLocal_ReadingListEntryStatus_Parse(name, value);
  }

  typedef ReadingListLocal_DistillationState DistillationState;
  static constexpr DistillationState WAITING =
    ReadingListLocal_DistillationState_WAITING;
  static constexpr DistillationState PROCESSING =
    ReadingListLocal_DistillationState_PROCESSING;
  static constexpr DistillationState PROCESSED =
    ReadingListLocal_DistillationState_PROCESSED;
  static constexpr DistillationState WILL_RETRY =
    ReadingListLocal_DistillationState_WILL_RETRY;
  static constexpr DistillationState DISTILLATION_ERROR =
    ReadingListLocal_DistillationState_DISTILLATION_ERROR;
  static inline bool DistillationState_IsValid(int value) {
    return ReadingListLocal_DistillationState_IsValid(value);
  }
  static constexpr DistillationState DistillationState_MIN =
    ReadingListLocal_DistillationState_DistillationState_MIN;
  static constexpr DistillationState DistillationState_MAX =
    ReadingListLocal_DistillationState_DistillationState_MAX;
  static constexpr int DistillationState_ARRAYSIZE =
    ReadingListLocal_DistillationState_DistillationState_ARRAYSIZE;
  template<typename T>
  static inline const std::string& DistillationState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DistillationState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DistillationState_Name.");
    return ReadingListLocal_DistillationState_Name(enum_t_value);
  }
  static inline bool DistillationState_Parse(const std::string& name,
      DistillationState* value) {
    return ReadingListLocal_DistillationState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEntryIdFieldNumber = 1,
    kTitleFieldNumber = 2,
    kUrlFieldNumber = 3,
    kDistilledPathFieldNumber = 8,
    kBackoffFieldNumber = 10,
    kDistilledUrlFieldNumber = 13,
    kContentSuggestionsExtraFieldNumber = 16,
    kCreationTimeUsFieldNumber = 4,
    kUpdateTimeUsFieldNumber = 5,
    kStatusFieldNumber = 6,
    kDistillationStateFieldNumber = 7,
    kFailedDownloadCounterFieldNumber = 9,
    kFirstReadTimeUsFieldNumber = 11,
    kUpdateTitleTimeUsFieldNumber = 12,
    kDistillationTimeUsFieldNumber = 14,
    kDistillationSizeFieldNumber = 15,
  };
  // optional string entry_id = 1;
  bool has_entry_id() const;
  void clear_entry_id();
  const std::string& entry_id() const;
  void set_entry_id(const std::string& value);
  void set_entry_id(std::string&& value);
  void set_entry_id(const char* value);
  void set_entry_id(const char* value, size_t size);
  std::string* mutable_entry_id();
  std::string* release_entry_id();
  void set_allocated_entry_id(std::string* entry_id);

  // optional string title = 2;
  bool has_title() const;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);

  // optional string url = 3;
  bool has_url() const;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // optional string distilled_path = 8;
  bool has_distilled_path() const;
  void clear_distilled_path();
  const std::string& distilled_path() const;
  void set_distilled_path(const std::string& value);
  void set_distilled_path(std::string&& value);
  void set_distilled_path(const char* value);
  void set_distilled_path(const char* value, size_t size);
  std::string* mutable_distilled_path();
  std::string* release_distilled_path();
  void set_allocated_distilled_path(std::string* distilled_path);

  // optional string backoff = 10;
  bool has_backoff() const;
  void clear_backoff();
  const std::string& backoff() const;
  void set_backoff(const std::string& value);
  void set_backoff(std::string&& value);
  void set_backoff(const char* value);
  void set_backoff(const char* value, size_t size);
  std::string* mutable_backoff();
  std::string* release_backoff();
  void set_allocated_backoff(std::string* backoff);

  // optional string distilled_url = 13;
  bool has_distilled_url() const;
  void clear_distilled_url();
  const std::string& distilled_url() const;
  void set_distilled_url(const std::string& value);
  void set_distilled_url(std::string&& value);
  void set_distilled_url(const char* value);
  void set_distilled_url(const char* value, size_t size);
  std::string* mutable_distilled_url();
  std::string* release_distilled_url();
  void set_allocated_distilled_url(std::string* distilled_url);

  // optional .reading_list.ReadingListContentSuggestionsExtra content_suggestions_extra = 16;
  bool has_content_suggestions_extra() const;
  void clear_content_suggestions_extra();
  const ::reading_list::ReadingListContentSuggestionsExtra& content_suggestions_extra() const;
  ::reading_list::ReadingListContentSuggestionsExtra* release_content_suggestions_extra();
  ::reading_list::ReadingListContentSuggestionsExtra* mutable_content_suggestions_extra();
  void set_allocated_content_suggestions_extra(::reading_list::ReadingListContentSuggestionsExtra* content_suggestions_extra);

  // optional int64 creation_time_us = 4;
  bool has_creation_time_us() const;
  void clear_creation_time_us();
  ::PROTOBUF_NAMESPACE_ID::int64 creation_time_us() const;
  void set_creation_time_us(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 update_time_us = 5;
  bool has_update_time_us() const;
  void clear_update_time_us();
  ::PROTOBUF_NAMESPACE_ID::int64 update_time_us() const;
  void set_update_time_us(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional .reading_list.ReadingListLocal.ReadingListEntryStatus status = 6;
  bool has_status() const;
  void clear_status();
  ::reading_list::ReadingListLocal_ReadingListEntryStatus status() const;
  void set_status(::reading_list::ReadingListLocal_ReadingListEntryStatus value);

  // optional .reading_list.ReadingListLocal.DistillationState distillation_state = 7;
  bool has_distillation_state() const;
  void clear_distillation_state();
  ::reading_list::ReadingListLocal_DistillationState distillation_state() const;
  void set_distillation_state(::reading_list::ReadingListLocal_DistillationState value);

  // optional int64 failed_download_counter = 9;
  bool has_failed_download_counter() const;
  void clear_failed_download_counter();
  ::PROTOBUF_NAMESPACE_ID::int64 failed_download_counter() const;
  void set_failed_download_counter(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 first_read_time_us = 11;
  bool has_first_read_time_us() const;
  void clear_first_read_time_us();
  ::PROTOBUF_NAMESPACE_ID::int64 first_read_time_us() const;
  void set_first_read_time_us(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 update_title_time_us = 12;
  bool has_update_title_time_us() const;
  void clear_update_title_time_us();
  ::PROTOBUF_NAMESPACE_ID::int64 update_title_time_us() const;
  void set_update_title_time_us(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 distillation_time_us = 14;
  bool has_distillation_time_us() const;
  void clear_distillation_time_us();
  ::PROTOBUF_NAMESPACE_ID::int64 distillation_time_us() const;
  void set_distillation_time_us(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int64 distillation_size = 15;
  bool has_distillation_size() const;
  void clear_distillation_size();
  ::PROTOBUF_NAMESPACE_ID::int64 distillation_size() const;
  void set_distillation_size(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:reading_list.ReadingListLocal)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entry_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr distilled_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr backoff_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr distilled_url_;
  ::reading_list::ReadingListContentSuggestionsExtra* content_suggestions_extra_;
  ::PROTOBUF_NAMESPACE_ID::int64 creation_time_us_;
  ::PROTOBUF_NAMESPACE_ID::int64 update_time_us_;
  int status_;
  int distillation_state_;
  ::PROTOBUF_NAMESPACE_ID::int64 failed_download_counter_;
  ::PROTOBUF_NAMESPACE_ID::int64 first_read_time_us_;
  ::PROTOBUF_NAMESPACE_ID::int64 update_title_time_us_;
  ::PROTOBUF_NAMESPACE_ID::int64 distillation_time_us_;
  ::PROTOBUF_NAMESPACE_ID::int64 distillation_size_;
  friend struct ::TableStruct_reading_5flist_2eproto;
};
// -------------------------------------------------------------------

class ReadingListContentSuggestionsExtra :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:reading_list.ReadingListContentSuggestionsExtra) */ {
 public:
  ReadingListContentSuggestionsExtra();
  virtual ~ReadingListContentSuggestionsExtra();

  ReadingListContentSuggestionsExtra(const ReadingListContentSuggestionsExtra& from);
  ReadingListContentSuggestionsExtra(ReadingListContentSuggestionsExtra&& from) noexcept
    : ReadingListContentSuggestionsExtra() {
    *this = ::std::move(from);
  }

  inline ReadingListContentSuggestionsExtra& operator=(const ReadingListContentSuggestionsExtra& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadingListContentSuggestionsExtra& operator=(ReadingListContentSuggestionsExtra&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ReadingListContentSuggestionsExtra& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadingListContentSuggestionsExtra* internal_default_instance() {
    return reinterpret_cast<const ReadingListContentSuggestionsExtra*>(
               &_ReadingListContentSuggestionsExtra_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReadingListContentSuggestionsExtra& a, ReadingListContentSuggestionsExtra& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadingListContentSuggestionsExtra* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadingListContentSuggestionsExtra* New() const final {
    return CreateMaybeMessage<ReadingListContentSuggestionsExtra>(nullptr);
  }

  ReadingListContentSuggestionsExtra* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadingListContentSuggestionsExtra>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ReadingListContentSuggestionsExtra& from);
  void MergeFrom(const ReadingListContentSuggestionsExtra& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadingListContentSuggestionsExtra* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reading_list.ReadingListContentSuggestionsExtra";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDismissedFieldNumber = 1,
  };
  // optional bool dismissed = 1;
  bool has_dismissed() const;
  void clear_dismissed();
  bool dismissed() const;
  void set_dismissed(bool value);

  // @@protoc_insertion_point(class_scope:reading_list.ReadingListContentSuggestionsExtra)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool dismissed_;
  friend struct ::TableStruct_reading_5flist_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReadingListLocal

// optional string entry_id = 1;
inline bool ReadingListLocal::has_entry_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReadingListLocal::clear_entry_id() {
  entry_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReadingListLocal::entry_id() const {
  // @@protoc_insertion_point(field_get:reading_list.ReadingListLocal.entry_id)
  return entry_id_.GetNoArena();
}
inline void ReadingListLocal::set_entry_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  entry_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:reading_list.ReadingListLocal.entry_id)
}
inline void ReadingListLocal::set_entry_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  entry_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:reading_list.ReadingListLocal.entry_id)
}
inline void ReadingListLocal::set_entry_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  entry_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:reading_list.ReadingListLocal.entry_id)
}
inline void ReadingListLocal::set_entry_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  entry_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:reading_list.ReadingListLocal.entry_id)
}
inline std::string* ReadingListLocal::mutable_entry_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:reading_list.ReadingListLocal.entry_id)
  return entry_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadingListLocal::release_entry_id() {
  // @@protoc_insertion_point(field_release:reading_list.ReadingListLocal.entry_id)
  if (!has_entry_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return entry_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadingListLocal::set_allocated_entry_id(std::string* entry_id) {
  if (entry_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  entry_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entry_id);
  // @@protoc_insertion_point(field_set_allocated:reading_list.ReadingListLocal.entry_id)
}

// optional string title = 2;
inline bool ReadingListLocal::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReadingListLocal::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ReadingListLocal::title() const {
  // @@protoc_insertion_point(field_get:reading_list.ReadingListLocal.title)
  return title_.GetNoArena();
}
inline void ReadingListLocal::set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:reading_list.ReadingListLocal.title)
}
inline void ReadingListLocal::set_title(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:reading_list.ReadingListLocal.title)
}
inline void ReadingListLocal::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:reading_list.ReadingListLocal.title)
}
inline void ReadingListLocal::set_title(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:reading_list.ReadingListLocal.title)
}
inline std::string* ReadingListLocal::mutable_title() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:reading_list.ReadingListLocal.title)
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadingListLocal::release_title() {
  // @@protoc_insertion_point(field_release:reading_list.ReadingListLocal.title)
  if (!has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return title_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadingListLocal::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:reading_list.ReadingListLocal.title)
}

// optional string url = 3;
inline bool ReadingListLocal::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReadingListLocal::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ReadingListLocal::url() const {
  // @@protoc_insertion_point(field_get:reading_list.ReadingListLocal.url)
  return url_.GetNoArena();
}
inline void ReadingListLocal::set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:reading_list.ReadingListLocal.url)
}
inline void ReadingListLocal::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:reading_list.ReadingListLocal.url)
}
inline void ReadingListLocal::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:reading_list.ReadingListLocal.url)
}
inline void ReadingListLocal::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:reading_list.ReadingListLocal.url)
}
inline std::string* ReadingListLocal::mutable_url() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:reading_list.ReadingListLocal.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadingListLocal::release_url() {
  // @@protoc_insertion_point(field_release:reading_list.ReadingListLocal.url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadingListLocal::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:reading_list.ReadingListLocal.url)
}

// optional int64 creation_time_us = 4;
inline bool ReadingListLocal::has_creation_time_us() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReadingListLocal::clear_creation_time_us() {
  creation_time_us_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadingListLocal::creation_time_us() const {
  // @@protoc_insertion_point(field_get:reading_list.ReadingListLocal.creation_time_us)
  return creation_time_us_;
}
inline void ReadingListLocal::set_creation_time_us(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000080u;
  creation_time_us_ = value;
  // @@protoc_insertion_point(field_set:reading_list.ReadingListLocal.creation_time_us)
}

// optional int64 update_time_us = 5;
inline bool ReadingListLocal::has_update_time_us() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ReadingListLocal::clear_update_time_us() {
  update_time_us_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadingListLocal::update_time_us() const {
  // @@protoc_insertion_point(field_get:reading_list.ReadingListLocal.update_time_us)
  return update_time_us_;
}
inline void ReadingListLocal::set_update_time_us(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  update_time_us_ = value;
  // @@protoc_insertion_point(field_set:reading_list.ReadingListLocal.update_time_us)
}

// optional int64 first_read_time_us = 11;
inline bool ReadingListLocal::has_first_read_time_us() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ReadingListLocal::clear_first_read_time_us() {
  first_read_time_us_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadingListLocal::first_read_time_us() const {
  // @@protoc_insertion_point(field_get:reading_list.ReadingListLocal.first_read_time_us)
  return first_read_time_us_;
}
inline void ReadingListLocal::set_first_read_time_us(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00001000u;
  first_read_time_us_ = value;
  // @@protoc_insertion_point(field_set:reading_list.ReadingListLocal.first_read_time_us)
}

// optional int64 update_title_time_us = 12;
inline bool ReadingListLocal::has_update_title_time_us() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ReadingListLocal::clear_update_title_time_us() {
  update_title_time_us_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadingListLocal::update_title_time_us() const {
  // @@protoc_insertion_point(field_get:reading_list.ReadingListLocal.update_title_time_us)
  return update_title_time_us_;
}
inline void ReadingListLocal::set_update_title_time_us(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00002000u;
  update_title_time_us_ = value;
  // @@protoc_insertion_point(field_set:reading_list.ReadingListLocal.update_title_time_us)
}

// optional .reading_list.ReadingListLocal.ReadingListEntryStatus status = 6;
inline bool ReadingListLocal::has_status() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ReadingListLocal::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::reading_list::ReadingListLocal_ReadingListEntryStatus ReadingListLocal::status() const {
  // @@protoc_insertion_point(field_get:reading_list.ReadingListLocal.status)
  return static_cast< ::reading_list::ReadingListLocal_ReadingListEntryStatus >(status_);
}
inline void ReadingListLocal::set_status(::reading_list::ReadingListLocal_ReadingListEntryStatus value) {
  assert(::reading_list::ReadingListLocal_ReadingListEntryStatus_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  status_ = value;
  // @@protoc_insertion_point(field_set:reading_list.ReadingListLocal.status)
}

// optional .reading_list.ReadingListLocal.DistillationState distillation_state = 7;
inline bool ReadingListLocal::has_distillation_state() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ReadingListLocal::clear_distillation_state() {
  distillation_state_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::reading_list::ReadingListLocal_DistillationState ReadingListLocal::distillation_state() const {
  // @@protoc_insertion_point(field_get:reading_list.ReadingListLocal.distillation_state)
  return static_cast< ::reading_list::ReadingListLocal_DistillationState >(distillation_state_);
}
inline void ReadingListLocal::set_distillation_state(::reading_list::ReadingListLocal_DistillationState value) {
  assert(::reading_list::ReadingListLocal_DistillationState_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  distillation_state_ = value;
  // @@protoc_insertion_point(field_set:reading_list.ReadingListLocal.distillation_state)
}

// optional string distilled_path = 8;
inline bool ReadingListLocal::has_distilled_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReadingListLocal::clear_distilled_path() {
  distilled_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ReadingListLocal::distilled_path() const {
  // @@protoc_insertion_point(field_get:reading_list.ReadingListLocal.distilled_path)
  return distilled_path_.GetNoArena();
}
inline void ReadingListLocal::set_distilled_path(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  distilled_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:reading_list.ReadingListLocal.distilled_path)
}
inline void ReadingListLocal::set_distilled_path(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  distilled_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:reading_list.ReadingListLocal.distilled_path)
}
inline void ReadingListLocal::set_distilled_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  distilled_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:reading_list.ReadingListLocal.distilled_path)
}
inline void ReadingListLocal::set_distilled_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  distilled_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:reading_list.ReadingListLocal.distilled_path)
}
inline std::string* ReadingListLocal::mutable_distilled_path() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:reading_list.ReadingListLocal.distilled_path)
  return distilled_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadingListLocal::release_distilled_path() {
  // @@protoc_insertion_point(field_release:reading_list.ReadingListLocal.distilled_path)
  if (!has_distilled_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return distilled_path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadingListLocal::set_allocated_distilled_path(std::string* distilled_path) {
  if (distilled_path != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  distilled_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), distilled_path);
  // @@protoc_insertion_point(field_set_allocated:reading_list.ReadingListLocal.distilled_path)
}

// optional string distilled_url = 13;
inline bool ReadingListLocal::has_distilled_url() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReadingListLocal::clear_distilled_url() {
  distilled_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& ReadingListLocal::distilled_url() const {
  // @@protoc_insertion_point(field_get:reading_list.ReadingListLocal.distilled_url)
  return distilled_url_.GetNoArena();
}
inline void ReadingListLocal::set_distilled_url(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  distilled_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:reading_list.ReadingListLocal.distilled_url)
}
inline void ReadingListLocal::set_distilled_url(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  distilled_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:reading_list.ReadingListLocal.distilled_url)
}
inline void ReadingListLocal::set_distilled_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  distilled_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:reading_list.ReadingListLocal.distilled_url)
}
inline void ReadingListLocal::set_distilled_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000020u;
  distilled_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:reading_list.ReadingListLocal.distilled_url)
}
inline std::string* ReadingListLocal::mutable_distilled_url() {
  _has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_mutable:reading_list.ReadingListLocal.distilled_url)
  return distilled_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadingListLocal::release_distilled_url() {
  // @@protoc_insertion_point(field_release:reading_list.ReadingListLocal.distilled_url)
  if (!has_distilled_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return distilled_url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadingListLocal::set_allocated_distilled_url(std::string* distilled_url) {
  if (distilled_url != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  distilled_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), distilled_url);
  // @@protoc_insertion_point(field_set_allocated:reading_list.ReadingListLocal.distilled_url)
}

// optional int64 failed_download_counter = 9;
inline bool ReadingListLocal::has_failed_download_counter() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ReadingListLocal::clear_failed_download_counter() {
  failed_download_counter_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadingListLocal::failed_download_counter() const {
  // @@protoc_insertion_point(field_get:reading_list.ReadingListLocal.failed_download_counter)
  return failed_download_counter_;
}
inline void ReadingListLocal::set_failed_download_counter(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000800u;
  failed_download_counter_ = value;
  // @@protoc_insertion_point(field_set:reading_list.ReadingListLocal.failed_download_counter)
}

// optional string backoff = 10;
inline bool ReadingListLocal::has_backoff() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReadingListLocal::clear_backoff() {
  backoff_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ReadingListLocal::backoff() const {
  // @@protoc_insertion_point(field_get:reading_list.ReadingListLocal.backoff)
  return backoff_.GetNoArena();
}
inline void ReadingListLocal::set_backoff(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  backoff_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:reading_list.ReadingListLocal.backoff)
}
inline void ReadingListLocal::set_backoff(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  backoff_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:reading_list.ReadingListLocal.backoff)
}
inline void ReadingListLocal::set_backoff(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  backoff_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:reading_list.ReadingListLocal.backoff)
}
inline void ReadingListLocal::set_backoff(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  backoff_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:reading_list.ReadingListLocal.backoff)
}
inline std::string* ReadingListLocal::mutable_backoff() {
  _has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_mutable:reading_list.ReadingListLocal.backoff)
  return backoff_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadingListLocal::release_backoff() {
  // @@protoc_insertion_point(field_release:reading_list.ReadingListLocal.backoff)
  if (!has_backoff()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return backoff_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadingListLocal::set_allocated_backoff(std::string* backoff) {
  if (backoff != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  backoff_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), backoff);
  // @@protoc_insertion_point(field_set_allocated:reading_list.ReadingListLocal.backoff)
}

// optional int64 distillation_time_us = 14;
inline bool ReadingListLocal::has_distillation_time_us() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ReadingListLocal::clear_distillation_time_us() {
  distillation_time_us_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadingListLocal::distillation_time_us() const {
  // @@protoc_insertion_point(field_get:reading_list.ReadingListLocal.distillation_time_us)
  return distillation_time_us_;
}
inline void ReadingListLocal::set_distillation_time_us(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00004000u;
  distillation_time_us_ = value;
  // @@protoc_insertion_point(field_set:reading_list.ReadingListLocal.distillation_time_us)
}

// optional int64 distillation_size = 15;
inline bool ReadingListLocal::has_distillation_size() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ReadingListLocal::clear_distillation_size() {
  distillation_size_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadingListLocal::distillation_size() const {
  // @@protoc_insertion_point(field_get:reading_list.ReadingListLocal.distillation_size)
  return distillation_size_;
}
inline void ReadingListLocal::set_distillation_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00008000u;
  distillation_size_ = value;
  // @@protoc_insertion_point(field_set:reading_list.ReadingListLocal.distillation_size)
}

// optional .reading_list.ReadingListContentSuggestionsExtra content_suggestions_extra = 16;
inline bool ReadingListLocal::has_content_suggestions_extra() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReadingListLocal::clear_content_suggestions_extra() {
  if (content_suggestions_extra_ != nullptr) content_suggestions_extra_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::reading_list::ReadingListContentSuggestionsExtra& ReadingListLocal::content_suggestions_extra() const {
  const ::reading_list::ReadingListContentSuggestionsExtra* p = content_suggestions_extra_;
  // @@protoc_insertion_point(field_get:reading_list.ReadingListLocal.content_suggestions_extra)
  return p != nullptr ? *p : *reinterpret_cast<const ::reading_list::ReadingListContentSuggestionsExtra*>(
      &::reading_list::_ReadingListContentSuggestionsExtra_default_instance_);
}
inline ::reading_list::ReadingListContentSuggestionsExtra* ReadingListLocal::release_content_suggestions_extra() {
  // @@protoc_insertion_point(field_release:reading_list.ReadingListLocal.content_suggestions_extra)
  _has_bits_[0] &= ~0x00000040u;
  ::reading_list::ReadingListContentSuggestionsExtra* temp = content_suggestions_extra_;
  content_suggestions_extra_ = nullptr;
  return temp;
}
inline ::reading_list::ReadingListContentSuggestionsExtra* ReadingListLocal::mutable_content_suggestions_extra() {
  _has_bits_[0] |= 0x00000040u;
  if (content_suggestions_extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::reading_list::ReadingListContentSuggestionsExtra>(GetArenaNoVirtual());
    content_suggestions_extra_ = p;
  }
  // @@protoc_insertion_point(field_mutable:reading_list.ReadingListLocal.content_suggestions_extra)
  return content_suggestions_extra_;
}
inline void ReadingListLocal::set_allocated_content_suggestions_extra(::reading_list::ReadingListContentSuggestionsExtra* content_suggestions_extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete content_suggestions_extra_;
  }
  if (content_suggestions_extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      content_suggestions_extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, content_suggestions_extra, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  content_suggestions_extra_ = content_suggestions_extra;
  // @@protoc_insertion_point(field_set_allocated:reading_list.ReadingListLocal.content_suggestions_extra)
}

// -------------------------------------------------------------------

// ReadingListContentSuggestionsExtra

// optional bool dismissed = 1;
inline bool ReadingListContentSuggestionsExtra::has_dismissed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReadingListContentSuggestionsExtra::clear_dismissed() {
  dismissed_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ReadingListContentSuggestionsExtra::dismissed() const {
  // @@protoc_insertion_point(field_get:reading_list.ReadingListContentSuggestionsExtra.dismissed)
  return dismissed_;
}
inline void ReadingListContentSuggestionsExtra::set_dismissed(bool value) {
  _has_bits_[0] |= 0x00000001u;
  dismissed_ = value;
  // @@protoc_insertion_point(field_set:reading_list.ReadingListContentSuggestionsExtra.dismissed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace reading_list

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::reading_list::ReadingListLocal_ReadingListEntryStatus> : ::std::true_type {};
template <> struct is_proto_enum< ::reading_list::ReadingListLocal_DistillationState> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_reading_5flist_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reading_list.proto

#include "reading_list.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_reading_5flist_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadingListContentSuggestionsExtra_reading_5flist_2eproto;
namespace reading_list {
class ReadingListLocalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadingListLocal> _instance;
} _ReadingListLocal_default_instance_;
class ReadingListContentSuggestionsExtraDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadingListContentSuggestionsExtra> _instance;
} _ReadingListContentSuggestionsExtra_default_instance_;
}  // namespace reading_list
static void InitDefaultsscc_info_ReadingListContentSuggestionsExtra_reading_5flist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::reading_list::_ReadingListContentSuggestionsExtra_default_instance_;
    new (ptr) ::reading_list::ReadingListContentSuggestionsExtra();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::reading_list::ReadingListContentSuggestionsExtra::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadingListContentSuggestionsExtra_reading_5flist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ReadingListContentSuggestionsExtra_reading_5flist_2eproto}, {}};

static void InitDefaultsscc_info_ReadingListLocal_reading_5flist_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::reading_list::_ReadingListLocal_default_instance_;
    new (ptr) ::reading_list::ReadingListLocal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::reading_list::ReadingListLocal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadingListLocal_reading_5flist_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ReadingListLocal_reading_5flist_2eproto}, {
      &scc_info_ReadingListContentSuggestionsExtra_reading_5flist_2eproto.base,}};

namespace reading_list {
bool ReadingListLocal_ReadingListEntryStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ReadingListLocal_ReadingListEntryStatus_strings[3] = {};

static const char ReadingListLocal_ReadingListEntryStatus_names[] =
  "READ"
  "UNREAD"
  "UNSEEN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ReadingListLocal_ReadingListEntryStatus_entries[] = {
  { {ReadingListLocal_ReadingListEntryStatus_names + 0, 4}, 1 },
  { {ReadingListLocal_ReadingListEntryStatus_names + 4, 6}, 0 },
  { {ReadingListLocal_ReadingListEntryStatus_names + 10, 6}, 2 },
};

static const int ReadingListLocal_ReadingListEntryStatus_entries_by_number[] = {
  1, // 0 -> UNREAD
  0, // 1 -> READ
  2, // 2 -> UNSEEN
};

const std::string& ReadingListLocal_ReadingListEntryStatus_Name(
    ReadingListLocal_ReadingListEntryStatus value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ReadingListLocal_ReadingListEntryStatus_entries,
          ReadingListLocal_ReadingListEntryStatus_entries_by_number,
          3, ReadingListLocal_ReadingListEntryStatus_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ReadingListLocal_ReadingListEntryStatus_entries,
      ReadingListLocal_ReadingListEntryStatus_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ReadingListLocal_ReadingListEntryStatus_strings[idx].get();
}
bool ReadingListLocal_ReadingListEntryStatus_Parse(
    const std::string& name, ReadingListLocal_ReadingListEntryStatus* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ReadingListLocal_ReadingListEntryStatus_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ReadingListLocal_ReadingListEntryStatus>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReadingListLocal_ReadingListEntryStatus ReadingListLocal::UNREAD;
constexpr ReadingListLocal_ReadingListEntryStatus ReadingListLocal::READ;
constexpr ReadingListLocal_ReadingListEntryStatus ReadingListLocal::UNSEEN;
constexpr ReadingListLocal_ReadingListEntryStatus ReadingListLocal::ReadingListEntryStatus_MIN;
constexpr ReadingListLocal_ReadingListEntryStatus ReadingListLocal::ReadingListEntryStatus_MAX;
constexpr int ReadingListLocal::ReadingListEntryStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ReadingListLocal_DistillationState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ReadingListLocal_DistillationState_strings[5] = {};

static const char ReadingListLocal_DistillationState_names[] =
  "DISTILLATION_ERROR"
  "PROCESSED"
  "PROCESSING"
  "WAITING"
  "WILL_RETRY";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ReadingListLocal_DistillationState_entries[] = {
  { {ReadingListLocal_DistillationState_names + 0, 18}, 4 },
  { {ReadingListLocal_DistillationState_names + 18, 9}, 2 },
  { {ReadingListLocal_DistillationState_names + 27, 10}, 1 },
  { {ReadingListLocal_DistillationState_names + 37, 7}, 0 },
  { {ReadingListLocal_DistillationState_names + 44, 10}, 3 },
};

static const int ReadingListLocal_DistillationState_entries_by_number[] = {
  3, // 0 -> WAITING
  2, // 1 -> PROCESSING
  1, // 2 -> PROCESSED
  4, // 3 -> WILL_RETRY
  0, // 4 -> DISTILLATION_ERROR
};

const std::string& ReadingListLocal_DistillationState_Name(
    ReadingListLocal_DistillationState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ReadingListLocal_DistillationState_entries,
          ReadingListLocal_DistillationState_entries_by_number,
          5, ReadingListLocal_DistillationState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ReadingListLocal_DistillationState_entries,
      ReadingListLocal_DistillationState_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ReadingListLocal_DistillationState_strings[idx].get();
}
bool ReadingListLocal_DistillationState_Parse(
    const std::string& name, ReadingListLocal_DistillationState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ReadingListLocal_DistillationState_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<ReadingListLocal_DistillationState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReadingListLocal_DistillationState ReadingListLocal::WAITING;
constexpr ReadingListLocal_DistillationState ReadingListLocal::PROCESSING;
constexpr ReadingListLocal_DistillationState ReadingListLocal::PROCESSED;
constexpr ReadingListLocal_DistillationState ReadingListLocal::WILL_RETRY;
constexpr ReadingListLocal_DistillationState ReadingListLocal::DISTILLATION_ERROR;
constexpr ReadingListLocal_DistillationState ReadingListLocal::DistillationState_MIN;
constexpr ReadingListLocal_DistillationState ReadingListLocal::DistillationState_MAX;
constexpr int ReadingListLocal::DistillationState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ReadingListLocal::InitAsDefaultInstance() {
  ::reading_list::_ReadingListLocal_default_instance_._instance.get_mutable()->content_suggestions_extra_ = const_cast< ::reading_list::ReadingListContentSuggestionsExtra*>(
      ::reading_list::ReadingListContentSuggestionsExtra::internal_default_instance());
}
class ReadingListLocal::_Internal {
 public:
  using HasBits = decltype(std::declval<ReadingListLocal>()._has_bits_);
  static void set_has_entry_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_creation_time_us(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_update_time_us(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_first_read_time_us(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_update_title_time_us(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_distillation_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_distilled_path(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_distilled_url(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_failed_download_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_backoff(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_distillation_time_us(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_distillation_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::reading_list::ReadingListContentSuggestionsExtra& content_suggestions_extra(const ReadingListLocal* msg);
  static void set_has_content_suggestions_extra(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::reading_list::ReadingListContentSuggestionsExtra&
ReadingListLocal::_Internal::content_suggestions_extra(const ReadingListLocal* msg) {
  return *msg->content_suggestions_extra_;
}
ReadingListLocal::ReadingListLocal()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:reading_list.ReadingListLocal)
}
ReadingListLocal::ReadingListLocal(const ReadingListLocal& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entry_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_entry_id()) {
    entry_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entry_id_);
  }
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  distilled_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_distilled_path()) {
    distilled_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.distilled_path_);
  }
  backoff_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_backoff()) {
    backoff_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.backoff_);
  }
  distilled_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_distilled_url()) {
    distilled_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.distilled_url_);
  }
  if (from.has_content_suggestions_extra()) {
    content_suggestions_extra_ = new ::reading_list::ReadingListContentSuggestionsExtra(*from.content_suggestions_extra_);
  } else {
    content_suggestions_extra_ = nullptr;
  }
  ::memcpy(&creation_time_us_, &from.creation_time_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&distillation_size_) -
    reinterpret_cast<char*>(&creation_time_us_)) + sizeof(distillation_size_));
  // @@protoc_insertion_point(copy_constructor:reading_list.ReadingListLocal)
}

void ReadingListLocal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadingListLocal_reading_5flist_2eproto.base);
  entry_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  distilled_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  backoff_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  distilled_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&content_suggestions_extra_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distillation_size_) -
      reinterpret_cast<char*>(&content_suggestions_extra_)) + sizeof(distillation_size_));
}

ReadingListLocal::~ReadingListLocal() {
  // @@protoc_insertion_point(destructor:reading_list.ReadingListLocal)
  SharedDtor();
}

void ReadingListLocal::SharedDtor() {
  entry_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  distilled_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  backoff_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  distilled_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete content_suggestions_extra_;
}

void ReadingListLocal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadingListLocal& ReadingListLocal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadingListLocal_reading_5flist_2eproto.base);
  return *internal_default_instance();
}


void ReadingListLocal::Clear() {
// @@protoc_insertion_point(message_clear_start:reading_list.ReadingListLocal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      entry_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      title_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      distilled_path_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      backoff_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      distilled_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(content_suggestions_extra_ != nullptr);
      content_suggestions_extra_->Clear();
    }
  }
  creation_time_us_ = PROTOBUF_LONGLONG(0);
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&update_time_us_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&distillation_size_) -
        reinterpret_cast<char*>(&update_time_us_)) + sizeof(distillation_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReadingListLocal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string entry_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_entry_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_title(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_url(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 creation_time_us = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_creation_time_us(&has_bits);
          creation_time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 update_time_us = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_update_time_us(&has_bits);
          update_time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .reading_list.ReadingListLocal.ReadingListEntryStatus status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::reading_list::ReadingListLocal_ReadingListEntryStatus_IsValid(val))) {
            set_status(static_cast<::reading_list::ReadingListLocal_ReadingListEntryStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .reading_list.ReadingListLocal.DistillationState distillation_state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::reading_list::ReadingListLocal_DistillationState_IsValid(val))) {
            set_distillation_state(static_cast<::reading_list::ReadingListLocal_DistillationState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string distilled_path = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_distilled_path(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 failed_download_counter = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_failed_download_counter(&has_bits);
          failed_download_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string backoff = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_backoff(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 first_read_time_us = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_first_read_time_us(&has_bits);
          first_read_time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 update_title_time_us = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_update_title_time_us(&has_bits);
          update_title_time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string distilled_url = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_distilled_url(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 distillation_time_us = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_distillation_time_us(&has_bits);
          distillation_time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 distillation_size = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_distillation_size(&has_bits);
          distillation_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .reading_list.ReadingListContentSuggestionsExtra content_suggestions_extra = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_content_suggestions_extra(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReadingListLocal::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:reading_list.ReadingListLocal)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string entry_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_entry_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 creation_time_us = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_creation_time_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &creation_time_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 update_time_us = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_update_time_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &update_time_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .reading_list.ReadingListLocal.ReadingListEntryStatus status = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::reading_list::ReadingListLocal_ReadingListEntryStatus_IsValid(value)) {
            set_status(static_cast< ::reading_list::ReadingListLocal_ReadingListEntryStatus >(value));
          } else {
            unknown_fields_stream.WriteVarint32(48u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .reading_list.ReadingListLocal.DistillationState distillation_state = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::reading_list::ReadingListLocal_DistillationState_IsValid(value)) {
            set_distillation_state(static_cast< ::reading_list::ReadingListLocal_DistillationState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(56u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string distilled_path = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_distilled_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 failed_download_counter = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_failed_download_counter(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &failed_download_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string backoff = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_backoff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 first_read_time_us = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_first_read_time_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &first_read_time_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 update_title_time_us = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          _Internal::set_has_update_title_time_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &update_title_time_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string distilled_url = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_distilled_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 distillation_time_us = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_distillation_time_us(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &distillation_time_us_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 distillation_size = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          _Internal::set_has_distillation_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &distillation_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .reading_list.ReadingListContentSuggestionsExtra content_suggestions_extra = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_content_suggestions_extra()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:reading_list.ReadingListLocal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:reading_list.ReadingListLocal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReadingListLocal::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:reading_list.ReadingListLocal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string entry_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->entry_id(), output);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->url(), output);
  }

  // optional int64 creation_time_us = 4;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->creation_time_us(), output);
  }

  // optional int64 update_time_us = 5;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->update_time_us(), output);
  }

  // optional .reading_list.ReadingListLocal.ReadingListEntryStatus status = 6;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->status(), output);
  }

  // optional .reading_list.ReadingListLocal.DistillationState distillation_state = 7;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->distillation_state(), output);
  }

  // optional string distilled_path = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->distilled_path(), output);
  }

  // optional int64 failed_download_counter = 9;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->failed_download_counter(), output);
  }

  // optional string backoff = 10;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->backoff(), output);
  }

  // optional int64 first_read_time_us = 11;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(11, this->first_read_time_us(), output);
  }

  // optional int64 update_title_time_us = 12;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(12, this->update_title_time_us(), output);
  }

  // optional string distilled_url = 13;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->distilled_url(), output);
  }

  // optional int64 distillation_time_us = 14;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(14, this->distillation_time_us(), output);
  }

  // optional int64 distillation_size = 15;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(15, this->distillation_size(), output);
  }

  // optional .reading_list.ReadingListContentSuggestionsExtra content_suggestions_extra = 16;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      16, _Internal::content_suggestions_extra(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:reading_list.ReadingListLocal)
}

size_t ReadingListLocal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reading_list.ReadingListLocal)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string entry_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->entry_id());
    }

    // optional string title = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string url = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string distilled_path = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->distilled_path());
    }

    // optional string backoff = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->backoff());
    }

    // optional string distilled_url = 13;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->distilled_url());
    }

    // optional .reading_list.ReadingListContentSuggestionsExtra content_suggestions_extra = 16;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *content_suggestions_extra_);
    }

    // optional int64 creation_time_us = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->creation_time_us());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int64 update_time_us = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->update_time_us());
    }

    // optional .reading_list.ReadingListLocal.ReadingListEntryStatus status = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .reading_list.ReadingListLocal.DistillationState distillation_state = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->distillation_state());
    }

    // optional int64 failed_download_counter = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->failed_download_counter());
    }

    // optional int64 first_read_time_us = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->first_read_time_us());
    }

    // optional int64 update_title_time_us = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->update_title_time_us());
    }

    // optional int64 distillation_time_us = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->distillation_time_us());
    }

    // optional int64 distillation_size = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->distillation_size());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadingListLocal::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ReadingListLocal*>(
      &from));
}

void ReadingListLocal::MergeFrom(const ReadingListLocal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reading_list.ReadingListLocal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      entry_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entry_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      title_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      distilled_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.distilled_path_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      backoff_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.backoff_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      distilled_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.distilled_url_);
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_content_suggestions_extra()->::reading_list::ReadingListContentSuggestionsExtra::MergeFrom(from.content_suggestions_extra());
    }
    if (cached_has_bits & 0x00000080u) {
      creation_time_us_ = from.creation_time_us_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      update_time_us_ = from.update_time_us_;
    }
    if (cached_has_bits & 0x00000200u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000400u) {
      distillation_state_ = from.distillation_state_;
    }
    if (cached_has_bits & 0x00000800u) {
      failed_download_counter_ = from.failed_download_counter_;
    }
    if (cached_has_bits & 0x00001000u) {
      first_read_time_us_ = from.first_read_time_us_;
    }
    if (cached_has_bits & 0x00002000u) {
      update_title_time_us_ = from.update_title_time_us_;
    }
    if (cached_has_bits & 0x00004000u) {
      distillation_time_us_ = from.distillation_time_us_;
    }
    if (cached_has_bits & 0x00008000u) {
      distillation_size_ = from.distillation_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReadingListLocal::CopyFrom(const ReadingListLocal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reading_list.ReadingListLocal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadingListLocal::IsInitialized() const {
  return true;
}

void ReadingListLocal::InternalSwap(ReadingListLocal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entry_id_.Swap(&other->entry_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  distilled_path_.Swap(&other->distilled_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  backoff_.Swap(&other->backoff_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  distilled_url_.Swap(&other->distilled_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(content_suggestions_extra_, other->content_suggestions_extra_);
  swap(creation_time_us_, other->creation_time_us_);
  swap(update_time_us_, other->update_time_us_);
  swap(status_, other->status_);
  swap(distillation_state_, other->distillation_state_);
  swap(failed_download_counter_, other->failed_download_counter_);
  swap(first_read_time_us_, other->first_read_time_us_);
  swap(update_title_time_us_, other->update_title_time_us_);
  swap(distillation_time_us_, other->distillation_time_us_);
  swap(distillation_size_, other->distillation_size_);
}

std::string ReadingListLocal::GetTypeName() const {
  return "reading_list.ReadingListLocal";
}


// ===================================================================

void ReadingListContentSuggestionsExtra::InitAsDefaultInstance() {
}
class ReadingListContentSuggestionsExtra::_Internal {
 public:
  using HasBits = decltype(std::declval<ReadingListContentSuggestionsExtra>()._has_bits_);
  static void set_has_dismissed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ReadingListContentSuggestionsExtra::ReadingListContentSuggestionsExtra()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:reading_list.ReadingListContentSuggestionsExtra)
}
ReadingListContentSuggestionsExtra::ReadingListContentSuggestionsExtra(const ReadingListContentSuggestionsExtra& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dismissed_ = from.dismissed_;
  // @@protoc_insertion_point(copy_constructor:reading_list.ReadingListContentSuggestionsExtra)
}

void ReadingListContentSuggestionsExtra::SharedCtor() {
  dismissed_ = false;
}

ReadingListContentSuggestionsExtra::~ReadingListContentSuggestionsExtra() {
  // @@protoc_insertion_point(destructor:reading_list.ReadingListContentSuggestionsExtra)
  SharedDtor();
}

void ReadingListContentSuggestionsExtra::SharedDtor() {
}

void ReadingListContentSuggestionsExtra::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadingListContentSuggestionsExtra& ReadingListContentSuggestionsExtra::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadingListContentSuggestionsExtra_reading_5flist_2eproto.base);
  return *internal_default_instance();
}


void ReadingListContentSuggestionsExtra::Clear() {
// @@protoc_insertion_point(message_clear_start:reading_list.ReadingListContentSuggestionsExtra)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dismissed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReadingListContentSuggestionsExtra::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool dismissed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dismissed(&has_bits);
          dismissed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReadingListContentSuggestionsExtra::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:reading_list.ReadingListContentSuggestionsExtra)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool dismissed = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_dismissed(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dismissed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:reading_list.ReadingListContentSuggestionsExtra)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:reading_list.ReadingListContentSuggestionsExtra)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReadingListContentSuggestionsExtra::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:reading_list.ReadingListContentSuggestionsExtra)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool dismissed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->dismissed(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:reading_list.ReadingListContentSuggestionsExtra)
}

size_t ReadingListContentSuggestionsExtra::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reading_list.ReadingListContentSuggestionsExtra)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool dismissed = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadingListContentSuggestionsExtra::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ReadingListContentSuggestionsExtra*>(
      &from));
}

void ReadingListContentSuggestionsExtra::MergeFrom(const ReadingListContentSuggestionsExtra& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reading_list.ReadingListContentSuggestionsExtra)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dismissed()) {
    set_dismissed(from.dismissed());
  }
}

void ReadingListContentSuggestionsExtra::CopyFrom(const ReadingListContentSuggestionsExtra& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reading_list.ReadingListContentSuggestionsExtra)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadingListContentSuggestionsExtra::IsInitialized() const {
  return true;
}

void ReadingListContentSuggestionsExtra::InternalSwap(ReadingListContentSuggestionsExtra* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dismissed_, other->dismissed_);
}

std::string ReadingListContentSuggestionsExtra::GetTypeName() const {
  return "reading_list.ReadingListContentSuggestionsExtra";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace reading_list
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::reading_list::ReadingListLocal* Arena::CreateMaybeMessage< ::reading_list::ReadingListLocal >(Arena* arena) {
  return Arena::CreateInternal< ::reading_list::ReadingListLocal >(arena);
}
template<> PROTOBUF_NOINLINE ::reading_list::ReadingListContentSuggestionsExtra* Arena::CreateMaybeMessage< ::reading_list::ReadingListContentSuggestionsExtra >(Arena* arena) {
  return Arena::CreateInternal< ::reading_list::ReadingListContentSuggestionsExtra >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// components/schema_org/common/metadata.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "components/schema_org/common/metadata.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "components/schema_org/common/metadata.mojom-params-data.h"
#include "components/schema_org/common/metadata.mojom-shared-message-ids.h"

#include "components/schema_org/common/metadata.mojom-import-headers.h"


#ifndef COMPONENTS_SCHEMA_ORG_COMMON_METADATA_MOJOM_JUMBO_H_
#define COMPONENTS_SCHEMA_ORG_COMMON_METADATA_MOJOM_JUMBO_H_
#endif
namespace schema_org {
namespace mojom {
Property::Property()
    : name(),
      values() {}

Property::Property(
    const std::string& name_in,
    ValuesPtr values_in)
    : name(std::move(name_in)),
      values(std::move(values_in)) {}

Property::~Property() = default;

bool Property::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
Entity::Entity()
    : type(),
      properties() {}

Entity::Entity(
    const std::string& type_in,
    std::vector<PropertyPtr> properties_in)
    : type(std::move(type_in)),
      properties(std::move(properties_in)) {}

Entity::~Entity() = default;

bool Entity::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
Values::Values() : tag_(Tag::BOOL_VALUES) {
  data_.bool_values = new std::vector<bool>;
}

Values::~Values() {
  DestroyActive();
}


void Values::set_bool_values(
    std::vector<bool> bool_values) {
  if (tag_ == Tag::BOOL_VALUES) {
    *(data_.bool_values) = std::move(bool_values);
  } else {
    DestroyActive();
    tag_ = Tag::BOOL_VALUES;
    data_.bool_values = new std::vector<bool>(
        std::move(bool_values));
  }
}
void Values::set_long_values(
    std::vector<int64_t> long_values) {
  if (tag_ == Tag::LONG_VALUES) {
    *(data_.long_values) = std::move(long_values);
  } else {
    DestroyActive();
    tag_ = Tag::LONG_VALUES;
    data_.long_values = new std::vector<int64_t>(
        std::move(long_values));
  }
}
void Values::set_string_values(
    std::vector<std::string> string_values) {
  if (tag_ == Tag::STRING_VALUES) {
    *(data_.string_values) = std::move(string_values);
  } else {
    DestroyActive();
    tag_ = Tag::STRING_VALUES;
    data_.string_values = new std::vector<std::string>(
        std::move(string_values));
  }
}
void Values::set_entity_values(
    std::vector<EntityPtr> entity_values) {
  if (tag_ == Tag::ENTITY_VALUES) {
    *(data_.entity_values) = std::move(entity_values);
  } else {
    DestroyActive();
    tag_ = Tag::ENTITY_VALUES;
    data_.entity_values = new std::vector<EntityPtr>(
        std::move(entity_values));
  }
}

void Values::DestroyActive() {
  switch (tag_) {

    case Tag::BOOL_VALUES:

      delete data_.bool_values;
      break;
    case Tag::LONG_VALUES:

      delete data_.long_values;
      break;
    case Tag::STRING_VALUES:

      delete data_.string_values;
      break;
    case Tag::ENTITY_VALUES:

      delete data_.entity_values;
      break;
  }
}

bool Values::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context, false);
}
}  // namespace mojom
}  // namespace schema_org

namespace mojo {


// static
bool StructTraits<::schema_org::mojom::Property::DataView, ::schema_org::mojom::PropertyPtr>::Read(
    ::schema_org::mojom::Property::DataView input,
    ::schema_org::mojom::PropertyPtr* output) {
  bool success = true;
  ::schema_org::mojom::PropertyPtr result(::schema_org::mojom::Property::New());
  
      if (success && !input.ReadName(&result->name))
        success = false;
      if (success && !input.ReadValues(&result->values))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::schema_org::mojom::Entity::DataView, ::schema_org::mojom::EntityPtr>::Read(
    ::schema_org::mojom::Entity::DataView input,
    ::schema_org::mojom::EntityPtr* output) {
  bool success = true;
  ::schema_org::mojom::EntityPtr result(::schema_org::mojom::Entity::New());
  
      if (success && !input.ReadType(&result->type))
        success = false;
      if (success && !input.ReadProperties(&result->properties))
        success = false;
  *output = std::move(result);
  return success;
}

// static
bool UnionTraits<::schema_org::mojom::Values::DataView, ::schema_org::mojom::ValuesPtr>::Read(
    ::schema_org::mojom::Values::DataView input,
    ::schema_org::mojom::ValuesPtr* output) {
  using UnionType = ::schema_org::mojom::Values;
  using Tag = UnionType::Tag;

  switch (input.tag()) {
    case Tag::BOOL_VALUES: {
      std::vector<bool> result_bool_values;
      if (!input.ReadBoolValues(&result_bool_values))
        return false;

      *output = UnionType::NewBoolValues(
          std::move(result_bool_values));
      break;
    }
    case Tag::LONG_VALUES: {
      std::vector<int64_t> result_long_values;
      if (!input.ReadLongValues(&result_long_values))
        return false;

      *output = UnionType::NewLongValues(
          std::move(result_long_values));
      break;
    }
    case Tag::STRING_VALUES: {
      std::vector<std::string> result_string_values;
      if (!input.ReadStringValues(&result_string_values))
        return false;

      *output = UnionType::NewStringValues(
          std::move(result_string_values));
      break;
    }
    case Tag::ENTITY_VALUES: {
      std::vector<::schema_org::mojom::EntityPtr> result_entity_values;
      if (!input.ReadEntityValues(&result_entity_values))
        return false;

      *output = UnionType::NewEntityValues(
          std::move(result_entity_values));
      break;
    }
    default:
      return false;
  }
  return true;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
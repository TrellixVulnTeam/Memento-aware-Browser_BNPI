// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: quantized_nn_classifier.proto

#include "quantized_nn_classifier.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_quantized_5fnn_5fclassifier_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuantizedNNLayer_quantized_5fnn_5fclassifier_2eproto;
namespace assist_ranker {
class QuantizedNNLayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuantizedNNLayer> _instance;
} _QuantizedNNLayer_default_instance_;
class QuantizedNNClassifierModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuantizedNNClassifierModel> _instance;
} _QuantizedNNClassifierModel_default_instance_;
}  // namespace assist_ranker
static void InitDefaultsscc_info_QuantizedNNClassifierModel_quantized_5fnn_5fclassifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::assist_ranker::_QuantizedNNClassifierModel_default_instance_;
    new (ptr) ::assist_ranker::QuantizedNNClassifierModel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::assist_ranker::QuantizedNNClassifierModel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QuantizedNNClassifierModel_quantized_5fnn_5fclassifier_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_QuantizedNNClassifierModel_quantized_5fnn_5fclassifier_2eproto}, {
      &scc_info_QuantizedNNLayer_quantized_5fnn_5fclassifier_2eproto.base,}};

static void InitDefaultsscc_info_QuantizedNNLayer_quantized_5fnn_5fclassifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::assist_ranker::_QuantizedNNLayer_default_instance_;
    new (ptr) ::assist_ranker::QuantizedNNLayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::assist_ranker::QuantizedNNLayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuantizedNNLayer_quantized_5fnn_5fclassifier_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_QuantizedNNLayer_quantized_5fnn_5fclassifier_2eproto}, {}};

namespace assist_ranker {

// ===================================================================

void QuantizedNNLayer::InitAsDefaultInstance() {
}
class QuantizedNNLayer::_Internal {
 public:
  using HasBits = decltype(std::declval<QuantizedNNLayer>()._has_bits_);
  static void set_has_biases(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_low(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_high(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

QuantizedNNLayer::QuantizedNNLayer()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:assist_ranker.QuantizedNNLayer)
}
QuantizedNNLayer::QuantizedNNLayer(const QuantizedNNLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      weights_(from.weights_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  biases_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_biases()) {
    biases_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.biases_);
  }
  ::memcpy(&low_, &from.low_,
    static_cast<size_t>(reinterpret_cast<char*>(&high_) -
    reinterpret_cast<char*>(&low_)) + sizeof(high_));
  // @@protoc_insertion_point(copy_constructor:assist_ranker.QuantizedNNLayer)
}

void QuantizedNNLayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QuantizedNNLayer_quantized_5fnn_5fclassifier_2eproto.base);
  biases_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&low_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&high_) -
      reinterpret_cast<char*>(&low_)) + sizeof(high_));
}

QuantizedNNLayer::~QuantizedNNLayer() {
  // @@protoc_insertion_point(destructor:assist_ranker.QuantizedNNLayer)
  SharedDtor();
}

void QuantizedNNLayer::SharedDtor() {
  biases_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QuantizedNNLayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuantizedNNLayer& QuantizedNNLayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuantizedNNLayer_quantized_5fnn_5fclassifier_2eproto.base);
  return *internal_default_instance();
}


void QuantizedNNLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.QuantizedNNLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weights_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    biases_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&low_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&high_) -
        reinterpret_cast<char*>(&low_)) + sizeof(high_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QuantizedNNLayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes weights = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_weights(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional bytes biases = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_biases(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float low = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_low(&has_bits);
          low_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float high = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_high(&has_bits);
          high_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QuantizedNNLayer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:assist_ranker.QuantizedNNLayer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes weights = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_weights()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes biases = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_biases()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float low = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_low(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &low_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float high = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          _Internal::set_has_high(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &high_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:assist_ranker.QuantizedNNLayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:assist_ranker.QuantizedNNLayer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QuantizedNNLayer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:assist_ranker.QuantizedNNLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes weights = 1;
  for (int i = 0, n = this->weights_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      1, this->weights(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes biases = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->biases(), output);
  }

  // optional float low = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->low(), output);
  }

  // optional float high = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->high(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:assist_ranker.QuantizedNNLayer)
}

size_t QuantizedNNLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.QuantizedNNLayer)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes weights = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->weights_size());
  for (int i = 0, n = this->weights_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->weights(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes biases = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->biases());
    }

    // optional float low = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float high = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuantizedNNLayer::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const QuantizedNNLayer*>(
      &from));
}

void QuantizedNNLayer::MergeFrom(const QuantizedNNLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.QuantizedNNLayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weights_.MergeFrom(from.weights_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      biases_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.biases_);
    }
    if (cached_has_bits & 0x00000002u) {
      low_ = from.low_;
    }
    if (cached_has_bits & 0x00000004u) {
      high_ = from.high_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QuantizedNNLayer::CopyFrom(const QuantizedNNLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.QuantizedNNLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuantizedNNLayer::IsInitialized() const {
  return true;
}

void QuantizedNNLayer::InternalSwap(QuantizedNNLayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  weights_.InternalSwap(CastToBase(&other->weights_));
  biases_.Swap(&other->biases_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(low_, other->low_);
  swap(high_, other->high_);
}

std::string QuantizedNNLayer::GetTypeName() const {
  return "assist_ranker.QuantizedNNLayer";
}


// ===================================================================

void QuantizedNNClassifierModel::InitAsDefaultInstance() {
  ::assist_ranker::_QuantizedNNClassifierModel_default_instance_._instance.get_mutable()->hidden_layer_ = const_cast< ::assist_ranker::QuantizedNNLayer*>(
      ::assist_ranker::QuantizedNNLayer::internal_default_instance());
  ::assist_ranker::_QuantizedNNClassifierModel_default_instance_._instance.get_mutable()->logits_layer_ = const_cast< ::assist_ranker::QuantizedNNLayer*>(
      ::assist_ranker::QuantizedNNLayer::internal_default_instance());
}
class QuantizedNNClassifierModel::_Internal {
 public:
  using HasBits = decltype(std::declval<QuantizedNNClassifierModel>()._has_bits_);
  static const ::assist_ranker::QuantizedNNLayer& hidden_layer(const QuantizedNNClassifierModel* msg);
  static void set_has_hidden_layer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::assist_ranker::QuantizedNNLayer& logits_layer(const QuantizedNNClassifierModel* msg);
  static void set_has_logits_layer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::assist_ranker::QuantizedNNLayer&
QuantizedNNClassifierModel::_Internal::hidden_layer(const QuantizedNNClassifierModel* msg) {
  return *msg->hidden_layer_;
}
const ::assist_ranker::QuantizedNNLayer&
QuantizedNNClassifierModel::_Internal::logits_layer(const QuantizedNNClassifierModel* msg) {
  return *msg->logits_layer_;
}
QuantizedNNClassifierModel::QuantizedNNClassifierModel()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:assist_ranker.QuantizedNNClassifierModel)
}
QuantizedNNClassifierModel::QuantizedNNClassifierModel(const QuantizedNNClassifierModel& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hidden_layer()) {
    hidden_layer_ = new ::assist_ranker::QuantizedNNLayer(*from.hidden_layer_);
  } else {
    hidden_layer_ = nullptr;
  }
  if (from.has_logits_layer()) {
    logits_layer_ = new ::assist_ranker::QuantizedNNLayer(*from.logits_layer_);
  } else {
    logits_layer_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:assist_ranker.QuantizedNNClassifierModel)
}

void QuantizedNNClassifierModel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QuantizedNNClassifierModel_quantized_5fnn_5fclassifier_2eproto.base);
  ::memset(&hidden_layer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logits_layer_) -
      reinterpret_cast<char*>(&hidden_layer_)) + sizeof(logits_layer_));
}

QuantizedNNClassifierModel::~QuantizedNNClassifierModel() {
  // @@protoc_insertion_point(destructor:assist_ranker.QuantizedNNClassifierModel)
  SharedDtor();
}

void QuantizedNNClassifierModel::SharedDtor() {
  if (this != internal_default_instance()) delete hidden_layer_;
  if (this != internal_default_instance()) delete logits_layer_;
}

void QuantizedNNClassifierModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuantizedNNClassifierModel& QuantizedNNClassifierModel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuantizedNNClassifierModel_quantized_5fnn_5fclassifier_2eproto.base);
  return *internal_default_instance();
}


void QuantizedNNClassifierModel::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.QuantizedNNClassifierModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(hidden_layer_ != nullptr);
      hidden_layer_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(logits_layer_ != nullptr);
      logits_layer_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* QuantizedNNClassifierModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .assist_ranker.QuantizedNNLayer hidden_layer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_hidden_layer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .assist_ranker.QuantizedNNLayer logits_layer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_logits_layer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool QuantizedNNClassifierModel::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:assist_ranker.QuantizedNNClassifierModel)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .assist_ranker.QuantizedNNLayer hidden_layer = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_hidden_layer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .assist_ranker.QuantizedNNLayer logits_layer = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_logits_layer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:assist_ranker.QuantizedNNClassifierModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:assist_ranker.QuantizedNNClassifierModel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void QuantizedNNClassifierModel::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:assist_ranker.QuantizedNNClassifierModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .assist_ranker.QuantizedNNLayer hidden_layer = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::hidden_layer(this), output);
  }

  // optional .assist_ranker.QuantizedNNLayer logits_layer = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::logits_layer(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:assist_ranker.QuantizedNNClassifierModel)
}

size_t QuantizedNNClassifierModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.QuantizedNNClassifierModel)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .assist_ranker.QuantizedNNLayer hidden_layer = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hidden_layer_);
    }

    // optional .assist_ranker.QuantizedNNLayer logits_layer = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *logits_layer_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuantizedNNClassifierModel::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const QuantizedNNClassifierModel*>(
      &from));
}

void QuantizedNNClassifierModel::MergeFrom(const QuantizedNNClassifierModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.QuantizedNNClassifierModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_hidden_layer()->::assist_ranker::QuantizedNNLayer::MergeFrom(from.hidden_layer());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_logits_layer()->::assist_ranker::QuantizedNNLayer::MergeFrom(from.logits_layer());
    }
  }
}

void QuantizedNNClassifierModel::CopyFrom(const QuantizedNNClassifierModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.QuantizedNNClassifierModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuantizedNNClassifierModel::IsInitialized() const {
  return true;
}

void QuantizedNNClassifierModel::InternalSwap(QuantizedNNClassifierModel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(hidden_layer_, other->hidden_layer_);
  swap(logits_layer_, other->logits_layer_);
}

std::string QuantizedNNClassifierModel::GetTypeName() const {
  return "assist_ranker.QuantizedNNClassifierModel";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace assist_ranker
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::assist_ranker::QuantizedNNLayer* Arena::CreateMaybeMessage< ::assist_ranker::QuantizedNNLayer >(Arena* arena) {
  return Arena::CreateInternal< ::assist_ranker::QuantizedNNLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::assist_ranker::QuantizedNNClassifierModel* Arena::CreateMaybeMessage< ::assist_ranker::QuantizedNNClassifierModel >(Arena* arena) {
  return Arena::CreateInternal< ::assist_ranker::QuantizedNNClassifierModel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: translate_ranker_model.proto

#include "translate_ranker_model.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_translate_5franker_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TranslateRankerModel_TranslateLogisticRegressionModel_translate_5franker_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_translate_5franker_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TranslateRankerModel_TranslateLogisticRegressionModel_CountryWeightEntry_DoNotUse_translate_5franker_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_translate_5franker_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TranslateRankerModel_TranslateLogisticRegressionModel_LocaleWeightEntry_DoNotUse_translate_5franker_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_translate_5franker_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TranslateRankerModel_TranslateLogisticRegressionModel_SourceLanguageWeightEntry_DoNotUse_translate_5franker_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_translate_5franker_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TranslateRankerModel_TranslateLogisticRegressionModel_TargetLanguageWeightEntry_DoNotUse_translate_5franker_5fmodel_2eproto;
namespace assist_ranker {
class TranslateRankerModel_TranslateLogisticRegressionModel_SourceLanguageWeightEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TranslateRankerModel_TranslateLogisticRegressionModel_SourceLanguageWeightEntry_DoNotUse> _instance;
} _TranslateRankerModel_TranslateLogisticRegressionModel_SourceLanguageWeightEntry_DoNotUse_default_instance_;
class TranslateRankerModel_TranslateLogisticRegressionModel_TargetLanguageWeightEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TranslateRankerModel_TranslateLogisticRegressionModel_TargetLanguageWeightEntry_DoNotUse> _instance;
} _TranslateRankerModel_TranslateLogisticRegressionModel_TargetLanguageWeightEntry_DoNotUse_default_instance_;
class TranslateRankerModel_TranslateLogisticRegressionModel_CountryWeightEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TranslateRankerModel_TranslateLogisticRegressionModel_CountryWeightEntry_DoNotUse> _instance;
} _TranslateRankerModel_TranslateLogisticRegressionModel_CountryWeightEntry_DoNotUse_default_instance_;
class TranslateRankerModel_TranslateLogisticRegressionModel_LocaleWeightEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TranslateRankerModel_TranslateLogisticRegressionModel_LocaleWeightEntry_DoNotUse> _instance;
} _TranslateRankerModel_TranslateLogisticRegressionModel_LocaleWeightEntry_DoNotUse_default_instance_;
class TranslateRankerModel_TranslateLogisticRegressionModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TranslateRankerModel_TranslateLogisticRegressionModel> _instance;
} _TranslateRankerModel_TranslateLogisticRegressionModel_default_instance_;
class TranslateRankerModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TranslateRankerModel> _instance;
  const ::assist_ranker::TranslateRankerModel_TranslateLogisticRegressionModel* translate_logistic_regression_model_;
} _TranslateRankerModel_default_instance_;
}  // namespace assist_ranker
static void InitDefaultsscc_info_TranslateRankerModel_translate_5franker_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::assist_ranker::_TranslateRankerModel_default_instance_;
    new (ptr) ::assist_ranker::TranslateRankerModel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::assist_ranker::TranslateRankerModel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TranslateRankerModel_translate_5franker_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TranslateRankerModel_translate_5franker_5fmodel_2eproto}, {
      &scc_info_TranslateRankerModel_TranslateLogisticRegressionModel_translate_5franker_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_TranslateRankerModel_TranslateLogisticRegressionModel_translate_5franker_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::assist_ranker::_TranslateRankerModel_TranslateLogisticRegressionModel_default_instance_;
    new (ptr) ::assist_ranker::TranslateRankerModel_TranslateLogisticRegressionModel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::assist_ranker::TranslateRankerModel_TranslateLogisticRegressionModel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TranslateRankerModel_TranslateLogisticRegressionModel_translate_5franker_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_TranslateRankerModel_TranslateLogisticRegressionModel_translate_5franker_5fmodel_2eproto}, {
      &scc_info_TranslateRankerModel_TranslateLogisticRegressionModel_SourceLanguageWeightEntry_DoNotUse_translate_5franker_5fmodel_2eproto.base,
      &scc_info_TranslateRankerModel_TranslateLogisticRegressionModel_TargetLanguageWeightEntry_DoNotUse_translate_5franker_5fmodel_2eproto.base,
      &scc_info_TranslateRankerModel_TranslateLogisticRegressionModel_CountryWeightEntry_DoNotUse_translate_5franker_5fmodel_2eproto.base,
      &scc_info_TranslateRankerModel_TranslateLogisticRegressionModel_LocaleWeightEntry_DoNotUse_translate_5franker_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_TranslateRankerModel_TranslateLogisticRegressionModel_CountryWeightEntry_DoNotUse_translate_5franker_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::assist_ranker::_TranslateRankerModel_TranslateLogisticRegressionModel_CountryWeightEntry_DoNotUse_default_instance_;
    new (ptr) ::assist_ranker::TranslateRankerModel_TranslateLogisticRegressionModel_CountryWeightEntry_DoNotUse();
  }
  ::assist_ranker::TranslateRankerModel_TranslateLogisticRegressionModel_CountryWeightEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TranslateRankerModel_TranslateLogisticRegressionModel_CountryWeightEntry_DoNotUse_translate_5franker_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TranslateRankerModel_TranslateLogisticRegressionModel_CountryWeightEntry_DoNotUse_translate_5franker_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_TranslateRankerModel_TranslateLogisticRegressionModel_LocaleWeightEntry_DoNotUse_translate_5franker_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::assist_ranker::_TranslateRankerModel_TranslateLogisticRegressionModel_LocaleWeightEntry_DoNotUse_default_instance_;
    new (ptr) ::assist_ranker::TranslateRankerModel_TranslateLogisticRegressionModel_LocaleWeightEntry_DoNotUse();
  }
  ::assist_ranker::TranslateRankerModel_TranslateLogisticRegressionModel_LocaleWeightEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TranslateRankerModel_TranslateLogisticRegressionModel_LocaleWeightEntry_DoNotUse_translate_5franker_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TranslateRankerModel_TranslateLogisticRegressionModel_LocaleWeightEntry_DoNotUse_translate_5franker_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_TranslateRankerModel_TranslateLogisticRegressionModel_SourceLanguageWeightEntry_DoNotUse_translate_5franker_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::assist_ranker::_TranslateRankerModel_TranslateLogisticRegressionModel_SourceLanguageWeightEntry_DoNotUse_default_instance_;
    new (ptr) ::assist_ranker::TranslateRankerModel_TranslateLogisticRegressionModel_SourceLanguageWeightEntry_DoNotUse();
  }
  ::assist_ranker::TranslateRankerModel_TranslateLogisticRegressionModel_SourceLanguageWeightEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TranslateRankerModel_TranslateLogisticRegressionModel_SourceLanguageWeightEntry_DoNotUse_translate_5franker_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TranslateRankerModel_TranslateLogisticRegressionModel_SourceLanguageWeightEntry_DoNotUse_translate_5franker_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_TranslateRankerModel_TranslateLogisticRegressionModel_TargetLanguageWeightEntry_DoNotUse_translate_5franker_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::assist_ranker::_TranslateRankerModel_TranslateLogisticRegressionModel_TargetLanguageWeightEntry_DoNotUse_default_instance_;
    new (ptr) ::assist_ranker::TranslateRankerModel_TranslateLogisticRegressionModel_TargetLanguageWeightEntry_DoNotUse();
  }
  ::assist_ranker::TranslateRankerModel_TranslateLogisticRegressionModel_TargetLanguageWeightEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TranslateRankerModel_TranslateLogisticRegressionModel_TargetLanguageWeightEntry_DoNotUse_translate_5franker_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TranslateRankerModel_TranslateLogisticRegressionModel_TargetLanguageWeightEntry_DoNotUse_translate_5franker_5fmodel_2eproto}, {}};

namespace assist_ranker {

// ===================================================================

TranslateRankerModel_TranslateLogisticRegressionModel_SourceLanguageWeightEntry_DoNotUse::TranslateRankerModel_TranslateLogisticRegressionModel_SourceLanguageWeightEntry_DoNotUse() {}
TranslateRankerModel_TranslateLogisticRegressionModel_SourceLanguageWeightEntry_DoNotUse::TranslateRankerModel_TranslateLogisticRegressionModel_SourceLanguageWeightEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TranslateRankerModel_TranslateLogisticRegressionModel_SourceLanguageWeightEntry_DoNotUse::MergeFrom(const TranslateRankerModel_TranslateLogisticRegressionModel_SourceLanguageWeightEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TranslateRankerModel_TranslateLogisticRegressionModel_TargetLanguageWeightEntry_DoNotUse::TranslateRankerModel_TranslateLogisticRegressionModel_TargetLanguageWeightEntry_DoNotUse() {}
TranslateRankerModel_TranslateLogisticRegressionModel_TargetLanguageWeightEntry_DoNotUse::TranslateRankerModel_TranslateLogisticRegressionModel_TargetLanguageWeightEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TranslateRankerModel_TranslateLogisticRegressionModel_TargetLanguageWeightEntry_DoNotUse::MergeFrom(const TranslateRankerModel_TranslateLogisticRegressionModel_TargetLanguageWeightEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TranslateRankerModel_TranslateLogisticRegressionModel_CountryWeightEntry_DoNotUse::TranslateRankerModel_TranslateLogisticRegressionModel_CountryWeightEntry_DoNotUse() {}
TranslateRankerModel_TranslateLogisticRegressionModel_CountryWeightEntry_DoNotUse::TranslateRankerModel_TranslateLogisticRegressionModel_CountryWeightEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TranslateRankerModel_TranslateLogisticRegressionModel_CountryWeightEntry_DoNotUse::MergeFrom(const TranslateRankerModel_TranslateLogisticRegressionModel_CountryWeightEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

TranslateRankerModel_TranslateLogisticRegressionModel_LocaleWeightEntry_DoNotUse::TranslateRankerModel_TranslateLogisticRegressionModel_LocaleWeightEntry_DoNotUse() {}
TranslateRankerModel_TranslateLogisticRegressionModel_LocaleWeightEntry_DoNotUse::TranslateRankerModel_TranslateLogisticRegressionModel_LocaleWeightEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TranslateRankerModel_TranslateLogisticRegressionModel_LocaleWeightEntry_DoNotUse::MergeFrom(const TranslateRankerModel_TranslateLogisticRegressionModel_LocaleWeightEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

void TranslateRankerModel_TranslateLogisticRegressionModel::InitAsDefaultInstance() {
}
class TranslateRankerModel_TranslateLogisticRegressionModel::_Internal {
 public:
  using HasBits = decltype(std::declval<TranslateRankerModel_TranslateLogisticRegressionModel>()._has_bits_);
  static void set_has_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_accept_ratio_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_decline_ratio_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ignore_ratio_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_accept_count_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_decline_count_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ignore_count_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

TranslateRankerModel_TranslateLogisticRegressionModel::TranslateRankerModel_TranslateLogisticRegressionModel()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:assist_ranker.TranslateRankerModel.TranslateLogisticRegressionModel)
}
TranslateRankerModel_TranslateLogisticRegressionModel::TranslateRankerModel_TranslateLogisticRegressionModel(const TranslateRankerModel_TranslateLogisticRegressionModel& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_language_weight_.MergeFrom(from.source_language_weight_);
  target_language_weight_.MergeFrom(from.target_language_weight_);
  country_weight_.MergeFrom(from.country_weight_);
  locale_weight_.MergeFrom(from.locale_weight_);
  ::memcpy(&bias_, &from.bias_,
    static_cast<size_t>(reinterpret_cast<char*>(&threshold_) -
    reinterpret_cast<char*>(&bias_)) + sizeof(threshold_));
  // @@protoc_insertion_point(copy_constructor:assist_ranker.TranslateRankerModel.TranslateLogisticRegressionModel)
}

void TranslateRankerModel_TranslateLogisticRegressionModel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TranslateRankerModel_TranslateLogisticRegressionModel_translate_5franker_5fmodel_2eproto.base);
  ::memset(&bias_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&threshold_) -
      reinterpret_cast<char*>(&bias_)) + sizeof(threshold_));
}

TranslateRankerModel_TranslateLogisticRegressionModel::~TranslateRankerModel_TranslateLogisticRegressionModel() {
  // @@protoc_insertion_point(destructor:assist_ranker.TranslateRankerModel.TranslateLogisticRegressionModel)
  SharedDtor();
}

void TranslateRankerModel_TranslateLogisticRegressionModel::SharedDtor() {
}

void TranslateRankerModel_TranslateLogisticRegressionModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TranslateRankerModel_TranslateLogisticRegressionModel& TranslateRankerModel_TranslateLogisticRegressionModel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TranslateRankerModel_TranslateLogisticRegressionModel_translate_5franker_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void TranslateRankerModel_TranslateLogisticRegressionModel::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.TranslateRankerModel.TranslateLogisticRegressionModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_language_weight_.Clear();
  target_language_weight_.Clear();
  country_weight_.Clear();
  locale_weight_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&bias_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&threshold_) -
        reinterpret_cast<char*>(&bias_)) + sizeof(threshold_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TranslateRankerModel_TranslateLogisticRegressionModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float bias = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_bias(&has_bits);
          bias_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float accept_ratio_weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_accept_ratio_weight(&has_bits);
          accept_ratio_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float decline_ratio_weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_decline_ratio_weight(&has_bits);
          decline_ratio_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ignore_ratio_weight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_ignore_ratio_weight(&has_bits);
          ignore_ratio_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // map<string, float> source_language_weight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&source_language_weight_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // map<string, float> target_language_weight = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&target_language_weight_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // map<string, float> country_weight = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&country_weight_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // map<string, float> locale_weight = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&locale_weight_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // optional float accept_count_weight = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_accept_count_weight(&has_bits);
          accept_count_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float decline_count_weight = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_decline_count_weight(&has_bits);
          decline_count_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ignore_count_weight = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_ignore_count_weight(&has_bits);
          ignore_count_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float threshold = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_threshold(&has_bits);
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TranslateRankerModel_TranslateLogisticRegressionModel::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:assist_ranker.TranslateRankerModel.TranslateLogisticRegressionModel)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float bias = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_bias(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float accept_ratio_weight = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_accept_ratio_weight(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accept_ratio_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float decline_ratio_weight = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_decline_ratio_weight(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &decline_ratio_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ignore_ratio_weight = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          _Internal::set_has_ignore_ratio_weight(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ignore_ratio_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, float> source_language_weight = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          TranslateRankerModel_TranslateLogisticRegressionModel_SourceLanguageWeightEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
              TranslateRankerModel_TranslateLogisticRegressionModel_SourceLanguageWeightEntry_DoNotUse,
              std::string, float,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, float > > parser(&source_language_weight_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, float> target_language_weight = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          TranslateRankerModel_TranslateLogisticRegressionModel_TargetLanguageWeightEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
              TranslateRankerModel_TranslateLogisticRegressionModel_TargetLanguageWeightEntry_DoNotUse,
              std::string, float,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, float > > parser(&target_language_weight_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, float> country_weight = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          TranslateRankerModel_TranslateLogisticRegressionModel_CountryWeightEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
              TranslateRankerModel_TranslateLogisticRegressionModel_CountryWeightEntry_DoNotUse,
              std::string, float,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, float > > parser(&country_weight_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, float> locale_weight = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          TranslateRankerModel_TranslateLogisticRegressionModel_LocaleWeightEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
              TranslateRankerModel_TranslateLogisticRegressionModel_LocaleWeightEntry_DoNotUse,
              std::string, float,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, float > > parser(&locale_weight_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float accept_count_weight = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {
          _Internal::set_has_accept_count_weight(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &accept_count_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float decline_count_weight = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {
          _Internal::set_has_decline_count_weight(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &decline_count_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ignore_count_weight = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (93 & 0xFF)) {
          _Internal::set_has_ignore_count_weight(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ignore_count_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float threshold = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (101 & 0xFF)) {
          _Internal::set_has_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:assist_ranker.TranslateRankerModel.TranslateLogisticRegressionModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:assist_ranker.TranslateRankerModel.TranslateLogisticRegressionModel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TranslateRankerModel_TranslateLogisticRegressionModel::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:assist_ranker.TranslateRankerModel.TranslateLogisticRegressionModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float bias = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->bias(), output);
  }

  // optional float accept_ratio_weight = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->accept_ratio_weight(), output);
  }

  // optional float decline_ratio_weight = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->decline_ratio_weight(), output);
  }

  // optional float ignore_ratio_weight = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->ignore_ratio_weight(), output);
  }

  // map<string, float> source_language_weight = 5;
  if (!this->source_language_weight().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->source_language_weight().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->source_language_weight().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->source_language_weight().begin();
          it != this->source_language_weight().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        TranslateRankerModel_TranslateLogisticRegressionModel_SourceLanguageWeightEntry_DoNotUse::Funcs::SerializeToCodedStream(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->source_language_weight().begin();
          it != this->source_language_weight().end(); ++it) {
        TranslateRankerModel_TranslateLogisticRegressionModel_SourceLanguageWeightEntry_DoNotUse::Funcs::SerializeToCodedStream(5, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, float> target_language_weight = 6;
  if (!this->target_language_weight().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->target_language_weight().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->target_language_weight().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->target_language_weight().begin();
          it != this->target_language_weight().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        TranslateRankerModel_TranslateLogisticRegressionModel_TargetLanguageWeightEntry_DoNotUse::Funcs::SerializeToCodedStream(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->target_language_weight().begin();
          it != this->target_language_weight().end(); ++it) {
        TranslateRankerModel_TranslateLogisticRegressionModel_TargetLanguageWeightEntry_DoNotUse::Funcs::SerializeToCodedStream(6, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, float> country_weight = 7;
  if (!this->country_weight().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->country_weight().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->country_weight().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->country_weight().begin();
          it != this->country_weight().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        TranslateRankerModel_TranslateLogisticRegressionModel_CountryWeightEntry_DoNotUse::Funcs::SerializeToCodedStream(7, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->country_weight().begin();
          it != this->country_weight().end(); ++it) {
        TranslateRankerModel_TranslateLogisticRegressionModel_CountryWeightEntry_DoNotUse::Funcs::SerializeToCodedStream(7, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, float> locale_weight = 8;
  if (!this->locale_weight().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->locale_weight().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->locale_weight().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->locale_weight().begin();
          it != this->locale_weight().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        TranslateRankerModel_TranslateLogisticRegressionModel_LocaleWeightEntry_DoNotUse::Funcs::SerializeToCodedStream(8, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->locale_weight().begin();
          it != this->locale_weight().end(); ++it) {
        TranslateRankerModel_TranslateLogisticRegressionModel_LocaleWeightEntry_DoNotUse::Funcs::SerializeToCodedStream(8, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // optional float accept_count_weight = 9;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->accept_count_weight(), output);
  }

  // optional float decline_count_weight = 10;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->decline_count_weight(), output);
  }

  // optional float ignore_count_weight = 11;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(11, this->ignore_count_weight(), output);
  }

  // optional float threshold = 12;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(12, this->threshold(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:assist_ranker.TranslateRankerModel.TranslateLogisticRegressionModel)
}

size_t TranslateRankerModel_TranslateLogisticRegressionModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.TranslateRankerModel.TranslateLogisticRegressionModel)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, float> source_language_weight = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->source_language_weight_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
      it = this->source_language_weight().begin();
      it != this->source_language_weight().end(); ++it) {
    total_size += TranslateRankerModel_TranslateLogisticRegressionModel_SourceLanguageWeightEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, float> target_language_weight = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->target_language_weight_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
      it = this->target_language_weight().begin();
      it != this->target_language_weight().end(); ++it) {
    total_size += TranslateRankerModel_TranslateLogisticRegressionModel_TargetLanguageWeightEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, float> country_weight = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->country_weight_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
      it = this->country_weight().begin();
      it != this->country_weight().end(); ++it) {
    total_size += TranslateRankerModel_TranslateLogisticRegressionModel_CountryWeightEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, float> locale_weight = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->locale_weight_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
      it = this->locale_weight().begin();
      it != this->locale_weight().end(); ++it) {
    total_size += TranslateRankerModel_TranslateLogisticRegressionModel_LocaleWeightEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float bias = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float accept_ratio_weight = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float decline_ratio_weight = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float ignore_ratio_weight = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float accept_count_weight = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float decline_count_weight = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float ignore_count_weight = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float threshold = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TranslateRankerModel_TranslateLogisticRegressionModel::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TranslateRankerModel_TranslateLogisticRegressionModel*>(
      &from));
}

void TranslateRankerModel_TranslateLogisticRegressionModel::MergeFrom(const TranslateRankerModel_TranslateLogisticRegressionModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.TranslateRankerModel.TranslateLogisticRegressionModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  source_language_weight_.MergeFrom(from.source_language_weight_);
  target_language_weight_.MergeFrom(from.target_language_weight_);
  country_weight_.MergeFrom(from.country_weight_);
  locale_weight_.MergeFrom(from.locale_weight_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      bias_ = from.bias_;
    }
    if (cached_has_bits & 0x00000002u) {
      accept_ratio_weight_ = from.accept_ratio_weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      decline_ratio_weight_ = from.decline_ratio_weight_;
    }
    if (cached_has_bits & 0x00000008u) {
      ignore_ratio_weight_ = from.ignore_ratio_weight_;
    }
    if (cached_has_bits & 0x00000010u) {
      accept_count_weight_ = from.accept_count_weight_;
    }
    if (cached_has_bits & 0x00000020u) {
      decline_count_weight_ = from.decline_count_weight_;
    }
    if (cached_has_bits & 0x00000040u) {
      ignore_count_weight_ = from.ignore_count_weight_;
    }
    if (cached_has_bits & 0x00000080u) {
      threshold_ = from.threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TranslateRankerModel_TranslateLogisticRegressionModel::CopyFrom(const TranslateRankerModel_TranslateLogisticRegressionModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.TranslateRankerModel.TranslateLogisticRegressionModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranslateRankerModel_TranslateLogisticRegressionModel::IsInitialized() const {
  return true;
}

void TranslateRankerModel_TranslateLogisticRegressionModel::InternalSwap(TranslateRankerModel_TranslateLogisticRegressionModel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  source_language_weight_.Swap(&other->source_language_weight_);
  target_language_weight_.Swap(&other->target_language_weight_);
  country_weight_.Swap(&other->country_weight_);
  locale_weight_.Swap(&other->locale_weight_);
  swap(bias_, other->bias_);
  swap(accept_ratio_weight_, other->accept_ratio_weight_);
  swap(decline_ratio_weight_, other->decline_ratio_weight_);
  swap(ignore_ratio_weight_, other->ignore_ratio_weight_);
  swap(accept_count_weight_, other->accept_count_weight_);
  swap(decline_count_weight_, other->decline_count_weight_);
  swap(ignore_count_weight_, other->ignore_count_weight_);
  swap(threshold_, other->threshold_);
}

std::string TranslateRankerModel_TranslateLogisticRegressionModel::GetTypeName() const {
  return "assist_ranker.TranslateRankerModel.TranslateLogisticRegressionModel";
}


// ===================================================================

void TranslateRankerModel::InitAsDefaultInstance() {
}
class TranslateRankerModel::_Internal {
 public:
  using HasBits = decltype(std::declval<TranslateRankerModel>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::assist_ranker::TranslateRankerModel_TranslateLogisticRegressionModel& translate_logistic_regression_model(const TranslateRankerModel* msg);
};

const ::assist_ranker::TranslateRankerModel_TranslateLogisticRegressionModel&
TranslateRankerModel::_Internal::translate_logistic_regression_model(const TranslateRankerModel* msg) {
  return *msg->model_revision_.translate_logistic_regression_model_;
}
void TranslateRankerModel::set_allocated_translate_logistic_regression_model(::assist_ranker::TranslateRankerModel_TranslateLogisticRegressionModel* translate_logistic_regression_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_model_revision();
  if (translate_logistic_regression_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      translate_logistic_regression_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translate_logistic_regression_model, submessage_arena);
    }
    set_has_translate_logistic_regression_model();
    model_revision_.translate_logistic_regression_model_ = translate_logistic_regression_model;
  }
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.TranslateRankerModel.translate_logistic_regression_model)
}
TranslateRankerModel::TranslateRankerModel()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:assist_ranker.TranslateRankerModel)
}
TranslateRankerModel::TranslateRankerModel(const TranslateRankerModel& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_ = from.version_;
  clear_has_model_revision();
  switch (from.model_revision_case()) {
    case kTranslateLogisticRegressionModel: {
      mutable_translate_logistic_regression_model()->::assist_ranker::TranslateRankerModel_TranslateLogisticRegressionModel::MergeFrom(from.translate_logistic_regression_model());
      break;
    }
    case MODEL_REVISION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:assist_ranker.TranslateRankerModel)
}

void TranslateRankerModel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TranslateRankerModel_translate_5franker_5fmodel_2eproto.base);
  version_ = 0u;
  clear_has_model_revision();
}

TranslateRankerModel::~TranslateRankerModel() {
  // @@protoc_insertion_point(destructor:assist_ranker.TranslateRankerModel)
  SharedDtor();
}

void TranslateRankerModel::SharedDtor() {
  if (has_model_revision()) {
    clear_model_revision();
  }
}

void TranslateRankerModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TranslateRankerModel& TranslateRankerModel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TranslateRankerModel_translate_5franker_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void TranslateRankerModel::clear_model_revision() {
// @@protoc_insertion_point(one_of_clear_start:assist_ranker.TranslateRankerModel)
  switch (model_revision_case()) {
    case kTranslateLogisticRegressionModel: {
      delete model_revision_.translate_logistic_regression_model_;
      break;
    }
    case MODEL_REVISION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MODEL_REVISION_NOT_SET;
}


void TranslateRankerModel::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.TranslateRankerModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_ = 0u;
  clear_model_revision();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TranslateRankerModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .assist_ranker.TranslateRankerModel.TranslateLogisticRegressionModel translate_logistic_regression_model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_translate_logistic_regression_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TranslateRankerModel::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:assist_ranker.TranslateRankerModel)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .assist_ranker.TranslateRankerModel.TranslateLogisticRegressionModel translate_logistic_regression_model = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_translate_logistic_regression_model()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:assist_ranker.TranslateRankerModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:assist_ranker.TranslateRankerModel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TranslateRankerModel::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:assist_ranker.TranslateRankerModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional .assist_ranker.TranslateRankerModel.TranslateLogisticRegressionModel translate_logistic_regression_model = 2;
  if (has_translate_logistic_regression_model()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::translate_logistic_regression_model(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:assist_ranker.TranslateRankerModel)
}

size_t TranslateRankerModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.TranslateRankerModel)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 version = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  switch (model_revision_case()) {
    // optional .assist_ranker.TranslateRankerModel.TranslateLogisticRegressionModel translate_logistic_regression_model = 2;
    case kTranslateLogisticRegressionModel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *model_revision_.translate_logistic_regression_model_);
      break;
    }
    case MODEL_REVISION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TranslateRankerModel::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TranslateRankerModel*>(
      &from));
}

void TranslateRankerModel::MergeFrom(const TranslateRankerModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.TranslateRankerModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_version()) {
    set_version(from.version());
  }
  switch (from.model_revision_case()) {
    case kTranslateLogisticRegressionModel: {
      mutable_translate_logistic_regression_model()->::assist_ranker::TranslateRankerModel_TranslateLogisticRegressionModel::MergeFrom(from.translate_logistic_regression_model());
      break;
    }
    case MODEL_REVISION_NOT_SET: {
      break;
    }
  }
}

void TranslateRankerModel::CopyFrom(const TranslateRankerModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.TranslateRankerModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranslateRankerModel::IsInitialized() const {
  return true;
}

void TranslateRankerModel::InternalSwap(TranslateRankerModel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(version_, other->version_);
  swap(model_revision_, other->model_revision_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string TranslateRankerModel::GetTypeName() const {
  return "assist_ranker.TranslateRankerModel";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace assist_ranker
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::assist_ranker::TranslateRankerModel_TranslateLogisticRegressionModel_SourceLanguageWeightEntry_DoNotUse* Arena::CreateMaybeMessage< ::assist_ranker::TranslateRankerModel_TranslateLogisticRegressionModel_SourceLanguageWeightEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::assist_ranker::TranslateRankerModel_TranslateLogisticRegressionModel_SourceLanguageWeightEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::assist_ranker::TranslateRankerModel_TranslateLogisticRegressionModel_TargetLanguageWeightEntry_DoNotUse* Arena::CreateMaybeMessage< ::assist_ranker::TranslateRankerModel_TranslateLogisticRegressionModel_TargetLanguageWeightEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::assist_ranker::TranslateRankerModel_TranslateLogisticRegressionModel_TargetLanguageWeightEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::assist_ranker::TranslateRankerModel_TranslateLogisticRegressionModel_CountryWeightEntry_DoNotUse* Arena::CreateMaybeMessage< ::assist_ranker::TranslateRankerModel_TranslateLogisticRegressionModel_CountryWeightEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::assist_ranker::TranslateRankerModel_TranslateLogisticRegressionModel_CountryWeightEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::assist_ranker::TranslateRankerModel_TranslateLogisticRegressionModel_LocaleWeightEntry_DoNotUse* Arena::CreateMaybeMessage< ::assist_ranker::TranslateRankerModel_TranslateLogisticRegressionModel_LocaleWeightEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::assist_ranker::TranslateRankerModel_TranslateLogisticRegressionModel_LocaleWeightEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::assist_ranker::TranslateRankerModel_TranslateLogisticRegressionModel* Arena::CreateMaybeMessage< ::assist_ranker::TranslateRankerModel_TranslateLogisticRegressionModel >(Arena* arena) {
  return Arena::CreateInternal< ::assist_ranker::TranslateRankerModel_TranslateLogisticRegressionModel >(arena);
}
template<> PROTOBUF_NOINLINE ::assist_ranker::TranslateRankerModel* Arena::CreateMaybeMessage< ::assist_ranker::TranslateRankerModel >(Arena* arena) {
  return Arena::CreateInternal< ::assist_ranker::TranslateRankerModel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

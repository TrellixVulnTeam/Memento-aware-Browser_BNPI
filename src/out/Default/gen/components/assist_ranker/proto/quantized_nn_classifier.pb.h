// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: quantized_nn_classifier.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_quantized_5fnn_5fclassifier_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_quantized_5fnn_5fclassifier_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_quantized_5fnn_5fclassifier_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_quantized_5fnn_5fclassifier_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace assist_ranker {
class QuantizedNNClassifierModel;
class QuantizedNNClassifierModelDefaultTypeInternal;
extern QuantizedNNClassifierModelDefaultTypeInternal _QuantizedNNClassifierModel_default_instance_;
class QuantizedNNLayer;
class QuantizedNNLayerDefaultTypeInternal;
extern QuantizedNNLayerDefaultTypeInternal _QuantizedNNLayer_default_instance_;
}  // namespace assist_ranker
PROTOBUF_NAMESPACE_OPEN
template<> ::assist_ranker::QuantizedNNClassifierModel* Arena::CreateMaybeMessage<::assist_ranker::QuantizedNNClassifierModel>(Arena*);
template<> ::assist_ranker::QuantizedNNLayer* Arena::CreateMaybeMessage<::assist_ranker::QuantizedNNLayer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace assist_ranker {

// ===================================================================

class QuantizedNNLayer :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:assist_ranker.QuantizedNNLayer) */ {
 public:
  QuantizedNNLayer();
  virtual ~QuantizedNNLayer();

  QuantizedNNLayer(const QuantizedNNLayer& from);
  QuantizedNNLayer(QuantizedNNLayer&& from) noexcept
    : QuantizedNNLayer() {
    *this = ::std::move(from);
  }

  inline QuantizedNNLayer& operator=(const QuantizedNNLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuantizedNNLayer& operator=(QuantizedNNLayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const QuantizedNNLayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuantizedNNLayer* internal_default_instance() {
    return reinterpret_cast<const QuantizedNNLayer*>(
               &_QuantizedNNLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QuantizedNNLayer& a, QuantizedNNLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(QuantizedNNLayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuantizedNNLayer* New() const final {
    return CreateMaybeMessage<QuantizedNNLayer>(nullptr);
  }

  QuantizedNNLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuantizedNNLayer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const QuantizedNNLayer& from);
  void MergeFrom(const QuantizedNNLayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QuantizedNNLayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "assist_ranker.QuantizedNNLayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightsFieldNumber = 1,
    kBiasesFieldNumber = 2,
    kLowFieldNumber = 3,
    kHighFieldNumber = 4,
  };
  // repeated bytes weights = 1;
  int weights_size() const;
  void clear_weights();
  const std::string& weights(int index) const;
  std::string* mutable_weights(int index);
  void set_weights(int index, const std::string& value);
  void set_weights(int index, std::string&& value);
  void set_weights(int index, const char* value);
  void set_weights(int index, const void* value, size_t size);
  std::string* add_weights();
  void add_weights(const std::string& value);
  void add_weights(std::string&& value);
  void add_weights(const char* value);
  void add_weights(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& weights() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_weights();

  // optional bytes biases = 2;
  bool has_biases() const;
  void clear_biases();
  const std::string& biases() const;
  void set_biases(const std::string& value);
  void set_biases(std::string&& value);
  void set_biases(const char* value);
  void set_biases(const void* value, size_t size);
  std::string* mutable_biases();
  std::string* release_biases();
  void set_allocated_biases(std::string* biases);

  // optional float low = 3;
  bool has_low() const;
  void clear_low();
  float low() const;
  void set_low(float value);

  // optional float high = 4;
  bool has_high() const;
  void clear_high();
  float high() const;
  void set_high(float value);

  // @@protoc_insertion_point(class_scope:assist_ranker.QuantizedNNLayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> weights_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr biases_;
  float low_;
  float high_;
  friend struct ::TableStruct_quantized_5fnn_5fclassifier_2eproto;
};
// -------------------------------------------------------------------

class QuantizedNNClassifierModel :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:assist_ranker.QuantizedNNClassifierModel) */ {
 public:
  QuantizedNNClassifierModel();
  virtual ~QuantizedNNClassifierModel();

  QuantizedNNClassifierModel(const QuantizedNNClassifierModel& from);
  QuantizedNNClassifierModel(QuantizedNNClassifierModel&& from) noexcept
    : QuantizedNNClassifierModel() {
    *this = ::std::move(from);
  }

  inline QuantizedNNClassifierModel& operator=(const QuantizedNNClassifierModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuantizedNNClassifierModel& operator=(QuantizedNNClassifierModel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const QuantizedNNClassifierModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuantizedNNClassifierModel* internal_default_instance() {
    return reinterpret_cast<const QuantizedNNClassifierModel*>(
               &_QuantizedNNClassifierModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QuantizedNNClassifierModel& a, QuantizedNNClassifierModel& b) {
    a.Swap(&b);
  }
  inline void Swap(QuantizedNNClassifierModel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QuantizedNNClassifierModel* New() const final {
    return CreateMaybeMessage<QuantizedNNClassifierModel>(nullptr);
  }

  QuantizedNNClassifierModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuantizedNNClassifierModel>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const QuantizedNNClassifierModel& from);
  void MergeFrom(const QuantizedNNClassifierModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QuantizedNNClassifierModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "assist_ranker.QuantizedNNClassifierModel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHiddenLayerFieldNumber = 1,
    kLogitsLayerFieldNumber = 2,
  };
  // optional .assist_ranker.QuantizedNNLayer hidden_layer = 1;
  bool has_hidden_layer() const;
  void clear_hidden_layer();
  const ::assist_ranker::QuantizedNNLayer& hidden_layer() const;
  ::assist_ranker::QuantizedNNLayer* release_hidden_layer();
  ::assist_ranker::QuantizedNNLayer* mutable_hidden_layer();
  void set_allocated_hidden_layer(::assist_ranker::QuantizedNNLayer* hidden_layer);

  // optional .assist_ranker.QuantizedNNLayer logits_layer = 2;
  bool has_logits_layer() const;
  void clear_logits_layer();
  const ::assist_ranker::QuantizedNNLayer& logits_layer() const;
  ::assist_ranker::QuantizedNNLayer* release_logits_layer();
  ::assist_ranker::QuantizedNNLayer* mutable_logits_layer();
  void set_allocated_logits_layer(::assist_ranker::QuantizedNNLayer* logits_layer);

  // @@protoc_insertion_point(class_scope:assist_ranker.QuantizedNNClassifierModel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::assist_ranker::QuantizedNNLayer* hidden_layer_;
  ::assist_ranker::QuantizedNNLayer* logits_layer_;
  friend struct ::TableStruct_quantized_5fnn_5fclassifier_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QuantizedNNLayer

// repeated bytes weights = 1;
inline int QuantizedNNLayer::weights_size() const {
  return weights_.size();
}
inline void QuantizedNNLayer::clear_weights() {
  weights_.Clear();
}
inline const std::string& QuantizedNNLayer::weights(int index) const {
  // @@protoc_insertion_point(field_get:assist_ranker.QuantizedNNLayer.weights)
  return weights_.Get(index);
}
inline std::string* QuantizedNNLayer::mutable_weights(int index) {
  // @@protoc_insertion_point(field_mutable:assist_ranker.QuantizedNNLayer.weights)
  return weights_.Mutable(index);
}
inline void QuantizedNNLayer::set_weights(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:assist_ranker.QuantizedNNLayer.weights)
  weights_.Mutable(index)->assign(value);
}
inline void QuantizedNNLayer::set_weights(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:assist_ranker.QuantizedNNLayer.weights)
  weights_.Mutable(index)->assign(std::move(value));
}
inline void QuantizedNNLayer::set_weights(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  weights_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:assist_ranker.QuantizedNNLayer.weights)
}
inline void QuantizedNNLayer::set_weights(int index, const void* value, size_t size) {
  weights_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:assist_ranker.QuantizedNNLayer.weights)
}
inline std::string* QuantizedNNLayer::add_weights() {
  // @@protoc_insertion_point(field_add_mutable:assist_ranker.QuantizedNNLayer.weights)
  return weights_.Add();
}
inline void QuantizedNNLayer::add_weights(const std::string& value) {
  weights_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:assist_ranker.QuantizedNNLayer.weights)
}
inline void QuantizedNNLayer::add_weights(std::string&& value) {
  weights_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:assist_ranker.QuantizedNNLayer.weights)
}
inline void QuantizedNNLayer::add_weights(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  weights_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:assist_ranker.QuantizedNNLayer.weights)
}
inline void QuantizedNNLayer::add_weights(const void* value, size_t size) {
  weights_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:assist_ranker.QuantizedNNLayer.weights)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QuantizedNNLayer::weights() const {
  // @@protoc_insertion_point(field_list:assist_ranker.QuantizedNNLayer.weights)
  return weights_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QuantizedNNLayer::mutable_weights() {
  // @@protoc_insertion_point(field_mutable_list:assist_ranker.QuantizedNNLayer.weights)
  return &weights_;
}

// optional bytes biases = 2;
inline bool QuantizedNNLayer::has_biases() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuantizedNNLayer::clear_biases() {
  biases_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& QuantizedNNLayer::biases() const {
  // @@protoc_insertion_point(field_get:assist_ranker.QuantizedNNLayer.biases)
  return biases_.GetNoArena();
}
inline void QuantizedNNLayer::set_biases(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  biases_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:assist_ranker.QuantizedNNLayer.biases)
}
inline void QuantizedNNLayer::set_biases(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  biases_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:assist_ranker.QuantizedNNLayer.biases)
}
inline void QuantizedNNLayer::set_biases(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  biases_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:assist_ranker.QuantizedNNLayer.biases)
}
inline void QuantizedNNLayer::set_biases(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  biases_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:assist_ranker.QuantizedNNLayer.biases)
}
inline std::string* QuantizedNNLayer::mutable_biases() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:assist_ranker.QuantizedNNLayer.biases)
  return biases_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QuantizedNNLayer::release_biases() {
  // @@protoc_insertion_point(field_release:assist_ranker.QuantizedNNLayer.biases)
  if (!has_biases()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return biases_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QuantizedNNLayer::set_allocated_biases(std::string* biases) {
  if (biases != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  biases_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), biases);
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.QuantizedNNLayer.biases)
}

// optional float low = 3;
inline bool QuantizedNNLayer::has_low() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuantizedNNLayer::clear_low() {
  low_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float QuantizedNNLayer::low() const {
  // @@protoc_insertion_point(field_get:assist_ranker.QuantizedNNLayer.low)
  return low_;
}
inline void QuantizedNNLayer::set_low(float value) {
  _has_bits_[0] |= 0x00000002u;
  low_ = value;
  // @@protoc_insertion_point(field_set:assist_ranker.QuantizedNNLayer.low)
}

// optional float high = 4;
inline bool QuantizedNNLayer::has_high() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuantizedNNLayer::clear_high() {
  high_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float QuantizedNNLayer::high() const {
  // @@protoc_insertion_point(field_get:assist_ranker.QuantizedNNLayer.high)
  return high_;
}
inline void QuantizedNNLayer::set_high(float value) {
  _has_bits_[0] |= 0x00000004u;
  high_ = value;
  // @@protoc_insertion_point(field_set:assist_ranker.QuantizedNNLayer.high)
}

// -------------------------------------------------------------------

// QuantizedNNClassifierModel

// optional .assist_ranker.QuantizedNNLayer hidden_layer = 1;
inline bool QuantizedNNClassifierModel::has_hidden_layer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuantizedNNClassifierModel::clear_hidden_layer() {
  if (hidden_layer_ != nullptr) hidden_layer_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::assist_ranker::QuantizedNNLayer& QuantizedNNClassifierModel::hidden_layer() const {
  const ::assist_ranker::QuantizedNNLayer* p = hidden_layer_;
  // @@protoc_insertion_point(field_get:assist_ranker.QuantizedNNClassifierModel.hidden_layer)
  return p != nullptr ? *p : *reinterpret_cast<const ::assist_ranker::QuantizedNNLayer*>(
      &::assist_ranker::_QuantizedNNLayer_default_instance_);
}
inline ::assist_ranker::QuantizedNNLayer* QuantizedNNClassifierModel::release_hidden_layer() {
  // @@protoc_insertion_point(field_release:assist_ranker.QuantizedNNClassifierModel.hidden_layer)
  _has_bits_[0] &= ~0x00000001u;
  ::assist_ranker::QuantizedNNLayer* temp = hidden_layer_;
  hidden_layer_ = nullptr;
  return temp;
}
inline ::assist_ranker::QuantizedNNLayer* QuantizedNNClassifierModel::mutable_hidden_layer() {
  _has_bits_[0] |= 0x00000001u;
  if (hidden_layer_ == nullptr) {
    auto* p = CreateMaybeMessage<::assist_ranker::QuantizedNNLayer>(GetArenaNoVirtual());
    hidden_layer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:assist_ranker.QuantizedNNClassifierModel.hidden_layer)
  return hidden_layer_;
}
inline void QuantizedNNClassifierModel::set_allocated_hidden_layer(::assist_ranker::QuantizedNNLayer* hidden_layer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hidden_layer_;
  }
  if (hidden_layer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hidden_layer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hidden_layer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hidden_layer_ = hidden_layer;
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.QuantizedNNClassifierModel.hidden_layer)
}

// optional .assist_ranker.QuantizedNNLayer logits_layer = 2;
inline bool QuantizedNNClassifierModel::has_logits_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuantizedNNClassifierModel::clear_logits_layer() {
  if (logits_layer_ != nullptr) logits_layer_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::assist_ranker::QuantizedNNLayer& QuantizedNNClassifierModel::logits_layer() const {
  const ::assist_ranker::QuantizedNNLayer* p = logits_layer_;
  // @@protoc_insertion_point(field_get:assist_ranker.QuantizedNNClassifierModel.logits_layer)
  return p != nullptr ? *p : *reinterpret_cast<const ::assist_ranker::QuantizedNNLayer*>(
      &::assist_ranker::_QuantizedNNLayer_default_instance_);
}
inline ::assist_ranker::QuantizedNNLayer* QuantizedNNClassifierModel::release_logits_layer() {
  // @@protoc_insertion_point(field_release:assist_ranker.QuantizedNNClassifierModel.logits_layer)
  _has_bits_[0] &= ~0x00000002u;
  ::assist_ranker::QuantizedNNLayer* temp = logits_layer_;
  logits_layer_ = nullptr;
  return temp;
}
inline ::assist_ranker::QuantizedNNLayer* QuantizedNNClassifierModel::mutable_logits_layer() {
  _has_bits_[0] |= 0x00000002u;
  if (logits_layer_ == nullptr) {
    auto* p = CreateMaybeMessage<::assist_ranker::QuantizedNNLayer>(GetArenaNoVirtual());
    logits_layer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:assist_ranker.QuantizedNNClassifierModel.logits_layer)
  return logits_layer_;
}
inline void QuantizedNNClassifierModel::set_allocated_logits_layer(::assist_ranker::QuantizedNNLayer* logits_layer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete logits_layer_;
  }
  if (logits_layer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      logits_layer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logits_layer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  logits_layer_ = logits_layer;
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.QuantizedNNClassifierModel.logits_layer)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace assist_ranker

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_quantized_5fnn_5fclassifier_2eproto

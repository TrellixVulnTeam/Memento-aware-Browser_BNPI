// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: generic_logistic_regression_model.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_generic_5flogistic_5fregression_5fmodel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_generic_5flogistic_5fregression_5fmodel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry_lite.h>
#include <google/protobuf/map_field_lite.h>
#include "example_preprocessor.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_generic_5flogistic_5fregression_5fmodel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_generic_5flogistic_5fregression_5fmodel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace assist_ranker {
class BucketizedWeights;
class BucketizedWeightsDefaultTypeInternal;
extern BucketizedWeightsDefaultTypeInternal _BucketizedWeights_default_instance_;
class FeatureWeight;
class FeatureWeightDefaultTypeInternal;
extern FeatureWeightDefaultTypeInternal _FeatureWeight_default_instance_;
class GenericLogisticRegressionModel;
class GenericLogisticRegressionModelDefaultTypeInternal;
extern GenericLogisticRegressionModelDefaultTypeInternal _GenericLogisticRegressionModel_default_instance_;
class GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse;
class GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUseDefaultTypeInternal;
extern GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUseDefaultTypeInternal _GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse_default_instance_;
class GenericLogisticRegressionModel_WeightsEntry_DoNotUse;
class GenericLogisticRegressionModel_WeightsEntry_DoNotUseDefaultTypeInternal;
extern GenericLogisticRegressionModel_WeightsEntry_DoNotUseDefaultTypeInternal _GenericLogisticRegressionModel_WeightsEntry_DoNotUse_default_instance_;
class SparseWeights;
class SparseWeightsDefaultTypeInternal;
extern SparseWeightsDefaultTypeInternal _SparseWeights_default_instance_;
class SparseWeights_WeightsEntry_DoNotUse;
class SparseWeights_WeightsEntry_DoNotUseDefaultTypeInternal;
extern SparseWeights_WeightsEntry_DoNotUseDefaultTypeInternal _SparseWeights_WeightsEntry_DoNotUse_default_instance_;
}  // namespace assist_ranker
PROTOBUF_NAMESPACE_OPEN
template<> ::assist_ranker::BucketizedWeights* Arena::CreateMaybeMessage<::assist_ranker::BucketizedWeights>(Arena*);
template<> ::assist_ranker::FeatureWeight* Arena::CreateMaybeMessage<::assist_ranker::FeatureWeight>(Arena*);
template<> ::assist_ranker::GenericLogisticRegressionModel* Arena::CreateMaybeMessage<::assist_ranker::GenericLogisticRegressionModel>(Arena*);
template<> ::assist_ranker::GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse* Arena::CreateMaybeMessage<::assist_ranker::GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse>(Arena*);
template<> ::assist_ranker::GenericLogisticRegressionModel_WeightsEntry_DoNotUse* Arena::CreateMaybeMessage<::assist_ranker::GenericLogisticRegressionModel_WeightsEntry_DoNotUse>(Arena*);
template<> ::assist_ranker::SparseWeights* Arena::CreateMaybeMessage<::assist_ranker::SparseWeights>(Arena*);
template<> ::assist_ranker::SparseWeights_WeightsEntry_DoNotUse* Arena::CreateMaybeMessage<::assist_ranker::SparseWeights_WeightsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace assist_ranker {

// ===================================================================

class SparseWeights_WeightsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<SparseWeights_WeightsEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<SparseWeights_WeightsEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
    0 > SuperType;
  SparseWeights_WeightsEntry_DoNotUse();
  SparseWeights_WeightsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SparseWeights_WeightsEntry_DoNotUse& other);
  static const SparseWeights_WeightsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SparseWeights_WeightsEntry_DoNotUse*>(&_SparseWeights_WeightsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
};

// -------------------------------------------------------------------

class SparseWeights :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:assist_ranker.SparseWeights) */ {
 public:
  SparseWeights();
  virtual ~SparseWeights();

  SparseWeights(const SparseWeights& from);
  SparseWeights(SparseWeights&& from) noexcept
    : SparseWeights() {
    *this = ::std::move(from);
  }

  inline SparseWeights& operator=(const SparseWeights& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparseWeights& operator=(SparseWeights&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SparseWeights& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SparseWeights* internal_default_instance() {
    return reinterpret_cast<const SparseWeights*>(
               &_SparseWeights_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SparseWeights& a, SparseWeights& b) {
    a.Swap(&b);
  }
  inline void Swap(SparseWeights* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SparseWeights* New() const final {
    return CreateMaybeMessage<SparseWeights>(nullptr);
  }

  SparseWeights* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SparseWeights>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const SparseWeights& from);
  void MergeFrom(const SparseWeights& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SparseWeights* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "assist_ranker.SparseWeights";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kWeightsFieldNumber = 1,
    kDefaultWeightFieldNumber = 2,
  };
  // map<string, float> weights = 1;
  int weights_size() const;
  void clear_weights();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
      weights() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
      mutable_weights();

  // optional float default_weight = 2;
  bool has_default_weight() const;
  void clear_default_weight();
  float default_weight() const;
  void set_default_weight(float value);

  // @@protoc_insertion_point(class_scope:assist_ranker.SparseWeights)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
      SparseWeights_WeightsEntry_DoNotUse,
      std::string, float,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
      0 > weights_;
  float default_weight_;
  friend struct ::TableStruct_generic_5flogistic_5fregression_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class BucketizedWeights :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:assist_ranker.BucketizedWeights) */ {
 public:
  BucketizedWeights();
  virtual ~BucketizedWeights();

  BucketizedWeights(const BucketizedWeights& from);
  BucketizedWeights(BucketizedWeights&& from) noexcept
    : BucketizedWeights() {
    *this = ::std::move(from);
  }

  inline BucketizedWeights& operator=(const BucketizedWeights& from) {
    CopyFrom(from);
    return *this;
  }
  inline BucketizedWeights& operator=(BucketizedWeights&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BucketizedWeights& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BucketizedWeights* internal_default_instance() {
    return reinterpret_cast<const BucketizedWeights*>(
               &_BucketizedWeights_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BucketizedWeights& a, BucketizedWeights& b) {
    a.Swap(&b);
  }
  inline void Swap(BucketizedWeights* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BucketizedWeights* New() const final {
    return CreateMaybeMessage<BucketizedWeights>(nullptr);
  }

  BucketizedWeights* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BucketizedWeights>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BucketizedWeights& from);
  void MergeFrom(const BucketizedWeights& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BucketizedWeights* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "assist_ranker.BucketizedWeights";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoundariesFieldNumber = 1,
    kWeightsFieldNumber = 2,
    kDefaultWeightFieldNumber = 3,
  };
  // repeated float boundaries = 1 [packed = true];
  int boundaries_size() const;
  void clear_boundaries();
  float boundaries(int index) const;
  void set_boundaries(int index, float value);
  void add_boundaries(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      boundaries() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_boundaries();

  // repeated float weights = 2 [packed = true];
  int weights_size() const;
  void clear_weights();
  float weights(int index) const;
  void set_weights(int index, float value);
  void add_weights(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      weights() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_weights();

  // optional float default_weight = 3;
  bool has_default_weight() const;
  void clear_default_weight();
  float default_weight() const;
  void set_default_weight(float value);

  // @@protoc_insertion_point(class_scope:assist_ranker.BucketizedWeights)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > boundaries_;
  mutable std::atomic<int> _boundaries_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > weights_;
  mutable std::atomic<int> _weights_cached_byte_size_;
  float default_weight_;
  friend struct ::TableStruct_generic_5flogistic_5fregression_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class FeatureWeight :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:assist_ranker.FeatureWeight) */ {
 public:
  FeatureWeight();
  virtual ~FeatureWeight();

  FeatureWeight(const FeatureWeight& from);
  FeatureWeight(FeatureWeight&& from) noexcept
    : FeatureWeight() {
    *this = ::std::move(from);
  }

  inline FeatureWeight& operator=(const FeatureWeight& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeatureWeight& operator=(FeatureWeight&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FeatureWeight& default_instance();

  enum FeatureTypeCase {
    kScalar = 1,
    kOneHot = 2,
    kSparse = 3,
    kBucketized = 4,
    FEATURE_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeatureWeight* internal_default_instance() {
    return reinterpret_cast<const FeatureWeight*>(
               &_FeatureWeight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FeatureWeight& a, FeatureWeight& b) {
    a.Swap(&b);
  }
  inline void Swap(FeatureWeight* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FeatureWeight* New() const final {
    return CreateMaybeMessage<FeatureWeight>(nullptr);
  }

  FeatureWeight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FeatureWeight>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FeatureWeight& from);
  void MergeFrom(const FeatureWeight& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FeatureWeight* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "assist_ranker.FeatureWeight";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarFieldNumber = 1,
    kOneHotFieldNumber = 2,
    kSparseFieldNumber = 3,
    kBucketizedFieldNumber = 4,
  };
  // optional float scalar = 1;
  bool has_scalar() const;
  void clear_scalar();
  float scalar() const;
  void set_scalar(float value);

  // optional .assist_ranker.SparseWeights one_hot = 2;
  bool has_one_hot() const;
  void clear_one_hot();
  const ::assist_ranker::SparseWeights& one_hot() const;
  ::assist_ranker::SparseWeights* release_one_hot();
  ::assist_ranker::SparseWeights* mutable_one_hot();
  void set_allocated_one_hot(::assist_ranker::SparseWeights* one_hot);

  // optional .assist_ranker.SparseWeights sparse = 3;
  bool has_sparse() const;
  void clear_sparse();
  const ::assist_ranker::SparseWeights& sparse() const;
  ::assist_ranker::SparseWeights* release_sparse();
  ::assist_ranker::SparseWeights* mutable_sparse();
  void set_allocated_sparse(::assist_ranker::SparseWeights* sparse);

  // optional .assist_ranker.BucketizedWeights bucketized = 4;
  bool has_bucketized() const;
  void clear_bucketized();
  const ::assist_ranker::BucketizedWeights& bucketized() const;
  ::assist_ranker::BucketizedWeights* release_bucketized();
  ::assist_ranker::BucketizedWeights* mutable_bucketized();
  void set_allocated_bucketized(::assist_ranker::BucketizedWeights* bucketized);

  void clear_feature_type();
  FeatureTypeCase feature_type_case() const;
  // @@protoc_insertion_point(class_scope:assist_ranker.FeatureWeight)
 private:
  class _Internal;
  void set_has_scalar();
  void set_has_one_hot();
  void set_has_sparse();
  void set_has_bucketized();

  inline bool has_feature_type() const;
  inline void clear_has_feature_type();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  union FeatureTypeUnion {
    FeatureTypeUnion() {}
    float scalar_;
    ::assist_ranker::SparseWeights* one_hot_;
    ::assist_ranker::SparseWeights* sparse_;
    ::assist_ranker::BucketizedWeights* bucketized_;
  } feature_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_generic_5flogistic_5fregression_5fmodel_2eproto;
};
// -------------------------------------------------------------------

class GenericLogisticRegressionModel_WeightsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<GenericLogisticRegressionModel_WeightsEntry_DoNotUse, 
    std::string, ::assist_ranker::FeatureWeight,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<GenericLogisticRegressionModel_WeightsEntry_DoNotUse, 
    std::string, ::assist_ranker::FeatureWeight,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  GenericLogisticRegressionModel_WeightsEntry_DoNotUse();
  GenericLogisticRegressionModel_WeightsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GenericLogisticRegressionModel_WeightsEntry_DoNotUse& other);
  static const GenericLogisticRegressionModel_WeightsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GenericLogisticRegressionModel_WeightsEntry_DoNotUse*>(&_GenericLogisticRegressionModel_WeightsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
};

// -------------------------------------------------------------------

class GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
    0 > SuperType;
  GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse();
  GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse& other);
  static const GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse*>(&_GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
};

// -------------------------------------------------------------------

class GenericLogisticRegressionModel :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:assist_ranker.GenericLogisticRegressionModel) */ {
 public:
  GenericLogisticRegressionModel();
  virtual ~GenericLogisticRegressionModel();

  GenericLogisticRegressionModel(const GenericLogisticRegressionModel& from);
  GenericLogisticRegressionModel(GenericLogisticRegressionModel&& from) noexcept
    : GenericLogisticRegressionModel() {
    *this = ::std::move(from);
  }

  inline GenericLogisticRegressionModel& operator=(const GenericLogisticRegressionModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericLogisticRegressionModel& operator=(GenericLogisticRegressionModel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GenericLogisticRegressionModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenericLogisticRegressionModel* internal_default_instance() {
    return reinterpret_cast<const GenericLogisticRegressionModel*>(
               &_GenericLogisticRegressionModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GenericLogisticRegressionModel& a, GenericLogisticRegressionModel& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericLogisticRegressionModel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenericLogisticRegressionModel* New() const final {
    return CreateMaybeMessage<GenericLogisticRegressionModel>(nullptr);
  }

  GenericLogisticRegressionModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenericLogisticRegressionModel>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GenericLogisticRegressionModel& from);
  void MergeFrom(const GenericLogisticRegressionModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GenericLogisticRegressionModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "assist_ranker.GenericLogisticRegressionModel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kWeightsFieldNumber = 3,
    kFullnameWeightsFieldNumber = 5,
    kPreprocessorConfigFieldNumber = 6,
    kThresholdFieldNumber = 1,
    kBiasFieldNumber = 2,
    kIsPreprocessedModelFieldNumber = 4,
  };
  // map<string, .assist_ranker.FeatureWeight> weights = 3;
  int weights_size() const;
  void clear_weights();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::assist_ranker::FeatureWeight >&
      weights() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::assist_ranker::FeatureWeight >*
      mutable_weights();

  // map<string, float> fullname_weights = 5;
  int fullname_weights_size() const;
  void clear_fullname_weights();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
      fullname_weights() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
      mutable_fullname_weights();

  // optional .assist_ranker.ExamplePreprocessorConfig preprocessor_config = 6;
  bool has_preprocessor_config() const;
  void clear_preprocessor_config();
  const ::assist_ranker::ExamplePreprocessorConfig& preprocessor_config() const;
  ::assist_ranker::ExamplePreprocessorConfig* release_preprocessor_config();
  ::assist_ranker::ExamplePreprocessorConfig* mutable_preprocessor_config();
  void set_allocated_preprocessor_config(::assist_ranker::ExamplePreprocessorConfig* preprocessor_config);

  // optional float threshold = 1;
  bool has_threshold() const;
  void clear_threshold();
  float threshold() const;
  void set_threshold(float value);

  // optional float bias = 2;
  bool has_bias() const;
  void clear_bias();
  float bias() const;
  void set_bias(float value);

  // optional bool is_preprocessed_model = 4;
  bool has_is_preprocessed_model() const;
  void clear_is_preprocessed_model();
  bool is_preprocessed_model() const;
  void set_is_preprocessed_model(bool value);

  // @@protoc_insertion_point(class_scope:assist_ranker.GenericLogisticRegressionModel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
      GenericLogisticRegressionModel_WeightsEntry_DoNotUse,
      std::string, ::assist_ranker::FeatureWeight,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > weights_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
      GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse,
      std::string, float,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
      0 > fullname_weights_;
  ::assist_ranker::ExamplePreprocessorConfig* preprocessor_config_;
  float threshold_;
  float bias_;
  bool is_preprocessed_model_;
  friend struct ::TableStruct_generic_5flogistic_5fregression_5fmodel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SparseWeights

// map<string, float> weights = 1;
inline int SparseWeights::weights_size() const {
  return weights_.size();
}
inline void SparseWeights::clear_weights() {
  weights_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
SparseWeights::weights() const {
  // @@protoc_insertion_point(field_map:assist_ranker.SparseWeights.weights)
  return weights_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
SparseWeights::mutable_weights() {
  // @@protoc_insertion_point(field_mutable_map:assist_ranker.SparseWeights.weights)
  return weights_.MutableMap();
}

// optional float default_weight = 2;
inline bool SparseWeights::has_default_weight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SparseWeights::clear_default_weight() {
  default_weight_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float SparseWeights::default_weight() const {
  // @@protoc_insertion_point(field_get:assist_ranker.SparseWeights.default_weight)
  return default_weight_;
}
inline void SparseWeights::set_default_weight(float value) {
  _has_bits_[0] |= 0x00000001u;
  default_weight_ = value;
  // @@protoc_insertion_point(field_set:assist_ranker.SparseWeights.default_weight)
}

// -------------------------------------------------------------------

// BucketizedWeights

// repeated float boundaries = 1 [packed = true];
inline int BucketizedWeights::boundaries_size() const {
  return boundaries_.size();
}
inline void BucketizedWeights::clear_boundaries() {
  boundaries_.Clear();
}
inline float BucketizedWeights::boundaries(int index) const {
  // @@protoc_insertion_point(field_get:assist_ranker.BucketizedWeights.boundaries)
  return boundaries_.Get(index);
}
inline void BucketizedWeights::set_boundaries(int index, float value) {
  boundaries_.Set(index, value);
  // @@protoc_insertion_point(field_set:assist_ranker.BucketizedWeights.boundaries)
}
inline void BucketizedWeights::add_boundaries(float value) {
  boundaries_.Add(value);
  // @@protoc_insertion_point(field_add:assist_ranker.BucketizedWeights.boundaries)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BucketizedWeights::boundaries() const {
  // @@protoc_insertion_point(field_list:assist_ranker.BucketizedWeights.boundaries)
  return boundaries_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BucketizedWeights::mutable_boundaries() {
  // @@protoc_insertion_point(field_mutable_list:assist_ranker.BucketizedWeights.boundaries)
  return &boundaries_;
}

// repeated float weights = 2 [packed = true];
inline int BucketizedWeights::weights_size() const {
  return weights_.size();
}
inline void BucketizedWeights::clear_weights() {
  weights_.Clear();
}
inline float BucketizedWeights::weights(int index) const {
  // @@protoc_insertion_point(field_get:assist_ranker.BucketizedWeights.weights)
  return weights_.Get(index);
}
inline void BucketizedWeights::set_weights(int index, float value) {
  weights_.Set(index, value);
  // @@protoc_insertion_point(field_set:assist_ranker.BucketizedWeights.weights)
}
inline void BucketizedWeights::add_weights(float value) {
  weights_.Add(value);
  // @@protoc_insertion_point(field_add:assist_ranker.BucketizedWeights.weights)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
BucketizedWeights::weights() const {
  // @@protoc_insertion_point(field_list:assist_ranker.BucketizedWeights.weights)
  return weights_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
BucketizedWeights::mutable_weights() {
  // @@protoc_insertion_point(field_mutable_list:assist_ranker.BucketizedWeights.weights)
  return &weights_;
}

// optional float default_weight = 3;
inline bool BucketizedWeights::has_default_weight() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BucketizedWeights::clear_default_weight() {
  default_weight_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float BucketizedWeights::default_weight() const {
  // @@protoc_insertion_point(field_get:assist_ranker.BucketizedWeights.default_weight)
  return default_weight_;
}
inline void BucketizedWeights::set_default_weight(float value) {
  _has_bits_[0] |= 0x00000001u;
  default_weight_ = value;
  // @@protoc_insertion_point(field_set:assist_ranker.BucketizedWeights.default_weight)
}

// -------------------------------------------------------------------

// FeatureWeight

// optional float scalar = 1;
inline bool FeatureWeight::has_scalar() const {
  return feature_type_case() == kScalar;
}
inline void FeatureWeight::set_has_scalar() {
  _oneof_case_[0] = kScalar;
}
inline void FeatureWeight::clear_scalar() {
  if (has_scalar()) {
    feature_type_.scalar_ = 0;
    clear_has_feature_type();
  }
}
inline float FeatureWeight::scalar() const {
  // @@protoc_insertion_point(field_get:assist_ranker.FeatureWeight.scalar)
  if (has_scalar()) {
    return feature_type_.scalar_;
  }
  return 0;
}
inline void FeatureWeight::set_scalar(float value) {
  if (!has_scalar()) {
    clear_feature_type();
    set_has_scalar();
  }
  feature_type_.scalar_ = value;
  // @@protoc_insertion_point(field_set:assist_ranker.FeatureWeight.scalar)
}

// optional .assist_ranker.SparseWeights one_hot = 2;
inline bool FeatureWeight::has_one_hot() const {
  return feature_type_case() == kOneHot;
}
inline void FeatureWeight::set_has_one_hot() {
  _oneof_case_[0] = kOneHot;
}
inline void FeatureWeight::clear_one_hot() {
  if (has_one_hot()) {
    delete feature_type_.one_hot_;
    clear_has_feature_type();
  }
}
inline ::assist_ranker::SparseWeights* FeatureWeight::release_one_hot() {
  // @@protoc_insertion_point(field_release:assist_ranker.FeatureWeight.one_hot)
  if (has_one_hot()) {
    clear_has_feature_type();
      ::assist_ranker::SparseWeights* temp = feature_type_.one_hot_;
    feature_type_.one_hot_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::assist_ranker::SparseWeights& FeatureWeight::one_hot() const {
  // @@protoc_insertion_point(field_get:assist_ranker.FeatureWeight.one_hot)
  return has_one_hot()
      ? *feature_type_.one_hot_
      : *reinterpret_cast< ::assist_ranker::SparseWeights*>(&::assist_ranker::_SparseWeights_default_instance_);
}
inline ::assist_ranker::SparseWeights* FeatureWeight::mutable_one_hot() {
  if (!has_one_hot()) {
    clear_feature_type();
    set_has_one_hot();
    feature_type_.one_hot_ = CreateMaybeMessage< ::assist_ranker::SparseWeights >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:assist_ranker.FeatureWeight.one_hot)
  return feature_type_.one_hot_;
}

// optional .assist_ranker.SparseWeights sparse = 3;
inline bool FeatureWeight::has_sparse() const {
  return feature_type_case() == kSparse;
}
inline void FeatureWeight::set_has_sparse() {
  _oneof_case_[0] = kSparse;
}
inline void FeatureWeight::clear_sparse() {
  if (has_sparse()) {
    delete feature_type_.sparse_;
    clear_has_feature_type();
  }
}
inline ::assist_ranker::SparseWeights* FeatureWeight::release_sparse() {
  // @@protoc_insertion_point(field_release:assist_ranker.FeatureWeight.sparse)
  if (has_sparse()) {
    clear_has_feature_type();
      ::assist_ranker::SparseWeights* temp = feature_type_.sparse_;
    feature_type_.sparse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::assist_ranker::SparseWeights& FeatureWeight::sparse() const {
  // @@protoc_insertion_point(field_get:assist_ranker.FeatureWeight.sparse)
  return has_sparse()
      ? *feature_type_.sparse_
      : *reinterpret_cast< ::assist_ranker::SparseWeights*>(&::assist_ranker::_SparseWeights_default_instance_);
}
inline ::assist_ranker::SparseWeights* FeatureWeight::mutable_sparse() {
  if (!has_sparse()) {
    clear_feature_type();
    set_has_sparse();
    feature_type_.sparse_ = CreateMaybeMessage< ::assist_ranker::SparseWeights >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:assist_ranker.FeatureWeight.sparse)
  return feature_type_.sparse_;
}

// optional .assist_ranker.BucketizedWeights bucketized = 4;
inline bool FeatureWeight::has_bucketized() const {
  return feature_type_case() == kBucketized;
}
inline void FeatureWeight::set_has_bucketized() {
  _oneof_case_[0] = kBucketized;
}
inline void FeatureWeight::clear_bucketized() {
  if (has_bucketized()) {
    delete feature_type_.bucketized_;
    clear_has_feature_type();
  }
}
inline ::assist_ranker::BucketizedWeights* FeatureWeight::release_bucketized() {
  // @@protoc_insertion_point(field_release:assist_ranker.FeatureWeight.bucketized)
  if (has_bucketized()) {
    clear_has_feature_type();
      ::assist_ranker::BucketizedWeights* temp = feature_type_.bucketized_;
    feature_type_.bucketized_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::assist_ranker::BucketizedWeights& FeatureWeight::bucketized() const {
  // @@protoc_insertion_point(field_get:assist_ranker.FeatureWeight.bucketized)
  return has_bucketized()
      ? *feature_type_.bucketized_
      : *reinterpret_cast< ::assist_ranker::BucketizedWeights*>(&::assist_ranker::_BucketizedWeights_default_instance_);
}
inline ::assist_ranker::BucketizedWeights* FeatureWeight::mutable_bucketized() {
  if (!has_bucketized()) {
    clear_feature_type();
    set_has_bucketized();
    feature_type_.bucketized_ = CreateMaybeMessage< ::assist_ranker::BucketizedWeights >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:assist_ranker.FeatureWeight.bucketized)
  return feature_type_.bucketized_;
}

inline bool FeatureWeight::has_feature_type() const {
  return feature_type_case() != FEATURE_TYPE_NOT_SET;
}
inline void FeatureWeight::clear_has_feature_type() {
  _oneof_case_[0] = FEATURE_TYPE_NOT_SET;
}
inline FeatureWeight::FeatureTypeCase FeatureWeight::feature_type_case() const {
  return FeatureWeight::FeatureTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GenericLogisticRegressionModel

// optional float threshold = 1;
inline bool GenericLogisticRegressionModel::has_threshold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GenericLogisticRegressionModel::clear_threshold() {
  threshold_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float GenericLogisticRegressionModel::threshold() const {
  // @@protoc_insertion_point(field_get:assist_ranker.GenericLogisticRegressionModel.threshold)
  return threshold_;
}
inline void GenericLogisticRegressionModel::set_threshold(float value) {
  _has_bits_[0] |= 0x00000002u;
  threshold_ = value;
  // @@protoc_insertion_point(field_set:assist_ranker.GenericLogisticRegressionModel.threshold)
}

// optional float bias = 2;
inline bool GenericLogisticRegressionModel::has_bias() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GenericLogisticRegressionModel::clear_bias() {
  bias_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float GenericLogisticRegressionModel::bias() const {
  // @@protoc_insertion_point(field_get:assist_ranker.GenericLogisticRegressionModel.bias)
  return bias_;
}
inline void GenericLogisticRegressionModel::set_bias(float value) {
  _has_bits_[0] |= 0x00000004u;
  bias_ = value;
  // @@protoc_insertion_point(field_set:assist_ranker.GenericLogisticRegressionModel.bias)
}

// map<string, .assist_ranker.FeatureWeight> weights = 3;
inline int GenericLogisticRegressionModel::weights_size() const {
  return weights_.size();
}
inline void GenericLogisticRegressionModel::clear_weights() {
  weights_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::assist_ranker::FeatureWeight >&
GenericLogisticRegressionModel::weights() const {
  // @@protoc_insertion_point(field_map:assist_ranker.GenericLogisticRegressionModel.weights)
  return weights_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::assist_ranker::FeatureWeight >*
GenericLogisticRegressionModel::mutable_weights() {
  // @@protoc_insertion_point(field_mutable_map:assist_ranker.GenericLogisticRegressionModel.weights)
  return weights_.MutableMap();
}

// optional bool is_preprocessed_model = 4;
inline bool GenericLogisticRegressionModel::has_is_preprocessed_model() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GenericLogisticRegressionModel::clear_is_preprocessed_model() {
  is_preprocessed_model_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool GenericLogisticRegressionModel::is_preprocessed_model() const {
  // @@protoc_insertion_point(field_get:assist_ranker.GenericLogisticRegressionModel.is_preprocessed_model)
  return is_preprocessed_model_;
}
inline void GenericLogisticRegressionModel::set_is_preprocessed_model(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_preprocessed_model_ = value;
  // @@protoc_insertion_point(field_set:assist_ranker.GenericLogisticRegressionModel.is_preprocessed_model)
}

// map<string, float> fullname_weights = 5;
inline int GenericLogisticRegressionModel::fullname_weights_size() const {
  return fullname_weights_.size();
}
inline void GenericLogisticRegressionModel::clear_fullname_weights() {
  fullname_weights_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
GenericLogisticRegressionModel::fullname_weights() const {
  // @@protoc_insertion_point(field_map:assist_ranker.GenericLogisticRegressionModel.fullname_weights)
  return fullname_weights_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
GenericLogisticRegressionModel::mutable_fullname_weights() {
  // @@protoc_insertion_point(field_mutable_map:assist_ranker.GenericLogisticRegressionModel.fullname_weights)
  return fullname_weights_.MutableMap();
}

// optional .assist_ranker.ExamplePreprocessorConfig preprocessor_config = 6;
inline bool GenericLogisticRegressionModel::has_preprocessor_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::assist_ranker::ExamplePreprocessorConfig& GenericLogisticRegressionModel::preprocessor_config() const {
  const ::assist_ranker::ExamplePreprocessorConfig* p = preprocessor_config_;
  // @@protoc_insertion_point(field_get:assist_ranker.GenericLogisticRegressionModel.preprocessor_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::assist_ranker::ExamplePreprocessorConfig*>(
      &::assist_ranker::_ExamplePreprocessorConfig_default_instance_);
}
inline ::assist_ranker::ExamplePreprocessorConfig* GenericLogisticRegressionModel::release_preprocessor_config() {
  // @@protoc_insertion_point(field_release:assist_ranker.GenericLogisticRegressionModel.preprocessor_config)
  _has_bits_[0] &= ~0x00000001u;
  ::assist_ranker::ExamplePreprocessorConfig* temp = preprocessor_config_;
  preprocessor_config_ = nullptr;
  return temp;
}
inline ::assist_ranker::ExamplePreprocessorConfig* GenericLogisticRegressionModel::mutable_preprocessor_config() {
  _has_bits_[0] |= 0x00000001u;
  if (preprocessor_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::assist_ranker::ExamplePreprocessorConfig>(GetArenaNoVirtual());
    preprocessor_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:assist_ranker.GenericLogisticRegressionModel.preprocessor_config)
  return preprocessor_config_;
}
inline void GenericLogisticRegressionModel::set_allocated_preprocessor_config(::assist_ranker::ExamplePreprocessorConfig* preprocessor_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(preprocessor_config_);
  }
  if (preprocessor_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      preprocessor_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preprocessor_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  preprocessor_config_ = preprocessor_config;
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.GenericLogisticRegressionModel.preprocessor_config)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace assist_ranker

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_generic_5flogistic_5fregression_5fmodel_2eproto

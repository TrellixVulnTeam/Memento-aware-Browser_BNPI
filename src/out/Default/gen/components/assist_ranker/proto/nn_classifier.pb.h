// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nn_classifier.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nn_5fclassifier_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nn_5fclassifier_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "example_preprocessor.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nn_5fclassifier_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nn_5fclassifier_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace assist_ranker {
class FloatVector;
class FloatVectorDefaultTypeInternal;
extern FloatVectorDefaultTypeInternal _FloatVector_default_instance_;
class NNClassifierModel;
class NNClassifierModelDefaultTypeInternal;
extern NNClassifierModelDefaultTypeInternal _NNClassifierModel_default_instance_;
class NNLayer;
class NNLayerDefaultTypeInternal;
extern NNLayerDefaultTypeInternal _NNLayer_default_instance_;
}  // namespace assist_ranker
PROTOBUF_NAMESPACE_OPEN
template<> ::assist_ranker::FloatVector* Arena::CreateMaybeMessage<::assist_ranker::FloatVector>(Arena*);
template<> ::assist_ranker::NNClassifierModel* Arena::CreateMaybeMessage<::assist_ranker::NNClassifierModel>(Arena*);
template<> ::assist_ranker::NNLayer* Arena::CreateMaybeMessage<::assist_ranker::NNLayer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace assist_ranker {

// ===================================================================

class FloatVector :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:assist_ranker.FloatVector) */ {
 public:
  FloatVector();
  virtual ~FloatVector();

  FloatVector(const FloatVector& from);
  FloatVector(FloatVector&& from) noexcept
    : FloatVector() {
    *this = ::std::move(from);
  }

  inline FloatVector& operator=(const FloatVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatVector& operator=(FloatVector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FloatVector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FloatVector* internal_default_instance() {
    return reinterpret_cast<const FloatVector*>(
               &_FloatVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FloatVector& a, FloatVector& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatVector* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FloatVector* New() const final {
    return CreateMaybeMessage<FloatVector>(nullptr);
  }

  FloatVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FloatVector>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FloatVector& from);
  void MergeFrom(const FloatVector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FloatVector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "assist_ranker.FloatVector";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated float values = 1;
  int values_size() const;
  void clear_values();
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:assist_ranker.FloatVector)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  friend struct ::TableStruct_nn_5fclassifier_2eproto;
};
// -------------------------------------------------------------------

class NNLayer :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:assist_ranker.NNLayer) */ {
 public:
  NNLayer();
  virtual ~NNLayer();

  NNLayer(const NNLayer& from);
  NNLayer(NNLayer&& from) noexcept
    : NNLayer() {
    *this = ::std::move(from);
  }

  inline NNLayer& operator=(const NNLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline NNLayer& operator=(NNLayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const NNLayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NNLayer* internal_default_instance() {
    return reinterpret_cast<const NNLayer*>(
               &_NNLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NNLayer& a, NNLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(NNLayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NNLayer* New() const final {
    return CreateMaybeMessage<NNLayer>(nullptr);
  }

  NNLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NNLayer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NNLayer& from);
  void MergeFrom(const NNLayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NNLayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "assist_ranker.NNLayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightsFieldNumber = 1,
    kBiasesFieldNumber = 2,
  };
  // repeated .assist_ranker.FloatVector weights = 1;
  int weights_size() const;
  void clear_weights();
  ::assist_ranker::FloatVector* mutable_weights(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::assist_ranker::FloatVector >*
      mutable_weights();
  const ::assist_ranker::FloatVector& weights(int index) const;
  ::assist_ranker::FloatVector* add_weights();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::assist_ranker::FloatVector >&
      weights() const;

  // optional .assist_ranker.FloatVector biases = 2;
  bool has_biases() const;
  void clear_biases();
  const ::assist_ranker::FloatVector& biases() const;
  ::assist_ranker::FloatVector* release_biases();
  ::assist_ranker::FloatVector* mutable_biases();
  void set_allocated_biases(::assist_ranker::FloatVector* biases);

  // @@protoc_insertion_point(class_scope:assist_ranker.NNLayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::assist_ranker::FloatVector > weights_;
  ::assist_ranker::FloatVector* biases_;
  friend struct ::TableStruct_nn_5fclassifier_2eproto;
};
// -------------------------------------------------------------------

class NNClassifierModel :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:assist_ranker.NNClassifierModel) */ {
 public:
  NNClassifierModel();
  virtual ~NNClassifierModel();

  NNClassifierModel(const NNClassifierModel& from);
  NNClassifierModel(NNClassifierModel&& from) noexcept
    : NNClassifierModel() {
    *this = ::std::move(from);
  }

  inline NNClassifierModel& operator=(const NNClassifierModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline NNClassifierModel& operator=(NNClassifierModel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const NNClassifierModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NNClassifierModel* internal_default_instance() {
    return reinterpret_cast<const NNClassifierModel*>(
               &_NNClassifierModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NNClassifierModel& a, NNClassifierModel& b) {
    a.Swap(&b);
  }
  inline void Swap(NNClassifierModel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NNClassifierModel* New() const final {
    return CreateMaybeMessage<NNClassifierModel>(nullptr);
  }

  NNClassifierModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NNClassifierModel>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const NNClassifierModel& from);
  void MergeFrom(const NNClassifierModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NNClassifierModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "assist_ranker.NNClassifierModel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHiddenLayerFieldNumber = 1,
    kLogitsLayerFieldNumber = 2,
    kPreprocessorConfigFieldNumber = 3,
  };
  // optional .assist_ranker.NNLayer hidden_layer = 1;
  bool has_hidden_layer() const;
  void clear_hidden_layer();
  const ::assist_ranker::NNLayer& hidden_layer() const;
  ::assist_ranker::NNLayer* release_hidden_layer();
  ::assist_ranker::NNLayer* mutable_hidden_layer();
  void set_allocated_hidden_layer(::assist_ranker::NNLayer* hidden_layer);

  // optional .assist_ranker.NNLayer logits_layer = 2;
  bool has_logits_layer() const;
  void clear_logits_layer();
  const ::assist_ranker::NNLayer& logits_layer() const;
  ::assist_ranker::NNLayer* release_logits_layer();
  ::assist_ranker::NNLayer* mutable_logits_layer();
  void set_allocated_logits_layer(::assist_ranker::NNLayer* logits_layer);

  // optional .assist_ranker.ExamplePreprocessorConfig preprocessor_config = 3;
  bool has_preprocessor_config() const;
  void clear_preprocessor_config();
  const ::assist_ranker::ExamplePreprocessorConfig& preprocessor_config() const;
  ::assist_ranker::ExamplePreprocessorConfig* release_preprocessor_config();
  ::assist_ranker::ExamplePreprocessorConfig* mutable_preprocessor_config();
  void set_allocated_preprocessor_config(::assist_ranker::ExamplePreprocessorConfig* preprocessor_config);

  // @@protoc_insertion_point(class_scope:assist_ranker.NNClassifierModel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::assist_ranker::NNLayer* hidden_layer_;
  ::assist_ranker::NNLayer* logits_layer_;
  ::assist_ranker::ExamplePreprocessorConfig* preprocessor_config_;
  friend struct ::TableStruct_nn_5fclassifier_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FloatVector

// repeated float values = 1;
inline int FloatVector::values_size() const {
  return values_.size();
}
inline void FloatVector::clear_values() {
  values_.Clear();
}
inline float FloatVector::values(int index) const {
  // @@protoc_insertion_point(field_get:assist_ranker.FloatVector.values)
  return values_.Get(index);
}
inline void FloatVector::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:assist_ranker.FloatVector.values)
}
inline void FloatVector::add_values(float value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:assist_ranker.FloatVector.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatVector::values() const {
  // @@protoc_insertion_point(field_list:assist_ranker.FloatVector.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatVector::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:assist_ranker.FloatVector.values)
  return &values_;
}

// -------------------------------------------------------------------

// NNLayer

// repeated .assist_ranker.FloatVector weights = 1;
inline int NNLayer::weights_size() const {
  return weights_.size();
}
inline void NNLayer::clear_weights() {
  weights_.Clear();
}
inline ::assist_ranker::FloatVector* NNLayer::mutable_weights(int index) {
  // @@protoc_insertion_point(field_mutable:assist_ranker.NNLayer.weights)
  return weights_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::assist_ranker::FloatVector >*
NNLayer::mutable_weights() {
  // @@protoc_insertion_point(field_mutable_list:assist_ranker.NNLayer.weights)
  return &weights_;
}
inline const ::assist_ranker::FloatVector& NNLayer::weights(int index) const {
  // @@protoc_insertion_point(field_get:assist_ranker.NNLayer.weights)
  return weights_.Get(index);
}
inline ::assist_ranker::FloatVector* NNLayer::add_weights() {
  // @@protoc_insertion_point(field_add:assist_ranker.NNLayer.weights)
  return weights_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::assist_ranker::FloatVector >&
NNLayer::weights() const {
  // @@protoc_insertion_point(field_list:assist_ranker.NNLayer.weights)
  return weights_;
}

// optional .assist_ranker.FloatVector biases = 2;
inline bool NNLayer::has_biases() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NNLayer::clear_biases() {
  if (biases_ != nullptr) biases_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::assist_ranker::FloatVector& NNLayer::biases() const {
  const ::assist_ranker::FloatVector* p = biases_;
  // @@protoc_insertion_point(field_get:assist_ranker.NNLayer.biases)
  return p != nullptr ? *p : *reinterpret_cast<const ::assist_ranker::FloatVector*>(
      &::assist_ranker::_FloatVector_default_instance_);
}
inline ::assist_ranker::FloatVector* NNLayer::release_biases() {
  // @@protoc_insertion_point(field_release:assist_ranker.NNLayer.biases)
  _has_bits_[0] &= ~0x00000001u;
  ::assist_ranker::FloatVector* temp = biases_;
  biases_ = nullptr;
  return temp;
}
inline ::assist_ranker::FloatVector* NNLayer::mutable_biases() {
  _has_bits_[0] |= 0x00000001u;
  if (biases_ == nullptr) {
    auto* p = CreateMaybeMessage<::assist_ranker::FloatVector>(GetArenaNoVirtual());
    biases_ = p;
  }
  // @@protoc_insertion_point(field_mutable:assist_ranker.NNLayer.biases)
  return biases_;
}
inline void NNLayer::set_allocated_biases(::assist_ranker::FloatVector* biases) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete biases_;
  }
  if (biases) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      biases = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, biases, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  biases_ = biases;
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.NNLayer.biases)
}

// -------------------------------------------------------------------

// NNClassifierModel

// optional .assist_ranker.NNLayer hidden_layer = 1;
inline bool NNClassifierModel::has_hidden_layer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NNClassifierModel::clear_hidden_layer() {
  if (hidden_layer_ != nullptr) hidden_layer_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::assist_ranker::NNLayer& NNClassifierModel::hidden_layer() const {
  const ::assist_ranker::NNLayer* p = hidden_layer_;
  // @@protoc_insertion_point(field_get:assist_ranker.NNClassifierModel.hidden_layer)
  return p != nullptr ? *p : *reinterpret_cast<const ::assist_ranker::NNLayer*>(
      &::assist_ranker::_NNLayer_default_instance_);
}
inline ::assist_ranker::NNLayer* NNClassifierModel::release_hidden_layer() {
  // @@protoc_insertion_point(field_release:assist_ranker.NNClassifierModel.hidden_layer)
  _has_bits_[0] &= ~0x00000001u;
  ::assist_ranker::NNLayer* temp = hidden_layer_;
  hidden_layer_ = nullptr;
  return temp;
}
inline ::assist_ranker::NNLayer* NNClassifierModel::mutable_hidden_layer() {
  _has_bits_[0] |= 0x00000001u;
  if (hidden_layer_ == nullptr) {
    auto* p = CreateMaybeMessage<::assist_ranker::NNLayer>(GetArenaNoVirtual());
    hidden_layer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:assist_ranker.NNClassifierModel.hidden_layer)
  return hidden_layer_;
}
inline void NNClassifierModel::set_allocated_hidden_layer(::assist_ranker::NNLayer* hidden_layer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hidden_layer_;
  }
  if (hidden_layer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hidden_layer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hidden_layer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hidden_layer_ = hidden_layer;
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.NNClassifierModel.hidden_layer)
}

// optional .assist_ranker.NNLayer logits_layer = 2;
inline bool NNClassifierModel::has_logits_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NNClassifierModel::clear_logits_layer() {
  if (logits_layer_ != nullptr) logits_layer_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::assist_ranker::NNLayer& NNClassifierModel::logits_layer() const {
  const ::assist_ranker::NNLayer* p = logits_layer_;
  // @@protoc_insertion_point(field_get:assist_ranker.NNClassifierModel.logits_layer)
  return p != nullptr ? *p : *reinterpret_cast<const ::assist_ranker::NNLayer*>(
      &::assist_ranker::_NNLayer_default_instance_);
}
inline ::assist_ranker::NNLayer* NNClassifierModel::release_logits_layer() {
  // @@protoc_insertion_point(field_release:assist_ranker.NNClassifierModel.logits_layer)
  _has_bits_[0] &= ~0x00000002u;
  ::assist_ranker::NNLayer* temp = logits_layer_;
  logits_layer_ = nullptr;
  return temp;
}
inline ::assist_ranker::NNLayer* NNClassifierModel::mutable_logits_layer() {
  _has_bits_[0] |= 0x00000002u;
  if (logits_layer_ == nullptr) {
    auto* p = CreateMaybeMessage<::assist_ranker::NNLayer>(GetArenaNoVirtual());
    logits_layer_ = p;
  }
  // @@protoc_insertion_point(field_mutable:assist_ranker.NNClassifierModel.logits_layer)
  return logits_layer_;
}
inline void NNClassifierModel::set_allocated_logits_layer(::assist_ranker::NNLayer* logits_layer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete logits_layer_;
  }
  if (logits_layer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      logits_layer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logits_layer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  logits_layer_ = logits_layer;
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.NNClassifierModel.logits_layer)
}

// optional .assist_ranker.ExamplePreprocessorConfig preprocessor_config = 3;
inline bool NNClassifierModel::has_preprocessor_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::assist_ranker::ExamplePreprocessorConfig& NNClassifierModel::preprocessor_config() const {
  const ::assist_ranker::ExamplePreprocessorConfig* p = preprocessor_config_;
  // @@protoc_insertion_point(field_get:assist_ranker.NNClassifierModel.preprocessor_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::assist_ranker::ExamplePreprocessorConfig*>(
      &::assist_ranker::_ExamplePreprocessorConfig_default_instance_);
}
inline ::assist_ranker::ExamplePreprocessorConfig* NNClassifierModel::release_preprocessor_config() {
  // @@protoc_insertion_point(field_release:assist_ranker.NNClassifierModel.preprocessor_config)
  _has_bits_[0] &= ~0x00000004u;
  ::assist_ranker::ExamplePreprocessorConfig* temp = preprocessor_config_;
  preprocessor_config_ = nullptr;
  return temp;
}
inline ::assist_ranker::ExamplePreprocessorConfig* NNClassifierModel::mutable_preprocessor_config() {
  _has_bits_[0] |= 0x00000004u;
  if (preprocessor_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::assist_ranker::ExamplePreprocessorConfig>(GetArenaNoVirtual());
    preprocessor_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:assist_ranker.NNClassifierModel.preprocessor_config)
  return preprocessor_config_;
}
inline void NNClassifierModel::set_allocated_preprocessor_config(::assist_ranker::ExamplePreprocessorConfig* preprocessor_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(preprocessor_config_);
  }
  if (preprocessor_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      preprocessor_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preprocessor_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  preprocessor_config_ = preprocessor_config;
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.NNClassifierModel.preprocessor_config)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace assist_ranker

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nn_5fclassifier_2eproto

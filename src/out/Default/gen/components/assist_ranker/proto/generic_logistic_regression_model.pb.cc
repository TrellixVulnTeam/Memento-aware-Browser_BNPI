// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: generic_logistic_regression_model.proto

#include "generic_logistic_regression_model.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_generic_5flogistic_5fregression_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BucketizedWeights_generic_5flogistic_5fregression_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_example_5fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ExamplePreprocessorConfig_example_5fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_generic_5flogistic_5fregression_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FeatureWeight_generic_5flogistic_5fregression_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_generic_5flogistic_5fregression_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse_generic_5flogistic_5fregression_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_generic_5flogistic_5fregression_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GenericLogisticRegressionModel_WeightsEntry_DoNotUse_generic_5flogistic_5fregression_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_generic_5flogistic_5fregression_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SparseWeights_generic_5flogistic_5fregression_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_generic_5flogistic_5fregression_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SparseWeights_WeightsEntry_DoNotUse_generic_5flogistic_5fregression_5fmodel_2eproto;
namespace assist_ranker {
class SparseWeights_WeightsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SparseWeights_WeightsEntry_DoNotUse> _instance;
} _SparseWeights_WeightsEntry_DoNotUse_default_instance_;
class SparseWeightsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SparseWeights> _instance;
} _SparseWeights_default_instance_;
class BucketizedWeightsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BucketizedWeights> _instance;
} _BucketizedWeights_default_instance_;
class FeatureWeightDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FeatureWeight> _instance;
  float scalar_;
  const ::assist_ranker::SparseWeights* one_hot_;
  const ::assist_ranker::SparseWeights* sparse_;
  const ::assist_ranker::BucketizedWeights* bucketized_;
} _FeatureWeight_default_instance_;
class GenericLogisticRegressionModel_WeightsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenericLogisticRegressionModel_WeightsEntry_DoNotUse> _instance;
} _GenericLogisticRegressionModel_WeightsEntry_DoNotUse_default_instance_;
class GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse> _instance;
} _GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse_default_instance_;
class GenericLogisticRegressionModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenericLogisticRegressionModel> _instance;
} _GenericLogisticRegressionModel_default_instance_;
}  // namespace assist_ranker
static void InitDefaultsscc_info_BucketizedWeights_generic_5flogistic_5fregression_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::assist_ranker::_BucketizedWeights_default_instance_;
    new (ptr) ::assist_ranker::BucketizedWeights();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::assist_ranker::BucketizedWeights::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BucketizedWeights_generic_5flogistic_5fregression_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BucketizedWeights_generic_5flogistic_5fregression_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_FeatureWeight_generic_5flogistic_5fregression_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::assist_ranker::_FeatureWeight_default_instance_;
    new (ptr) ::assist_ranker::FeatureWeight();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::assist_ranker::FeatureWeight::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FeatureWeight_generic_5flogistic_5fregression_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_FeatureWeight_generic_5flogistic_5fregression_5fmodel_2eproto}, {
      &scc_info_SparseWeights_generic_5flogistic_5fregression_5fmodel_2eproto.base,
      &scc_info_BucketizedWeights_generic_5flogistic_5fregression_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_GenericLogisticRegressionModel_generic_5flogistic_5fregression_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::assist_ranker::_GenericLogisticRegressionModel_default_instance_;
    new (ptr) ::assist_ranker::GenericLogisticRegressionModel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::assist_ranker::GenericLogisticRegressionModel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GenericLogisticRegressionModel_generic_5flogistic_5fregression_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_GenericLogisticRegressionModel_generic_5flogistic_5fregression_5fmodel_2eproto}, {
      &scc_info_GenericLogisticRegressionModel_WeightsEntry_DoNotUse_generic_5flogistic_5fregression_5fmodel_2eproto.base,
      &scc_info_GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse_generic_5flogistic_5fregression_5fmodel_2eproto.base,
      &scc_info_ExamplePreprocessorConfig_example_5fpreprocessor_2eproto.base,}};

static void InitDefaultsscc_info_GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse_generic_5flogistic_5fregression_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::assist_ranker::_GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse_default_instance_;
    new (ptr) ::assist_ranker::GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse();
  }
  ::assist_ranker::GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse_generic_5flogistic_5fregression_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse_generic_5flogistic_5fregression_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_GenericLogisticRegressionModel_WeightsEntry_DoNotUse_generic_5flogistic_5fregression_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::assist_ranker::_GenericLogisticRegressionModel_WeightsEntry_DoNotUse_default_instance_;
    new (ptr) ::assist_ranker::GenericLogisticRegressionModel_WeightsEntry_DoNotUse();
  }
  ::assist_ranker::GenericLogisticRegressionModel_WeightsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GenericLogisticRegressionModel_WeightsEntry_DoNotUse_generic_5flogistic_5fregression_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GenericLogisticRegressionModel_WeightsEntry_DoNotUse_generic_5flogistic_5fregression_5fmodel_2eproto}, {
      &scc_info_FeatureWeight_generic_5flogistic_5fregression_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_SparseWeights_generic_5flogistic_5fregression_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::assist_ranker::_SparseWeights_default_instance_;
    new (ptr) ::assist_ranker::SparseWeights();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::assist_ranker::SparseWeights::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SparseWeights_generic_5flogistic_5fregression_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SparseWeights_generic_5flogistic_5fregression_5fmodel_2eproto}, {
      &scc_info_SparseWeights_WeightsEntry_DoNotUse_generic_5flogistic_5fregression_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_SparseWeights_WeightsEntry_DoNotUse_generic_5flogistic_5fregression_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::assist_ranker::_SparseWeights_WeightsEntry_DoNotUse_default_instance_;
    new (ptr) ::assist_ranker::SparseWeights_WeightsEntry_DoNotUse();
  }
  ::assist_ranker::SparseWeights_WeightsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SparseWeights_WeightsEntry_DoNotUse_generic_5flogistic_5fregression_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SparseWeights_WeightsEntry_DoNotUse_generic_5flogistic_5fregression_5fmodel_2eproto}, {}};

namespace assist_ranker {

// ===================================================================

SparseWeights_WeightsEntry_DoNotUse::SparseWeights_WeightsEntry_DoNotUse() {}
SparseWeights_WeightsEntry_DoNotUse::SparseWeights_WeightsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SparseWeights_WeightsEntry_DoNotUse::MergeFrom(const SparseWeights_WeightsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

void SparseWeights::InitAsDefaultInstance() {
}
class SparseWeights::_Internal {
 public:
  using HasBits = decltype(std::declval<SparseWeights>()._has_bits_);
  static void set_has_default_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SparseWeights::SparseWeights()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:assist_ranker.SparseWeights)
}
SparseWeights::SparseWeights(const SparseWeights& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  weights_.MergeFrom(from.weights_);
  default_weight_ = from.default_weight_;
  // @@protoc_insertion_point(copy_constructor:assist_ranker.SparseWeights)
}

void SparseWeights::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SparseWeights_generic_5flogistic_5fregression_5fmodel_2eproto.base);
  default_weight_ = 0;
}

SparseWeights::~SparseWeights() {
  // @@protoc_insertion_point(destructor:assist_ranker.SparseWeights)
  SharedDtor();
}

void SparseWeights::SharedDtor() {
}

void SparseWeights::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SparseWeights& SparseWeights::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SparseWeights_generic_5flogistic_5fregression_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void SparseWeights::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.SparseWeights)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weights_.Clear();
  default_weight_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SparseWeights::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, float> weights = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&weights_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional float default_weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_default_weight(&has_bits);
          default_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SparseWeights::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:assist_ranker.SparseWeights)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, float> weights = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          SparseWeights_WeightsEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
              SparseWeights_WeightsEntry_DoNotUse,
              std::string, float,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, float > > parser(&weights_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float default_weight = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_default_weight(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &default_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:assist_ranker.SparseWeights)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:assist_ranker.SparseWeights)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SparseWeights::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:assist_ranker.SparseWeights)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, float> weights = 1;
  if (!this->weights().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->weights().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->weights().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->weights().begin();
          it != this->weights().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        SparseWeights_WeightsEntry_DoNotUse::Funcs::SerializeToCodedStream(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->weights().begin();
          it != this->weights().end(); ++it) {
        SparseWeights_WeightsEntry_DoNotUse::Funcs::SerializeToCodedStream(1, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  cached_has_bits = _has_bits_[0];
  // optional float default_weight = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->default_weight(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:assist_ranker.SparseWeights)
}

size_t SparseWeights::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.SparseWeights)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, float> weights = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->weights_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
      it = this->weights().begin();
      it != this->weights().end(); ++it) {
    total_size += SparseWeights_WeightsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // optional float default_weight = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SparseWeights::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const SparseWeights*>(
      &from));
}

void SparseWeights::MergeFrom(const SparseWeights& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.SparseWeights)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weights_.MergeFrom(from.weights_);
  if (from.has_default_weight()) {
    set_default_weight(from.default_weight());
  }
}

void SparseWeights::CopyFrom(const SparseWeights& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.SparseWeights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseWeights::IsInitialized() const {
  return true;
}

void SparseWeights::InternalSwap(SparseWeights* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  weights_.Swap(&other->weights_);
  swap(default_weight_, other->default_weight_);
}

std::string SparseWeights::GetTypeName() const {
  return "assist_ranker.SparseWeights";
}


// ===================================================================

void BucketizedWeights::InitAsDefaultInstance() {
}
class BucketizedWeights::_Internal {
 public:
  using HasBits = decltype(std::declval<BucketizedWeights>()._has_bits_);
  static void set_has_default_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

BucketizedWeights::BucketizedWeights()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:assist_ranker.BucketizedWeights)
}
BucketizedWeights::BucketizedWeights(const BucketizedWeights& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      boundaries_(from.boundaries_),
      weights_(from.weights_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  default_weight_ = from.default_weight_;
  // @@protoc_insertion_point(copy_constructor:assist_ranker.BucketizedWeights)
}

void BucketizedWeights::SharedCtor() {
  default_weight_ = 0;
}

BucketizedWeights::~BucketizedWeights() {
  // @@protoc_insertion_point(destructor:assist_ranker.BucketizedWeights)
  SharedDtor();
}

void BucketizedWeights::SharedDtor() {
}

void BucketizedWeights::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BucketizedWeights& BucketizedWeights::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BucketizedWeights_generic_5flogistic_5fregression_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void BucketizedWeights::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.BucketizedWeights)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boundaries_.Clear();
  weights_.Clear();
  default_weight_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BucketizedWeights::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float boundaries = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_boundaries(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          add_boundaries(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float weights = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_weights(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          add_weights(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float default_weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_default_weight(&has_bits);
          default_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BucketizedWeights::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:assist_ranker.BucketizedWeights)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float boundaries = 1 [packed = true];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_boundaries())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_boundaries())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float weights = 2 [packed = true];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_weights())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_weights())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float default_weight = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {
          _Internal::set_has_default_weight(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &default_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:assist_ranker.BucketizedWeights)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:assist_ranker.BucketizedWeights)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BucketizedWeights::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:assist_ranker.BucketizedWeights)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float boundaries = 1 [packed = true];
  if (this->boundaries_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_boundaries_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->boundaries().data(), this->boundaries_size(), output);
  }

  // repeated float weights = 2 [packed = true];
  if (this->weights_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_weights_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->weights().data(), this->weights_size(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional float default_weight = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->default_weight(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:assist_ranker.BucketizedWeights)
}

size_t BucketizedWeights::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.BucketizedWeights)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float boundaries = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->boundaries_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _boundaries_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float weights = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->weights_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _weights_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional float default_weight = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BucketizedWeights::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BucketizedWeights*>(
      &from));
}

void BucketizedWeights::MergeFrom(const BucketizedWeights& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.BucketizedWeights)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  boundaries_.MergeFrom(from.boundaries_);
  weights_.MergeFrom(from.weights_);
  if (from.has_default_weight()) {
    set_default_weight(from.default_weight());
  }
}

void BucketizedWeights::CopyFrom(const BucketizedWeights& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.BucketizedWeights)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BucketizedWeights::IsInitialized() const {
  return true;
}

void BucketizedWeights::InternalSwap(BucketizedWeights* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  boundaries_.InternalSwap(&other->boundaries_);
  weights_.InternalSwap(&other->weights_);
  swap(default_weight_, other->default_weight_);
}

std::string BucketizedWeights::GetTypeName() const {
  return "assist_ranker.BucketizedWeights";
}


// ===================================================================

void FeatureWeight::InitAsDefaultInstance() {
}
class FeatureWeight::_Internal {
 public:
  using HasBits = decltype(std::declval<FeatureWeight>()._has_bits_);
  static const ::assist_ranker::SparseWeights& one_hot(const FeatureWeight* msg);
  static const ::assist_ranker::SparseWeights& sparse(const FeatureWeight* msg);
  static const ::assist_ranker::BucketizedWeights& bucketized(const FeatureWeight* msg);
};

const ::assist_ranker::SparseWeights&
FeatureWeight::_Internal::one_hot(const FeatureWeight* msg) {
  return *msg->feature_type_.one_hot_;
}
const ::assist_ranker::SparseWeights&
FeatureWeight::_Internal::sparse(const FeatureWeight* msg) {
  return *msg->feature_type_.sparse_;
}
const ::assist_ranker::BucketizedWeights&
FeatureWeight::_Internal::bucketized(const FeatureWeight* msg) {
  return *msg->feature_type_.bucketized_;
}
void FeatureWeight::set_allocated_one_hot(::assist_ranker::SparseWeights* one_hot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_feature_type();
  if (one_hot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      one_hot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, one_hot, submessage_arena);
    }
    set_has_one_hot();
    feature_type_.one_hot_ = one_hot;
  }
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.FeatureWeight.one_hot)
}
void FeatureWeight::set_allocated_sparse(::assist_ranker::SparseWeights* sparse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_feature_type();
  if (sparse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sparse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sparse, submessage_arena);
    }
    set_has_sparse();
    feature_type_.sparse_ = sparse;
  }
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.FeatureWeight.sparse)
}
void FeatureWeight::set_allocated_bucketized(::assist_ranker::BucketizedWeights* bucketized) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_feature_type();
  if (bucketized) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bucketized = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bucketized, submessage_arena);
    }
    set_has_bucketized();
    feature_type_.bucketized_ = bucketized;
  }
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.FeatureWeight.bucketized)
}
FeatureWeight::FeatureWeight()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:assist_ranker.FeatureWeight)
}
FeatureWeight::FeatureWeight(const FeatureWeight& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_feature_type();
  switch (from.feature_type_case()) {
    case kScalar: {
      set_scalar(from.scalar());
      break;
    }
    case kOneHot: {
      mutable_one_hot()->::assist_ranker::SparseWeights::MergeFrom(from.one_hot());
      break;
    }
    case kSparse: {
      mutable_sparse()->::assist_ranker::SparseWeights::MergeFrom(from.sparse());
      break;
    }
    case kBucketized: {
      mutable_bucketized()->::assist_ranker::BucketizedWeights::MergeFrom(from.bucketized());
      break;
    }
    case FEATURE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:assist_ranker.FeatureWeight)
}

void FeatureWeight::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FeatureWeight_generic_5flogistic_5fregression_5fmodel_2eproto.base);
  clear_has_feature_type();
}

FeatureWeight::~FeatureWeight() {
  // @@protoc_insertion_point(destructor:assist_ranker.FeatureWeight)
  SharedDtor();
}

void FeatureWeight::SharedDtor() {
  if (has_feature_type()) {
    clear_feature_type();
  }
}

void FeatureWeight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeatureWeight& FeatureWeight::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FeatureWeight_generic_5flogistic_5fregression_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void FeatureWeight::clear_feature_type() {
// @@protoc_insertion_point(one_of_clear_start:assist_ranker.FeatureWeight)
  switch (feature_type_case()) {
    case kScalar: {
      // No need to clear
      break;
    }
    case kOneHot: {
      delete feature_type_.one_hot_;
      break;
    }
    case kSparse: {
      delete feature_type_.sparse_;
      break;
    }
    case kBucketized: {
      delete feature_type_.bucketized_;
      break;
    }
    case FEATURE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FEATURE_TYPE_NOT_SET;
}


void FeatureWeight::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.FeatureWeight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_feature_type();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FeatureWeight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float scalar = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          set_scalar(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .assist_ranker.SparseWeights one_hot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_one_hot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .assist_ranker.SparseWeights sparse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_sparse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .assist_ranker.BucketizedWeights bucketized = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_bucketized(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FeatureWeight::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:assist_ranker.FeatureWeight)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float scalar = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          clear_feature_type();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &feature_type_.scalar_)));
          set_has_scalar();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .assist_ranker.SparseWeights one_hot = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_one_hot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .assist_ranker.SparseWeights sparse = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sparse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .assist_ranker.BucketizedWeights bucketized = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bucketized()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:assist_ranker.FeatureWeight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:assist_ranker.FeatureWeight)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FeatureWeight::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:assist_ranker.FeatureWeight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (feature_type_case()) {
    case kScalar:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->scalar(), output);
      break;
    case kOneHot:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        2, _Internal::one_hot(this), output);
      break;
    case kSparse:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        3, _Internal::sparse(this), output);
      break;
    case kBucketized:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        4, _Internal::bucketized(this), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:assist_ranker.FeatureWeight)
}

size_t FeatureWeight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.FeatureWeight)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (feature_type_case()) {
    // optional float scalar = 1;
    case kScalar: {
      total_size += 1 + 4;
      break;
    }
    // optional .assist_ranker.SparseWeights one_hot = 2;
    case kOneHot: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *feature_type_.one_hot_);
      break;
    }
    // optional .assist_ranker.SparseWeights sparse = 3;
    case kSparse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *feature_type_.sparse_);
      break;
    }
    // optional .assist_ranker.BucketizedWeights bucketized = 4;
    case kBucketized: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *feature_type_.bucketized_);
      break;
    }
    case FEATURE_TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeatureWeight::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FeatureWeight*>(
      &from));
}

void FeatureWeight::MergeFrom(const FeatureWeight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.FeatureWeight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.feature_type_case()) {
    case kScalar: {
      set_scalar(from.scalar());
      break;
    }
    case kOneHot: {
      mutable_one_hot()->::assist_ranker::SparseWeights::MergeFrom(from.one_hot());
      break;
    }
    case kSparse: {
      mutable_sparse()->::assist_ranker::SparseWeights::MergeFrom(from.sparse());
      break;
    }
    case kBucketized: {
      mutable_bucketized()->::assist_ranker::BucketizedWeights::MergeFrom(from.bucketized());
      break;
    }
    case FEATURE_TYPE_NOT_SET: {
      break;
    }
  }
}

void FeatureWeight::CopyFrom(const FeatureWeight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.FeatureWeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureWeight::IsInitialized() const {
  return true;
}

void FeatureWeight::InternalSwap(FeatureWeight* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(feature_type_, other->feature_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string FeatureWeight::GetTypeName() const {
  return "assist_ranker.FeatureWeight";
}


// ===================================================================

GenericLogisticRegressionModel_WeightsEntry_DoNotUse::GenericLogisticRegressionModel_WeightsEntry_DoNotUse() {}
GenericLogisticRegressionModel_WeightsEntry_DoNotUse::GenericLogisticRegressionModel_WeightsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GenericLogisticRegressionModel_WeightsEntry_DoNotUse::MergeFrom(const GenericLogisticRegressionModel_WeightsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse::GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse() {}
GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse::GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse::MergeFrom(const GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

void GenericLogisticRegressionModel::InitAsDefaultInstance() {
  ::assist_ranker::_GenericLogisticRegressionModel_default_instance_._instance.get_mutable()->preprocessor_config_ = const_cast< ::assist_ranker::ExamplePreprocessorConfig*>(
      ::assist_ranker::ExamplePreprocessorConfig::internal_default_instance());
}
class GenericLogisticRegressionModel::_Internal {
 public:
  using HasBits = decltype(std::declval<GenericLogisticRegressionModel>()._has_bits_);
  static void set_has_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bias(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_preprocessed_model(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::assist_ranker::ExamplePreprocessorConfig& preprocessor_config(const GenericLogisticRegressionModel* msg);
  static void set_has_preprocessor_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::assist_ranker::ExamplePreprocessorConfig&
GenericLogisticRegressionModel::_Internal::preprocessor_config(const GenericLogisticRegressionModel* msg) {
  return *msg->preprocessor_config_;
}
void GenericLogisticRegressionModel::clear_preprocessor_config() {
  if (preprocessor_config_ != nullptr) preprocessor_config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
GenericLogisticRegressionModel::GenericLogisticRegressionModel()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:assist_ranker.GenericLogisticRegressionModel)
}
GenericLogisticRegressionModel::GenericLogisticRegressionModel(const GenericLogisticRegressionModel& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  weights_.MergeFrom(from.weights_);
  fullname_weights_.MergeFrom(from.fullname_weights_);
  if (from.has_preprocessor_config()) {
    preprocessor_config_ = new ::assist_ranker::ExamplePreprocessorConfig(*from.preprocessor_config_);
  } else {
    preprocessor_config_ = nullptr;
  }
  ::memcpy(&threshold_, &from.threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_preprocessed_model_) -
    reinterpret_cast<char*>(&threshold_)) + sizeof(is_preprocessed_model_));
  // @@protoc_insertion_point(copy_constructor:assist_ranker.GenericLogisticRegressionModel)
}

void GenericLogisticRegressionModel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenericLogisticRegressionModel_generic_5flogistic_5fregression_5fmodel_2eproto.base);
  ::memset(&preprocessor_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_preprocessed_model_) -
      reinterpret_cast<char*>(&preprocessor_config_)) + sizeof(is_preprocessed_model_));
}

GenericLogisticRegressionModel::~GenericLogisticRegressionModel() {
  // @@protoc_insertion_point(destructor:assist_ranker.GenericLogisticRegressionModel)
  SharedDtor();
}

void GenericLogisticRegressionModel::SharedDtor() {
  if (this != internal_default_instance()) delete preprocessor_config_;
}

void GenericLogisticRegressionModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenericLogisticRegressionModel& GenericLogisticRegressionModel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenericLogisticRegressionModel_generic_5flogistic_5fregression_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void GenericLogisticRegressionModel::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.GenericLogisticRegressionModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weights_.Clear();
  fullname_weights_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(preprocessor_config_ != nullptr);
    preprocessor_config_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&threshold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_preprocessed_model_) -
        reinterpret_cast<char*>(&threshold_)) + sizeof(is_preprocessed_model_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GenericLogisticRegressionModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float threshold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_threshold(&has_bits);
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float bias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_bias(&has_bits);
          bias_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // map<string, .assist_ranker.FeatureWeight> weights = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&weights_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // optional bool is_preprocessed_model = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_preprocessed_model(&has_bits);
          is_preprocessed_model_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, float> fullname_weights = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&fullname_weights_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // optional .assist_ranker.ExamplePreprocessorConfig preprocessor_config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_preprocessor_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GenericLogisticRegressionModel::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:assist_ranker.GenericLogisticRegressionModel)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float threshold = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          _Internal::set_has_threshold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bias = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {
          _Internal::set_has_bias(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .assist_ranker.FeatureWeight> weights = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          GenericLogisticRegressionModel_WeightsEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
              GenericLogisticRegressionModel_WeightsEntry_DoNotUse,
              std::string, ::assist_ranker::FeatureWeight,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::assist_ranker::FeatureWeight > > parser(&weights_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_preprocessed_model = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_is_preprocessed_model(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_preprocessed_model_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, float> fullname_weights = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
              GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse,
              std::string, float,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, float > > parser(&fullname_weights_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .assist_ranker.ExamplePreprocessorConfig preprocessor_config = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_preprocessor_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:assist_ranker.GenericLogisticRegressionModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:assist_ranker.GenericLogisticRegressionModel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GenericLogisticRegressionModel::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:assist_ranker.GenericLogisticRegressionModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float threshold = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->threshold(), output);
  }

  // optional float bias = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->bias(), output);
  }

  // map<string, .assist_ranker.FeatureWeight> weights = 3;
  if (!this->weights().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::assist_ranker::FeatureWeight >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->weights().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->weights().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::assist_ranker::FeatureWeight >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::assist_ranker::FeatureWeight >::const_iterator
          it = this->weights().begin();
          it != this->weights().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        GenericLogisticRegressionModel_WeightsEntry_DoNotUse::Funcs::SerializeToCodedStream(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::assist_ranker::FeatureWeight >::const_iterator
          it = this->weights().begin();
          it != this->weights().end(); ++it) {
        GenericLogisticRegressionModel_WeightsEntry_DoNotUse::Funcs::SerializeToCodedStream(3, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // optional bool is_preprocessed_model = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->is_preprocessed_model(), output);
  }

  // map<string, float> fullname_weights = 5;
  if (!this->fullname_weights().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->fullname_weights().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->fullname_weights().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->fullname_weights().begin();
          it != this->fullname_weights().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse::Funcs::SerializeToCodedStream(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->fullname_weights().begin();
          it != this->fullname_weights().end(); ++it) {
        GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse::Funcs::SerializeToCodedStream(5, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // optional .assist_ranker.ExamplePreprocessorConfig preprocessor_config = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::preprocessor_config(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:assist_ranker.GenericLogisticRegressionModel)
}

size_t GenericLogisticRegressionModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.GenericLogisticRegressionModel)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .assist_ranker.FeatureWeight> weights = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->weights_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::assist_ranker::FeatureWeight >::const_iterator
      it = this->weights().begin();
      it != this->weights().end(); ++it) {
    total_size += GenericLogisticRegressionModel_WeightsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, float> fullname_weights = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->fullname_weights_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
      it = this->fullname_weights().begin();
      it != this->fullname_weights().end(); ++it) {
    total_size += GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .assist_ranker.ExamplePreprocessorConfig preprocessor_config = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessor_config_);
    }

    // optional float threshold = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float bias = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional bool is_preprocessed_model = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericLogisticRegressionModel::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GenericLogisticRegressionModel*>(
      &from));
}

void GenericLogisticRegressionModel::MergeFrom(const GenericLogisticRegressionModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.GenericLogisticRegressionModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weights_.MergeFrom(from.weights_);
  fullname_weights_.MergeFrom(from.fullname_weights_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_preprocessor_config()->::assist_ranker::ExamplePreprocessorConfig::MergeFrom(from.preprocessor_config());
    }
    if (cached_has_bits & 0x00000002u) {
      threshold_ = from.threshold_;
    }
    if (cached_has_bits & 0x00000004u) {
      bias_ = from.bias_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_preprocessed_model_ = from.is_preprocessed_model_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GenericLogisticRegressionModel::CopyFrom(const GenericLogisticRegressionModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.GenericLogisticRegressionModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericLogisticRegressionModel::IsInitialized() const {
  return true;
}

void GenericLogisticRegressionModel::InternalSwap(GenericLogisticRegressionModel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  weights_.Swap(&other->weights_);
  fullname_weights_.Swap(&other->fullname_weights_);
  swap(preprocessor_config_, other->preprocessor_config_);
  swap(threshold_, other->threshold_);
  swap(bias_, other->bias_);
  swap(is_preprocessed_model_, other->is_preprocessed_model_);
}

std::string GenericLogisticRegressionModel::GetTypeName() const {
  return "assist_ranker.GenericLogisticRegressionModel";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace assist_ranker
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::assist_ranker::SparseWeights_WeightsEntry_DoNotUse* Arena::CreateMaybeMessage< ::assist_ranker::SparseWeights_WeightsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::assist_ranker::SparseWeights_WeightsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::assist_ranker::SparseWeights* Arena::CreateMaybeMessage< ::assist_ranker::SparseWeights >(Arena* arena) {
  return Arena::CreateInternal< ::assist_ranker::SparseWeights >(arena);
}
template<> PROTOBUF_NOINLINE ::assist_ranker::BucketizedWeights* Arena::CreateMaybeMessage< ::assist_ranker::BucketizedWeights >(Arena* arena) {
  return Arena::CreateInternal< ::assist_ranker::BucketizedWeights >(arena);
}
template<> PROTOBUF_NOINLINE ::assist_ranker::FeatureWeight* Arena::CreateMaybeMessage< ::assist_ranker::FeatureWeight >(Arena* arena) {
  return Arena::CreateInternal< ::assist_ranker::FeatureWeight >(arena);
}
template<> PROTOBUF_NOINLINE ::assist_ranker::GenericLogisticRegressionModel_WeightsEntry_DoNotUse* Arena::CreateMaybeMessage< ::assist_ranker::GenericLogisticRegressionModel_WeightsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::assist_ranker::GenericLogisticRegressionModel_WeightsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::assist_ranker::GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse* Arena::CreateMaybeMessage< ::assist_ranker::GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::assist_ranker::GenericLogisticRegressionModel_FullnameWeightsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::assist_ranker::GenericLogisticRegressionModel* Arena::CreateMaybeMessage< ::assist_ranker::GenericLogisticRegressionModel >(Arena* arena) {
  return Arena::CreateInternal< ::assist_ranker::GenericLogisticRegressionModel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

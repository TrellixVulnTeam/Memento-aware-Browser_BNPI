// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nn_classifier.proto

#include "nn_classifier.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_example_5fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ExamplePreprocessorConfig_example_5fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nn_5fclassifier_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatVector_nn_5fclassifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nn_5fclassifier_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NNLayer_nn_5fclassifier_2eproto;
namespace assist_ranker {
class FloatVectorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FloatVector> _instance;
} _FloatVector_default_instance_;
class NNLayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NNLayer> _instance;
} _NNLayer_default_instance_;
class NNClassifierModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NNClassifierModel> _instance;
} _NNClassifierModel_default_instance_;
}  // namespace assist_ranker
static void InitDefaultsscc_info_FloatVector_nn_5fclassifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::assist_ranker::_FloatVector_default_instance_;
    new (ptr) ::assist_ranker::FloatVector();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::assist_ranker::FloatVector::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatVector_nn_5fclassifier_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_FloatVector_nn_5fclassifier_2eproto}, {}};

static void InitDefaultsscc_info_NNClassifierModel_nn_5fclassifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::assist_ranker::_NNClassifierModel_default_instance_;
    new (ptr) ::assist_ranker::NNClassifierModel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::assist_ranker::NNClassifierModel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NNClassifierModel_nn_5fclassifier_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_NNClassifierModel_nn_5fclassifier_2eproto}, {
      &scc_info_NNLayer_nn_5fclassifier_2eproto.base,
      &scc_info_ExamplePreprocessorConfig_example_5fpreprocessor_2eproto.base,}};

static void InitDefaultsscc_info_NNLayer_nn_5fclassifier_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::assist_ranker::_NNLayer_default_instance_;
    new (ptr) ::assist_ranker::NNLayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::assist_ranker::NNLayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NNLayer_nn_5fclassifier_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_NNLayer_nn_5fclassifier_2eproto}, {
      &scc_info_FloatVector_nn_5fclassifier_2eproto.base,}};

namespace assist_ranker {

// ===================================================================

void FloatVector::InitAsDefaultInstance() {
}
class FloatVector::_Internal {
 public:
  using HasBits = decltype(std::declval<FloatVector>()._has_bits_);
};

FloatVector::FloatVector()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:assist_ranker.FloatVector)
}
FloatVector::FloatVector(const FloatVector& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:assist_ranker.FloatVector)
}

void FloatVector::SharedCtor() {
}

FloatVector::~FloatVector() {
  // @@protoc_insertion_point(destructor:assist_ranker.FloatVector)
  SharedDtor();
}

void FloatVector::SharedDtor() {
}

void FloatVector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FloatVector& FloatVector::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FloatVector_nn_5fclassifier_2eproto.base);
  return *internal_default_instance();
}


void FloatVector::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.FloatVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FloatVector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 13);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FloatVector::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:assist_ranker.FloatVector)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float values = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_values())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:assist_ranker.FloatVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:assist_ranker.FloatVector)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FloatVector::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:assist_ranker.FloatVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float values = 1;
  for (int i = 0, n = this->values_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      1, this->values(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:assist_ranker.FloatVector)
}

size_t FloatVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.FloatVector)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->values_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->values_size());
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatVector::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FloatVector*>(
      &from));
}

void FloatVector::MergeFrom(const FloatVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.FloatVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void FloatVector::CopyFrom(const FloatVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.FloatVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatVector::IsInitialized() const {
  return true;
}

void FloatVector::InternalSwap(FloatVector* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  values_.InternalSwap(&other->values_);
}

std::string FloatVector::GetTypeName() const {
  return "assist_ranker.FloatVector";
}


// ===================================================================

void NNLayer::InitAsDefaultInstance() {
  ::assist_ranker::_NNLayer_default_instance_._instance.get_mutable()->biases_ = const_cast< ::assist_ranker::FloatVector*>(
      ::assist_ranker::FloatVector::internal_default_instance());
}
class NNLayer::_Internal {
 public:
  using HasBits = decltype(std::declval<NNLayer>()._has_bits_);
  static const ::assist_ranker::FloatVector& biases(const NNLayer* msg);
  static void set_has_biases(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::assist_ranker::FloatVector&
NNLayer::_Internal::biases(const NNLayer* msg) {
  return *msg->biases_;
}
NNLayer::NNLayer()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:assist_ranker.NNLayer)
}
NNLayer::NNLayer(const NNLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      weights_(from.weights_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_biases()) {
    biases_ = new ::assist_ranker::FloatVector(*from.biases_);
  } else {
    biases_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:assist_ranker.NNLayer)
}

void NNLayer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NNLayer_nn_5fclassifier_2eproto.base);
  biases_ = nullptr;
}

NNLayer::~NNLayer() {
  // @@protoc_insertion_point(destructor:assist_ranker.NNLayer)
  SharedDtor();
}

void NNLayer::SharedDtor() {
  if (this != internal_default_instance()) delete biases_;
}

void NNLayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NNLayer& NNLayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NNLayer_nn_5fclassifier_2eproto.base);
  return *internal_default_instance();
}


void NNLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.NNLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weights_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(biases_ != nullptr);
    biases_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NNLayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .assist_ranker.FloatVector weights = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_weights(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional .assist_ranker.FloatVector biases = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_biases(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NNLayer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:assist_ranker.NNLayer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .assist_ranker.FloatVector weights = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_weights()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .assist_ranker.FloatVector biases = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_biases()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:assist_ranker.NNLayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:assist_ranker.NNLayer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NNLayer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:assist_ranker.NNLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .assist_ranker.FloatVector weights = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->weights_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1,
      this->weights(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .assist_ranker.FloatVector biases = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::biases(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:assist_ranker.NNLayer)
}

size_t NNLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.NNLayer)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .assist_ranker.FloatVector weights = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->weights_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->weights(static_cast<int>(i)));
    }
  }

  // optional .assist_ranker.FloatVector biases = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *biases_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NNLayer::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NNLayer*>(
      &from));
}

void NNLayer::MergeFrom(const NNLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.NNLayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weights_.MergeFrom(from.weights_);
  if (from.has_biases()) {
    mutable_biases()->::assist_ranker::FloatVector::MergeFrom(from.biases());
  }
}

void NNLayer::CopyFrom(const NNLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.NNLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NNLayer::IsInitialized() const {
  return true;
}

void NNLayer::InternalSwap(NNLayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&weights_)->InternalSwap(CastToBase(&other->weights_));
  swap(biases_, other->biases_);
}

std::string NNLayer::GetTypeName() const {
  return "assist_ranker.NNLayer";
}


// ===================================================================

void NNClassifierModel::InitAsDefaultInstance() {
  ::assist_ranker::_NNClassifierModel_default_instance_._instance.get_mutable()->hidden_layer_ = const_cast< ::assist_ranker::NNLayer*>(
      ::assist_ranker::NNLayer::internal_default_instance());
  ::assist_ranker::_NNClassifierModel_default_instance_._instance.get_mutable()->logits_layer_ = const_cast< ::assist_ranker::NNLayer*>(
      ::assist_ranker::NNLayer::internal_default_instance());
  ::assist_ranker::_NNClassifierModel_default_instance_._instance.get_mutable()->preprocessor_config_ = const_cast< ::assist_ranker::ExamplePreprocessorConfig*>(
      ::assist_ranker::ExamplePreprocessorConfig::internal_default_instance());
}
class NNClassifierModel::_Internal {
 public:
  using HasBits = decltype(std::declval<NNClassifierModel>()._has_bits_);
  static const ::assist_ranker::NNLayer& hidden_layer(const NNClassifierModel* msg);
  static void set_has_hidden_layer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::assist_ranker::NNLayer& logits_layer(const NNClassifierModel* msg);
  static void set_has_logits_layer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::assist_ranker::ExamplePreprocessorConfig& preprocessor_config(const NNClassifierModel* msg);
  static void set_has_preprocessor_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::assist_ranker::NNLayer&
NNClassifierModel::_Internal::hidden_layer(const NNClassifierModel* msg) {
  return *msg->hidden_layer_;
}
const ::assist_ranker::NNLayer&
NNClassifierModel::_Internal::logits_layer(const NNClassifierModel* msg) {
  return *msg->logits_layer_;
}
const ::assist_ranker::ExamplePreprocessorConfig&
NNClassifierModel::_Internal::preprocessor_config(const NNClassifierModel* msg) {
  return *msg->preprocessor_config_;
}
void NNClassifierModel::clear_preprocessor_config() {
  if (preprocessor_config_ != nullptr) preprocessor_config_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
NNClassifierModel::NNClassifierModel()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:assist_ranker.NNClassifierModel)
}
NNClassifierModel::NNClassifierModel(const NNClassifierModel& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hidden_layer()) {
    hidden_layer_ = new ::assist_ranker::NNLayer(*from.hidden_layer_);
  } else {
    hidden_layer_ = nullptr;
  }
  if (from.has_logits_layer()) {
    logits_layer_ = new ::assist_ranker::NNLayer(*from.logits_layer_);
  } else {
    logits_layer_ = nullptr;
  }
  if (from.has_preprocessor_config()) {
    preprocessor_config_ = new ::assist_ranker::ExamplePreprocessorConfig(*from.preprocessor_config_);
  } else {
    preprocessor_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:assist_ranker.NNClassifierModel)
}

void NNClassifierModel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NNClassifierModel_nn_5fclassifier_2eproto.base);
  ::memset(&hidden_layer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&preprocessor_config_) -
      reinterpret_cast<char*>(&hidden_layer_)) + sizeof(preprocessor_config_));
}

NNClassifierModel::~NNClassifierModel() {
  // @@protoc_insertion_point(destructor:assist_ranker.NNClassifierModel)
  SharedDtor();
}

void NNClassifierModel::SharedDtor() {
  if (this != internal_default_instance()) delete hidden_layer_;
  if (this != internal_default_instance()) delete logits_layer_;
  if (this != internal_default_instance()) delete preprocessor_config_;
}

void NNClassifierModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NNClassifierModel& NNClassifierModel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NNClassifierModel_nn_5fclassifier_2eproto.base);
  return *internal_default_instance();
}


void NNClassifierModel::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.NNClassifierModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(hidden_layer_ != nullptr);
      hidden_layer_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(logits_layer_ != nullptr);
      logits_layer_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(preprocessor_config_ != nullptr);
      preprocessor_config_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NNClassifierModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .assist_ranker.NNLayer hidden_layer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_hidden_layer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .assist_ranker.NNLayer logits_layer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_logits_layer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .assist_ranker.ExamplePreprocessorConfig preprocessor_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_preprocessor_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NNClassifierModel::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:assist_ranker.NNClassifierModel)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .assist_ranker.NNLayer hidden_layer = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_hidden_layer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .assist_ranker.NNLayer logits_layer = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_logits_layer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .assist_ranker.ExamplePreprocessorConfig preprocessor_config = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_preprocessor_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:assist_ranker.NNClassifierModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:assist_ranker.NNClassifierModel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NNClassifierModel::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:assist_ranker.NNClassifierModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .assist_ranker.NNLayer hidden_layer = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::hidden_layer(this), output);
  }

  // optional .assist_ranker.NNLayer logits_layer = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::logits_layer(this), output);
  }

  // optional .assist_ranker.ExamplePreprocessorConfig preprocessor_config = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::preprocessor_config(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:assist_ranker.NNClassifierModel)
}

size_t NNClassifierModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.NNClassifierModel)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .assist_ranker.NNLayer hidden_layer = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hidden_layer_);
    }

    // optional .assist_ranker.NNLayer logits_layer = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *logits_layer_);
    }

    // optional .assist_ranker.ExamplePreprocessorConfig preprocessor_config = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessor_config_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NNClassifierModel::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const NNClassifierModel*>(
      &from));
}

void NNClassifierModel::MergeFrom(const NNClassifierModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.NNClassifierModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_hidden_layer()->::assist_ranker::NNLayer::MergeFrom(from.hidden_layer());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_logits_layer()->::assist_ranker::NNLayer::MergeFrom(from.logits_layer());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_preprocessor_config()->::assist_ranker::ExamplePreprocessorConfig::MergeFrom(from.preprocessor_config());
    }
  }
}

void NNClassifierModel::CopyFrom(const NNClassifierModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.NNClassifierModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NNClassifierModel::IsInitialized() const {
  return true;
}

void NNClassifierModel::InternalSwap(NNClassifierModel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(hidden_layer_, other->hidden_layer_);
  swap(logits_layer_, other->logits_layer_);
  swap(preprocessor_config_, other->preprocessor_config_);
}

std::string NNClassifierModel::GetTypeName() const {
  return "assist_ranker.NNClassifierModel";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace assist_ranker
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::assist_ranker::FloatVector* Arena::CreateMaybeMessage< ::assist_ranker::FloatVector >(Arena* arena) {
  return Arena::CreateInternal< ::assist_ranker::FloatVector >(arena);
}
template<> PROTOBUF_NOINLINE ::assist_ranker::NNLayer* Arena::CreateMaybeMessage< ::assist_ranker::NNLayer >(Arena* arena) {
  return Arena::CreateInternal< ::assist_ranker::NNLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::assist_ranker::NNClassifierModel* Arena::CreateMaybeMessage< ::assist_ranker::NNClassifierModel >(Arena* arena) {
  return Arena::CreateInternal< ::assist_ranker::NNClassifierModel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: example_preprocessor.proto

#include "example_preprocessor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_example_5fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExamplePreprocessorConfig_Boundaries_example_5fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_example_5fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExamplePreprocessorConfig_BucketizersEntry_DoNotUse_example_5fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_example_5fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExamplePreprocessorConfig_FeatureIndicesEntry_DoNotUse_example_5fpreprocessor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_example_5fpreprocessor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExamplePreprocessorConfig_NormalizersEntry_DoNotUse_example_5fpreprocessor_2eproto;
namespace assist_ranker {
class ExamplePreprocessorConfig_BoundariesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExamplePreprocessorConfig_Boundaries> _instance;
} _ExamplePreprocessorConfig_Boundaries_default_instance_;
class ExamplePreprocessorConfig_BucketizersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExamplePreprocessorConfig_BucketizersEntry_DoNotUse> _instance;
} _ExamplePreprocessorConfig_BucketizersEntry_DoNotUse_default_instance_;
class ExamplePreprocessorConfig_FeatureIndicesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExamplePreprocessorConfig_FeatureIndicesEntry_DoNotUse> _instance;
} _ExamplePreprocessorConfig_FeatureIndicesEntry_DoNotUse_default_instance_;
class ExamplePreprocessorConfig_NormalizersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExamplePreprocessorConfig_NormalizersEntry_DoNotUse> _instance;
} _ExamplePreprocessorConfig_NormalizersEntry_DoNotUse_default_instance_;
class ExamplePreprocessorConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExamplePreprocessorConfig> _instance;
} _ExamplePreprocessorConfig_default_instance_;
}  // namespace assist_ranker
static void InitDefaultsscc_info_ExamplePreprocessorConfig_example_5fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::assist_ranker::_ExamplePreprocessorConfig_default_instance_;
    new (ptr) ::assist_ranker::ExamplePreprocessorConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::assist_ranker::ExamplePreprocessorConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ExamplePreprocessorConfig_example_5fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_ExamplePreprocessorConfig_example_5fpreprocessor_2eproto}, {
      &scc_info_ExamplePreprocessorConfig_BucketizersEntry_DoNotUse_example_5fpreprocessor_2eproto.base,
      &scc_info_ExamplePreprocessorConfig_FeatureIndicesEntry_DoNotUse_example_5fpreprocessor_2eproto.base,
      &scc_info_ExamplePreprocessorConfig_NormalizersEntry_DoNotUse_example_5fpreprocessor_2eproto.base,}};

static void InitDefaultsscc_info_ExamplePreprocessorConfig_Boundaries_example_5fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::assist_ranker::_ExamplePreprocessorConfig_Boundaries_default_instance_;
    new (ptr) ::assist_ranker::ExamplePreprocessorConfig_Boundaries();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::assist_ranker::ExamplePreprocessorConfig_Boundaries::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExamplePreprocessorConfig_Boundaries_example_5fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ExamplePreprocessorConfig_Boundaries_example_5fpreprocessor_2eproto}, {}};

static void InitDefaultsscc_info_ExamplePreprocessorConfig_BucketizersEntry_DoNotUse_example_5fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::assist_ranker::_ExamplePreprocessorConfig_BucketizersEntry_DoNotUse_default_instance_;
    new (ptr) ::assist_ranker::ExamplePreprocessorConfig_BucketizersEntry_DoNotUse();
  }
  ::assist_ranker::ExamplePreprocessorConfig_BucketizersEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExamplePreprocessorConfig_BucketizersEntry_DoNotUse_example_5fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ExamplePreprocessorConfig_BucketizersEntry_DoNotUse_example_5fpreprocessor_2eproto}, {
      &scc_info_ExamplePreprocessorConfig_Boundaries_example_5fpreprocessor_2eproto.base,}};

static void InitDefaultsscc_info_ExamplePreprocessorConfig_FeatureIndicesEntry_DoNotUse_example_5fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::assist_ranker::_ExamplePreprocessorConfig_FeatureIndicesEntry_DoNotUse_default_instance_;
    new (ptr) ::assist_ranker::ExamplePreprocessorConfig_FeatureIndicesEntry_DoNotUse();
  }
  ::assist_ranker::ExamplePreprocessorConfig_FeatureIndicesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExamplePreprocessorConfig_FeatureIndicesEntry_DoNotUse_example_5fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ExamplePreprocessorConfig_FeatureIndicesEntry_DoNotUse_example_5fpreprocessor_2eproto}, {}};

static void InitDefaultsscc_info_ExamplePreprocessorConfig_NormalizersEntry_DoNotUse_example_5fpreprocessor_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::assist_ranker::_ExamplePreprocessorConfig_NormalizersEntry_DoNotUse_default_instance_;
    new (ptr) ::assist_ranker::ExamplePreprocessorConfig_NormalizersEntry_DoNotUse();
  }
  ::assist_ranker::ExamplePreprocessorConfig_NormalizersEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExamplePreprocessorConfig_NormalizersEntry_DoNotUse_example_5fpreprocessor_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ExamplePreprocessorConfig_NormalizersEntry_DoNotUse_example_5fpreprocessor_2eproto}, {}};

namespace assist_ranker {

// ===================================================================

void ExamplePreprocessorConfig_Boundaries::InitAsDefaultInstance() {
}
class ExamplePreprocessorConfig_Boundaries::_Internal {
 public:
  using HasBits = decltype(std::declval<ExamplePreprocessorConfig_Boundaries>()._has_bits_);
};

ExamplePreprocessorConfig_Boundaries::ExamplePreprocessorConfig_Boundaries()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:assist_ranker.ExamplePreprocessorConfig.Boundaries)
}
ExamplePreprocessorConfig_Boundaries::ExamplePreprocessorConfig_Boundaries(const ExamplePreprocessorConfig_Boundaries& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      boundaries_(from.boundaries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:assist_ranker.ExamplePreprocessorConfig.Boundaries)
}

void ExamplePreprocessorConfig_Boundaries::SharedCtor() {
}

ExamplePreprocessorConfig_Boundaries::~ExamplePreprocessorConfig_Boundaries() {
  // @@protoc_insertion_point(destructor:assist_ranker.ExamplePreprocessorConfig.Boundaries)
  SharedDtor();
}

void ExamplePreprocessorConfig_Boundaries::SharedDtor() {
}

void ExamplePreprocessorConfig_Boundaries::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExamplePreprocessorConfig_Boundaries& ExamplePreprocessorConfig_Boundaries::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExamplePreprocessorConfig_Boundaries_example_5fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void ExamplePreprocessorConfig_Boundaries::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.ExamplePreprocessorConfig.Boundaries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boundaries_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExamplePreprocessorConfig_Boundaries::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float boundaries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_boundaries(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 13);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_boundaries(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExamplePreprocessorConfig_Boundaries::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:assist_ranker.ExamplePreprocessorConfig.Boundaries)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float boundaries = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_boundaries())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_boundaries())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:assist_ranker.ExamplePreprocessorConfig.Boundaries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:assist_ranker.ExamplePreprocessorConfig.Boundaries)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExamplePreprocessorConfig_Boundaries::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:assist_ranker.ExamplePreprocessorConfig.Boundaries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float boundaries = 1;
  for (int i = 0, n = this->boundaries_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(
      1, this->boundaries(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:assist_ranker.ExamplePreprocessorConfig.Boundaries)
}

size_t ExamplePreprocessorConfig_Boundaries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.ExamplePreprocessorConfig.Boundaries)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float boundaries = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->boundaries_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->boundaries_size());
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExamplePreprocessorConfig_Boundaries::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ExamplePreprocessorConfig_Boundaries*>(
      &from));
}

void ExamplePreprocessorConfig_Boundaries::MergeFrom(const ExamplePreprocessorConfig_Boundaries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.ExamplePreprocessorConfig.Boundaries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  boundaries_.MergeFrom(from.boundaries_);
}

void ExamplePreprocessorConfig_Boundaries::CopyFrom(const ExamplePreprocessorConfig_Boundaries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.ExamplePreprocessorConfig.Boundaries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExamplePreprocessorConfig_Boundaries::IsInitialized() const {
  return true;
}

void ExamplePreprocessorConfig_Boundaries::InternalSwap(ExamplePreprocessorConfig_Boundaries* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  boundaries_.InternalSwap(&other->boundaries_);
}

std::string ExamplePreprocessorConfig_Boundaries::GetTypeName() const {
  return "assist_ranker.ExamplePreprocessorConfig.Boundaries";
}


// ===================================================================

ExamplePreprocessorConfig_BucketizersEntry_DoNotUse::ExamplePreprocessorConfig_BucketizersEntry_DoNotUse() {}
ExamplePreprocessorConfig_BucketizersEntry_DoNotUse::ExamplePreprocessorConfig_BucketizersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ExamplePreprocessorConfig_BucketizersEntry_DoNotUse::MergeFrom(const ExamplePreprocessorConfig_BucketizersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

ExamplePreprocessorConfig_FeatureIndicesEntry_DoNotUse::ExamplePreprocessorConfig_FeatureIndicesEntry_DoNotUse() {}
ExamplePreprocessorConfig_FeatureIndicesEntry_DoNotUse::ExamplePreprocessorConfig_FeatureIndicesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ExamplePreprocessorConfig_FeatureIndicesEntry_DoNotUse::MergeFrom(const ExamplePreprocessorConfig_FeatureIndicesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

ExamplePreprocessorConfig_NormalizersEntry_DoNotUse::ExamplePreprocessorConfig_NormalizersEntry_DoNotUse() {}
ExamplePreprocessorConfig_NormalizersEntry_DoNotUse::ExamplePreprocessorConfig_NormalizersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ExamplePreprocessorConfig_NormalizersEntry_DoNotUse::MergeFrom(const ExamplePreprocessorConfig_NormalizersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

void ExamplePreprocessorConfig::InitAsDefaultInstance() {
}
class ExamplePreprocessorConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<ExamplePreprocessorConfig>()._has_bits_);
};

ExamplePreprocessorConfig::ExamplePreprocessorConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:assist_ranker.ExamplePreprocessorConfig)
}
ExamplePreprocessorConfig::ExamplePreprocessorConfig(const ExamplePreprocessorConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      missing_features_(from.missing_features_),
      convert_to_string_features_(from.convert_to_string_features_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bucketizers_.MergeFrom(from.bucketizers_);
  feature_indices_.MergeFrom(from.feature_indices_);
  normalizers_.MergeFrom(from.normalizers_);
  // @@protoc_insertion_point(copy_constructor:assist_ranker.ExamplePreprocessorConfig)
}

void ExamplePreprocessorConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExamplePreprocessorConfig_example_5fpreprocessor_2eproto.base);
}

ExamplePreprocessorConfig::~ExamplePreprocessorConfig() {
  // @@protoc_insertion_point(destructor:assist_ranker.ExamplePreprocessorConfig)
  SharedDtor();
}

void ExamplePreprocessorConfig::SharedDtor() {
}

void ExamplePreprocessorConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExamplePreprocessorConfig& ExamplePreprocessorConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExamplePreprocessorConfig_example_5fpreprocessor_2eproto.base);
  return *internal_default_instance();
}


void ExamplePreprocessorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.ExamplePreprocessorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  missing_features_.Clear();
  bucketizers_.Clear();
  feature_indices_.Clear();
  normalizers_.Clear();
  convert_to_string_features_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ExamplePreprocessorConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string missing_features = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_missing_features(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // map<string, .assist_ranker.ExamplePreprocessorConfig.Boundaries> bucketizers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&bucketizers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // map<string, int32> feature_indices = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&feature_indices_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // map<string, float> normalizers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&normalizers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated string convert_to_string_features = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_convert_to_string_features(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ExamplePreprocessorConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:assist_ranker.ExamplePreprocessorConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string missing_features = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_missing_features()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .assist_ranker.ExamplePreprocessorConfig.Boundaries> bucketizers = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          ExamplePreprocessorConfig_BucketizersEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
              ExamplePreprocessorConfig_BucketizersEntry_DoNotUse,
              std::string, ::assist_ranker::ExamplePreprocessorConfig_Boundaries,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::assist_ranker::ExamplePreprocessorConfig_Boundaries > > parser(&bucketizers_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, int32> feature_indices = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          ExamplePreprocessorConfig_FeatureIndicesEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
              ExamplePreprocessorConfig_FeatureIndicesEntry_DoNotUse,
              std::string, ::PROTOBUF_NAMESPACE_ID::int32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 > > parser(&feature_indices_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, float> normalizers = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          ExamplePreprocessorConfig_NormalizersEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
              ExamplePreprocessorConfig_NormalizersEntry_DoNotUse,
              std::string, float,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, float > > parser(&normalizers_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string convert_to_string_features = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_convert_to_string_features()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:assist_ranker.ExamplePreprocessorConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:assist_ranker.ExamplePreprocessorConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ExamplePreprocessorConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:assist_ranker.ExamplePreprocessorConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string missing_features = 1;
  for (int i = 0, n = this->missing_features_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->missing_features(i), output);
  }

  // map<string, .assist_ranker.ExamplePreprocessorConfig.Boundaries> bucketizers = 2;
  if (!this->bucketizers().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::assist_ranker::ExamplePreprocessorConfig_Boundaries >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->bucketizers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->bucketizers().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::assist_ranker::ExamplePreprocessorConfig_Boundaries >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::assist_ranker::ExamplePreprocessorConfig_Boundaries >::const_iterator
          it = this->bucketizers().begin();
          it != this->bucketizers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        ExamplePreprocessorConfig_BucketizersEntry_DoNotUse::Funcs::SerializeToCodedStream(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::assist_ranker::ExamplePreprocessorConfig_Boundaries >::const_iterator
          it = this->bucketizers().begin();
          it != this->bucketizers().end(); ++it) {
        ExamplePreprocessorConfig_BucketizersEntry_DoNotUse::Funcs::SerializeToCodedStream(2, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, int32> feature_indices = 3;
  if (!this->feature_indices().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->feature_indices().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->feature_indices().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->feature_indices().begin();
          it != this->feature_indices().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        ExamplePreprocessorConfig_FeatureIndicesEntry_DoNotUse::Funcs::SerializeToCodedStream(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->feature_indices().begin();
          it != this->feature_indices().end(); ++it) {
        ExamplePreprocessorConfig_FeatureIndicesEntry_DoNotUse::Funcs::SerializeToCodedStream(3, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, float> normalizers = 4;
  if (!this->normalizers().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->normalizers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->normalizers().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->normalizers().begin();
          it != this->normalizers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        ExamplePreprocessorConfig_NormalizersEntry_DoNotUse::Funcs::SerializeToCodedStream(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
          it = this->normalizers().begin();
          it != this->normalizers().end(); ++it) {
        ExamplePreprocessorConfig_NormalizersEntry_DoNotUse::Funcs::SerializeToCodedStream(4, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated string convert_to_string_features = 5;
  for (int i = 0, n = this->convert_to_string_features_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      5, this->convert_to_string_features(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:assist_ranker.ExamplePreprocessorConfig)
}

size_t ExamplePreprocessorConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.ExamplePreprocessorConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string missing_features = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->missing_features_size());
  for (int i = 0, n = this->missing_features_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->missing_features(i));
  }

  // map<string, .assist_ranker.ExamplePreprocessorConfig.Boundaries> bucketizers = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->bucketizers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::assist_ranker::ExamplePreprocessorConfig_Boundaries >::const_iterator
      it = this->bucketizers().begin();
      it != this->bucketizers().end(); ++it) {
    total_size += ExamplePreprocessorConfig_BucketizersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int32> feature_indices = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->feature_indices_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->feature_indices().begin();
      it != this->feature_indices().end(); ++it) {
    total_size += ExamplePreprocessorConfig_FeatureIndicesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, float> normalizers = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->normalizers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, float >::const_iterator
      it = this->normalizers().begin();
      it != this->normalizers().end(); ++it) {
    total_size += ExamplePreprocessorConfig_NormalizersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string convert_to_string_features = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->convert_to_string_features_size());
  for (int i = 0, n = this->convert_to_string_features_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->convert_to_string_features(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExamplePreprocessorConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ExamplePreprocessorConfig*>(
      &from));
}

void ExamplePreprocessorConfig::MergeFrom(const ExamplePreprocessorConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.ExamplePreprocessorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  missing_features_.MergeFrom(from.missing_features_);
  bucketizers_.MergeFrom(from.bucketizers_);
  feature_indices_.MergeFrom(from.feature_indices_);
  normalizers_.MergeFrom(from.normalizers_);
  convert_to_string_features_.MergeFrom(from.convert_to_string_features_);
}

void ExamplePreprocessorConfig::CopyFrom(const ExamplePreprocessorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.ExamplePreprocessorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExamplePreprocessorConfig::IsInitialized() const {
  return true;
}

void ExamplePreprocessorConfig::InternalSwap(ExamplePreprocessorConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  missing_features_.InternalSwap(CastToBase(&other->missing_features_));
  bucketizers_.Swap(&other->bucketizers_);
  feature_indices_.Swap(&other->feature_indices_);
  normalizers_.Swap(&other->normalizers_);
  convert_to_string_features_.InternalSwap(CastToBase(&other->convert_to_string_features_));
}

std::string ExamplePreprocessorConfig::GetTypeName() const {
  return "assist_ranker.ExamplePreprocessorConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace assist_ranker
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::assist_ranker::ExamplePreprocessorConfig_Boundaries* Arena::CreateMaybeMessage< ::assist_ranker::ExamplePreprocessorConfig_Boundaries >(Arena* arena) {
  return Arena::CreateInternal< ::assist_ranker::ExamplePreprocessorConfig_Boundaries >(arena);
}
template<> PROTOBUF_NOINLINE ::assist_ranker::ExamplePreprocessorConfig_BucketizersEntry_DoNotUse* Arena::CreateMaybeMessage< ::assist_ranker::ExamplePreprocessorConfig_BucketizersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::assist_ranker::ExamplePreprocessorConfig_BucketizersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::assist_ranker::ExamplePreprocessorConfig_FeatureIndicesEntry_DoNotUse* Arena::CreateMaybeMessage< ::assist_ranker::ExamplePreprocessorConfig_FeatureIndicesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::assist_ranker::ExamplePreprocessorConfig_FeatureIndicesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::assist_ranker::ExamplePreprocessorConfig_NormalizersEntry_DoNotUse* Arena::CreateMaybeMessage< ::assist_ranker::ExamplePreprocessorConfig_NormalizersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::assist_ranker::ExamplePreprocessorConfig_NormalizersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::assist_ranker::ExamplePreprocessorConfig* Arena::CreateMaybeMessage< ::assist_ranker::ExamplePreprocessorConfig >(Arena* arena) {
  return Arena::CreateInternal< ::assist_ranker::ExamplePreprocessorConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ranker_model.proto

#include "ranker_model.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_generic_5flogistic_5fregression_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GenericLogisticRegressionModel_generic_5flogistic_5fregression_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_nn_5fclassifier_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NNClassifierModel_nn_5fclassifier_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ranker_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RankerModelMetadata_ranker_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_translate_5franker_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TranslateRankerModel_translate_5franker_5fmodel_2eproto;
namespace assist_ranker {
class RankerModelMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankerModelMetadata> _instance;
} _RankerModelMetadata_default_instance_;
class RankerModelProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RankerModelProto> _instance;
  const ::assist_ranker::TranslateRankerModel* translate_;
  const ::assist_ranker::GenericLogisticRegressionModel* logistic_regression_;
  const ::assist_ranker::NNClassifierModel* nn_classifier_;
} _RankerModelProto_default_instance_;
}  // namespace assist_ranker
static void InitDefaultsscc_info_RankerModelMetadata_ranker_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::assist_ranker::_RankerModelMetadata_default_instance_;
    new (ptr) ::assist_ranker::RankerModelMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::assist_ranker::RankerModelMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RankerModelMetadata_ranker_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RankerModelMetadata_ranker_5fmodel_2eproto}, {}};

static void InitDefaultsscc_info_RankerModelProto_ranker_5fmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::assist_ranker::_RankerModelProto_default_instance_;
    new (ptr) ::assist_ranker::RankerModelProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::assist_ranker::RankerModelProto::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_RankerModelProto_ranker_5fmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_RankerModelProto_ranker_5fmodel_2eproto}, {
      &scc_info_RankerModelMetadata_ranker_5fmodel_2eproto.base,
      &scc_info_TranslateRankerModel_translate_5franker_5fmodel_2eproto.base,
      &scc_info_GenericLogisticRegressionModel_generic_5flogistic_5fregression_5fmodel_2eproto.base,
      &scc_info_NNClassifierModel_nn_5fclassifier_2eproto.base,}};

namespace assist_ranker {

// ===================================================================

void RankerModelMetadata::InitAsDefaultInstance() {
}
class RankerModelMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<RankerModelMetadata>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_modified_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cache_duration_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_model_version(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_input_features_names_are_hex_hashes(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

RankerModelMetadata::RankerModelMetadata()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:assist_ranker.RankerModelMetadata)
}
RankerModelMetadata::RankerModelMetadata(const RankerModelMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_label()) {
    label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  ::memcpy(&last_modified_sec_, &from.last_modified_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&input_features_names_are_hex_hashes_) -
    reinterpret_cast<char*>(&last_modified_sec_)) + sizeof(input_features_names_are_hex_hashes_));
  // @@protoc_insertion_point(copy_constructor:assist_ranker.RankerModelMetadata)
}

void RankerModelMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankerModelMetadata_ranker_5fmodel_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_modified_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&input_features_names_are_hex_hashes_) -
      reinterpret_cast<char*>(&last_modified_sec_)) + sizeof(input_features_names_are_hex_hashes_));
}

RankerModelMetadata::~RankerModelMetadata() {
  // @@protoc_insertion_point(destructor:assist_ranker.RankerModelMetadata)
  SharedDtor();
}

void RankerModelMetadata::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RankerModelMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankerModelMetadata& RankerModelMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankerModelMetadata_ranker_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void RankerModelMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.RankerModelMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      label_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      source_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&last_modified_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&input_features_names_are_hex_hashes_) -
        reinterpret_cast<char*>(&last_modified_sec_)) + sizeof(input_features_names_are_hex_hashes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RankerModelMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_label(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_source(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 last_modified_sec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_last_modified_sec(&has_bits);
          last_modified_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 cache_duration_sec = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_cache_duration_sec(&has_bits);
          cache_duration_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 model_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_model_version(&has_bits);
          model_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool input_features_names_are_hex_hashes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_input_features_names_are_hex_hashes(&has_bits);
          input_features_names_are_hex_hashes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RankerModelMetadata::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:assist_ranker.RankerModelMetadata)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string label = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string source = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 last_modified_sec = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_last_modified_sec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_modified_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 cache_duration_sec = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_cache_duration_sec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &cache_duration_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 model_version = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_model_version(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &model_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool input_features_names_are_hex_hashes = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_input_features_names_are_hex_hashes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &input_features_names_are_hex_hashes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:assist_ranker.RankerModelMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:assist_ranker.RankerModelMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RankerModelMetadata::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:assist_ranker.RankerModelMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string label = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->label(), output);
  }

  // optional string source = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->source(), output);
  }

  // optional int64 last_modified_sec = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->last_modified_sec(), output);
  }

  // optional int64 cache_duration_sec = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->cache_duration_sec(), output);
  }

  // optional uint32 model_version = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->model_version(), output);
  }

  // optional bool input_features_names_are_hex_hashes = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->input_features_names_are_hex_hashes(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:assist_ranker.RankerModelMetadata)
}

size_t RankerModelMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.RankerModelMetadata)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string label = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional string source = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional int64 last_modified_sec = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->last_modified_sec());
    }

    // optional int64 cache_duration_sec = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->cache_duration_sec());
    }

    // optional uint32 model_version = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->model_version());
    }

    // optional bool input_features_names_are_hex_hashes = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankerModelMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RankerModelMetadata*>(
      &from));
}

void RankerModelMetadata::MergeFrom(const RankerModelMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.RankerModelMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      source_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (cached_has_bits & 0x00000008u) {
      last_modified_sec_ = from.last_modified_sec_;
    }
    if (cached_has_bits & 0x00000010u) {
      cache_duration_sec_ = from.cache_duration_sec_;
    }
    if (cached_has_bits & 0x00000020u) {
      model_version_ = from.model_version_;
    }
    if (cached_has_bits & 0x00000040u) {
      input_features_names_are_hex_hashes_ = from.input_features_names_are_hex_hashes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RankerModelMetadata::CopyFrom(const RankerModelMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.RankerModelMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankerModelMetadata::IsInitialized() const {
  return true;
}

void RankerModelMetadata::InternalSwap(RankerModelMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(last_modified_sec_, other->last_modified_sec_);
  swap(cache_duration_sec_, other->cache_duration_sec_);
  swap(model_version_, other->model_version_);
  swap(input_features_names_are_hex_hashes_, other->input_features_names_are_hex_hashes_);
}

std::string RankerModelMetadata::GetTypeName() const {
  return "assist_ranker.RankerModelMetadata";
}


// ===================================================================

void RankerModelProto::InitAsDefaultInstance() {
  ::assist_ranker::_RankerModelProto_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::assist_ranker::RankerModelMetadata*>(
      ::assist_ranker::RankerModelMetadata::internal_default_instance());
}
class RankerModelProto::_Internal {
 public:
  using HasBits = decltype(std::declval<RankerModelProto>()._has_bits_);
  static const ::assist_ranker::RankerModelMetadata& metadata(const RankerModelProto* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::assist_ranker::TranslateRankerModel& translate(const RankerModelProto* msg);
  static const ::assist_ranker::GenericLogisticRegressionModel& logistic_regression(const RankerModelProto* msg);
  static const ::assist_ranker::NNClassifierModel& nn_classifier(const RankerModelProto* msg);
};

const ::assist_ranker::RankerModelMetadata&
RankerModelProto::_Internal::metadata(const RankerModelProto* msg) {
  return *msg->metadata_;
}
const ::assist_ranker::TranslateRankerModel&
RankerModelProto::_Internal::translate(const RankerModelProto* msg) {
  return *msg->model_.translate_;
}
const ::assist_ranker::GenericLogisticRegressionModel&
RankerModelProto::_Internal::logistic_regression(const RankerModelProto* msg) {
  return *msg->model_.logistic_regression_;
}
const ::assist_ranker::NNClassifierModel&
RankerModelProto::_Internal::nn_classifier(const RankerModelProto* msg) {
  return *msg->model_.nn_classifier_;
}
void RankerModelProto::set_allocated_translate(::assist_ranker::TranslateRankerModel* translate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_model();
  if (translate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      translate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translate, submessage_arena);
    }
    set_has_translate();
    model_.translate_ = translate;
  }
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.RankerModelProto.translate)
}
void RankerModelProto::clear_translate() {
  if (has_translate()) {
    delete model_.translate_;
    clear_has_model();
  }
}
void RankerModelProto::set_allocated_logistic_regression(::assist_ranker::GenericLogisticRegressionModel* logistic_regression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_model();
  if (logistic_regression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      logistic_regression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logistic_regression, submessage_arena);
    }
    set_has_logistic_regression();
    model_.logistic_regression_ = logistic_regression;
  }
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.RankerModelProto.logistic_regression)
}
void RankerModelProto::clear_logistic_regression() {
  if (has_logistic_regression()) {
    delete model_.logistic_regression_;
    clear_has_model();
  }
}
void RankerModelProto::set_allocated_nn_classifier(::assist_ranker::NNClassifierModel* nn_classifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_model();
  if (nn_classifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      nn_classifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nn_classifier, submessage_arena);
    }
    set_has_nn_classifier();
    model_.nn_classifier_ = nn_classifier;
  }
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.RankerModelProto.nn_classifier)
}
void RankerModelProto::clear_nn_classifier() {
  if (has_nn_classifier()) {
    delete model_.nn_classifier_;
    clear_has_model();
  }
}
RankerModelProto::RankerModelProto()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:assist_ranker.RankerModelProto)
}
RankerModelProto::RankerModelProto(const RankerModelProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_metadata()) {
    metadata_ = new ::assist_ranker::RankerModelMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  clear_has_model();
  switch (from.model_case()) {
    case kTranslate: {
      mutable_translate()->::assist_ranker::TranslateRankerModel::MergeFrom(from.translate());
      break;
    }
    case kLogisticRegression: {
      mutable_logistic_regression()->::assist_ranker::GenericLogisticRegressionModel::MergeFrom(from.logistic_regression());
      break;
    }
    case kNnClassifier: {
      mutable_nn_classifier()->::assist_ranker::NNClassifierModel::MergeFrom(from.nn_classifier());
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:assist_ranker.RankerModelProto)
}

void RankerModelProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RankerModelProto_ranker_5fmodel_2eproto.base);
  metadata_ = nullptr;
  clear_has_model();
}

RankerModelProto::~RankerModelProto() {
  // @@protoc_insertion_point(destructor:assist_ranker.RankerModelProto)
  SharedDtor();
}

void RankerModelProto::SharedDtor() {
  if (this != internal_default_instance()) delete metadata_;
  if (has_model()) {
    clear_model();
  }
}

void RankerModelProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RankerModelProto& RankerModelProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RankerModelProto_ranker_5fmodel_2eproto.base);
  return *internal_default_instance();
}


void RankerModelProto::clear_model() {
// @@protoc_insertion_point(one_of_clear_start:assist_ranker.RankerModelProto)
  switch (model_case()) {
    case kTranslate: {
      delete model_.translate_;
      break;
    }
    case kLogisticRegression: {
      delete model_.logistic_regression_;
      break;
    }
    case kNnClassifier: {
      delete model_.nn_classifier_;
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MODEL_NOT_SET;
}


void RankerModelProto::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.RankerModelProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(metadata_ != nullptr);
    metadata_->Clear();
  }
  clear_model();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RankerModelProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .assist_ranker.RankerModelMetadata metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .assist_ranker.TranslateRankerModel translate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_translate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .assist_ranker.GenericLogisticRegressionModel logistic_regression = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_logistic_regression(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .assist_ranker.NNClassifierModel nn_classifier = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_nn_classifier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RankerModelProto::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:assist_ranker.RankerModelProto)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .assist_ranker.RankerModelMetadata metadata = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .assist_ranker.TranslateRankerModel translate = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_translate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .assist_ranker.GenericLogisticRegressionModel logistic_regression = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_logistic_regression()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .assist_ranker.NNClassifierModel nn_classifier = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_nn_classifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:assist_ranker.RankerModelProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:assist_ranker.RankerModelProto)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RankerModelProto::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:assist_ranker.RankerModelProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .assist_ranker.RankerModelMetadata metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::metadata(this), output);
  }

  switch (model_case()) {
    case kTranslate:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        2, _Internal::translate(this), output);
      break;
    case kLogisticRegression:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        3, _Internal::logistic_regression(this), output);
      break;
    case kNnClassifier:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        4, _Internal::nn_classifier(this), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:assist_ranker.RankerModelProto)
}

size_t RankerModelProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.RankerModelProto)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .assist_ranker.RankerModelMetadata metadata = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  switch (model_case()) {
    // optional .assist_ranker.TranslateRankerModel translate = 2;
    case kTranslate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *model_.translate_);
      break;
    }
    // optional .assist_ranker.GenericLogisticRegressionModel logistic_regression = 3;
    case kLogisticRegression: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *model_.logistic_regression_);
      break;
    }
    // optional .assist_ranker.NNClassifierModel nn_classifier = 4;
    case kNnClassifier: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *model_.nn_classifier_);
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankerModelProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RankerModelProto*>(
      &from));
}

void RankerModelProto::MergeFrom(const RankerModelProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.RankerModelProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_metadata()) {
    mutable_metadata()->::assist_ranker::RankerModelMetadata::MergeFrom(from.metadata());
  }
  switch (from.model_case()) {
    case kTranslate: {
      mutable_translate()->::assist_ranker::TranslateRankerModel::MergeFrom(from.translate());
      break;
    }
    case kLogisticRegression: {
      mutable_logistic_regression()->::assist_ranker::GenericLogisticRegressionModel::MergeFrom(from.logistic_regression());
      break;
    }
    case kNnClassifier: {
      mutable_nn_classifier()->::assist_ranker::NNClassifierModel::MergeFrom(from.nn_classifier());
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
}

void RankerModelProto::CopyFrom(const RankerModelProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.RankerModelProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankerModelProto::IsInitialized() const {
  return true;
}

void RankerModelProto::InternalSwap(RankerModelProto* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(metadata_, other->metadata_);
  swap(model_, other->model_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string RankerModelProto::GetTypeName() const {
  return "assist_ranker.RankerModelProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace assist_ranker
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::assist_ranker::RankerModelMetadata* Arena::CreateMaybeMessage< ::assist_ranker::RankerModelMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::assist_ranker::RankerModelMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::assist_ranker::RankerModelProto* Arena::CreateMaybeMessage< ::assist_ranker::RankerModelProto >(Arena* arena) {
  return Arena::CreateInternal< ::assist_ranker::RankerModelProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

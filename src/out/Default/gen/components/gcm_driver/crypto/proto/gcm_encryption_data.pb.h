// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gcm_encryption_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gcm_5fencryption_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gcm_5fencryption_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gcm_5fencryption_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gcm_5fencryption_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace gcm {
class EncryptionData;
class EncryptionDataDefaultTypeInternal;
extern EncryptionDataDefaultTypeInternal _EncryptionData_default_instance_;
class KeyPair;
class KeyPairDefaultTypeInternal;
extern KeyPairDefaultTypeInternal _KeyPair_default_instance_;
}  // namespace gcm
PROTOBUF_NAMESPACE_OPEN
template<> ::gcm::EncryptionData* Arena::CreateMaybeMessage<::gcm::EncryptionData>(Arena*);
template<> ::gcm::KeyPair* Arena::CreateMaybeMessage<::gcm::KeyPair>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gcm {

enum KeyPair_KeyType : int {
  KeyPair_KeyType_ECDH_P256 = 0
};
bool KeyPair_KeyType_IsValid(int value);
constexpr KeyPair_KeyType KeyPair_KeyType_KeyType_MIN = KeyPair_KeyType_ECDH_P256;
constexpr KeyPair_KeyType KeyPair_KeyType_KeyType_MAX = KeyPair_KeyType_ECDH_P256;
constexpr int KeyPair_KeyType_KeyType_ARRAYSIZE = KeyPair_KeyType_KeyType_MAX + 1;

const std::string& KeyPair_KeyType_Name(KeyPair_KeyType value);
template<typename T>
inline const std::string& KeyPair_KeyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KeyPair_KeyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KeyPair_KeyType_Name.");
  return KeyPair_KeyType_Name(static_cast<KeyPair_KeyType>(enum_t_value));
}
bool KeyPair_KeyType_Parse(
    const std::string& name, KeyPair_KeyType* value);
// ===================================================================

class KeyPair :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:gcm.KeyPair) */ {
 public:
  KeyPair();
  virtual ~KeyPair();

  KeyPair(const KeyPair& from);
  KeyPair(KeyPair&& from) noexcept
    : KeyPair() {
    *this = ::std::move(from);
  }

  inline KeyPair& operator=(const KeyPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyPair& operator=(KeyPair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const KeyPair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyPair* internal_default_instance() {
    return reinterpret_cast<const KeyPair*>(
               &_KeyPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeyPair& a, KeyPair& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyPair* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyPair* New() const final {
    return CreateMaybeMessage<KeyPair>(nullptr);
  }

  KeyPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyPair>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const KeyPair& from);
  void MergeFrom(const KeyPair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KeyPair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gcm.KeyPair";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef KeyPair_KeyType KeyType;
  static constexpr KeyType ECDH_P256 =
    KeyPair_KeyType_ECDH_P256;
  static inline bool KeyType_IsValid(int value) {
    return KeyPair_KeyType_IsValid(value);
  }
  static constexpr KeyType KeyType_MIN =
    KeyPair_KeyType_KeyType_MIN;
  static constexpr KeyType KeyType_MAX =
    KeyPair_KeyType_KeyType_MAX;
  static constexpr int KeyType_ARRAYSIZE =
    KeyPair_KeyType_KeyType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& KeyType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, KeyType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function KeyType_Name.");
    return KeyPair_KeyType_Name(enum_t_value);
  }
  static inline bool KeyType_Parse(const std::string& name,
      KeyType* value) {
    return KeyPair_KeyType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPrivateKeyFieldNumber = 2,
    kPublicKeyFieldNumber = 4,
    kTypeFieldNumber = 1,
  };
  // optional bytes private_key = 2;
  bool has_private_key() const;
  void clear_private_key();
  const std::string& private_key() const;
  void set_private_key(const std::string& value);
  void set_private_key(std::string&& value);
  void set_private_key(const char* value);
  void set_private_key(const void* value, size_t size);
  std::string* mutable_private_key();
  std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);

  // optional bytes public_key = 4;
  bool has_public_key() const;
  void clear_public_key();
  const std::string& public_key() const;
  void set_public_key(const std::string& value);
  void set_public_key(std::string&& value);
  void set_public_key(const char* value);
  void set_public_key(const void* value, size_t size);
  std::string* mutable_public_key();
  std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);

  // required .gcm.KeyPair.KeyType type = 1;
  bool has_type() const;
  void clear_type();
  ::gcm::KeyPair_KeyType type() const;
  void set_type(::gcm::KeyPair_KeyType value);

  // @@protoc_insertion_point(class_scope:gcm.KeyPair)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  int type_;
  friend struct ::TableStruct_gcm_5fencryption_5fdata_2eproto;
};
// -------------------------------------------------------------------

class EncryptionData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:gcm.EncryptionData) */ {
 public:
  EncryptionData();
  virtual ~EncryptionData();

  EncryptionData(const EncryptionData& from);
  EncryptionData(EncryptionData&& from) noexcept
    : EncryptionData() {
    *this = ::std::move(from);
  }

  inline EncryptionData& operator=(const EncryptionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptionData& operator=(EncryptionData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const EncryptionData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EncryptionData* internal_default_instance() {
    return reinterpret_cast<const EncryptionData*>(
               &_EncryptionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EncryptionData& a, EncryptionData& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptionData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EncryptionData* New() const final {
    return CreateMaybeMessage<EncryptionData>(nullptr);
  }

  EncryptionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EncryptionData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const EncryptionData& from);
  void MergeFrom(const EncryptionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EncryptionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gcm.EncryptionData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 2,
    kAppIdFieldNumber = 1,
    kAuthSecretFieldNumber = 3,
    kAuthorizedEntityFieldNumber = 4,
    kPrivateKeyFieldNumber = 5,
  };
  // repeated .gcm.KeyPair keys = 2;
  int keys_size() const;
  void clear_keys();
  ::gcm::KeyPair* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gcm::KeyPair >*
      mutable_keys();
  const ::gcm::KeyPair& keys(int index) const;
  ::gcm::KeyPair* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gcm::KeyPair >&
      keys() const;

  // required string app_id = 1;
  bool has_app_id() const;
  void clear_app_id();
  const std::string& app_id() const;
  void set_app_id(const std::string& value);
  void set_app_id(std::string&& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  std::string* mutable_app_id();
  std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);

  // optional bytes auth_secret = 3;
  bool has_auth_secret() const;
  void clear_auth_secret();
  const std::string& auth_secret() const;
  void set_auth_secret(const std::string& value);
  void set_auth_secret(std::string&& value);
  void set_auth_secret(const char* value);
  void set_auth_secret(const void* value, size_t size);
  std::string* mutable_auth_secret();
  std::string* release_auth_secret();
  void set_allocated_auth_secret(std::string* auth_secret);

  // optional string authorized_entity = 4;
  bool has_authorized_entity() const;
  void clear_authorized_entity();
  const std::string& authorized_entity() const;
  void set_authorized_entity(const std::string& value);
  void set_authorized_entity(std::string&& value);
  void set_authorized_entity(const char* value);
  void set_authorized_entity(const char* value, size_t size);
  std::string* mutable_authorized_entity();
  std::string* release_authorized_entity();
  void set_allocated_authorized_entity(std::string* authorized_entity);

  // optional string private_key = 5;
  bool has_private_key() const;
  void clear_private_key();
  const std::string& private_key() const;
  void set_private_key(const std::string& value);
  void set_private_key(std::string&& value);
  void set_private_key(const char* value);
  void set_private_key(const char* value, size_t size);
  std::string* mutable_private_key();
  std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);

  // @@protoc_insertion_point(class_scope:gcm.EncryptionData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gcm::KeyPair > keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authorized_entity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
  friend struct ::TableStruct_gcm_5fencryption_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyPair

// required .gcm.KeyPair.KeyType type = 1;
inline bool KeyPair::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KeyPair::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::gcm::KeyPair_KeyType KeyPair::type() const {
  // @@protoc_insertion_point(field_get:gcm.KeyPair.type)
  return static_cast< ::gcm::KeyPair_KeyType >(type_);
}
inline void KeyPair::set_type(::gcm::KeyPair_KeyType value) {
  assert(::gcm::KeyPair_KeyType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
  // @@protoc_insertion_point(field_set:gcm.KeyPair.type)
}

// optional bytes private_key = 2;
inline bool KeyPair::has_private_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeyPair::clear_private_key() {
  private_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KeyPair::private_key() const {
  // @@protoc_insertion_point(field_get:gcm.KeyPair.private_key)
  return private_key_.GetNoArena();
}
inline void KeyPair::set_private_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  private_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gcm.KeyPair.private_key)
}
inline void KeyPair::set_private_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  private_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gcm.KeyPair.private_key)
}
inline void KeyPair::set_private_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  private_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gcm.KeyPair.private_key)
}
inline void KeyPair::set_private_key(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  private_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gcm.KeyPair.private_key)
}
inline std::string* KeyPair::mutable_private_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:gcm.KeyPair.private_key)
  return private_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeyPair::release_private_key() {
  // @@protoc_insertion_point(field_release:gcm.KeyPair.private_key)
  if (!has_private_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return private_key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeyPair::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  private_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_key);
  // @@protoc_insertion_point(field_set_allocated:gcm.KeyPair.private_key)
}

// optional bytes public_key = 4;
inline bool KeyPair::has_public_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeyPair::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KeyPair::public_key() const {
  // @@protoc_insertion_point(field_get:gcm.KeyPair.public_key)
  return public_key_.GetNoArena();
}
inline void KeyPair::set_public_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gcm.KeyPair.public_key)
}
inline void KeyPair::set_public_key(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  public_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gcm.KeyPair.public_key)
}
inline void KeyPair::set_public_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gcm.KeyPair.public_key)
}
inline void KeyPair::set_public_key(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  public_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gcm.KeyPair.public_key)
}
inline std::string* KeyPair::mutable_public_key() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:gcm.KeyPair.public_key)
  return public_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeyPair::release_public_key() {
  // @@protoc_insertion_point(field_release:gcm.KeyPair.public_key)
  if (!has_public_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return public_key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeyPair::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  public_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:gcm.KeyPair.public_key)
}

// -------------------------------------------------------------------

// EncryptionData

// required string app_id = 1;
inline bool EncryptionData::has_app_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EncryptionData::clear_app_id() {
  app_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EncryptionData::app_id() const {
  // @@protoc_insertion_point(field_get:gcm.EncryptionData.app_id)
  return app_id_.GetNoArena();
}
inline void EncryptionData::set_app_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gcm.EncryptionData.app_id)
}
inline void EncryptionData::set_app_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  app_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gcm.EncryptionData.app_id)
}
inline void EncryptionData::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gcm.EncryptionData.app_id)
}
inline void EncryptionData::set_app_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  app_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gcm.EncryptionData.app_id)
}
inline std::string* EncryptionData::mutable_app_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:gcm.EncryptionData.app_id)
  return app_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EncryptionData::release_app_id() {
  // @@protoc_insertion_point(field_release:gcm.EncryptionData.app_id)
  if (!has_app_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return app_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EncryptionData::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  app_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id);
  // @@protoc_insertion_point(field_set_allocated:gcm.EncryptionData.app_id)
}

// optional string authorized_entity = 4;
inline bool EncryptionData::has_authorized_entity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EncryptionData::clear_authorized_entity() {
  authorized_entity_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& EncryptionData::authorized_entity() const {
  // @@protoc_insertion_point(field_get:gcm.EncryptionData.authorized_entity)
  return authorized_entity_.GetNoArena();
}
inline void EncryptionData::set_authorized_entity(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  authorized_entity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gcm.EncryptionData.authorized_entity)
}
inline void EncryptionData::set_authorized_entity(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  authorized_entity_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gcm.EncryptionData.authorized_entity)
}
inline void EncryptionData::set_authorized_entity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  authorized_entity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gcm.EncryptionData.authorized_entity)
}
inline void EncryptionData::set_authorized_entity(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  authorized_entity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gcm.EncryptionData.authorized_entity)
}
inline std::string* EncryptionData::mutable_authorized_entity() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:gcm.EncryptionData.authorized_entity)
  return authorized_entity_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EncryptionData::release_authorized_entity() {
  // @@protoc_insertion_point(field_release:gcm.EncryptionData.authorized_entity)
  if (!has_authorized_entity()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return authorized_entity_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EncryptionData::set_allocated_authorized_entity(std::string* authorized_entity) {
  if (authorized_entity != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  authorized_entity_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authorized_entity);
  // @@protoc_insertion_point(field_set_allocated:gcm.EncryptionData.authorized_entity)
}

// repeated .gcm.KeyPair keys = 2;
inline int EncryptionData::keys_size() const {
  return keys_.size();
}
inline void EncryptionData::clear_keys() {
  keys_.Clear();
}
inline ::gcm::KeyPair* EncryptionData::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:gcm.EncryptionData.keys)
  return keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gcm::KeyPair >*
EncryptionData::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:gcm.EncryptionData.keys)
  return &keys_;
}
inline const ::gcm::KeyPair& EncryptionData::keys(int index) const {
  // @@protoc_insertion_point(field_get:gcm.EncryptionData.keys)
  return keys_.Get(index);
}
inline ::gcm::KeyPair* EncryptionData::add_keys() {
  // @@protoc_insertion_point(field_add:gcm.EncryptionData.keys)
  return keys_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gcm::KeyPair >&
EncryptionData::keys() const {
  // @@protoc_insertion_point(field_list:gcm.EncryptionData.keys)
  return keys_;
}

// optional string private_key = 5;
inline bool EncryptionData::has_private_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EncryptionData::clear_private_key() {
  private_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& EncryptionData::private_key() const {
  // @@protoc_insertion_point(field_get:gcm.EncryptionData.private_key)
  return private_key_.GetNoArena();
}
inline void EncryptionData::set_private_key(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  private_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gcm.EncryptionData.private_key)
}
inline void EncryptionData::set_private_key(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  private_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gcm.EncryptionData.private_key)
}
inline void EncryptionData::set_private_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  private_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gcm.EncryptionData.private_key)
}
inline void EncryptionData::set_private_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  private_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gcm.EncryptionData.private_key)
}
inline std::string* EncryptionData::mutable_private_key() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:gcm.EncryptionData.private_key)
  return private_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EncryptionData::release_private_key() {
  // @@protoc_insertion_point(field_release:gcm.EncryptionData.private_key)
  if (!has_private_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return private_key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EncryptionData::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  private_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_key);
  // @@protoc_insertion_point(field_set_allocated:gcm.EncryptionData.private_key)
}

// optional bytes auth_secret = 3;
inline bool EncryptionData::has_auth_secret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EncryptionData::clear_auth_secret() {
  auth_secret_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& EncryptionData::auth_secret() const {
  // @@protoc_insertion_point(field_get:gcm.EncryptionData.auth_secret)
  return auth_secret_.GetNoArena();
}
inline void EncryptionData::set_auth_secret(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  auth_secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gcm.EncryptionData.auth_secret)
}
inline void EncryptionData::set_auth_secret(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  auth_secret_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gcm.EncryptionData.auth_secret)
}
inline void EncryptionData::set_auth_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  auth_secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gcm.EncryptionData.auth_secret)
}
inline void EncryptionData::set_auth_secret(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  auth_secret_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gcm.EncryptionData.auth_secret)
}
inline std::string* EncryptionData::mutable_auth_secret() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:gcm.EncryptionData.auth_secret)
  return auth_secret_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EncryptionData::release_auth_secret() {
  // @@protoc_insertion_point(field_release:gcm.EncryptionData.auth_secret)
  if (!has_auth_secret()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return auth_secret_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EncryptionData::set_allocated_auth_secret(std::string* auth_secret) {
  if (auth_secret != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  auth_secret_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth_secret);
  // @@protoc_insertion_point(field_set_allocated:gcm.EncryptionData.auth_secret)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gcm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::gcm::KeyPair_KeyType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gcm_5fencryption_5fdata_2eproto

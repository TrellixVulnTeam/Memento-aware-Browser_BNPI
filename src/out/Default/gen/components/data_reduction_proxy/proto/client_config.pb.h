// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace data_reduction_proxy {
class ClientConfig;
class ClientConfigDefaultTypeInternal;
extern ClientConfigDefaultTypeInternal _ClientConfig_default_instance_;
class ConfigDeviceInfo;
class ConfigDeviceInfoDefaultTypeInternal;
extern ConfigDeviceInfoDefaultTypeInternal _ConfigDeviceInfo_default_instance_;
class CreateClientConfigRequest;
class CreateClientConfigRequestDefaultTypeInternal;
extern CreateClientConfigRequestDefaultTypeInternal _CreateClientConfigRequest_default_instance_;
class DeprecatedPageloadMetricsConfig;
class DeprecatedPageloadMetricsConfigDefaultTypeInternal;
extern DeprecatedPageloadMetricsConfigDefaultTypeInternal _DeprecatedPageloadMetricsConfig_default_instance_;
class DeprecatedProxyConfig;
class DeprecatedProxyConfigDefaultTypeInternal;
extern DeprecatedProxyConfigDefaultTypeInternal _DeprecatedProxyConfig_default_instance_;
class DeprecatedProxyServer;
class DeprecatedProxyServerDefaultTypeInternal;
extern DeprecatedProxyServerDefaultTypeInternal _DeprecatedProxyServer_default_instance_;
class Duration;
class DurationDefaultTypeInternal;
extern DurationDefaultTypeInternal _Duration_default_instance_;
class PrefetchProxyConfig;
class PrefetchProxyConfigDefaultTypeInternal;
extern PrefetchProxyConfigDefaultTypeInternal _PrefetchProxyConfig_default_instance_;
class PrefetchProxyConfig_Proxy;
class PrefetchProxyConfig_ProxyDefaultTypeInternal;
extern PrefetchProxyConfig_ProxyDefaultTypeInternal _PrefetchProxyConfig_Proxy_default_instance_;
class Timestamp;
class TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
class VersionInfo;
class VersionInfoDefaultTypeInternal;
extern VersionInfoDefaultTypeInternal _VersionInfo_default_instance_;
}  // namespace data_reduction_proxy
PROTOBUF_NAMESPACE_OPEN
template<> ::data_reduction_proxy::ClientConfig* Arena::CreateMaybeMessage<::data_reduction_proxy::ClientConfig>(Arena*);
template<> ::data_reduction_proxy::ConfigDeviceInfo* Arena::CreateMaybeMessage<::data_reduction_proxy::ConfigDeviceInfo>(Arena*);
template<> ::data_reduction_proxy::CreateClientConfigRequest* Arena::CreateMaybeMessage<::data_reduction_proxy::CreateClientConfigRequest>(Arena*);
template<> ::data_reduction_proxy::DeprecatedPageloadMetricsConfig* Arena::CreateMaybeMessage<::data_reduction_proxy::DeprecatedPageloadMetricsConfig>(Arena*);
template<> ::data_reduction_proxy::DeprecatedProxyConfig* Arena::CreateMaybeMessage<::data_reduction_proxy::DeprecatedProxyConfig>(Arena*);
template<> ::data_reduction_proxy::DeprecatedProxyServer* Arena::CreateMaybeMessage<::data_reduction_proxy::DeprecatedProxyServer>(Arena*);
template<> ::data_reduction_proxy::Duration* Arena::CreateMaybeMessage<::data_reduction_proxy::Duration>(Arena*);
template<> ::data_reduction_proxy::PrefetchProxyConfig* Arena::CreateMaybeMessage<::data_reduction_proxy::PrefetchProxyConfig>(Arena*);
template<> ::data_reduction_proxy::PrefetchProxyConfig_Proxy* Arena::CreateMaybeMessage<::data_reduction_proxy::PrefetchProxyConfig_Proxy>(Arena*);
template<> ::data_reduction_proxy::Timestamp* Arena::CreateMaybeMessage<::data_reduction_proxy::Timestamp>(Arena*);
template<> ::data_reduction_proxy::VersionInfo* Arena::CreateMaybeMessage<::data_reduction_proxy::VersionInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace data_reduction_proxy {

enum DeprecatedProxyServer_ProxyScheme : int {
  DeprecatedProxyServer_ProxyScheme_UNSPECIFIED = 0,
  DeprecatedProxyServer_ProxyScheme_DEPRECATED_HTTP PROTOBUF_DEPRECATED = 1,
  DeprecatedProxyServer_ProxyScheme_HTTPS = 2,
  DeprecatedProxyServer_ProxyScheme_DEPRECATED_QUIC PROTOBUF_DEPRECATED = 3
};
bool DeprecatedProxyServer_ProxyScheme_IsValid(int value);
constexpr DeprecatedProxyServer_ProxyScheme DeprecatedProxyServer_ProxyScheme_ProxyScheme_MIN = DeprecatedProxyServer_ProxyScheme_UNSPECIFIED;
constexpr DeprecatedProxyServer_ProxyScheme DeprecatedProxyServer_ProxyScheme_ProxyScheme_MAX = DeprecatedProxyServer_ProxyScheme_DEPRECATED_QUIC;
constexpr int DeprecatedProxyServer_ProxyScheme_ProxyScheme_ARRAYSIZE = DeprecatedProxyServer_ProxyScheme_ProxyScheme_MAX + 1;

const std::string& DeprecatedProxyServer_ProxyScheme_Name(DeprecatedProxyServer_ProxyScheme value);
template<typename T>
inline const std::string& DeprecatedProxyServer_ProxyScheme_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeprecatedProxyServer_ProxyScheme>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeprecatedProxyServer_ProxyScheme_Name.");
  return DeprecatedProxyServer_ProxyScheme_Name(static_cast<DeprecatedProxyServer_ProxyScheme>(enum_t_value));
}
bool DeprecatedProxyServer_ProxyScheme_Parse(
    const std::string& name, DeprecatedProxyServer_ProxyScheme* value);
enum DeprecatedProxyServer_DeprecatedProxyType : int {
  DeprecatedProxyServer_DeprecatedProxyType_UNSPECIFIED_TYPE = 0,
  DeprecatedProxyServer_DeprecatedProxyType_CORE = 1
};
bool DeprecatedProxyServer_DeprecatedProxyType_IsValid(int value);
constexpr DeprecatedProxyServer_DeprecatedProxyType DeprecatedProxyServer_DeprecatedProxyType_DeprecatedProxyType_MIN = DeprecatedProxyServer_DeprecatedProxyType_UNSPECIFIED_TYPE;
constexpr DeprecatedProxyServer_DeprecatedProxyType DeprecatedProxyServer_DeprecatedProxyType_DeprecatedProxyType_MAX = DeprecatedProxyServer_DeprecatedProxyType_CORE;
constexpr int DeprecatedProxyServer_DeprecatedProxyType_DeprecatedProxyType_ARRAYSIZE = DeprecatedProxyServer_DeprecatedProxyType_DeprecatedProxyType_MAX + 1;

const std::string& DeprecatedProxyServer_DeprecatedProxyType_Name(DeprecatedProxyServer_DeprecatedProxyType value);
template<typename T>
inline const std::string& DeprecatedProxyServer_DeprecatedProxyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeprecatedProxyServer_DeprecatedProxyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeprecatedProxyServer_DeprecatedProxyType_Name.");
  return DeprecatedProxyServer_DeprecatedProxyType_Name(static_cast<DeprecatedProxyServer_DeprecatedProxyType>(enum_t_value));
}
bool DeprecatedProxyServer_DeprecatedProxyType_Parse(
    const std::string& name, DeprecatedProxyServer_DeprecatedProxyType* value);
enum PrefetchProxyConfig_Proxy_Type : int {
  PrefetchProxyConfig_Proxy_Type_UNSPECIFIED_TYPE = 0,
  PrefetchProxyConfig_Proxy_Type_CONNECT = 1
};
bool PrefetchProxyConfig_Proxy_Type_IsValid(int value);
constexpr PrefetchProxyConfig_Proxy_Type PrefetchProxyConfig_Proxy_Type_Type_MIN = PrefetchProxyConfig_Proxy_Type_UNSPECIFIED_TYPE;
constexpr PrefetchProxyConfig_Proxy_Type PrefetchProxyConfig_Proxy_Type_Type_MAX = PrefetchProxyConfig_Proxy_Type_CONNECT;
constexpr int PrefetchProxyConfig_Proxy_Type_Type_ARRAYSIZE = PrefetchProxyConfig_Proxy_Type_Type_MAX + 1;

const std::string& PrefetchProxyConfig_Proxy_Type_Name(PrefetchProxyConfig_Proxy_Type value);
template<typename T>
inline const std::string& PrefetchProxyConfig_Proxy_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PrefetchProxyConfig_Proxy_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PrefetchProxyConfig_Proxy_Type_Name.");
  return PrefetchProxyConfig_Proxy_Type_Name(static_cast<PrefetchProxyConfig_Proxy_Type>(enum_t_value));
}
bool PrefetchProxyConfig_Proxy_Type_Parse(
    const std::string& name, PrefetchProxyConfig_Proxy_Type* value);
enum PrefetchProxyConfig_Proxy_Scheme : int {
  PrefetchProxyConfig_Proxy_Scheme_UNSPECIFIED_SCHEME = 0,
  PrefetchProxyConfig_Proxy_Scheme_HTTP = 1,
  PrefetchProxyConfig_Proxy_Scheme_HTTPS = 2
};
bool PrefetchProxyConfig_Proxy_Scheme_IsValid(int value);
constexpr PrefetchProxyConfig_Proxy_Scheme PrefetchProxyConfig_Proxy_Scheme_Scheme_MIN = PrefetchProxyConfig_Proxy_Scheme_UNSPECIFIED_SCHEME;
constexpr PrefetchProxyConfig_Proxy_Scheme PrefetchProxyConfig_Proxy_Scheme_Scheme_MAX = PrefetchProxyConfig_Proxy_Scheme_HTTPS;
constexpr int PrefetchProxyConfig_Proxy_Scheme_Scheme_ARRAYSIZE = PrefetchProxyConfig_Proxy_Scheme_Scheme_MAX + 1;

const std::string& PrefetchProxyConfig_Proxy_Scheme_Name(PrefetchProxyConfig_Proxy_Scheme value);
template<typename T>
inline const std::string& PrefetchProxyConfig_Proxy_Scheme_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PrefetchProxyConfig_Proxy_Scheme>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PrefetchProxyConfig_Proxy_Scheme_Name.");
  return PrefetchProxyConfig_Proxy_Scheme_Name(static_cast<PrefetchProxyConfig_Proxy_Scheme>(enum_t_value));
}
bool PrefetchProxyConfig_Proxy_Scheme_Parse(
    const std::string& name, PrefetchProxyConfig_Proxy_Scheme* value);
enum CreateClientConfigRequest_DogfoodGroup : int {
  CreateClientConfigRequest_DogfoodGroup_UNSPECIFIED = 0,
  CreateClientConfigRequest_DogfoodGroup_NONDOGFOOD = 1,
  CreateClientConfigRequest_DogfoodGroup_DOGFOOD = 2
};
bool CreateClientConfigRequest_DogfoodGroup_IsValid(int value);
constexpr CreateClientConfigRequest_DogfoodGroup CreateClientConfigRequest_DogfoodGroup_DogfoodGroup_MIN = CreateClientConfigRequest_DogfoodGroup_UNSPECIFIED;
constexpr CreateClientConfigRequest_DogfoodGroup CreateClientConfigRequest_DogfoodGroup_DogfoodGroup_MAX = CreateClientConfigRequest_DogfoodGroup_DOGFOOD;
constexpr int CreateClientConfigRequest_DogfoodGroup_DogfoodGroup_ARRAYSIZE = CreateClientConfigRequest_DogfoodGroup_DogfoodGroup_MAX + 1;

const std::string& CreateClientConfigRequest_DogfoodGroup_Name(CreateClientConfigRequest_DogfoodGroup value);
template<typename T>
inline const std::string& CreateClientConfigRequest_DogfoodGroup_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreateClientConfigRequest_DogfoodGroup>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreateClientConfigRequest_DogfoodGroup_Name.");
  return CreateClientConfigRequest_DogfoodGroup_Name(static_cast<CreateClientConfigRequest_DogfoodGroup>(enum_t_value));
}
bool CreateClientConfigRequest_DogfoodGroup_Parse(
    const std::string& name, CreateClientConfigRequest_DogfoodGroup* value);
// ===================================================================

class ClientConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:data_reduction_proxy.ClientConfig) */ {
 public:
  ClientConfig();
  virtual ~ClientConfig();

  ClientConfig(const ClientConfig& from);
  ClientConfig(ClientConfig&& from) noexcept
    : ClientConfig() {
    *this = ::std::move(from);
  }

  inline ClientConfig& operator=(const ClientConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientConfig& operator=(ClientConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ClientConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientConfig* internal_default_instance() {
    return reinterpret_cast<const ClientConfig*>(
               &_ClientConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientConfig& a, ClientConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientConfig* New() const final {
    return CreateMaybeMessage<ClientConfig>(nullptr);
  }

  ClientConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ClientConfig& from);
  void MergeFrom(const ClientConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "data_reduction_proxy.ClientConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionKeyFieldNumber = 1,
    kDEPRECATEDRefreshTimeFieldNumber = 2,
    kProxyConfigFieldNumber = 3,
    kRefreshDurationFieldNumber = 4,
    kPageloadMetricsConfigFieldNumber = 5,
    kPrefetchProxyConfigFieldNumber = 8,
    kIgnoreLongTermBlockListRulesFieldNumber = 7,
  };
  // optional string session_key = 1;
  bool has_session_key() const;
  void clear_session_key();
  const std::string& session_key() const;
  void set_session_key(const std::string& value);
  void set_session_key(std::string&& value);
  void set_session_key(const char* value);
  void set_session_key(const char* value, size_t size);
  std::string* mutable_session_key();
  std::string* release_session_key();
  void set_allocated_session_key(std::string* session_key);

  // optional .data_reduction_proxy.Timestamp DEPRECATED_refresh_time = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_deprecated_refresh_time() const;
  PROTOBUF_DEPRECATED void clear_deprecated_refresh_time();
  PROTOBUF_DEPRECATED const ::data_reduction_proxy::Timestamp& deprecated_refresh_time() const;
  PROTOBUF_DEPRECATED ::data_reduction_proxy::Timestamp* release_deprecated_refresh_time();
  PROTOBUF_DEPRECATED ::data_reduction_proxy::Timestamp* mutable_deprecated_refresh_time();
  PROTOBUF_DEPRECATED void set_allocated_deprecated_refresh_time(::data_reduction_proxy::Timestamp* deprecated_refresh_time);

  // optional .data_reduction_proxy.DeprecatedProxyConfig proxy_config = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_proxy_config() const;
  PROTOBUF_DEPRECATED void clear_proxy_config();
  PROTOBUF_DEPRECATED const ::data_reduction_proxy::DeprecatedProxyConfig& proxy_config() const;
  PROTOBUF_DEPRECATED ::data_reduction_proxy::DeprecatedProxyConfig* release_proxy_config();
  PROTOBUF_DEPRECATED ::data_reduction_proxy::DeprecatedProxyConfig* mutable_proxy_config();
  PROTOBUF_DEPRECATED void set_allocated_proxy_config(::data_reduction_proxy::DeprecatedProxyConfig* proxy_config);

  // optional .data_reduction_proxy.Duration refresh_duration = 4;
  bool has_refresh_duration() const;
  void clear_refresh_duration();
  const ::data_reduction_proxy::Duration& refresh_duration() const;
  ::data_reduction_proxy::Duration* release_refresh_duration();
  ::data_reduction_proxy::Duration* mutable_refresh_duration();
  void set_allocated_refresh_duration(::data_reduction_proxy::Duration* refresh_duration);

  // optional .data_reduction_proxy.DeprecatedPageloadMetricsConfig pageload_metrics_config = 5 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_pageload_metrics_config() const;
  PROTOBUF_DEPRECATED void clear_pageload_metrics_config();
  PROTOBUF_DEPRECATED const ::data_reduction_proxy::DeprecatedPageloadMetricsConfig& pageload_metrics_config() const;
  PROTOBUF_DEPRECATED ::data_reduction_proxy::DeprecatedPageloadMetricsConfig* release_pageload_metrics_config();
  PROTOBUF_DEPRECATED ::data_reduction_proxy::DeprecatedPageloadMetricsConfig* mutable_pageload_metrics_config();
  PROTOBUF_DEPRECATED void set_allocated_pageload_metrics_config(::data_reduction_proxy::DeprecatedPageloadMetricsConfig* pageload_metrics_config);

  // optional .data_reduction_proxy.PrefetchProxyConfig prefetch_proxy_config = 8;
  bool has_prefetch_proxy_config() const;
  void clear_prefetch_proxy_config();
  const ::data_reduction_proxy::PrefetchProxyConfig& prefetch_proxy_config() const;
  ::data_reduction_proxy::PrefetchProxyConfig* release_prefetch_proxy_config();
  ::data_reduction_proxy::PrefetchProxyConfig* mutable_prefetch_proxy_config();
  void set_allocated_prefetch_proxy_config(::data_reduction_proxy::PrefetchProxyConfig* prefetch_proxy_config);

  // optional bool ignore_long_term_block_list_rules = 7 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_ignore_long_term_block_list_rules() const;
  PROTOBUF_DEPRECATED void clear_ignore_long_term_block_list_rules();
  PROTOBUF_DEPRECATED bool ignore_long_term_block_list_rules() const;
  PROTOBUF_DEPRECATED void set_ignore_long_term_block_list_rules(bool value);

  // @@protoc_insertion_point(class_scope:data_reduction_proxy.ClientConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_key_;
  ::data_reduction_proxy::Timestamp* deprecated_refresh_time_;
  ::data_reduction_proxy::DeprecatedProxyConfig* proxy_config_;
  ::data_reduction_proxy::Duration* refresh_duration_;
  ::data_reduction_proxy::DeprecatedPageloadMetricsConfig* pageload_metrics_config_;
  ::data_reduction_proxy::PrefetchProxyConfig* prefetch_proxy_config_;
  bool ignore_long_term_block_list_rules_;
  friend struct ::TableStruct_client_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class DeprecatedPageloadMetricsConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:data_reduction_proxy.DeprecatedPageloadMetricsConfig) */ {
 public:
  DeprecatedPageloadMetricsConfig();
  virtual ~DeprecatedPageloadMetricsConfig();

  DeprecatedPageloadMetricsConfig(const DeprecatedPageloadMetricsConfig& from);
  DeprecatedPageloadMetricsConfig(DeprecatedPageloadMetricsConfig&& from) noexcept
    : DeprecatedPageloadMetricsConfig() {
    *this = ::std::move(from);
  }

  inline DeprecatedPageloadMetricsConfig& operator=(const DeprecatedPageloadMetricsConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeprecatedPageloadMetricsConfig& operator=(DeprecatedPageloadMetricsConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DeprecatedPageloadMetricsConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeprecatedPageloadMetricsConfig* internal_default_instance() {
    return reinterpret_cast<const DeprecatedPageloadMetricsConfig*>(
               &_DeprecatedPageloadMetricsConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeprecatedPageloadMetricsConfig& a, DeprecatedPageloadMetricsConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DeprecatedPageloadMetricsConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeprecatedPageloadMetricsConfig* New() const final {
    return CreateMaybeMessage<DeprecatedPageloadMetricsConfig>(nullptr);
  }

  DeprecatedPageloadMetricsConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeprecatedPageloadMetricsConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeprecatedPageloadMetricsConfig& from);
  void MergeFrom(const DeprecatedPageloadMetricsConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeprecatedPageloadMetricsConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "data_reduction_proxy.DeprecatedPageloadMetricsConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReportingFractionFieldNumber = 1,
  };
  // optional float reporting_fraction = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_reporting_fraction() const;
  PROTOBUF_DEPRECATED void clear_reporting_fraction();
  PROTOBUF_DEPRECATED float reporting_fraction() const;
  PROTOBUF_DEPRECATED void set_reporting_fraction(float value);

  // @@protoc_insertion_point(class_scope:data_reduction_proxy.DeprecatedPageloadMetricsConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float reporting_fraction_;
  friend struct ::TableStruct_client_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class Timestamp :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:data_reduction_proxy.Timestamp) */ {
 public:
  Timestamp();
  virtual ~Timestamp();

  Timestamp(const Timestamp& from);
  Timestamp(Timestamp&& from) noexcept
    : Timestamp() {
    *this = ::std::move(from);
  }

  inline Timestamp& operator=(const Timestamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Timestamp& operator=(Timestamp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Timestamp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Timestamp* internal_default_instance() {
    return reinterpret_cast<const Timestamp*>(
               &_Timestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Timestamp& a, Timestamp& b) {
    a.Swap(&b);
  }
  inline void Swap(Timestamp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Timestamp* New() const final {
    return CreateMaybeMessage<Timestamp>(nullptr);
  }

  Timestamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Timestamp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Timestamp& from);
  void MergeFrom(const Timestamp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Timestamp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "data_reduction_proxy.Timestamp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsFieldNumber = 1,
    kNanosFieldNumber = 2,
  };
  // optional int64 seconds = 1;
  bool has_seconds() const;
  void clear_seconds();
  ::PROTOBUF_NAMESPACE_ID::int64 seconds() const;
  void set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 nanos = 2;
  bool has_nanos() const;
  void clear_nanos();
  ::PROTOBUF_NAMESPACE_ID::int32 nanos() const;
  void set_nanos(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:data_reduction_proxy.Timestamp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 seconds_;
  ::PROTOBUF_NAMESPACE_ID::int32 nanos_;
  friend struct ::TableStruct_client_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class Duration :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:data_reduction_proxy.Duration) */ {
 public:
  Duration();
  virtual ~Duration();

  Duration(const Duration& from);
  Duration(Duration&& from) noexcept
    : Duration() {
    *this = ::std::move(from);
  }

  inline Duration& operator=(const Duration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Duration& operator=(Duration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Duration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Duration* internal_default_instance() {
    return reinterpret_cast<const Duration*>(
               &_Duration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Duration& a, Duration& b) {
    a.Swap(&b);
  }
  inline void Swap(Duration* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Duration* New() const final {
    return CreateMaybeMessage<Duration>(nullptr);
  }

  Duration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Duration>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Duration& from);
  void MergeFrom(const Duration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Duration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "data_reduction_proxy.Duration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsFieldNumber = 1,
    kNanosFieldNumber = 2,
  };
  // optional int64 seconds = 1;
  bool has_seconds() const;
  void clear_seconds();
  ::PROTOBUF_NAMESPACE_ID::int64 seconds() const;
  void set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional int32 nanos = 2;
  bool has_nanos() const;
  void clear_nanos();
  ::PROTOBUF_NAMESPACE_ID::int32 nanos() const;
  void set_nanos(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:data_reduction_proxy.Duration)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 seconds_;
  ::PROTOBUF_NAMESPACE_ID::int32 nanos_;
  friend struct ::TableStruct_client_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class DeprecatedProxyConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:data_reduction_proxy.DeprecatedProxyConfig) */ {
 public:
  DeprecatedProxyConfig();
  virtual ~DeprecatedProxyConfig();

  DeprecatedProxyConfig(const DeprecatedProxyConfig& from);
  DeprecatedProxyConfig(DeprecatedProxyConfig&& from) noexcept
    : DeprecatedProxyConfig() {
    *this = ::std::move(from);
  }

  inline DeprecatedProxyConfig& operator=(const DeprecatedProxyConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeprecatedProxyConfig& operator=(DeprecatedProxyConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DeprecatedProxyConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeprecatedProxyConfig* internal_default_instance() {
    return reinterpret_cast<const DeprecatedProxyConfig*>(
               &_DeprecatedProxyConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeprecatedProxyConfig& a, DeprecatedProxyConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DeprecatedProxyConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeprecatedProxyConfig* New() const final {
    return CreateMaybeMessage<DeprecatedProxyConfig>(nullptr);
  }

  DeprecatedProxyConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeprecatedProxyConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeprecatedProxyConfig& from);
  void MergeFrom(const DeprecatedProxyConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeprecatedProxyConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "data_reduction_proxy.DeprecatedProxyConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHttpProxyServersFieldNumber = 1,
  };
  // repeated .data_reduction_proxy.DeprecatedProxyServer http_proxy_servers = 1 [deprecated = true];
  PROTOBUF_DEPRECATED int http_proxy_servers_size() const;
  PROTOBUF_DEPRECATED void clear_http_proxy_servers();
  PROTOBUF_DEPRECATED ::data_reduction_proxy::DeprecatedProxyServer* mutable_http_proxy_servers(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_reduction_proxy::DeprecatedProxyServer >*
      mutable_http_proxy_servers();
  PROTOBUF_DEPRECATED const ::data_reduction_proxy::DeprecatedProxyServer& http_proxy_servers(int index) const;
  PROTOBUF_DEPRECATED ::data_reduction_proxy::DeprecatedProxyServer* add_http_proxy_servers();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_reduction_proxy::DeprecatedProxyServer >&
      http_proxy_servers() const;

  // @@protoc_insertion_point(class_scope:data_reduction_proxy.DeprecatedProxyConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_reduction_proxy::DeprecatedProxyServer > http_proxy_servers_;
  friend struct ::TableStruct_client_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class DeprecatedProxyServer :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:data_reduction_proxy.DeprecatedProxyServer) */ {
 public:
  DeprecatedProxyServer();
  virtual ~DeprecatedProxyServer();

  DeprecatedProxyServer(const DeprecatedProxyServer& from);
  DeprecatedProxyServer(DeprecatedProxyServer&& from) noexcept
    : DeprecatedProxyServer() {
    *this = ::std::move(from);
  }

  inline DeprecatedProxyServer& operator=(const DeprecatedProxyServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeprecatedProxyServer& operator=(DeprecatedProxyServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DeprecatedProxyServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeprecatedProxyServer* internal_default_instance() {
    return reinterpret_cast<const DeprecatedProxyServer*>(
               &_DeprecatedProxyServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeprecatedProxyServer& a, DeprecatedProxyServer& b) {
    a.Swap(&b);
  }
  inline void Swap(DeprecatedProxyServer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeprecatedProxyServer* New() const final {
    return CreateMaybeMessage<DeprecatedProxyServer>(nullptr);
  }

  DeprecatedProxyServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeprecatedProxyServer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DeprecatedProxyServer& from);
  void MergeFrom(const DeprecatedProxyServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeprecatedProxyServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "data_reduction_proxy.DeprecatedProxyServer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DeprecatedProxyServer_ProxyScheme ProxyScheme;
  static constexpr ProxyScheme UNSPECIFIED =
    DeprecatedProxyServer_ProxyScheme_UNSPECIFIED;
  PROTOBUF_DEPRECATED static constexpr ProxyScheme DEPRECATED_HTTP =
    DeprecatedProxyServer_ProxyScheme_DEPRECATED_HTTP;
  static constexpr ProxyScheme HTTPS =
    DeprecatedProxyServer_ProxyScheme_HTTPS;
  PROTOBUF_DEPRECATED static constexpr ProxyScheme DEPRECATED_QUIC =
    DeprecatedProxyServer_ProxyScheme_DEPRECATED_QUIC;
  static inline bool ProxyScheme_IsValid(int value) {
    return DeprecatedProxyServer_ProxyScheme_IsValid(value);
  }
  static constexpr ProxyScheme ProxyScheme_MIN =
    DeprecatedProxyServer_ProxyScheme_ProxyScheme_MIN;
  static constexpr ProxyScheme ProxyScheme_MAX =
    DeprecatedProxyServer_ProxyScheme_ProxyScheme_MAX;
  static constexpr int ProxyScheme_ARRAYSIZE =
    DeprecatedProxyServer_ProxyScheme_ProxyScheme_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ProxyScheme_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ProxyScheme>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ProxyScheme_Name.");
    return DeprecatedProxyServer_ProxyScheme_Name(enum_t_value);
  }
  static inline bool ProxyScheme_Parse(const std::string& name,
      ProxyScheme* value) {
    return DeprecatedProxyServer_ProxyScheme_Parse(name, value);
  }

  typedef DeprecatedProxyServer_DeprecatedProxyType DeprecatedProxyType;
  static constexpr DeprecatedProxyType UNSPECIFIED_TYPE =
    DeprecatedProxyServer_DeprecatedProxyType_UNSPECIFIED_TYPE;
  static constexpr DeprecatedProxyType CORE =
    DeprecatedProxyServer_DeprecatedProxyType_CORE;
  static inline bool DeprecatedProxyType_IsValid(int value) {
    return DeprecatedProxyServer_DeprecatedProxyType_IsValid(value);
  }
  static constexpr DeprecatedProxyType DeprecatedProxyType_MIN =
    DeprecatedProxyServer_DeprecatedProxyType_DeprecatedProxyType_MIN;
  static constexpr DeprecatedProxyType DeprecatedProxyType_MAX =
    DeprecatedProxyServer_DeprecatedProxyType_DeprecatedProxyType_MAX;
  static constexpr int DeprecatedProxyType_ARRAYSIZE =
    DeprecatedProxyServer_DeprecatedProxyType_DeprecatedProxyType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& DeprecatedProxyType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DeprecatedProxyType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DeprecatedProxyType_Name.");
    return DeprecatedProxyServer_DeprecatedProxyType_Name(enum_t_value);
  }
  static inline bool DeprecatedProxyType_Parse(const std::string& name,
      DeprecatedProxyType* value) {
    return DeprecatedProxyServer_DeprecatedProxyType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 2,
    kSchemeFieldNumber = 1,
    kPortFieldNumber = 3,
    kDeprecatedTypeFieldNumber = 4,
  };
  // optional string host = 2;
  bool has_host() const;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);

  // optional .data_reduction_proxy.DeprecatedProxyServer.ProxyScheme scheme = 1;
  bool has_scheme() const;
  void clear_scheme();
  ::data_reduction_proxy::DeprecatedProxyServer_ProxyScheme scheme() const;
  void set_scheme(::data_reduction_proxy::DeprecatedProxyServer_ProxyScheme value);

  // optional int32 port = 3;
  bool has_port() const;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .data_reduction_proxy.DeprecatedProxyServer.DeprecatedProxyType deprecated_type = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_deprecated_type() const;
  PROTOBUF_DEPRECATED void clear_deprecated_type();
  PROTOBUF_DEPRECATED ::data_reduction_proxy::DeprecatedProxyServer_DeprecatedProxyType deprecated_type() const;
  PROTOBUF_DEPRECATED void set_deprecated_type(::data_reduction_proxy::DeprecatedProxyServer_DeprecatedProxyType value);

  // @@protoc_insertion_point(class_scope:data_reduction_proxy.DeprecatedProxyServer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  int scheme_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  int deprecated_type_;
  friend struct ::TableStruct_client_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ConfigDeviceInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:data_reduction_proxy.ConfigDeviceInfo) */ {
 public:
  ConfigDeviceInfo();
  virtual ~ConfigDeviceInfo();

  ConfigDeviceInfo(const ConfigDeviceInfo& from);
  ConfigDeviceInfo(ConfigDeviceInfo&& from) noexcept
    : ConfigDeviceInfo() {
    *this = ::std::move(from);
  }

  inline ConfigDeviceInfo& operator=(const ConfigDeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigDeviceInfo& operator=(ConfigDeviceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ConfigDeviceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigDeviceInfo* internal_default_instance() {
    return reinterpret_cast<const ConfigDeviceInfo*>(
               &_ConfigDeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ConfigDeviceInfo& a, ConfigDeviceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigDeviceInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigDeviceInfo* New() const final {
    return CreateMaybeMessage<ConfigDeviceInfo>(nullptr);
  }

  ConfigDeviceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigDeviceInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ConfigDeviceInfo& from);
  void MergeFrom(const ConfigDeviceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConfigDeviceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "data_reduction_proxy.ConfigDeviceInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalDeviceMemoryKbFieldNumber = 1,
  };
  // optional int64 total_device_memory_kb = 1;
  bool has_total_device_memory_kb() const;
  void clear_total_device_memory_kb();
  ::PROTOBUF_NAMESPACE_ID::int64 total_device_memory_kb() const;
  void set_total_device_memory_kb(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:data_reduction_proxy.ConfigDeviceInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_device_memory_kb_;
  friend struct ::TableStruct_client_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PrefetchProxyConfig_Proxy :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:data_reduction_proxy.PrefetchProxyConfig.Proxy) */ {
 public:
  PrefetchProxyConfig_Proxy();
  virtual ~PrefetchProxyConfig_Proxy();

  PrefetchProxyConfig_Proxy(const PrefetchProxyConfig_Proxy& from);
  PrefetchProxyConfig_Proxy(PrefetchProxyConfig_Proxy&& from) noexcept
    : PrefetchProxyConfig_Proxy() {
    *this = ::std::move(from);
  }

  inline PrefetchProxyConfig_Proxy& operator=(const PrefetchProxyConfig_Proxy& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrefetchProxyConfig_Proxy& operator=(PrefetchProxyConfig_Proxy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PrefetchProxyConfig_Proxy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrefetchProxyConfig_Proxy* internal_default_instance() {
    return reinterpret_cast<const PrefetchProxyConfig_Proxy*>(
               &_PrefetchProxyConfig_Proxy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PrefetchProxyConfig_Proxy& a, PrefetchProxyConfig_Proxy& b) {
    a.Swap(&b);
  }
  inline void Swap(PrefetchProxyConfig_Proxy* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrefetchProxyConfig_Proxy* New() const final {
    return CreateMaybeMessage<PrefetchProxyConfig_Proxy>(nullptr);
  }

  PrefetchProxyConfig_Proxy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrefetchProxyConfig_Proxy>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PrefetchProxyConfig_Proxy& from);
  void MergeFrom(const PrefetchProxyConfig_Proxy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrefetchProxyConfig_Proxy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "data_reduction_proxy.PrefetchProxyConfig.Proxy";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PrefetchProxyConfig_Proxy_Type Type;
  static constexpr Type UNSPECIFIED_TYPE =
    PrefetchProxyConfig_Proxy_Type_UNSPECIFIED_TYPE;
  static constexpr Type CONNECT =
    PrefetchProxyConfig_Proxy_Type_CONNECT;
  static inline bool Type_IsValid(int value) {
    return PrefetchProxyConfig_Proxy_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    PrefetchProxyConfig_Proxy_Type_Type_MIN;
  static constexpr Type Type_MAX =
    PrefetchProxyConfig_Proxy_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    PrefetchProxyConfig_Proxy_Type_Type_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return PrefetchProxyConfig_Proxy_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return PrefetchProxyConfig_Proxy_Type_Parse(name, value);
  }

  typedef PrefetchProxyConfig_Proxy_Scheme Scheme;
  static constexpr Scheme UNSPECIFIED_SCHEME =
    PrefetchProxyConfig_Proxy_Scheme_UNSPECIFIED_SCHEME;
  static constexpr Scheme HTTP =
    PrefetchProxyConfig_Proxy_Scheme_HTTP;
  static constexpr Scheme HTTPS =
    PrefetchProxyConfig_Proxy_Scheme_HTTPS;
  static inline bool Scheme_IsValid(int value) {
    return PrefetchProxyConfig_Proxy_Scheme_IsValid(value);
  }
  static constexpr Scheme Scheme_MIN =
    PrefetchProxyConfig_Proxy_Scheme_Scheme_MIN;
  static constexpr Scheme Scheme_MAX =
    PrefetchProxyConfig_Proxy_Scheme_Scheme_MAX;
  static constexpr int Scheme_ARRAYSIZE =
    PrefetchProxyConfig_Proxy_Scheme_Scheme_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Scheme_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Scheme>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Scheme_Name.");
    return PrefetchProxyConfig_Proxy_Scheme_Name(enum_t_value);
  }
  static inline bool Scheme_Parse(const std::string& name,
      Scheme* value) {
    return PrefetchProxyConfig_Proxy_Scheme_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 2,
    kTypeFieldNumber = 1,
    kPortFieldNumber = 3,
    kSchemeFieldNumber = 4,
  };
  // optional string host = 2;
  bool has_host() const;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);

  // optional .data_reduction_proxy.PrefetchProxyConfig.Proxy.Type type = 1;
  bool has_type() const;
  void clear_type();
  ::data_reduction_proxy::PrefetchProxyConfig_Proxy_Type type() const;
  void set_type(::data_reduction_proxy::PrefetchProxyConfig_Proxy_Type value);

  // optional int32 port = 3;
  bool has_port() const;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional .data_reduction_proxy.PrefetchProxyConfig.Proxy.Scheme scheme = 4;
  bool has_scheme() const;
  void clear_scheme();
  ::data_reduction_proxy::PrefetchProxyConfig_Proxy_Scheme scheme() const;
  void set_scheme(::data_reduction_proxy::PrefetchProxyConfig_Proxy_Scheme value);

  // @@protoc_insertion_point(class_scope:data_reduction_proxy.PrefetchProxyConfig.Proxy)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  int scheme_;
  friend struct ::TableStruct_client_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PrefetchProxyConfig :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:data_reduction_proxy.PrefetchProxyConfig) */ {
 public:
  PrefetchProxyConfig();
  virtual ~PrefetchProxyConfig();

  PrefetchProxyConfig(const PrefetchProxyConfig& from);
  PrefetchProxyConfig(PrefetchProxyConfig&& from) noexcept
    : PrefetchProxyConfig() {
    *this = ::std::move(from);
  }

  inline PrefetchProxyConfig& operator=(const PrefetchProxyConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrefetchProxyConfig& operator=(PrefetchProxyConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const PrefetchProxyConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrefetchProxyConfig* internal_default_instance() {
    return reinterpret_cast<const PrefetchProxyConfig*>(
               &_PrefetchProxyConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PrefetchProxyConfig& a, PrefetchProxyConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PrefetchProxyConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrefetchProxyConfig* New() const final {
    return CreateMaybeMessage<PrefetchProxyConfig>(nullptr);
  }

  PrefetchProxyConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrefetchProxyConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PrefetchProxyConfig& from);
  void MergeFrom(const PrefetchProxyConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PrefetchProxyConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "data_reduction_proxy.PrefetchProxyConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PrefetchProxyConfig_Proxy Proxy;

  // accessors -------------------------------------------------------

  enum : int {
    kProxyListFieldNumber = 1,
  };
  // repeated .data_reduction_proxy.PrefetchProxyConfig.Proxy proxy_list = 1;
  int proxy_list_size() const;
  void clear_proxy_list();
  ::data_reduction_proxy::PrefetchProxyConfig_Proxy* mutable_proxy_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_reduction_proxy::PrefetchProxyConfig_Proxy >*
      mutable_proxy_list();
  const ::data_reduction_proxy::PrefetchProxyConfig_Proxy& proxy_list(int index) const;
  ::data_reduction_proxy::PrefetchProxyConfig_Proxy* add_proxy_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_reduction_proxy::PrefetchProxyConfig_Proxy >&
      proxy_list() const;

  // @@protoc_insertion_point(class_scope:data_reduction_proxy.PrefetchProxyConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_reduction_proxy::PrefetchProxyConfig_Proxy > proxy_list_;
  friend struct ::TableStruct_client_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class CreateClientConfigRequest :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:data_reduction_proxy.CreateClientConfigRequest) */ {
 public:
  CreateClientConfigRequest();
  virtual ~CreateClientConfigRequest();

  CreateClientConfigRequest(const CreateClientConfigRequest& from);
  CreateClientConfigRequest(CreateClientConfigRequest&& from) noexcept
    : CreateClientConfigRequest() {
    *this = ::std::move(from);
  }

  inline CreateClientConfigRequest& operator=(const CreateClientConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateClientConfigRequest& operator=(CreateClientConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CreateClientConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateClientConfigRequest* internal_default_instance() {
    return reinterpret_cast<const CreateClientConfigRequest*>(
               &_CreateClientConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CreateClientConfigRequest& a, CreateClientConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateClientConfigRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateClientConfigRequest* New() const final {
    return CreateMaybeMessage<CreateClientConfigRequest>(nullptr);
  }

  CreateClientConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateClientConfigRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CreateClientConfigRequest& from);
  void MergeFrom(const CreateClientConfigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateClientConfigRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "data_reduction_proxy.CreateClientConfigRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef CreateClientConfigRequest_DogfoodGroup DogfoodGroup;
  static constexpr DogfoodGroup UNSPECIFIED =
    CreateClientConfigRequest_DogfoodGroup_UNSPECIFIED;
  static constexpr DogfoodGroup NONDOGFOOD =
    CreateClientConfigRequest_DogfoodGroup_NONDOGFOOD;
  static constexpr DogfoodGroup DOGFOOD =
    CreateClientConfigRequest_DogfoodGroup_DOGFOOD;
  static inline bool DogfoodGroup_IsValid(int value) {
    return CreateClientConfigRequest_DogfoodGroup_IsValid(value);
  }
  static constexpr DogfoodGroup DogfoodGroup_MIN =
    CreateClientConfigRequest_DogfoodGroup_DogfoodGroup_MIN;
  static constexpr DogfoodGroup DogfoodGroup_MAX =
    CreateClientConfigRequest_DogfoodGroup_DogfoodGroup_MAX;
  static constexpr int DogfoodGroup_ARRAYSIZE =
    CreateClientConfigRequest_DogfoodGroup_DogfoodGroup_ARRAYSIZE;
  template<typename T>
  static inline const std::string& DogfoodGroup_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DogfoodGroup>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DogfoodGroup_Name.");
    return CreateClientConfigRequest_DogfoodGroup_Name(enum_t_value);
  }
  static inline bool DogfoodGroup_Parse(const std::string& name,
      DogfoodGroup* value) {
    return CreateClientConfigRequest_DogfoodGroup_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSessionKeyFieldNumber = 1,
    kTelephonyNetworkOperatorFieldNumber = 3,
    kVersionInfoFieldNumber = 2,
    kDeviceInfoFieldNumber = 5,
    kDogfoodGroupFieldNumber = 4,
  };
  // optional string session_key = 1;
  bool has_session_key() const;
  void clear_session_key();
  const std::string& session_key() const;
  void set_session_key(const std::string& value);
  void set_session_key(std::string&& value);
  void set_session_key(const char* value);
  void set_session_key(const char* value, size_t size);
  std::string* mutable_session_key();
  std::string* release_session_key();
  void set_allocated_session_key(std::string* session_key);

  // optional string telephony_network_operator = 3;
  bool has_telephony_network_operator() const;
  void clear_telephony_network_operator();
  const std::string& telephony_network_operator() const;
  void set_telephony_network_operator(const std::string& value);
  void set_telephony_network_operator(std::string&& value);
  void set_telephony_network_operator(const char* value);
  void set_telephony_network_operator(const char* value, size_t size);
  std::string* mutable_telephony_network_operator();
  std::string* release_telephony_network_operator();
  void set_allocated_telephony_network_operator(std::string* telephony_network_operator);

  // optional .data_reduction_proxy.VersionInfo version_info = 2;
  bool has_version_info() const;
  void clear_version_info();
  const ::data_reduction_proxy::VersionInfo& version_info() const;
  ::data_reduction_proxy::VersionInfo* release_version_info();
  ::data_reduction_proxy::VersionInfo* mutable_version_info();
  void set_allocated_version_info(::data_reduction_proxy::VersionInfo* version_info);

  // optional .data_reduction_proxy.ConfigDeviceInfo device_info = 5;
  bool has_device_info() const;
  void clear_device_info();
  const ::data_reduction_proxy::ConfigDeviceInfo& device_info() const;
  ::data_reduction_proxy::ConfigDeviceInfo* release_device_info();
  ::data_reduction_proxy::ConfigDeviceInfo* mutable_device_info();
  void set_allocated_device_info(::data_reduction_proxy::ConfigDeviceInfo* device_info);

  // optional .data_reduction_proxy.CreateClientConfigRequest.DogfoodGroup dogfood_group = 4;
  bool has_dogfood_group() const;
  void clear_dogfood_group();
  ::data_reduction_proxy::CreateClientConfigRequest_DogfoodGroup dogfood_group() const;
  void set_dogfood_group(::data_reduction_proxy::CreateClientConfigRequest_DogfoodGroup value);

  // @@protoc_insertion_point(class_scope:data_reduction_proxy.CreateClientConfigRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr telephony_network_operator_;
  ::data_reduction_proxy::VersionInfo* version_info_;
  ::data_reduction_proxy::ConfigDeviceInfo* device_info_;
  int dogfood_group_;
  friend struct ::TableStruct_client_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class VersionInfo :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:data_reduction_proxy.VersionInfo) */ {
 public:
  VersionInfo();
  virtual ~VersionInfo();

  VersionInfo(const VersionInfo& from);
  VersionInfo(VersionInfo&& from) noexcept
    : VersionInfo() {
    *this = ::std::move(from);
  }

  inline VersionInfo& operator=(const VersionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionInfo& operator=(VersionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const VersionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VersionInfo* internal_default_instance() {
    return reinterpret_cast<const VersionInfo*>(
               &_VersionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(VersionInfo& a, VersionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VersionInfo* New() const final {
    return CreateMaybeMessage<VersionInfo>(nullptr);
  }

  VersionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VersionInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const VersionInfo& from);
  void MergeFrom(const VersionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VersionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "data_reduction_proxy.VersionInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientFieldNumber = 1,
    kChannelFieldNumber = 4,
    kBuildFieldNumber = 2,
    kPatchFieldNumber = 3,
  };
  // optional string client = 1;
  bool has_client() const;
  void clear_client();
  const std::string& client() const;
  void set_client(const std::string& value);
  void set_client(std::string&& value);
  void set_client(const char* value);
  void set_client(const char* value, size_t size);
  std::string* mutable_client();
  std::string* release_client();
  void set_allocated_client(std::string* client);

  // optional string channel = 4;
  bool has_channel() const;
  void clear_channel();
  const std::string& channel() const;
  void set_channel(const std::string& value);
  void set_channel(std::string&& value);
  void set_channel(const char* value);
  void set_channel(const char* value, size_t size);
  std::string* mutable_channel();
  std::string* release_channel();
  void set_allocated_channel(std::string* channel);

  // optional int32 build = 2;
  bool has_build() const;
  void clear_build();
  ::PROTOBUF_NAMESPACE_ID::int32 build() const;
  void set_build(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 patch = 3;
  bool has_patch() const;
  void clear_patch();
  ::PROTOBUF_NAMESPACE_ID::int32 patch() const;
  void set_patch(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:data_reduction_proxy.VersionInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_;
  ::PROTOBUF_NAMESPACE_ID::int32 build_;
  ::PROTOBUF_NAMESPACE_ID::int32 patch_;
  friend struct ::TableStruct_client_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientConfig

// optional string session_key = 1;
inline bool ClientConfig::has_session_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientConfig::clear_session_key() {
  session_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientConfig::session_key() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.ClientConfig.session_key)
  return session_key_.GetNoArena();
}
inline void ClientConfig::set_session_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_reduction_proxy.ClientConfig.session_key)
}
inline void ClientConfig::set_session_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  session_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:data_reduction_proxy.ClientConfig.session_key)
}
inline void ClientConfig::set_session_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_reduction_proxy.ClientConfig.session_key)
}
inline void ClientConfig::set_session_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_reduction_proxy.ClientConfig.session_key)
}
inline std::string* ClientConfig::mutable_session_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.ClientConfig.session_key)
  return session_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClientConfig::release_session_key() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.ClientConfig.session_key)
  if (!has_session_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return session_key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClientConfig::set_allocated_session_key(std::string* session_key) {
  if (session_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_key);
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.ClientConfig.session_key)
}

// optional .data_reduction_proxy.Timestamp DEPRECATED_refresh_time = 2 [deprecated = true];
inline bool ClientConfig::has_deprecated_refresh_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientConfig::clear_deprecated_refresh_time() {
  if (deprecated_refresh_time_ != nullptr) deprecated_refresh_time_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::data_reduction_proxy::Timestamp& ClientConfig::deprecated_refresh_time() const {
  const ::data_reduction_proxy::Timestamp* p = deprecated_refresh_time_;
  // @@protoc_insertion_point(field_get:data_reduction_proxy.ClientConfig.DEPRECATED_refresh_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::data_reduction_proxy::Timestamp*>(
      &::data_reduction_proxy::_Timestamp_default_instance_);
}
inline ::data_reduction_proxy::Timestamp* ClientConfig::release_deprecated_refresh_time() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.ClientConfig.DEPRECATED_refresh_time)
  _has_bits_[0] &= ~0x00000002u;
  ::data_reduction_proxy::Timestamp* temp = deprecated_refresh_time_;
  deprecated_refresh_time_ = nullptr;
  return temp;
}
inline ::data_reduction_proxy::Timestamp* ClientConfig::mutable_deprecated_refresh_time() {
  _has_bits_[0] |= 0x00000002u;
  if (deprecated_refresh_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::data_reduction_proxy::Timestamp>(GetArenaNoVirtual());
    deprecated_refresh_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.ClientConfig.DEPRECATED_refresh_time)
  return deprecated_refresh_time_;
}
inline void ClientConfig::set_allocated_deprecated_refresh_time(::data_reduction_proxy::Timestamp* deprecated_refresh_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete deprecated_refresh_time_;
  }
  if (deprecated_refresh_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      deprecated_refresh_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_refresh_time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  deprecated_refresh_time_ = deprecated_refresh_time;
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.ClientConfig.DEPRECATED_refresh_time)
}

// optional .data_reduction_proxy.DeprecatedProxyConfig proxy_config = 3 [deprecated = true];
inline bool ClientConfig::has_proxy_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientConfig::clear_proxy_config() {
  if (proxy_config_ != nullptr) proxy_config_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::data_reduction_proxy::DeprecatedProxyConfig& ClientConfig::proxy_config() const {
  const ::data_reduction_proxy::DeprecatedProxyConfig* p = proxy_config_;
  // @@protoc_insertion_point(field_get:data_reduction_proxy.ClientConfig.proxy_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::data_reduction_proxy::DeprecatedProxyConfig*>(
      &::data_reduction_proxy::_DeprecatedProxyConfig_default_instance_);
}
inline ::data_reduction_proxy::DeprecatedProxyConfig* ClientConfig::release_proxy_config() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.ClientConfig.proxy_config)
  _has_bits_[0] &= ~0x00000004u;
  ::data_reduction_proxy::DeprecatedProxyConfig* temp = proxy_config_;
  proxy_config_ = nullptr;
  return temp;
}
inline ::data_reduction_proxy::DeprecatedProxyConfig* ClientConfig::mutable_proxy_config() {
  _has_bits_[0] |= 0x00000004u;
  if (proxy_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::data_reduction_proxy::DeprecatedProxyConfig>(GetArenaNoVirtual());
    proxy_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.ClientConfig.proxy_config)
  return proxy_config_;
}
inline void ClientConfig::set_allocated_proxy_config(::data_reduction_proxy::DeprecatedProxyConfig* proxy_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete proxy_config_;
  }
  if (proxy_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      proxy_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proxy_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  proxy_config_ = proxy_config;
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.ClientConfig.proxy_config)
}

// optional .data_reduction_proxy.Duration refresh_duration = 4;
inline bool ClientConfig::has_refresh_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientConfig::clear_refresh_duration() {
  if (refresh_duration_ != nullptr) refresh_duration_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::data_reduction_proxy::Duration& ClientConfig::refresh_duration() const {
  const ::data_reduction_proxy::Duration* p = refresh_duration_;
  // @@protoc_insertion_point(field_get:data_reduction_proxy.ClientConfig.refresh_duration)
  return p != nullptr ? *p : *reinterpret_cast<const ::data_reduction_proxy::Duration*>(
      &::data_reduction_proxy::_Duration_default_instance_);
}
inline ::data_reduction_proxy::Duration* ClientConfig::release_refresh_duration() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.ClientConfig.refresh_duration)
  _has_bits_[0] &= ~0x00000008u;
  ::data_reduction_proxy::Duration* temp = refresh_duration_;
  refresh_duration_ = nullptr;
  return temp;
}
inline ::data_reduction_proxy::Duration* ClientConfig::mutable_refresh_duration() {
  _has_bits_[0] |= 0x00000008u;
  if (refresh_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::data_reduction_proxy::Duration>(GetArenaNoVirtual());
    refresh_duration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.ClientConfig.refresh_duration)
  return refresh_duration_;
}
inline void ClientConfig::set_allocated_refresh_duration(::data_reduction_proxy::Duration* refresh_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete refresh_duration_;
  }
  if (refresh_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      refresh_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, refresh_duration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  refresh_duration_ = refresh_duration;
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.ClientConfig.refresh_duration)
}

// optional .data_reduction_proxy.DeprecatedPageloadMetricsConfig pageload_metrics_config = 5 [deprecated = true];
inline bool ClientConfig::has_pageload_metrics_config() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClientConfig::clear_pageload_metrics_config() {
  if (pageload_metrics_config_ != nullptr) pageload_metrics_config_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::data_reduction_proxy::DeprecatedPageloadMetricsConfig& ClientConfig::pageload_metrics_config() const {
  const ::data_reduction_proxy::DeprecatedPageloadMetricsConfig* p = pageload_metrics_config_;
  // @@protoc_insertion_point(field_get:data_reduction_proxy.ClientConfig.pageload_metrics_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::data_reduction_proxy::DeprecatedPageloadMetricsConfig*>(
      &::data_reduction_proxy::_DeprecatedPageloadMetricsConfig_default_instance_);
}
inline ::data_reduction_proxy::DeprecatedPageloadMetricsConfig* ClientConfig::release_pageload_metrics_config() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.ClientConfig.pageload_metrics_config)
  _has_bits_[0] &= ~0x00000010u;
  ::data_reduction_proxy::DeprecatedPageloadMetricsConfig* temp = pageload_metrics_config_;
  pageload_metrics_config_ = nullptr;
  return temp;
}
inline ::data_reduction_proxy::DeprecatedPageloadMetricsConfig* ClientConfig::mutable_pageload_metrics_config() {
  _has_bits_[0] |= 0x00000010u;
  if (pageload_metrics_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::data_reduction_proxy::DeprecatedPageloadMetricsConfig>(GetArenaNoVirtual());
    pageload_metrics_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.ClientConfig.pageload_metrics_config)
  return pageload_metrics_config_;
}
inline void ClientConfig::set_allocated_pageload_metrics_config(::data_reduction_proxy::DeprecatedPageloadMetricsConfig* pageload_metrics_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pageload_metrics_config_;
  }
  if (pageload_metrics_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pageload_metrics_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pageload_metrics_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  pageload_metrics_config_ = pageload_metrics_config;
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.ClientConfig.pageload_metrics_config)
}

// optional bool ignore_long_term_block_list_rules = 7 [deprecated = true];
inline bool ClientConfig::has_ignore_long_term_block_list_rules() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ClientConfig::clear_ignore_long_term_block_list_rules() {
  ignore_long_term_block_list_rules_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ClientConfig::ignore_long_term_block_list_rules() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.ClientConfig.ignore_long_term_block_list_rules)
  return ignore_long_term_block_list_rules_;
}
inline void ClientConfig::set_ignore_long_term_block_list_rules(bool value) {
  _has_bits_[0] |= 0x00000040u;
  ignore_long_term_block_list_rules_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.ClientConfig.ignore_long_term_block_list_rules)
}

// optional .data_reduction_proxy.PrefetchProxyConfig prefetch_proxy_config = 8;
inline bool ClientConfig::has_prefetch_proxy_config() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClientConfig::clear_prefetch_proxy_config() {
  if (prefetch_proxy_config_ != nullptr) prefetch_proxy_config_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::data_reduction_proxy::PrefetchProxyConfig& ClientConfig::prefetch_proxy_config() const {
  const ::data_reduction_proxy::PrefetchProxyConfig* p = prefetch_proxy_config_;
  // @@protoc_insertion_point(field_get:data_reduction_proxy.ClientConfig.prefetch_proxy_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::data_reduction_proxy::PrefetchProxyConfig*>(
      &::data_reduction_proxy::_PrefetchProxyConfig_default_instance_);
}
inline ::data_reduction_proxy::PrefetchProxyConfig* ClientConfig::release_prefetch_proxy_config() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.ClientConfig.prefetch_proxy_config)
  _has_bits_[0] &= ~0x00000020u;
  ::data_reduction_proxy::PrefetchProxyConfig* temp = prefetch_proxy_config_;
  prefetch_proxy_config_ = nullptr;
  return temp;
}
inline ::data_reduction_proxy::PrefetchProxyConfig* ClientConfig::mutable_prefetch_proxy_config() {
  _has_bits_[0] |= 0x00000020u;
  if (prefetch_proxy_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::data_reduction_proxy::PrefetchProxyConfig>(GetArenaNoVirtual());
    prefetch_proxy_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.ClientConfig.prefetch_proxy_config)
  return prefetch_proxy_config_;
}
inline void ClientConfig::set_allocated_prefetch_proxy_config(::data_reduction_proxy::PrefetchProxyConfig* prefetch_proxy_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete prefetch_proxy_config_;
  }
  if (prefetch_proxy_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      prefetch_proxy_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prefetch_proxy_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  prefetch_proxy_config_ = prefetch_proxy_config;
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.ClientConfig.prefetch_proxy_config)
}

// -------------------------------------------------------------------

// DeprecatedPageloadMetricsConfig

// optional float reporting_fraction = 1 [deprecated = true];
inline bool DeprecatedPageloadMetricsConfig::has_reporting_fraction() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeprecatedPageloadMetricsConfig::clear_reporting_fraction() {
  reporting_fraction_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float DeprecatedPageloadMetricsConfig::reporting_fraction() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.DeprecatedPageloadMetricsConfig.reporting_fraction)
  return reporting_fraction_;
}
inline void DeprecatedPageloadMetricsConfig::set_reporting_fraction(float value) {
  _has_bits_[0] |= 0x00000001u;
  reporting_fraction_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.DeprecatedPageloadMetricsConfig.reporting_fraction)
}

// -------------------------------------------------------------------

// Timestamp

// optional int64 seconds = 1;
inline bool Timestamp::has_seconds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Timestamp::clear_seconds() {
  seconds_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Timestamp::seconds() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.Timestamp.seconds)
  return seconds_;
}
inline void Timestamp::set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  seconds_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.Timestamp.seconds)
}

// optional int32 nanos = 2;
inline bool Timestamp::has_nanos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Timestamp::clear_nanos() {
  nanos_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Timestamp::nanos() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.Timestamp.nanos)
  return nanos_;
}
inline void Timestamp::set_nanos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  nanos_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.Timestamp.nanos)
}

// -------------------------------------------------------------------

// Duration

// optional int64 seconds = 1;
inline bool Duration::has_seconds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Duration::clear_seconds() {
  seconds_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Duration::seconds() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.Duration.seconds)
  return seconds_;
}
inline void Duration::set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  seconds_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.Duration.seconds)
}

// optional int32 nanos = 2;
inline bool Duration::has_nanos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Duration::clear_nanos() {
  nanos_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Duration::nanos() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.Duration.nanos)
  return nanos_;
}
inline void Duration::set_nanos(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  nanos_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.Duration.nanos)
}

// -------------------------------------------------------------------

// DeprecatedProxyConfig

// repeated .data_reduction_proxy.DeprecatedProxyServer http_proxy_servers = 1 [deprecated = true];
inline int DeprecatedProxyConfig::http_proxy_servers_size() const {
  return http_proxy_servers_.size();
}
inline void DeprecatedProxyConfig::clear_http_proxy_servers() {
  http_proxy_servers_.Clear();
}
inline ::data_reduction_proxy::DeprecatedProxyServer* DeprecatedProxyConfig::mutable_http_proxy_servers(int index) {
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.DeprecatedProxyConfig.http_proxy_servers)
  return http_proxy_servers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_reduction_proxy::DeprecatedProxyServer >*
DeprecatedProxyConfig::mutable_http_proxy_servers() {
  // @@protoc_insertion_point(field_mutable_list:data_reduction_proxy.DeprecatedProxyConfig.http_proxy_servers)
  return &http_proxy_servers_;
}
inline const ::data_reduction_proxy::DeprecatedProxyServer& DeprecatedProxyConfig::http_proxy_servers(int index) const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.DeprecatedProxyConfig.http_proxy_servers)
  return http_proxy_servers_.Get(index);
}
inline ::data_reduction_proxy::DeprecatedProxyServer* DeprecatedProxyConfig::add_http_proxy_servers() {
  // @@protoc_insertion_point(field_add:data_reduction_proxy.DeprecatedProxyConfig.http_proxy_servers)
  return http_proxy_servers_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_reduction_proxy::DeprecatedProxyServer >&
DeprecatedProxyConfig::http_proxy_servers() const {
  // @@protoc_insertion_point(field_list:data_reduction_proxy.DeprecatedProxyConfig.http_proxy_servers)
  return http_proxy_servers_;
}

// -------------------------------------------------------------------

// DeprecatedProxyServer

// optional .data_reduction_proxy.DeprecatedProxyServer.ProxyScheme scheme = 1;
inline bool DeprecatedProxyServer::has_scheme() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeprecatedProxyServer::clear_scheme() {
  scheme_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::data_reduction_proxy::DeprecatedProxyServer_ProxyScheme DeprecatedProxyServer::scheme() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.DeprecatedProxyServer.scheme)
  return static_cast< ::data_reduction_proxy::DeprecatedProxyServer_ProxyScheme >(scheme_);
}
inline void DeprecatedProxyServer::set_scheme(::data_reduction_proxy::DeprecatedProxyServer_ProxyScheme value) {
  assert(::data_reduction_proxy::DeprecatedProxyServer_ProxyScheme_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  scheme_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.DeprecatedProxyServer.scheme)
}

// optional string host = 2;
inline bool DeprecatedProxyServer::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeprecatedProxyServer::clear_host() {
  host_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeprecatedProxyServer::host() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.DeprecatedProxyServer.host)
  return host_.GetNoArena();
}
inline void DeprecatedProxyServer::set_host(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_reduction_proxy.DeprecatedProxyServer.host)
}
inline void DeprecatedProxyServer::set_host(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  host_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:data_reduction_proxy.DeprecatedProxyServer.host)
}
inline void DeprecatedProxyServer::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_reduction_proxy.DeprecatedProxyServer.host)
}
inline void DeprecatedProxyServer::set_host(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_reduction_proxy.DeprecatedProxyServer.host)
}
inline std::string* DeprecatedProxyServer::mutable_host() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.DeprecatedProxyServer.host)
  return host_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeprecatedProxyServer::release_host() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.DeprecatedProxyServer.host)
  if (!has_host()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return host_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeprecatedProxyServer::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  host_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.DeprecatedProxyServer.host)
}

// optional int32 port = 3;
inline bool DeprecatedProxyServer::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeprecatedProxyServer::clear_port() {
  port_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeprecatedProxyServer::port() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.DeprecatedProxyServer.port)
  return port_;
}
inline void DeprecatedProxyServer::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  port_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.DeprecatedProxyServer.port)
}

// optional .data_reduction_proxy.DeprecatedProxyServer.DeprecatedProxyType deprecated_type = 4 [deprecated = true];
inline bool DeprecatedProxyServer::has_deprecated_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeprecatedProxyServer::clear_deprecated_type() {
  deprecated_type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::data_reduction_proxy::DeprecatedProxyServer_DeprecatedProxyType DeprecatedProxyServer::deprecated_type() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.DeprecatedProxyServer.deprecated_type)
  return static_cast< ::data_reduction_proxy::DeprecatedProxyServer_DeprecatedProxyType >(deprecated_type_);
}
inline void DeprecatedProxyServer::set_deprecated_type(::data_reduction_proxy::DeprecatedProxyServer_DeprecatedProxyType value) {
  assert(::data_reduction_proxy::DeprecatedProxyServer_DeprecatedProxyType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  deprecated_type_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.DeprecatedProxyServer.deprecated_type)
}

// -------------------------------------------------------------------

// ConfigDeviceInfo

// optional int64 total_device_memory_kb = 1;
inline bool ConfigDeviceInfo::has_total_device_memory_kb() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfigDeviceInfo::clear_total_device_memory_kb() {
  total_device_memory_kb_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ConfigDeviceInfo::total_device_memory_kb() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.ConfigDeviceInfo.total_device_memory_kb)
  return total_device_memory_kb_;
}
inline void ConfigDeviceInfo::set_total_device_memory_kb(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  total_device_memory_kb_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.ConfigDeviceInfo.total_device_memory_kb)
}

// -------------------------------------------------------------------

// PrefetchProxyConfig_Proxy

// optional .data_reduction_proxy.PrefetchProxyConfig.Proxy.Type type = 1;
inline bool PrefetchProxyConfig_Proxy::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrefetchProxyConfig_Proxy::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::data_reduction_proxy::PrefetchProxyConfig_Proxy_Type PrefetchProxyConfig_Proxy::type() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PrefetchProxyConfig.Proxy.type)
  return static_cast< ::data_reduction_proxy::PrefetchProxyConfig_Proxy_Type >(type_);
}
inline void PrefetchProxyConfig_Proxy::set_type(::data_reduction_proxy::PrefetchProxyConfig_Proxy_Type value) {
  assert(::data_reduction_proxy::PrefetchProxyConfig_Proxy_Type_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PrefetchProxyConfig.Proxy.type)
}

// optional string host = 2;
inline bool PrefetchProxyConfig_Proxy::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrefetchProxyConfig_Proxy::clear_host() {
  host_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PrefetchProxyConfig_Proxy::host() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PrefetchProxyConfig.Proxy.host)
  return host_.GetNoArena();
}
inline void PrefetchProxyConfig_Proxy::set_host(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PrefetchProxyConfig.Proxy.host)
}
inline void PrefetchProxyConfig_Proxy::set_host(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  host_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:data_reduction_proxy.PrefetchProxyConfig.Proxy.host)
}
inline void PrefetchProxyConfig_Proxy::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_reduction_proxy.PrefetchProxyConfig.Proxy.host)
}
inline void PrefetchProxyConfig_Proxy::set_host(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_reduction_proxy.PrefetchProxyConfig.Proxy.host)
}
inline std::string* PrefetchProxyConfig_Proxy::mutable_host() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PrefetchProxyConfig.Proxy.host)
  return host_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PrefetchProxyConfig_Proxy::release_host() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.PrefetchProxyConfig.Proxy.host)
  if (!has_host()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return host_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PrefetchProxyConfig_Proxy::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  host_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.PrefetchProxyConfig.Proxy.host)
}

// optional int32 port = 3;
inline bool PrefetchProxyConfig_Proxy::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrefetchProxyConfig_Proxy::clear_port() {
  port_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrefetchProxyConfig_Proxy::port() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PrefetchProxyConfig.Proxy.port)
  return port_;
}
inline void PrefetchProxyConfig_Proxy::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  port_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PrefetchProxyConfig.Proxy.port)
}

// optional .data_reduction_proxy.PrefetchProxyConfig.Proxy.Scheme scheme = 4;
inline bool PrefetchProxyConfig_Proxy::has_scheme() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrefetchProxyConfig_Proxy::clear_scheme() {
  scheme_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::data_reduction_proxy::PrefetchProxyConfig_Proxy_Scheme PrefetchProxyConfig_Proxy::scheme() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PrefetchProxyConfig.Proxy.scheme)
  return static_cast< ::data_reduction_proxy::PrefetchProxyConfig_Proxy_Scheme >(scheme_);
}
inline void PrefetchProxyConfig_Proxy::set_scheme(::data_reduction_proxy::PrefetchProxyConfig_Proxy_Scheme value) {
  assert(::data_reduction_proxy::PrefetchProxyConfig_Proxy_Scheme_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  scheme_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.PrefetchProxyConfig.Proxy.scheme)
}

// -------------------------------------------------------------------

// PrefetchProxyConfig

// repeated .data_reduction_proxy.PrefetchProxyConfig.Proxy proxy_list = 1;
inline int PrefetchProxyConfig::proxy_list_size() const {
  return proxy_list_.size();
}
inline void PrefetchProxyConfig::clear_proxy_list() {
  proxy_list_.Clear();
}
inline ::data_reduction_proxy::PrefetchProxyConfig_Proxy* PrefetchProxyConfig::mutable_proxy_list(int index) {
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.PrefetchProxyConfig.proxy_list)
  return proxy_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_reduction_proxy::PrefetchProxyConfig_Proxy >*
PrefetchProxyConfig::mutable_proxy_list() {
  // @@protoc_insertion_point(field_mutable_list:data_reduction_proxy.PrefetchProxyConfig.proxy_list)
  return &proxy_list_;
}
inline const ::data_reduction_proxy::PrefetchProxyConfig_Proxy& PrefetchProxyConfig::proxy_list(int index) const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.PrefetchProxyConfig.proxy_list)
  return proxy_list_.Get(index);
}
inline ::data_reduction_proxy::PrefetchProxyConfig_Proxy* PrefetchProxyConfig::add_proxy_list() {
  // @@protoc_insertion_point(field_add:data_reduction_proxy.PrefetchProxyConfig.proxy_list)
  return proxy_list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_reduction_proxy::PrefetchProxyConfig_Proxy >&
PrefetchProxyConfig::proxy_list() const {
  // @@protoc_insertion_point(field_list:data_reduction_proxy.PrefetchProxyConfig.proxy_list)
  return proxy_list_;
}

// -------------------------------------------------------------------

// CreateClientConfigRequest

// optional string session_key = 1;
inline bool CreateClientConfigRequest::has_session_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateClientConfigRequest::clear_session_key() {
  session_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CreateClientConfigRequest::session_key() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.CreateClientConfigRequest.session_key)
  return session_key_.GetNoArena();
}
inline void CreateClientConfigRequest::set_session_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_reduction_proxy.CreateClientConfigRequest.session_key)
}
inline void CreateClientConfigRequest::set_session_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  session_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:data_reduction_proxy.CreateClientConfigRequest.session_key)
}
inline void CreateClientConfigRequest::set_session_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_reduction_proxy.CreateClientConfigRequest.session_key)
}
inline void CreateClientConfigRequest::set_session_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  session_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_reduction_proxy.CreateClientConfigRequest.session_key)
}
inline std::string* CreateClientConfigRequest::mutable_session_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.CreateClientConfigRequest.session_key)
  return session_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateClientConfigRequest::release_session_key() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.CreateClientConfigRequest.session_key)
  if (!has_session_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return session_key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateClientConfigRequest::set_allocated_session_key(std::string* session_key) {
  if (session_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_key);
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.CreateClientConfigRequest.session_key)
}

// optional .data_reduction_proxy.VersionInfo version_info = 2;
inline bool CreateClientConfigRequest::has_version_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateClientConfigRequest::clear_version_info() {
  if (version_info_ != nullptr) version_info_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::data_reduction_proxy::VersionInfo& CreateClientConfigRequest::version_info() const {
  const ::data_reduction_proxy::VersionInfo* p = version_info_;
  // @@protoc_insertion_point(field_get:data_reduction_proxy.CreateClientConfigRequest.version_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::data_reduction_proxy::VersionInfo*>(
      &::data_reduction_proxy::_VersionInfo_default_instance_);
}
inline ::data_reduction_proxy::VersionInfo* CreateClientConfigRequest::release_version_info() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.CreateClientConfigRequest.version_info)
  _has_bits_[0] &= ~0x00000004u;
  ::data_reduction_proxy::VersionInfo* temp = version_info_;
  version_info_ = nullptr;
  return temp;
}
inline ::data_reduction_proxy::VersionInfo* CreateClientConfigRequest::mutable_version_info() {
  _has_bits_[0] |= 0x00000004u;
  if (version_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::data_reduction_proxy::VersionInfo>(GetArenaNoVirtual());
    version_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.CreateClientConfigRequest.version_info)
  return version_info_;
}
inline void CreateClientConfigRequest::set_allocated_version_info(::data_reduction_proxy::VersionInfo* version_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete version_info_;
  }
  if (version_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      version_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  version_info_ = version_info;
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.CreateClientConfigRequest.version_info)
}

// optional string telephony_network_operator = 3;
inline bool CreateClientConfigRequest::has_telephony_network_operator() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateClientConfigRequest::clear_telephony_network_operator() {
  telephony_network_operator_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CreateClientConfigRequest::telephony_network_operator() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.CreateClientConfigRequest.telephony_network_operator)
  return telephony_network_operator_.GetNoArena();
}
inline void CreateClientConfigRequest::set_telephony_network_operator(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  telephony_network_operator_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_reduction_proxy.CreateClientConfigRequest.telephony_network_operator)
}
inline void CreateClientConfigRequest::set_telephony_network_operator(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  telephony_network_operator_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:data_reduction_proxy.CreateClientConfigRequest.telephony_network_operator)
}
inline void CreateClientConfigRequest::set_telephony_network_operator(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  telephony_network_operator_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_reduction_proxy.CreateClientConfigRequest.telephony_network_operator)
}
inline void CreateClientConfigRequest::set_telephony_network_operator(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  telephony_network_operator_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_reduction_proxy.CreateClientConfigRequest.telephony_network_operator)
}
inline std::string* CreateClientConfigRequest::mutable_telephony_network_operator() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.CreateClientConfigRequest.telephony_network_operator)
  return telephony_network_operator_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateClientConfigRequest::release_telephony_network_operator() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.CreateClientConfigRequest.telephony_network_operator)
  if (!has_telephony_network_operator()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return telephony_network_operator_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateClientConfigRequest::set_allocated_telephony_network_operator(std::string* telephony_network_operator) {
  if (telephony_network_operator != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  telephony_network_operator_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), telephony_network_operator);
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.CreateClientConfigRequest.telephony_network_operator)
}

// optional .data_reduction_proxy.CreateClientConfigRequest.DogfoodGroup dogfood_group = 4;
inline bool CreateClientConfigRequest::has_dogfood_group() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreateClientConfigRequest::clear_dogfood_group() {
  dogfood_group_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::data_reduction_proxy::CreateClientConfigRequest_DogfoodGroup CreateClientConfigRequest::dogfood_group() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.CreateClientConfigRequest.dogfood_group)
  return static_cast< ::data_reduction_proxy::CreateClientConfigRequest_DogfoodGroup >(dogfood_group_);
}
inline void CreateClientConfigRequest::set_dogfood_group(::data_reduction_proxy::CreateClientConfigRequest_DogfoodGroup value) {
  assert(::data_reduction_proxy::CreateClientConfigRequest_DogfoodGroup_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  dogfood_group_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.CreateClientConfigRequest.dogfood_group)
}

// optional .data_reduction_proxy.ConfigDeviceInfo device_info = 5;
inline bool CreateClientConfigRequest::has_device_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateClientConfigRequest::clear_device_info() {
  if (device_info_ != nullptr) device_info_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::data_reduction_proxy::ConfigDeviceInfo& CreateClientConfigRequest::device_info() const {
  const ::data_reduction_proxy::ConfigDeviceInfo* p = device_info_;
  // @@protoc_insertion_point(field_get:data_reduction_proxy.CreateClientConfigRequest.device_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::data_reduction_proxy::ConfigDeviceInfo*>(
      &::data_reduction_proxy::_ConfigDeviceInfo_default_instance_);
}
inline ::data_reduction_proxy::ConfigDeviceInfo* CreateClientConfigRequest::release_device_info() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.CreateClientConfigRequest.device_info)
  _has_bits_[0] &= ~0x00000008u;
  ::data_reduction_proxy::ConfigDeviceInfo* temp = device_info_;
  device_info_ = nullptr;
  return temp;
}
inline ::data_reduction_proxy::ConfigDeviceInfo* CreateClientConfigRequest::mutable_device_info() {
  _has_bits_[0] |= 0x00000008u;
  if (device_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::data_reduction_proxy::ConfigDeviceInfo>(GetArenaNoVirtual());
    device_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.CreateClientConfigRequest.device_info)
  return device_info_;
}
inline void CreateClientConfigRequest::set_allocated_device_info(::data_reduction_proxy::ConfigDeviceInfo* device_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete device_info_;
  }
  if (device_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      device_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  device_info_ = device_info;
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.CreateClientConfigRequest.device_info)
}

// -------------------------------------------------------------------

// VersionInfo

// optional string client = 1;
inline bool VersionInfo::has_client() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VersionInfo::clear_client() {
  client_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VersionInfo::client() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.VersionInfo.client)
  return client_.GetNoArena();
}
inline void VersionInfo::set_client(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  client_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_reduction_proxy.VersionInfo.client)
}
inline void VersionInfo::set_client(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  client_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:data_reduction_proxy.VersionInfo.client)
}
inline void VersionInfo::set_client(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  client_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_reduction_proxy.VersionInfo.client)
}
inline void VersionInfo::set_client(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  client_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_reduction_proxy.VersionInfo.client)
}
inline std::string* VersionInfo::mutable_client() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.VersionInfo.client)
  return client_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VersionInfo::release_client() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.VersionInfo.client)
  if (!has_client()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return client_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VersionInfo::set_allocated_client(std::string* client) {
  if (client != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  client_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client);
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.VersionInfo.client)
}

// optional int32 build = 2;
inline bool VersionInfo::has_build() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VersionInfo::clear_build() {
  build_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VersionInfo::build() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.VersionInfo.build)
  return build_;
}
inline void VersionInfo::set_build(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  build_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.VersionInfo.build)
}

// optional int32 patch = 3;
inline bool VersionInfo::has_patch() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VersionInfo::clear_patch() {
  patch_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VersionInfo::patch() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.VersionInfo.patch)
  return patch_;
}
inline void VersionInfo::set_patch(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  patch_ = value;
  // @@protoc_insertion_point(field_set:data_reduction_proxy.VersionInfo.patch)
}

// optional string channel = 4;
inline bool VersionInfo::has_channel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VersionInfo::clear_channel() {
  channel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VersionInfo::channel() const {
  // @@protoc_insertion_point(field_get:data_reduction_proxy.VersionInfo.channel)
  return channel_.GetNoArena();
}
inline void VersionInfo::set_channel(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:data_reduction_proxy.VersionInfo.channel)
}
inline void VersionInfo::set_channel(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  channel_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:data_reduction_proxy.VersionInfo.channel)
}
inline void VersionInfo::set_channel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:data_reduction_proxy.VersionInfo.channel)
}
inline void VersionInfo::set_channel(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  channel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:data_reduction_proxy.VersionInfo.channel)
}
inline std::string* VersionInfo::mutable_channel() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:data_reduction_proxy.VersionInfo.channel)
  return channel_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VersionInfo::release_channel() {
  // @@protoc_insertion_point(field_release:data_reduction_proxy.VersionInfo.channel)
  if (!has_channel()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return channel_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VersionInfo::set_allocated_channel(std::string* channel) {
  if (channel != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  channel_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel);
  // @@protoc_insertion_point(field_set_allocated:data_reduction_proxy.VersionInfo.channel)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace data_reduction_proxy

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::data_reduction_proxy::DeprecatedProxyServer_ProxyScheme> : ::std::true_type {};
template <> struct is_proto_enum< ::data_reduction_proxy::DeprecatedProxyServer_DeprecatedProxyType> : ::std::true_type {};
template <> struct is_proto_enum< ::data_reduction_proxy::PrefetchProxyConfig_Proxy_Type> : ::std::true_type {};
template <> struct is_proto_enum< ::data_reduction_proxy::PrefetchProxyConfig_Proxy_Scheme> : ::std::true_type {};
template <> struct is_proto_enum< ::data_reduction_proxy::CreateClientConfigRequest_DogfoodGroup> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_5fconfig_2eproto

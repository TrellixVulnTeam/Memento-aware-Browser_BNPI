// components/nacl/common/nacl.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "components/nacl/common/nacl.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"


#ifndef COMPONENTS_NACL_COMMON_NACL_MOJOM_JUMBO_H_
#define COMPONENTS_NACL_COMMON_NACL_MOJOM_JUMBO_H_
#include "components/nacl/common/nacl_types_param_traits.h"
#endif


namespace nacl {
namespace mojom {


void NaClRendererHostInterceptorForTesting::ReportExitStatus(int32_t exit_status, ReportExitStatusCallback callback) {
  GetForwardingInterface()->ReportExitStatus(std::move(exit_status), std::move(callback));
}
void NaClRendererHostInterceptorForTesting::ReportLoadStatus(::NaClErrorCode load_status, ReportLoadStatusCallback callback) {
  GetForwardingInterface()->ReportLoadStatus(std::move(load_status), std::move(callback));
}
void NaClRendererHostInterceptorForTesting::ProvideExitControl(::mojo::PendingRemote<NaClExitControl> exit_control) {
  GetForwardingInterface()->ProvideExitControl(std::move(exit_control));
}
NaClRendererHostAsyncWaiter::NaClRendererHostAsyncWaiter(
    NaClRendererHost* proxy) : proxy_(proxy) {}

NaClRendererHostAsyncWaiter::~NaClRendererHostAsyncWaiter() = default;

void NaClRendererHostAsyncWaiter::ReportExitStatus(
    int32_t exit_status) {
  base::RunLoop loop;
  proxy_->ReportExitStatus(std::move(exit_status),
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}
void NaClRendererHostAsyncWaiter::ReportLoadStatus(
    ::NaClErrorCode load_status) {
  base::RunLoop loop;
  proxy_->ReportLoadStatus(std::move(load_status),
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}



NaClExitControlAsyncWaiter::NaClExitControlAsyncWaiter(
    NaClExitControl* proxy) : proxy_(proxy) {}

NaClExitControlAsyncWaiter::~NaClExitControlAsyncWaiter() = default;






}  // namespace mojom
}  // namespace nacl

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/content_storage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fcontent_5fstorage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fcontent_5fstorage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2ffeed_2fcore_2fproto_2fcontent_5fstorage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2ffeed_2fcore_2fproto_2fcontent_5fstorage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace feed {
class ContentStorageProto;
class ContentStorageProtoDefaultTypeInternal;
extern ContentStorageProtoDefaultTypeInternal _ContentStorageProto_default_instance_;
}  // namespace feed
PROTOBUF_NAMESPACE_OPEN
template<> ::feed::ContentStorageProto* Arena::CreateMaybeMessage<::feed::ContentStorageProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace feed {

// ===================================================================

class ContentStorageProto :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feed.ContentStorageProto) */ {
 public:
  ContentStorageProto();
  virtual ~ContentStorageProto();

  ContentStorageProto(const ContentStorageProto& from);
  ContentStorageProto(ContentStorageProto&& from) noexcept
    : ContentStorageProto() {
    *this = ::std::move(from);
  }

  inline ContentStorageProto& operator=(const ContentStorageProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentStorageProto& operator=(ContentStorageProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ContentStorageProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContentStorageProto* internal_default_instance() {
    return reinterpret_cast<const ContentStorageProto*>(
               &_ContentStorageProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ContentStorageProto& a, ContentStorageProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ContentStorageProto* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContentStorageProto* New() const final {
    return CreateMaybeMessage<ContentStorageProto>(nullptr);
  }

  ContentStorageProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContentStorageProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ContentStorageProto& from);
  void MergeFrom(const ContentStorageProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContentStorageProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feed.ContentStorageProto";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kContentDataFieldNumber = 2,
  };
  // optional string key = 1;
  bool has_key() const;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // optional bytes content_data = 2;
  bool has_content_data() const;
  void clear_content_data();
  const std::string& content_data() const;
  void set_content_data(const std::string& value);
  void set_content_data(std::string&& value);
  void set_content_data(const char* value);
  void set_content_data(const void* value, size_t size);
  std::string* mutable_content_data();
  std::string* release_content_data();
  void set_allocated_content_data(std::string* content_data);

  // @@protoc_insertion_point(class_scope:feed.ContentStorageProto)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_data_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fcontent_5fstorage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ContentStorageProto

// optional string key = 1;
inline bool ContentStorageProto::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContentStorageProto::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContentStorageProto::key() const {
  // @@protoc_insertion_point(field_get:feed.ContentStorageProto.key)
  return key_.GetNoArena();
}
inline void ContentStorageProto::set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:feed.ContentStorageProto.key)
}
inline void ContentStorageProto::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:feed.ContentStorageProto.key)
}
inline void ContentStorageProto::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:feed.ContentStorageProto.key)
}
inline void ContentStorageProto::set_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:feed.ContentStorageProto.key)
}
inline std::string* ContentStorageProto::mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:feed.ContentStorageProto.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContentStorageProto::release_key() {
  // @@protoc_insertion_point(field_release:feed.ContentStorageProto.key)
  if (!has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContentStorageProto::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:feed.ContentStorageProto.key)
}

// optional bytes content_data = 2;
inline bool ContentStorageProto::has_content_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContentStorageProto::clear_content_data() {
  content_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ContentStorageProto::content_data() const {
  // @@protoc_insertion_point(field_get:feed.ContentStorageProto.content_data)
  return content_data_.GetNoArena();
}
inline void ContentStorageProto::set_content_data(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  content_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:feed.ContentStorageProto.content_data)
}
inline void ContentStorageProto::set_content_data(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  content_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:feed.ContentStorageProto.content_data)
}
inline void ContentStorageProto::set_content_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  content_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:feed.ContentStorageProto.content_data)
}
inline void ContentStorageProto::set_content_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  content_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:feed.ContentStorageProto.content_data)
}
inline std::string* ContentStorageProto::mutable_content_data() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:feed.ContentStorageProto.content_data)
  return content_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContentStorageProto::release_content_data() {
  // @@protoc_insertion_point(field_release:feed.ContentStorageProto.content_data)
  if (!has_content_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return content_data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContentStorageProto::set_allocated_content_data(std::string* content_data) {
  if (content_data != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  content_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content_data);
  // @@protoc_insertion_point(field_set_allocated:feed.ContentStorageProto.content_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace feed

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fcontent_5fstorage_2eproto

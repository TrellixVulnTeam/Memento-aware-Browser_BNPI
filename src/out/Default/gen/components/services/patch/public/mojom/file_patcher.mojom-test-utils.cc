// components/services/patch/public/mojom/file_patcher.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "components/services/patch/public/mojom/file_patcher.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/mojom/base/file.mojom.h"


#ifndef COMPONENTS_SERVICES_PATCH_PUBLIC_MOJOM_FILE_PATCHER_MOJOM_JUMBO_H_
#define COMPONENTS_SERVICES_PATCH_PUBLIC_MOJOM_FILE_PATCHER_MOJOM_JUMBO_H_
#endif


namespace patch {
namespace mojom {


void FilePatcherInterceptorForTesting::PatchFileBsdiff(::base::File input_file, ::base::File patch_file, ::base::File output_file, PatchFileBsdiffCallback callback) {
  GetForwardingInterface()->PatchFileBsdiff(std::move(input_file), std::move(patch_file), std::move(output_file), std::move(callback));
}
void FilePatcherInterceptorForTesting::PatchFileCourgette(::base::File input_file, ::base::File patch_file, ::base::File output_file, PatchFileCourgetteCallback callback) {
  GetForwardingInterface()->PatchFileCourgette(std::move(input_file), std::move(patch_file), std::move(output_file), std::move(callback));
}
FilePatcherAsyncWaiter::FilePatcherAsyncWaiter(
    FilePatcher* proxy) : proxy_(proxy) {}

FilePatcherAsyncWaiter::~FilePatcherAsyncWaiter() = default;

void FilePatcherAsyncWaiter::PatchFileBsdiff(
    ::base::File input_file, ::base::File patch_file, ::base::File output_file, int32_t* out_result) {
  base::RunLoop loop;
  proxy_->PatchFileBsdiff(std::move(input_file),std::move(patch_file),std::move(output_file),
      base::BindOnce(
          [](base::RunLoop* loop,
             int32_t* out_result
,
             int32_t result) {*out_result = std::move(result);
            loop->Quit();
          },
          &loop,
          out_result));
  loop.Run();
}
void FilePatcherAsyncWaiter::PatchFileCourgette(
    ::base::File input_file, ::base::File patch_file, ::base::File output_file, int32_t* out_result) {
  base::RunLoop loop;
  proxy_->PatchFileCourgette(std::move(input_file),std::move(patch_file),std::move(output_file),
      base::BindOnce(
          [](base::RunLoop* loop,
             int32_t* out_result
,
             int32_t result) {*out_result = std::move(result);
            loop->Quit();
          },
          &loop,
          out_result));
  loop.Run();
}





}  // namespace mojom
}  // namespace patch

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
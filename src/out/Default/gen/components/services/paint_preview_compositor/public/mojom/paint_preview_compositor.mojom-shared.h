// components/services/paint_preview_compositor/public/mojom/paint_preview_compositor.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SERVICES_PAINT_PREVIEW_COMPOSITOR_PUBLIC_MOJOM_PAINT_PREVIEW_COMPOSITOR_MOJOM_SHARED_H_
#define COMPONENTS_SERVICES_PAINT_PREVIEW_COMPOSITOR_PUBLIC_MOJOM_PAINT_PREVIEW_COMPOSITOR_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "components/services/paint_preview_compositor/public/mojom/paint_preview_compositor.mojom-shared-internal.h"
#include "components/discardable_memory/public/mojom/discardable_shared_memory_manager.mojom-shared.h"
#include "mojo/public/mojom/base/file.mojom-shared.h"
#include "mojo/public/mojom/base/shared_memory.mojom-shared.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-shared.h"
#include "skia/public/mojom/bitmap.mojom-shared.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared.h"
#include "url/mojom/url.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace paint_preview {
namespace mojom {
class PaintPreviewBeginCompositeRequestDataView;

class SubframeClipRectDataView;

class FrameDataDataView;

class PaintPreviewBeginCompositeResponseDataView;



}  // namespace mojom
}  // namespace paint_preview

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::paint_preview::mojom::PaintPreviewBeginCompositeRequestDataView> {
  using Data = ::paint_preview::mojom::internal::PaintPreviewBeginCompositeRequest_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::paint_preview::mojom::SubframeClipRectDataView> {
  using Data = ::paint_preview::mojom::internal::SubframeClipRect_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::paint_preview::mojom::FrameDataDataView> {
  using Data = ::paint_preview::mojom::internal::FrameData_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::paint_preview::mojom::PaintPreviewBeginCompositeResponseDataView> {
  using Data = ::paint_preview::mojom::internal::PaintPreviewBeginCompositeResponse_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace paint_preview {
namespace mojom {


enum class PaintPreviewCompositor_Status : int32_t {
  
  kSuccess = 0,
  
  kDeserializingFailure = 1,
  
  kCompositingFailure = 2,
  kMinValue = 0,
  kMaxValue = 2,
};

 std::ostream& operator<<(std::ostream& os, PaintPreviewCompositor_Status value);
inline bool IsKnownEnumValue(PaintPreviewCompositor_Status value) {
  return internal::PaintPreviewCompositor_Status_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class PaintPreviewCompositorInterfaceBase {};

using PaintPreviewCompositorPtrDataView =
    mojo::InterfacePtrDataView<PaintPreviewCompositorInterfaceBase>;
using PaintPreviewCompositorRequestDataView =
    mojo::InterfaceRequestDataView<PaintPreviewCompositorInterfaceBase>;
using PaintPreviewCompositorAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<PaintPreviewCompositorInterfaceBase>;
using PaintPreviewCompositorAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<PaintPreviewCompositorInterfaceBase>;
class PaintPreviewCompositorCollectionInterfaceBase {};

using PaintPreviewCompositorCollectionPtrDataView =
    mojo::InterfacePtrDataView<PaintPreviewCompositorCollectionInterfaceBase>;
using PaintPreviewCompositorCollectionRequestDataView =
    mojo::InterfaceRequestDataView<PaintPreviewCompositorCollectionInterfaceBase>;
using PaintPreviewCompositorCollectionAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<PaintPreviewCompositorCollectionInterfaceBase>;
using PaintPreviewCompositorCollectionAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<PaintPreviewCompositorCollectionInterfaceBase>;
class PaintPreviewBeginCompositeRequestDataView {
 public:
  PaintPreviewBeginCompositeRequestDataView() {}

  PaintPreviewBeginCompositeRequestDataView(
      internal::PaintPreviewBeginCompositeRequest_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetProtoDataView(
      ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadProto(UserType* output) {
    auto* pointer = data_->proto.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView>(
        pointer, output, context_);
  }
  inline void GetFileMapDataView(
      mojo::MapDataView<::mojo_base::mojom::UnguessableTokenDataView, ::mojo_base::mojom::FileDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFileMap(UserType* output) {
    auto* pointer = data_->file_map.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<::mojo_base::mojom::UnguessableTokenDataView, ::mojo_base::mojom::FileDataView>>(
        pointer, output, context_);
  }
 private:
  internal::PaintPreviewBeginCompositeRequest_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class SubframeClipRectDataView {
 public:
  SubframeClipRectDataView() {}

  SubframeClipRectDataView(
      internal::SubframeClipRect_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetFrameGuidDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFrameGuid(UserType* output) {
    auto* pointer = data_->frame_guid.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, context_);
  }
  inline void GetClipRectDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadClipRect(UserType* output) {
    auto* pointer = data_->clip_rect.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, context_);
  }
 private:
  internal::SubframeClipRect_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class FrameDataDataView {
 public:
  FrameDataDataView() {}

  FrameDataDataView(
      internal::FrameData_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetScrollExtentsDataView(
      ::gfx::mojom::SizeDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadScrollExtents(UserType* output) {
    auto* pointer = data_->scroll_extents.Get();
    return mojo::internal::Deserialize<::gfx::mojom::SizeDataView>(
        pointer, output, context_);
  }
  inline void GetSubframesDataView(
      mojo::ArrayDataView<SubframeClipRectDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSubframes(UserType* output) {
    auto* pointer = data_->subframes.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::paint_preview::mojom::SubframeClipRectDataView>>(
        pointer, output, context_);
  }
 private:
  internal::FrameData_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class PaintPreviewBeginCompositeResponseDataView {
 public:
  PaintPreviewBeginCompositeResponseDataView() {}

  PaintPreviewBeginCompositeResponseDataView(
      internal::PaintPreviewBeginCompositeResponse_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetRootFrameGuidDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadRootFrameGuid(UserType* output) {
    auto* pointer = data_->root_frame_guid.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, context_);
  }
  inline void GetFramesDataView(
      mojo::MapDataView<::mojo_base::mojom::UnguessableTokenDataView, FrameDataDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadFrames(UserType* output) {
    auto* pointer = data_->frames.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<::mojo_base::mojom::UnguessableTokenDataView, ::paint_preview::mojom::FrameDataDataView>>(
        pointer, output, context_);
  }
 private:
  internal::PaintPreviewBeginCompositeResponse_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};



}  // namespace mojom
}  // namespace paint_preview

namespace std {

template <>
struct hash<::paint_preview::mojom::PaintPreviewCompositor_Status>
    : public mojo::internal::EnumHashImpl<::paint_preview::mojom::PaintPreviewCompositor_Status> {};

}  // namespace std

namespace mojo {


template <>
struct EnumTraits<::paint_preview::mojom::PaintPreviewCompositor_Status, ::paint_preview::mojom::PaintPreviewCompositor_Status> {
  static ::paint_preview::mojom::PaintPreviewCompositor_Status ToMojom(::paint_preview::mojom::PaintPreviewCompositor_Status input) { return input; }
  static bool FromMojom(::paint_preview::mojom::PaintPreviewCompositor_Status input, ::paint_preview::mojom::PaintPreviewCompositor_Status* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::paint_preview::mojom::PaintPreviewCompositor_Status, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::paint_preview::mojom::PaintPreviewCompositor_Status, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::paint_preview::mojom::PaintPreviewCompositor_Status>(input), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::paint_preview::mojom::PaintPreviewBeginCompositeRequestDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::paint_preview::mojom::PaintPreviewBeginCompositeRequestDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::paint_preview::mojom::internal::PaintPreviewBeginCompositeRequest_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::proto(input)) in_proto = Traits::proto(input);
    typename decltype((*output)->proto)::BaseType::BufferWriter
        proto_writer;
    mojo::internal::Serialize<::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView>(
        in_proto, buffer, &proto_writer, context);
    (*output)->proto.Set(
        proto_writer.is_null() ? nullptr : proto_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->proto.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null proto in PaintPreviewBeginCompositeRequest struct");
    decltype(Traits::file_map(input)) in_file_map = Traits::file_map(input);
    typename decltype((*output)->file_map)::BaseType::BufferWriter
        file_map_writer;
    const mojo::internal::ContainerValidateParams file_map_validate_params(
        new mojo::internal::ContainerValidateParams(0, false, nullptr), new mojo::internal::ContainerValidateParams(0, false, nullptr));
    mojo::internal::Serialize<mojo::MapDataView<::mojo_base::mojom::UnguessableTokenDataView, ::mojo_base::mojom::FileDataView>>(
        in_file_map, buffer, &file_map_writer, &file_map_validate_params,
        context);
    (*output)->file_map.Set(
        file_map_writer.is_null() ? nullptr : file_map_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->file_map.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null file_map in PaintPreviewBeginCompositeRequest struct");
  }

  static bool Deserialize(::paint_preview::mojom::internal::PaintPreviewBeginCompositeRequest_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::paint_preview::mojom::PaintPreviewBeginCompositeRequestDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::paint_preview::mojom::SubframeClipRectDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::paint_preview::mojom::SubframeClipRectDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::paint_preview::mojom::internal::SubframeClipRect_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::frame_guid(input)) in_frame_guid = Traits::frame_guid(input);
    typename decltype((*output)->frame_guid)::BaseType::BufferWriter
        frame_guid_writer;
    mojo::internal::Serialize<::mojo_base::mojom::UnguessableTokenDataView>(
        in_frame_guid, buffer, &frame_guid_writer, context);
    (*output)->frame_guid.Set(
        frame_guid_writer.is_null() ? nullptr : frame_guid_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->frame_guid.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null frame_guid in SubframeClipRect struct");
    decltype(Traits::clip_rect(input)) in_clip_rect = Traits::clip_rect(input);
    typename decltype((*output)->clip_rect)::BaseType::BufferWriter
        clip_rect_writer;
    mojo::internal::Serialize<::gfx::mojom::RectDataView>(
        in_clip_rect, buffer, &clip_rect_writer, context);
    (*output)->clip_rect.Set(
        clip_rect_writer.is_null() ? nullptr : clip_rect_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->clip_rect.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null clip_rect in SubframeClipRect struct");
  }

  static bool Deserialize(::paint_preview::mojom::internal::SubframeClipRect_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::paint_preview::mojom::SubframeClipRectDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::paint_preview::mojom::FrameDataDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::paint_preview::mojom::FrameDataDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::paint_preview::mojom::internal::FrameData_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::scroll_extents(input)) in_scroll_extents = Traits::scroll_extents(input);
    typename decltype((*output)->scroll_extents)::BaseType::BufferWriter
        scroll_extents_writer;
    mojo::internal::Serialize<::gfx::mojom::SizeDataView>(
        in_scroll_extents, buffer, &scroll_extents_writer, context);
    (*output)->scroll_extents.Set(
        scroll_extents_writer.is_null() ? nullptr : scroll_extents_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->scroll_extents.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null scroll_extents in FrameData struct");
    decltype(Traits::subframes(input)) in_subframes = Traits::subframes(input);
    typename decltype((*output)->subframes)::BaseType::BufferWriter
        subframes_writer;
    const mojo::internal::ContainerValidateParams subframes_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::paint_preview::mojom::SubframeClipRectDataView>>(
        in_subframes, buffer, &subframes_writer, &subframes_validate_params,
        context);
    (*output)->subframes.Set(
        subframes_writer.is_null() ? nullptr : subframes_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->subframes.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null subframes in FrameData struct");
  }

  static bool Deserialize(::paint_preview::mojom::internal::FrameData_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::paint_preview::mojom::FrameDataDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::paint_preview::mojom::PaintPreviewBeginCompositeResponseDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::paint_preview::mojom::PaintPreviewBeginCompositeResponseDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::paint_preview::mojom::internal::PaintPreviewBeginCompositeResponse_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::root_frame_guid(input)) in_root_frame_guid = Traits::root_frame_guid(input);
    typename decltype((*output)->root_frame_guid)::BaseType::BufferWriter
        root_frame_guid_writer;
    mojo::internal::Serialize<::mojo_base::mojom::UnguessableTokenDataView>(
        in_root_frame_guid, buffer, &root_frame_guid_writer, context);
    (*output)->root_frame_guid.Set(
        root_frame_guid_writer.is_null() ? nullptr : root_frame_guid_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->root_frame_guid.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null root_frame_guid in PaintPreviewBeginCompositeResponse struct");
    decltype(Traits::frames(input)) in_frames = Traits::frames(input);
    typename decltype((*output)->frames)::BaseType::BufferWriter
        frames_writer;
    const mojo::internal::ContainerValidateParams frames_validate_params(
        new mojo::internal::ContainerValidateParams(0, false, nullptr), new mojo::internal::ContainerValidateParams(0, false, nullptr));
    mojo::internal::Serialize<mojo::MapDataView<::mojo_base::mojom::UnguessableTokenDataView, ::paint_preview::mojom::FrameDataDataView>>(
        in_frames, buffer, &frames_writer, &frames_validate_params,
        context);
    (*output)->frames.Set(
        frames_writer.is_null() ? nullptr : frames_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->frames.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null frames in PaintPreviewBeginCompositeResponse struct");
  }

  static bool Deserialize(::paint_preview::mojom::internal::PaintPreviewBeginCompositeResponse_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::paint_preview::mojom::PaintPreviewBeginCompositeResponseDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace paint_preview {
namespace mojom {

inline void PaintPreviewBeginCompositeRequestDataView::GetProtoDataView(
    ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView* output) {
  auto pointer = data_->proto.Get();
  *output = ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView(pointer, context_);
}
inline void PaintPreviewBeginCompositeRequestDataView::GetFileMapDataView(
    mojo::MapDataView<::mojo_base::mojom::UnguessableTokenDataView, ::mojo_base::mojom::FileDataView>* output) {
  auto pointer = data_->file_map.Get();
  *output = mojo::MapDataView<::mojo_base::mojom::UnguessableTokenDataView, ::mojo_base::mojom::FileDataView>(pointer, context_);
}


inline void SubframeClipRectDataView::GetFrameGuidDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->frame_guid.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, context_);
}
inline void SubframeClipRectDataView::GetClipRectDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->clip_rect.Get();
  *output = ::gfx::mojom::RectDataView(pointer, context_);
}


inline void FrameDataDataView::GetScrollExtentsDataView(
    ::gfx::mojom::SizeDataView* output) {
  auto pointer = data_->scroll_extents.Get();
  *output = ::gfx::mojom::SizeDataView(pointer, context_);
}
inline void FrameDataDataView::GetSubframesDataView(
    mojo::ArrayDataView<SubframeClipRectDataView>* output) {
  auto pointer = data_->subframes.Get();
  *output = mojo::ArrayDataView<SubframeClipRectDataView>(pointer, context_);
}


inline void PaintPreviewBeginCompositeResponseDataView::GetRootFrameGuidDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->root_frame_guid.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, context_);
}
inline void PaintPreviewBeginCompositeResponseDataView::GetFramesDataView(
    mojo::MapDataView<::mojo_base::mojom::UnguessableTokenDataView, FrameDataDataView>* output) {
  auto pointer = data_->frames.Get();
  *output = mojo::MapDataView<::mojo_base::mojom::UnguessableTokenDataView, FrameDataDataView>(pointer, context_);
}



}  // namespace mojom
}  // namespace paint_preview

#endif  // COMPONENTS_SERVICES_PAINT_PREVIEW_COMPOSITOR_PUBLIC_MOJOM_PAINT_PREVIEW_COMPOSITOR_MOJOM_SHARED_H_
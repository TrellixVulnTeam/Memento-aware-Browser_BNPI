// components/services/language_detection/public/mojom/language_detection.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "components/services/language_detection/public/mojom/language_detection.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "mojo/public/mojom/base/string16.mojom.h"


#ifndef COMPONENTS_SERVICES_LANGUAGE_DETECTION_PUBLIC_MOJOM_LANGUAGE_DETECTION_MOJOM_JUMBO_H_
#define COMPONENTS_SERVICES_LANGUAGE_DETECTION_PUBLIC_MOJOM_LANGUAGE_DETECTION_MOJOM_JUMBO_H_
#endif


namespace language_detection {
namespace mojom {


void LanguageDetectionServiceInterceptorForTesting::DetermineLanguage(const ::base::string16& text, DetermineLanguageCallback callback) {
  GetForwardingInterface()->DetermineLanguage(std::move(text), std::move(callback));
}
LanguageDetectionServiceAsyncWaiter::LanguageDetectionServiceAsyncWaiter(
    LanguageDetectionService* proxy) : proxy_(proxy) {}

LanguageDetectionServiceAsyncWaiter::~LanguageDetectionServiceAsyncWaiter() = default;

void LanguageDetectionServiceAsyncWaiter::DetermineLanguage(
    const ::base::string16& text, std::string* out_language, bool* out_is_reliable) {
  base::RunLoop loop;
  proxy_->DetermineLanguage(std::move(text),
      base::BindOnce(
          [](base::RunLoop* loop,
             std::string* out_language
,
             bool* out_is_reliable
,
             const std::string& language,
             bool is_reliable) {*out_language = std::move(language);*out_is_reliable = std::move(is_reliable);
            loop->Quit();
          },
          &loop,
          out_language,
          out_is_reliable));
  loop.Run();
}





}  // namespace mojom
}  // namespace language_detection

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
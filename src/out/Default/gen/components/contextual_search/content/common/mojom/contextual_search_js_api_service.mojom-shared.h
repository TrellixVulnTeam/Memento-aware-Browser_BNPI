// components/contextual_search/content/common/mojom/contextual_search_js_api_service.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_CONTEXTUAL_SEARCH_CONTENT_COMMON_MOJOM_CONTEXTUAL_SEARCH_JS_API_SERVICE_MOJOM_SHARED_H_
#define COMPONENTS_CONTEXTUAL_SEARCH_CONTENT_COMMON_MOJOM_CONTEXTUAL_SEARCH_JS_API_SERVICE_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "components/contextual_search/content/common/mojom/contextual_search_js_api_service.mojom-shared-internal.h"
#include "url/mojom/url.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace contextual_search {
namespace mojom {


}  // namespace mojom
}  // namespace contextual_search

namespace mojo {
namespace internal {

}  // namespace internal
}  // namespace mojo


namespace contextual_search {
namespace mojom {


enum class OverlayPosition : int32_t {
  
  kClose = 0,
  
  kPeek = 1,
  
  kExpand = 2,
  
  kMaximize = 3,
  kMinValue = 0,
  kMaxValue = 3,
};

 std::ostream& operator<<(std::ostream& os, OverlayPosition value);
inline bool IsKnownEnumValue(OverlayPosition value) {
  return internal::OverlayPosition_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class ContextualSearchJsApiServiceInterfaceBase {};

using ContextualSearchJsApiServicePtrDataView =
    mojo::InterfacePtrDataView<ContextualSearchJsApiServiceInterfaceBase>;
using ContextualSearchJsApiServiceRequestDataView =
    mojo::InterfaceRequestDataView<ContextualSearchJsApiServiceInterfaceBase>;
using ContextualSearchJsApiServiceAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<ContextualSearchJsApiServiceInterfaceBase>;
using ContextualSearchJsApiServiceAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<ContextualSearchJsApiServiceInterfaceBase>;


}  // namespace mojom
}  // namespace contextual_search

namespace std {

template <>
struct hash<::contextual_search::mojom::OverlayPosition>
    : public mojo::internal::EnumHashImpl<::contextual_search::mojom::OverlayPosition> {};

}  // namespace std

namespace mojo {


template <>
struct EnumTraits<::contextual_search::mojom::OverlayPosition, ::contextual_search::mojom::OverlayPosition> {
  static ::contextual_search::mojom::OverlayPosition ToMojom(::contextual_search::mojom::OverlayPosition input) { return input; }
  static bool FromMojom(::contextual_search::mojom::OverlayPosition input, ::contextual_search::mojom::OverlayPosition* output) {
    *output = input;
    return true;
  }
};

namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::contextual_search::mojom::OverlayPosition, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::contextual_search::mojom::OverlayPosition, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(static_cast<::contextual_search::mojom::OverlayPosition>(input), output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace contextual_search {
namespace mojom {


}  // namespace mojom
}  // namespace contextual_search

#endif  // COMPONENTS_CONTEXTUAL_SEARCH_CONTENT_COMMON_MOJOM_CONTEXTUAL_SEARCH_JS_API_SERVICE_MOJOM_SHARED_H_
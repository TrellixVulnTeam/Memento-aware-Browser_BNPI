// components/contextual_search/content/common/mojom/contextual_search_js_api_service.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "components/contextual_search/content/common/mojom/contextual_search_js_api_service.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "url/mojom/url.mojom.h"


#ifndef COMPONENTS_CONTEXTUAL_SEARCH_CONTENT_COMMON_MOJOM_CONTEXTUAL_SEARCH_JS_API_SERVICE_MOJOM_JUMBO_H_
#define COMPONENTS_CONTEXTUAL_SEARCH_CONTENT_COMMON_MOJOM_CONTEXTUAL_SEARCH_JS_API_SERVICE_MOJOM_JUMBO_H_
#endif


namespace contextual_search {
namespace mojom {


void ContextualSearchJsApiServiceInterceptorForTesting::ShouldEnableJsApi(const ::GURL& url, ShouldEnableJsApiCallback callback) {
  GetForwardingInterface()->ShouldEnableJsApi(std::move(url), std::move(callback));
}
void ContextualSearchJsApiServiceInterceptorForTesting::HandleSetCaption(const std::string& message, bool does_answer) {
  GetForwardingInterface()->HandleSetCaption(std::move(message), std::move(does_answer));
}
void ContextualSearchJsApiServiceInterceptorForTesting::HandleChangeOverlayPosition(OverlayPosition desired_position) {
  GetForwardingInterface()->HandleChangeOverlayPosition(std::move(desired_position));
}
ContextualSearchJsApiServiceAsyncWaiter::ContextualSearchJsApiServiceAsyncWaiter(
    ContextualSearchJsApiService* proxy) : proxy_(proxy) {}

ContextualSearchJsApiServiceAsyncWaiter::~ContextualSearchJsApiServiceAsyncWaiter() = default;

void ContextualSearchJsApiServiceAsyncWaiter::ShouldEnableJsApi(
    const ::GURL& url, bool* out_should_enable) {
  base::RunLoop loop;
  proxy_->ShouldEnableJsApi(std::move(url),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_should_enable
,
             bool should_enable) {*out_should_enable = std::move(should_enable);
            loop->Quit();
          },
          &loop,
          out_should_enable));
  loop.Run();
}





}  // namespace mojom
}  // namespace contextual_search

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
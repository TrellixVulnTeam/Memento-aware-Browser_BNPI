// components/printing/common/print.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_PRINTING_COMMON_PRINT_MOJOM_SHARED_INTERNAL_H_
#define COMPONENTS_PRINTING_COMMON_PRINT_MOJOM_SHARED_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/mojom/base/shared_memory.mojom-shared-internal.h"
#include "mojo/public/mojom/base/values.mojom-shared-internal.h"
#include "printing/mojom/print.mojom-shared-internal.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace printing {
namespace mojom {
namespace internal {
class PrintFrameContentParams_Data;
class OptionsFromDocumentParams_Data;
class DidPrintContentParams_Data;
class DidStartPreviewParams_Data;

#pragma pack(push, 1)
class  PrintFrameContentParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(PrintFrameContentParams_Data));
      new (data()) PrintFrameContentParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    PrintFrameContentParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<PrintFrameContentParams_Data>(index_);
    }
    PrintFrameContentParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> printable_area;
  int32_t document_cookie;
  uint8_t padfinal_[4];

 private:
  PrintFrameContentParams_Data();
  ~PrintFrameContentParams_Data() = delete;
};
static_assert(sizeof(PrintFrameContentParams_Data) == 24,
              "Bad sizeof(PrintFrameContentParams_Data)");
// Used by PrintFrameContentParams::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct PrintFrameContentParams_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  PrintFrameContentParams_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~PrintFrameContentParams_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    PrintFrameContentParams_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    PrintFrameContentParams_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  OptionsFromDocumentParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(OptionsFromDocumentParams_Data));
      new (data()) OptionsFromDocumentParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    OptionsFromDocumentParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<OptionsFromDocumentParams_Data>(index_);
    }
    OptionsFromDocumentParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t is_scaling_disabled : 1;
  uint8_t pad0_[3];
  int32_t copies;
  int32_t duplex;
  uint8_t padfinal_[4];

 private:
  OptionsFromDocumentParams_Data();
  ~OptionsFromDocumentParams_Data() = delete;
};
static_assert(sizeof(OptionsFromDocumentParams_Data) == 24,
              "Bad sizeof(OptionsFromDocumentParams_Data)");
// Used by OptionsFromDocumentParams::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct OptionsFromDocumentParams_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  OptionsFromDocumentParams_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~OptionsFromDocumentParams_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    OptionsFromDocumentParams_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    OptionsFromDocumentParams_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  DidPrintContentParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DidPrintContentParams_Data));
      new (data()) DidPrintContentParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DidPrintContentParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DidPrintContentParams_Data>(index_);
    }
    DidPrintContentParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::ReadOnlySharedMemoryRegion_Data> metafile_data_region;
  mojo::internal::Pointer<mojo::internal::Map_Data<uint32_t, int32_t>> subframe_content_info;

 private:
  DidPrintContentParams_Data();
  ~DidPrintContentParams_Data() = delete;
};
static_assert(sizeof(DidPrintContentParams_Data) == 24,
              "Bad sizeof(DidPrintContentParams_Data)");
// Used by DidPrintContentParams::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct DidPrintContentParams_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  DidPrintContentParams_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~DidPrintContentParams_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    DidPrintContentParams_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    DidPrintContentParams_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  DidStartPreviewParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DidStartPreviewParams_Data));
      new (data()) DidStartPreviewParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DidStartPreviewParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DidStartPreviewParams_Data>(index_);
    }
    DidStartPreviewParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t page_count;
  int32_t pages_per_sheet;
  mojo::internal::Pointer<mojo::internal::Array_Data<int32_t>> pages_to_render;
  mojo::internal::Pointer<::gfx::mojom::internal::Size_Data> page_size;
  int32_t fit_to_page_scaling;
  uint8_t padfinal_[4];

 private:
  DidStartPreviewParams_Data();
  ~DidStartPreviewParams_Data() = delete;
};
static_assert(sizeof(DidStartPreviewParams_Data) == 40,
              "Bad sizeof(DidStartPreviewParams_Data)");
// Used by DidStartPreviewParams::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct DidStartPreviewParams_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  DidStartPreviewParams_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~DidStartPreviewParams_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::internal::SerializationContext* context,
                 mojo::internal::Buffer* buffer) override {
    DidStartPreviewParams_Data::BufferWriter writer;
    mojo::internal::Serialize<DataView>(user_data_, buffer, &writer, context);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    DidStartPreviewParams_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace printing

#endif  // COMPONENTS_PRINTING_COMMON_PRINT_MOJOM_SHARED_INTERNAL_H_
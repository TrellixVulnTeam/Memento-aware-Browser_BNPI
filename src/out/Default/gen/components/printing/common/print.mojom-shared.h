// components/printing/common/print.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_PRINTING_COMMON_PRINT_MOJOM_SHARED_H_
#define COMPONENTS_PRINTING_COMMON_PRINT_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <ostream>
#include <type_traits>
#include <utility>

#include "base/compiler_specific.h"
#include "base/containers/flat_map.h"
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"
#include "components/printing/common/print.mojom-shared-internal.h"
#include "mojo/public/mojom/base/shared_memory.mojom-shared.h"
#include "mojo/public/mojom/base/values.mojom-shared.h"
#include "printing/mojom/print.mojom-shared.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace printing {
namespace mojom {
class PrintFrameContentParamsDataView;

class OptionsFromDocumentParamsDataView;

class DidPrintContentParamsDataView;

class DidStartPreviewParamsDataView;



}  // namespace mojom
}  // namespace printing

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::printing::mojom::PrintFrameContentParamsDataView> {
  using Data = ::printing::mojom::internal::PrintFrameContentParams_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::printing::mojom::OptionsFromDocumentParamsDataView> {
  using Data = ::printing::mojom::internal::OptionsFromDocumentParams_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::printing::mojom::DidPrintContentParamsDataView> {
  using Data = ::printing::mojom::internal::DidPrintContentParams_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::printing::mojom::DidStartPreviewParamsDataView> {
  using Data = ::printing::mojom::internal::DidStartPreviewParams_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace printing {
namespace mojom {
// Interface base classes. They are used for type safety check.
class PrintRendererInterfaceBase {};

using PrintRendererPtrDataView =
    mojo::InterfacePtrDataView<PrintRendererInterfaceBase>;
using PrintRendererRequestDataView =
    mojo::InterfaceRequestDataView<PrintRendererInterfaceBase>;
using PrintRendererAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<PrintRendererInterfaceBase>;
using PrintRendererAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<PrintRendererInterfaceBase>;
class PrintPreviewUIInterfaceBase {};

using PrintPreviewUIPtrDataView =
    mojo::InterfacePtrDataView<PrintPreviewUIInterfaceBase>;
using PrintPreviewUIRequestDataView =
    mojo::InterfaceRequestDataView<PrintPreviewUIInterfaceBase>;
using PrintPreviewUIAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<PrintPreviewUIInterfaceBase>;
using PrintPreviewUIAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<PrintPreviewUIInterfaceBase>;
class PrintRenderFrameInterfaceBase {};

using PrintRenderFramePtrDataView =
    mojo::InterfacePtrDataView<PrintRenderFrameInterfaceBase>;
using PrintRenderFrameRequestDataView =
    mojo::InterfaceRequestDataView<PrintRenderFrameInterfaceBase>;
using PrintRenderFrameAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<PrintRenderFrameInterfaceBase>;
using PrintRenderFrameAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<PrintRenderFrameInterfaceBase>;
class PrintFrameContentParamsDataView {
 public:
  PrintFrameContentParamsDataView() {}

  PrintFrameContentParamsDataView(
      internal::PrintFrameContentParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetPrintableAreaDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPrintableArea(UserType* output) {
    auto* pointer = data_->printable_area.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, context_);
  }
  int32_t document_cookie() const {
    return data_->document_cookie;
  }
 private:
  internal::PrintFrameContentParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class OptionsFromDocumentParamsDataView {
 public:
  OptionsFromDocumentParamsDataView() {}

  OptionsFromDocumentParamsDataView(
      internal::OptionsFromDocumentParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool is_scaling_disabled() const {
    return data_->is_scaling_disabled;
  }
  int32_t copies() const {
    return data_->copies;
  }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDuplex(UserType* output) const {
    auto data_value = data_->duplex;
    return mojo::internal::Deserialize<::printing::mojom::DuplexMode>(
        data_value, output);
  }

  ::printing::mojom::DuplexMode duplex() const {
    return static_cast<::printing::mojom::DuplexMode>(data_->duplex);
  }
 private:
  internal::OptionsFromDocumentParams_Data* data_ = nullptr;
};

class DidPrintContentParamsDataView {
 public:
  DidPrintContentParamsDataView() {}

  DidPrintContentParamsDataView(
      internal::DidPrintContentParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetMetafileDataRegionDataView(
      ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadMetafileDataRegion(UserType* output) {
    auto* pointer = data_->metafile_data_region.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView>(
        pointer, output, context_);
  }
  inline void GetSubframeContentInfoDataView(
      mojo::MapDataView<uint32_t, int32_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadSubframeContentInfo(UserType* output) {
    auto* pointer = data_->subframe_content_info.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<uint32_t, int32_t>>(
        pointer, output, context_);
  }
 private:
  internal::DidPrintContentParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class DidStartPreviewParamsDataView {
 public:
  DidStartPreviewParamsDataView() {}

  DidStartPreviewParamsDataView(
      internal::DidStartPreviewParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  int32_t page_count() const {
    return data_->page_count;
  }
  inline void GetPagesToRenderDataView(
      mojo::ArrayDataView<int32_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPagesToRender(UserType* output) {
    auto* pointer = data_->pages_to_render.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<int32_t>>(
        pointer, output, context_);
  }
  int32_t pages_per_sheet() const {
    return data_->pages_per_sheet;
  }
  inline void GetPageSizeDataView(
      ::gfx::mojom::SizeDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadPageSize(UserType* output) {
    auto* pointer = data_->page_size.Get();
    return mojo::internal::Deserialize<::gfx::mojom::SizeDataView>(
        pointer, output, context_);
  }
  int32_t fit_to_page_scaling() const {
    return data_->fit_to_page_scaling;
  }
 private:
  internal::DidStartPreviewParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};



}  // namespace mojom
}  // namespace printing

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::printing::mojom::PrintFrameContentParamsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::printing::mojom::PrintFrameContentParamsDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::printing::mojom::internal::PrintFrameContentParams_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::printable_area(input)) in_printable_area = Traits::printable_area(input);
    typename decltype((*output)->printable_area)::BaseType::BufferWriter
        printable_area_writer;
    mojo::internal::Serialize<::gfx::mojom::RectDataView>(
        in_printable_area, buffer, &printable_area_writer, context);
    (*output)->printable_area.Set(
        printable_area_writer.is_null() ? nullptr : printable_area_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->printable_area.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null printable_area in PrintFrameContentParams struct");
    (*output)->document_cookie = Traits::document_cookie(input);
  }

  static bool Deserialize(::printing::mojom::internal::PrintFrameContentParams_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::printing::mojom::PrintFrameContentParamsDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::printing::mojom::OptionsFromDocumentParamsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::printing::mojom::OptionsFromDocumentParamsDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::printing::mojom::internal::OptionsFromDocumentParams_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->is_scaling_disabled = Traits::is_scaling_disabled(input);
    (*output)->copies = Traits::copies(input);
    mojo::internal::Serialize<::printing::mojom::DuplexMode>(
        Traits::duplex(input), &(*output)->duplex);
  }

  static bool Deserialize(::printing::mojom::internal::OptionsFromDocumentParams_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::printing::mojom::OptionsFromDocumentParamsDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::printing::mojom::DidPrintContentParamsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::printing::mojom::DidPrintContentParamsDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::printing::mojom::internal::DidPrintContentParams_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    decltype(Traits::metafile_data_region(input)) in_metafile_data_region = Traits::metafile_data_region(input);
    typename decltype((*output)->metafile_data_region)::BaseType::BufferWriter
        metafile_data_region_writer;
    mojo::internal::Serialize<::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView>(
        in_metafile_data_region, buffer, &metafile_data_region_writer, context);
    (*output)->metafile_data_region.Set(
        metafile_data_region_writer.is_null() ? nullptr : metafile_data_region_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->metafile_data_region.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null metafile_data_region in DidPrintContentParams struct");
    decltype(Traits::subframe_content_info(input)) in_subframe_content_info = Traits::subframe_content_info(input);
    typename decltype((*output)->subframe_content_info)::BaseType::BufferWriter
        subframe_content_info_writer;
    const mojo::internal::ContainerValidateParams subframe_content_info_validate_params(
        new mojo::internal::ContainerValidateParams(0, false, nullptr), new mojo::internal::ContainerValidateParams(0, false, nullptr));
    mojo::internal::Serialize<mojo::MapDataView<uint32_t, int32_t>>(
        in_subframe_content_info, buffer, &subframe_content_info_writer, &subframe_content_info_validate_params,
        context);
    (*output)->subframe_content_info.Set(
        subframe_content_info_writer.is_null() ? nullptr : subframe_content_info_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->subframe_content_info.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null subframe_content_info in DidPrintContentParams struct");
  }

  static bool Deserialize(::printing::mojom::internal::DidPrintContentParams_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::printing::mojom::DidPrintContentParamsDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::printing::mojom::DidStartPreviewParamsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::printing::mojom::DidStartPreviewParamsDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        Buffer* buffer,
                        ::printing::mojom::internal::DidStartPreviewParams_Data::BufferWriter* output,
                        SerializationContext* context) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    (*output).Allocate(buffer);
    (*output)->page_count = Traits::page_count(input);
    decltype(Traits::pages_to_render(input)) in_pages_to_render = Traits::pages_to_render(input);
    typename decltype((*output)->pages_to_render)::BaseType::BufferWriter
        pages_to_render_writer;
    const mojo::internal::ContainerValidateParams pages_to_render_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<int32_t>>(
        in_pages_to_render, buffer, &pages_to_render_writer, &pages_to_render_validate_params,
        context);
    (*output)->pages_to_render.Set(
        pages_to_render_writer.is_null() ? nullptr : pages_to_render_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->pages_to_render.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null pages_to_render in DidStartPreviewParams struct");
    (*output)->pages_per_sheet = Traits::pages_per_sheet(input);
    decltype(Traits::page_size(input)) in_page_size = Traits::page_size(input);
    typename decltype((*output)->page_size)::BaseType::BufferWriter
        page_size_writer;
    mojo::internal::Serialize<::gfx::mojom::SizeDataView>(
        in_page_size, buffer, &page_size_writer, context);
    (*output)->page_size.Set(
        page_size_writer.is_null() ? nullptr : page_size_writer.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        (*output)->page_size.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null page_size in DidStartPreviewParams struct");
    (*output)->fit_to_page_scaling = Traits::fit_to_page_scaling(input);
  }

  static bool Deserialize(::printing::mojom::internal::DidStartPreviewParams_Data* input,
                          UserType* output,
                          SerializationContext* context) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::printing::mojom::DidStartPreviewParamsDataView data_view(input, context);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace printing {
namespace mojom {

inline void PrintFrameContentParamsDataView::GetPrintableAreaDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->printable_area.Get();
  *output = ::gfx::mojom::RectDataView(pointer, context_);
}




inline void DidPrintContentParamsDataView::GetMetafileDataRegionDataView(
    ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView* output) {
  auto pointer = data_->metafile_data_region.Get();
  *output = ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView(pointer, context_);
}
inline void DidPrintContentParamsDataView::GetSubframeContentInfoDataView(
    mojo::MapDataView<uint32_t, int32_t>* output) {
  auto pointer = data_->subframe_content_info.Get();
  *output = mojo::MapDataView<uint32_t, int32_t>(pointer, context_);
}


inline void DidStartPreviewParamsDataView::GetPagesToRenderDataView(
    mojo::ArrayDataView<int32_t>* output) {
  auto pointer = data_->pages_to_render.Get();
  *output = mojo::ArrayDataView<int32_t>(pointer, context_);
}
inline void DidStartPreviewParamsDataView::GetPageSizeDataView(
    ::gfx::mojom::SizeDataView* output) {
  auto pointer = data_->page_size.Get();
  *output = ::gfx::mojom::SizeDataView(pointer, context_);
}



}  // namespace mojom
}  // namespace printing

#endif  // COMPONENTS_PRINTING_COMMON_PRINT_MOJOM_SHARED_H_
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/enterprise/common/proto/connectors.proto

#include "components/enterprise/common/proto/connectors.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContentAnalysisResponse_Result_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContentAnalysisResponse_Result_TriggeredRule_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContentMetaData_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_components_2fsafe_5fbrowsing_2fcore_2fproto_2fcsd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_ClientDownloadRequest_components_2fsafe_5fbrowsing_2fcore_2fproto_2fcsd_2eproto;
namespace enterprise_connectors {
class ContentMetaDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContentMetaData> _instance;
} _ContentMetaData_default_instance_;
class ContentAnalysisRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContentAnalysisRequest> _instance;
} _ContentAnalysisRequest_default_instance_;
class ContentAnalysisResponse_Result_TriggeredRuleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContentAnalysisResponse_Result_TriggeredRule> _instance;
} _ContentAnalysisResponse_Result_TriggeredRule_default_instance_;
class ContentAnalysisResponse_ResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContentAnalysisResponse_Result> _instance;
} _ContentAnalysisResponse_Result_default_instance_;
class ContentAnalysisResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContentAnalysisResponse> _instance;
} _ContentAnalysisResponse_default_instance_;
}  // namespace enterprise_connectors
static void InitDefaultsscc_info_ContentAnalysisRequest_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_connectors::_ContentAnalysisRequest_default_instance_;
    new (ptr) ::enterprise_connectors::ContentAnalysisRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_connectors::ContentAnalysisRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContentAnalysisRequest_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ContentAnalysisRequest_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto}, {
      &scc_info_ContentMetaData_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto.base,}};

static void InitDefaultsscc_info_ContentAnalysisResponse_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_connectors::_ContentAnalysisResponse_default_instance_;
    new (ptr) ::enterprise_connectors::ContentAnalysisResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_connectors::ContentAnalysisResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContentAnalysisResponse_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ContentAnalysisResponse_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto}, {
      &scc_info_ContentAnalysisResponse_Result_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto.base,}};

static void InitDefaultsscc_info_ContentAnalysisResponse_Result_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_connectors::_ContentAnalysisResponse_Result_default_instance_;
    new (ptr) ::enterprise_connectors::ContentAnalysisResponse_Result();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_connectors::ContentAnalysisResponse_Result::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContentAnalysisResponse_Result_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ContentAnalysisResponse_Result_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto}, {
      &scc_info_ContentAnalysisResponse_Result_TriggeredRule_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto.base,}};

static void InitDefaultsscc_info_ContentAnalysisResponse_Result_TriggeredRule_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_connectors::_ContentAnalysisResponse_Result_TriggeredRule_default_instance_;
    new (ptr) ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContentAnalysisResponse_Result_TriggeredRule_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ContentAnalysisResponse_Result_TriggeredRule_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto}, {}};

static void InitDefaultsscc_info_ContentMetaData_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::enterprise_connectors::_ContentMetaData_default_instance_;
    new (ptr) ::enterprise_connectors::ContentMetaData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::enterprise_connectors::ContentMetaData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContentMetaData_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ContentMetaData_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto}, {
      &scc_info_ClientDownloadRequest_components_2fsafe_5fbrowsing_2fcore_2fproto_2fcsd_2eproto.base,}};

namespace enterprise_connectors {
bool ContentAnalysisResponse_Result_TriggeredRule_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ContentAnalysisResponse_Result_TriggeredRule_Action_strings[4] = {};

static const char ContentAnalysisResponse_Result_TriggeredRule_Action_names[] =
  "ACTION_UNSPECIFIED"
  "BLOCK"
  "REPORT_ONLY"
  "WARN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ContentAnalysisResponse_Result_TriggeredRule_Action_entries[] = {
  { {ContentAnalysisResponse_Result_TriggeredRule_Action_names + 0, 18}, 0 },
  { {ContentAnalysisResponse_Result_TriggeredRule_Action_names + 18, 5}, 3 },
  { {ContentAnalysisResponse_Result_TriggeredRule_Action_names + 23, 11}, 1 },
  { {ContentAnalysisResponse_Result_TriggeredRule_Action_names + 34, 4}, 2 },
};

static const int ContentAnalysisResponse_Result_TriggeredRule_Action_entries_by_number[] = {
  0, // 0 -> ACTION_UNSPECIFIED
  2, // 1 -> REPORT_ONLY
  3, // 2 -> WARN
  1, // 3 -> BLOCK
};

const std::string& ContentAnalysisResponse_Result_TriggeredRule_Action_Name(
    ContentAnalysisResponse_Result_TriggeredRule_Action value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ContentAnalysisResponse_Result_TriggeredRule_Action_entries,
          ContentAnalysisResponse_Result_TriggeredRule_Action_entries_by_number,
          4, ContentAnalysisResponse_Result_TriggeredRule_Action_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ContentAnalysisResponse_Result_TriggeredRule_Action_entries,
      ContentAnalysisResponse_Result_TriggeredRule_Action_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ContentAnalysisResponse_Result_TriggeredRule_Action_strings[idx].get();
}
bool ContentAnalysisResponse_Result_TriggeredRule_Action_Parse(
    const std::string& name, ContentAnalysisResponse_Result_TriggeredRule_Action* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ContentAnalysisResponse_Result_TriggeredRule_Action_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<ContentAnalysisResponse_Result_TriggeredRule_Action>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ContentAnalysisResponse_Result_TriggeredRule_Action ContentAnalysisResponse_Result_TriggeredRule::ACTION_UNSPECIFIED;
constexpr ContentAnalysisResponse_Result_TriggeredRule_Action ContentAnalysisResponse_Result_TriggeredRule::REPORT_ONLY;
constexpr ContentAnalysisResponse_Result_TriggeredRule_Action ContentAnalysisResponse_Result_TriggeredRule::WARN;
constexpr ContentAnalysisResponse_Result_TriggeredRule_Action ContentAnalysisResponse_Result_TriggeredRule::BLOCK;
constexpr ContentAnalysisResponse_Result_TriggeredRule_Action ContentAnalysisResponse_Result_TriggeredRule::Action_MIN;
constexpr ContentAnalysisResponse_Result_TriggeredRule_Action ContentAnalysisResponse_Result_TriggeredRule::Action_MAX;
constexpr int ContentAnalysisResponse_Result_TriggeredRule::Action_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool ContentAnalysisResponse_Result_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ContentAnalysisResponse_Result_Status_strings[3] = {};

static const char ContentAnalysisResponse_Result_Status_names[] =
  "FAILURE"
  "STATUS_UNKNOWN"
  "SUCCESS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ContentAnalysisResponse_Result_Status_entries[] = {
  { {ContentAnalysisResponse_Result_Status_names + 0, 7}, 2 },
  { {ContentAnalysisResponse_Result_Status_names + 7, 14}, 0 },
  { {ContentAnalysisResponse_Result_Status_names + 21, 7}, 1 },
};

static const int ContentAnalysisResponse_Result_Status_entries_by_number[] = {
  1, // 0 -> STATUS_UNKNOWN
  2, // 1 -> SUCCESS
  0, // 2 -> FAILURE
};

const std::string& ContentAnalysisResponse_Result_Status_Name(
    ContentAnalysisResponse_Result_Status value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ContentAnalysisResponse_Result_Status_entries,
          ContentAnalysisResponse_Result_Status_entries_by_number,
          3, ContentAnalysisResponse_Result_Status_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ContentAnalysisResponse_Result_Status_entries,
      ContentAnalysisResponse_Result_Status_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ContentAnalysisResponse_Result_Status_strings[idx].get();
}
bool ContentAnalysisResponse_Result_Status_Parse(
    const std::string& name, ContentAnalysisResponse_Result_Status* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ContentAnalysisResponse_Result_Status_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ContentAnalysisResponse_Result_Status>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ContentAnalysisResponse_Result_Status ContentAnalysisResponse_Result::STATUS_UNKNOWN;
constexpr ContentAnalysisResponse_Result_Status ContentAnalysisResponse_Result::SUCCESS;
constexpr ContentAnalysisResponse_Result_Status ContentAnalysisResponse_Result::FAILURE;
constexpr ContentAnalysisResponse_Result_Status ContentAnalysisResponse_Result::Status_MIN;
constexpr ContentAnalysisResponse_Result_Status ContentAnalysisResponse_Result::Status_MAX;
constexpr int ContentAnalysisResponse_Result::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool AnalysisConnector_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AnalysisConnector_strings[4] = {};

static const char AnalysisConnector_names[] =
  "ANALYSIS_CONNECTOR_UNSPECIFIED"
  "BULK_DATA_ENTRY"
  "FILE_ATTACHED"
  "FILE_DOWNLOADED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AnalysisConnector_entries[] = {
  { {AnalysisConnector_names + 0, 30}, 0 },
  { {AnalysisConnector_names + 30, 15}, 3 },
  { {AnalysisConnector_names + 45, 13}, 2 },
  { {AnalysisConnector_names + 58, 15}, 1 },
};

static const int AnalysisConnector_entries_by_number[] = {
  0, // 0 -> ANALYSIS_CONNECTOR_UNSPECIFIED
  3, // 1 -> FILE_DOWNLOADED
  2, // 2 -> FILE_ATTACHED
  1, // 3 -> BULK_DATA_ENTRY
};

const std::string& AnalysisConnector_Name(
    AnalysisConnector value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AnalysisConnector_entries,
          AnalysisConnector_entries_by_number,
          4, AnalysisConnector_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AnalysisConnector_entries,
      AnalysisConnector_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AnalysisConnector_strings[idx].get();
}
bool AnalysisConnector_Parse(
    const std::string& name, AnalysisConnector* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AnalysisConnector_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<AnalysisConnector>(int_value);
  }
  return success;
}

// ===================================================================

void ContentMetaData::InitAsDefaultInstance() {
  ::enterprise_connectors::_ContentMetaData_default_instance_._instance.get_mutable()->csd_ = const_cast< ::safe_browsing::ClientDownloadRequest*>(
      ::safe_browsing::ClientDownloadRequest::internal_default_instance());
}
class ContentMetaData::_Internal {
 public:
  using HasBits = decltype(std::declval<ContentMetaData>()._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_digest(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::safe_browsing::ClientDownloadRequest& csd(const ContentMetaData* msg);
  static void set_has_csd(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::safe_browsing::ClientDownloadRequest&
ContentMetaData::_Internal::csd(const ContentMetaData* msg) {
  return *msg->csd_;
}
void ContentMetaData::clear_csd() {
  if (csd_ != nullptr) csd_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
ContentMetaData::ContentMetaData()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_connectors.ContentMetaData)
}
ContentMetaData::ContentMetaData(const ContentMetaData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_digest()) {
    digest_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.digest_);
  }
  if (from.has_csd()) {
    csd_ = new ::safe_browsing::ClientDownloadRequest(*from.csd_);
  } else {
    csd_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_connectors.ContentMetaData)
}

void ContentMetaData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContentMetaData_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto.base);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  digest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  csd_ = nullptr;
}

ContentMetaData::~ContentMetaData() {
  // @@protoc_insertion_point(destructor:enterprise_connectors.ContentMetaData)
  SharedDtor();
}

void ContentMetaData::SharedDtor() {
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  digest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete csd_;
}

void ContentMetaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContentMetaData& ContentMetaData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContentMetaData_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto.base);
  return *internal_default_instance();
}


void ContentMetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_connectors.ContentMetaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      filename_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      digest_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(csd_ != nullptr);
      csd_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ContentMetaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_url(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string filename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_filename(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string digest = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_digest(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .safe_browsing.ClientDownloadRequest csd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_csd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ContentMetaData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_connectors.ContentMetaData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string digest = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_digest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .safe_browsing.ClientDownloadRequest csd = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_csd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_connectors.ContentMetaData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_connectors.ContentMetaData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ContentMetaData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_connectors.ContentMetaData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->url(), output);
  }

  // optional string filename = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // optional string digest = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->digest(), output);
  }

  // optional .safe_browsing.ClientDownloadRequest csd = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::csd(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_connectors.ContentMetaData)
}

size_t ContentMetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_connectors.ContentMetaData)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string filename = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional string digest = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->digest());
    }

    // optional .safe_browsing.ClientDownloadRequest csd = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *csd_);
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContentMetaData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ContentMetaData*>(
      &from));
}

void ContentMetaData::MergeFrom(const ContentMetaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_connectors.ContentMetaData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      digest_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.digest_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_csd()->::safe_browsing::ClientDownloadRequest::MergeFrom(from.csd());
    }
  }
}

void ContentMetaData::CopyFrom(const ContentMetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_connectors.ContentMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentMetaData::IsInitialized() const {
  if (has_csd()) {
    if (!this->csd_->IsInitialized()) return false;
  }
  return true;
}

void ContentMetaData::InternalSwap(ContentMetaData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  digest_.Swap(&other->digest_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(csd_, other->csd_);
}

std::string ContentMetaData::GetTypeName() const {
  return "enterprise_connectors.ContentMetaData";
}


// ===================================================================

void ContentAnalysisRequest::InitAsDefaultInstance() {
  ::enterprise_connectors::_ContentAnalysisRequest_default_instance_._instance.get_mutable()->request_data_ = const_cast< ::enterprise_connectors::ContentMetaData*>(
      ::enterprise_connectors::ContentMetaData::internal_default_instance());
}
class ContentAnalysisRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ContentAnalysisRequest>()._has_bits_);
  static void set_has_device_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fcm_notification_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_analysis_connector(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::enterprise_connectors::ContentMetaData& request_data(const ContentAnalysisRequest* msg);
  static void set_has_request_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_request_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::enterprise_connectors::ContentMetaData&
ContentAnalysisRequest::_Internal::request_data(const ContentAnalysisRequest* msg) {
  return *msg->request_data_;
}
ContentAnalysisRequest::ContentAnalysisRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_connectors.ContentAnalysisRequest)
}
ContentAnalysisRequest::ContentAnalysisRequest(const ContentAnalysisRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_token()) {
    device_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_token_);
  }
  fcm_notification_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_fcm_notification_token()) {
    fcm_notification_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fcm_notification_token_);
  }
  request_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_token()) {
    request_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_token_);
  }
  if (from.has_request_data()) {
    request_data_ = new ::enterprise_connectors::ContentMetaData(*from.request_data_);
  } else {
    request_data_ = nullptr;
  }
  analysis_connector_ = from.analysis_connector_;
  // @@protoc_insertion_point(copy_constructor:enterprise_connectors.ContentAnalysisRequest)
}

void ContentAnalysisRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContentAnalysisRequest_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto.base);
  device_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fcm_notification_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&request_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&analysis_connector_) -
      reinterpret_cast<char*>(&request_data_)) + sizeof(analysis_connector_));
}

ContentAnalysisRequest::~ContentAnalysisRequest() {
  // @@protoc_insertion_point(destructor:enterprise_connectors.ContentAnalysisRequest)
  SharedDtor();
}

void ContentAnalysisRequest::SharedDtor() {
  device_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fcm_notification_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete request_data_;
}

void ContentAnalysisRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContentAnalysisRequest& ContentAnalysisRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContentAnalysisRequest_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto.base);
  return *internal_default_instance();
}


void ContentAnalysisRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_connectors.ContentAnalysisRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      device_token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      fcm_notification_token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      request_token_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(request_data_ != nullptr);
      request_data_->Clear();
    }
  }
  analysis_connector_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ContentAnalysisRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string device_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_device_token(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string fcm_notification_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_fcm_notification_token(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string request_token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_request_token(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_connectors.AnalysisConnector analysis_connector = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_connectors::AnalysisConnector_IsValid(val))) {
            set_analysis_connector(static_cast<::enterprise_connectors::AnalysisConnector>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .enterprise_connectors.ContentMetaData request_data = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_request_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string tags = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_tags(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 90);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ContentAnalysisRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_connectors.ContentAnalysisRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_token = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_device_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string fcm_notification_token = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_fcm_notification_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string request_token = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_request_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_connectors.AnalysisConnector analysis_connector = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_connectors::AnalysisConnector_IsValid(value)) {
            set_analysis_connector(static_cast< ::enterprise_connectors::AnalysisConnector >(value));
          } else {
            unknown_fields_stream.WriteVarint32(72u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_connectors.ContentMetaData request_data = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_request_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_connectors.ContentAnalysisRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_connectors.ContentAnalysisRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ContentAnalysisRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_connectors.ContentAnalysisRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string device_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device_token(), output);
  }

  // optional string fcm_notification_token = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fcm_notification_token(), output);
  }

  // optional string request_token = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->request_token(), output);
  }

  // optional .enterprise_connectors.AnalysisConnector analysis_connector = 9;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      9, this->analysis_connector(), output);
  }

  // optional .enterprise_connectors.ContentMetaData request_data = 10;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      10, _Internal::request_data(this), output);
  }

  // repeated string tags = 11;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      11, this->tags(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_connectors.ContentAnalysisRequest)
}

size_t ContentAnalysisRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_connectors.ContentAnalysisRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string device_token = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->device_token());
    }

    // optional string fcm_notification_token = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->fcm_notification_token());
    }

    // optional string request_token = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->request_token());
    }

    // optional .enterprise_connectors.ContentMetaData request_data = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_data_);
    }

    // optional .enterprise_connectors.AnalysisConnector analysis_connector = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->analysis_connector());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContentAnalysisRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ContentAnalysisRequest*>(
      &from));
}

void ContentAnalysisRequest::MergeFrom(const ContentAnalysisRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_connectors.ContentAnalysisRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      device_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      fcm_notification_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fcm_notification_token_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      request_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_token_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_request_data()->::enterprise_connectors::ContentMetaData::MergeFrom(from.request_data());
    }
    if (cached_has_bits & 0x00000010u) {
      analysis_connector_ = from.analysis_connector_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContentAnalysisRequest::CopyFrom(const ContentAnalysisRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_connectors.ContentAnalysisRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentAnalysisRequest::IsInitialized() const {
  if (has_request_data()) {
    if (!this->request_data_->IsInitialized()) return false;
  }
  return true;
}

void ContentAnalysisRequest::InternalSwap(ContentAnalysisRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tags_.InternalSwap(CastToBase(&other->tags_));
  device_token_.Swap(&other->device_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fcm_notification_token_.Swap(&other->fcm_notification_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_token_.Swap(&other->request_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_data_, other->request_data_);
  swap(analysis_connector_, other->analysis_connector_);
}

std::string ContentAnalysisRequest::GetTypeName() const {
  return "enterprise_connectors.ContentAnalysisRequest";
}


// ===================================================================

void ContentAnalysisResponse_Result_TriggeredRule::InitAsDefaultInstance() {
}
class ContentAnalysisResponse_Result_TriggeredRule::_Internal {
 public:
  using HasBits = decltype(std::declval<ContentAnalysisResponse_Result_TriggeredRule>()._has_bits_);
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rule_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rule_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ContentAnalysisResponse_Result_TriggeredRule::ContentAnalysisResponse_Result_TriggeredRule()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule)
}
ContentAnalysisResponse_Result_TriggeredRule::ContentAnalysisResponse_Result_TriggeredRule(const ContentAnalysisResponse_Result_TriggeredRule& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rule_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_rule_name()) {
    rule_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rule_name_);
  }
  rule_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_rule_id()) {
    rule_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rule_id_);
  }
  action_ = from.action_;
  // @@protoc_insertion_point(copy_constructor:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule)
}

void ContentAnalysisResponse_Result_TriggeredRule::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContentAnalysisResponse_Result_TriggeredRule_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto.base);
  rule_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rule_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_ = 0;
}

ContentAnalysisResponse_Result_TriggeredRule::~ContentAnalysisResponse_Result_TriggeredRule() {
  // @@protoc_insertion_point(destructor:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule)
  SharedDtor();
}

void ContentAnalysisResponse_Result_TriggeredRule::SharedDtor() {
  rule_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rule_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContentAnalysisResponse_Result_TriggeredRule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContentAnalysisResponse_Result_TriggeredRule& ContentAnalysisResponse_Result_TriggeredRule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContentAnalysisResponse_Result_TriggeredRule_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto.base);
  return *internal_default_instance();
}


void ContentAnalysisResponse_Result_TriggeredRule::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      rule_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      rule_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  action_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ContentAnalysisResponse_Result_TriggeredRule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.Action action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule_Action_IsValid(val))) {
            set_action(static_cast<::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule_Action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string rule_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_rule_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string rule_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_rule_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ContentAnalysisResponse_Result_TriggeredRule::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.Action action = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule_Action_IsValid(value)) {
            set_action(static_cast< ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule_Action >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string rule_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_rule_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string rule_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_rule_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ContentAnalysisResponse_Result_TriggeredRule::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.Action action = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // optional string rule_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rule_name(), output);
  }

  // optional string rule_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->rule_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule)
}

size_t ContentAnalysisResponse_Result_TriggeredRule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string rule_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->rule_name());
    }

    // optional string rule_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->rule_id());
    }

    // optional .enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.Action action = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->action());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContentAnalysisResponse_Result_TriggeredRule::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ContentAnalysisResponse_Result_TriggeredRule*>(
      &from));
}

void ContentAnalysisResponse_Result_TriggeredRule::MergeFrom(const ContentAnalysisResponse_Result_TriggeredRule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      rule_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rule_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      rule_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rule_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContentAnalysisResponse_Result_TriggeredRule::CopyFrom(const ContentAnalysisResponse_Result_TriggeredRule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentAnalysisResponse_Result_TriggeredRule::IsInitialized() const {
  return true;
}

void ContentAnalysisResponse_Result_TriggeredRule::InternalSwap(ContentAnalysisResponse_Result_TriggeredRule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rule_name_.Swap(&other->rule_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rule_id_.Swap(&other->rule_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(action_, other->action_);
}

std::string ContentAnalysisResponse_Result_TriggeredRule::GetTypeName() const {
  return "enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule";
}


// ===================================================================

void ContentAnalysisResponse_Result::InitAsDefaultInstance() {
}
class ContentAnalysisResponse_Result::_Internal {
 public:
  using HasBits = decltype(std::declval<ContentAnalysisResponse_Result>()._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ContentAnalysisResponse_Result::ContentAnalysisResponse_Result()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_connectors.ContentAnalysisResponse.Result)
}
ContentAnalysisResponse_Result::ContentAnalysisResponse_Result(const ContentAnalysisResponse_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      triggered_rules_(from.triggered_rules_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:enterprise_connectors.ContentAnalysisResponse.Result)
}

void ContentAnalysisResponse_Result::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContentAnalysisResponse_Result_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto.base);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

ContentAnalysisResponse_Result::~ContentAnalysisResponse_Result() {
  // @@protoc_insertion_point(destructor:enterprise_connectors.ContentAnalysisResponse.Result)
  SharedDtor();
}

void ContentAnalysisResponse_Result::SharedDtor() {
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContentAnalysisResponse_Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContentAnalysisResponse_Result& ContentAnalysisResponse_Result::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContentAnalysisResponse_Result_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto.base);
  return *internal_default_instance();
}


void ContentAnalysisResponse_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_connectors.ContentAnalysisResponse.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  triggered_rules_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tag_.ClearNonDefaultToEmptyNoArena();
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ContentAnalysisResponse_Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_tag(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .enterprise_connectors.ContentAnalysisResponse.Result.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::enterprise_connectors::ContentAnalysisResponse_Result_Status_IsValid(val))) {
            set_status(static_cast<::enterprise_connectors::ContentAnalysisResponse_Result_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule triggered_rules = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_triggered_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ContentAnalysisResponse_Result::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_connectors.ContentAnalysisResponse.Result)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tag = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .enterprise_connectors.ContentAnalysisResponse.Result.Status status = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::enterprise_connectors::ContentAnalysisResponse_Result_Status_IsValid(value)) {
            set_status(static_cast< ::enterprise_connectors::ContentAnalysisResponse_Result_Status >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule triggered_rules = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_triggered_rules()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_connectors.ContentAnalysisResponse.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_connectors.ContentAnalysisResponse.Result)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ContentAnalysisResponse_Result::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_connectors.ContentAnalysisResponse.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string tag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tag(), output);
  }

  // optional .enterprise_connectors.ContentAnalysisResponse.Result.Status status = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // repeated .enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule triggered_rules = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->triggered_rules_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->triggered_rules(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_connectors.ContentAnalysisResponse.Result)
}

size_t ContentAnalysisResponse_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_connectors.ContentAnalysisResponse.Result)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule triggered_rules = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->triggered_rules_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->triggered_rules(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string tag = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional .enterprise_connectors.ContentAnalysisResponse.Result.Status status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContentAnalysisResponse_Result::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ContentAnalysisResponse_Result*>(
      &from));
}

void ContentAnalysisResponse_Result::MergeFrom(const ContentAnalysisResponse_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_connectors.ContentAnalysisResponse.Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  triggered_rules_.MergeFrom(from.triggered_rules_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContentAnalysisResponse_Result::CopyFrom(const ContentAnalysisResponse_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_connectors.ContentAnalysisResponse.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentAnalysisResponse_Result::IsInitialized() const {
  return true;
}

void ContentAnalysisResponse_Result::InternalSwap(ContentAnalysisResponse_Result* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&triggered_rules_)->InternalSwap(CastToBase(&other->triggered_rules_));
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

std::string ContentAnalysisResponse_Result::GetTypeName() const {
  return "enterprise_connectors.ContentAnalysisResponse.Result";
}


// ===================================================================

void ContentAnalysisResponse::InitAsDefaultInstance() {
}
class ContentAnalysisResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ContentAnalysisResponse>()._has_bits_);
  static void set_has_request_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ContentAnalysisResponse::ContentAnalysisResponse()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:enterprise_connectors.ContentAnalysisResponse)
}
ContentAnalysisResponse::ContentAnalysisResponse(const ContentAnalysisResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      results_(from.results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_request_token()) {
    request_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_token_);
  }
  // @@protoc_insertion_point(copy_constructor:enterprise_connectors.ContentAnalysisResponse)
}

void ContentAnalysisResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContentAnalysisResponse_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto.base);
  request_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ContentAnalysisResponse::~ContentAnalysisResponse() {
  // @@protoc_insertion_point(destructor:enterprise_connectors.ContentAnalysisResponse)
  SharedDtor();
}

void ContentAnalysisResponse::SharedDtor() {
  request_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContentAnalysisResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContentAnalysisResponse& ContentAnalysisResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContentAnalysisResponse_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto.base);
  return *internal_default_instance();
}


void ContentAnalysisResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_connectors.ContentAnalysisResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    request_token_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ContentAnalysisResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string request_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_request_token(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .enterprise_connectors.ContentAnalysisResponse.Result results = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ContentAnalysisResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:enterprise_connectors.ContentAnalysisResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string request_token = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_request_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .enterprise_connectors.ContentAnalysisResponse.Result results = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:enterprise_connectors.ContentAnalysisResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:enterprise_connectors.ContentAnalysisResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ContentAnalysisResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:enterprise_connectors.ContentAnalysisResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string request_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_token(), output);
  }

  // repeated .enterprise_connectors.ContentAnalysisResponse.Result results = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4,
      this->results(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:enterprise_connectors.ContentAnalysisResponse)
}

size_t ContentAnalysisResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_connectors.ContentAnalysisResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .enterprise_connectors.ContentAnalysisResponse.Result results = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->results(static_cast<int>(i)));
    }
  }

  // optional string request_token = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->request_token());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContentAnalysisResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ContentAnalysisResponse*>(
      &from));
}

void ContentAnalysisResponse::MergeFrom(const ContentAnalysisResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_connectors.ContentAnalysisResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.has_request_token()) {
    _has_bits_[0] |= 0x00000001u;
    request_token_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_token_);
  }
}

void ContentAnalysisResponse::CopyFrom(const ContentAnalysisResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_connectors.ContentAnalysisResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentAnalysisResponse::IsInitialized() const {
  return true;
}

void ContentAnalysisResponse::InternalSwap(ContentAnalysisResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&results_)->InternalSwap(CastToBase(&other->results_));
  request_token_.Swap(&other->request_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string ContentAnalysisResponse::GetTypeName() const {
  return "enterprise_connectors.ContentAnalysisResponse";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace enterprise_connectors
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::enterprise_connectors::ContentMetaData* Arena::CreateMaybeMessage< ::enterprise_connectors::ContentMetaData >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_connectors::ContentMetaData >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_connectors::ContentAnalysisRequest* Arena::CreateMaybeMessage< ::enterprise_connectors::ContentAnalysisRequest >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_connectors::ContentAnalysisRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule* Arena::CreateMaybeMessage< ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_connectors::ContentAnalysisResponse_Result* Arena::CreateMaybeMessage< ::enterprise_connectors::ContentAnalysisResponse_Result >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_connectors::ContentAnalysisResponse_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::enterprise_connectors::ContentAnalysisResponse* Arena::CreateMaybeMessage< ::enterprise_connectors::ContentAnalysisResponse >(Arena* arena) {
  return Arena::CreateInternal< ::enterprise_connectors::ContentAnalysisResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

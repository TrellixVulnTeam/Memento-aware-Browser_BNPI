// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/enterprise/common/proto/connectors.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "components/safe_browsing/core/proto/csd.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace enterprise_connectors {
class ContentAnalysisRequest;
class ContentAnalysisRequestDefaultTypeInternal;
extern ContentAnalysisRequestDefaultTypeInternal _ContentAnalysisRequest_default_instance_;
class ContentAnalysisResponse;
class ContentAnalysisResponseDefaultTypeInternal;
extern ContentAnalysisResponseDefaultTypeInternal _ContentAnalysisResponse_default_instance_;
class ContentAnalysisResponse_Result;
class ContentAnalysisResponse_ResultDefaultTypeInternal;
extern ContentAnalysisResponse_ResultDefaultTypeInternal _ContentAnalysisResponse_Result_default_instance_;
class ContentAnalysisResponse_Result_TriggeredRule;
class ContentAnalysisResponse_Result_TriggeredRuleDefaultTypeInternal;
extern ContentAnalysisResponse_Result_TriggeredRuleDefaultTypeInternal _ContentAnalysisResponse_Result_TriggeredRule_default_instance_;
class ContentMetaData;
class ContentMetaDataDefaultTypeInternal;
extern ContentMetaDataDefaultTypeInternal _ContentMetaData_default_instance_;
}  // namespace enterprise_connectors
PROTOBUF_NAMESPACE_OPEN
template<> ::enterprise_connectors::ContentAnalysisRequest* Arena::CreateMaybeMessage<::enterprise_connectors::ContentAnalysisRequest>(Arena*);
template<> ::enterprise_connectors::ContentAnalysisResponse* Arena::CreateMaybeMessage<::enterprise_connectors::ContentAnalysisResponse>(Arena*);
template<> ::enterprise_connectors::ContentAnalysisResponse_Result* Arena::CreateMaybeMessage<::enterprise_connectors::ContentAnalysisResponse_Result>(Arena*);
template<> ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule* Arena::CreateMaybeMessage<::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule>(Arena*);
template<> ::enterprise_connectors::ContentMetaData* Arena::CreateMaybeMessage<::enterprise_connectors::ContentMetaData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace enterprise_connectors {

enum ContentAnalysisResponse_Result_TriggeredRule_Action : int {
  ContentAnalysisResponse_Result_TriggeredRule_Action_ACTION_UNSPECIFIED = 0,
  ContentAnalysisResponse_Result_TriggeredRule_Action_REPORT_ONLY = 1,
  ContentAnalysisResponse_Result_TriggeredRule_Action_WARN = 2,
  ContentAnalysisResponse_Result_TriggeredRule_Action_BLOCK = 3
};
bool ContentAnalysisResponse_Result_TriggeredRule_Action_IsValid(int value);
constexpr ContentAnalysisResponse_Result_TriggeredRule_Action ContentAnalysisResponse_Result_TriggeredRule_Action_Action_MIN = ContentAnalysisResponse_Result_TriggeredRule_Action_ACTION_UNSPECIFIED;
constexpr ContentAnalysisResponse_Result_TriggeredRule_Action ContentAnalysisResponse_Result_TriggeredRule_Action_Action_MAX = ContentAnalysisResponse_Result_TriggeredRule_Action_BLOCK;
constexpr int ContentAnalysisResponse_Result_TriggeredRule_Action_Action_ARRAYSIZE = ContentAnalysisResponse_Result_TriggeredRule_Action_Action_MAX + 1;

const std::string& ContentAnalysisResponse_Result_TriggeredRule_Action_Name(ContentAnalysisResponse_Result_TriggeredRule_Action value);
template<typename T>
inline const std::string& ContentAnalysisResponse_Result_TriggeredRule_Action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ContentAnalysisResponse_Result_TriggeredRule_Action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ContentAnalysisResponse_Result_TriggeredRule_Action_Name.");
  return ContentAnalysisResponse_Result_TriggeredRule_Action_Name(static_cast<ContentAnalysisResponse_Result_TriggeredRule_Action>(enum_t_value));
}
bool ContentAnalysisResponse_Result_TriggeredRule_Action_Parse(
    const std::string& name, ContentAnalysisResponse_Result_TriggeredRule_Action* value);
enum ContentAnalysisResponse_Result_Status : int {
  ContentAnalysisResponse_Result_Status_STATUS_UNKNOWN = 0,
  ContentAnalysisResponse_Result_Status_SUCCESS = 1,
  ContentAnalysisResponse_Result_Status_FAILURE = 2
};
bool ContentAnalysisResponse_Result_Status_IsValid(int value);
constexpr ContentAnalysisResponse_Result_Status ContentAnalysisResponse_Result_Status_Status_MIN = ContentAnalysisResponse_Result_Status_STATUS_UNKNOWN;
constexpr ContentAnalysisResponse_Result_Status ContentAnalysisResponse_Result_Status_Status_MAX = ContentAnalysisResponse_Result_Status_FAILURE;
constexpr int ContentAnalysisResponse_Result_Status_Status_ARRAYSIZE = ContentAnalysisResponse_Result_Status_Status_MAX + 1;

const std::string& ContentAnalysisResponse_Result_Status_Name(ContentAnalysisResponse_Result_Status value);
template<typename T>
inline const std::string& ContentAnalysisResponse_Result_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ContentAnalysisResponse_Result_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ContentAnalysisResponse_Result_Status_Name.");
  return ContentAnalysisResponse_Result_Status_Name(static_cast<ContentAnalysisResponse_Result_Status>(enum_t_value));
}
bool ContentAnalysisResponse_Result_Status_Parse(
    const std::string& name, ContentAnalysisResponse_Result_Status* value);
enum AnalysisConnector : int {
  ANALYSIS_CONNECTOR_UNSPECIFIED = 0,
  FILE_DOWNLOADED = 1,
  FILE_ATTACHED = 2,
  BULK_DATA_ENTRY = 3
};
bool AnalysisConnector_IsValid(int value);
constexpr AnalysisConnector AnalysisConnector_MIN = ANALYSIS_CONNECTOR_UNSPECIFIED;
constexpr AnalysisConnector AnalysisConnector_MAX = BULK_DATA_ENTRY;
constexpr int AnalysisConnector_ARRAYSIZE = AnalysisConnector_MAX + 1;

const std::string& AnalysisConnector_Name(AnalysisConnector value);
template<typename T>
inline const std::string& AnalysisConnector_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AnalysisConnector>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AnalysisConnector_Name.");
  return AnalysisConnector_Name(static_cast<AnalysisConnector>(enum_t_value));
}
bool AnalysisConnector_Parse(
    const std::string& name, AnalysisConnector* value);
// ===================================================================

class ContentMetaData :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_connectors.ContentMetaData) */ {
 public:
  ContentMetaData();
  virtual ~ContentMetaData();

  ContentMetaData(const ContentMetaData& from);
  ContentMetaData(ContentMetaData&& from) noexcept
    : ContentMetaData() {
    *this = ::std::move(from);
  }

  inline ContentMetaData& operator=(const ContentMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentMetaData& operator=(ContentMetaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ContentMetaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContentMetaData* internal_default_instance() {
    return reinterpret_cast<const ContentMetaData*>(
               &_ContentMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ContentMetaData& a, ContentMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(ContentMetaData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContentMetaData* New() const final {
    return CreateMaybeMessage<ContentMetaData>(nullptr);
  }

  ContentMetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContentMetaData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ContentMetaData& from);
  void MergeFrom(const ContentMetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContentMetaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_connectors.ContentMetaData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kFilenameFieldNumber = 2,
    kDigestFieldNumber = 3,
    kCsdFieldNumber = 4,
  };
  // optional string url = 1;
  bool has_url() const;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // optional string filename = 2;
  bool has_filename() const;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);

  // optional string digest = 3;
  bool has_digest() const;
  void clear_digest();
  const std::string& digest() const;
  void set_digest(const std::string& value);
  void set_digest(std::string&& value);
  void set_digest(const char* value);
  void set_digest(const char* value, size_t size);
  std::string* mutable_digest();
  std::string* release_digest();
  void set_allocated_digest(std::string* digest);

  // optional .safe_browsing.ClientDownloadRequest csd = 4;
  bool has_csd() const;
  void clear_csd();
  const ::safe_browsing::ClientDownloadRequest& csd() const;
  ::safe_browsing::ClientDownloadRequest* release_csd();
  ::safe_browsing::ClientDownloadRequest* mutable_csd();
  void set_allocated_csd(::safe_browsing::ClientDownloadRequest* csd);

  // @@protoc_insertion_point(class_scope:enterprise_connectors.ContentMetaData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr digest_;
  ::safe_browsing::ClientDownloadRequest* csd_;
  friend struct ::TableStruct_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto;
};
// -------------------------------------------------------------------

class ContentAnalysisRequest :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_connectors.ContentAnalysisRequest) */ {
 public:
  ContentAnalysisRequest();
  virtual ~ContentAnalysisRequest();

  ContentAnalysisRequest(const ContentAnalysisRequest& from);
  ContentAnalysisRequest(ContentAnalysisRequest&& from) noexcept
    : ContentAnalysisRequest() {
    *this = ::std::move(from);
  }

  inline ContentAnalysisRequest& operator=(const ContentAnalysisRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentAnalysisRequest& operator=(ContentAnalysisRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ContentAnalysisRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContentAnalysisRequest* internal_default_instance() {
    return reinterpret_cast<const ContentAnalysisRequest*>(
               &_ContentAnalysisRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ContentAnalysisRequest& a, ContentAnalysisRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ContentAnalysisRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContentAnalysisRequest* New() const final {
    return CreateMaybeMessage<ContentAnalysisRequest>(nullptr);
  }

  ContentAnalysisRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContentAnalysisRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ContentAnalysisRequest& from);
  void MergeFrom(const ContentAnalysisRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContentAnalysisRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_connectors.ContentAnalysisRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 11,
    kDeviceTokenFieldNumber = 1,
    kFcmNotificationTokenFieldNumber = 2,
    kRequestTokenFieldNumber = 5,
    kRequestDataFieldNumber = 10,
    kAnalysisConnectorFieldNumber = 9,
  };
  // repeated string tags = 11;
  int tags_size() const;
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();

  // optional string device_token = 1;
  bool has_device_token() const;
  void clear_device_token();
  const std::string& device_token() const;
  void set_device_token(const std::string& value);
  void set_device_token(std::string&& value);
  void set_device_token(const char* value);
  void set_device_token(const char* value, size_t size);
  std::string* mutable_device_token();
  std::string* release_device_token();
  void set_allocated_device_token(std::string* device_token);

  // optional string fcm_notification_token = 2;
  bool has_fcm_notification_token() const;
  void clear_fcm_notification_token();
  const std::string& fcm_notification_token() const;
  void set_fcm_notification_token(const std::string& value);
  void set_fcm_notification_token(std::string&& value);
  void set_fcm_notification_token(const char* value);
  void set_fcm_notification_token(const char* value, size_t size);
  std::string* mutable_fcm_notification_token();
  std::string* release_fcm_notification_token();
  void set_allocated_fcm_notification_token(std::string* fcm_notification_token);

  // optional string request_token = 5;
  bool has_request_token() const;
  void clear_request_token();
  const std::string& request_token() const;
  void set_request_token(const std::string& value);
  void set_request_token(std::string&& value);
  void set_request_token(const char* value);
  void set_request_token(const char* value, size_t size);
  std::string* mutable_request_token();
  std::string* release_request_token();
  void set_allocated_request_token(std::string* request_token);

  // optional .enterprise_connectors.ContentMetaData request_data = 10;
  bool has_request_data() const;
  void clear_request_data();
  const ::enterprise_connectors::ContentMetaData& request_data() const;
  ::enterprise_connectors::ContentMetaData* release_request_data();
  ::enterprise_connectors::ContentMetaData* mutable_request_data();
  void set_allocated_request_data(::enterprise_connectors::ContentMetaData* request_data);

  // optional .enterprise_connectors.AnalysisConnector analysis_connector = 9;
  bool has_analysis_connector() const;
  void clear_analysis_connector();
  ::enterprise_connectors::AnalysisConnector analysis_connector() const;
  void set_analysis_connector(::enterprise_connectors::AnalysisConnector value);

  // @@protoc_insertion_point(class_scope:enterprise_connectors.ContentAnalysisRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fcm_notification_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_token_;
  ::enterprise_connectors::ContentMetaData* request_data_;
  int analysis_connector_;
  friend struct ::TableStruct_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto;
};
// -------------------------------------------------------------------

class ContentAnalysisResponse_Result_TriggeredRule :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule) */ {
 public:
  ContentAnalysisResponse_Result_TriggeredRule();
  virtual ~ContentAnalysisResponse_Result_TriggeredRule();

  ContentAnalysisResponse_Result_TriggeredRule(const ContentAnalysisResponse_Result_TriggeredRule& from);
  ContentAnalysisResponse_Result_TriggeredRule(ContentAnalysisResponse_Result_TriggeredRule&& from) noexcept
    : ContentAnalysisResponse_Result_TriggeredRule() {
    *this = ::std::move(from);
  }

  inline ContentAnalysisResponse_Result_TriggeredRule& operator=(const ContentAnalysisResponse_Result_TriggeredRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentAnalysisResponse_Result_TriggeredRule& operator=(ContentAnalysisResponse_Result_TriggeredRule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ContentAnalysisResponse_Result_TriggeredRule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContentAnalysisResponse_Result_TriggeredRule* internal_default_instance() {
    return reinterpret_cast<const ContentAnalysisResponse_Result_TriggeredRule*>(
               &_ContentAnalysisResponse_Result_TriggeredRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ContentAnalysisResponse_Result_TriggeredRule& a, ContentAnalysisResponse_Result_TriggeredRule& b) {
    a.Swap(&b);
  }
  inline void Swap(ContentAnalysisResponse_Result_TriggeredRule* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContentAnalysisResponse_Result_TriggeredRule* New() const final {
    return CreateMaybeMessage<ContentAnalysisResponse_Result_TriggeredRule>(nullptr);
  }

  ContentAnalysisResponse_Result_TriggeredRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContentAnalysisResponse_Result_TriggeredRule>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ContentAnalysisResponse_Result_TriggeredRule& from);
  void MergeFrom(const ContentAnalysisResponse_Result_TriggeredRule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContentAnalysisResponse_Result_TriggeredRule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ContentAnalysisResponse_Result_TriggeredRule_Action Action;
  static constexpr Action ACTION_UNSPECIFIED =
    ContentAnalysisResponse_Result_TriggeredRule_Action_ACTION_UNSPECIFIED;
  static constexpr Action REPORT_ONLY =
    ContentAnalysisResponse_Result_TriggeredRule_Action_REPORT_ONLY;
  static constexpr Action WARN =
    ContentAnalysisResponse_Result_TriggeredRule_Action_WARN;
  static constexpr Action BLOCK =
    ContentAnalysisResponse_Result_TriggeredRule_Action_BLOCK;
  static inline bool Action_IsValid(int value) {
    return ContentAnalysisResponse_Result_TriggeredRule_Action_IsValid(value);
  }
  static constexpr Action Action_MIN =
    ContentAnalysisResponse_Result_TriggeredRule_Action_Action_MIN;
  static constexpr Action Action_MAX =
    ContentAnalysisResponse_Result_TriggeredRule_Action_Action_MAX;
  static constexpr int Action_ARRAYSIZE =
    ContentAnalysisResponse_Result_TriggeredRule_Action_Action_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Action_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Action>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Action_Name.");
    return ContentAnalysisResponse_Result_TriggeredRule_Action_Name(enum_t_value);
  }
  static inline bool Action_Parse(const std::string& name,
      Action* value) {
    return ContentAnalysisResponse_Result_TriggeredRule_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRuleNameFieldNumber = 2,
    kRuleIdFieldNumber = 3,
    kActionFieldNumber = 1,
  };
  // optional string rule_name = 2;
  bool has_rule_name() const;
  void clear_rule_name();
  const std::string& rule_name() const;
  void set_rule_name(const std::string& value);
  void set_rule_name(std::string&& value);
  void set_rule_name(const char* value);
  void set_rule_name(const char* value, size_t size);
  std::string* mutable_rule_name();
  std::string* release_rule_name();
  void set_allocated_rule_name(std::string* rule_name);

  // optional string rule_id = 3;
  bool has_rule_id() const;
  void clear_rule_id();
  const std::string& rule_id() const;
  void set_rule_id(const std::string& value);
  void set_rule_id(std::string&& value);
  void set_rule_id(const char* value);
  void set_rule_id(const char* value, size_t size);
  std::string* mutable_rule_id();
  std::string* release_rule_id();
  void set_allocated_rule_id(std::string* rule_id);

  // optional .enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.Action action = 1;
  bool has_action() const;
  void clear_action();
  ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule_Action action() const;
  void set_action(::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule_Action value);

  // @@protoc_insertion_point(class_scope:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rule_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rule_id_;
  int action_;
  friend struct ::TableStruct_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto;
};
// -------------------------------------------------------------------

class ContentAnalysisResponse_Result :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_connectors.ContentAnalysisResponse.Result) */ {
 public:
  ContentAnalysisResponse_Result();
  virtual ~ContentAnalysisResponse_Result();

  ContentAnalysisResponse_Result(const ContentAnalysisResponse_Result& from);
  ContentAnalysisResponse_Result(ContentAnalysisResponse_Result&& from) noexcept
    : ContentAnalysisResponse_Result() {
    *this = ::std::move(from);
  }

  inline ContentAnalysisResponse_Result& operator=(const ContentAnalysisResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentAnalysisResponse_Result& operator=(ContentAnalysisResponse_Result&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ContentAnalysisResponse_Result& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContentAnalysisResponse_Result* internal_default_instance() {
    return reinterpret_cast<const ContentAnalysisResponse_Result*>(
               &_ContentAnalysisResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ContentAnalysisResponse_Result& a, ContentAnalysisResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(ContentAnalysisResponse_Result* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContentAnalysisResponse_Result* New() const final {
    return CreateMaybeMessage<ContentAnalysisResponse_Result>(nullptr);
  }

  ContentAnalysisResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContentAnalysisResponse_Result>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ContentAnalysisResponse_Result& from);
  void MergeFrom(const ContentAnalysisResponse_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContentAnalysisResponse_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_connectors.ContentAnalysisResponse.Result";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ContentAnalysisResponse_Result_TriggeredRule TriggeredRule;

  typedef ContentAnalysisResponse_Result_Status Status;
  static constexpr Status STATUS_UNKNOWN =
    ContentAnalysisResponse_Result_Status_STATUS_UNKNOWN;
  static constexpr Status SUCCESS =
    ContentAnalysisResponse_Result_Status_SUCCESS;
  static constexpr Status FAILURE =
    ContentAnalysisResponse_Result_Status_FAILURE;
  static inline bool Status_IsValid(int value) {
    return ContentAnalysisResponse_Result_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ContentAnalysisResponse_Result_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ContentAnalysisResponse_Result_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ContentAnalysisResponse_Result_Status_Status_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ContentAnalysisResponse_Result_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ContentAnalysisResponse_Result_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTriggeredRulesFieldNumber = 3,
    kTagFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // repeated .enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule triggered_rules = 3;
  int triggered_rules_size() const;
  void clear_triggered_rules();
  ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule* mutable_triggered_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule >*
      mutable_triggered_rules();
  const ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule& triggered_rules(int index) const;
  ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule* add_triggered_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule >&
      triggered_rules() const;

  // optional string tag = 1;
  bool has_tag() const;
  void clear_tag();
  const std::string& tag() const;
  void set_tag(const std::string& value);
  void set_tag(std::string&& value);
  void set_tag(const char* value);
  void set_tag(const char* value, size_t size);
  std::string* mutable_tag();
  std::string* release_tag();
  void set_allocated_tag(std::string* tag);

  // optional .enterprise_connectors.ContentAnalysisResponse.Result.Status status = 2;
  bool has_status() const;
  void clear_status();
  ::enterprise_connectors::ContentAnalysisResponse_Result_Status status() const;
  void set_status(::enterprise_connectors::ContentAnalysisResponse_Result_Status value);

  // @@protoc_insertion_point(class_scope:enterprise_connectors.ContentAnalysisResponse.Result)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule > triggered_rules_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  int status_;
  friend struct ::TableStruct_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto;
};
// -------------------------------------------------------------------

class ContentAnalysisResponse :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_connectors.ContentAnalysisResponse) */ {
 public:
  ContentAnalysisResponse();
  virtual ~ContentAnalysisResponse();

  ContentAnalysisResponse(const ContentAnalysisResponse& from);
  ContentAnalysisResponse(ContentAnalysisResponse&& from) noexcept
    : ContentAnalysisResponse() {
    *this = ::std::move(from);
  }

  inline ContentAnalysisResponse& operator=(const ContentAnalysisResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContentAnalysisResponse& operator=(ContentAnalysisResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ContentAnalysisResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContentAnalysisResponse* internal_default_instance() {
    return reinterpret_cast<const ContentAnalysisResponse*>(
               &_ContentAnalysisResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ContentAnalysisResponse& a, ContentAnalysisResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ContentAnalysisResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContentAnalysisResponse* New() const final {
    return CreateMaybeMessage<ContentAnalysisResponse>(nullptr);
  }

  ContentAnalysisResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContentAnalysisResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ContentAnalysisResponse& from);
  void MergeFrom(const ContentAnalysisResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContentAnalysisResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "enterprise_connectors.ContentAnalysisResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ContentAnalysisResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 4,
    kRequestTokenFieldNumber = 1,
  };
  // repeated .enterprise_connectors.ContentAnalysisResponse.Result results = 4;
  int results_size() const;
  void clear_results();
  ::enterprise_connectors::ContentAnalysisResponse_Result* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_connectors::ContentAnalysisResponse_Result >*
      mutable_results();
  const ::enterprise_connectors::ContentAnalysisResponse_Result& results(int index) const;
  ::enterprise_connectors::ContentAnalysisResponse_Result* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_connectors::ContentAnalysisResponse_Result >&
      results() const;

  // optional string request_token = 1;
  bool has_request_token() const;
  void clear_request_token();
  const std::string& request_token() const;
  void set_request_token(const std::string& value);
  void set_request_token(std::string&& value);
  void set_request_token(const char* value);
  void set_request_token(const char* value, size_t size);
  std::string* mutable_request_token();
  std::string* release_request_token();
  void set_allocated_request_token(std::string* request_token);

  // @@protoc_insertion_point(class_scope:enterprise_connectors.ContentAnalysisResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_connectors::ContentAnalysisResponse_Result > results_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_token_;
  friend struct ::TableStruct_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ContentMetaData

// optional string url = 1;
inline bool ContentMetaData::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContentMetaData::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContentMetaData::url() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentMetaData.url)
  return url_.GetNoArena();
}
inline void ContentMetaData::set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentMetaData.url)
}
inline void ContentMetaData::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_connectors.ContentMetaData.url)
}
inline void ContentMetaData::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_connectors.ContentMetaData.url)
}
inline void ContentMetaData::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_connectors.ContentMetaData.url)
}
inline std::string* ContentMetaData::mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentMetaData.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContentMetaData::release_url() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentMetaData.url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContentMetaData::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentMetaData.url)
}

// optional string filename = 2;
inline bool ContentMetaData::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContentMetaData::clear_filename() {
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ContentMetaData::filename() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentMetaData.filename)
  return filename_.GetNoArena();
}
inline void ContentMetaData::set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentMetaData.filename)
}
inline void ContentMetaData::set_filename(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_connectors.ContentMetaData.filename)
}
inline void ContentMetaData::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_connectors.ContentMetaData.filename)
}
inline void ContentMetaData::set_filename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_connectors.ContentMetaData.filename)
}
inline std::string* ContentMetaData::mutable_filename() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentMetaData.filename)
  return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContentMetaData::release_filename() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentMetaData.filename)
  if (!has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return filename_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContentMetaData::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentMetaData.filename)
}

// optional string digest = 3;
inline bool ContentMetaData::has_digest() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContentMetaData::clear_digest() {
  digest_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ContentMetaData::digest() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentMetaData.digest)
  return digest_.GetNoArena();
}
inline void ContentMetaData::set_digest(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  digest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentMetaData.digest)
}
inline void ContentMetaData::set_digest(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  digest_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_connectors.ContentMetaData.digest)
}
inline void ContentMetaData::set_digest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  digest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_connectors.ContentMetaData.digest)
}
inline void ContentMetaData::set_digest(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  digest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_connectors.ContentMetaData.digest)
}
inline std::string* ContentMetaData::mutable_digest() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentMetaData.digest)
  return digest_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContentMetaData::release_digest() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentMetaData.digest)
  if (!has_digest()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return digest_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContentMetaData::set_allocated_digest(std::string* digest) {
  if (digest != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  digest_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), digest);
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentMetaData.digest)
}

// optional .safe_browsing.ClientDownloadRequest csd = 4;
inline bool ContentMetaData::has_csd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::safe_browsing::ClientDownloadRequest& ContentMetaData::csd() const {
  const ::safe_browsing::ClientDownloadRequest* p = csd_;
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentMetaData.csd)
  return p != nullptr ? *p : *reinterpret_cast<const ::safe_browsing::ClientDownloadRequest*>(
      &::safe_browsing::_ClientDownloadRequest_default_instance_);
}
inline ::safe_browsing::ClientDownloadRequest* ContentMetaData::release_csd() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentMetaData.csd)
  _has_bits_[0] &= ~0x00000008u;
  ::safe_browsing::ClientDownloadRequest* temp = csd_;
  csd_ = nullptr;
  return temp;
}
inline ::safe_browsing::ClientDownloadRequest* ContentMetaData::mutable_csd() {
  _has_bits_[0] |= 0x00000008u;
  if (csd_ == nullptr) {
    auto* p = CreateMaybeMessage<::safe_browsing::ClientDownloadRequest>(GetArenaNoVirtual());
    csd_ = p;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentMetaData.csd)
  return csd_;
}
inline void ContentMetaData::set_allocated_csd(::safe_browsing::ClientDownloadRequest* csd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(csd_);
  }
  if (csd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      csd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, csd, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  csd_ = csd;
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentMetaData.csd)
}

// -------------------------------------------------------------------

// ContentAnalysisRequest

// optional string device_token = 1;
inline bool ContentAnalysisRequest::has_device_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContentAnalysisRequest::clear_device_token() {
  device_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContentAnalysisRequest::device_token() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisRequest.device_token)
  return device_token_.GetNoArena();
}
inline void ContentAnalysisRequest::set_device_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  device_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisRequest.device_token)
}
inline void ContentAnalysisRequest::set_device_token(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  device_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_connectors.ContentAnalysisRequest.device_token)
}
inline void ContentAnalysisRequest::set_device_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  device_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_connectors.ContentAnalysisRequest.device_token)
}
inline void ContentAnalysisRequest::set_device_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  device_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_connectors.ContentAnalysisRequest.device_token)
}
inline std::string* ContentAnalysisRequest::mutable_device_token() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentAnalysisRequest.device_token)
  return device_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContentAnalysisRequest::release_device_token() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentAnalysisRequest.device_token)
  if (!has_device_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return device_token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContentAnalysisRequest::set_allocated_device_token(std::string* device_token) {
  if (device_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  device_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_token);
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentAnalysisRequest.device_token)
}

// optional string fcm_notification_token = 2;
inline bool ContentAnalysisRequest::has_fcm_notification_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContentAnalysisRequest::clear_fcm_notification_token() {
  fcm_notification_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ContentAnalysisRequest::fcm_notification_token() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisRequest.fcm_notification_token)
  return fcm_notification_token_.GetNoArena();
}
inline void ContentAnalysisRequest::set_fcm_notification_token(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  fcm_notification_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisRequest.fcm_notification_token)
}
inline void ContentAnalysisRequest::set_fcm_notification_token(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  fcm_notification_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_connectors.ContentAnalysisRequest.fcm_notification_token)
}
inline void ContentAnalysisRequest::set_fcm_notification_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  fcm_notification_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_connectors.ContentAnalysisRequest.fcm_notification_token)
}
inline void ContentAnalysisRequest::set_fcm_notification_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  fcm_notification_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_connectors.ContentAnalysisRequest.fcm_notification_token)
}
inline std::string* ContentAnalysisRequest::mutable_fcm_notification_token() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentAnalysisRequest.fcm_notification_token)
  return fcm_notification_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContentAnalysisRequest::release_fcm_notification_token() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentAnalysisRequest.fcm_notification_token)
  if (!has_fcm_notification_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return fcm_notification_token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContentAnalysisRequest::set_allocated_fcm_notification_token(std::string* fcm_notification_token) {
  if (fcm_notification_token != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  fcm_notification_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fcm_notification_token);
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentAnalysisRequest.fcm_notification_token)
}

// optional .enterprise_connectors.AnalysisConnector analysis_connector = 9;
inline bool ContentAnalysisRequest::has_analysis_connector() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ContentAnalysisRequest::clear_analysis_connector() {
  analysis_connector_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::enterprise_connectors::AnalysisConnector ContentAnalysisRequest::analysis_connector() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisRequest.analysis_connector)
  return static_cast< ::enterprise_connectors::AnalysisConnector >(analysis_connector_);
}
inline void ContentAnalysisRequest::set_analysis_connector(::enterprise_connectors::AnalysisConnector value) {
  assert(::enterprise_connectors::AnalysisConnector_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  analysis_connector_ = value;
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisRequest.analysis_connector)
}

// optional .enterprise_connectors.ContentMetaData request_data = 10;
inline bool ContentAnalysisRequest::has_request_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContentAnalysisRequest::clear_request_data() {
  if (request_data_ != nullptr) request_data_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::enterprise_connectors::ContentMetaData& ContentAnalysisRequest::request_data() const {
  const ::enterprise_connectors::ContentMetaData* p = request_data_;
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisRequest.request_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::enterprise_connectors::ContentMetaData*>(
      &::enterprise_connectors::_ContentMetaData_default_instance_);
}
inline ::enterprise_connectors::ContentMetaData* ContentAnalysisRequest::release_request_data() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentAnalysisRequest.request_data)
  _has_bits_[0] &= ~0x00000008u;
  ::enterprise_connectors::ContentMetaData* temp = request_data_;
  request_data_ = nullptr;
  return temp;
}
inline ::enterprise_connectors::ContentMetaData* ContentAnalysisRequest::mutable_request_data() {
  _has_bits_[0] |= 0x00000008u;
  if (request_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::enterprise_connectors::ContentMetaData>(GetArenaNoVirtual());
    request_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentAnalysisRequest.request_data)
  return request_data_;
}
inline void ContentAnalysisRequest::set_allocated_request_data(::enterprise_connectors::ContentMetaData* request_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete request_data_;
  }
  if (request_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      request_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  request_data_ = request_data;
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentAnalysisRequest.request_data)
}

// optional string request_token = 5;
inline bool ContentAnalysisRequest::has_request_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContentAnalysisRequest::clear_request_token() {
  request_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ContentAnalysisRequest::request_token() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisRequest.request_token)
  return request_token_.GetNoArena();
}
inline void ContentAnalysisRequest::set_request_token(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  request_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisRequest.request_token)
}
inline void ContentAnalysisRequest::set_request_token(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  request_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_connectors.ContentAnalysisRequest.request_token)
}
inline void ContentAnalysisRequest::set_request_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  request_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_connectors.ContentAnalysisRequest.request_token)
}
inline void ContentAnalysisRequest::set_request_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  request_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_connectors.ContentAnalysisRequest.request_token)
}
inline std::string* ContentAnalysisRequest::mutable_request_token() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentAnalysisRequest.request_token)
  return request_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContentAnalysisRequest::release_request_token() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentAnalysisRequest.request_token)
  if (!has_request_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return request_token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContentAnalysisRequest::set_allocated_request_token(std::string* request_token) {
  if (request_token != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  request_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_token);
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentAnalysisRequest.request_token)
}

// repeated string tags = 11;
inline int ContentAnalysisRequest::tags_size() const {
  return tags_.size();
}
inline void ContentAnalysisRequest::clear_tags() {
  tags_.Clear();
}
inline const std::string& ContentAnalysisRequest::tags(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisRequest.tags)
  return tags_.Get(index);
}
inline std::string* ContentAnalysisRequest::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentAnalysisRequest.tags)
  return tags_.Mutable(index);
}
inline void ContentAnalysisRequest::set_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisRequest.tags)
  tags_.Mutable(index)->assign(value);
}
inline void ContentAnalysisRequest::set_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisRequest.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
inline void ContentAnalysisRequest::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:enterprise_connectors.ContentAnalysisRequest.tags)
}
inline void ContentAnalysisRequest::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:enterprise_connectors.ContentAnalysisRequest.tags)
}
inline std::string* ContentAnalysisRequest::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:enterprise_connectors.ContentAnalysisRequest.tags)
  return tags_.Add();
}
inline void ContentAnalysisRequest::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:enterprise_connectors.ContentAnalysisRequest.tags)
}
inline void ContentAnalysisRequest::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:enterprise_connectors.ContentAnalysisRequest.tags)
}
inline void ContentAnalysisRequest::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:enterprise_connectors.ContentAnalysisRequest.tags)
}
inline void ContentAnalysisRequest::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:enterprise_connectors.ContentAnalysisRequest.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ContentAnalysisRequest::tags() const {
  // @@protoc_insertion_point(field_list:enterprise_connectors.ContentAnalysisRequest.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ContentAnalysisRequest::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_connectors.ContentAnalysisRequest.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// ContentAnalysisResponse_Result_TriggeredRule

// optional .enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.Action action = 1;
inline bool ContentAnalysisResponse_Result_TriggeredRule::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContentAnalysisResponse_Result_TriggeredRule::clear_action() {
  action_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule_Action ContentAnalysisResponse_Result_TriggeredRule::action() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.action)
  return static_cast< ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule_Action >(action_);
}
inline void ContentAnalysisResponse_Result_TriggeredRule::set_action(::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule_Action value) {
  assert(::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule_Action_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  action_ = value;
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.action)
}

// optional string rule_name = 2;
inline bool ContentAnalysisResponse_Result_TriggeredRule::has_rule_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContentAnalysisResponse_Result_TriggeredRule::clear_rule_name() {
  rule_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContentAnalysisResponse_Result_TriggeredRule::rule_name() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.rule_name)
  return rule_name_.GetNoArena();
}
inline void ContentAnalysisResponse_Result_TriggeredRule::set_rule_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  rule_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.rule_name)
}
inline void ContentAnalysisResponse_Result_TriggeredRule::set_rule_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  rule_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.rule_name)
}
inline void ContentAnalysisResponse_Result_TriggeredRule::set_rule_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  rule_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.rule_name)
}
inline void ContentAnalysisResponse_Result_TriggeredRule::set_rule_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  rule_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.rule_name)
}
inline std::string* ContentAnalysisResponse_Result_TriggeredRule::mutable_rule_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.rule_name)
  return rule_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContentAnalysisResponse_Result_TriggeredRule::release_rule_name() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.rule_name)
  if (!has_rule_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return rule_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContentAnalysisResponse_Result_TriggeredRule::set_allocated_rule_name(std::string* rule_name) {
  if (rule_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rule_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rule_name);
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.rule_name)
}

// optional string rule_id = 3;
inline bool ContentAnalysisResponse_Result_TriggeredRule::has_rule_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContentAnalysisResponse_Result_TriggeredRule::clear_rule_id() {
  rule_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ContentAnalysisResponse_Result_TriggeredRule::rule_id() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.rule_id)
  return rule_id_.GetNoArena();
}
inline void ContentAnalysisResponse_Result_TriggeredRule::set_rule_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  rule_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.rule_id)
}
inline void ContentAnalysisResponse_Result_TriggeredRule::set_rule_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  rule_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.rule_id)
}
inline void ContentAnalysisResponse_Result_TriggeredRule::set_rule_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  rule_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.rule_id)
}
inline void ContentAnalysisResponse_Result_TriggeredRule::set_rule_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  rule_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.rule_id)
}
inline std::string* ContentAnalysisResponse_Result_TriggeredRule::mutable_rule_id() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.rule_id)
  return rule_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContentAnalysisResponse_Result_TriggeredRule::release_rule_id() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.rule_id)
  if (!has_rule_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return rule_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContentAnalysisResponse_Result_TriggeredRule::set_allocated_rule_id(std::string* rule_id) {
  if (rule_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  rule_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rule_id);
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule.rule_id)
}

// -------------------------------------------------------------------

// ContentAnalysisResponse_Result

// optional string tag = 1;
inline bool ContentAnalysisResponse_Result::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContentAnalysisResponse_Result::clear_tag() {
  tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContentAnalysisResponse_Result::tag() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisResponse.Result.tag)
  return tag_.GetNoArena();
}
inline void ContentAnalysisResponse_Result::set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisResponse.Result.tag)
}
inline void ContentAnalysisResponse_Result::set_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_connectors.ContentAnalysisResponse.Result.tag)
}
inline void ContentAnalysisResponse_Result::set_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_connectors.ContentAnalysisResponse.Result.tag)
}
inline void ContentAnalysisResponse_Result::set_tag(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_connectors.ContentAnalysisResponse.Result.tag)
}
inline std::string* ContentAnalysisResponse_Result::mutable_tag() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentAnalysisResponse.Result.tag)
  return tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContentAnalysisResponse_Result::release_tag() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentAnalysisResponse.Result.tag)
  if (!has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tag_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContentAnalysisResponse_Result::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentAnalysisResponse.Result.tag)
}

// optional .enterprise_connectors.ContentAnalysisResponse.Result.Status status = 2;
inline bool ContentAnalysisResponse_Result::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContentAnalysisResponse_Result::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::enterprise_connectors::ContentAnalysisResponse_Result_Status ContentAnalysisResponse_Result::status() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisResponse.Result.status)
  return static_cast< ::enterprise_connectors::ContentAnalysisResponse_Result_Status >(status_);
}
inline void ContentAnalysisResponse_Result::set_status(::enterprise_connectors::ContentAnalysisResponse_Result_Status value) {
  assert(::enterprise_connectors::ContentAnalysisResponse_Result_Status_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisResponse.Result.status)
}

// repeated .enterprise_connectors.ContentAnalysisResponse.Result.TriggeredRule triggered_rules = 3;
inline int ContentAnalysisResponse_Result::triggered_rules_size() const {
  return triggered_rules_.size();
}
inline void ContentAnalysisResponse_Result::clear_triggered_rules() {
  triggered_rules_.Clear();
}
inline ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule* ContentAnalysisResponse_Result::mutable_triggered_rules(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentAnalysisResponse.Result.triggered_rules)
  return triggered_rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule >*
ContentAnalysisResponse_Result::mutable_triggered_rules() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_connectors.ContentAnalysisResponse.Result.triggered_rules)
  return &triggered_rules_;
}
inline const ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule& ContentAnalysisResponse_Result::triggered_rules(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisResponse.Result.triggered_rules)
  return triggered_rules_.Get(index);
}
inline ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule* ContentAnalysisResponse_Result::add_triggered_rules() {
  // @@protoc_insertion_point(field_add:enterprise_connectors.ContentAnalysisResponse.Result.triggered_rules)
  return triggered_rules_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule >&
ContentAnalysisResponse_Result::triggered_rules() const {
  // @@protoc_insertion_point(field_list:enterprise_connectors.ContentAnalysisResponse.Result.triggered_rules)
  return triggered_rules_;
}

// -------------------------------------------------------------------

// ContentAnalysisResponse

// optional string request_token = 1;
inline bool ContentAnalysisResponse::has_request_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContentAnalysisResponse::clear_request_token() {
  request_token_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContentAnalysisResponse::request_token() const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisResponse.request_token)
  return request_token_.GetNoArena();
}
inline void ContentAnalysisResponse::set_request_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  request_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:enterprise_connectors.ContentAnalysisResponse.request_token)
}
inline void ContentAnalysisResponse::set_request_token(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  request_token_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:enterprise_connectors.ContentAnalysisResponse.request_token)
}
inline void ContentAnalysisResponse::set_request_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  request_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:enterprise_connectors.ContentAnalysisResponse.request_token)
}
inline void ContentAnalysisResponse::set_request_token(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  request_token_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:enterprise_connectors.ContentAnalysisResponse.request_token)
}
inline std::string* ContentAnalysisResponse::mutable_request_token() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentAnalysisResponse.request_token)
  return request_token_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContentAnalysisResponse::release_request_token() {
  // @@protoc_insertion_point(field_release:enterprise_connectors.ContentAnalysisResponse.request_token)
  if (!has_request_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return request_token_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContentAnalysisResponse::set_allocated_request_token(std::string* request_token) {
  if (request_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  request_token_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_token);
  // @@protoc_insertion_point(field_set_allocated:enterprise_connectors.ContentAnalysisResponse.request_token)
}

// repeated .enterprise_connectors.ContentAnalysisResponse.Result results = 4;
inline int ContentAnalysisResponse::results_size() const {
  return results_.size();
}
inline void ContentAnalysisResponse::clear_results() {
  results_.Clear();
}
inline ::enterprise_connectors::ContentAnalysisResponse_Result* ContentAnalysisResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:enterprise_connectors.ContentAnalysisResponse.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_connectors::ContentAnalysisResponse_Result >*
ContentAnalysisResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:enterprise_connectors.ContentAnalysisResponse.results)
  return &results_;
}
inline const ::enterprise_connectors::ContentAnalysisResponse_Result& ContentAnalysisResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:enterprise_connectors.ContentAnalysisResponse.results)
  return results_.Get(index);
}
inline ::enterprise_connectors::ContentAnalysisResponse_Result* ContentAnalysisResponse::add_results() {
  // @@protoc_insertion_point(field_add:enterprise_connectors.ContentAnalysisResponse.results)
  return results_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::enterprise_connectors::ContentAnalysisResponse_Result >&
ContentAnalysisResponse::results() const {
  // @@protoc_insertion_point(field_list:enterprise_connectors.ContentAnalysisResponse.results)
  return results_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace enterprise_connectors

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::enterprise_connectors::ContentAnalysisResponse_Result_TriggeredRule_Action> : ::std::true_type {};
template <> struct is_proto_enum< ::enterprise_connectors::ContentAnalysisResponse_Result_Status> : ::std::true_type {};
template <> struct is_proto_enum< ::enterprise_connectors::AnalysisConnector> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2fenterprise_2fcommon_2fproto_2fconnectors_2eproto

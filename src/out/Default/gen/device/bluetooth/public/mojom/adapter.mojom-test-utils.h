// device/bluetooth/public/mojom/adapter.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef DEVICE_BLUETOOTH_PUBLIC_MOJOM_ADAPTER_MOJOM_TEST_UTILS_H_
#define DEVICE_BLUETOOTH_PUBLIC_MOJOM_ADAPTER_MOJOM_TEST_UTILS_H_

#include "device/bluetooth/public/mojom/adapter.mojom.h"


namespace bluetooth {
namespace mojom {


class  DiscoverySessionInterceptorForTesting : public DiscoverySession {
  virtual DiscoverySession* GetForwardingInterface() = 0;
  void IsActive(IsActiveCallback callback) override;
  void Stop(StopCallback callback) override;
};
class  DiscoverySessionAsyncWaiter {
 public:
  explicit DiscoverySessionAsyncWaiter(DiscoverySession* proxy);
  ~DiscoverySessionAsyncWaiter();
  void IsActive(
      bool* out_active);
  void Stop(
      bool* out_success);

 private:
  DiscoverySession* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(DiscoverySessionAsyncWaiter);
};


class  AdapterInterceptorForTesting : public Adapter {
  virtual Adapter* GetForwardingInterface() = 0;
  void ConnectToDevice(const std::string& address, ConnectToDeviceCallback callback) override;
  void GetDevices(GetDevicesCallback callback) override;
  void GetInfo(GetInfoCallback callback) override;
  void SetClient(::mojo::PendingRemote<AdapterClient> client) override;
  void StartDiscoverySession(StartDiscoverySessionCallback callback) override;
};
class  AdapterAsyncWaiter {
 public:
  explicit AdapterAsyncWaiter(Adapter* proxy);
  ~AdapterAsyncWaiter();
  void ConnectToDevice(
      const std::string& address, ConnectResult* out_result, ::mojo::PendingRemote<::bluetooth::mojom::Device>* out_device);
  void GetDevices(
      std::vector<::bluetooth::mojom::DeviceInfoPtr>* out_devices);
  void GetInfo(
      AdapterInfoPtr* out_info);
  void StartDiscoverySession(
      ::mojo::PendingRemote<DiscoverySession>* out_session);

 private:
  Adapter* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(AdapterAsyncWaiter);
};


class  AdapterClientInterceptorForTesting : public AdapterClient {
  virtual AdapterClient* GetForwardingInterface() = 0;
  void PresentChanged(bool present) override;
  void PoweredChanged(bool powered) override;
  void DiscoverableChanged(bool discoverable) override;
  void DiscoveringChanged(bool discovering) override;
  void DeviceAdded(::bluetooth::mojom::DeviceInfoPtr device) override;
  void DeviceChanged(::bluetooth::mojom::DeviceInfoPtr device) override;
  void DeviceRemoved(::bluetooth::mojom::DeviceInfoPtr device) override;
};
class  AdapterClientAsyncWaiter {
 public:
  explicit AdapterClientAsyncWaiter(AdapterClient* proxy);
  ~AdapterClientAsyncWaiter();

 private:
  AdapterClient* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(AdapterClientAsyncWaiter);
};




}  // namespace mojom
}  // namespace bluetooth

#endif  // DEVICE_BLUETOOTH_PUBLIC_MOJOM_ADAPTER_MOJOM_TEST_UTILS_H_
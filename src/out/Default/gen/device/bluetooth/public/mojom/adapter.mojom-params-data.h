// device/bluetooth/public/mojom/adapter.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef DEVICE_BLUETOOTH_PUBLIC_MOJOM_ADAPTER_MOJOM_PARAMS_DATA_H_
#define DEVICE_BLUETOOTH_PUBLIC_MOJOM_ADAPTER_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace bluetooth {
namespace mojom {
namespace internal {
class  DiscoverySession_IsActive_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DiscoverySession_IsActive_Params_Data));
      new (data()) DiscoverySession_IsActive_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DiscoverySession_IsActive_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DiscoverySession_IsActive_Params_Data>(index_);
    }
    DiscoverySession_IsActive_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  DiscoverySession_IsActive_Params_Data();
  ~DiscoverySession_IsActive_Params_Data() = delete;
};
static_assert(sizeof(DiscoverySession_IsActive_Params_Data) == 8,
              "Bad sizeof(DiscoverySession_IsActive_Params_Data)");
class  DiscoverySession_IsActive_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DiscoverySession_IsActive_ResponseParams_Data));
      new (data()) DiscoverySession_IsActive_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DiscoverySession_IsActive_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DiscoverySession_IsActive_ResponseParams_Data>(index_);
    }
    DiscoverySession_IsActive_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t active : 1;
  uint8_t padfinal_[7];

 private:
  DiscoverySession_IsActive_ResponseParams_Data();
  ~DiscoverySession_IsActive_ResponseParams_Data() = delete;
};
static_assert(sizeof(DiscoverySession_IsActive_ResponseParams_Data) == 16,
              "Bad sizeof(DiscoverySession_IsActive_ResponseParams_Data)");
class  DiscoverySession_Stop_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DiscoverySession_Stop_Params_Data));
      new (data()) DiscoverySession_Stop_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DiscoverySession_Stop_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DiscoverySession_Stop_Params_Data>(index_);
    }
    DiscoverySession_Stop_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  DiscoverySession_Stop_Params_Data();
  ~DiscoverySession_Stop_Params_Data() = delete;
};
static_assert(sizeof(DiscoverySession_Stop_Params_Data) == 8,
              "Bad sizeof(DiscoverySession_Stop_Params_Data)");
class  DiscoverySession_Stop_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(DiscoverySession_Stop_ResponseParams_Data));
      new (data()) DiscoverySession_Stop_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    DiscoverySession_Stop_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<DiscoverySession_Stop_ResponseParams_Data>(index_);
    }
    DiscoverySession_Stop_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  DiscoverySession_Stop_ResponseParams_Data();
  ~DiscoverySession_Stop_ResponseParams_Data() = delete;
};
static_assert(sizeof(DiscoverySession_Stop_ResponseParams_Data) == 16,
              "Bad sizeof(DiscoverySession_Stop_ResponseParams_Data)");
class  Adapter_ConnectToDevice_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Adapter_ConnectToDevice_Params_Data));
      new (data()) Adapter_ConnectToDevice_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Adapter_ConnectToDevice_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Adapter_ConnectToDevice_Params_Data>(index_);
    }
    Adapter_ConnectToDevice_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> address;

 private:
  Adapter_ConnectToDevice_Params_Data();
  ~Adapter_ConnectToDevice_Params_Data() = delete;
};
static_assert(sizeof(Adapter_ConnectToDevice_Params_Data) == 16,
              "Bad sizeof(Adapter_ConnectToDevice_Params_Data)");
class  Adapter_ConnectToDevice_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Adapter_ConnectToDevice_ResponseParams_Data));
      new (data()) Adapter_ConnectToDevice_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Adapter_ConnectToDevice_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Adapter_ConnectToDevice_ResponseParams_Data>(index_);
    }
    Adapter_ConnectToDevice_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t result;
  mojo::internal::Interface_Data device;
  uint8_t padfinal_[4];

 private:
  Adapter_ConnectToDevice_ResponseParams_Data();
  ~Adapter_ConnectToDevice_ResponseParams_Data() = delete;
};
static_assert(sizeof(Adapter_ConnectToDevice_ResponseParams_Data) == 24,
              "Bad sizeof(Adapter_ConnectToDevice_ResponseParams_Data)");
class  Adapter_GetDevices_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Adapter_GetDevices_Params_Data));
      new (data()) Adapter_GetDevices_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Adapter_GetDevices_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Adapter_GetDevices_Params_Data>(index_);
    }
    Adapter_GetDevices_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  Adapter_GetDevices_Params_Data();
  ~Adapter_GetDevices_Params_Data() = delete;
};
static_assert(sizeof(Adapter_GetDevices_Params_Data) == 8,
              "Bad sizeof(Adapter_GetDevices_Params_Data)");
class  Adapter_GetDevices_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Adapter_GetDevices_ResponseParams_Data));
      new (data()) Adapter_GetDevices_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Adapter_GetDevices_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Adapter_GetDevices_ResponseParams_Data>(index_);
    }
    Adapter_GetDevices_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::bluetooth::mojom::internal::DeviceInfo_Data>>> devices;

 private:
  Adapter_GetDevices_ResponseParams_Data();
  ~Adapter_GetDevices_ResponseParams_Data() = delete;
};
static_assert(sizeof(Adapter_GetDevices_ResponseParams_Data) == 16,
              "Bad sizeof(Adapter_GetDevices_ResponseParams_Data)");
class  Adapter_GetInfo_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Adapter_GetInfo_Params_Data));
      new (data()) Adapter_GetInfo_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Adapter_GetInfo_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Adapter_GetInfo_Params_Data>(index_);
    }
    Adapter_GetInfo_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  Adapter_GetInfo_Params_Data();
  ~Adapter_GetInfo_Params_Data() = delete;
};
static_assert(sizeof(Adapter_GetInfo_Params_Data) == 8,
              "Bad sizeof(Adapter_GetInfo_Params_Data)");
class  Adapter_GetInfo_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Adapter_GetInfo_ResponseParams_Data));
      new (data()) Adapter_GetInfo_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Adapter_GetInfo_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Adapter_GetInfo_ResponseParams_Data>(index_);
    }
    Adapter_GetInfo_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::AdapterInfo_Data> info;

 private:
  Adapter_GetInfo_ResponseParams_Data();
  ~Adapter_GetInfo_ResponseParams_Data() = delete;
};
static_assert(sizeof(Adapter_GetInfo_ResponseParams_Data) == 16,
              "Bad sizeof(Adapter_GetInfo_ResponseParams_Data)");
class  Adapter_SetClient_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Adapter_SetClient_Params_Data));
      new (data()) Adapter_SetClient_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Adapter_SetClient_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Adapter_SetClient_Params_Data>(index_);
    }
    Adapter_SetClient_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data client;

 private:
  Adapter_SetClient_Params_Data();
  ~Adapter_SetClient_Params_Data() = delete;
};
static_assert(sizeof(Adapter_SetClient_Params_Data) == 16,
              "Bad sizeof(Adapter_SetClient_Params_Data)");
class  Adapter_StartDiscoverySession_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Adapter_StartDiscoverySession_Params_Data));
      new (data()) Adapter_StartDiscoverySession_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Adapter_StartDiscoverySession_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Adapter_StartDiscoverySession_Params_Data>(index_);
    }
    Adapter_StartDiscoverySession_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  Adapter_StartDiscoverySession_Params_Data();
  ~Adapter_StartDiscoverySession_Params_Data() = delete;
};
static_assert(sizeof(Adapter_StartDiscoverySession_Params_Data) == 8,
              "Bad sizeof(Adapter_StartDiscoverySession_Params_Data)");
class  Adapter_StartDiscoverySession_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(Adapter_StartDiscoverySession_ResponseParams_Data));
      new (data()) Adapter_StartDiscoverySession_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    Adapter_StartDiscoverySession_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<Adapter_StartDiscoverySession_ResponseParams_Data>(index_);
    }
    Adapter_StartDiscoverySession_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data session;

 private:
  Adapter_StartDiscoverySession_ResponseParams_Data();
  ~Adapter_StartDiscoverySession_ResponseParams_Data() = delete;
};
static_assert(sizeof(Adapter_StartDiscoverySession_ResponseParams_Data) == 16,
              "Bad sizeof(Adapter_StartDiscoverySession_ResponseParams_Data)");
class  AdapterClient_PresentChanged_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(AdapterClient_PresentChanged_Params_Data));
      new (data()) AdapterClient_PresentChanged_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    AdapterClient_PresentChanged_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<AdapterClient_PresentChanged_Params_Data>(index_);
    }
    AdapterClient_PresentChanged_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t present : 1;
  uint8_t padfinal_[7];

 private:
  AdapterClient_PresentChanged_Params_Data();
  ~AdapterClient_PresentChanged_Params_Data() = delete;
};
static_assert(sizeof(AdapterClient_PresentChanged_Params_Data) == 16,
              "Bad sizeof(AdapterClient_PresentChanged_Params_Data)");
class  AdapterClient_PoweredChanged_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(AdapterClient_PoweredChanged_Params_Data));
      new (data()) AdapterClient_PoweredChanged_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    AdapterClient_PoweredChanged_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<AdapterClient_PoweredChanged_Params_Data>(index_);
    }
    AdapterClient_PoweredChanged_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t powered : 1;
  uint8_t padfinal_[7];

 private:
  AdapterClient_PoweredChanged_Params_Data();
  ~AdapterClient_PoweredChanged_Params_Data() = delete;
};
static_assert(sizeof(AdapterClient_PoweredChanged_Params_Data) == 16,
              "Bad sizeof(AdapterClient_PoweredChanged_Params_Data)");
class  AdapterClient_DiscoverableChanged_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(AdapterClient_DiscoverableChanged_Params_Data));
      new (data()) AdapterClient_DiscoverableChanged_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    AdapterClient_DiscoverableChanged_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<AdapterClient_DiscoverableChanged_Params_Data>(index_);
    }
    AdapterClient_DiscoverableChanged_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t discoverable : 1;
  uint8_t padfinal_[7];

 private:
  AdapterClient_DiscoverableChanged_Params_Data();
  ~AdapterClient_DiscoverableChanged_Params_Data() = delete;
};
static_assert(sizeof(AdapterClient_DiscoverableChanged_Params_Data) == 16,
              "Bad sizeof(AdapterClient_DiscoverableChanged_Params_Data)");
class  AdapterClient_DiscoveringChanged_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(AdapterClient_DiscoveringChanged_Params_Data));
      new (data()) AdapterClient_DiscoveringChanged_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    AdapterClient_DiscoveringChanged_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<AdapterClient_DiscoveringChanged_Params_Data>(index_);
    }
    AdapterClient_DiscoveringChanged_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t discovering : 1;
  uint8_t padfinal_[7];

 private:
  AdapterClient_DiscoveringChanged_Params_Data();
  ~AdapterClient_DiscoveringChanged_Params_Data() = delete;
};
static_assert(sizeof(AdapterClient_DiscoveringChanged_Params_Data) == 16,
              "Bad sizeof(AdapterClient_DiscoveringChanged_Params_Data)");
class  AdapterClient_DeviceAdded_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(AdapterClient_DeviceAdded_Params_Data));
      new (data()) AdapterClient_DeviceAdded_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    AdapterClient_DeviceAdded_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<AdapterClient_DeviceAdded_Params_Data>(index_);
    }
    AdapterClient_DeviceAdded_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::bluetooth::mojom::internal::DeviceInfo_Data> device;

 private:
  AdapterClient_DeviceAdded_Params_Data();
  ~AdapterClient_DeviceAdded_Params_Data() = delete;
};
static_assert(sizeof(AdapterClient_DeviceAdded_Params_Data) == 16,
              "Bad sizeof(AdapterClient_DeviceAdded_Params_Data)");
class  AdapterClient_DeviceChanged_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(AdapterClient_DeviceChanged_Params_Data));
      new (data()) AdapterClient_DeviceChanged_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    AdapterClient_DeviceChanged_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<AdapterClient_DeviceChanged_Params_Data>(index_);
    }
    AdapterClient_DeviceChanged_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::bluetooth::mojom::internal::DeviceInfo_Data> device;

 private:
  AdapterClient_DeviceChanged_Params_Data();
  ~AdapterClient_DeviceChanged_Params_Data() = delete;
};
static_assert(sizeof(AdapterClient_DeviceChanged_Params_Data) == 16,
              "Bad sizeof(AdapterClient_DeviceChanged_Params_Data)");
class  AdapterClient_DeviceRemoved_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(AdapterClient_DeviceRemoved_Params_Data));
      new (data()) AdapterClient_DeviceRemoved_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    AdapterClient_DeviceRemoved_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<AdapterClient_DeviceRemoved_Params_Data>(index_);
    }
    AdapterClient_DeviceRemoved_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::bluetooth::mojom::internal::DeviceInfo_Data> device;

 private:
  AdapterClient_DeviceRemoved_Params_Data();
  ~AdapterClient_DeviceRemoved_Params_Data() = delete;
};
static_assert(sizeof(AdapterClient_DeviceRemoved_Params_Data) == 16,
              "Bad sizeof(AdapterClient_DeviceRemoved_Params_Data)");

}  // namespace internal
class DiscoverySession_IsActive_ParamsDataView {
 public:
  DiscoverySession_IsActive_ParamsDataView() {}

  DiscoverySession_IsActive_ParamsDataView(
      internal::DiscoverySession_IsActive_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::DiscoverySession_IsActive_Params_Data* data_ = nullptr;
};

class DiscoverySession_IsActive_ResponseParamsDataView {
 public:
  DiscoverySession_IsActive_ResponseParamsDataView() {}

  DiscoverySession_IsActive_ResponseParamsDataView(
      internal::DiscoverySession_IsActive_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool active() const {
    return data_->active;
  }
 private:
  internal::DiscoverySession_IsActive_ResponseParams_Data* data_ = nullptr;
};

class DiscoverySession_Stop_ParamsDataView {
 public:
  DiscoverySession_Stop_ParamsDataView() {}

  DiscoverySession_Stop_ParamsDataView(
      internal::DiscoverySession_Stop_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::DiscoverySession_Stop_Params_Data* data_ = nullptr;
};

class DiscoverySession_Stop_ResponseParamsDataView {
 public:
  DiscoverySession_Stop_ResponseParamsDataView() {}

  DiscoverySession_Stop_ResponseParamsDataView(
      internal::DiscoverySession_Stop_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::DiscoverySession_Stop_ResponseParams_Data* data_ = nullptr;
};

class Adapter_ConnectToDevice_ParamsDataView {
 public:
  Adapter_ConnectToDevice_ParamsDataView() {}

  Adapter_ConnectToDevice_ParamsDataView(
      internal::Adapter_ConnectToDevice_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetAddressDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadAddress(UserType* output) {
    auto* pointer = data_->address.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, context_);
  }
 private:
  internal::Adapter_ConnectToDevice_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class Adapter_ConnectToDevice_ResponseParamsDataView {
 public:
  Adapter_ConnectToDevice_ResponseParamsDataView() {}

  Adapter_ConnectToDevice_ResponseParamsDataView(
      internal::Adapter_ConnectToDevice_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadResult(UserType* output) const {
    auto data_value = data_->result;
    return mojo::internal::Deserialize<::bluetooth::mojom::ConnectResult>(
        data_value, output);
  }

  ConnectResult result() const {
    return static_cast<ConnectResult>(data_->result);
  }
  template <typename UserType>
  UserType TakeDevice() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::bluetooth::mojom::DeviceInterfaceBase>>(
            &data_->device, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::Adapter_ConnectToDevice_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class Adapter_GetDevices_ParamsDataView {
 public:
  Adapter_GetDevices_ParamsDataView() {}

  Adapter_GetDevices_ParamsDataView(
      internal::Adapter_GetDevices_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::Adapter_GetDevices_Params_Data* data_ = nullptr;
};

class Adapter_GetDevices_ResponseParamsDataView {
 public:
  Adapter_GetDevices_ResponseParamsDataView() {}

  Adapter_GetDevices_ResponseParamsDataView(
      internal::Adapter_GetDevices_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDevicesDataView(
      mojo::ArrayDataView<::bluetooth::mojom::DeviceInfoDataView>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDevices(UserType* output) {
    auto* pointer = data_->devices.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::bluetooth::mojom::DeviceInfoDataView>>(
        pointer, output, context_);
  }
 private:
  internal::Adapter_GetDevices_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class Adapter_GetInfo_ParamsDataView {
 public:
  Adapter_GetInfo_ParamsDataView() {}

  Adapter_GetInfo_ParamsDataView(
      internal::Adapter_GetInfo_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::Adapter_GetInfo_Params_Data* data_ = nullptr;
};

class Adapter_GetInfo_ResponseParamsDataView {
 public:
  Adapter_GetInfo_ResponseParamsDataView() {}

  Adapter_GetInfo_ResponseParamsDataView(
      internal::Adapter_GetInfo_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetInfoDataView(
      AdapterInfoDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadInfo(UserType* output) {
    auto* pointer = data_->info.Get();
    return mojo::internal::Deserialize<::bluetooth::mojom::AdapterInfoDataView>(
        pointer, output, context_);
  }
 private:
  internal::Adapter_GetInfo_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class Adapter_SetClient_ParamsDataView {
 public:
  Adapter_SetClient_ParamsDataView() {}

  Adapter_SetClient_ParamsDataView(
      internal::Adapter_SetClient_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::bluetooth::mojom::AdapterClientInterfaceBase>>(
            &data_->client, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::Adapter_SetClient_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class Adapter_StartDiscoverySession_ParamsDataView {
 public:
  Adapter_StartDiscoverySession_ParamsDataView() {}

  Adapter_StartDiscoverySession_ParamsDataView(
      internal::Adapter_StartDiscoverySession_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::Adapter_StartDiscoverySession_Params_Data* data_ = nullptr;
};

class Adapter_StartDiscoverySession_ResponseParamsDataView {
 public:
  Adapter_StartDiscoverySession_ResponseParamsDataView() {}

  Adapter_StartDiscoverySession_ResponseParamsDataView(
      internal::Adapter_StartDiscoverySession_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeSession() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::bluetooth::mojom::DiscoverySessionInterfaceBase>>(
            &data_->session, &result, context_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::Adapter_StartDiscoverySession_ResponseParams_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class AdapterClient_PresentChanged_ParamsDataView {
 public:
  AdapterClient_PresentChanged_ParamsDataView() {}

  AdapterClient_PresentChanged_ParamsDataView(
      internal::AdapterClient_PresentChanged_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool present() const {
    return data_->present;
  }
 private:
  internal::AdapterClient_PresentChanged_Params_Data* data_ = nullptr;
};

class AdapterClient_PoweredChanged_ParamsDataView {
 public:
  AdapterClient_PoweredChanged_ParamsDataView() {}

  AdapterClient_PoweredChanged_ParamsDataView(
      internal::AdapterClient_PoweredChanged_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool powered() const {
    return data_->powered;
  }
 private:
  internal::AdapterClient_PoweredChanged_Params_Data* data_ = nullptr;
};

class AdapterClient_DiscoverableChanged_ParamsDataView {
 public:
  AdapterClient_DiscoverableChanged_ParamsDataView() {}

  AdapterClient_DiscoverableChanged_ParamsDataView(
      internal::AdapterClient_DiscoverableChanged_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool discoverable() const {
    return data_->discoverable;
  }
 private:
  internal::AdapterClient_DiscoverableChanged_Params_Data* data_ = nullptr;
};

class AdapterClient_DiscoveringChanged_ParamsDataView {
 public:
  AdapterClient_DiscoveringChanged_ParamsDataView() {}

  AdapterClient_DiscoveringChanged_ParamsDataView(
      internal::AdapterClient_DiscoveringChanged_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool discovering() const {
    return data_->discovering;
  }
 private:
  internal::AdapterClient_DiscoveringChanged_Params_Data* data_ = nullptr;
};

class AdapterClient_DeviceAdded_ParamsDataView {
 public:
  AdapterClient_DeviceAdded_ParamsDataView() {}

  AdapterClient_DeviceAdded_ParamsDataView(
      internal::AdapterClient_DeviceAdded_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDeviceDataView(
      ::bluetooth::mojom::DeviceInfoDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDevice(UserType* output) {
    auto* pointer = data_->device.Get();
    return mojo::internal::Deserialize<::bluetooth::mojom::DeviceInfoDataView>(
        pointer, output, context_);
  }
 private:
  internal::AdapterClient_DeviceAdded_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class AdapterClient_DeviceChanged_ParamsDataView {
 public:
  AdapterClient_DeviceChanged_ParamsDataView() {}

  AdapterClient_DeviceChanged_ParamsDataView(
      internal::AdapterClient_DeviceChanged_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDeviceDataView(
      ::bluetooth::mojom::DeviceInfoDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDevice(UserType* output) {
    auto* pointer = data_->device.Get();
    return mojo::internal::Deserialize<::bluetooth::mojom::DeviceInfoDataView>(
        pointer, output, context_);
  }
 private:
  internal::AdapterClient_DeviceChanged_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class AdapterClient_DeviceRemoved_ParamsDataView {
 public:
  AdapterClient_DeviceRemoved_ParamsDataView() {}

  AdapterClient_DeviceRemoved_ParamsDataView(
      internal::AdapterClient_DeviceRemoved_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetDeviceDataView(
      ::bluetooth::mojom::DeviceInfoDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadDevice(UserType* output) {
    auto* pointer = data_->device.Get();
    return mojo::internal::Deserialize<::bluetooth::mojom::DeviceInfoDataView>(
        pointer, output, context_);
  }
 private:
  internal::AdapterClient_DeviceRemoved_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};










inline void Adapter_ConnectToDevice_ParamsDataView::GetAddressDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->address.Get();
  *output = mojo::StringDataView(pointer, context_);
}






inline void Adapter_GetDevices_ResponseParamsDataView::GetDevicesDataView(
    mojo::ArrayDataView<::bluetooth::mojom::DeviceInfoDataView>* output) {
  auto pointer = data_->devices.Get();
  *output = mojo::ArrayDataView<::bluetooth::mojom::DeviceInfoDataView>(pointer, context_);
}




inline void Adapter_GetInfo_ResponseParamsDataView::GetInfoDataView(
    AdapterInfoDataView* output) {
  auto pointer = data_->info.Get();
  *output = AdapterInfoDataView(pointer, context_);
}
















inline void AdapterClient_DeviceAdded_ParamsDataView::GetDeviceDataView(
    ::bluetooth::mojom::DeviceInfoDataView* output) {
  auto pointer = data_->device.Get();
  *output = ::bluetooth::mojom::DeviceInfoDataView(pointer, context_);
}


inline void AdapterClient_DeviceChanged_ParamsDataView::GetDeviceDataView(
    ::bluetooth::mojom::DeviceInfoDataView* output) {
  auto pointer = data_->device.Get();
  *output = ::bluetooth::mojom::DeviceInfoDataView(pointer, context_);
}


inline void AdapterClient_DeviceRemoved_ParamsDataView::GetDeviceDataView(
    ::bluetooth::mojom::DeviceInfoDataView* output) {
  auto pointer = data_->device.Get();
  *output = ::bluetooth::mojom::DeviceInfoDataView(pointer, context_);
}

}  // namespace mojom
}  // namespace bluetooth

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // DEVICE_BLUETOOTH_PUBLIC_MOJOM_ADAPTER_MOJOM_PARAMS_DATA_H_
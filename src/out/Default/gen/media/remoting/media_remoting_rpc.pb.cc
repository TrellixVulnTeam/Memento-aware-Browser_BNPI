// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: media_remoting_rpc.proto

#include "media_remoting_rpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_media_5fremoting_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AcquireDemuxer_media_5fremoting_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fremoting_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AudioDecoderConfig_media_5fremoting_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fremoting_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CdmClientOnSessionExpirationUpdate_media_5fremoting_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fremoting_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CdmClientOnSessionKeysChange_media_5fremoting_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fremoting_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CdmClientOnSessionMessage_media_5fremoting_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fremoting_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CdmCloseSession_media_5fremoting_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fremoting_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CdmCreateSessionAndGenerateRequest_media_5fremoting_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fremoting_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CdmInitialize_media_5fremoting_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fremoting_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CdmKeyInformation_media_5fremoting_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fremoting_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CdmLoadSession_media_5fremoting_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fremoting_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CdmPromise_media_5fremoting_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fremoting_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CdmRemoveSession_media_5fremoting_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fremoting_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CdmSetServerCertificate_media_5fremoting_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fremoting_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CdmUpdateSession_media_5fremoting_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fremoting_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DecryptConfig_media_5fremoting_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fremoting_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DecryptConfig_SubSample_media_5fremoting_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fremoting_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DemuxerStreamInitializeCallback_media_5fremoting_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fremoting_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DemuxerStreamReadUntil_media_5fremoting_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fremoting_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DemuxerStreamReadUntilCallback_media_5fremoting_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fremoting_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EncryptionScheme_media_5fremoting_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fremoting_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PipelineDecoderInfo_media_5fremoting_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fremoting_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PipelineStatistics_media_5fremoting_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fremoting_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rect_media_5fremoting_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fremoting_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RendererClientOnAudioConfigChange_media_5fremoting_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fremoting_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RendererClientOnBufferingStateChange_media_5fremoting_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fremoting_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RendererClientOnTimeUpdate_media_5fremoting_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fremoting_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RendererClientOnVideoConfigChange_media_5fremoting_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fremoting_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RendererFlushUntil_media_5fremoting_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fremoting_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RendererInitialize_media_5fremoting_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fremoting_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RendererSetCdm_media_5fremoting_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fremoting_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Size_media_5fremoting_5frpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_5fremoting_5frpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_VideoDecoderConfig_media_5fremoting_5frpc_2eproto;
namespace media {
namespace remoting {
namespace pb {
class DecoderBufferDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DecoderBuffer> _instance;
} _DecoderBuffer_default_instance_;
class SizeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Size> _instance;
} _Size_default_instance_;
class EncryptionSchemeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EncryptionScheme> _instance;
} _EncryptionScheme_default_instance_;
class AudioDecoderConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioDecoderConfig> _instance;
} _AudioDecoderConfig_default_instance_;
class RectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rect> _instance;
} _Rect_default_instance_;
class VideoDecoderConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoDecoderConfig> _instance;
} _VideoDecoderConfig_default_instance_;
class DecryptConfig_SubSampleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DecryptConfig_SubSample> _instance;
} _DecryptConfig_SubSample_default_instance_;
class DecryptConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DecryptConfig> _instance;
} _DecryptConfig_default_instance_;
class PipelineDecoderInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PipelineDecoderInfo> _instance;
} _PipelineDecoderInfo_default_instance_;
class PipelineStatisticsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PipelineStatistics> _instance;
} _PipelineStatistics_default_instance_;
class CdmKeyInformationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CdmKeyInformation> _instance;
} _CdmKeyInformation_default_instance_;
class AcquireDemuxerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AcquireDemuxer> _instance;
} _AcquireDemuxer_default_instance_;
class RendererInitializeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RendererInitialize> _instance;
} _RendererInitialize_default_instance_;
class RendererFlushUntilDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RendererFlushUntil> _instance;
} _RendererFlushUntil_default_instance_;
class RendererSetCdmDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RendererSetCdm> _instance;
} _RendererSetCdm_default_instance_;
class RendererClientOnTimeUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RendererClientOnTimeUpdate> _instance;
} _RendererClientOnTimeUpdate_default_instance_;
class RendererClientOnBufferingStateChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RendererClientOnBufferingStateChange> _instance;
} _RendererClientOnBufferingStateChange_default_instance_;
class RendererClientOnAudioConfigChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RendererClientOnAudioConfigChange> _instance;
} _RendererClientOnAudioConfigChange_default_instance_;
class RendererClientOnVideoConfigChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RendererClientOnVideoConfigChange> _instance;
} _RendererClientOnVideoConfigChange_default_instance_;
class DemuxerStreamReadUntilDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DemuxerStreamReadUntil> _instance;
} _DemuxerStreamReadUntil_default_instance_;
class DemuxerStreamInitializeCallbackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DemuxerStreamInitializeCallback> _instance;
} _DemuxerStreamInitializeCallback_default_instance_;
class DemuxerStreamReadUntilCallbackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DemuxerStreamReadUntilCallback> _instance;
} _DemuxerStreamReadUntilCallback_default_instance_;
class CdmInitializeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CdmInitialize> _instance;
} _CdmInitialize_default_instance_;
class CdmSetServerCertificateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CdmSetServerCertificate> _instance;
} _CdmSetServerCertificate_default_instance_;
class CdmCreateSessionAndGenerateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CdmCreateSessionAndGenerateRequest> _instance;
} _CdmCreateSessionAndGenerateRequest_default_instance_;
class CdmLoadSessionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CdmLoadSession> _instance;
} _CdmLoadSession_default_instance_;
class CdmUpdateSessionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CdmUpdateSession> _instance;
} _CdmUpdateSession_default_instance_;
class CdmCloseSessionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CdmCloseSession> _instance;
} _CdmCloseSession_default_instance_;
class CdmRemoveSessionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CdmRemoveSession> _instance;
} _CdmRemoveSession_default_instance_;
class CdmPromiseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CdmPromise> _instance;
} _CdmPromise_default_instance_;
class CdmClientOnSessionMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CdmClientOnSessionMessage> _instance;
} _CdmClientOnSessionMessage_default_instance_;
class CdmClientOnSessionKeysChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CdmClientOnSessionKeysChange> _instance;
} _CdmClientOnSessionKeysChange_default_instance_;
class CdmClientOnSessionExpirationUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CdmClientOnSessionExpirationUpdate> _instance;
} _CdmClientOnSessionExpirationUpdate_default_instance_;
class RpcMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RpcMessage> _instance;
  ::PROTOBUF_NAMESPACE_ID::int32 integer_value_;
  ::PROTOBUF_NAMESPACE_ID::int64 integer64_value_;
  double double_value_;
  bool boolean_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
  const ::media::remoting::pb::RendererInitialize* renderer_initialize_rpc_;
  const ::media::remoting::pb::RendererFlushUntil* renderer_flushuntil_rpc_;
  const ::media::remoting::pb::RendererSetCdm* renderer_set_cdm_rpc_;
  const ::media::remoting::pb::AcquireDemuxer* acquire_demuxer_rpc_;
  const ::media::remoting::pb::RendererClientOnTimeUpdate* rendererclient_ontimeupdate_rpc_;
  const ::media::remoting::pb::Size* rendererclient_onvideonatualsizechange_rpc_;
  const ::media::remoting::pb::PipelineStatistics* rendererclient_onstatisticsupdate_rpc_;
  const ::media::remoting::pb::RendererClientOnBufferingStateChange* rendererclient_onbufferingstatechange_rpc_;
  const ::media::remoting::pb::RendererClientOnAudioConfigChange* rendererclient_onaudioconfigchange_rpc_;
  const ::media::remoting::pb::RendererClientOnVideoConfigChange* rendererclient_onvideoconfigchange_rpc_;
  const ::media::remoting::pb::DemuxerStreamReadUntil* demuxerstream_readuntil_rpc_;
  const ::media::remoting::pb::DemuxerStreamInitializeCallback* demuxerstream_initializecb_rpc_;
  const ::media::remoting::pb::DemuxerStreamReadUntilCallback* demuxerstream_readuntilcb_rpc_;
  const ::media::remoting::pb::CdmInitialize* cdm_initialize_rpc_;
  const ::media::remoting::pb::CdmSetServerCertificate* cdm_setservercertificate_rpc_;
  const ::media::remoting::pb::CdmCreateSessionAndGenerateRequest* cdm_createsessionandgeneraterequest_rpc_;
  const ::media::remoting::pb::CdmLoadSession* cdm_loadsession_rpc_;
  const ::media::remoting::pb::CdmUpdateSession* cdm_updatesession_rpc_;
  const ::media::remoting::pb::CdmCloseSession* cdm_closesession_rpc_;
  const ::media::remoting::pb::CdmRemoveSession* cdm_removesession_rpc_;
  const ::media::remoting::pb::CdmPromise* cdm_promise_rpc_;
  const ::media::remoting::pb::CdmClientOnSessionMessage* cdmclient_onsessionmessage_rpc_;
  const ::media::remoting::pb::CdmClientOnSessionKeysChange* cdmclient_onsessionkeychange_rpc_;
  const ::media::remoting::pb::CdmClientOnSessionExpirationUpdate* cdmclient_onsessionexpirationupdate_rpc_;
} _RpcMessage_default_instance_;
}  // namespace pb
}  // namespace remoting
}  // namespace media
static void InitDefaultsscc_info_AcquireDemuxer_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_AcquireDemuxer_default_instance_;
    new (ptr) ::media::remoting::pb::AcquireDemuxer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::AcquireDemuxer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AcquireDemuxer_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AcquireDemuxer_media_5fremoting_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_AudioDecoderConfig_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_AudioDecoderConfig_default_instance_;
    new (ptr) ::media::remoting::pb::AudioDecoderConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::AudioDecoderConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AudioDecoderConfig_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AudioDecoderConfig_media_5fremoting_5frpc_2eproto}, {
      &scc_info_EncryptionScheme_media_5fremoting_5frpc_2eproto.base,}};

static void InitDefaultsscc_info_CdmClientOnSessionExpirationUpdate_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_CdmClientOnSessionExpirationUpdate_default_instance_;
    new (ptr) ::media::remoting::pb::CdmClientOnSessionExpirationUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::CdmClientOnSessionExpirationUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CdmClientOnSessionExpirationUpdate_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CdmClientOnSessionExpirationUpdate_media_5fremoting_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_CdmClientOnSessionKeysChange_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_CdmClientOnSessionKeysChange_default_instance_;
    new (ptr) ::media::remoting::pb::CdmClientOnSessionKeysChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::CdmClientOnSessionKeysChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CdmClientOnSessionKeysChange_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CdmClientOnSessionKeysChange_media_5fremoting_5frpc_2eproto}, {
      &scc_info_CdmKeyInformation_media_5fremoting_5frpc_2eproto.base,}};

static void InitDefaultsscc_info_CdmClientOnSessionMessage_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_CdmClientOnSessionMessage_default_instance_;
    new (ptr) ::media::remoting::pb::CdmClientOnSessionMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::CdmClientOnSessionMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CdmClientOnSessionMessage_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CdmClientOnSessionMessage_media_5fremoting_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_CdmCloseSession_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_CdmCloseSession_default_instance_;
    new (ptr) ::media::remoting::pb::CdmCloseSession();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::CdmCloseSession::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CdmCloseSession_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CdmCloseSession_media_5fremoting_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_CdmCreateSessionAndGenerateRequest_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_CdmCreateSessionAndGenerateRequest_default_instance_;
    new (ptr) ::media::remoting::pb::CdmCreateSessionAndGenerateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::CdmCreateSessionAndGenerateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CdmCreateSessionAndGenerateRequest_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CdmCreateSessionAndGenerateRequest_media_5fremoting_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_CdmInitialize_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_CdmInitialize_default_instance_;
    new (ptr) ::media::remoting::pb::CdmInitialize();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::CdmInitialize::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CdmInitialize_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CdmInitialize_media_5fremoting_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_CdmKeyInformation_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_CdmKeyInformation_default_instance_;
    new (ptr) ::media::remoting::pb::CdmKeyInformation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::CdmKeyInformation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CdmKeyInformation_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CdmKeyInformation_media_5fremoting_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_CdmLoadSession_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_CdmLoadSession_default_instance_;
    new (ptr) ::media::remoting::pb::CdmLoadSession();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::CdmLoadSession::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CdmLoadSession_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CdmLoadSession_media_5fremoting_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_CdmPromise_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_CdmPromise_default_instance_;
    new (ptr) ::media::remoting::pb::CdmPromise();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::CdmPromise::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CdmPromise_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CdmPromise_media_5fremoting_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_CdmRemoveSession_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_CdmRemoveSession_default_instance_;
    new (ptr) ::media::remoting::pb::CdmRemoveSession();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::CdmRemoveSession::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CdmRemoveSession_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CdmRemoveSession_media_5fremoting_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_CdmSetServerCertificate_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_CdmSetServerCertificate_default_instance_;
    new (ptr) ::media::remoting::pb::CdmSetServerCertificate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::CdmSetServerCertificate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CdmSetServerCertificate_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CdmSetServerCertificate_media_5fremoting_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_CdmUpdateSession_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_CdmUpdateSession_default_instance_;
    new (ptr) ::media::remoting::pb::CdmUpdateSession();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::CdmUpdateSession::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CdmUpdateSession_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CdmUpdateSession_media_5fremoting_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_DecoderBuffer_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_DecoderBuffer_default_instance_;
    new (ptr) ::media::remoting::pb::DecoderBuffer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::DecoderBuffer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DecoderBuffer_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DecoderBuffer_media_5fremoting_5frpc_2eproto}, {
      &scc_info_DecryptConfig_media_5fremoting_5frpc_2eproto.base,}};

static void InitDefaultsscc_info_DecryptConfig_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_DecryptConfig_default_instance_;
    new (ptr) ::media::remoting::pb::DecryptConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::DecryptConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DecryptConfig_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DecryptConfig_media_5fremoting_5frpc_2eproto}, {
      &scc_info_DecryptConfig_SubSample_media_5fremoting_5frpc_2eproto.base,}};

static void InitDefaultsscc_info_DecryptConfig_SubSample_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_DecryptConfig_SubSample_default_instance_;
    new (ptr) ::media::remoting::pb::DecryptConfig_SubSample();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::DecryptConfig_SubSample::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DecryptConfig_SubSample_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DecryptConfig_SubSample_media_5fremoting_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_DemuxerStreamInitializeCallback_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_DemuxerStreamInitializeCallback_default_instance_;
    new (ptr) ::media::remoting::pb::DemuxerStreamInitializeCallback();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::DemuxerStreamInitializeCallback::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DemuxerStreamInitializeCallback_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DemuxerStreamInitializeCallback_media_5fremoting_5frpc_2eproto}, {
      &scc_info_AudioDecoderConfig_media_5fremoting_5frpc_2eproto.base,
      &scc_info_VideoDecoderConfig_media_5fremoting_5frpc_2eproto.base,}};

static void InitDefaultsscc_info_DemuxerStreamReadUntil_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_DemuxerStreamReadUntil_default_instance_;
    new (ptr) ::media::remoting::pb::DemuxerStreamReadUntil();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::DemuxerStreamReadUntil::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DemuxerStreamReadUntil_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DemuxerStreamReadUntil_media_5fremoting_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_DemuxerStreamReadUntilCallback_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_DemuxerStreamReadUntilCallback_default_instance_;
    new (ptr) ::media::remoting::pb::DemuxerStreamReadUntilCallback();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::DemuxerStreamReadUntilCallback::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DemuxerStreamReadUntilCallback_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DemuxerStreamReadUntilCallback_media_5fremoting_5frpc_2eproto}, {
      &scc_info_AudioDecoderConfig_media_5fremoting_5frpc_2eproto.base,
      &scc_info_VideoDecoderConfig_media_5fremoting_5frpc_2eproto.base,}};

static void InitDefaultsscc_info_EncryptionScheme_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_EncryptionScheme_default_instance_;
    new (ptr) ::media::remoting::pb::EncryptionScheme();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::EncryptionScheme::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EncryptionScheme_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EncryptionScheme_media_5fremoting_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_PipelineDecoderInfo_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_PipelineDecoderInfo_default_instance_;
    new (ptr) ::media::remoting::pb::PipelineDecoderInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::PipelineDecoderInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PipelineDecoderInfo_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PipelineDecoderInfo_media_5fremoting_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_PipelineStatistics_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_PipelineStatistics_default_instance_;
    new (ptr) ::media::remoting::pb::PipelineStatistics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::PipelineStatistics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PipelineStatistics_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PipelineStatistics_media_5fremoting_5frpc_2eproto}, {
      &scc_info_PipelineDecoderInfo_media_5fremoting_5frpc_2eproto.base,}};

static void InitDefaultsscc_info_Rect_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_Rect_default_instance_;
    new (ptr) ::media::remoting::pb::Rect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::Rect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rect_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Rect_media_5fremoting_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_RendererClientOnAudioConfigChange_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_RendererClientOnAudioConfigChange_default_instance_;
    new (ptr) ::media::remoting::pb::RendererClientOnAudioConfigChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::RendererClientOnAudioConfigChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RendererClientOnAudioConfigChange_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RendererClientOnAudioConfigChange_media_5fremoting_5frpc_2eproto}, {
      &scc_info_AudioDecoderConfig_media_5fremoting_5frpc_2eproto.base,}};

static void InitDefaultsscc_info_RendererClientOnBufferingStateChange_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_RendererClientOnBufferingStateChange_default_instance_;
    new (ptr) ::media::remoting::pb::RendererClientOnBufferingStateChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::RendererClientOnBufferingStateChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RendererClientOnBufferingStateChange_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RendererClientOnBufferingStateChange_media_5fremoting_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_RendererClientOnTimeUpdate_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_RendererClientOnTimeUpdate_default_instance_;
    new (ptr) ::media::remoting::pb::RendererClientOnTimeUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::RendererClientOnTimeUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RendererClientOnTimeUpdate_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RendererClientOnTimeUpdate_media_5fremoting_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_RendererClientOnVideoConfigChange_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_RendererClientOnVideoConfigChange_default_instance_;
    new (ptr) ::media::remoting::pb::RendererClientOnVideoConfigChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::RendererClientOnVideoConfigChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RendererClientOnVideoConfigChange_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_RendererClientOnVideoConfigChange_media_5fremoting_5frpc_2eproto}, {
      &scc_info_VideoDecoderConfig_media_5fremoting_5frpc_2eproto.base,}};

static void InitDefaultsscc_info_RendererFlushUntil_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_RendererFlushUntil_default_instance_;
    new (ptr) ::media::remoting::pb::RendererFlushUntil();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::RendererFlushUntil::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RendererFlushUntil_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RendererFlushUntil_media_5fremoting_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_RendererInitialize_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_RendererInitialize_default_instance_;
    new (ptr) ::media::remoting::pb::RendererInitialize();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::RendererInitialize::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RendererInitialize_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RendererInitialize_media_5fremoting_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_RendererSetCdm_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_RendererSetCdm_default_instance_;
    new (ptr) ::media::remoting::pb::RendererSetCdm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::RendererSetCdm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RendererSetCdm_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RendererSetCdm_media_5fremoting_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_RpcMessage_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_RpcMessage_default_instance_;
    new (ptr) ::media::remoting::pb::RpcMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::RpcMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<24> scc_info_RpcMessage_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 24, InitDefaultsscc_info_RpcMessage_media_5fremoting_5frpc_2eproto}, {
      &scc_info_RendererInitialize_media_5fremoting_5frpc_2eproto.base,
      &scc_info_RendererFlushUntil_media_5fremoting_5frpc_2eproto.base,
      &scc_info_RendererSetCdm_media_5fremoting_5frpc_2eproto.base,
      &scc_info_AcquireDemuxer_media_5fremoting_5frpc_2eproto.base,
      &scc_info_RendererClientOnTimeUpdate_media_5fremoting_5frpc_2eproto.base,
      &scc_info_Size_media_5fremoting_5frpc_2eproto.base,
      &scc_info_PipelineStatistics_media_5fremoting_5frpc_2eproto.base,
      &scc_info_RendererClientOnBufferingStateChange_media_5fremoting_5frpc_2eproto.base,
      &scc_info_RendererClientOnAudioConfigChange_media_5fremoting_5frpc_2eproto.base,
      &scc_info_RendererClientOnVideoConfigChange_media_5fremoting_5frpc_2eproto.base,
      &scc_info_DemuxerStreamReadUntil_media_5fremoting_5frpc_2eproto.base,
      &scc_info_DemuxerStreamInitializeCallback_media_5fremoting_5frpc_2eproto.base,
      &scc_info_DemuxerStreamReadUntilCallback_media_5fremoting_5frpc_2eproto.base,
      &scc_info_CdmInitialize_media_5fremoting_5frpc_2eproto.base,
      &scc_info_CdmSetServerCertificate_media_5fremoting_5frpc_2eproto.base,
      &scc_info_CdmCreateSessionAndGenerateRequest_media_5fremoting_5frpc_2eproto.base,
      &scc_info_CdmLoadSession_media_5fremoting_5frpc_2eproto.base,
      &scc_info_CdmUpdateSession_media_5fremoting_5frpc_2eproto.base,
      &scc_info_CdmCloseSession_media_5fremoting_5frpc_2eproto.base,
      &scc_info_CdmRemoveSession_media_5fremoting_5frpc_2eproto.base,
      &scc_info_CdmPromise_media_5fremoting_5frpc_2eproto.base,
      &scc_info_CdmClientOnSessionMessage_media_5fremoting_5frpc_2eproto.base,
      &scc_info_CdmClientOnSessionKeysChange_media_5fremoting_5frpc_2eproto.base,
      &scc_info_CdmClientOnSessionExpirationUpdate_media_5fremoting_5frpc_2eproto.base,}};

static void InitDefaultsscc_info_Size_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_Size_default_instance_;
    new (ptr) ::media::remoting::pb::Size();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::Size::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Size_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Size_media_5fremoting_5frpc_2eproto}, {}};

static void InitDefaultsscc_info_VideoDecoderConfig_media_5fremoting_5frpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::remoting::pb::_VideoDecoderConfig_default_instance_;
    new (ptr) ::media::remoting::pb::VideoDecoderConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::remoting::pb::VideoDecoderConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_VideoDecoderConfig_media_5fremoting_5frpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_VideoDecoderConfig_media_5fremoting_5frpc_2eproto}, {
      &scc_info_EncryptionScheme_media_5fremoting_5frpc_2eproto.base,
      &scc_info_Size_media_5fremoting_5frpc_2eproto.base,
      &scc_info_Rect_media_5fremoting_5frpc_2eproto.base,}};

namespace media {
namespace remoting {
namespace pb {
bool EncryptionScheme_CipherMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> EncryptionScheme_CipherMode_strings[3] = {};

static const char EncryptionScheme_CipherMode_names[] =
  "CIPHER_MODE_AES_CBC"
  "CIPHER_MODE_AES_CTR"
  "CIPHER_MODE_UNENCRYPTED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry EncryptionScheme_CipherMode_entries[] = {
  { {EncryptionScheme_CipherMode_names + 0, 19}, 2 },
  { {EncryptionScheme_CipherMode_names + 19, 19}, 1 },
  { {EncryptionScheme_CipherMode_names + 38, 23}, 0 },
};

static const int EncryptionScheme_CipherMode_entries_by_number[] = {
  2, // 0 -> CIPHER_MODE_UNENCRYPTED
  1, // 1 -> CIPHER_MODE_AES_CTR
  0, // 2 -> CIPHER_MODE_AES_CBC
};

const std::string& EncryptionScheme_CipherMode_Name(
    EncryptionScheme_CipherMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          EncryptionScheme_CipherMode_entries,
          EncryptionScheme_CipherMode_entries_by_number,
          3, EncryptionScheme_CipherMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      EncryptionScheme_CipherMode_entries,
      EncryptionScheme_CipherMode_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     EncryptionScheme_CipherMode_strings[idx].get();
}
bool EncryptionScheme_CipherMode_Parse(
    const std::string& name, EncryptionScheme_CipherMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      EncryptionScheme_CipherMode_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<EncryptionScheme_CipherMode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EncryptionScheme_CipherMode EncryptionScheme::CIPHER_MODE_UNENCRYPTED;
constexpr EncryptionScheme_CipherMode EncryptionScheme::CIPHER_MODE_AES_CTR;
constexpr EncryptionScheme_CipherMode EncryptionScheme::CIPHER_MODE_AES_CBC;
constexpr EncryptionScheme_CipherMode EncryptionScheme::CipherMode_MIN;
constexpr EncryptionScheme_CipherMode EncryptionScheme::CipherMode_MAX;
constexpr int EncryptionScheme::CipherMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool AudioDecoderConfig_Codec_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AudioDecoderConfig_Codec_strings[18] = {};

static const char AudioDecoderConfig_Codec_names[] =
  "kCodecAAC"
  "kCodecAC3"
  "kCodecALAC"
  "kCodecAMR_NB"
  "kCodecAMR_WB"
  "kCodecEAC3"
  "kCodecFLAC"
  "kCodecGSM_MS"
  "kCodecMP3"
  "kCodecMpegHAudio"
  "kCodecOpus"
  "kCodecPCM"
  "kCodecPCM_ALAW"
  "kCodecPCM_MULAW"
  "kCodecPCM_S16BE"
  "kCodecPCM_S24BE"
  "kCodecVorbis"
  "kUnknownAudioCodec";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AudioDecoderConfig_Codec_entries[] = {
  { {AudioDecoderConfig_Codec_names + 0, 9}, 1 },
  { {AudioDecoderConfig_Codec_names + 9, 9}, 16 },
  { {AudioDecoderConfig_Codec_names + 18, 10}, 15 },
  { {AudioDecoderConfig_Codec_names + 28, 12}, 6 },
  { {AudioDecoderConfig_Codec_names + 40, 12}, 7 },
  { {AudioDecoderConfig_Codec_names + 52, 10}, 13 },
  { {AudioDecoderConfig_Codec_names + 62, 10}, 5 },
  { {AudioDecoderConfig_Codec_names + 72, 12}, 9 },
  { {AudioDecoderConfig_Codec_names + 84, 9}, 2 },
  { {AudioDecoderConfig_Codec_names + 93, 16}, 17 },
  { {AudioDecoderConfig_Codec_names + 109, 10}, 12 },
  { {AudioDecoderConfig_Codec_names + 119, 9}, 3 },
  { {AudioDecoderConfig_Codec_names + 128, 14}, 14 },
  { {AudioDecoderConfig_Codec_names + 142, 15}, 8 },
  { {AudioDecoderConfig_Codec_names + 157, 15}, 10 },
  { {AudioDecoderConfig_Codec_names + 172, 15}, 11 },
  { {AudioDecoderConfig_Codec_names + 187, 12}, 4 },
  { {AudioDecoderConfig_Codec_names + 199, 18}, 0 },
};

static const int AudioDecoderConfig_Codec_entries_by_number[] = {
  17, // 0 -> kUnknownAudioCodec
  0, // 1 -> kCodecAAC
  8, // 2 -> kCodecMP3
  11, // 3 -> kCodecPCM
  16, // 4 -> kCodecVorbis
  6, // 5 -> kCodecFLAC
  3, // 6 -> kCodecAMR_NB
  4, // 7 -> kCodecAMR_WB
  13, // 8 -> kCodecPCM_MULAW
  7, // 9 -> kCodecGSM_MS
  14, // 10 -> kCodecPCM_S16BE
  15, // 11 -> kCodecPCM_S24BE
  10, // 12 -> kCodecOpus
  5, // 13 -> kCodecEAC3
  12, // 14 -> kCodecPCM_ALAW
  2, // 15 -> kCodecALAC
  1, // 16 -> kCodecAC3
  9, // 17 -> kCodecMpegHAudio
};

const std::string& AudioDecoderConfig_Codec_Name(
    AudioDecoderConfig_Codec value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AudioDecoderConfig_Codec_entries,
          AudioDecoderConfig_Codec_entries_by_number,
          18, AudioDecoderConfig_Codec_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AudioDecoderConfig_Codec_entries,
      AudioDecoderConfig_Codec_entries_by_number,
      18, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AudioDecoderConfig_Codec_strings[idx].get();
}
bool AudioDecoderConfig_Codec_Parse(
    const std::string& name, AudioDecoderConfig_Codec* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AudioDecoderConfig_Codec_entries, 18, name, &int_value);
  if (success) {
    *value = static_cast<AudioDecoderConfig_Codec>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AudioDecoderConfig_Codec AudioDecoderConfig::kUnknownAudioCodec;
constexpr AudioDecoderConfig_Codec AudioDecoderConfig::kCodecAAC;
constexpr AudioDecoderConfig_Codec AudioDecoderConfig::kCodecMP3;
constexpr AudioDecoderConfig_Codec AudioDecoderConfig::kCodecPCM;
constexpr AudioDecoderConfig_Codec AudioDecoderConfig::kCodecVorbis;
constexpr AudioDecoderConfig_Codec AudioDecoderConfig::kCodecFLAC;
constexpr AudioDecoderConfig_Codec AudioDecoderConfig::kCodecAMR_NB;
constexpr AudioDecoderConfig_Codec AudioDecoderConfig::kCodecAMR_WB;
constexpr AudioDecoderConfig_Codec AudioDecoderConfig::kCodecPCM_MULAW;
constexpr AudioDecoderConfig_Codec AudioDecoderConfig::kCodecGSM_MS;
constexpr AudioDecoderConfig_Codec AudioDecoderConfig::kCodecPCM_S16BE;
constexpr AudioDecoderConfig_Codec AudioDecoderConfig::kCodecPCM_S24BE;
constexpr AudioDecoderConfig_Codec AudioDecoderConfig::kCodecOpus;
constexpr AudioDecoderConfig_Codec AudioDecoderConfig::kCodecEAC3;
constexpr AudioDecoderConfig_Codec AudioDecoderConfig::kCodecPCM_ALAW;
constexpr AudioDecoderConfig_Codec AudioDecoderConfig::kCodecALAC;
constexpr AudioDecoderConfig_Codec AudioDecoderConfig::kCodecAC3;
constexpr AudioDecoderConfig_Codec AudioDecoderConfig::kCodecMpegHAudio;
constexpr AudioDecoderConfig_Codec AudioDecoderConfig::Codec_MIN;
constexpr AudioDecoderConfig_Codec AudioDecoderConfig::Codec_MAX;
constexpr int AudioDecoderConfig::Codec_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool AudioDecoderConfig_SampleFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AudioDecoderConfig_SampleFormat_strings[12] = {};

static const char AudioDecoderConfig_SampleFormat_names[] =
  "kSampleFormatAc3"
  "kSampleFormatEac3"
  "kSampleFormatF32"
  "kSampleFormatMpegHAudio"
  "kSampleFormatPlanarF32"
  "kSampleFormatPlanarS16"
  "kSampleFormatPlanarS32"
  "kSampleFormatS16"
  "kSampleFormatS24"
  "kSampleFormatS32"
  "kSampleFormatU8"
  "kUnknownSampleFormat";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AudioDecoderConfig_SampleFormat_entries[] = {
  { {AudioDecoderConfig_SampleFormat_names + 0, 16}, 9 },
  { {AudioDecoderConfig_SampleFormat_names + 16, 17}, 10 },
  { {AudioDecoderConfig_SampleFormat_names + 33, 16}, 4 },
  { {AudioDecoderConfig_SampleFormat_names + 49, 23}, 11 },
  { {AudioDecoderConfig_SampleFormat_names + 72, 22}, 6 },
  { {AudioDecoderConfig_SampleFormat_names + 94, 22}, 5 },
  { {AudioDecoderConfig_SampleFormat_names + 116, 22}, 7 },
  { {AudioDecoderConfig_SampleFormat_names + 138, 16}, 2 },
  { {AudioDecoderConfig_SampleFormat_names + 154, 16}, 8 },
  { {AudioDecoderConfig_SampleFormat_names + 170, 16}, 3 },
  { {AudioDecoderConfig_SampleFormat_names + 186, 15}, 1 },
  { {AudioDecoderConfig_SampleFormat_names + 201, 20}, 0 },
};

static const int AudioDecoderConfig_SampleFormat_entries_by_number[] = {
  11, // 0 -> kUnknownSampleFormat
  10, // 1 -> kSampleFormatU8
  7, // 2 -> kSampleFormatS16
  9, // 3 -> kSampleFormatS32
  2, // 4 -> kSampleFormatF32
  5, // 5 -> kSampleFormatPlanarS16
  4, // 6 -> kSampleFormatPlanarF32
  6, // 7 -> kSampleFormatPlanarS32
  8, // 8 -> kSampleFormatS24
  0, // 9 -> kSampleFormatAc3
  1, // 10 -> kSampleFormatEac3
  3, // 11 -> kSampleFormatMpegHAudio
};

const std::string& AudioDecoderConfig_SampleFormat_Name(
    AudioDecoderConfig_SampleFormat value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AudioDecoderConfig_SampleFormat_entries,
          AudioDecoderConfig_SampleFormat_entries_by_number,
          12, AudioDecoderConfig_SampleFormat_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AudioDecoderConfig_SampleFormat_entries,
      AudioDecoderConfig_SampleFormat_entries_by_number,
      12, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AudioDecoderConfig_SampleFormat_strings[idx].get();
}
bool AudioDecoderConfig_SampleFormat_Parse(
    const std::string& name, AudioDecoderConfig_SampleFormat* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AudioDecoderConfig_SampleFormat_entries, 12, name, &int_value);
  if (success) {
    *value = static_cast<AudioDecoderConfig_SampleFormat>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AudioDecoderConfig_SampleFormat AudioDecoderConfig::kUnknownSampleFormat;
constexpr AudioDecoderConfig_SampleFormat AudioDecoderConfig::kSampleFormatU8;
constexpr AudioDecoderConfig_SampleFormat AudioDecoderConfig::kSampleFormatS16;
constexpr AudioDecoderConfig_SampleFormat AudioDecoderConfig::kSampleFormatS32;
constexpr AudioDecoderConfig_SampleFormat AudioDecoderConfig::kSampleFormatF32;
constexpr AudioDecoderConfig_SampleFormat AudioDecoderConfig::kSampleFormatPlanarS16;
constexpr AudioDecoderConfig_SampleFormat AudioDecoderConfig::kSampleFormatPlanarF32;
constexpr AudioDecoderConfig_SampleFormat AudioDecoderConfig::kSampleFormatPlanarS32;
constexpr AudioDecoderConfig_SampleFormat AudioDecoderConfig::kSampleFormatS24;
constexpr AudioDecoderConfig_SampleFormat AudioDecoderConfig::kSampleFormatAc3;
constexpr AudioDecoderConfig_SampleFormat AudioDecoderConfig::kSampleFormatEac3;
constexpr AudioDecoderConfig_SampleFormat AudioDecoderConfig::kSampleFormatMpegHAudio;
constexpr AudioDecoderConfig_SampleFormat AudioDecoderConfig::SampleFormat_MIN;
constexpr AudioDecoderConfig_SampleFormat AudioDecoderConfig::SampleFormat_MAX;
constexpr int AudioDecoderConfig::SampleFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool AudioDecoderConfig_ChannelLayout_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> AudioDecoderConfig_ChannelLayout_strings[33] = {};

static const char AudioDecoderConfig_ChannelLayout_names[] =
  "CHANNEL_LAYOUT_2POINT1"
  "CHANNEL_LAYOUT_2_1"
  "CHANNEL_LAYOUT_2_2"
  "CHANNEL_LAYOUT_3_1"
  "CHANNEL_LAYOUT_4_0"
  "CHANNEL_LAYOUT_4_1"
  "CHANNEL_LAYOUT_4_1_QUAD_SIDE"
  "CHANNEL_LAYOUT_5_0"
  "CHANNEL_LAYOUT_5_0_BACK"
  "CHANNEL_LAYOUT_5_1"
  "CHANNEL_LAYOUT_5_1_BACK"
  "CHANNEL_LAYOUT_6_0"
  "CHANNEL_LAYOUT_6_0_FRONT"
  "CHANNEL_LAYOUT_6_1"
  "CHANNEL_LAYOUT_6_1_BACK"
  "CHANNEL_LAYOUT_6_1_FRONT"
  "CHANNEL_LAYOUT_7_0"
  "CHANNEL_LAYOUT_7_0_FRONT"
  "CHANNEL_LAYOUT_7_1"
  "CHANNEL_LAYOUT_7_1_WIDE"
  "CHANNEL_LAYOUT_7_1_WIDE_BACK"
  "CHANNEL_LAYOUT_BITSTREAM"
  "CHANNEL_LAYOUT_DISCRETE"
  "CHANNEL_LAYOUT_HEXAGONAL"
  "CHANNEL_LAYOUT_MONO"
  "CHANNEL_LAYOUT_NONE"
  "CHANNEL_LAYOUT_OCTAGONAL"
  "CHANNEL_LAYOUT_QUAD"
  "CHANNEL_LAYOUT_STEREO"
  "CHANNEL_LAYOUT_STEREO_AND_KEYBOARD_MIC"
  "CHANNEL_LAYOUT_STEREO_DOWNMIX"
  "CHANNEL_LAYOUT_SURROUND"
  "CHANNEL_LAYOUT_UNSUPPORTED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry AudioDecoderConfig_ChannelLayout_entries[] = {
  { {AudioDecoderConfig_ChannelLayout_names + 0, 22}, 17 },
  { {AudioDecoderConfig_ChannelLayout_names + 22, 18}, 4 },
  { {AudioDecoderConfig_ChannelLayout_names + 40, 18}, 7 },
  { {AudioDecoderConfig_ChannelLayout_names + 58, 18}, 18 },
  { {AudioDecoderConfig_ChannelLayout_names + 76, 18}, 6 },
  { {AudioDecoderConfig_ChannelLayout_names + 94, 18}, 19 },
  { {AudioDecoderConfig_ChannelLayout_names + 112, 28}, 31 },
  { {AudioDecoderConfig_ChannelLayout_names + 140, 18}, 9 },
  { {AudioDecoderConfig_ChannelLayout_names + 158, 23}, 11 },
  { {AudioDecoderConfig_ChannelLayout_names + 181, 18}, 10 },
  { {AudioDecoderConfig_ChannelLayout_names + 199, 23}, 12 },
  { {AudioDecoderConfig_ChannelLayout_names + 222, 18}, 20 },
  { {AudioDecoderConfig_ChannelLayout_names + 240, 24}, 21 },
  { {AudioDecoderConfig_ChannelLayout_names + 264, 18}, 23 },
  { {AudioDecoderConfig_ChannelLayout_names + 282, 23}, 24 },
  { {AudioDecoderConfig_ChannelLayout_names + 305, 24}, 25 },
  { {AudioDecoderConfig_ChannelLayout_names + 329, 18}, 13 },
  { {AudioDecoderConfig_ChannelLayout_names + 347, 24}, 26 },
  { {AudioDecoderConfig_ChannelLayout_names + 371, 18}, 14 },
  { {AudioDecoderConfig_ChannelLayout_names + 389, 23}, 15 },
  { {AudioDecoderConfig_ChannelLayout_names + 412, 28}, 27 },
  { {AudioDecoderConfig_ChannelLayout_names + 440, 24}, 32 },
  { {AudioDecoderConfig_ChannelLayout_names + 464, 23}, 29 },
  { {AudioDecoderConfig_ChannelLayout_names + 487, 24}, 22 },
  { {AudioDecoderConfig_ChannelLayout_names + 511, 19}, 2 },
  { {AudioDecoderConfig_ChannelLayout_names + 530, 19}, 0 },
  { {AudioDecoderConfig_ChannelLayout_names + 549, 24}, 28 },
  { {AudioDecoderConfig_ChannelLayout_names + 573, 19}, 8 },
  { {AudioDecoderConfig_ChannelLayout_names + 592, 21}, 3 },
  { {AudioDecoderConfig_ChannelLayout_names + 613, 38}, 30 },
  { {AudioDecoderConfig_ChannelLayout_names + 651, 29}, 16 },
  { {AudioDecoderConfig_ChannelLayout_names + 680, 23}, 5 },
  { {AudioDecoderConfig_ChannelLayout_names + 703, 26}, 1 },
};

static const int AudioDecoderConfig_ChannelLayout_entries_by_number[] = {
  25, // 0 -> CHANNEL_LAYOUT_NONE
  32, // 1 -> CHANNEL_LAYOUT_UNSUPPORTED
  24, // 2 -> CHANNEL_LAYOUT_MONO
  28, // 3 -> CHANNEL_LAYOUT_STEREO
  1, // 4 -> CHANNEL_LAYOUT_2_1
  31, // 5 -> CHANNEL_LAYOUT_SURROUND
  4, // 6 -> CHANNEL_LAYOUT_4_0
  2, // 7 -> CHANNEL_LAYOUT_2_2
  27, // 8 -> CHANNEL_LAYOUT_QUAD
  7, // 9 -> CHANNEL_LAYOUT_5_0
  9, // 10 -> CHANNEL_LAYOUT_5_1
  8, // 11 -> CHANNEL_LAYOUT_5_0_BACK
  10, // 12 -> CHANNEL_LAYOUT_5_1_BACK
  16, // 13 -> CHANNEL_LAYOUT_7_0
  18, // 14 -> CHANNEL_LAYOUT_7_1
  19, // 15 -> CHANNEL_LAYOUT_7_1_WIDE
  30, // 16 -> CHANNEL_LAYOUT_STEREO_DOWNMIX
  0, // 17 -> CHANNEL_LAYOUT_2POINT1
  3, // 18 -> CHANNEL_LAYOUT_3_1
  5, // 19 -> CHANNEL_LAYOUT_4_1
  11, // 20 -> CHANNEL_LAYOUT_6_0
  12, // 21 -> CHANNEL_LAYOUT_6_0_FRONT
  23, // 22 -> CHANNEL_LAYOUT_HEXAGONAL
  13, // 23 -> CHANNEL_LAYOUT_6_1
  14, // 24 -> CHANNEL_LAYOUT_6_1_BACK
  15, // 25 -> CHANNEL_LAYOUT_6_1_FRONT
  17, // 26 -> CHANNEL_LAYOUT_7_0_FRONT
  20, // 27 -> CHANNEL_LAYOUT_7_1_WIDE_BACK
  26, // 28 -> CHANNEL_LAYOUT_OCTAGONAL
  22, // 29 -> CHANNEL_LAYOUT_DISCRETE
  29, // 30 -> CHANNEL_LAYOUT_STEREO_AND_KEYBOARD_MIC
  6, // 31 -> CHANNEL_LAYOUT_4_1_QUAD_SIDE
  21, // 32 -> CHANNEL_LAYOUT_BITSTREAM
};

const std::string& AudioDecoderConfig_ChannelLayout_Name(
    AudioDecoderConfig_ChannelLayout value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          AudioDecoderConfig_ChannelLayout_entries,
          AudioDecoderConfig_ChannelLayout_entries_by_number,
          33, AudioDecoderConfig_ChannelLayout_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      AudioDecoderConfig_ChannelLayout_entries,
      AudioDecoderConfig_ChannelLayout_entries_by_number,
      33, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     AudioDecoderConfig_ChannelLayout_strings[idx].get();
}
bool AudioDecoderConfig_ChannelLayout_Parse(
    const std::string& name, AudioDecoderConfig_ChannelLayout* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      AudioDecoderConfig_ChannelLayout_entries, 33, name, &int_value);
  if (success) {
    *value = static_cast<AudioDecoderConfig_ChannelLayout>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::CHANNEL_LAYOUT_NONE;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::CHANNEL_LAYOUT_UNSUPPORTED;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::CHANNEL_LAYOUT_MONO;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::CHANNEL_LAYOUT_STEREO;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::CHANNEL_LAYOUT_2_1;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::CHANNEL_LAYOUT_SURROUND;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::CHANNEL_LAYOUT_4_0;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::CHANNEL_LAYOUT_2_2;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::CHANNEL_LAYOUT_QUAD;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::CHANNEL_LAYOUT_5_0;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::CHANNEL_LAYOUT_5_1;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::CHANNEL_LAYOUT_5_0_BACK;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::CHANNEL_LAYOUT_5_1_BACK;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::CHANNEL_LAYOUT_7_0;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::CHANNEL_LAYOUT_7_1;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::CHANNEL_LAYOUT_7_1_WIDE;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::CHANNEL_LAYOUT_STEREO_DOWNMIX;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::CHANNEL_LAYOUT_2POINT1;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::CHANNEL_LAYOUT_3_1;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::CHANNEL_LAYOUT_4_1;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::CHANNEL_LAYOUT_6_0;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::CHANNEL_LAYOUT_6_0_FRONT;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::CHANNEL_LAYOUT_HEXAGONAL;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::CHANNEL_LAYOUT_6_1;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::CHANNEL_LAYOUT_6_1_BACK;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::CHANNEL_LAYOUT_6_1_FRONT;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::CHANNEL_LAYOUT_7_0_FRONT;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::CHANNEL_LAYOUT_7_1_WIDE_BACK;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::CHANNEL_LAYOUT_OCTAGONAL;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::CHANNEL_LAYOUT_DISCRETE;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::CHANNEL_LAYOUT_STEREO_AND_KEYBOARD_MIC;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::CHANNEL_LAYOUT_4_1_QUAD_SIDE;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::CHANNEL_LAYOUT_BITSTREAM;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::ChannelLayout_MIN;
constexpr AudioDecoderConfig_ChannelLayout AudioDecoderConfig::ChannelLayout_MAX;
constexpr int AudioDecoderConfig::ChannelLayout_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool VideoDecoderConfig_Codec_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> VideoDecoderConfig_Codec_strings[11] = {};

static const char VideoDecoderConfig_Codec_names[] =
  "kCodecAV1"
  "kCodecDolbyVision"
  "kCodecH264"
  "kCodecHEVC"
  "kCodecMPEG2"
  "kCodecMPEG4"
  "kCodecTheora"
  "kCodecVC1"
  "kCodecVP8"
  "kCodecVP9"
  "kUnknownVideoCodec";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry VideoDecoderConfig_Codec_entries[] = {
  { {VideoDecoderConfig_Codec_names + 0, 9}, 10 },
  { {VideoDecoderConfig_Codec_names + 9, 17}, 9 },
  { {VideoDecoderConfig_Codec_names + 26, 10}, 1 },
  { {VideoDecoderConfig_Codec_names + 36, 10}, 8 },
  { {VideoDecoderConfig_Codec_names + 46, 11}, 3 },
  { {VideoDecoderConfig_Codec_names + 57, 11}, 4 },
  { {VideoDecoderConfig_Codec_names + 68, 12}, 5 },
  { {VideoDecoderConfig_Codec_names + 80, 9}, 2 },
  { {VideoDecoderConfig_Codec_names + 89, 9}, 6 },
  { {VideoDecoderConfig_Codec_names + 98, 9}, 7 },
  { {VideoDecoderConfig_Codec_names + 107, 18}, 0 },
};

static const int VideoDecoderConfig_Codec_entries_by_number[] = {
  10, // 0 -> kUnknownVideoCodec
  2, // 1 -> kCodecH264
  7, // 2 -> kCodecVC1
  4, // 3 -> kCodecMPEG2
  5, // 4 -> kCodecMPEG4
  6, // 5 -> kCodecTheora
  8, // 6 -> kCodecVP8
  9, // 7 -> kCodecVP9
  3, // 8 -> kCodecHEVC
  1, // 9 -> kCodecDolbyVision
  0, // 10 -> kCodecAV1
};

const std::string& VideoDecoderConfig_Codec_Name(
    VideoDecoderConfig_Codec value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          VideoDecoderConfig_Codec_entries,
          VideoDecoderConfig_Codec_entries_by_number,
          11, VideoDecoderConfig_Codec_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      VideoDecoderConfig_Codec_entries,
      VideoDecoderConfig_Codec_entries_by_number,
      11, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     VideoDecoderConfig_Codec_strings[idx].get();
}
bool VideoDecoderConfig_Codec_Parse(
    const std::string& name, VideoDecoderConfig_Codec* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      VideoDecoderConfig_Codec_entries, 11, name, &int_value);
  if (success) {
    *value = static_cast<VideoDecoderConfig_Codec>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VideoDecoderConfig_Codec VideoDecoderConfig::kUnknownVideoCodec;
constexpr VideoDecoderConfig_Codec VideoDecoderConfig::kCodecH264;
constexpr VideoDecoderConfig_Codec VideoDecoderConfig::kCodecVC1;
constexpr VideoDecoderConfig_Codec VideoDecoderConfig::kCodecMPEG2;
constexpr VideoDecoderConfig_Codec VideoDecoderConfig::kCodecMPEG4;
constexpr VideoDecoderConfig_Codec VideoDecoderConfig::kCodecTheora;
constexpr VideoDecoderConfig_Codec VideoDecoderConfig::kCodecVP8;
constexpr VideoDecoderConfig_Codec VideoDecoderConfig::kCodecVP9;
constexpr VideoDecoderConfig_Codec VideoDecoderConfig::kCodecHEVC;
constexpr VideoDecoderConfig_Codec VideoDecoderConfig::kCodecDolbyVision;
constexpr VideoDecoderConfig_Codec VideoDecoderConfig::kCodecAV1;
constexpr VideoDecoderConfig_Codec VideoDecoderConfig::Codec_MIN;
constexpr VideoDecoderConfig_Codec VideoDecoderConfig::Codec_MAX;
constexpr int VideoDecoderConfig::Codec_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool VideoDecoderConfig_Profile_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> VideoDecoderConfig_Profile_strings[30] = {};

static const char VideoDecoderConfig_Profile_names[] =
  "AV1PROFILE_PROFILE_HIGH"
  "AV1PROFILE_PROFILE_MAIN"
  "AV1PROFILE_PROFILE_PRO"
  "DOLBYVISION_PROFILE0"
  "DOLBYVISION_PROFILE4"
  "DOLBYVISION_PROFILE5"
  "DOLBYVISION_PROFILE7"
  "DOLBYVISION_PROFILE8"
  "DOLBYVISION_PROFILE9"
  "H264PROFILE_BASELINE"
  "H264PROFILE_EXTENDED"
  "H264PROFILE_HIGH"
  "H264PROFILE_HIGH10PROFILE"
  "H264PROFILE_HIGH422PROFILE"
  "H264PROFILE_HIGH444PREDICTIVEPROFILE"
  "H264PROFILE_MAIN"
  "H264PROFILE_MULTIVIEWHIGH"
  "H264PROFILE_SCALABLEBASELINE"
  "H264PROFILE_SCALABLEHIGH"
  "H264PROFILE_STEREOHIGH"
  "HEVCPROFILE_MAIN"
  "HEVCPROFILE_MAIN10"
  "HEVCPROFILE_MAIN_STILL_PICTURE"
  "THEORAPROFILE_ANY"
  "VIDEO_CODEC_PROFILE_UNKNOWN"
  "VP8PROFILE_ANY"
  "VP9PROFILE_PROFILE0"
  "VP9PROFILE_PROFILE1"
  "VP9PROFILE_PROFILE2"
  "VP9PROFILE_PROFILE3";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry VideoDecoderConfig_Profile_entries[] = {
  { {VideoDecoderConfig_Profile_names + 0, 23}, 25 },
  { {VideoDecoderConfig_Profile_names + 23, 23}, 24 },
  { {VideoDecoderConfig_Profile_names + 46, 22}, 26 },
  { {VideoDecoderConfig_Profile_names + 68, 20}, 19 },
  { {VideoDecoderConfig_Profile_names + 88, 20}, 20 },
  { {VideoDecoderConfig_Profile_names + 108, 20}, 21 },
  { {VideoDecoderConfig_Profile_names + 128, 20}, 22 },
  { {VideoDecoderConfig_Profile_names + 148, 20}, 27 },
  { {VideoDecoderConfig_Profile_names + 168, 20}, 28 },
  { {VideoDecoderConfig_Profile_names + 188, 20}, 0 },
  { {VideoDecoderConfig_Profile_names + 208, 20}, 2 },
  { {VideoDecoderConfig_Profile_names + 228, 16}, 3 },
  { {VideoDecoderConfig_Profile_names + 244, 25}, 4 },
  { {VideoDecoderConfig_Profile_names + 269, 26}, 5 },
  { {VideoDecoderConfig_Profile_names + 295, 36}, 6 },
  { {VideoDecoderConfig_Profile_names + 331, 16}, 1 },
  { {VideoDecoderConfig_Profile_names + 347, 25}, 10 },
  { {VideoDecoderConfig_Profile_names + 372, 28}, 7 },
  { {VideoDecoderConfig_Profile_names + 400, 24}, 8 },
  { {VideoDecoderConfig_Profile_names + 424, 22}, 9 },
  { {VideoDecoderConfig_Profile_names + 446, 16}, 16 },
  { {VideoDecoderConfig_Profile_names + 462, 18}, 17 },
  { {VideoDecoderConfig_Profile_names + 480, 30}, 18 },
  { {VideoDecoderConfig_Profile_names + 510, 17}, 23 },
  { {VideoDecoderConfig_Profile_names + 527, 27}, -1 },
  { {VideoDecoderConfig_Profile_names + 554, 14}, 11 },
  { {VideoDecoderConfig_Profile_names + 568, 19}, 12 },
  { {VideoDecoderConfig_Profile_names + 587, 19}, 13 },
  { {VideoDecoderConfig_Profile_names + 606, 19}, 14 },
  { {VideoDecoderConfig_Profile_names + 625, 19}, 15 },
};

static const int VideoDecoderConfig_Profile_entries_by_number[] = {
  24, // -1 -> VIDEO_CODEC_PROFILE_UNKNOWN
  9, // 0 -> H264PROFILE_BASELINE
  15, // 1 -> H264PROFILE_MAIN
  10, // 2 -> H264PROFILE_EXTENDED
  11, // 3 -> H264PROFILE_HIGH
  12, // 4 -> H264PROFILE_HIGH10PROFILE
  13, // 5 -> H264PROFILE_HIGH422PROFILE
  14, // 6 -> H264PROFILE_HIGH444PREDICTIVEPROFILE
  17, // 7 -> H264PROFILE_SCALABLEBASELINE
  18, // 8 -> H264PROFILE_SCALABLEHIGH
  19, // 9 -> H264PROFILE_STEREOHIGH
  16, // 10 -> H264PROFILE_MULTIVIEWHIGH
  25, // 11 -> VP8PROFILE_ANY
  26, // 12 -> VP9PROFILE_PROFILE0
  27, // 13 -> VP9PROFILE_PROFILE1
  28, // 14 -> VP9PROFILE_PROFILE2
  29, // 15 -> VP9PROFILE_PROFILE3
  20, // 16 -> HEVCPROFILE_MAIN
  21, // 17 -> HEVCPROFILE_MAIN10
  22, // 18 -> HEVCPROFILE_MAIN_STILL_PICTURE
  3, // 19 -> DOLBYVISION_PROFILE0
  4, // 20 -> DOLBYVISION_PROFILE4
  5, // 21 -> DOLBYVISION_PROFILE5
  6, // 22 -> DOLBYVISION_PROFILE7
  23, // 23 -> THEORAPROFILE_ANY
  1, // 24 -> AV1PROFILE_PROFILE_MAIN
  0, // 25 -> AV1PROFILE_PROFILE_HIGH
  2, // 26 -> AV1PROFILE_PROFILE_PRO
  7, // 27 -> DOLBYVISION_PROFILE8
  8, // 28 -> DOLBYVISION_PROFILE9
};

const std::string& VideoDecoderConfig_Profile_Name(
    VideoDecoderConfig_Profile value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          VideoDecoderConfig_Profile_entries,
          VideoDecoderConfig_Profile_entries_by_number,
          30, VideoDecoderConfig_Profile_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      VideoDecoderConfig_Profile_entries,
      VideoDecoderConfig_Profile_entries_by_number,
      30, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     VideoDecoderConfig_Profile_strings[idx].get();
}
bool VideoDecoderConfig_Profile_Parse(
    const std::string& name, VideoDecoderConfig_Profile* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      VideoDecoderConfig_Profile_entries, 30, name, &int_value);
  if (success) {
    *value = static_cast<VideoDecoderConfig_Profile>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VideoDecoderConfig_Profile VideoDecoderConfig::VIDEO_CODEC_PROFILE_UNKNOWN;
constexpr VideoDecoderConfig_Profile VideoDecoderConfig::H264PROFILE_BASELINE;
constexpr VideoDecoderConfig_Profile VideoDecoderConfig::H264PROFILE_MAIN;
constexpr VideoDecoderConfig_Profile VideoDecoderConfig::H264PROFILE_EXTENDED;
constexpr VideoDecoderConfig_Profile VideoDecoderConfig::H264PROFILE_HIGH;
constexpr VideoDecoderConfig_Profile VideoDecoderConfig::H264PROFILE_HIGH10PROFILE;
constexpr VideoDecoderConfig_Profile VideoDecoderConfig::H264PROFILE_HIGH422PROFILE;
constexpr VideoDecoderConfig_Profile VideoDecoderConfig::H264PROFILE_HIGH444PREDICTIVEPROFILE;
constexpr VideoDecoderConfig_Profile VideoDecoderConfig::H264PROFILE_SCALABLEBASELINE;
constexpr VideoDecoderConfig_Profile VideoDecoderConfig::H264PROFILE_SCALABLEHIGH;
constexpr VideoDecoderConfig_Profile VideoDecoderConfig::H264PROFILE_STEREOHIGH;
constexpr VideoDecoderConfig_Profile VideoDecoderConfig::H264PROFILE_MULTIVIEWHIGH;
constexpr VideoDecoderConfig_Profile VideoDecoderConfig::VP8PROFILE_ANY;
constexpr VideoDecoderConfig_Profile VideoDecoderConfig::VP9PROFILE_PROFILE0;
constexpr VideoDecoderConfig_Profile VideoDecoderConfig::VP9PROFILE_PROFILE1;
constexpr VideoDecoderConfig_Profile VideoDecoderConfig::VP9PROFILE_PROFILE2;
constexpr VideoDecoderConfig_Profile VideoDecoderConfig::VP9PROFILE_PROFILE3;
constexpr VideoDecoderConfig_Profile VideoDecoderConfig::HEVCPROFILE_MAIN;
constexpr VideoDecoderConfig_Profile VideoDecoderConfig::HEVCPROFILE_MAIN10;
constexpr VideoDecoderConfig_Profile VideoDecoderConfig::HEVCPROFILE_MAIN_STILL_PICTURE;
constexpr VideoDecoderConfig_Profile VideoDecoderConfig::DOLBYVISION_PROFILE0;
constexpr VideoDecoderConfig_Profile VideoDecoderConfig::DOLBYVISION_PROFILE4;
constexpr VideoDecoderConfig_Profile VideoDecoderConfig::DOLBYVISION_PROFILE5;
constexpr VideoDecoderConfig_Profile VideoDecoderConfig::DOLBYVISION_PROFILE7;
constexpr VideoDecoderConfig_Profile VideoDecoderConfig::THEORAPROFILE_ANY;
constexpr VideoDecoderConfig_Profile VideoDecoderConfig::AV1PROFILE_PROFILE_MAIN;
constexpr VideoDecoderConfig_Profile VideoDecoderConfig::AV1PROFILE_PROFILE_HIGH;
constexpr VideoDecoderConfig_Profile VideoDecoderConfig::AV1PROFILE_PROFILE_PRO;
constexpr VideoDecoderConfig_Profile VideoDecoderConfig::DOLBYVISION_PROFILE8;
constexpr VideoDecoderConfig_Profile VideoDecoderConfig::DOLBYVISION_PROFILE9;
constexpr VideoDecoderConfig_Profile VideoDecoderConfig::Profile_MIN;
constexpr VideoDecoderConfig_Profile VideoDecoderConfig::Profile_MAX;
constexpr int VideoDecoderConfig::Profile_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool VideoDecoderConfig_Format_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> VideoDecoderConfig_Format_strings[31] = {};

static const char VideoDecoderConfig_Format_names[] =
  "PIXEL_FORMAT_ABGR"
  "PIXEL_FORMAT_ARGB"
  "PIXEL_FORMAT_I420"
  "PIXEL_FORMAT_I420A"
  "PIXEL_FORMAT_I422"
  "PIXEL_FORMAT_I444"
  "PIXEL_FORMAT_MJPEG"
  "PIXEL_FORMAT_NV12"
  "PIXEL_FORMAT_NV21"
  "PIXEL_FORMAT_P016LE"
  "PIXEL_FORMAT_RGB24"
  "PIXEL_FORMAT_RGB32"
  "PIXEL_FORMAT_UNKNOWN"
  "PIXEL_FORMAT_UYVY"
  "PIXEL_FORMAT_XB30"
  "PIXEL_FORMAT_XBGR"
  "PIXEL_FORMAT_XR30"
  "PIXEL_FORMAT_XRGB"
  "PIXEL_FORMAT_Y16"
  "PIXEL_FORMAT_Y8"
  "PIXEL_FORMAT_YUV420P10"
  "PIXEL_FORMAT_YUV420P12"
  "PIXEL_FORMAT_YUV420P9"
  "PIXEL_FORMAT_YUV422P10"
  "PIXEL_FORMAT_YUV422P12"
  "PIXEL_FORMAT_YUV422P9"
  "PIXEL_FORMAT_YUV444P10"
  "PIXEL_FORMAT_YUV444P12"
  "PIXEL_FORMAT_YUV444P9"
  "PIXEL_FORMAT_YUY2"
  "PIXEL_FORMAT_YV12";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry VideoDecoderConfig_Format_entries[] = {
  { {VideoDecoderConfig_Format_names + 0, 17}, 27 },
  { {VideoDecoderConfig_Format_names + 17, 17}, 10 },
  { {VideoDecoderConfig_Format_names + 34, 17}, 1 },
  { {VideoDecoderConfig_Format_names + 51, 18}, 4 },
  { {VideoDecoderConfig_Format_names + 69, 17}, 3 },
  { {VideoDecoderConfig_Format_names + 86, 17}, 5 },
  { {VideoDecoderConfig_Format_names + 103, 18}, 14 },
  { {VideoDecoderConfig_Format_names + 121, 17}, 6 },
  { {VideoDecoderConfig_Format_names + 138, 17}, 7 },
  { {VideoDecoderConfig_Format_names + 155, 19}, 29 },
  { {VideoDecoderConfig_Format_names + 174, 18}, 12 },
  { {VideoDecoderConfig_Format_names + 192, 18}, 13 },
  { {VideoDecoderConfig_Format_names + 210, 20}, 0 },
  { {VideoDecoderConfig_Format_names + 230, 17}, 8 },
  { {VideoDecoderConfig_Format_names + 247, 17}, 31 },
  { {VideoDecoderConfig_Format_names + 264, 17}, 28 },
  { {VideoDecoderConfig_Format_names + 281, 17}, 30 },
  { {VideoDecoderConfig_Format_names + 298, 17}, 11 },
  { {VideoDecoderConfig_Format_names + 315, 16}, 26 },
  { {VideoDecoderConfig_Format_names + 331, 15}, 25 },
  { {VideoDecoderConfig_Format_names + 346, 22}, 17 },
  { {VideoDecoderConfig_Format_names + 368, 22}, 22 },
  { {VideoDecoderConfig_Format_names + 390, 21}, 16 },
  { {VideoDecoderConfig_Format_names + 411, 22}, 19 },
  { {VideoDecoderConfig_Format_names + 433, 22}, 23 },
  { {VideoDecoderConfig_Format_names + 455, 21}, 18 },
  { {VideoDecoderConfig_Format_names + 476, 22}, 21 },
  { {VideoDecoderConfig_Format_names + 498, 22}, 24 },
  { {VideoDecoderConfig_Format_names + 520, 21}, 20 },
  { {VideoDecoderConfig_Format_names + 541, 17}, 9 },
  { {VideoDecoderConfig_Format_names + 558, 17}, 2 },
};

static const int VideoDecoderConfig_Format_entries_by_number[] = {
  12, // 0 -> PIXEL_FORMAT_UNKNOWN
  2, // 1 -> PIXEL_FORMAT_I420
  30, // 2 -> PIXEL_FORMAT_YV12
  4, // 3 -> PIXEL_FORMAT_I422
  3, // 4 -> PIXEL_FORMAT_I420A
  5, // 5 -> PIXEL_FORMAT_I444
  7, // 6 -> PIXEL_FORMAT_NV12
  8, // 7 -> PIXEL_FORMAT_NV21
  13, // 8 -> PIXEL_FORMAT_UYVY
  29, // 9 -> PIXEL_FORMAT_YUY2
  1, // 10 -> PIXEL_FORMAT_ARGB
  17, // 11 -> PIXEL_FORMAT_XRGB
  10, // 12 -> PIXEL_FORMAT_RGB24
  11, // 13 -> PIXEL_FORMAT_RGB32
  6, // 14 -> PIXEL_FORMAT_MJPEG
  22, // 16 -> PIXEL_FORMAT_YUV420P9
  20, // 17 -> PIXEL_FORMAT_YUV420P10
  25, // 18 -> PIXEL_FORMAT_YUV422P9
  23, // 19 -> PIXEL_FORMAT_YUV422P10
  28, // 20 -> PIXEL_FORMAT_YUV444P9
  26, // 21 -> PIXEL_FORMAT_YUV444P10
  21, // 22 -> PIXEL_FORMAT_YUV420P12
  24, // 23 -> PIXEL_FORMAT_YUV422P12
  27, // 24 -> PIXEL_FORMAT_YUV444P12
  19, // 25 -> PIXEL_FORMAT_Y8
  18, // 26 -> PIXEL_FORMAT_Y16
  0, // 27 -> PIXEL_FORMAT_ABGR
  15, // 28 -> PIXEL_FORMAT_XBGR
  9, // 29 -> PIXEL_FORMAT_P016LE
  16, // 30 -> PIXEL_FORMAT_XR30
  14, // 31 -> PIXEL_FORMAT_XB30
};

const std::string& VideoDecoderConfig_Format_Name(
    VideoDecoderConfig_Format value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          VideoDecoderConfig_Format_entries,
          VideoDecoderConfig_Format_entries_by_number,
          31, VideoDecoderConfig_Format_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      VideoDecoderConfig_Format_entries,
      VideoDecoderConfig_Format_entries_by_number,
      31, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     VideoDecoderConfig_Format_strings[idx].get();
}
bool VideoDecoderConfig_Format_Parse(
    const std::string& name, VideoDecoderConfig_Format* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      VideoDecoderConfig_Format_entries, 31, name, &int_value);
  if (success) {
    *value = static_cast<VideoDecoderConfig_Format>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VideoDecoderConfig_Format VideoDecoderConfig::PIXEL_FORMAT_UNKNOWN;
constexpr VideoDecoderConfig_Format VideoDecoderConfig::PIXEL_FORMAT_I420;
constexpr VideoDecoderConfig_Format VideoDecoderConfig::PIXEL_FORMAT_YV12;
constexpr VideoDecoderConfig_Format VideoDecoderConfig::PIXEL_FORMAT_I422;
constexpr VideoDecoderConfig_Format VideoDecoderConfig::PIXEL_FORMAT_I420A;
constexpr VideoDecoderConfig_Format VideoDecoderConfig::PIXEL_FORMAT_I444;
constexpr VideoDecoderConfig_Format VideoDecoderConfig::PIXEL_FORMAT_NV12;
constexpr VideoDecoderConfig_Format VideoDecoderConfig::PIXEL_FORMAT_NV21;
constexpr VideoDecoderConfig_Format VideoDecoderConfig::PIXEL_FORMAT_UYVY;
constexpr VideoDecoderConfig_Format VideoDecoderConfig::PIXEL_FORMAT_YUY2;
constexpr VideoDecoderConfig_Format VideoDecoderConfig::PIXEL_FORMAT_ARGB;
constexpr VideoDecoderConfig_Format VideoDecoderConfig::PIXEL_FORMAT_XRGB;
constexpr VideoDecoderConfig_Format VideoDecoderConfig::PIXEL_FORMAT_RGB24;
constexpr VideoDecoderConfig_Format VideoDecoderConfig::PIXEL_FORMAT_RGB32;
constexpr VideoDecoderConfig_Format VideoDecoderConfig::PIXEL_FORMAT_MJPEG;
constexpr VideoDecoderConfig_Format VideoDecoderConfig::PIXEL_FORMAT_YUV420P9;
constexpr VideoDecoderConfig_Format VideoDecoderConfig::PIXEL_FORMAT_YUV420P10;
constexpr VideoDecoderConfig_Format VideoDecoderConfig::PIXEL_FORMAT_YUV422P9;
constexpr VideoDecoderConfig_Format VideoDecoderConfig::PIXEL_FORMAT_YUV422P10;
constexpr VideoDecoderConfig_Format VideoDecoderConfig::PIXEL_FORMAT_YUV444P9;
constexpr VideoDecoderConfig_Format VideoDecoderConfig::PIXEL_FORMAT_YUV444P10;
constexpr VideoDecoderConfig_Format VideoDecoderConfig::PIXEL_FORMAT_YUV420P12;
constexpr VideoDecoderConfig_Format VideoDecoderConfig::PIXEL_FORMAT_YUV422P12;
constexpr VideoDecoderConfig_Format VideoDecoderConfig::PIXEL_FORMAT_YUV444P12;
constexpr VideoDecoderConfig_Format VideoDecoderConfig::PIXEL_FORMAT_Y8;
constexpr VideoDecoderConfig_Format VideoDecoderConfig::PIXEL_FORMAT_Y16;
constexpr VideoDecoderConfig_Format VideoDecoderConfig::PIXEL_FORMAT_ABGR;
constexpr VideoDecoderConfig_Format VideoDecoderConfig::PIXEL_FORMAT_XBGR;
constexpr VideoDecoderConfig_Format VideoDecoderConfig::PIXEL_FORMAT_P016LE;
constexpr VideoDecoderConfig_Format VideoDecoderConfig::PIXEL_FORMAT_XR30;
constexpr VideoDecoderConfig_Format VideoDecoderConfig::PIXEL_FORMAT_XB30;
constexpr VideoDecoderConfig_Format VideoDecoderConfig::Format_MIN;
constexpr VideoDecoderConfig_Format VideoDecoderConfig::Format_MAX;
constexpr int VideoDecoderConfig::Format_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool VideoDecoderConfig_ColorSpace_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> VideoDecoderConfig_ColorSpace_strings[4] = {};

static const char VideoDecoderConfig_ColorSpace_names[] =
  "COLOR_SPACE_HD_REC709"
  "COLOR_SPACE_JPEG"
  "COLOR_SPACE_SD_REC601"
  "COLOR_SPACE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry VideoDecoderConfig_ColorSpace_entries[] = {
  { {VideoDecoderConfig_ColorSpace_names + 0, 21}, 2 },
  { {VideoDecoderConfig_ColorSpace_names + 21, 16}, 1 },
  { {VideoDecoderConfig_ColorSpace_names + 37, 21}, 3 },
  { {VideoDecoderConfig_ColorSpace_names + 58, 23}, 0 },
};

static const int VideoDecoderConfig_ColorSpace_entries_by_number[] = {
  3, // 0 -> COLOR_SPACE_UNSPECIFIED
  1, // 1 -> COLOR_SPACE_JPEG
  0, // 2 -> COLOR_SPACE_HD_REC709
  2, // 3 -> COLOR_SPACE_SD_REC601
};

const std::string& VideoDecoderConfig_ColorSpace_Name(
    VideoDecoderConfig_ColorSpace value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          VideoDecoderConfig_ColorSpace_entries,
          VideoDecoderConfig_ColorSpace_entries_by_number,
          4, VideoDecoderConfig_ColorSpace_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      VideoDecoderConfig_ColorSpace_entries,
      VideoDecoderConfig_ColorSpace_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     VideoDecoderConfig_ColorSpace_strings[idx].get();
}
bool VideoDecoderConfig_ColorSpace_Parse(
    const std::string& name, VideoDecoderConfig_ColorSpace* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      VideoDecoderConfig_ColorSpace_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<VideoDecoderConfig_ColorSpace>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VideoDecoderConfig_ColorSpace VideoDecoderConfig::COLOR_SPACE_UNSPECIFIED;
constexpr VideoDecoderConfig_ColorSpace VideoDecoderConfig::COLOR_SPACE_JPEG;
constexpr VideoDecoderConfig_ColorSpace VideoDecoderConfig::COLOR_SPACE_HD_REC709;
constexpr VideoDecoderConfig_ColorSpace VideoDecoderConfig::COLOR_SPACE_SD_REC601;
constexpr VideoDecoderConfig_ColorSpace VideoDecoderConfig::ColorSpace_MIN;
constexpr VideoDecoderConfig_ColorSpace VideoDecoderConfig::ColorSpace_MAX;
constexpr int VideoDecoderConfig::ColorSpace_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool CdmKeyInformation_KeyStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CdmKeyInformation_KeyStatus_strings[7] = {};

static const char CdmKeyInformation_KeyStatus_names[] =
  "EXPIRED"
  "INTERNAL_ERROR"
  "KEY_STATUS_PENDING"
  "OUTPUT_DOWNSCALED"
  "OUTPUT_RESTRICTED"
  "RELEASED"
  "USABLE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CdmKeyInformation_KeyStatus_entries[] = {
  { {CdmKeyInformation_KeyStatus_names + 0, 7}, 2 },
  { {CdmKeyInformation_KeyStatus_names + 7, 14}, 1 },
  { {CdmKeyInformation_KeyStatus_names + 21, 18}, 5 },
  { {CdmKeyInformation_KeyStatus_names + 39, 17}, 4 },
  { {CdmKeyInformation_KeyStatus_names + 56, 17}, 3 },
  { {CdmKeyInformation_KeyStatus_names + 73, 8}, 6 },
  { {CdmKeyInformation_KeyStatus_names + 81, 6}, 0 },
};

static const int CdmKeyInformation_KeyStatus_entries_by_number[] = {
  6, // 0 -> USABLE
  1, // 1 -> INTERNAL_ERROR
  0, // 2 -> EXPIRED
  4, // 3 -> OUTPUT_RESTRICTED
  3, // 4 -> OUTPUT_DOWNSCALED
  2, // 5 -> KEY_STATUS_PENDING
  5, // 6 -> RELEASED
};

const std::string& CdmKeyInformation_KeyStatus_Name(
    CdmKeyInformation_KeyStatus value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CdmKeyInformation_KeyStatus_entries,
          CdmKeyInformation_KeyStatus_entries_by_number,
          7, CdmKeyInformation_KeyStatus_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CdmKeyInformation_KeyStatus_entries,
      CdmKeyInformation_KeyStatus_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CdmKeyInformation_KeyStatus_strings[idx].get();
}
bool CdmKeyInformation_KeyStatus_Parse(
    const std::string& name, CdmKeyInformation_KeyStatus* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CdmKeyInformation_KeyStatus_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<CdmKeyInformation_KeyStatus>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CdmKeyInformation_KeyStatus CdmKeyInformation::USABLE;
constexpr CdmKeyInformation_KeyStatus CdmKeyInformation::INTERNAL_ERROR;
constexpr CdmKeyInformation_KeyStatus CdmKeyInformation::EXPIRED;
constexpr CdmKeyInformation_KeyStatus CdmKeyInformation::OUTPUT_RESTRICTED;
constexpr CdmKeyInformation_KeyStatus CdmKeyInformation::OUTPUT_DOWNSCALED;
constexpr CdmKeyInformation_KeyStatus CdmKeyInformation::KEY_STATUS_PENDING;
constexpr CdmKeyInformation_KeyStatus CdmKeyInformation::RELEASED;
constexpr CdmKeyInformation_KeyStatus CdmKeyInformation::KeyStatus_MIN;
constexpr CdmKeyInformation_KeyStatus CdmKeyInformation::KeyStatus_MAX;
constexpr int CdmKeyInformation::KeyStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool RendererClientOnBufferingStateChange_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RendererClientOnBufferingStateChange_State_strings[2] = {};

static const char RendererClientOnBufferingStateChange_State_names[] =
  "BUFFERING_HAVE_ENOUGH"
  "BUFFERING_HAVE_NOTHING";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry RendererClientOnBufferingStateChange_State_entries[] = {
  { {RendererClientOnBufferingStateChange_State_names + 0, 21}, 1 },
  { {RendererClientOnBufferingStateChange_State_names + 21, 22}, 0 },
};

static const int RendererClientOnBufferingStateChange_State_entries_by_number[] = {
  1, // 0 -> BUFFERING_HAVE_NOTHING
  0, // 1 -> BUFFERING_HAVE_ENOUGH
};

const std::string& RendererClientOnBufferingStateChange_State_Name(
    RendererClientOnBufferingStateChange_State value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          RendererClientOnBufferingStateChange_State_entries,
          RendererClientOnBufferingStateChange_State_entries_by_number,
          2, RendererClientOnBufferingStateChange_State_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      RendererClientOnBufferingStateChange_State_entries,
      RendererClientOnBufferingStateChange_State_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     RendererClientOnBufferingStateChange_State_strings[idx].get();
}
bool RendererClientOnBufferingStateChange_State_Parse(
    const std::string& name, RendererClientOnBufferingStateChange_State* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      RendererClientOnBufferingStateChange_State_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<RendererClientOnBufferingStateChange_State>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RendererClientOnBufferingStateChange_State RendererClientOnBufferingStateChange::BUFFERING_HAVE_NOTHING;
constexpr RendererClientOnBufferingStateChange_State RendererClientOnBufferingStateChange::BUFFERING_HAVE_ENOUGH;
constexpr RendererClientOnBufferingStateChange_State RendererClientOnBufferingStateChange::State_MIN;
constexpr RendererClientOnBufferingStateChange_State RendererClientOnBufferingStateChange::State_MAX;
constexpr int RendererClientOnBufferingStateChange::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool DemuxerStreamReadUntilCallback_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DemuxerStreamReadUntilCallback_Status_strings[4] = {};

static const char DemuxerStreamReadUntilCallback_Status_names[] =
  "kAborted"
  "kConfigChanged"
  "kError"
  "kOk";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DemuxerStreamReadUntilCallback_Status_entries[] = {
  { {DemuxerStreamReadUntilCallback_Status_names + 0, 8}, 1 },
  { {DemuxerStreamReadUntilCallback_Status_names + 8, 14}, 2 },
  { {DemuxerStreamReadUntilCallback_Status_names + 22, 6}, 3 },
  { {DemuxerStreamReadUntilCallback_Status_names + 28, 3}, 0 },
};

static const int DemuxerStreamReadUntilCallback_Status_entries_by_number[] = {
  3, // 0 -> kOk
  0, // 1 -> kAborted
  1, // 2 -> kConfigChanged
  2, // 3 -> kError
};

const std::string& DemuxerStreamReadUntilCallback_Status_Name(
    DemuxerStreamReadUntilCallback_Status value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DemuxerStreamReadUntilCallback_Status_entries,
          DemuxerStreamReadUntilCallback_Status_entries_by_number,
          4, DemuxerStreamReadUntilCallback_Status_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DemuxerStreamReadUntilCallback_Status_entries,
      DemuxerStreamReadUntilCallback_Status_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DemuxerStreamReadUntilCallback_Status_strings[idx].get();
}
bool DemuxerStreamReadUntilCallback_Status_Parse(
    const std::string& name, DemuxerStreamReadUntilCallback_Status* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DemuxerStreamReadUntilCallback_Status_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<DemuxerStreamReadUntilCallback_Status>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DemuxerStreamReadUntilCallback_Status DemuxerStreamReadUntilCallback::kOk;
constexpr DemuxerStreamReadUntilCallback_Status DemuxerStreamReadUntilCallback::kAborted;
constexpr DemuxerStreamReadUntilCallback_Status DemuxerStreamReadUntilCallback::kConfigChanged;
constexpr DemuxerStreamReadUntilCallback_Status DemuxerStreamReadUntilCallback::kError;
constexpr DemuxerStreamReadUntilCallback_Status DemuxerStreamReadUntilCallback::Status_MIN;
constexpr DemuxerStreamReadUntilCallback_Status DemuxerStreamReadUntilCallback::Status_MAX;
constexpr int DemuxerStreamReadUntilCallback::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool CdmCreateSessionAndGenerateRequest_EmeInitDataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CdmCreateSessionAndGenerateRequest_EmeInitDataType_strings[4] = {};

static const char CdmCreateSessionAndGenerateRequest_EmeInitDataType_names[] =
  "CENC"
  "KEYIDS"
  "UNKNOWN"
  "WEBM";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CdmCreateSessionAndGenerateRequest_EmeInitDataType_entries[] = {
  { {CdmCreateSessionAndGenerateRequest_EmeInitDataType_names + 0, 4}, 2 },
  { {CdmCreateSessionAndGenerateRequest_EmeInitDataType_names + 4, 6}, 3 },
  { {CdmCreateSessionAndGenerateRequest_EmeInitDataType_names + 10, 7}, 0 },
  { {CdmCreateSessionAndGenerateRequest_EmeInitDataType_names + 17, 4}, 1 },
};

static const int CdmCreateSessionAndGenerateRequest_EmeInitDataType_entries_by_number[] = {
  2, // 0 -> UNKNOWN
  3, // 1 -> WEBM
  0, // 2 -> CENC
  1, // 3 -> KEYIDS
};

const std::string& CdmCreateSessionAndGenerateRequest_EmeInitDataType_Name(
    CdmCreateSessionAndGenerateRequest_EmeInitDataType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CdmCreateSessionAndGenerateRequest_EmeInitDataType_entries,
          CdmCreateSessionAndGenerateRequest_EmeInitDataType_entries_by_number,
          4, CdmCreateSessionAndGenerateRequest_EmeInitDataType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CdmCreateSessionAndGenerateRequest_EmeInitDataType_entries,
      CdmCreateSessionAndGenerateRequest_EmeInitDataType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CdmCreateSessionAndGenerateRequest_EmeInitDataType_strings[idx].get();
}
bool CdmCreateSessionAndGenerateRequest_EmeInitDataType_Parse(
    const std::string& name, CdmCreateSessionAndGenerateRequest_EmeInitDataType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CdmCreateSessionAndGenerateRequest_EmeInitDataType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<CdmCreateSessionAndGenerateRequest_EmeInitDataType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CdmCreateSessionAndGenerateRequest_EmeInitDataType CdmCreateSessionAndGenerateRequest::UNKNOWN;
constexpr CdmCreateSessionAndGenerateRequest_EmeInitDataType CdmCreateSessionAndGenerateRequest::WEBM;
constexpr CdmCreateSessionAndGenerateRequest_EmeInitDataType CdmCreateSessionAndGenerateRequest::CENC;
constexpr CdmCreateSessionAndGenerateRequest_EmeInitDataType CdmCreateSessionAndGenerateRequest::KEYIDS;
constexpr CdmCreateSessionAndGenerateRequest_EmeInitDataType CdmCreateSessionAndGenerateRequest::EmeInitDataType_MIN;
constexpr CdmCreateSessionAndGenerateRequest_EmeInitDataType CdmCreateSessionAndGenerateRequest::EmeInitDataType_MAX;
constexpr int CdmCreateSessionAndGenerateRequest::EmeInitDataType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool RpcMessage_RpcProc_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1100:
    case 1101:
    case 1102:
    case 2000:
    case 2001:
    case 2002:
    case 2003:
    case 2004:
    case 2005:
    case 2006:
    case 2007:
    case 2008:
    case 2009:
    case 2010:
    case 3000:
    case 3001:
    case 3002:
    case 3003:
    case 3100:
    case 3101:
    case 4000:
    case 4001:
    case 4002:
    case 4003:
    case 4004:
    case 4005:
    case 4006:
    case 4007:
    case 4100:
    case 4101:
    case 4102:
    case 4103:
    case 4104:
    case 4105:
    case 4106:
    case 5000:
    case 5001:
    case 5002:
    case 5003:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> RpcMessage_RpcProc_strings[51] = {};

static const char RpcMessage_RpcProc_names[] =
  "RPC_ACQUIRE_CDM"
  "RPC_ACQUIRE_CDM_DONE"
  "RPC_ACQUIRE_DEMUXER"
  "RPC_ACQUIRE_RENDERER"
  "RPC_ACQUIRE_RENDERER_DONE"
  "RPC_CDMC_ONSESSIONCLOSED"
  "RPC_CDMC_ONSESSIONEXPIRATIONUPDATE"
  "RPC_CDMC_ONSESSIONKEYSCHANGE"
  "RPC_CDMC_ONSESSIONMESSAGE"
  "RPC_CDM_CLOSESESSION"
  "RPC_CDM_CLOSESESSION_CALLBACK"
  "RPC_CDM_CREATESESSIONANDGENERATEREQUEST"
  "RPC_CDM_CREATESESSIONANDGENERATEREQUEST_CALLBACK"
  "RPC_CDM_INITIALIZE"
  "RPC_CDM_INITIALIZE_CALLBACK"
  "RPC_CDM_LOADSESSION"
  "RPC_CDM_LOADSESSION_CALLBACK"
  "RPC_CDM_REMOVESESSION"
  "RPC_CDM_REMOVESESSION_CALLBACK"
  "RPC_CDM_SETCLIENT"
  "RPC_CDM_SETSERVERCERTIFICATE"
  "RPC_CDM_SETSERVERCERTIFICATE_CALLBACK"
  "RPC_CDM_UPDATESESSION"
  "RPC_CDM_UPDATESESSION_CALLBACK"
  "RPC_DS_ENABLEBITSTREAMCONVERTER"
  "RPC_DS_INITIALIZE"
  "RPC_DS_INITIALIZE_CALLBACK"
  "RPC_DS_ONERROR"
  "RPC_DS_READUNTIL"
  "RPC_DS_READUNTIL_CALLBACK"
  "RPC_INTERNAL"
  "RPC_RC_ONAUDIOCONFIGCHANGE"
  "RPC_RC_ONBUFFERINGSTATECHANGE"
  "RPC_RC_ONDURATIONCHANGE"
  "RPC_RC_ONENDED"
  "RPC_RC_ONERROR"
  "RPC_RC_ONSTATISTICSUPDATE"
  "RPC_RC_ONTIMEUPDATE"
  "RPC_RC_ONVIDEOCONFIGCHANGE"
  "RPC_RC_ONVIDEONATURALSIZECHANGE"
  "RPC_RC_ONVIDEOOPACITYCHANGE"
  "RPC_RC_ONWAITINGFORDECRYPTIONKEY"
  "RPC_R_FLUSHUNTIL"
  "RPC_R_FLUSHUNTIL_CALLBACK"
  "RPC_R_INITIALIZE"
  "RPC_R_INITIALIZE_CALLBACK"
  "RPC_R_SETCDM"
  "RPC_R_SETCDM_CALLBACK"
  "RPC_R_SETPLAYBACKRATE"
  "RPC_R_SETVOLUME"
  "RPC_R_STARTPLAYINGFROM";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry RpcMessage_RpcProc_entries[] = {
  { {RpcMessage_RpcProc_names + 0, 15}, 3 },
  { {RpcMessage_RpcProc_names + 15, 20}, 4 },
  { {RpcMessage_RpcProc_names + 35, 19}, 5 },
  { {RpcMessage_RpcProc_names + 54, 20}, 1 },
  { {RpcMessage_RpcProc_names + 74, 25}, 2 },
  { {RpcMessage_RpcProc_names + 99, 24}, 5001 },
  { {RpcMessage_RpcProc_names + 123, 34}, 5003 },
  { {RpcMessage_RpcProc_names + 157, 28}, 5002 },
  { {RpcMessage_RpcProc_names + 185, 25}, 5000 },
  { {RpcMessage_RpcProc_names + 210, 20}, 4006 },
  { {RpcMessage_RpcProc_names + 230, 29}, 4105 },
  { {RpcMessage_RpcProc_names + 259, 39}, 4003 },
  { {RpcMessage_RpcProc_names + 298, 48}, 4102 },
  { {RpcMessage_RpcProc_names + 346, 18}, 4001 },
  { {RpcMessage_RpcProc_names + 364, 27}, 4100 },
  { {RpcMessage_RpcProc_names + 391, 19}, 4004 },
  { {RpcMessage_RpcProc_names + 410, 28}, 4103 },
  { {RpcMessage_RpcProc_names + 438, 21}, 4007 },
  { {RpcMessage_RpcProc_names + 459, 30}, 4106 },
  { {RpcMessage_RpcProc_names + 489, 17}, 4000 },
  { {RpcMessage_RpcProc_names + 506, 28}, 4002 },
  { {RpcMessage_RpcProc_names + 534, 37}, 4101 },
  { {RpcMessage_RpcProc_names + 571, 21}, 4005 },
  { {RpcMessage_RpcProc_names + 592, 30}, 4104 },
  { {RpcMessage_RpcProc_names + 622, 31}, 3002 },
  { {RpcMessage_RpcProc_names + 653, 17}, 3000 },
  { {RpcMessage_RpcProc_names + 670, 26}, 3100 },
  { {RpcMessage_RpcProc_names + 696, 14}, 3003 },
  { {RpcMessage_RpcProc_names + 710, 16}, 3001 },
  { {RpcMessage_RpcProc_names + 726, 25}, 3101 },
  { {RpcMessage_RpcProc_names + 751, 12}, 0 },
  { {RpcMessage_RpcProc_names + 763, 26}, 2009 },
  { {RpcMessage_RpcProc_names + 789, 29}, 2001 },
  { {RpcMessage_RpcProc_names + 818, 23}, 2008 },
  { {RpcMessage_RpcProc_names + 841, 14}, 2002 },
  { {RpcMessage_RpcProc_names + 855, 14}, 2003 },
  { {RpcMessage_RpcProc_names + 869, 25}, 2006 },
  { {RpcMessage_RpcProc_names + 894, 19}, 2000 },
  { {RpcMessage_RpcProc_names + 913, 26}, 2010 },
  { {RpcMessage_RpcProc_names + 939, 31}, 2004 },
  { {RpcMessage_RpcProc_names + 970, 27}, 2005 },
  { {RpcMessage_RpcProc_names + 997, 32}, 2007 },
  { {RpcMessage_RpcProc_names + 1029, 16}, 1001 },
  { {RpcMessage_RpcProc_names + 1045, 25}, 1101 },
  { {RpcMessage_RpcProc_names + 1070, 16}, 1000 },
  { {RpcMessage_RpcProc_names + 1086, 25}, 1100 },
  { {RpcMessage_RpcProc_names + 1111, 12}, 1005 },
  { {RpcMessage_RpcProc_names + 1123, 21}, 1102 },
  { {RpcMessage_RpcProc_names + 1144, 21}, 1003 },
  { {RpcMessage_RpcProc_names + 1165, 15}, 1004 },
  { {RpcMessage_RpcProc_names + 1180, 22}, 1002 },
};

static const int RpcMessage_RpcProc_entries_by_number[] = {
  30, // 0 -> RPC_INTERNAL
  3, // 1 -> RPC_ACQUIRE_RENDERER
  4, // 2 -> RPC_ACQUIRE_RENDERER_DONE
  0, // 3 -> RPC_ACQUIRE_CDM
  1, // 4 -> RPC_ACQUIRE_CDM_DONE
  2, // 5 -> RPC_ACQUIRE_DEMUXER
  44, // 1000 -> RPC_R_INITIALIZE
  42, // 1001 -> RPC_R_FLUSHUNTIL
  50, // 1002 -> RPC_R_STARTPLAYINGFROM
  48, // 1003 -> RPC_R_SETPLAYBACKRATE
  49, // 1004 -> RPC_R_SETVOLUME
  46, // 1005 -> RPC_R_SETCDM
  45, // 1100 -> RPC_R_INITIALIZE_CALLBACK
  43, // 1101 -> RPC_R_FLUSHUNTIL_CALLBACK
  47, // 1102 -> RPC_R_SETCDM_CALLBACK
  37, // 2000 -> RPC_RC_ONTIMEUPDATE
  32, // 2001 -> RPC_RC_ONBUFFERINGSTATECHANGE
  34, // 2002 -> RPC_RC_ONENDED
  35, // 2003 -> RPC_RC_ONERROR
  39, // 2004 -> RPC_RC_ONVIDEONATURALSIZECHANGE
  40, // 2005 -> RPC_RC_ONVIDEOOPACITYCHANGE
  36, // 2006 -> RPC_RC_ONSTATISTICSUPDATE
  41, // 2007 -> RPC_RC_ONWAITINGFORDECRYPTIONKEY
  33, // 2008 -> RPC_RC_ONDURATIONCHANGE
  31, // 2009 -> RPC_RC_ONAUDIOCONFIGCHANGE
  38, // 2010 -> RPC_RC_ONVIDEOCONFIGCHANGE
  25, // 3000 -> RPC_DS_INITIALIZE
  28, // 3001 -> RPC_DS_READUNTIL
  24, // 3002 -> RPC_DS_ENABLEBITSTREAMCONVERTER
  27, // 3003 -> RPC_DS_ONERROR
  26, // 3100 -> RPC_DS_INITIALIZE_CALLBACK
  29, // 3101 -> RPC_DS_READUNTIL_CALLBACK
  19, // 4000 -> RPC_CDM_SETCLIENT
  13, // 4001 -> RPC_CDM_INITIALIZE
  20, // 4002 -> RPC_CDM_SETSERVERCERTIFICATE
  11, // 4003 -> RPC_CDM_CREATESESSIONANDGENERATEREQUEST
  15, // 4004 -> RPC_CDM_LOADSESSION
  22, // 4005 -> RPC_CDM_UPDATESESSION
  9, // 4006 -> RPC_CDM_CLOSESESSION
  17, // 4007 -> RPC_CDM_REMOVESESSION
  14, // 4100 -> RPC_CDM_INITIALIZE_CALLBACK
  21, // 4101 -> RPC_CDM_SETSERVERCERTIFICATE_CALLBACK
  12, // 4102 -> RPC_CDM_CREATESESSIONANDGENERATEREQUEST_CALLBACK
  16, // 4103 -> RPC_CDM_LOADSESSION_CALLBACK
  23, // 4104 -> RPC_CDM_UPDATESESSION_CALLBACK
  10, // 4105 -> RPC_CDM_CLOSESESSION_CALLBACK
  18, // 4106 -> RPC_CDM_REMOVESESSION_CALLBACK
  8, // 5000 -> RPC_CDMC_ONSESSIONMESSAGE
  5, // 5001 -> RPC_CDMC_ONSESSIONCLOSED
  7, // 5002 -> RPC_CDMC_ONSESSIONKEYSCHANGE
  6, // 5003 -> RPC_CDMC_ONSESSIONEXPIRATIONUPDATE
};

const std::string& RpcMessage_RpcProc_Name(
    RpcMessage_RpcProc value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          RpcMessage_RpcProc_entries,
          RpcMessage_RpcProc_entries_by_number,
          51, RpcMessage_RpcProc_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      RpcMessage_RpcProc_entries,
      RpcMessage_RpcProc_entries_by_number,
      51, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     RpcMessage_RpcProc_strings[idx].get();
}
bool RpcMessage_RpcProc_Parse(
    const std::string& name, RpcMessage_RpcProc* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      RpcMessage_RpcProc_entries, 51, name, &int_value);
  if (success) {
    *value = static_cast<RpcMessage_RpcProc>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RpcMessage_RpcProc RpcMessage::RPC_INTERNAL;
constexpr RpcMessage_RpcProc RpcMessage::RPC_ACQUIRE_RENDERER;
constexpr RpcMessage_RpcProc RpcMessage::RPC_ACQUIRE_RENDERER_DONE;
constexpr RpcMessage_RpcProc RpcMessage::RPC_ACQUIRE_CDM;
constexpr RpcMessage_RpcProc RpcMessage::RPC_ACQUIRE_CDM_DONE;
constexpr RpcMessage_RpcProc RpcMessage::RPC_ACQUIRE_DEMUXER;
constexpr RpcMessage_RpcProc RpcMessage::RPC_R_INITIALIZE;
constexpr RpcMessage_RpcProc RpcMessage::RPC_R_FLUSHUNTIL;
constexpr RpcMessage_RpcProc RpcMessage::RPC_R_STARTPLAYINGFROM;
constexpr RpcMessage_RpcProc RpcMessage::RPC_R_SETPLAYBACKRATE;
constexpr RpcMessage_RpcProc RpcMessage::RPC_R_SETVOLUME;
constexpr RpcMessage_RpcProc RpcMessage::RPC_R_SETCDM;
constexpr RpcMessage_RpcProc RpcMessage::RPC_R_INITIALIZE_CALLBACK;
constexpr RpcMessage_RpcProc RpcMessage::RPC_R_FLUSHUNTIL_CALLBACK;
constexpr RpcMessage_RpcProc RpcMessage::RPC_R_SETCDM_CALLBACK;
constexpr RpcMessage_RpcProc RpcMessage::RPC_RC_ONTIMEUPDATE;
constexpr RpcMessage_RpcProc RpcMessage::RPC_RC_ONBUFFERINGSTATECHANGE;
constexpr RpcMessage_RpcProc RpcMessage::RPC_RC_ONENDED;
constexpr RpcMessage_RpcProc RpcMessage::RPC_RC_ONERROR;
constexpr RpcMessage_RpcProc RpcMessage::RPC_RC_ONVIDEONATURALSIZECHANGE;
constexpr RpcMessage_RpcProc RpcMessage::RPC_RC_ONVIDEOOPACITYCHANGE;
constexpr RpcMessage_RpcProc RpcMessage::RPC_RC_ONSTATISTICSUPDATE;
constexpr RpcMessage_RpcProc RpcMessage::RPC_RC_ONWAITINGFORDECRYPTIONKEY;
constexpr RpcMessage_RpcProc RpcMessage::RPC_RC_ONDURATIONCHANGE;
constexpr RpcMessage_RpcProc RpcMessage::RPC_RC_ONAUDIOCONFIGCHANGE;
constexpr RpcMessage_RpcProc RpcMessage::RPC_RC_ONVIDEOCONFIGCHANGE;
constexpr RpcMessage_RpcProc RpcMessage::RPC_DS_INITIALIZE;
constexpr RpcMessage_RpcProc RpcMessage::RPC_DS_READUNTIL;
constexpr RpcMessage_RpcProc RpcMessage::RPC_DS_ENABLEBITSTREAMCONVERTER;
constexpr RpcMessage_RpcProc RpcMessage::RPC_DS_ONERROR;
constexpr RpcMessage_RpcProc RpcMessage::RPC_DS_INITIALIZE_CALLBACK;
constexpr RpcMessage_RpcProc RpcMessage::RPC_DS_READUNTIL_CALLBACK;
constexpr RpcMessage_RpcProc RpcMessage::RPC_CDM_SETCLIENT;
constexpr RpcMessage_RpcProc RpcMessage::RPC_CDM_INITIALIZE;
constexpr RpcMessage_RpcProc RpcMessage::RPC_CDM_SETSERVERCERTIFICATE;
constexpr RpcMessage_RpcProc RpcMessage::RPC_CDM_CREATESESSIONANDGENERATEREQUEST;
constexpr RpcMessage_RpcProc RpcMessage::RPC_CDM_LOADSESSION;
constexpr RpcMessage_RpcProc RpcMessage::RPC_CDM_UPDATESESSION;
constexpr RpcMessage_RpcProc RpcMessage::RPC_CDM_CLOSESESSION;
constexpr RpcMessage_RpcProc RpcMessage::RPC_CDM_REMOVESESSION;
constexpr RpcMessage_RpcProc RpcMessage::RPC_CDM_INITIALIZE_CALLBACK;
constexpr RpcMessage_RpcProc RpcMessage::RPC_CDM_SETSERVERCERTIFICATE_CALLBACK;
constexpr RpcMessage_RpcProc RpcMessage::RPC_CDM_CREATESESSIONANDGENERATEREQUEST_CALLBACK;
constexpr RpcMessage_RpcProc RpcMessage::RPC_CDM_LOADSESSION_CALLBACK;
constexpr RpcMessage_RpcProc RpcMessage::RPC_CDM_UPDATESESSION_CALLBACK;
constexpr RpcMessage_RpcProc RpcMessage::RPC_CDM_CLOSESESSION_CALLBACK;
constexpr RpcMessage_RpcProc RpcMessage::RPC_CDM_REMOVESESSION_CALLBACK;
constexpr RpcMessage_RpcProc RpcMessage::RPC_CDMC_ONSESSIONMESSAGE;
constexpr RpcMessage_RpcProc RpcMessage::RPC_CDMC_ONSESSIONCLOSED;
constexpr RpcMessage_RpcProc RpcMessage::RPC_CDMC_ONSESSIONKEYSCHANGE;
constexpr RpcMessage_RpcProc RpcMessage::RPC_CDMC_ONSESSIONEXPIRATIONUPDATE;
constexpr RpcMessage_RpcProc RpcMessage::RpcProc_MIN;
constexpr RpcMessage_RpcProc RpcMessage::RpcProc_MAX;
constexpr int RpcMessage::RpcProc_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool EncryptionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> EncryptionMode_strings[3] = {};

static const char EncryptionMode_names[] =
  "kCbcs"
  "kCenc"
  "kUnencrypted";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry EncryptionMode_entries[] = {
  { {EncryptionMode_names + 0, 5}, 2 },
  { {EncryptionMode_names + 5, 5}, 1 },
  { {EncryptionMode_names + 10, 12}, 0 },
};

static const int EncryptionMode_entries_by_number[] = {
  2, // 0 -> kUnencrypted
  1, // 1 -> kCenc
  0, // 2 -> kCbcs
};

const std::string& EncryptionMode_Name(
    EncryptionMode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          EncryptionMode_entries,
          EncryptionMode_entries_by_number,
          3, EncryptionMode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      EncryptionMode_entries,
      EncryptionMode_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     EncryptionMode_strings[idx].get();
}
bool EncryptionMode_Parse(
    const std::string& name, EncryptionMode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      EncryptionMode_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<EncryptionMode>(int_value);
  }
  return success;
}
bool CdmException_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CdmException_strings[8] = {};

static const char CdmException_names[] =
  "CLIENT_ERROR"
  "INVALID_ACCESS_ERROR"
  "INVALID_STATE_ERROR"
  "NOT_SUPPORTED_ERROR"
  "OUTPUT_ERROR"
  "QUOTA_EXCEEDED_ERROR"
  "TYPE_ERROR"
  "UNKNOWN_ERROR";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CdmException_entries[] = {
  { {CdmException_names + 0, 12}, 5 },
  { {CdmException_names + 12, 20}, 2 },
  { {CdmException_names + 32, 19}, 1 },
  { {CdmException_names + 51, 19}, 0 },
  { {CdmException_names + 70, 12}, 6 },
  { {CdmException_names + 82, 20}, 3 },
  { {CdmException_names + 102, 10}, 7 },
  { {CdmException_names + 112, 13}, 4 },
};

static const int CdmException_entries_by_number[] = {
  3, // 0 -> NOT_SUPPORTED_ERROR
  2, // 1 -> INVALID_STATE_ERROR
  1, // 2 -> INVALID_ACCESS_ERROR
  5, // 3 -> QUOTA_EXCEEDED_ERROR
  7, // 4 -> UNKNOWN_ERROR
  0, // 5 -> CLIENT_ERROR
  4, // 6 -> OUTPUT_ERROR
  6, // 7 -> TYPE_ERROR
};

const std::string& CdmException_Name(
    CdmException value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CdmException_entries,
          CdmException_entries_by_number,
          8, CdmException_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CdmException_entries,
      CdmException_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CdmException_strings[idx].get();
}
bool CdmException_Parse(
    const std::string& name, CdmException* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CdmException_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<CdmException>(int_value);
  }
  return success;
}
bool CdmMessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CdmMessageType_strings[4] = {};

static const char CdmMessageType_names[] =
  "INDIVIDUALIZATION_REQUEST"
  "LICENSE_RELEASE"
  "LICENSE_RENEWAL"
  "LICENSE_REQUEST";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CdmMessageType_entries[] = {
  { {CdmMessageType_names + 0, 25}, 3 },
  { {CdmMessageType_names + 25, 15}, 2 },
  { {CdmMessageType_names + 40, 15}, 1 },
  { {CdmMessageType_names + 55, 15}, 0 },
};

static const int CdmMessageType_entries_by_number[] = {
  3, // 0 -> LICENSE_REQUEST
  2, // 1 -> LICENSE_RENEWAL
  1, // 2 -> LICENSE_RELEASE
  0, // 3 -> INDIVIDUALIZATION_REQUEST
};

const std::string& CdmMessageType_Name(
    CdmMessageType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CdmMessageType_entries,
          CdmMessageType_entries_by_number,
          4, CdmMessageType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CdmMessageType_entries,
      CdmMessageType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CdmMessageType_strings[idx].get();
}
bool CdmMessageType_Parse(
    const std::string& name, CdmMessageType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CdmMessageType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<CdmMessageType>(int_value);
  }
  return success;
}
bool CdmSessionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CdmSessionType_strings[3] = {};

static const char CdmSessionType_names[] =
  "kPersistentLicense"
  "kPersistentUsageRecord"
  "kTemporary";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CdmSessionType_entries[] = {
  { {CdmSessionType_names + 0, 18}, 1 },
  { {CdmSessionType_names + 18, 22}, 2 },
  { {CdmSessionType_names + 40, 10}, 0 },
};

static const int CdmSessionType_entries_by_number[] = {
  2, // 0 -> kTemporary
  0, // 1 -> kPersistentLicense
  1, // 2 -> kPersistentUsageRecord
};

const std::string& CdmSessionType_Name(
    CdmSessionType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CdmSessionType_entries,
          CdmSessionType_entries_by_number,
          3, CdmSessionType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CdmSessionType_entries,
      CdmSessionType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CdmSessionType_strings[idx].get();
}
bool CdmSessionType_Parse(
    const std::string& name, CdmSessionType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CdmSessionType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<CdmSessionType>(int_value);
  }
  return success;
}

// ===================================================================

void DecoderBuffer::InitAsDefaultInstance() {
  ::media::remoting::pb::_DecoderBuffer_default_instance_._instance.get_mutable()->decrypt_config_ = const_cast< ::media::remoting::pb::DecryptConfig*>(
      ::media::remoting::pb::DecryptConfig::internal_default_instance());
}
class DecoderBuffer::_Internal {
 public:
  using HasBits = decltype(std::declval<DecoderBuffer>()._has_bits_);
  static void set_has_timestamp_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_duration_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_key_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::media::remoting::pb::DecryptConfig& decrypt_config(const DecoderBuffer* msg);
  static void set_has_decrypt_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_front_discard_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_back_discard_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_splice_timestamp_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_side_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_eos(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::media::remoting::pb::DecryptConfig&
DecoderBuffer::_Internal::decrypt_config(const DecoderBuffer* msg) {
  return *msg->decrypt_config_;
}
DecoderBuffer::DecoderBuffer()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.DecoderBuffer)
}
DecoderBuffer::DecoderBuffer(const DecoderBuffer& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  side_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_side_data()) {
    side_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.side_data_);
  }
  if (from.has_decrypt_config()) {
    decrypt_config_ = new ::media::remoting::pb::DecryptConfig(*from.decrypt_config_);
  } else {
    decrypt_config_ = nullptr;
  }
  ::memcpy(&timestamp_usec_, &from.timestamp_usec_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_eos_) -
    reinterpret_cast<char*>(&timestamp_usec_)) + sizeof(is_eos_));
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.DecoderBuffer)
}

void DecoderBuffer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DecoderBuffer_media_5fremoting_5frpc_2eproto.base);
  side_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&decrypt_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_eos_) -
      reinterpret_cast<char*>(&decrypt_config_)) + sizeof(is_eos_));
}

DecoderBuffer::~DecoderBuffer() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.DecoderBuffer)
  SharedDtor();
}

void DecoderBuffer::SharedDtor() {
  side_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete decrypt_config_;
}

void DecoderBuffer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DecoderBuffer& DecoderBuffer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DecoderBuffer_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void DecoderBuffer::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.DecoderBuffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      side_data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(decrypt_config_ != nullptr);
      decrypt_config_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&timestamp_usec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_key_frame_) -
        reinterpret_cast<char*>(&timestamp_usec_)) + sizeof(is_key_frame_));
  }
  is_eos_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DecoderBuffer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 timestamp_usec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp_usec(&has_bits);
          timestamp_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 duration_usec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_duration_usec(&has_bits);
          duration_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_key_frame = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_key_frame(&has_bits);
          is_key_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.DecryptConfig decrypt_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_decrypt_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 front_discard_usec = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_front_discard_usec(&has_bits);
          front_discard_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 back_discard_usec = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_back_discard_usec(&has_bits);
          back_discard_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 splice_timestamp_usec = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_splice_timestamp_usec(&has_bits);
          splice_timestamp_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes side_data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_side_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_eos = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_is_eos(&has_bits);
          is_eos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DecoderBuffer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.DecoderBuffer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp_usec = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_timestamp_usec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 duration_usec = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_duration_usec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &duration_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_key_frame = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_is_key_frame(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_key_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.DecryptConfig decrypt_config = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_decrypt_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 front_discard_usec = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_front_discard_usec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &front_discard_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 back_discard_usec = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_back_discard_usec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &back_discard_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 splice_timestamp_usec = 7 [deprecated = true];
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_splice_timestamp_usec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &splice_timestamp_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes side_data = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_side_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_eos = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_is_eos(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_eos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.DecoderBuffer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.DecoderBuffer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DecoderBuffer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.DecoderBuffer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp_usec = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_usec(), output);
  }

  // optional int64 duration_usec = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->duration_usec(), output);
  }

  // optional bool is_key_frame = 3;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->is_key_frame(), output);
  }

  // optional .media.remoting.pb.DecryptConfig decrypt_config = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::decrypt_config(this), output);
  }

  // optional int64 front_discard_usec = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->front_discard_usec(), output);
  }

  // optional int64 back_discard_usec = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->back_discard_usec(), output);
  }

  // optional int64 splice_timestamp_usec = 7 [deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->splice_timestamp_usec(), output);
  }

  // optional bytes side_data = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->side_data(), output);
  }

  // optional bool is_eos = 9;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->is_eos(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.DecoderBuffer)
}

size_t DecoderBuffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.DecoderBuffer)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes side_data = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->side_data());
    }

    // optional .media.remoting.pb.DecryptConfig decrypt_config = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *decrypt_config_);
    }

    // optional int64 timestamp_usec = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->timestamp_usec());
    }

    // optional int64 duration_usec = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->duration_usec());
    }

    // optional int64 front_discard_usec = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->front_discard_usec());
    }

    // optional int64 back_discard_usec = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->back_discard_usec());
    }

    // optional int64 splice_timestamp_usec = 7 [deprecated = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->splice_timestamp_usec());
    }

    // optional bool is_key_frame = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool is_eos = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DecoderBuffer::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DecoderBuffer*>(
      &from));
}

void DecoderBuffer::MergeFrom(const DecoderBuffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.DecoderBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      side_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.side_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_decrypt_config()->::media::remoting::pb::DecryptConfig::MergeFrom(from.decrypt_config());
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_usec_ = from.timestamp_usec_;
    }
    if (cached_has_bits & 0x00000008u) {
      duration_usec_ = from.duration_usec_;
    }
    if (cached_has_bits & 0x00000010u) {
      front_discard_usec_ = from.front_discard_usec_;
    }
    if (cached_has_bits & 0x00000020u) {
      back_discard_usec_ = from.back_discard_usec_;
    }
    if (cached_has_bits & 0x00000040u) {
      splice_timestamp_usec_ = from.splice_timestamp_usec_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_key_frame_ = from.is_key_frame_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_is_eos(from.is_eos());
  }
}

void DecoderBuffer::CopyFrom(const DecoderBuffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.DecoderBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecoderBuffer::IsInitialized() const {
  return true;
}

void DecoderBuffer::InternalSwap(DecoderBuffer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  side_data_.Swap(&other->side_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(decrypt_config_, other->decrypt_config_);
  swap(timestamp_usec_, other->timestamp_usec_);
  swap(duration_usec_, other->duration_usec_);
  swap(front_discard_usec_, other->front_discard_usec_);
  swap(back_discard_usec_, other->back_discard_usec_);
  swap(splice_timestamp_usec_, other->splice_timestamp_usec_);
  swap(is_key_frame_, other->is_key_frame_);
  swap(is_eos_, other->is_eos_);
}

std::string DecoderBuffer::GetTypeName() const {
  return "media.remoting.pb.DecoderBuffer";
}


// ===================================================================

void Size::InitAsDefaultInstance() {
}
class Size::_Internal {
 public:
  using HasBits = decltype(std::declval<Size>()._has_bits_);
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Size::Size()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.Size)
}
Size::Size(const Size& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.Size)
}

void Size::SharedCtor() {
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

Size::~Size() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.Size)
  SharedDtor();
}

void Size::SharedDtor() {
}

void Size::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Size& Size::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Size_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void Size::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.Size)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Size::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Size::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.Size)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 width = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_width(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_height(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.Size)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.Size)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Size::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.Size)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 width = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // optional int32 height = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.Size)
}

size_t Size::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.Size)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 width = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Size::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Size*>(
      &from));
}

void Size::MergeFrom(const Size& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.Size)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Size::CopyFrom(const Size& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.Size)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Size::IsInitialized() const {
  return true;
}

void Size::InternalSwap(Size* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(width_, other->width_);
  swap(height_, other->height_);
}

std::string Size::GetTypeName() const {
  return "media.remoting.pb.Size";
}


// ===================================================================

void EncryptionScheme::InitAsDefaultInstance() {
}
class EncryptionScheme::_Internal {
 public:
  using HasBits = decltype(std::declval<EncryptionScheme>()._has_bits_);
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_encrypt_blocks(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_skip_blocks(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

EncryptionScheme::EncryptionScheme()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.EncryptionScheme)
}
EncryptionScheme::EncryptionScheme(const EncryptionScheme& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&skip_blocks_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(skip_blocks_));
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.EncryptionScheme)
}

void EncryptionScheme::SharedCtor() {
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skip_blocks_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(skip_blocks_));
}

EncryptionScheme::~EncryptionScheme() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.EncryptionScheme)
  SharedDtor();
}

void EncryptionScheme::SharedDtor() {
}

void EncryptionScheme::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EncryptionScheme& EncryptionScheme::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EncryptionScheme_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void EncryptionScheme::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.EncryptionScheme)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&skip_blocks_) -
        reinterpret_cast<char*>(&mode_)) + sizeof(skip_blocks_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EncryptionScheme::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .media.remoting.pb.EncryptionScheme.CipherMode mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::media::remoting::pb::EncryptionScheme_CipherMode_IsValid(val))) {
            set_mode(static_cast<::media::remoting::pb::EncryptionScheme_CipherMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 encrypt_blocks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_encrypt_blocks(&has_bits);
          encrypt_blocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 skip_blocks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_skip_blocks(&has_bits);
          skip_blocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EncryptionScheme::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.EncryptionScheme)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .media.remoting.pb.EncryptionScheme.CipherMode mode = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::media::remoting::pb::EncryptionScheme_CipherMode_IsValid(value)) {
            set_mode(static_cast< ::media::remoting::pb::EncryptionScheme_CipherMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 encrypt_blocks = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_encrypt_blocks(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &encrypt_blocks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 skip_blocks = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_skip_blocks(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skip_blocks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.EncryptionScheme)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.EncryptionScheme)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EncryptionScheme::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.EncryptionScheme)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .media.remoting.pb.EncryptionScheme.CipherMode mode = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  // optional uint32 encrypt_blocks = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->encrypt_blocks(), output);
  }

  // optional uint32 skip_blocks = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->skip_blocks(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.EncryptionScheme)
}

size_t EncryptionScheme::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.EncryptionScheme)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .media.remoting.pb.EncryptionScheme.CipherMode mode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional uint32 encrypt_blocks = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->encrypt_blocks());
    }

    // optional uint32 skip_blocks = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->skip_blocks());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncryptionScheme::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const EncryptionScheme*>(
      &from));
}

void EncryptionScheme::MergeFrom(const EncryptionScheme& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.EncryptionScheme)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      encrypt_blocks_ = from.encrypt_blocks_;
    }
    if (cached_has_bits & 0x00000004u) {
      skip_blocks_ = from.skip_blocks_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EncryptionScheme::CopyFrom(const EncryptionScheme& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.EncryptionScheme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptionScheme::IsInitialized() const {
  return true;
}

void EncryptionScheme::InternalSwap(EncryptionScheme* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mode_, other->mode_);
  swap(encrypt_blocks_, other->encrypt_blocks_);
  swap(skip_blocks_, other->skip_blocks_);
}

std::string EncryptionScheme::GetTypeName() const {
  return "media.remoting.pb.EncryptionScheme";
}


// ===================================================================

void AudioDecoderConfig::InitAsDefaultInstance() {
  ::media::remoting::pb::_AudioDecoderConfig_default_instance_._instance.get_mutable()->encryption_scheme_ = const_cast< ::media::remoting::pb::EncryptionScheme*>(
      ::media::remoting::pb::EncryptionScheme::internal_default_instance());
}
class AudioDecoderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<AudioDecoderConfig>()._has_bits_);
  static void set_has_codec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::media::remoting::pb::EncryptionScheme& encryption_scheme(const AudioDecoderConfig* msg);
  static void set_has_encryption_scheme(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sample_format(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_channel_layout(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_samples_per_second(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_seek_preroll_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_codec_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_extra_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::media::remoting::pb::EncryptionScheme&
AudioDecoderConfig::_Internal::encryption_scheme(const AudioDecoderConfig* msg) {
  return *msg->encryption_scheme_;
}
AudioDecoderConfig::AudioDecoderConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.AudioDecoderConfig)
}
AudioDecoderConfig::AudioDecoderConfig(const AudioDecoderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_extra_data()) {
    extra_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extra_data_);
  }
  if (from.has_encryption_scheme()) {
    encryption_scheme_ = new ::media::remoting::pb::EncryptionScheme(*from.encryption_scheme_);
  } else {
    encryption_scheme_ = nullptr;
  }
  ::memcpy(&codec_, &from.codec_,
    static_cast<size_t>(reinterpret_cast<char*>(&codec_delay_) -
    reinterpret_cast<char*>(&codec_)) + sizeof(codec_delay_));
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.AudioDecoderConfig)
}

void AudioDecoderConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioDecoderConfig_media_5fremoting_5frpc_2eproto.base);
  extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&encryption_scheme_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&codec_delay_) -
      reinterpret_cast<char*>(&encryption_scheme_)) + sizeof(codec_delay_));
}

AudioDecoderConfig::~AudioDecoderConfig() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.AudioDecoderConfig)
  SharedDtor();
}

void AudioDecoderConfig::SharedDtor() {
  extra_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete encryption_scheme_;
}

void AudioDecoderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioDecoderConfig& AudioDecoderConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioDecoderConfig_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void AudioDecoderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.AudioDecoderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      extra_data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(encryption_scheme_ != nullptr);
      encryption_scheme_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&codec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&codec_delay_) -
        reinterpret_cast<char*>(&codec_)) + sizeof(codec_delay_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AudioDecoderConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .media.remoting.pb.AudioDecoderConfig.Codec codec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::media::remoting::pb::AudioDecoderConfig_Codec_IsValid(val))) {
            set_codec(static_cast<::media::remoting::pb::AudioDecoderConfig_Codec>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.EncryptionScheme encryption_scheme = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_encryption_scheme(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.AudioDecoderConfig.SampleFormat sample_format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::media::remoting::pb::AudioDecoderConfig_SampleFormat_IsValid(val))) {
            set_sample_format(static_cast<::media::remoting::pb::AudioDecoderConfig_SampleFormat>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.AudioDecoderConfig.ChannelLayout channel_layout = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::media::remoting::pb::AudioDecoderConfig_ChannelLayout_IsValid(val))) {
            set_channel_layout(static_cast<::media::remoting::pb::AudioDecoderConfig_ChannelLayout>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 samples_per_second = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_samples_per_second(&has_bits);
          samples_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 seek_preroll_usec = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_seek_preroll_usec(&has_bits);
          seek_preroll_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 codec_delay = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_codec_delay(&has_bits);
          codec_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes extra_data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_extra_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AudioDecoderConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.AudioDecoderConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .media.remoting.pb.AudioDecoderConfig.Codec codec = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::media::remoting::pb::AudioDecoderConfig_Codec_IsValid(value)) {
            set_codec(static_cast< ::media::remoting::pb::AudioDecoderConfig_Codec >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.EncryptionScheme encryption_scheme = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_encryption_scheme()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.AudioDecoderConfig.SampleFormat sample_format = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::media::remoting::pb::AudioDecoderConfig_SampleFormat_IsValid(value)) {
            set_sample_format(static_cast< ::media::remoting::pb::AudioDecoderConfig_SampleFormat >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.AudioDecoderConfig.ChannelLayout channel_layout = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::media::remoting::pb::AudioDecoderConfig_ChannelLayout_IsValid(value)) {
            set_channel_layout(static_cast< ::media::remoting::pb::AudioDecoderConfig_ChannelLayout >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 samples_per_second = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_samples_per_second(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &samples_per_second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 seek_preroll_usec = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_seek_preroll_usec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &seek_preroll_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 codec_delay = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_codec_delay(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &codec_delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes extra_data = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extra_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.AudioDecoderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.AudioDecoderConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AudioDecoderConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.AudioDecoderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .media.remoting.pb.AudioDecoderConfig.Codec codec = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->codec(), output);
  }

  // optional .media.remoting.pb.EncryptionScheme encryption_scheme = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::encryption_scheme(this), output);
  }

  // optional .media.remoting.pb.AudioDecoderConfig.SampleFormat sample_format = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->sample_format(), output);
  }

  // optional .media.remoting.pb.AudioDecoderConfig.ChannelLayout channel_layout = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->channel_layout(), output);
  }

  // optional int32 samples_per_second = 5;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->samples_per_second(), output);
  }

  // optional int64 seek_preroll_usec = 6;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->seek_preroll_usec(), output);
  }

  // optional int32 codec_delay = 7;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->codec_delay(), output);
  }

  // optional bytes extra_data = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->extra_data(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.AudioDecoderConfig)
}

size_t AudioDecoderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.AudioDecoderConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes extra_data = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->extra_data());
    }

    // optional .media.remoting.pb.EncryptionScheme encryption_scheme = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *encryption_scheme_);
    }

    // optional .media.remoting.pb.AudioDecoderConfig.Codec codec = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->codec());
    }

    // optional .media.remoting.pb.AudioDecoderConfig.SampleFormat sample_format = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->sample_format());
    }

    // optional .media.remoting.pb.AudioDecoderConfig.ChannelLayout channel_layout = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->channel_layout());
    }

    // optional int32 samples_per_second = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->samples_per_second());
    }

    // optional int64 seek_preroll_usec = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->seek_preroll_usec());
    }

    // optional int32 codec_delay = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->codec_delay());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioDecoderConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AudioDecoderConfig*>(
      &from));
}

void AudioDecoderConfig::MergeFrom(const AudioDecoderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.AudioDecoderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      extra_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extra_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_encryption_scheme()->::media::remoting::pb::EncryptionScheme::MergeFrom(from.encryption_scheme());
    }
    if (cached_has_bits & 0x00000004u) {
      codec_ = from.codec_;
    }
    if (cached_has_bits & 0x00000008u) {
      sample_format_ = from.sample_format_;
    }
    if (cached_has_bits & 0x00000010u) {
      channel_layout_ = from.channel_layout_;
    }
    if (cached_has_bits & 0x00000020u) {
      samples_per_second_ = from.samples_per_second_;
    }
    if (cached_has_bits & 0x00000040u) {
      seek_preroll_usec_ = from.seek_preroll_usec_;
    }
    if (cached_has_bits & 0x00000080u) {
      codec_delay_ = from.codec_delay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AudioDecoderConfig::CopyFrom(const AudioDecoderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.AudioDecoderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioDecoderConfig::IsInitialized() const {
  return true;
}

void AudioDecoderConfig::InternalSwap(AudioDecoderConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  extra_data_.Swap(&other->extra_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(encryption_scheme_, other->encryption_scheme_);
  swap(codec_, other->codec_);
  swap(sample_format_, other->sample_format_);
  swap(channel_layout_, other->channel_layout_);
  swap(samples_per_second_, other->samples_per_second_);
  swap(seek_preroll_usec_, other->seek_preroll_usec_);
  swap(codec_delay_, other->codec_delay_);
}

std::string AudioDecoderConfig::GetTypeName() const {
  return "media.remoting.pb.AudioDecoderConfig";
}


// ===================================================================

void Rect::InitAsDefaultInstance() {
}
class Rect::_Internal {
 public:
  using HasBits = decltype(std::declval<Rect>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Rect::Rect()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.Rect)
}
Rect::Rect(const Rect& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&x_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.Rect)
}

void Rect::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&x_)) + sizeof(height_));
}

Rect::~Rect() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.Rect)
  SharedDtor();
}

void Rect::SharedDtor() {
}

void Rect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rect& Rect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rect_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void Rect::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.Rect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&x_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Rect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Rect::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.Rect)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_x(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_y(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_width(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_height(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.Rect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.Rect)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Rect::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.Rect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional int32 width = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // optional int32 height = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.Rect)
}

size_t Rect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.Rect)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 width = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rect::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Rect*>(
      &from));
}

void Rect::MergeFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.Rect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Rect::CopyFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rect::IsInitialized() const {
  return true;
}

void Rect::InternalSwap(Rect* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(width_, other->width_);
  swap(height_, other->height_);
}

std::string Rect::GetTypeName() const {
  return "media.remoting.pb.Rect";
}


// ===================================================================

void VideoDecoderConfig::InitAsDefaultInstance() {
  ::media::remoting::pb::_VideoDecoderConfig_default_instance_._instance.get_mutable()->encryption_scheme_ = const_cast< ::media::remoting::pb::EncryptionScheme*>(
      ::media::remoting::pb::EncryptionScheme::internal_default_instance());
  ::media::remoting::pb::_VideoDecoderConfig_default_instance_._instance.get_mutable()->coded_size_ = const_cast< ::media::remoting::pb::Size*>(
      ::media::remoting::pb::Size::internal_default_instance());
  ::media::remoting::pb::_VideoDecoderConfig_default_instance_._instance.get_mutable()->visible_rect_ = const_cast< ::media::remoting::pb::Rect*>(
      ::media::remoting::pb::Rect::internal_default_instance());
  ::media::remoting::pb::_VideoDecoderConfig_default_instance_._instance.get_mutable()->natural_size_ = const_cast< ::media::remoting::pb::Size*>(
      ::media::remoting::pb::Size::internal_default_instance());
}
class VideoDecoderConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoDecoderConfig>()._has_bits_);
  static void set_has_codec(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::media::remoting::pb::EncryptionScheme& encryption_scheme(const VideoDecoderConfig* msg);
  static void set_has_encryption_scheme(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_profile(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_color_space(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::media::remoting::pb::Size& coded_size(const VideoDecoderConfig* msg);
  static void set_has_coded_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::media::remoting::pb::Rect& visible_rect(const VideoDecoderConfig* msg);
  static void set_has_visible_rect(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::media::remoting::pb::Size& natural_size(const VideoDecoderConfig* msg);
  static void set_has_natural_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_extra_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::media::remoting::pb::EncryptionScheme&
VideoDecoderConfig::_Internal::encryption_scheme(const VideoDecoderConfig* msg) {
  return *msg->encryption_scheme_;
}
const ::media::remoting::pb::Size&
VideoDecoderConfig::_Internal::coded_size(const VideoDecoderConfig* msg) {
  return *msg->coded_size_;
}
const ::media::remoting::pb::Rect&
VideoDecoderConfig::_Internal::visible_rect(const VideoDecoderConfig* msg) {
  return *msg->visible_rect_;
}
const ::media::remoting::pb::Size&
VideoDecoderConfig::_Internal::natural_size(const VideoDecoderConfig* msg) {
  return *msg->natural_size_;
}
VideoDecoderConfig::VideoDecoderConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.VideoDecoderConfig)
}
VideoDecoderConfig::VideoDecoderConfig(const VideoDecoderConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_extra_data()) {
    extra_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extra_data_);
  }
  if (from.has_encryption_scheme()) {
    encryption_scheme_ = new ::media::remoting::pb::EncryptionScheme(*from.encryption_scheme_);
  } else {
    encryption_scheme_ = nullptr;
  }
  if (from.has_coded_size()) {
    coded_size_ = new ::media::remoting::pb::Size(*from.coded_size_);
  } else {
    coded_size_ = nullptr;
  }
  if (from.has_visible_rect()) {
    visible_rect_ = new ::media::remoting::pb::Rect(*from.visible_rect_);
  } else {
    visible_rect_ = nullptr;
  }
  if (from.has_natural_size()) {
    natural_size_ = new ::media::remoting::pb::Size(*from.natural_size_);
  } else {
    natural_size_ = nullptr;
  }
  ::memcpy(&codec_, &from.codec_,
    static_cast<size_t>(reinterpret_cast<char*>(&profile_) -
    reinterpret_cast<char*>(&codec_)) + sizeof(profile_));
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.VideoDecoderConfig)
}

void VideoDecoderConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VideoDecoderConfig_media_5fremoting_5frpc_2eproto.base);
  extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&encryption_scheme_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_space_) -
      reinterpret_cast<char*>(&encryption_scheme_)) + sizeof(color_space_));
  profile_ = -1;
}

VideoDecoderConfig::~VideoDecoderConfig() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.VideoDecoderConfig)
  SharedDtor();
}

void VideoDecoderConfig::SharedDtor() {
  extra_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete encryption_scheme_;
  if (this != internal_default_instance()) delete coded_size_;
  if (this != internal_default_instance()) delete visible_rect_;
  if (this != internal_default_instance()) delete natural_size_;
}

void VideoDecoderConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoDecoderConfig& VideoDecoderConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoDecoderConfig_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void VideoDecoderConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.VideoDecoderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      extra_data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(encryption_scheme_ != nullptr);
      encryption_scheme_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(coded_size_ != nullptr);
      coded_size_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(visible_rect_ != nullptr);
      visible_rect_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(natural_size_ != nullptr);
      natural_size_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&codec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&color_space_) -
        reinterpret_cast<char*>(&codec_)) + sizeof(color_space_));
  }
  profile_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VideoDecoderConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .media.remoting.pb.VideoDecoderConfig.Codec codec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::media::remoting::pb::VideoDecoderConfig_Codec_IsValid(val))) {
            set_codec(static_cast<::media::remoting::pb::VideoDecoderConfig_Codec>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.EncryptionScheme encryption_scheme = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_encryption_scheme(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.VideoDecoderConfig.Profile profile = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::media::remoting::pb::VideoDecoderConfig_Profile_IsValid(val))) {
            set_profile(static_cast<::media::remoting::pb::VideoDecoderConfig_Profile>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.VideoDecoderConfig.Format format = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::media::remoting::pb::VideoDecoderConfig_Format_IsValid(val))) {
            set_format(static_cast<::media::remoting::pb::VideoDecoderConfig_Format>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.VideoDecoderConfig.ColorSpace color_space = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::media::remoting::pb::VideoDecoderConfig_ColorSpace_IsValid(val))) {
            set_color_space(static_cast<::media::remoting::pb::VideoDecoderConfig_ColorSpace>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.Size coded_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_coded_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.Rect visible_rect = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_visible_rect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.Size natural_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_natural_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes extra_data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_extra_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VideoDecoderConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.VideoDecoderConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .media.remoting.pb.VideoDecoderConfig.Codec codec = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::media::remoting::pb::VideoDecoderConfig_Codec_IsValid(value)) {
            set_codec(static_cast< ::media::remoting::pb::VideoDecoderConfig_Codec >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.EncryptionScheme encryption_scheme = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_encryption_scheme()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.VideoDecoderConfig.Profile profile = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::media::remoting::pb::VideoDecoderConfig_Profile_IsValid(value)) {
            set_profile(static_cast< ::media::remoting::pb::VideoDecoderConfig_Profile >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.VideoDecoderConfig.Format format = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::media::remoting::pb::VideoDecoderConfig_Format_IsValid(value)) {
            set_format(static_cast< ::media::remoting::pb::VideoDecoderConfig_Format >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.VideoDecoderConfig.ColorSpace color_space = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::media::remoting::pb::VideoDecoderConfig_ColorSpace_IsValid(value)) {
            set_color_space(static_cast< ::media::remoting::pb::VideoDecoderConfig_ColorSpace >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.Size coded_size = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_coded_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.Rect visible_rect = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_visible_rect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.Size natural_size = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_natural_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes extra_data = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extra_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.VideoDecoderConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.VideoDecoderConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VideoDecoderConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.VideoDecoderConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .media.remoting.pb.VideoDecoderConfig.Codec codec = 1;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->codec(), output);
  }

  // optional .media.remoting.pb.EncryptionScheme encryption_scheme = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::encryption_scheme(this), output);
  }

  // optional .media.remoting.pb.VideoDecoderConfig.Profile profile = 3;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->profile(), output);
  }

  // optional .media.remoting.pb.VideoDecoderConfig.Format format = 4;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->format(), output);
  }

  // optional .media.remoting.pb.VideoDecoderConfig.ColorSpace color_space = 5;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->color_space(), output);
  }

  // optional .media.remoting.pb.Size coded_size = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      6, _Internal::coded_size(this), output);
  }

  // optional .media.remoting.pb.Rect visible_rect = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::visible_rect(this), output);
  }

  // optional .media.remoting.pb.Size natural_size = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::natural_size(this), output);
  }

  // optional bytes extra_data = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->extra_data(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.VideoDecoderConfig)
}

size_t VideoDecoderConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.VideoDecoderConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes extra_data = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->extra_data());
    }

    // optional .media.remoting.pb.EncryptionScheme encryption_scheme = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *encryption_scheme_);
    }

    // optional .media.remoting.pb.Size coded_size = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *coded_size_);
    }

    // optional .media.remoting.pb.Rect visible_rect = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *visible_rect_);
    }

    // optional .media.remoting.pb.Size natural_size = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *natural_size_);
    }

    // optional .media.remoting.pb.VideoDecoderConfig.Codec codec = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->codec());
    }

    // optional .media.remoting.pb.VideoDecoderConfig.Format format = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->format());
    }

    // optional .media.remoting.pb.VideoDecoderConfig.ColorSpace color_space = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->color_space());
    }

  }
  // optional .media.remoting.pb.VideoDecoderConfig.Profile profile = 3;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->profile());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoDecoderConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const VideoDecoderConfig*>(
      &from));
}

void VideoDecoderConfig::MergeFrom(const VideoDecoderConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.VideoDecoderConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      extra_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extra_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_encryption_scheme()->::media::remoting::pb::EncryptionScheme::MergeFrom(from.encryption_scheme());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_coded_size()->::media::remoting::pb::Size::MergeFrom(from.coded_size());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_visible_rect()->::media::remoting::pb::Rect::MergeFrom(from.visible_rect());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_natural_size()->::media::remoting::pb::Size::MergeFrom(from.natural_size());
    }
    if (cached_has_bits & 0x00000020u) {
      codec_ = from.codec_;
    }
    if (cached_has_bits & 0x00000040u) {
      format_ = from.format_;
    }
    if (cached_has_bits & 0x00000080u) {
      color_space_ = from.color_space_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_profile(from.profile());
  }
}

void VideoDecoderConfig::CopyFrom(const VideoDecoderConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.VideoDecoderConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoDecoderConfig::IsInitialized() const {
  return true;
}

void VideoDecoderConfig::InternalSwap(VideoDecoderConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  extra_data_.Swap(&other->extra_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(encryption_scheme_, other->encryption_scheme_);
  swap(coded_size_, other->coded_size_);
  swap(visible_rect_, other->visible_rect_);
  swap(natural_size_, other->natural_size_);
  swap(codec_, other->codec_);
  swap(format_, other->format_);
  swap(color_space_, other->color_space_);
  swap(profile_, other->profile_);
}

std::string VideoDecoderConfig::GetTypeName() const {
  return "media.remoting.pb.VideoDecoderConfig";
}


// ===================================================================

void DecryptConfig_SubSample::InitAsDefaultInstance() {
}
class DecryptConfig_SubSample::_Internal {
 public:
  using HasBits = decltype(std::declval<DecryptConfig_SubSample>()._has_bits_);
  static void set_has_clear_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cypher_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DecryptConfig_SubSample::DecryptConfig_SubSample()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.DecryptConfig.SubSample)
}
DecryptConfig_SubSample::DecryptConfig_SubSample(const DecryptConfig_SubSample& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&clear_bytes_, &from.clear_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&cypher_bytes_) -
    reinterpret_cast<char*>(&clear_bytes_)) + sizeof(cypher_bytes_));
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.DecryptConfig.SubSample)
}

void DecryptConfig_SubSample::SharedCtor() {
  ::memset(&clear_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cypher_bytes_) -
      reinterpret_cast<char*>(&clear_bytes_)) + sizeof(cypher_bytes_));
}

DecryptConfig_SubSample::~DecryptConfig_SubSample() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.DecryptConfig.SubSample)
  SharedDtor();
}

void DecryptConfig_SubSample::SharedDtor() {
}

void DecryptConfig_SubSample::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DecryptConfig_SubSample& DecryptConfig_SubSample::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DecryptConfig_SubSample_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void DecryptConfig_SubSample::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.DecryptConfig.SubSample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&clear_bytes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cypher_bytes_) -
        reinterpret_cast<char*>(&clear_bytes_)) + sizeof(cypher_bytes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DecryptConfig_SubSample::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 clear_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_clear_bytes(&has_bits);
          clear_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cypher_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cypher_bytes(&has_bits);
          cypher_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DecryptConfig_SubSample::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.DecryptConfig.SubSample)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 clear_bytes = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_clear_bytes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clear_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cypher_bytes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_cypher_bytes(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cypher_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.DecryptConfig.SubSample)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.DecryptConfig.SubSample)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DecryptConfig_SubSample::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.DecryptConfig.SubSample)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 clear_bytes = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->clear_bytes(), output);
  }

  // optional uint32 cypher_bytes = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->cypher_bytes(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.DecryptConfig.SubSample)
}

size_t DecryptConfig_SubSample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.DecryptConfig.SubSample)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 clear_bytes = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->clear_bytes());
    }

    // optional uint32 cypher_bytes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->cypher_bytes());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DecryptConfig_SubSample::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DecryptConfig_SubSample*>(
      &from));
}

void DecryptConfig_SubSample::MergeFrom(const DecryptConfig_SubSample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.DecryptConfig.SubSample)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      clear_bytes_ = from.clear_bytes_;
    }
    if (cached_has_bits & 0x00000002u) {
      cypher_bytes_ = from.cypher_bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DecryptConfig_SubSample::CopyFrom(const DecryptConfig_SubSample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.DecryptConfig.SubSample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecryptConfig_SubSample::IsInitialized() const {
  return true;
}

void DecryptConfig_SubSample::InternalSwap(DecryptConfig_SubSample* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(clear_bytes_, other->clear_bytes_);
  swap(cypher_bytes_, other->cypher_bytes_);
}

std::string DecryptConfig_SubSample::GetTypeName() const {
  return "media.remoting.pb.DecryptConfig.SubSample";
}


// ===================================================================

void DecryptConfig::InitAsDefaultInstance() {
}
class DecryptConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<DecryptConfig>()._has_bits_);
  static void set_has_key_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_iv(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_crypt_byte_block(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_skip_byte_block(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

DecryptConfig::DecryptConfig()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.DecryptConfig)
}
DecryptConfig::DecryptConfig(const DecryptConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      sub_samples_(from.sub_samples_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_key_id()) {
    key_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_id_);
  }
  iv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_iv()) {
    iv_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.iv_);
  }
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&skip_byte_block_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(skip_byte_block_));
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.DecryptConfig)
}

void DecryptConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DecryptConfig_media_5fremoting_5frpc_2eproto.base);
  key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skip_byte_block_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(skip_byte_block_));
}

DecryptConfig::~DecryptConfig() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.DecryptConfig)
  SharedDtor();
}

void DecryptConfig::SharedDtor() {
  key_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  iv_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DecryptConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DecryptConfig& DecryptConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DecryptConfig_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void DecryptConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.DecryptConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sub_samples_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      iv_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&mode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&skip_byte_block_) -
        reinterpret_cast<char*>(&mode_)) + sizeof(skip_byte_block_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DecryptConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes key_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_key_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes iv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_iv(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .media.remoting.pb.DecryptConfig.SubSample sub_samples = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_sub_samples(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.EncryptionMode mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::media::remoting::pb::EncryptionMode_IsValid(val))) {
            set_mode(static_cast<::media::remoting::pb::EncryptionMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 crypt_byte_block = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_crypt_byte_block(&has_bits);
          crypt_byte_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 skip_byte_block = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_skip_byte_block(&has_bits);
          skip_byte_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DecryptConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.DecryptConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes iv = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_iv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .media.remoting.pb.DecryptConfig.SubSample sub_samples = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_sub_samples()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.EncryptionMode mode = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::media::remoting::pb::EncryptionMode_IsValid(value)) {
            set_mode(static_cast< ::media::remoting::pb::EncryptionMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crypt_byte_block = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_crypt_byte_block(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crypt_byte_block_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 skip_byte_block = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_skip_byte_block(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skip_byte_block_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.DecryptConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.DecryptConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DecryptConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.DecryptConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes key_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key_id(), output);
  }

  // optional bytes iv = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->iv(), output);
  }

  // repeated .media.remoting.pb.DecryptConfig.SubSample sub_samples = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sub_samples_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->sub_samples(static_cast<int>(i)),
      output);
  }

  // optional .media.remoting.pb.EncryptionMode mode = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->mode(), output);
  }

  // optional uint32 crypt_byte_block = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->crypt_byte_block(), output);
  }

  // optional uint32 skip_byte_block = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->skip_byte_block(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.DecryptConfig)
}

size_t DecryptConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.DecryptConfig)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .media.remoting.pb.DecryptConfig.SubSample sub_samples = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->sub_samples_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->sub_samples(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes key_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->key_id());
    }

    // optional bytes iv = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->iv());
    }

    // optional .media.remoting.pb.EncryptionMode mode = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->mode());
    }

    // optional uint32 crypt_byte_block = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->crypt_byte_block());
    }

    // optional uint32 skip_byte_block = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->skip_byte_block());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DecryptConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DecryptConfig*>(
      &from));
}

void DecryptConfig::MergeFrom(const DecryptConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.DecryptConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sub_samples_.MergeFrom(from.sub_samples_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      key_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      iv_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.iv_);
    }
    if (cached_has_bits & 0x00000004u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      crypt_byte_block_ = from.crypt_byte_block_;
    }
    if (cached_has_bits & 0x00000010u) {
      skip_byte_block_ = from.skip_byte_block_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DecryptConfig::CopyFrom(const DecryptConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.DecryptConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecryptConfig::IsInitialized() const {
  return true;
}

void DecryptConfig::InternalSwap(DecryptConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&sub_samples_)->InternalSwap(CastToBase(&other->sub_samples_));
  key_id_.Swap(&other->key_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  iv_.Swap(&other->iv_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mode_, other->mode_);
  swap(crypt_byte_block_, other->crypt_byte_block_);
  swap(skip_byte_block_, other->skip_byte_block_);
}

std::string DecryptConfig::GetTypeName() const {
  return "media.remoting.pb.DecryptConfig";
}


// ===================================================================

void PipelineDecoderInfo::InitAsDefaultInstance() {
}
class PipelineDecoderInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PipelineDecoderInfo>()._has_bits_);
  static void set_has_decoder_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_platform_decoder(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_has_decrypting_demuxer_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PipelineDecoderInfo::PipelineDecoderInfo()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.PipelineDecoderInfo)
}
PipelineDecoderInfo::PipelineDecoderInfo(const PipelineDecoderInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  decoder_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_decoder_name()) {
    decoder_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.decoder_name_);
  }
  ::memcpy(&is_platform_decoder_, &from.is_platform_decoder_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_decrypting_demuxer_stream_) -
    reinterpret_cast<char*>(&is_platform_decoder_)) + sizeof(has_decrypting_demuxer_stream_));
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.PipelineDecoderInfo)
}

void PipelineDecoderInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PipelineDecoderInfo_media_5fremoting_5frpc_2eproto.base);
  decoder_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_platform_decoder_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_decrypting_demuxer_stream_) -
      reinterpret_cast<char*>(&is_platform_decoder_)) + sizeof(has_decrypting_demuxer_stream_));
}

PipelineDecoderInfo::~PipelineDecoderInfo() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.PipelineDecoderInfo)
  SharedDtor();
}

void PipelineDecoderInfo::SharedDtor() {
  decoder_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PipelineDecoderInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PipelineDecoderInfo& PipelineDecoderInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PipelineDecoderInfo_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void PipelineDecoderInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.PipelineDecoderInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    decoder_name_.ClearNonDefaultToEmptyNoArena();
  }
  ::memset(&is_platform_decoder_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&has_decrypting_demuxer_stream_) -
      reinterpret_cast<char*>(&is_platform_decoder_)) + sizeof(has_decrypting_demuxer_stream_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PipelineDecoderInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string decoder_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_decoder_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_platform_decoder = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_platform_decoder(&has_bits);
          is_platform_decoder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_decrypting_demuxer_stream = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_has_decrypting_demuxer_stream(&has_bits);
          has_decrypting_demuxer_stream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PipelineDecoderInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.PipelineDecoderInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string decoder_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_decoder_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_platform_decoder = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_is_platform_decoder(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_platform_decoder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_decrypting_demuxer_stream = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_has_decrypting_demuxer_stream(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_decrypting_demuxer_stream_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.PipelineDecoderInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.PipelineDecoderInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PipelineDecoderInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.PipelineDecoderInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string decoder_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->decoder_name(), output);
  }

  // optional bool is_platform_decoder = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->is_platform_decoder(), output);
  }

  // optional bool has_decrypting_demuxer_stream = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->has_decrypting_demuxer_stream(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.PipelineDecoderInfo)
}

size_t PipelineDecoderInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.PipelineDecoderInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string decoder_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->decoder_name());
    }

    // optional bool is_platform_decoder = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool has_decrypting_demuxer_stream = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PipelineDecoderInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PipelineDecoderInfo*>(
      &from));
}

void PipelineDecoderInfo::MergeFrom(const PipelineDecoderInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.PipelineDecoderInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      decoder_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.decoder_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      is_platform_decoder_ = from.is_platform_decoder_;
    }
    if (cached_has_bits & 0x00000004u) {
      has_decrypting_demuxer_stream_ = from.has_decrypting_demuxer_stream_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PipelineDecoderInfo::CopyFrom(const PipelineDecoderInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.PipelineDecoderInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PipelineDecoderInfo::IsInitialized() const {
  return true;
}

void PipelineDecoderInfo::InternalSwap(PipelineDecoderInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  decoder_name_.Swap(&other->decoder_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_platform_decoder_, other->is_platform_decoder_);
  swap(has_decrypting_demuxer_stream_, other->has_decrypting_demuxer_stream_);
}

std::string PipelineDecoderInfo::GetTypeName() const {
  return "media.remoting.pb.PipelineDecoderInfo";
}


// ===================================================================

void PipelineStatistics::InitAsDefaultInstance() {
  ::media::remoting::pb::_PipelineStatistics_default_instance_._instance.get_mutable()->audio_decoder_info_ = const_cast< ::media::remoting::pb::PipelineDecoderInfo*>(
      ::media::remoting::pb::PipelineDecoderInfo::internal_default_instance());
  ::media::remoting::pb::_PipelineStatistics_default_instance_._instance.get_mutable()->video_decoder_info_ = const_cast< ::media::remoting::pb::PipelineDecoderInfo*>(
      ::media::remoting::pb::PipelineDecoderInfo::internal_default_instance());
}
class PipelineStatistics::_Internal {
 public:
  using HasBits = decltype(std::declval<PipelineStatistics>()._has_bits_);
  static void set_has_audio_bytes_decoded(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_video_bytes_decoded(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_video_frames_decoded(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_video_frames_dropped(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_audio_memory_usage(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_video_memory_usage(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_video_frame_duration_average_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::media::remoting::pb::PipelineDecoderInfo& audio_decoder_info(const PipelineStatistics* msg);
  static void set_has_audio_decoder_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::media::remoting::pb::PipelineDecoderInfo& video_decoder_info(const PipelineStatistics* msg);
  static void set_has_video_decoder_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::media::remoting::pb::PipelineDecoderInfo&
PipelineStatistics::_Internal::audio_decoder_info(const PipelineStatistics* msg) {
  return *msg->audio_decoder_info_;
}
const ::media::remoting::pb::PipelineDecoderInfo&
PipelineStatistics::_Internal::video_decoder_info(const PipelineStatistics* msg) {
  return *msg->video_decoder_info_;
}
PipelineStatistics::PipelineStatistics()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.PipelineStatistics)
}
PipelineStatistics::PipelineStatistics(const PipelineStatistics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_audio_decoder_info()) {
    audio_decoder_info_ = new ::media::remoting::pb::PipelineDecoderInfo(*from.audio_decoder_info_);
  } else {
    audio_decoder_info_ = nullptr;
  }
  if (from.has_video_decoder_info()) {
    video_decoder_info_ = new ::media::remoting::pb::PipelineDecoderInfo(*from.video_decoder_info_);
  } else {
    video_decoder_info_ = nullptr;
  }
  ::memcpy(&audio_bytes_decoded_, &from.audio_bytes_decoded_,
    static_cast<size_t>(reinterpret_cast<char*>(&video_frame_duration_average_usec_) -
    reinterpret_cast<char*>(&audio_bytes_decoded_)) + sizeof(video_frame_duration_average_usec_));
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.PipelineStatistics)
}

void PipelineStatistics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PipelineStatistics_media_5fremoting_5frpc_2eproto.base);
  ::memset(&audio_decoder_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&video_frame_duration_average_usec_) -
      reinterpret_cast<char*>(&audio_decoder_info_)) + sizeof(video_frame_duration_average_usec_));
}

PipelineStatistics::~PipelineStatistics() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.PipelineStatistics)
  SharedDtor();
}

void PipelineStatistics::SharedDtor() {
  if (this != internal_default_instance()) delete audio_decoder_info_;
  if (this != internal_default_instance()) delete video_decoder_info_;
}

void PipelineStatistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PipelineStatistics& PipelineStatistics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PipelineStatistics_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void PipelineStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.PipelineStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(audio_decoder_info_ != nullptr);
      audio_decoder_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(video_decoder_info_ != nullptr);
      video_decoder_info_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&audio_bytes_decoded_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&video_memory_usage_) -
        reinterpret_cast<char*>(&audio_bytes_decoded_)) + sizeof(video_memory_usage_));
  }
  video_frame_duration_average_usec_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PipelineStatistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 audio_bytes_decoded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_audio_bytes_decoded(&has_bits);
          audio_bytes_decoded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 video_bytes_decoded = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_video_bytes_decoded(&has_bits);
          video_bytes_decoded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 video_frames_decoded = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_video_frames_decoded(&has_bits);
          video_frames_decoded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 video_frames_dropped = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_video_frames_dropped(&has_bits);
          video_frames_dropped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 audio_memory_usage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_audio_memory_usage(&has_bits);
          audio_memory_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 video_memory_usage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_video_memory_usage(&has_bits);
          video_memory_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 video_frame_duration_average_usec = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_video_frame_duration_average_usec(&has_bits);
          video_frame_duration_average_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.PipelineDecoderInfo audio_decoder_info = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_audio_decoder_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.PipelineDecoderInfo video_decoder_info = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_video_decoder_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PipelineStatistics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.PipelineStatistics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 audio_bytes_decoded = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_audio_bytes_decoded(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &audio_bytes_decoded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 video_bytes_decoded = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_video_bytes_decoded(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &video_bytes_decoded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 video_frames_decoded = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_video_frames_decoded(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video_frames_decoded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 video_frames_dropped = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_video_frames_dropped(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video_frames_dropped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 audio_memory_usage = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_audio_memory_usage(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &audio_memory_usage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 video_memory_usage = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_video_memory_usage(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &video_memory_usage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 video_frame_duration_average_usec = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_video_frame_duration_average_usec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &video_frame_duration_average_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.PipelineDecoderInfo audio_decoder_info = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_audio_decoder_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.PipelineDecoderInfo video_decoder_info = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_video_decoder_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.PipelineStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.PipelineStatistics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PipelineStatistics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.PipelineStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 audio_bytes_decoded = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->audio_bytes_decoded(), output);
  }

  // optional uint64 video_bytes_decoded = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->video_bytes_decoded(), output);
  }

  // optional uint32 video_frames_decoded = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->video_frames_decoded(), output);
  }

  // optional uint32 video_frames_dropped = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->video_frames_dropped(), output);
  }

  // optional int64 audio_memory_usage = 5;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->audio_memory_usage(), output);
  }

  // optional int64 video_memory_usage = 6;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->video_memory_usage(), output);
  }

  // optional int64 video_frame_duration_average_usec = 7;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->video_frame_duration_average_usec(), output);
  }

  // optional .media.remoting.pb.PipelineDecoderInfo audio_decoder_info = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      8, _Internal::audio_decoder_info(this), output);
  }

  // optional .media.remoting.pb.PipelineDecoderInfo video_decoder_info = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      9, _Internal::video_decoder_info(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.PipelineStatistics)
}

size_t PipelineStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.PipelineStatistics)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .media.remoting.pb.PipelineDecoderInfo audio_decoder_info = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *audio_decoder_info_);
    }

    // optional .media.remoting.pb.PipelineDecoderInfo video_decoder_info = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *video_decoder_info_);
    }

    // optional uint64 audio_bytes_decoded = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->audio_bytes_decoded());
    }

    // optional uint64 video_bytes_decoded = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->video_bytes_decoded());
    }

    // optional uint32 video_frames_decoded = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->video_frames_decoded());
    }

    // optional uint32 video_frames_dropped = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->video_frames_dropped());
    }

    // optional int64 audio_memory_usage = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->audio_memory_usage());
    }

    // optional int64 video_memory_usage = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->video_memory_usage());
    }

  }
  // optional int64 video_frame_duration_average_usec = 7;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->video_frame_duration_average_usec());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PipelineStatistics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const PipelineStatistics*>(
      &from));
}

void PipelineStatistics::MergeFrom(const PipelineStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.PipelineStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_audio_decoder_info()->::media::remoting::pb::PipelineDecoderInfo::MergeFrom(from.audio_decoder_info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_video_decoder_info()->::media::remoting::pb::PipelineDecoderInfo::MergeFrom(from.video_decoder_info());
    }
    if (cached_has_bits & 0x00000004u) {
      audio_bytes_decoded_ = from.audio_bytes_decoded_;
    }
    if (cached_has_bits & 0x00000008u) {
      video_bytes_decoded_ = from.video_bytes_decoded_;
    }
    if (cached_has_bits & 0x00000010u) {
      video_frames_decoded_ = from.video_frames_decoded_;
    }
    if (cached_has_bits & 0x00000020u) {
      video_frames_dropped_ = from.video_frames_dropped_;
    }
    if (cached_has_bits & 0x00000040u) {
      audio_memory_usage_ = from.audio_memory_usage_;
    }
    if (cached_has_bits & 0x00000080u) {
      video_memory_usage_ = from.video_memory_usage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_video_frame_duration_average_usec(from.video_frame_duration_average_usec());
  }
}

void PipelineStatistics::CopyFrom(const PipelineStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.PipelineStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PipelineStatistics::IsInitialized() const {
  return true;
}

void PipelineStatistics::InternalSwap(PipelineStatistics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(audio_decoder_info_, other->audio_decoder_info_);
  swap(video_decoder_info_, other->video_decoder_info_);
  swap(audio_bytes_decoded_, other->audio_bytes_decoded_);
  swap(video_bytes_decoded_, other->video_bytes_decoded_);
  swap(video_frames_decoded_, other->video_frames_decoded_);
  swap(video_frames_dropped_, other->video_frames_dropped_);
  swap(audio_memory_usage_, other->audio_memory_usage_);
  swap(video_memory_usage_, other->video_memory_usage_);
  swap(video_frame_duration_average_usec_, other->video_frame_duration_average_usec_);
}

std::string PipelineStatistics::GetTypeName() const {
  return "media.remoting.pb.PipelineStatistics";
}


// ===================================================================

void CdmKeyInformation::InitAsDefaultInstance() {
}
class CdmKeyInformation::_Internal {
 public:
  using HasBits = decltype(std::declval<CdmKeyInformation>()._has_bits_);
  static void set_has_key_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_system_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CdmKeyInformation::CdmKeyInformation()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.CdmKeyInformation)
}
CdmKeyInformation::CdmKeyInformation(const CdmKeyInformation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_key_id()) {
    key_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_id_);
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&system_code_) -
    reinterpret_cast<char*>(&status_)) + sizeof(system_code_));
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.CdmKeyInformation)
}

void CdmKeyInformation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CdmKeyInformation_media_5fremoting_5frpc_2eproto.base);
  key_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&system_code_) -
      reinterpret_cast<char*>(&status_)) + sizeof(system_code_));
}

CdmKeyInformation::~CdmKeyInformation() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.CdmKeyInformation)
  SharedDtor();
}

void CdmKeyInformation::SharedDtor() {
  key_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CdmKeyInformation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CdmKeyInformation& CdmKeyInformation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CdmKeyInformation_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void CdmKeyInformation::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.CdmKeyInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&system_code_) -
        reinterpret_cast<char*>(&status_)) + sizeof(system_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CdmKeyInformation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes key_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_key_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.CdmKeyInformation.KeyStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::media::remoting::pb::CdmKeyInformation_KeyStatus_IsValid(val))) {
            set_status(static_cast<::media::remoting::pb::CdmKeyInformation_KeyStatus>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 system_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_system_code(&has_bits);
          system_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CdmKeyInformation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.CdmKeyInformation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.CdmKeyInformation.KeyStatus status = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::media::remoting::pb::CdmKeyInformation_KeyStatus_IsValid(value)) {
            set_status(static_cast< ::media::remoting::pb::CdmKeyInformation_KeyStatus >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 system_code = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_system_code(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &system_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.CdmKeyInformation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.CdmKeyInformation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CdmKeyInformation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.CdmKeyInformation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes key_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key_id(), output);
  }

  // optional .media.remoting.pb.CdmKeyInformation.KeyStatus status = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional uint32 system_code = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->system_code(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.CdmKeyInformation)
}

size_t CdmKeyInformation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.CdmKeyInformation)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes key_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->key_id());
    }

    // optional .media.remoting.pb.CdmKeyInformation.KeyStatus status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint32 system_code = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->system_code());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CdmKeyInformation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CdmKeyInformation*>(
      &from));
}

void CdmKeyInformation::MergeFrom(const CdmKeyInformation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.CdmKeyInformation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      key_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000004u) {
      system_code_ = from.system_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CdmKeyInformation::CopyFrom(const CdmKeyInformation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.CdmKeyInformation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CdmKeyInformation::IsInitialized() const {
  return true;
}

void CdmKeyInformation::InternalSwap(CdmKeyInformation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_id_.Swap(&other->key_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(system_code_, other->system_code_);
}

std::string CdmKeyInformation::GetTypeName() const {
  return "media.remoting.pb.CdmKeyInformation";
}


// ===================================================================

void AcquireDemuxer::InitAsDefaultInstance() {
}
class AcquireDemuxer::_Internal {
 public:
  using HasBits = decltype(std::declval<AcquireDemuxer>()._has_bits_);
  static void set_has_audio_demuxer_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_video_demuxer_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AcquireDemuxer::AcquireDemuxer()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.AcquireDemuxer)
}
AcquireDemuxer::AcquireDemuxer(const AcquireDemuxer& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&audio_demuxer_handle_, &from.audio_demuxer_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&video_demuxer_handle_) -
    reinterpret_cast<char*>(&audio_demuxer_handle_)) + sizeof(video_demuxer_handle_));
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.AcquireDemuxer)
}

void AcquireDemuxer::SharedCtor() {
  ::memset(&audio_demuxer_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&video_demuxer_handle_) -
      reinterpret_cast<char*>(&audio_demuxer_handle_)) + sizeof(video_demuxer_handle_));
}

AcquireDemuxer::~AcquireDemuxer() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.AcquireDemuxer)
  SharedDtor();
}

void AcquireDemuxer::SharedDtor() {
}

void AcquireDemuxer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AcquireDemuxer& AcquireDemuxer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AcquireDemuxer_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void AcquireDemuxer::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.AcquireDemuxer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&audio_demuxer_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&video_demuxer_handle_) -
        reinterpret_cast<char*>(&audio_demuxer_handle_)) + sizeof(video_demuxer_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AcquireDemuxer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 audio_demuxer_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_audio_demuxer_handle(&has_bits);
          audio_demuxer_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 video_demuxer_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_video_demuxer_handle(&has_bits);
          video_demuxer_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AcquireDemuxer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.AcquireDemuxer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 audio_demuxer_handle = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_audio_demuxer_handle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &audio_demuxer_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 video_demuxer_handle = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_video_demuxer_handle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &video_demuxer_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.AcquireDemuxer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.AcquireDemuxer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AcquireDemuxer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.AcquireDemuxer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 audio_demuxer_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->audio_demuxer_handle(), output);
  }

  // optional int32 video_demuxer_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->video_demuxer_handle(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.AcquireDemuxer)
}

size_t AcquireDemuxer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.AcquireDemuxer)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 audio_demuxer_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->audio_demuxer_handle());
    }

    // optional int32 video_demuxer_handle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->video_demuxer_handle());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AcquireDemuxer::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AcquireDemuxer*>(
      &from));
}

void AcquireDemuxer::MergeFrom(const AcquireDemuxer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.AcquireDemuxer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      audio_demuxer_handle_ = from.audio_demuxer_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      video_demuxer_handle_ = from.video_demuxer_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AcquireDemuxer::CopyFrom(const AcquireDemuxer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.AcquireDemuxer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcquireDemuxer::IsInitialized() const {
  return true;
}

void AcquireDemuxer::InternalSwap(AcquireDemuxer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(audio_demuxer_handle_, other->audio_demuxer_handle_);
  swap(video_demuxer_handle_, other->video_demuxer_handle_);
}

std::string AcquireDemuxer::GetTypeName() const {
  return "media.remoting.pb.AcquireDemuxer";
}


// ===================================================================

void RendererInitialize::InitAsDefaultInstance() {
}
class RendererInitialize::_Internal {
 public:
  using HasBits = decltype(std::declval<RendererInitialize>()._has_bits_);
  static void set_has_client_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_audio_demuxer_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_video_demuxer_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_callback_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

RendererInitialize::RendererInitialize()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.RendererInitialize)
}
RendererInitialize::RendererInitialize(const RendererInitialize& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&client_handle_, &from.client_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&callback_handle_) -
    reinterpret_cast<char*>(&client_handle_)) + sizeof(callback_handle_));
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.RendererInitialize)
}

void RendererInitialize::SharedCtor() {
  ::memset(&client_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&callback_handle_) -
      reinterpret_cast<char*>(&client_handle_)) + sizeof(callback_handle_));
}

RendererInitialize::~RendererInitialize() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.RendererInitialize)
  SharedDtor();
}

void RendererInitialize::SharedDtor() {
}

void RendererInitialize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RendererInitialize& RendererInitialize::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RendererInitialize_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void RendererInitialize::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.RendererInitialize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&client_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&callback_handle_) -
        reinterpret_cast<char*>(&client_handle_)) + sizeof(callback_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RendererInitialize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 client_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_client_handle(&has_bits);
          client_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 audio_demuxer_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_audio_demuxer_handle(&has_bits);
          audio_demuxer_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 video_demuxer_handle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_video_demuxer_handle(&has_bits);
          video_demuxer_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 callback_handle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_callback_handle(&has_bits);
          callback_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RendererInitialize::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.RendererInitialize)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 client_handle = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_client_handle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 audio_demuxer_handle = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_audio_demuxer_handle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &audio_demuxer_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 video_demuxer_handle = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_video_demuxer_handle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &video_demuxer_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 callback_handle = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_callback_handle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.RendererInitialize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.RendererInitialize)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RendererInitialize::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.RendererInitialize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 client_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->client_handle(), output);
  }

  // optional int32 audio_demuxer_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->audio_demuxer_handle(), output);
  }

  // optional int32 video_demuxer_handle = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->video_demuxer_handle(), output);
  }

  // optional int32 callback_handle = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->callback_handle(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.RendererInitialize)
}

size_t RendererInitialize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.RendererInitialize)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 client_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->client_handle());
    }

    // optional int32 audio_demuxer_handle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->audio_demuxer_handle());
    }

    // optional int32 video_demuxer_handle = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->video_demuxer_handle());
    }

    // optional int32 callback_handle = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->callback_handle());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RendererInitialize::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RendererInitialize*>(
      &from));
}

void RendererInitialize::MergeFrom(const RendererInitialize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.RendererInitialize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      client_handle_ = from.client_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      audio_demuxer_handle_ = from.audio_demuxer_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      video_demuxer_handle_ = from.video_demuxer_handle_;
    }
    if (cached_has_bits & 0x00000008u) {
      callback_handle_ = from.callback_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RendererInitialize::CopyFrom(const RendererInitialize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.RendererInitialize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RendererInitialize::IsInitialized() const {
  return true;
}

void RendererInitialize::InternalSwap(RendererInitialize* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(client_handle_, other->client_handle_);
  swap(audio_demuxer_handle_, other->audio_demuxer_handle_);
  swap(video_demuxer_handle_, other->video_demuxer_handle_);
  swap(callback_handle_, other->callback_handle_);
}

std::string RendererInitialize::GetTypeName() const {
  return "media.remoting.pb.RendererInitialize";
}


// ===================================================================

void RendererFlushUntil::InitAsDefaultInstance() {
}
class RendererFlushUntil::_Internal {
 public:
  using HasBits = decltype(std::declval<RendererFlushUntil>()._has_bits_);
  static void set_has_audio_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_video_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_callback_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

RendererFlushUntil::RendererFlushUntil()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.RendererFlushUntil)
}
RendererFlushUntil::RendererFlushUntil(const RendererFlushUntil& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&audio_count_, &from.audio_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&callback_handle_) -
    reinterpret_cast<char*>(&audio_count_)) + sizeof(callback_handle_));
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.RendererFlushUntil)
}

void RendererFlushUntil::SharedCtor() {
  ::memset(&audio_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&callback_handle_) -
      reinterpret_cast<char*>(&audio_count_)) + sizeof(callback_handle_));
}

RendererFlushUntil::~RendererFlushUntil() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.RendererFlushUntil)
  SharedDtor();
}

void RendererFlushUntil::SharedDtor() {
}

void RendererFlushUntil::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RendererFlushUntil& RendererFlushUntil::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RendererFlushUntil_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void RendererFlushUntil::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.RendererFlushUntil)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&audio_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&callback_handle_) -
        reinterpret_cast<char*>(&audio_count_)) + sizeof(callback_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RendererFlushUntil::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 audio_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_audio_count(&has_bits);
          audio_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 video_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_video_count(&has_bits);
          video_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 callback_handle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_callback_handle(&has_bits);
          callback_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RendererFlushUntil::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.RendererFlushUntil)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 audio_count = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_audio_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audio_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 video_count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_video_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 callback_handle = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_callback_handle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.RendererFlushUntil)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.RendererFlushUntil)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RendererFlushUntil::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.RendererFlushUntil)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 audio_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->audio_count(), output);
  }

  // optional uint32 video_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->video_count(), output);
  }

  // optional int32 callback_handle = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->callback_handle(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.RendererFlushUntil)
}

size_t RendererFlushUntil::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.RendererFlushUntil)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 audio_count = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->audio_count());
    }

    // optional uint32 video_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->video_count());
    }

    // optional int32 callback_handle = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->callback_handle());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RendererFlushUntil::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RendererFlushUntil*>(
      &from));
}

void RendererFlushUntil::MergeFrom(const RendererFlushUntil& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.RendererFlushUntil)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      audio_count_ = from.audio_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      video_count_ = from.video_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      callback_handle_ = from.callback_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RendererFlushUntil::CopyFrom(const RendererFlushUntil& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.RendererFlushUntil)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RendererFlushUntil::IsInitialized() const {
  return true;
}

void RendererFlushUntil::InternalSwap(RendererFlushUntil* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(audio_count_, other->audio_count_);
  swap(video_count_, other->video_count_);
  swap(callback_handle_, other->callback_handle_);
}

std::string RendererFlushUntil::GetTypeName() const {
  return "media.remoting.pb.RendererFlushUntil";
}


// ===================================================================

void RendererSetCdm::InitAsDefaultInstance() {
}
class RendererSetCdm::_Internal {
 public:
  using HasBits = decltype(std::declval<RendererSetCdm>()._has_bits_);
  static void set_has_cdm_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_callback_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RendererSetCdm::RendererSetCdm()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.RendererSetCdm)
}
RendererSetCdm::RendererSetCdm(const RendererSetCdm& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cdm_id_, &from.cdm_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&callback_handle_) -
    reinterpret_cast<char*>(&cdm_id_)) + sizeof(callback_handle_));
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.RendererSetCdm)
}

void RendererSetCdm::SharedCtor() {
  ::memset(&cdm_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&callback_handle_) -
      reinterpret_cast<char*>(&cdm_id_)) + sizeof(callback_handle_));
}

RendererSetCdm::~RendererSetCdm() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.RendererSetCdm)
  SharedDtor();
}

void RendererSetCdm::SharedDtor() {
}

void RendererSetCdm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RendererSetCdm& RendererSetCdm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RendererSetCdm_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void RendererSetCdm::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.RendererSetCdm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&cdm_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&callback_handle_) -
        reinterpret_cast<char*>(&cdm_id_)) + sizeof(callback_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RendererSetCdm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 cdm_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cdm_id(&has_bits);
          cdm_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 callback_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_callback_handle(&has_bits);
          callback_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RendererSetCdm::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.RendererSetCdm)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cdm_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_cdm_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cdm_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 callback_handle = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_callback_handle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.RendererSetCdm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.RendererSetCdm)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RendererSetCdm::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.RendererSetCdm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cdm_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->cdm_id(), output);
  }

  // optional int32 callback_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->callback_handle(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.RendererSetCdm)
}

size_t RendererSetCdm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.RendererSetCdm)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 cdm_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->cdm_id());
    }

    // optional int32 callback_handle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->callback_handle());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RendererSetCdm::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RendererSetCdm*>(
      &from));
}

void RendererSetCdm::MergeFrom(const RendererSetCdm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.RendererSetCdm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cdm_id_ = from.cdm_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      callback_handle_ = from.callback_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RendererSetCdm::CopyFrom(const RendererSetCdm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.RendererSetCdm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RendererSetCdm::IsInitialized() const {
  return true;
}

void RendererSetCdm::InternalSwap(RendererSetCdm* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cdm_id_, other->cdm_id_);
  swap(callback_handle_, other->callback_handle_);
}

std::string RendererSetCdm::GetTypeName() const {
  return "media.remoting.pb.RendererSetCdm";
}


// ===================================================================

void RendererClientOnTimeUpdate::InitAsDefaultInstance() {
}
class RendererClientOnTimeUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<RendererClientOnTimeUpdate>()._has_bits_);
  static void set_has_time_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max_time_usec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RendererClientOnTimeUpdate::RendererClientOnTimeUpdate()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.RendererClientOnTimeUpdate)
}
RendererClientOnTimeUpdate::RendererClientOnTimeUpdate(const RendererClientOnTimeUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_usec_, &from.time_usec_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_time_usec_) -
    reinterpret_cast<char*>(&time_usec_)) + sizeof(max_time_usec_));
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.RendererClientOnTimeUpdate)
}

void RendererClientOnTimeUpdate::SharedCtor() {
  ::memset(&time_usec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_time_usec_) -
      reinterpret_cast<char*>(&time_usec_)) + sizeof(max_time_usec_));
}

RendererClientOnTimeUpdate::~RendererClientOnTimeUpdate() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.RendererClientOnTimeUpdate)
  SharedDtor();
}

void RendererClientOnTimeUpdate::SharedDtor() {
}

void RendererClientOnTimeUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RendererClientOnTimeUpdate& RendererClientOnTimeUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RendererClientOnTimeUpdate_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void RendererClientOnTimeUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.RendererClientOnTimeUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&time_usec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_time_usec_) -
        reinterpret_cast<char*>(&time_usec_)) + sizeof(max_time_usec_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RendererClientOnTimeUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 time_usec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_time_usec(&has_bits);
          time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 max_time_usec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_max_time_usec(&has_bits);
          max_time_usec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RendererClientOnTimeUpdate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.RendererClientOnTimeUpdate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time_usec = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_time_usec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max_time_usec = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_max_time_usec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_time_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.RendererClientOnTimeUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.RendererClientOnTimeUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RendererClientOnTimeUpdate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.RendererClientOnTimeUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 time_usec = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->time_usec(), output);
  }

  // optional int64 max_time_usec = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->max_time_usec(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.RendererClientOnTimeUpdate)
}

size_t RendererClientOnTimeUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.RendererClientOnTimeUpdate)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 time_usec = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->time_usec());
    }

    // optional int64 max_time_usec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->max_time_usec());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RendererClientOnTimeUpdate::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RendererClientOnTimeUpdate*>(
      &from));
}

void RendererClientOnTimeUpdate::MergeFrom(const RendererClientOnTimeUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.RendererClientOnTimeUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      time_usec_ = from.time_usec_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_time_usec_ = from.max_time_usec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RendererClientOnTimeUpdate::CopyFrom(const RendererClientOnTimeUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.RendererClientOnTimeUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RendererClientOnTimeUpdate::IsInitialized() const {
  return true;
}

void RendererClientOnTimeUpdate::InternalSwap(RendererClientOnTimeUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(time_usec_, other->time_usec_);
  swap(max_time_usec_, other->max_time_usec_);
}

std::string RendererClientOnTimeUpdate::GetTypeName() const {
  return "media.remoting.pb.RendererClientOnTimeUpdate";
}


// ===================================================================

void RendererClientOnBufferingStateChange::InitAsDefaultInstance() {
}
class RendererClientOnBufferingStateChange::_Internal {
 public:
  using HasBits = decltype(std::declval<RendererClientOnBufferingStateChange>()._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RendererClientOnBufferingStateChange::RendererClientOnBufferingStateChange()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.RendererClientOnBufferingStateChange)
}
RendererClientOnBufferingStateChange::RendererClientOnBufferingStateChange(const RendererClientOnBufferingStateChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.RendererClientOnBufferingStateChange)
}

void RendererClientOnBufferingStateChange::SharedCtor() {
  state_ = 0;
}

RendererClientOnBufferingStateChange::~RendererClientOnBufferingStateChange() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.RendererClientOnBufferingStateChange)
  SharedDtor();
}

void RendererClientOnBufferingStateChange::SharedDtor() {
}

void RendererClientOnBufferingStateChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RendererClientOnBufferingStateChange& RendererClientOnBufferingStateChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RendererClientOnBufferingStateChange_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void RendererClientOnBufferingStateChange::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.RendererClientOnBufferingStateChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RendererClientOnBufferingStateChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .media.remoting.pb.RendererClientOnBufferingStateChange.State state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::media::remoting::pb::RendererClientOnBufferingStateChange_State_IsValid(val))) {
            set_state(static_cast<::media::remoting::pb::RendererClientOnBufferingStateChange_State>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RendererClientOnBufferingStateChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.RendererClientOnBufferingStateChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .media.remoting.pb.RendererClientOnBufferingStateChange.State state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::media::remoting::pb::RendererClientOnBufferingStateChange_State_IsValid(value)) {
            set_state(static_cast< ::media::remoting::pb::RendererClientOnBufferingStateChange_State >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.RendererClientOnBufferingStateChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.RendererClientOnBufferingStateChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RendererClientOnBufferingStateChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.RendererClientOnBufferingStateChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .media.remoting.pb.RendererClientOnBufferingStateChange.State state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.RendererClientOnBufferingStateChange)
}

size_t RendererClientOnBufferingStateChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.RendererClientOnBufferingStateChange)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .media.remoting.pb.RendererClientOnBufferingStateChange.State state = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RendererClientOnBufferingStateChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RendererClientOnBufferingStateChange*>(
      &from));
}

void RendererClientOnBufferingStateChange::MergeFrom(const RendererClientOnBufferingStateChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.RendererClientOnBufferingStateChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    set_state(from.state());
  }
}

void RendererClientOnBufferingStateChange::CopyFrom(const RendererClientOnBufferingStateChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.RendererClientOnBufferingStateChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RendererClientOnBufferingStateChange::IsInitialized() const {
  return true;
}

void RendererClientOnBufferingStateChange::InternalSwap(RendererClientOnBufferingStateChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(state_, other->state_);
}

std::string RendererClientOnBufferingStateChange::GetTypeName() const {
  return "media.remoting.pb.RendererClientOnBufferingStateChange";
}


// ===================================================================

void RendererClientOnAudioConfigChange::InitAsDefaultInstance() {
  ::media::remoting::pb::_RendererClientOnAudioConfigChange_default_instance_._instance.get_mutable()->audio_decoder_config_ = const_cast< ::media::remoting::pb::AudioDecoderConfig*>(
      ::media::remoting::pb::AudioDecoderConfig::internal_default_instance());
}
class RendererClientOnAudioConfigChange::_Internal {
 public:
  using HasBits = decltype(std::declval<RendererClientOnAudioConfigChange>()._has_bits_);
  static const ::media::remoting::pb::AudioDecoderConfig& audio_decoder_config(const RendererClientOnAudioConfigChange* msg);
  static void set_has_audio_decoder_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::media::remoting::pb::AudioDecoderConfig&
RendererClientOnAudioConfigChange::_Internal::audio_decoder_config(const RendererClientOnAudioConfigChange* msg) {
  return *msg->audio_decoder_config_;
}
RendererClientOnAudioConfigChange::RendererClientOnAudioConfigChange()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.RendererClientOnAudioConfigChange)
}
RendererClientOnAudioConfigChange::RendererClientOnAudioConfigChange(const RendererClientOnAudioConfigChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_audio_decoder_config()) {
    audio_decoder_config_ = new ::media::remoting::pb::AudioDecoderConfig(*from.audio_decoder_config_);
  } else {
    audio_decoder_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.RendererClientOnAudioConfigChange)
}

void RendererClientOnAudioConfigChange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RendererClientOnAudioConfigChange_media_5fremoting_5frpc_2eproto.base);
  audio_decoder_config_ = nullptr;
}

RendererClientOnAudioConfigChange::~RendererClientOnAudioConfigChange() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.RendererClientOnAudioConfigChange)
  SharedDtor();
}

void RendererClientOnAudioConfigChange::SharedDtor() {
  if (this != internal_default_instance()) delete audio_decoder_config_;
}

void RendererClientOnAudioConfigChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RendererClientOnAudioConfigChange& RendererClientOnAudioConfigChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RendererClientOnAudioConfigChange_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void RendererClientOnAudioConfigChange::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.RendererClientOnAudioConfigChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(audio_decoder_config_ != nullptr);
    audio_decoder_config_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RendererClientOnAudioConfigChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .media.remoting.pb.AudioDecoderConfig audio_decoder_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_audio_decoder_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RendererClientOnAudioConfigChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.RendererClientOnAudioConfigChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .media.remoting.pb.AudioDecoderConfig audio_decoder_config = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_audio_decoder_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.RendererClientOnAudioConfigChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.RendererClientOnAudioConfigChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RendererClientOnAudioConfigChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.RendererClientOnAudioConfigChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .media.remoting.pb.AudioDecoderConfig audio_decoder_config = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::audio_decoder_config(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.RendererClientOnAudioConfigChange)
}

size_t RendererClientOnAudioConfigChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.RendererClientOnAudioConfigChange)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .media.remoting.pb.AudioDecoderConfig audio_decoder_config = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *audio_decoder_config_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RendererClientOnAudioConfigChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RendererClientOnAudioConfigChange*>(
      &from));
}

void RendererClientOnAudioConfigChange::MergeFrom(const RendererClientOnAudioConfigChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.RendererClientOnAudioConfigChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_audio_decoder_config()) {
    mutable_audio_decoder_config()->::media::remoting::pb::AudioDecoderConfig::MergeFrom(from.audio_decoder_config());
  }
}

void RendererClientOnAudioConfigChange::CopyFrom(const RendererClientOnAudioConfigChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.RendererClientOnAudioConfigChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RendererClientOnAudioConfigChange::IsInitialized() const {
  return true;
}

void RendererClientOnAudioConfigChange::InternalSwap(RendererClientOnAudioConfigChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(audio_decoder_config_, other->audio_decoder_config_);
}

std::string RendererClientOnAudioConfigChange::GetTypeName() const {
  return "media.remoting.pb.RendererClientOnAudioConfigChange";
}


// ===================================================================

void RendererClientOnVideoConfigChange::InitAsDefaultInstance() {
  ::media::remoting::pb::_RendererClientOnVideoConfigChange_default_instance_._instance.get_mutable()->video_decoder_config_ = const_cast< ::media::remoting::pb::VideoDecoderConfig*>(
      ::media::remoting::pb::VideoDecoderConfig::internal_default_instance());
}
class RendererClientOnVideoConfigChange::_Internal {
 public:
  using HasBits = decltype(std::declval<RendererClientOnVideoConfigChange>()._has_bits_);
  static const ::media::remoting::pb::VideoDecoderConfig& video_decoder_config(const RendererClientOnVideoConfigChange* msg);
  static void set_has_video_decoder_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::media::remoting::pb::VideoDecoderConfig&
RendererClientOnVideoConfigChange::_Internal::video_decoder_config(const RendererClientOnVideoConfigChange* msg) {
  return *msg->video_decoder_config_;
}
RendererClientOnVideoConfigChange::RendererClientOnVideoConfigChange()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.RendererClientOnVideoConfigChange)
}
RendererClientOnVideoConfigChange::RendererClientOnVideoConfigChange(const RendererClientOnVideoConfigChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_video_decoder_config()) {
    video_decoder_config_ = new ::media::remoting::pb::VideoDecoderConfig(*from.video_decoder_config_);
  } else {
    video_decoder_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.RendererClientOnVideoConfigChange)
}

void RendererClientOnVideoConfigChange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RendererClientOnVideoConfigChange_media_5fremoting_5frpc_2eproto.base);
  video_decoder_config_ = nullptr;
}

RendererClientOnVideoConfigChange::~RendererClientOnVideoConfigChange() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.RendererClientOnVideoConfigChange)
  SharedDtor();
}

void RendererClientOnVideoConfigChange::SharedDtor() {
  if (this != internal_default_instance()) delete video_decoder_config_;
}

void RendererClientOnVideoConfigChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RendererClientOnVideoConfigChange& RendererClientOnVideoConfigChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RendererClientOnVideoConfigChange_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void RendererClientOnVideoConfigChange::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.RendererClientOnVideoConfigChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(video_decoder_config_ != nullptr);
    video_decoder_config_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RendererClientOnVideoConfigChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .media.remoting.pb.VideoDecoderConfig video_decoder_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_video_decoder_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RendererClientOnVideoConfigChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.RendererClientOnVideoConfigChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .media.remoting.pb.VideoDecoderConfig video_decoder_config = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_video_decoder_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.RendererClientOnVideoConfigChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.RendererClientOnVideoConfigChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RendererClientOnVideoConfigChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.RendererClientOnVideoConfigChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .media.remoting.pb.VideoDecoderConfig video_decoder_config = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      1, _Internal::video_decoder_config(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.RendererClientOnVideoConfigChange)
}

size_t RendererClientOnVideoConfigChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.RendererClientOnVideoConfigChange)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .media.remoting.pb.VideoDecoderConfig video_decoder_config = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *video_decoder_config_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RendererClientOnVideoConfigChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RendererClientOnVideoConfigChange*>(
      &from));
}

void RendererClientOnVideoConfigChange::MergeFrom(const RendererClientOnVideoConfigChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.RendererClientOnVideoConfigChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_video_decoder_config()) {
    mutable_video_decoder_config()->::media::remoting::pb::VideoDecoderConfig::MergeFrom(from.video_decoder_config());
  }
}

void RendererClientOnVideoConfigChange::CopyFrom(const RendererClientOnVideoConfigChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.RendererClientOnVideoConfigChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RendererClientOnVideoConfigChange::IsInitialized() const {
  return true;
}

void RendererClientOnVideoConfigChange::InternalSwap(RendererClientOnVideoConfigChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(video_decoder_config_, other->video_decoder_config_);
}

std::string RendererClientOnVideoConfigChange::GetTypeName() const {
  return "media.remoting.pb.RendererClientOnVideoConfigChange";
}


// ===================================================================

void DemuxerStreamReadUntil::InitAsDefaultInstance() {
}
class DemuxerStreamReadUntil::_Internal {
 public:
  using HasBits = decltype(std::declval<DemuxerStreamReadUntil>()._has_bits_);
  static void set_has_callback_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DemuxerStreamReadUntil::DemuxerStreamReadUntil()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.DemuxerStreamReadUntil)
}
DemuxerStreamReadUntil::DemuxerStreamReadUntil(const DemuxerStreamReadUntil& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&callback_handle_, &from.callback_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&callback_handle_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.DemuxerStreamReadUntil)
}

void DemuxerStreamReadUntil::SharedCtor() {
  ::memset(&callback_handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&callback_handle_)) + sizeof(count_));
}

DemuxerStreamReadUntil::~DemuxerStreamReadUntil() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.DemuxerStreamReadUntil)
  SharedDtor();
}

void DemuxerStreamReadUntil::SharedDtor() {
}

void DemuxerStreamReadUntil::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DemuxerStreamReadUntil& DemuxerStreamReadUntil::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DemuxerStreamReadUntil_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void DemuxerStreamReadUntil::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.DemuxerStreamReadUntil)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&callback_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&callback_handle_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DemuxerStreamReadUntil::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 callback_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_callback_handle(&has_bits);
          callback_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DemuxerStreamReadUntil::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.DemuxerStreamReadUntil)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 callback_handle = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_callback_handle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.DemuxerStreamReadUntil)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.DemuxerStreamReadUntil)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DemuxerStreamReadUntil::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.DemuxerStreamReadUntil)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 callback_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->callback_handle(), output);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.DemuxerStreamReadUntil)
}

size_t DemuxerStreamReadUntil::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.DemuxerStreamReadUntil)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 callback_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->callback_handle());
    }

    // optional uint32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DemuxerStreamReadUntil::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DemuxerStreamReadUntil*>(
      &from));
}

void DemuxerStreamReadUntil::MergeFrom(const DemuxerStreamReadUntil& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.DemuxerStreamReadUntil)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      callback_handle_ = from.callback_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DemuxerStreamReadUntil::CopyFrom(const DemuxerStreamReadUntil& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.DemuxerStreamReadUntil)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DemuxerStreamReadUntil::IsInitialized() const {
  return true;
}

void DemuxerStreamReadUntil::InternalSwap(DemuxerStreamReadUntil* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(callback_handle_, other->callback_handle_);
  swap(count_, other->count_);
}

std::string DemuxerStreamReadUntil::GetTypeName() const {
  return "media.remoting.pb.DemuxerStreamReadUntil";
}


// ===================================================================

void DemuxerStreamInitializeCallback::InitAsDefaultInstance() {
  ::media::remoting::pb::_DemuxerStreamInitializeCallback_default_instance_._instance.get_mutable()->audio_decoder_config_ = const_cast< ::media::remoting::pb::AudioDecoderConfig*>(
      ::media::remoting::pb::AudioDecoderConfig::internal_default_instance());
  ::media::remoting::pb::_DemuxerStreamInitializeCallback_default_instance_._instance.get_mutable()->video_decoder_config_ = const_cast< ::media::remoting::pb::VideoDecoderConfig*>(
      ::media::remoting::pb::VideoDecoderConfig::internal_default_instance());
}
class DemuxerStreamInitializeCallback::_Internal {
 public:
  using HasBits = decltype(std::declval<DemuxerStreamInitializeCallback>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::media::remoting::pb::AudioDecoderConfig& audio_decoder_config(const DemuxerStreamInitializeCallback* msg);
  static void set_has_audio_decoder_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::media::remoting::pb::VideoDecoderConfig& video_decoder_config(const DemuxerStreamInitializeCallback* msg);
  static void set_has_video_decoder_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::media::remoting::pb::AudioDecoderConfig&
DemuxerStreamInitializeCallback::_Internal::audio_decoder_config(const DemuxerStreamInitializeCallback* msg) {
  return *msg->audio_decoder_config_;
}
const ::media::remoting::pb::VideoDecoderConfig&
DemuxerStreamInitializeCallback::_Internal::video_decoder_config(const DemuxerStreamInitializeCallback* msg) {
  return *msg->video_decoder_config_;
}
DemuxerStreamInitializeCallback::DemuxerStreamInitializeCallback()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.DemuxerStreamInitializeCallback)
}
DemuxerStreamInitializeCallback::DemuxerStreamInitializeCallback(const DemuxerStreamInitializeCallback& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_audio_decoder_config()) {
    audio_decoder_config_ = new ::media::remoting::pb::AudioDecoderConfig(*from.audio_decoder_config_);
  } else {
    audio_decoder_config_ = nullptr;
  }
  if (from.has_video_decoder_config()) {
    video_decoder_config_ = new ::media::remoting::pb::VideoDecoderConfig(*from.video_decoder_config_);
  } else {
    video_decoder_config_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.DemuxerStreamInitializeCallback)
}

void DemuxerStreamInitializeCallback::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DemuxerStreamInitializeCallback_media_5fremoting_5frpc_2eproto.base);
  ::memset(&audio_decoder_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&audio_decoder_config_)) + sizeof(type_));
}

DemuxerStreamInitializeCallback::~DemuxerStreamInitializeCallback() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.DemuxerStreamInitializeCallback)
  SharedDtor();
}

void DemuxerStreamInitializeCallback::SharedDtor() {
  if (this != internal_default_instance()) delete audio_decoder_config_;
  if (this != internal_default_instance()) delete video_decoder_config_;
}

void DemuxerStreamInitializeCallback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DemuxerStreamInitializeCallback& DemuxerStreamInitializeCallback::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DemuxerStreamInitializeCallback_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void DemuxerStreamInitializeCallback::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.DemuxerStreamInitializeCallback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(audio_decoder_config_ != nullptr);
      audio_decoder_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(video_decoder_config_ != nullptr);
      video_decoder_config_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DemuxerStreamInitializeCallback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.AudioDecoderConfig audio_decoder_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_audio_decoder_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.VideoDecoderConfig video_decoder_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_video_decoder_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DemuxerStreamInitializeCallback::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.DemuxerStreamInitializeCallback)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_type(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.AudioDecoderConfig audio_decoder_config = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_audio_decoder_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.VideoDecoderConfig video_decoder_config = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_video_decoder_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.DemuxerStreamInitializeCallback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.DemuxerStreamInitializeCallback)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DemuxerStreamInitializeCallback::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.DemuxerStreamInitializeCallback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional .media.remoting.pb.AudioDecoderConfig audio_decoder_config = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2, _Internal::audio_decoder_config(this), output);
  }

  // optional .media.remoting.pb.VideoDecoderConfig video_decoder_config = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::video_decoder_config(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.DemuxerStreamInitializeCallback)
}

size_t DemuxerStreamInitializeCallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.DemuxerStreamInitializeCallback)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .media.remoting.pb.AudioDecoderConfig audio_decoder_config = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *audio_decoder_config_);
    }

    // optional .media.remoting.pb.VideoDecoderConfig video_decoder_config = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *video_decoder_config_);
    }

    // optional int32 type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DemuxerStreamInitializeCallback::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DemuxerStreamInitializeCallback*>(
      &from));
}

void DemuxerStreamInitializeCallback::MergeFrom(const DemuxerStreamInitializeCallback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.DemuxerStreamInitializeCallback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_audio_decoder_config()->::media::remoting::pb::AudioDecoderConfig::MergeFrom(from.audio_decoder_config());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_video_decoder_config()->::media::remoting::pb::VideoDecoderConfig::MergeFrom(from.video_decoder_config());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DemuxerStreamInitializeCallback::CopyFrom(const DemuxerStreamInitializeCallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.DemuxerStreamInitializeCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DemuxerStreamInitializeCallback::IsInitialized() const {
  return true;
}

void DemuxerStreamInitializeCallback::InternalSwap(DemuxerStreamInitializeCallback* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(audio_decoder_config_, other->audio_decoder_config_);
  swap(video_decoder_config_, other->video_decoder_config_);
  swap(type_, other->type_);
}

std::string DemuxerStreamInitializeCallback::GetTypeName() const {
  return "media.remoting.pb.DemuxerStreamInitializeCallback";
}


// ===================================================================

void DemuxerStreamReadUntilCallback::InitAsDefaultInstance() {
  ::media::remoting::pb::_DemuxerStreamReadUntilCallback_default_instance_._instance.get_mutable()->audio_decoder_config_ = const_cast< ::media::remoting::pb::AudioDecoderConfig*>(
      ::media::remoting::pb::AudioDecoderConfig::internal_default_instance());
  ::media::remoting::pb::_DemuxerStreamReadUntilCallback_default_instance_._instance.get_mutable()->video_decoder_config_ = const_cast< ::media::remoting::pb::VideoDecoderConfig*>(
      ::media::remoting::pb::VideoDecoderConfig::internal_default_instance());
}
class DemuxerStreamReadUntilCallback::_Internal {
 public:
  using HasBits = decltype(std::declval<DemuxerStreamReadUntilCallback>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::media::remoting::pb::AudioDecoderConfig& audio_decoder_config(const DemuxerStreamReadUntilCallback* msg);
  static void set_has_audio_decoder_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::media::remoting::pb::VideoDecoderConfig& video_decoder_config(const DemuxerStreamReadUntilCallback* msg);
  static void set_has_video_decoder_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::media::remoting::pb::AudioDecoderConfig&
DemuxerStreamReadUntilCallback::_Internal::audio_decoder_config(const DemuxerStreamReadUntilCallback* msg) {
  return *msg->audio_decoder_config_;
}
const ::media::remoting::pb::VideoDecoderConfig&
DemuxerStreamReadUntilCallback::_Internal::video_decoder_config(const DemuxerStreamReadUntilCallback* msg) {
  return *msg->video_decoder_config_;
}
DemuxerStreamReadUntilCallback::DemuxerStreamReadUntilCallback()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.DemuxerStreamReadUntilCallback)
}
DemuxerStreamReadUntilCallback::DemuxerStreamReadUntilCallback(const DemuxerStreamReadUntilCallback& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_audio_decoder_config()) {
    audio_decoder_config_ = new ::media::remoting::pb::AudioDecoderConfig(*from.audio_decoder_config_);
  } else {
    audio_decoder_config_ = nullptr;
  }
  if (from.has_video_decoder_config()) {
    video_decoder_config_ = new ::media::remoting::pb::VideoDecoderConfig(*from.video_decoder_config_);
  } else {
    video_decoder_config_ = nullptr;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&status_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.DemuxerStreamReadUntilCallback)
}

void DemuxerStreamReadUntilCallback::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DemuxerStreamReadUntilCallback_media_5fremoting_5frpc_2eproto.base);
  ::memset(&audio_decoder_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&audio_decoder_config_)) + sizeof(count_));
}

DemuxerStreamReadUntilCallback::~DemuxerStreamReadUntilCallback() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.DemuxerStreamReadUntilCallback)
  SharedDtor();
}

void DemuxerStreamReadUntilCallback::SharedDtor() {
  if (this != internal_default_instance()) delete audio_decoder_config_;
  if (this != internal_default_instance()) delete video_decoder_config_;
}

void DemuxerStreamReadUntilCallback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DemuxerStreamReadUntilCallback& DemuxerStreamReadUntilCallback::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DemuxerStreamReadUntilCallback_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void DemuxerStreamReadUntilCallback::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.DemuxerStreamReadUntilCallback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(audio_decoder_config_ != nullptr);
      audio_decoder_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(video_decoder_config_ != nullptr);
      video_decoder_config_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&status_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DemuxerStreamReadUntilCallback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .media.remoting.pb.DemuxerStreamReadUntilCallback.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::media::remoting::pb::DemuxerStreamReadUntilCallback_Status_IsValid(val))) {
            set_status(static_cast<::media::remoting::pb::DemuxerStreamReadUntilCallback_Status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.AudioDecoderConfig audio_decoder_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_audio_decoder_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.VideoDecoderConfig video_decoder_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_video_decoder_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DemuxerStreamReadUntilCallback::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.DemuxerStreamReadUntilCallback)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .media.remoting.pb.DemuxerStreamReadUntilCallback.Status status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::media::remoting::pb::DemuxerStreamReadUntilCallback_Status_IsValid(value)) {
            set_status(static_cast< ::media::remoting::pb::DemuxerStreamReadUntilCallback_Status >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.AudioDecoderConfig audio_decoder_config = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_audio_decoder_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.VideoDecoderConfig video_decoder_config = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_video_decoder_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.DemuxerStreamReadUntilCallback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.DemuxerStreamReadUntilCallback)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DemuxerStreamReadUntilCallback::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.DemuxerStreamReadUntilCallback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .media.remoting.pb.DemuxerStreamReadUntilCallback.Status status = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // optional .media.remoting.pb.AudioDecoderConfig audio_decoder_config = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3, _Internal::audio_decoder_config(this), output);
  }

  // optional .media.remoting.pb.VideoDecoderConfig video_decoder_config = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      4, _Internal::video_decoder_config(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.DemuxerStreamReadUntilCallback)
}

size_t DemuxerStreamReadUntilCallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.DemuxerStreamReadUntilCallback)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .media.remoting.pb.AudioDecoderConfig audio_decoder_config = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *audio_decoder_config_);
    }

    // optional .media.remoting.pb.VideoDecoderConfig video_decoder_config = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *video_decoder_config_);
    }

    // optional .media.remoting.pb.DemuxerStreamReadUntilCallback.Status status = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint32 count = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DemuxerStreamReadUntilCallback::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DemuxerStreamReadUntilCallback*>(
      &from));
}

void DemuxerStreamReadUntilCallback::MergeFrom(const DemuxerStreamReadUntilCallback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.DemuxerStreamReadUntilCallback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_audio_decoder_config()->::media::remoting::pb::AudioDecoderConfig::MergeFrom(from.audio_decoder_config());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_video_decoder_config()->::media::remoting::pb::VideoDecoderConfig::MergeFrom(from.video_decoder_config());
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000008u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DemuxerStreamReadUntilCallback::CopyFrom(const DemuxerStreamReadUntilCallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.DemuxerStreamReadUntilCallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DemuxerStreamReadUntilCallback::IsInitialized() const {
  return true;
}

void DemuxerStreamReadUntilCallback::InternalSwap(DemuxerStreamReadUntilCallback* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(audio_decoder_config_, other->audio_decoder_config_);
  swap(video_decoder_config_, other->video_decoder_config_);
  swap(status_, other->status_);
  swap(count_, other->count_);
}

std::string DemuxerStreamReadUntilCallback::GetTypeName() const {
  return "media.remoting.pb.DemuxerStreamReadUntilCallback";
}


// ===================================================================

void CdmInitialize::InitAsDefaultInstance() {
}
class CdmInitialize::_Internal {
 public:
  using HasBits = decltype(std::declval<CdmInitialize>()._has_bits_);
  static void set_has_key_system(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_security_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_allow_distinctive_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_allow_persistent_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_use_hw_secure_codecs(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_callback_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CdmInitialize::CdmInitialize()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.CdmInitialize)
}
CdmInitialize::CdmInitialize(const CdmInitialize& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_system_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_key_system()) {
    key_system_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_system_);
  }
  security_origin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_security_origin()) {
    security_origin_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.security_origin_);
  }
  ::memcpy(&allow_distinctive_identifier_, &from.allow_distinctive_identifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&callback_handle_) -
    reinterpret_cast<char*>(&allow_distinctive_identifier_)) + sizeof(callback_handle_));
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.CdmInitialize)
}

void CdmInitialize::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CdmInitialize_media_5fremoting_5frpc_2eproto.base);
  key_system_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  security_origin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&allow_distinctive_identifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&callback_handle_) -
      reinterpret_cast<char*>(&allow_distinctive_identifier_)) + sizeof(callback_handle_));
}

CdmInitialize::~CdmInitialize() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.CdmInitialize)
  SharedDtor();
}

void CdmInitialize::SharedDtor() {
  key_system_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  security_origin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CdmInitialize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CdmInitialize& CdmInitialize::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CdmInitialize_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void CdmInitialize::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.CdmInitialize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_system_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      security_origin_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&allow_distinctive_identifier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&callback_handle_) -
        reinterpret_cast<char*>(&allow_distinctive_identifier_)) + sizeof(callback_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CdmInitialize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string key_system = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_key_system(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string security_origin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_security_origin(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool allow_distinctive_identifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_allow_distinctive_identifier(&has_bits);
          allow_distinctive_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool allow_persistent_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_allow_persistent_state(&has_bits);
          allow_persistent_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_hw_secure_codecs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_use_hw_secure_codecs(&has_bits);
          use_hw_secure_codecs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 callback_handle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_callback_handle(&has_bits);
          callback_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CdmInitialize::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.CdmInitialize)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key_system = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_key_system()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string security_origin = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_security_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_distinctive_identifier = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_allow_distinctive_identifier(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_distinctive_identifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_persistent_state = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_allow_persistent_state(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_persistent_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_hw_secure_codecs = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_use_hw_secure_codecs(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_hw_secure_codecs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 callback_handle = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_callback_handle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.CdmInitialize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.CdmInitialize)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CdmInitialize::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.CdmInitialize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key_system = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key_system(), output);
  }

  // optional string security_origin = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->security_origin(), output);
  }

  // optional bool allow_distinctive_identifier = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->allow_distinctive_identifier(), output);
  }

  // optional bool allow_persistent_state = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->allow_persistent_state(), output);
  }

  // optional bool use_hw_secure_codecs = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->use_hw_secure_codecs(), output);
  }

  // optional int32 callback_handle = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->callback_handle(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.CdmInitialize)
}

size_t CdmInitialize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.CdmInitialize)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string key_system = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->key_system());
    }

    // optional string security_origin = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->security_origin());
    }

    // optional bool allow_distinctive_identifier = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool allow_persistent_state = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool use_hw_secure_codecs = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 callback_handle = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->callback_handle());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CdmInitialize::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CdmInitialize*>(
      &from));
}

void CdmInitialize::MergeFrom(const CdmInitialize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.CdmInitialize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      key_system_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_system_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      security_origin_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.security_origin_);
    }
    if (cached_has_bits & 0x00000004u) {
      allow_distinctive_identifier_ = from.allow_distinctive_identifier_;
    }
    if (cached_has_bits & 0x00000008u) {
      allow_persistent_state_ = from.allow_persistent_state_;
    }
    if (cached_has_bits & 0x00000010u) {
      use_hw_secure_codecs_ = from.use_hw_secure_codecs_;
    }
    if (cached_has_bits & 0x00000020u) {
      callback_handle_ = from.callback_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CdmInitialize::CopyFrom(const CdmInitialize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.CdmInitialize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CdmInitialize::IsInitialized() const {
  return true;
}

void CdmInitialize::InternalSwap(CdmInitialize* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_system_.Swap(&other->key_system_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  security_origin_.Swap(&other->security_origin_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(allow_distinctive_identifier_, other->allow_distinctive_identifier_);
  swap(allow_persistent_state_, other->allow_persistent_state_);
  swap(use_hw_secure_codecs_, other->use_hw_secure_codecs_);
  swap(callback_handle_, other->callback_handle_);
}

std::string CdmInitialize::GetTypeName() const {
  return "media.remoting.pb.CdmInitialize";
}


// ===================================================================

void CdmSetServerCertificate::InitAsDefaultInstance() {
}
class CdmSetServerCertificate::_Internal {
 public:
  using HasBits = decltype(std::declval<CdmSetServerCertificate>()._has_bits_);
  static void set_has_callback_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_certificate_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CdmSetServerCertificate::CdmSetServerCertificate()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.CdmSetServerCertificate)
}
CdmSetServerCertificate::CdmSetServerCertificate(const CdmSetServerCertificate& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  certificate_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_certificate_data()) {
    certificate_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.certificate_data_);
  }
  callback_handle_ = from.callback_handle_;
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.CdmSetServerCertificate)
}

void CdmSetServerCertificate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CdmSetServerCertificate_media_5fremoting_5frpc_2eproto.base);
  certificate_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  callback_handle_ = 0;
}

CdmSetServerCertificate::~CdmSetServerCertificate() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.CdmSetServerCertificate)
  SharedDtor();
}

void CdmSetServerCertificate::SharedDtor() {
  certificate_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CdmSetServerCertificate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CdmSetServerCertificate& CdmSetServerCertificate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CdmSetServerCertificate_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void CdmSetServerCertificate::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.CdmSetServerCertificate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    certificate_data_.ClearNonDefaultToEmptyNoArena();
  }
  callback_handle_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CdmSetServerCertificate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 callback_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_callback_handle(&has_bits);
          callback_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes certificate_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_certificate_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CdmSetServerCertificate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.CdmSetServerCertificate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 callback_handle = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_callback_handle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes certificate_data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_certificate_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.CdmSetServerCertificate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.CdmSetServerCertificate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CdmSetServerCertificate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.CdmSetServerCertificate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 callback_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->callback_handle(), output);
  }

  // optional bytes certificate_data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->certificate_data(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.CdmSetServerCertificate)
}

size_t CdmSetServerCertificate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.CdmSetServerCertificate)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes certificate_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->certificate_data());
    }

    // optional int32 callback_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->callback_handle());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CdmSetServerCertificate::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CdmSetServerCertificate*>(
      &from));
}

void CdmSetServerCertificate::MergeFrom(const CdmSetServerCertificate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.CdmSetServerCertificate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      certificate_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.certificate_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      callback_handle_ = from.callback_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CdmSetServerCertificate::CopyFrom(const CdmSetServerCertificate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.CdmSetServerCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CdmSetServerCertificate::IsInitialized() const {
  return true;
}

void CdmSetServerCertificate::InternalSwap(CdmSetServerCertificate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  certificate_data_.Swap(&other->certificate_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(callback_handle_, other->callback_handle_);
}

std::string CdmSetServerCertificate::GetTypeName() const {
  return "media.remoting.pb.CdmSetServerCertificate";
}


// ===================================================================

void CdmCreateSessionAndGenerateRequest::InitAsDefaultInstance() {
}
class CdmCreateSessionAndGenerateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CdmCreateSessionAndGenerateRequest>()._has_bits_);
  static void set_has_session_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_init_data_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_callback_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_init_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CdmCreateSessionAndGenerateRequest::CdmCreateSessionAndGenerateRequest()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.CdmCreateSessionAndGenerateRequest)
}
CdmCreateSessionAndGenerateRequest::CdmCreateSessionAndGenerateRequest(const CdmCreateSessionAndGenerateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  init_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_init_data()) {
    init_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.init_data_);
  }
  ::memcpy(&session_type_, &from.session_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&callback_handle_) -
    reinterpret_cast<char*>(&session_type_)) + sizeof(callback_handle_));
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.CdmCreateSessionAndGenerateRequest)
}

void CdmCreateSessionAndGenerateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CdmCreateSessionAndGenerateRequest_media_5fremoting_5frpc_2eproto.base);
  init_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&callback_handle_) -
      reinterpret_cast<char*>(&session_type_)) + sizeof(callback_handle_));
}

CdmCreateSessionAndGenerateRequest::~CdmCreateSessionAndGenerateRequest() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.CdmCreateSessionAndGenerateRequest)
  SharedDtor();
}

void CdmCreateSessionAndGenerateRequest::SharedDtor() {
  init_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CdmCreateSessionAndGenerateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CdmCreateSessionAndGenerateRequest& CdmCreateSessionAndGenerateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CdmCreateSessionAndGenerateRequest_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void CdmCreateSessionAndGenerateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.CdmCreateSessionAndGenerateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    init_data_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&session_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&callback_handle_) -
        reinterpret_cast<char*>(&session_type_)) + sizeof(callback_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CdmCreateSessionAndGenerateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .media.remoting.pb.CdmSessionType session_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::media::remoting::pb::CdmSessionType_IsValid(val))) {
            set_session_type(static_cast<::media::remoting::pb::CdmSessionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.CdmCreateSessionAndGenerateRequest.EmeInitDataType init_data_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::media::remoting::pb::CdmCreateSessionAndGenerateRequest_EmeInitDataType_IsValid(val))) {
            set_init_data_type(static_cast<::media::remoting::pb::CdmCreateSessionAndGenerateRequest_EmeInitDataType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 callback_handle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_callback_handle(&has_bits);
          callback_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes init_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_init_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CdmCreateSessionAndGenerateRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.CdmCreateSessionAndGenerateRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .media.remoting.pb.CdmSessionType session_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::media::remoting::pb::CdmSessionType_IsValid(value)) {
            set_session_type(static_cast< ::media::remoting::pb::CdmSessionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.CdmCreateSessionAndGenerateRequest.EmeInitDataType init_data_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::media::remoting::pb::CdmCreateSessionAndGenerateRequest_EmeInitDataType_IsValid(value)) {
            set_init_data_type(static_cast< ::media::remoting::pb::CdmCreateSessionAndGenerateRequest_EmeInitDataType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 callback_handle = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_callback_handle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes init_data = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_init_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.CdmCreateSessionAndGenerateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.CdmCreateSessionAndGenerateRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CdmCreateSessionAndGenerateRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.CdmCreateSessionAndGenerateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .media.remoting.pb.CdmSessionType session_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->session_type(), output);
  }

  // optional .media.remoting.pb.CdmCreateSessionAndGenerateRequest.EmeInitDataType init_data_type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->init_data_type(), output);
  }

  // optional int32 callback_handle = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->callback_handle(), output);
  }

  // optional bytes init_data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->init_data(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.CdmCreateSessionAndGenerateRequest)
}

size_t CdmCreateSessionAndGenerateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.CdmCreateSessionAndGenerateRequest)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes init_data = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->init_data());
    }

    // optional .media.remoting.pb.CdmSessionType session_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->session_type());
    }

    // optional .media.remoting.pb.CdmCreateSessionAndGenerateRequest.EmeInitDataType init_data_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->init_data_type());
    }

    // optional int32 callback_handle = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->callback_handle());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CdmCreateSessionAndGenerateRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CdmCreateSessionAndGenerateRequest*>(
      &from));
}

void CdmCreateSessionAndGenerateRequest::MergeFrom(const CdmCreateSessionAndGenerateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.CdmCreateSessionAndGenerateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      init_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.init_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      session_type_ = from.session_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      init_data_type_ = from.init_data_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      callback_handle_ = from.callback_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CdmCreateSessionAndGenerateRequest::CopyFrom(const CdmCreateSessionAndGenerateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.CdmCreateSessionAndGenerateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CdmCreateSessionAndGenerateRequest::IsInitialized() const {
  return true;
}

void CdmCreateSessionAndGenerateRequest::InternalSwap(CdmCreateSessionAndGenerateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  init_data_.Swap(&other->init_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(session_type_, other->session_type_);
  swap(init_data_type_, other->init_data_type_);
  swap(callback_handle_, other->callback_handle_);
}

std::string CdmCreateSessionAndGenerateRequest::GetTypeName() const {
  return "media.remoting.pb.CdmCreateSessionAndGenerateRequest";
}


// ===================================================================

void CdmLoadSession::InitAsDefaultInstance() {
}
class CdmLoadSession::_Internal {
 public:
  using HasBits = decltype(std::declval<CdmLoadSession>()._has_bits_);
  static void set_has_session_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_callback_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CdmLoadSession::CdmLoadSession()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.CdmLoadSession)
}
CdmLoadSession::CdmLoadSession(const CdmLoadSession& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_session_id()) {
    session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  ::memcpy(&session_type_, &from.session_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&callback_handle_) -
    reinterpret_cast<char*>(&session_type_)) + sizeof(callback_handle_));
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.CdmLoadSession)
}

void CdmLoadSession::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CdmLoadSession_media_5fremoting_5frpc_2eproto.base);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&callback_handle_) -
      reinterpret_cast<char*>(&session_type_)) + sizeof(callback_handle_));
}

CdmLoadSession::~CdmLoadSession() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.CdmLoadSession)
  SharedDtor();
}

void CdmLoadSession::SharedDtor() {
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CdmLoadSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CdmLoadSession& CdmLoadSession::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CdmLoadSession_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void CdmLoadSession::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.CdmLoadSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    session_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&session_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&callback_handle_) -
        reinterpret_cast<char*>(&session_type_)) + sizeof(callback_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CdmLoadSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .media.remoting.pb.CdmSessionType session_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::media::remoting::pb::CdmSessionType_IsValid(val))) {
            set_session_type(static_cast<::media::remoting::pb::CdmSessionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_session_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 callback_handle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_callback_handle(&has_bits);
          callback_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CdmLoadSession::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.CdmLoadSession)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .media.remoting.pb.CdmSessionType session_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::media::remoting::pb::CdmSessionType_IsValid(value)) {
            set_session_type(static_cast< ::media::remoting::pb::CdmSessionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string session_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 callback_handle = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_callback_handle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.CdmLoadSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.CdmLoadSession)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CdmLoadSession::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.CdmLoadSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .media.remoting.pb.CdmSessionType session_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->session_type(), output);
  }

  // optional string session_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_id(), output);
  }

  // optional int32 callback_handle = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->callback_handle(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.CdmLoadSession)
}

size_t CdmLoadSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.CdmLoadSession)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string session_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // optional .media.remoting.pb.CdmSessionType session_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->session_type());
    }

    // optional int32 callback_handle = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->callback_handle());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CdmLoadSession::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CdmLoadSession*>(
      &from));
}

void CdmLoadSession::MergeFrom(const CdmLoadSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.CdmLoadSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      session_type_ = from.session_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      callback_handle_ = from.callback_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CdmLoadSession::CopyFrom(const CdmLoadSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.CdmLoadSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CdmLoadSession::IsInitialized() const {
  return true;
}

void CdmLoadSession::InternalSwap(CdmLoadSession* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(session_type_, other->session_type_);
  swap(callback_handle_, other->callback_handle_);
}

std::string CdmLoadSession::GetTypeName() const {
  return "media.remoting.pb.CdmLoadSession";
}


// ===================================================================

void CdmUpdateSession::InitAsDefaultInstance() {
}
class CdmUpdateSession::_Internal {
 public:
  using HasBits = decltype(std::declval<CdmUpdateSession>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_callback_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CdmUpdateSession::CdmUpdateSession()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.CdmUpdateSession)
}
CdmUpdateSession::CdmUpdateSession(const CdmUpdateSession& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_session_id()) {
    session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_response()) {
    response_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.response_);
  }
  callback_handle_ = from.callback_handle_;
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.CdmUpdateSession)
}

void CdmUpdateSession::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CdmUpdateSession_media_5fremoting_5frpc_2eproto.base);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  callback_handle_ = 0;
}

CdmUpdateSession::~CdmUpdateSession() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.CdmUpdateSession)
  SharedDtor();
}

void CdmUpdateSession::SharedDtor() {
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  response_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CdmUpdateSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CdmUpdateSession& CdmUpdateSession::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CdmUpdateSession_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void CdmUpdateSession::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.CdmUpdateSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      session_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      response_.ClearNonDefaultToEmptyNoArena();
    }
  }
  callback_handle_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CdmUpdateSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_session_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 callback_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_callback_handle(&has_bits);
          callback_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_response(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CdmUpdateSession::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.CdmUpdateSession)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string session_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 callback_handle = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_callback_handle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes response = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.CdmUpdateSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.CdmUpdateSession)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CdmUpdateSession::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.CdmUpdateSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_id(), output);
  }

  // optional int32 callback_handle = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->callback_handle(), output);
  }

  // optional bytes response = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->response(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.CdmUpdateSession)
}

size_t CdmUpdateSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.CdmUpdateSession)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // optional bytes response = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->response());
    }

    // optional int32 callback_handle = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->callback_handle());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CdmUpdateSession::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CdmUpdateSession*>(
      &from));
}

void CdmUpdateSession::MergeFrom(const CdmUpdateSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.CdmUpdateSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      response_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.response_);
    }
    if (cached_has_bits & 0x00000004u) {
      callback_handle_ = from.callback_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CdmUpdateSession::CopyFrom(const CdmUpdateSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.CdmUpdateSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CdmUpdateSession::IsInitialized() const {
  return true;
}

void CdmUpdateSession::InternalSwap(CdmUpdateSession* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  response_.Swap(&other->response_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(callback_handle_, other->callback_handle_);
}

std::string CdmUpdateSession::GetTypeName() const {
  return "media.remoting.pb.CdmUpdateSession";
}


// ===================================================================

void CdmCloseSession::InitAsDefaultInstance() {
}
class CdmCloseSession::_Internal {
 public:
  using HasBits = decltype(std::declval<CdmCloseSession>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_callback_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CdmCloseSession::CdmCloseSession()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.CdmCloseSession)
}
CdmCloseSession::CdmCloseSession(const CdmCloseSession& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_session_id()) {
    session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  callback_handle_ = from.callback_handle_;
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.CdmCloseSession)
}

void CdmCloseSession::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CdmCloseSession_media_5fremoting_5frpc_2eproto.base);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  callback_handle_ = 0;
}

CdmCloseSession::~CdmCloseSession() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.CdmCloseSession)
  SharedDtor();
}

void CdmCloseSession::SharedDtor() {
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CdmCloseSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CdmCloseSession& CdmCloseSession::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CdmCloseSession_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void CdmCloseSession::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.CdmCloseSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    session_id_.ClearNonDefaultToEmptyNoArena();
  }
  callback_handle_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CdmCloseSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_session_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 callback_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_callback_handle(&has_bits);
          callback_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CdmCloseSession::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.CdmCloseSession)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string session_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 callback_handle = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_callback_handle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.CdmCloseSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.CdmCloseSession)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CdmCloseSession::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.CdmCloseSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_id(), output);
  }

  // optional int32 callback_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->callback_handle(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.CdmCloseSession)
}

size_t CdmCloseSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.CdmCloseSession)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // optional int32 callback_handle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->callback_handle());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CdmCloseSession::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CdmCloseSession*>(
      &from));
}

void CdmCloseSession::MergeFrom(const CdmCloseSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.CdmCloseSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      callback_handle_ = from.callback_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CdmCloseSession::CopyFrom(const CdmCloseSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.CdmCloseSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CdmCloseSession::IsInitialized() const {
  return true;
}

void CdmCloseSession::InternalSwap(CdmCloseSession* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(callback_handle_, other->callback_handle_);
}

std::string CdmCloseSession::GetTypeName() const {
  return "media.remoting.pb.CdmCloseSession";
}


// ===================================================================

void CdmRemoveSession::InitAsDefaultInstance() {
}
class CdmRemoveSession::_Internal {
 public:
  using HasBits = decltype(std::declval<CdmRemoveSession>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_callback_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CdmRemoveSession::CdmRemoveSession()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.CdmRemoveSession)
}
CdmRemoveSession::CdmRemoveSession(const CdmRemoveSession& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_session_id()) {
    session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  callback_handle_ = from.callback_handle_;
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.CdmRemoveSession)
}

void CdmRemoveSession::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CdmRemoveSession_media_5fremoting_5frpc_2eproto.base);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  callback_handle_ = 0;
}

CdmRemoveSession::~CdmRemoveSession() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.CdmRemoveSession)
  SharedDtor();
}

void CdmRemoveSession::SharedDtor() {
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CdmRemoveSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CdmRemoveSession& CdmRemoveSession::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CdmRemoveSession_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void CdmRemoveSession::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.CdmRemoveSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    session_id_.ClearNonDefaultToEmptyNoArena();
  }
  callback_handle_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CdmRemoveSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_session_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 callback_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_callback_handle(&has_bits);
          callback_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CdmRemoveSession::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.CdmRemoveSession)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string session_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 callback_handle = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_callback_handle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.CdmRemoveSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.CdmRemoveSession)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CdmRemoveSession::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.CdmRemoveSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_id(), output);
  }

  // optional int32 callback_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->callback_handle(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.CdmRemoveSession)
}

size_t CdmRemoveSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.CdmRemoveSession)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // optional int32 callback_handle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->callback_handle());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CdmRemoveSession::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CdmRemoveSession*>(
      &from));
}

void CdmRemoveSession::MergeFrom(const CdmRemoveSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.CdmRemoveSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      callback_handle_ = from.callback_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CdmRemoveSession::CopyFrom(const CdmRemoveSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.CdmRemoveSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CdmRemoveSession::IsInitialized() const {
  return true;
}

void CdmRemoveSession::InternalSwap(CdmRemoveSession* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(callback_handle_, other->callback_handle_);
}

std::string CdmRemoveSession::GetTypeName() const {
  return "media.remoting.pb.CdmRemoveSession";
}


// ===================================================================

void CdmPromise::InitAsDefaultInstance() {
}
class CdmPromise::_Internal {
 public:
  using HasBits = decltype(std::declval<CdmPromise>()._has_bits_);
  static void set_has_cdm_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_decryptor_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_exception(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_system_code(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_error_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CdmPromise::CdmPromise()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.CdmPromise)
}
CdmPromise::CdmPromise(const CdmPromise& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_session_id()) {
    session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_message()) {
    error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
  }
  ::memcpy(&cdm_id_, &from.cdm_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&system_code_) -
    reinterpret_cast<char*>(&cdm_id_)) + sizeof(system_code_));
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.CdmPromise)
}

void CdmPromise::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CdmPromise_media_5fremoting_5frpc_2eproto.base);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cdm_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&system_code_) -
      reinterpret_cast<char*>(&cdm_id_)) + sizeof(system_code_));
}

CdmPromise::~CdmPromise() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.CdmPromise)
  SharedDtor();
}

void CdmPromise::SharedDtor() {
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CdmPromise::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CdmPromise& CdmPromise::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CdmPromise_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void CdmPromise::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.CdmPromise)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      session_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      error_message_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&cdm_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&system_code_) -
        reinterpret_cast<char*>(&cdm_id_)) + sizeof(system_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CdmPromise::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 cdm_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cdm_id(&has_bits);
          cdm_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 decryptor_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_decryptor_handle(&has_bits);
          decryptor_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_session_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool success = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.CdmException exception = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::media::remoting::pb::CdmException_IsValid(val))) {
            set_exception(static_cast<::media::remoting::pb::CdmException>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 system_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_system_code(&has_bits);
          system_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string error_message = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_error_message(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CdmPromise::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.CdmPromise)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cdm_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_cdm_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cdm_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 decryptor_handle = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_decryptor_handle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &decryptor_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string session_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool success = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_success(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.CdmException exception = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::media::remoting::pb::CdmException_IsValid(value)) {
            set_exception(static_cast< ::media::remoting::pb::CdmException >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 system_code = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_system_code(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &system_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_message = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_error_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.CdmPromise)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.CdmPromise)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CdmPromise::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.CdmPromise)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cdm_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->cdm_id(), output);
  }

  // optional int32 decryptor_handle = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->decryptor_handle(), output);
  }

  // optional string session_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->session_id(), output);
  }

  // optional bool success = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->success(), output);
  }

  // optional .media.remoting.pb.CdmException exception = 5;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->exception(), output);
  }

  // optional uint32 system_code = 6;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->system_code(), output);
  }

  // optional string error_message = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->error_message(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.CdmPromise)
}

size_t CdmPromise::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.CdmPromise)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string session_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // optional string error_message = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->error_message());
    }

    // optional int32 cdm_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->cdm_id());
    }

    // optional int32 decryptor_handle = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->decryptor_handle());
    }

    // optional bool success = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional .media.remoting.pb.CdmException exception = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->exception());
    }

    // optional uint32 system_code = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->system_code());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CdmPromise::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CdmPromise*>(
      &from));
}

void CdmPromise::MergeFrom(const CdmPromise& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.CdmPromise)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      error_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_message_);
    }
    if (cached_has_bits & 0x00000004u) {
      cdm_id_ = from.cdm_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      decryptor_handle_ = from.decryptor_handle_;
    }
    if (cached_has_bits & 0x00000010u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000020u) {
      exception_ = from.exception_;
    }
    if (cached_has_bits & 0x00000040u) {
      system_code_ = from.system_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CdmPromise::CopyFrom(const CdmPromise& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.CdmPromise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CdmPromise::IsInitialized() const {
  return true;
}

void CdmPromise::InternalSwap(CdmPromise* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  error_message_.Swap(&other->error_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cdm_id_, other->cdm_id_);
  swap(decryptor_handle_, other->decryptor_handle_);
  swap(success_, other->success_);
  swap(exception_, other->exception_);
  swap(system_code_, other->system_code_);
}

std::string CdmPromise::GetTypeName() const {
  return "media.remoting.pb.CdmPromise";
}


// ===================================================================

void CdmClientOnSessionMessage::InitAsDefaultInstance() {
}
class CdmClientOnSessionMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CdmClientOnSessionMessage>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_message_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CdmClientOnSessionMessage::CdmClientOnSessionMessage()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.CdmClientOnSessionMessage)
}
CdmClientOnSessionMessage::CdmClientOnSessionMessage(const CdmClientOnSessionMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_session_id()) {
    session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  message_type_ = from.message_type_;
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.CdmClientOnSessionMessage)
}

void CdmClientOnSessionMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CdmClientOnSessionMessage_media_5fremoting_5frpc_2eproto.base);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_type_ = 0;
}

CdmClientOnSessionMessage::~CdmClientOnSessionMessage() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.CdmClientOnSessionMessage)
  SharedDtor();
}

void CdmClientOnSessionMessage::SharedDtor() {
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CdmClientOnSessionMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CdmClientOnSessionMessage& CdmClientOnSessionMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CdmClientOnSessionMessage_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void CdmClientOnSessionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.CdmClientOnSessionMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      session_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      message_.ClearNonDefaultToEmptyNoArena();
    }
  }
  message_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CdmClientOnSessionMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_session_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.CdmMessageType message_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::media::remoting::pb::CdmMessageType_IsValid(val))) {
            set_message_type(static_cast<::media::remoting::pb::CdmMessageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_message(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CdmClientOnSessionMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.CdmClientOnSessionMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string session_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.CdmMessageType message_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::media::remoting::pb::CdmMessageType_IsValid(value)) {
            set_message_type(static_cast< ::media::remoting::pb::CdmMessageType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes message = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.CdmClientOnSessionMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.CdmClientOnSessionMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CdmClientOnSessionMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.CdmClientOnSessionMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_id(), output);
  }

  // optional .media.remoting.pb.CdmMessageType message_type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->message_type(), output);
  }

  // optional bytes message = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->message(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.CdmClientOnSessionMessage)
}

size_t CdmClientOnSessionMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.CdmClientOnSessionMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // optional bytes message = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->message());
    }

    // optional .media.remoting.pb.CdmMessageType message_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->message_type());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CdmClientOnSessionMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CdmClientOnSessionMessage*>(
      &from));
}

void CdmClientOnSessionMessage::MergeFrom(const CdmClientOnSessionMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.CdmClientOnSessionMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000004u) {
      message_type_ = from.message_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CdmClientOnSessionMessage::CopyFrom(const CdmClientOnSessionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.CdmClientOnSessionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CdmClientOnSessionMessage::IsInitialized() const {
  return true;
}

void CdmClientOnSessionMessage::InternalSwap(CdmClientOnSessionMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(message_type_, other->message_type_);
}

std::string CdmClientOnSessionMessage::GetTypeName() const {
  return "media.remoting.pb.CdmClientOnSessionMessage";
}


// ===================================================================

void CdmClientOnSessionKeysChange::InitAsDefaultInstance() {
}
class CdmClientOnSessionKeysChange::_Internal {
 public:
  using HasBits = decltype(std::declval<CdmClientOnSessionKeysChange>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_has_additional_usable_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CdmClientOnSessionKeysChange::CdmClientOnSessionKeysChange()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.CdmClientOnSessionKeysChange)
}
CdmClientOnSessionKeysChange::CdmClientOnSessionKeysChange(const CdmClientOnSessionKeysChange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      key_information_(from.key_information_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_session_id()) {
    session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  has_additional_usable_key_ = from.has_additional_usable_key_;
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.CdmClientOnSessionKeysChange)
}

void CdmClientOnSessionKeysChange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CdmClientOnSessionKeysChange_media_5fremoting_5frpc_2eproto.base);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  has_additional_usable_key_ = false;
}

CdmClientOnSessionKeysChange::~CdmClientOnSessionKeysChange() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.CdmClientOnSessionKeysChange)
  SharedDtor();
}

void CdmClientOnSessionKeysChange::SharedDtor() {
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CdmClientOnSessionKeysChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CdmClientOnSessionKeysChange& CdmClientOnSessionKeysChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CdmClientOnSessionKeysChange_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void CdmClientOnSessionKeysChange::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.CdmClientOnSessionKeysChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_information_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    session_id_.ClearNonDefaultToEmptyNoArena();
  }
  has_additional_usable_key_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CdmClientOnSessionKeysChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_session_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_additional_usable_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_has_additional_usable_key(&has_bits);
          has_additional_usable_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .media.remoting.pb.CdmKeyInformation key_information = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_key_information(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CdmClientOnSessionKeysChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.CdmClientOnSessionKeysChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string session_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_additional_usable_key = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_has_additional_usable_key(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_additional_usable_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .media.remoting.pb.CdmKeyInformation key_information = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_key_information()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.CdmClientOnSessionKeysChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.CdmClientOnSessionKeysChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CdmClientOnSessionKeysChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.CdmClientOnSessionKeysChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_id(), output);
  }

  // optional bool has_additional_usable_key = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->has_additional_usable_key(), output);
  }

  // repeated .media.remoting.pb.CdmKeyInformation key_information = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->key_information_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      3,
      this->key_information(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.CdmClientOnSessionKeysChange)
}

size_t CdmClientOnSessionKeysChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.CdmClientOnSessionKeysChange)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .media.remoting.pb.CdmKeyInformation key_information = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->key_information_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->key_information(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // optional bool has_additional_usable_key = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CdmClientOnSessionKeysChange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CdmClientOnSessionKeysChange*>(
      &from));
}

void CdmClientOnSessionKeysChange::MergeFrom(const CdmClientOnSessionKeysChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.CdmClientOnSessionKeysChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_information_.MergeFrom(from.key_information_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      has_additional_usable_key_ = from.has_additional_usable_key_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CdmClientOnSessionKeysChange::CopyFrom(const CdmClientOnSessionKeysChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.CdmClientOnSessionKeysChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CdmClientOnSessionKeysChange::IsInitialized() const {
  return true;
}

void CdmClientOnSessionKeysChange::InternalSwap(CdmClientOnSessionKeysChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&key_information_)->InternalSwap(CastToBase(&other->key_information_));
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(has_additional_usable_key_, other->has_additional_usable_key_);
}

std::string CdmClientOnSessionKeysChange::GetTypeName() const {
  return "media.remoting.pb.CdmClientOnSessionKeysChange";
}


// ===================================================================

void CdmClientOnSessionExpirationUpdate::InitAsDefaultInstance() {
}
class CdmClientOnSessionExpirationUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CdmClientOnSessionExpirationUpdate>()._has_bits_);
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_expiry_time_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CdmClientOnSessionExpirationUpdate::CdmClientOnSessionExpirationUpdate()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.CdmClientOnSessionExpirationUpdate)
}
CdmClientOnSessionExpirationUpdate::CdmClientOnSessionExpirationUpdate(const CdmClientOnSessionExpirationUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_session_id()) {
    session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
  }
  new_expiry_time_sec_ = from.new_expiry_time_sec_;
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.CdmClientOnSessionExpirationUpdate)
}

void CdmClientOnSessionExpirationUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CdmClientOnSessionExpirationUpdate_media_5fremoting_5frpc_2eproto.base);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  new_expiry_time_sec_ = 0;
}

CdmClientOnSessionExpirationUpdate::~CdmClientOnSessionExpirationUpdate() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.CdmClientOnSessionExpirationUpdate)
  SharedDtor();
}

void CdmClientOnSessionExpirationUpdate::SharedDtor() {
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CdmClientOnSessionExpirationUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CdmClientOnSessionExpirationUpdate& CdmClientOnSessionExpirationUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CdmClientOnSessionExpirationUpdate_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void CdmClientOnSessionExpirationUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.CdmClientOnSessionExpirationUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    session_id_.ClearNonDefaultToEmptyNoArena();
  }
  new_expiry_time_sec_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CdmClientOnSessionExpirationUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_session_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double new_expiry_time_sec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_new_expiry_time_sec(&has_bits);
          new_expiry_time_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CdmClientOnSessionExpirationUpdate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.CdmClientOnSessionExpirationUpdate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string session_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double new_expiry_time_sec = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          _Internal::set_has_new_expiry_time_sec(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &new_expiry_time_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.CdmClientOnSessionExpirationUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.CdmClientOnSessionExpirationUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CdmClientOnSessionExpirationUpdate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.CdmClientOnSessionExpirationUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string session_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session_id(), output);
  }

  // optional double new_expiry_time_sec = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->new_expiry_time_sec(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.CdmClientOnSessionExpirationUpdate)
}

size_t CdmClientOnSessionExpirationUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.CdmClientOnSessionExpirationUpdate)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string session_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->session_id());
    }

    // optional double new_expiry_time_sec = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CdmClientOnSessionExpirationUpdate::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CdmClientOnSessionExpirationUpdate*>(
      &from));
}

void CdmClientOnSessionExpirationUpdate::MergeFrom(const CdmClientOnSessionExpirationUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.CdmClientOnSessionExpirationUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      session_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.session_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      new_expiry_time_sec_ = from.new_expiry_time_sec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CdmClientOnSessionExpirationUpdate::CopyFrom(const CdmClientOnSessionExpirationUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.CdmClientOnSessionExpirationUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CdmClientOnSessionExpirationUpdate::IsInitialized() const {
  return true;
}

void CdmClientOnSessionExpirationUpdate::InternalSwap(CdmClientOnSessionExpirationUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(new_expiry_time_sec_, other->new_expiry_time_sec_);
}

std::string CdmClientOnSessionExpirationUpdate::GetTypeName() const {
  return "media.remoting.pb.CdmClientOnSessionExpirationUpdate";
}


// ===================================================================

void RpcMessage::InitAsDefaultInstance() {
}
class RpcMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<RpcMessage>()._has_bits_);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_proc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::media::remoting::pb::RendererInitialize& renderer_initialize_rpc(const RpcMessage* msg);
  static const ::media::remoting::pb::RendererFlushUntil& renderer_flushuntil_rpc(const RpcMessage* msg);
  static const ::media::remoting::pb::RendererSetCdm& renderer_set_cdm_rpc(const RpcMessage* msg);
  static const ::media::remoting::pb::AcquireDemuxer& acquire_demuxer_rpc(const RpcMessage* msg);
  static const ::media::remoting::pb::RendererClientOnTimeUpdate& rendererclient_ontimeupdate_rpc(const RpcMessage* msg);
  static const ::media::remoting::pb::Size& rendererclient_onvideonatualsizechange_rpc(const RpcMessage* msg);
  static const ::media::remoting::pb::PipelineStatistics& rendererclient_onstatisticsupdate_rpc(const RpcMessage* msg);
  static const ::media::remoting::pb::RendererClientOnBufferingStateChange& rendererclient_onbufferingstatechange_rpc(const RpcMessage* msg);
  static const ::media::remoting::pb::RendererClientOnAudioConfigChange& rendererclient_onaudioconfigchange_rpc(const RpcMessage* msg);
  static const ::media::remoting::pb::RendererClientOnVideoConfigChange& rendererclient_onvideoconfigchange_rpc(const RpcMessage* msg);
  static const ::media::remoting::pb::DemuxerStreamReadUntil& demuxerstream_readuntil_rpc(const RpcMessage* msg);
  static const ::media::remoting::pb::DemuxerStreamInitializeCallback& demuxerstream_initializecb_rpc(const RpcMessage* msg);
  static const ::media::remoting::pb::DemuxerStreamReadUntilCallback& demuxerstream_readuntilcb_rpc(const RpcMessage* msg);
  static const ::media::remoting::pb::CdmInitialize& cdm_initialize_rpc(const RpcMessage* msg);
  static const ::media::remoting::pb::CdmSetServerCertificate& cdm_setservercertificate_rpc(const RpcMessage* msg);
  static const ::media::remoting::pb::CdmCreateSessionAndGenerateRequest& cdm_createsessionandgeneraterequest_rpc(const RpcMessage* msg);
  static const ::media::remoting::pb::CdmLoadSession& cdm_loadsession_rpc(const RpcMessage* msg);
  static const ::media::remoting::pb::CdmUpdateSession& cdm_updatesession_rpc(const RpcMessage* msg);
  static const ::media::remoting::pb::CdmCloseSession& cdm_closesession_rpc(const RpcMessage* msg);
  static const ::media::remoting::pb::CdmRemoveSession& cdm_removesession_rpc(const RpcMessage* msg);
  static const ::media::remoting::pb::CdmPromise& cdm_promise_rpc(const RpcMessage* msg);
  static const ::media::remoting::pb::CdmClientOnSessionMessage& cdmclient_onsessionmessage_rpc(const RpcMessage* msg);
  static const ::media::remoting::pb::CdmClientOnSessionKeysChange& cdmclient_onsessionkeychange_rpc(const RpcMessage* msg);
  static const ::media::remoting::pb::CdmClientOnSessionExpirationUpdate& cdmclient_onsessionexpirationupdate_rpc(const RpcMessage* msg);
};

const ::media::remoting::pb::RendererInitialize&
RpcMessage::_Internal::renderer_initialize_rpc(const RpcMessage* msg) {
  return *msg->rpc_oneof_.renderer_initialize_rpc_;
}
const ::media::remoting::pb::RendererFlushUntil&
RpcMessage::_Internal::renderer_flushuntil_rpc(const RpcMessage* msg) {
  return *msg->rpc_oneof_.renderer_flushuntil_rpc_;
}
const ::media::remoting::pb::RendererSetCdm&
RpcMessage::_Internal::renderer_set_cdm_rpc(const RpcMessage* msg) {
  return *msg->rpc_oneof_.renderer_set_cdm_rpc_;
}
const ::media::remoting::pb::AcquireDemuxer&
RpcMessage::_Internal::acquire_demuxer_rpc(const RpcMessage* msg) {
  return *msg->rpc_oneof_.acquire_demuxer_rpc_;
}
const ::media::remoting::pb::RendererClientOnTimeUpdate&
RpcMessage::_Internal::rendererclient_ontimeupdate_rpc(const RpcMessage* msg) {
  return *msg->rpc_oneof_.rendererclient_ontimeupdate_rpc_;
}
const ::media::remoting::pb::Size&
RpcMessage::_Internal::rendererclient_onvideonatualsizechange_rpc(const RpcMessage* msg) {
  return *msg->rpc_oneof_.rendererclient_onvideonatualsizechange_rpc_;
}
const ::media::remoting::pb::PipelineStatistics&
RpcMessage::_Internal::rendererclient_onstatisticsupdate_rpc(const RpcMessage* msg) {
  return *msg->rpc_oneof_.rendererclient_onstatisticsupdate_rpc_;
}
const ::media::remoting::pb::RendererClientOnBufferingStateChange&
RpcMessage::_Internal::rendererclient_onbufferingstatechange_rpc(const RpcMessage* msg) {
  return *msg->rpc_oneof_.rendererclient_onbufferingstatechange_rpc_;
}
const ::media::remoting::pb::RendererClientOnAudioConfigChange&
RpcMessage::_Internal::rendererclient_onaudioconfigchange_rpc(const RpcMessage* msg) {
  return *msg->rpc_oneof_.rendererclient_onaudioconfigchange_rpc_;
}
const ::media::remoting::pb::RendererClientOnVideoConfigChange&
RpcMessage::_Internal::rendererclient_onvideoconfigchange_rpc(const RpcMessage* msg) {
  return *msg->rpc_oneof_.rendererclient_onvideoconfigchange_rpc_;
}
const ::media::remoting::pb::DemuxerStreamReadUntil&
RpcMessage::_Internal::demuxerstream_readuntil_rpc(const RpcMessage* msg) {
  return *msg->rpc_oneof_.demuxerstream_readuntil_rpc_;
}
const ::media::remoting::pb::DemuxerStreamInitializeCallback&
RpcMessage::_Internal::demuxerstream_initializecb_rpc(const RpcMessage* msg) {
  return *msg->rpc_oneof_.demuxerstream_initializecb_rpc_;
}
const ::media::remoting::pb::DemuxerStreamReadUntilCallback&
RpcMessage::_Internal::demuxerstream_readuntilcb_rpc(const RpcMessage* msg) {
  return *msg->rpc_oneof_.demuxerstream_readuntilcb_rpc_;
}
const ::media::remoting::pb::CdmInitialize&
RpcMessage::_Internal::cdm_initialize_rpc(const RpcMessage* msg) {
  return *msg->rpc_oneof_.cdm_initialize_rpc_;
}
const ::media::remoting::pb::CdmSetServerCertificate&
RpcMessage::_Internal::cdm_setservercertificate_rpc(const RpcMessage* msg) {
  return *msg->rpc_oneof_.cdm_setservercertificate_rpc_;
}
const ::media::remoting::pb::CdmCreateSessionAndGenerateRequest&
RpcMessage::_Internal::cdm_createsessionandgeneraterequest_rpc(const RpcMessage* msg) {
  return *msg->rpc_oneof_.cdm_createsessionandgeneraterequest_rpc_;
}
const ::media::remoting::pb::CdmLoadSession&
RpcMessage::_Internal::cdm_loadsession_rpc(const RpcMessage* msg) {
  return *msg->rpc_oneof_.cdm_loadsession_rpc_;
}
const ::media::remoting::pb::CdmUpdateSession&
RpcMessage::_Internal::cdm_updatesession_rpc(const RpcMessage* msg) {
  return *msg->rpc_oneof_.cdm_updatesession_rpc_;
}
const ::media::remoting::pb::CdmCloseSession&
RpcMessage::_Internal::cdm_closesession_rpc(const RpcMessage* msg) {
  return *msg->rpc_oneof_.cdm_closesession_rpc_;
}
const ::media::remoting::pb::CdmRemoveSession&
RpcMessage::_Internal::cdm_removesession_rpc(const RpcMessage* msg) {
  return *msg->rpc_oneof_.cdm_removesession_rpc_;
}
const ::media::remoting::pb::CdmPromise&
RpcMessage::_Internal::cdm_promise_rpc(const RpcMessage* msg) {
  return *msg->rpc_oneof_.cdm_promise_rpc_;
}
const ::media::remoting::pb::CdmClientOnSessionMessage&
RpcMessage::_Internal::cdmclient_onsessionmessage_rpc(const RpcMessage* msg) {
  return *msg->rpc_oneof_.cdmclient_onsessionmessage_rpc_;
}
const ::media::remoting::pb::CdmClientOnSessionKeysChange&
RpcMessage::_Internal::cdmclient_onsessionkeychange_rpc(const RpcMessage* msg) {
  return *msg->rpc_oneof_.cdmclient_onsessionkeychange_rpc_;
}
const ::media::remoting::pb::CdmClientOnSessionExpirationUpdate&
RpcMessage::_Internal::cdmclient_onsessionexpirationupdate_rpc(const RpcMessage* msg) {
  return *msg->rpc_oneof_.cdmclient_onsessionexpirationupdate_rpc_;
}
void RpcMessage::set_allocated_renderer_initialize_rpc(::media::remoting::pb::RendererInitialize* renderer_initialize_rpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_rpc_oneof();
  if (renderer_initialize_rpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      renderer_initialize_rpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, renderer_initialize_rpc, submessage_arena);
    }
    set_has_renderer_initialize_rpc();
    rpc_oneof_.renderer_initialize_rpc_ = renderer_initialize_rpc;
  }
  // @@protoc_insertion_point(field_set_allocated:media.remoting.pb.RpcMessage.renderer_initialize_rpc)
}
void RpcMessage::set_allocated_renderer_flushuntil_rpc(::media::remoting::pb::RendererFlushUntil* renderer_flushuntil_rpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_rpc_oneof();
  if (renderer_flushuntil_rpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      renderer_flushuntil_rpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, renderer_flushuntil_rpc, submessage_arena);
    }
    set_has_renderer_flushuntil_rpc();
    rpc_oneof_.renderer_flushuntil_rpc_ = renderer_flushuntil_rpc;
  }
  // @@protoc_insertion_point(field_set_allocated:media.remoting.pb.RpcMessage.renderer_flushuntil_rpc)
}
void RpcMessage::set_allocated_renderer_set_cdm_rpc(::media::remoting::pb::RendererSetCdm* renderer_set_cdm_rpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_rpc_oneof();
  if (renderer_set_cdm_rpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      renderer_set_cdm_rpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, renderer_set_cdm_rpc, submessage_arena);
    }
    set_has_renderer_set_cdm_rpc();
    rpc_oneof_.renderer_set_cdm_rpc_ = renderer_set_cdm_rpc;
  }
  // @@protoc_insertion_point(field_set_allocated:media.remoting.pb.RpcMessage.renderer_set_cdm_rpc)
}
void RpcMessage::set_allocated_acquire_demuxer_rpc(::media::remoting::pb::AcquireDemuxer* acquire_demuxer_rpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_rpc_oneof();
  if (acquire_demuxer_rpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      acquire_demuxer_rpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acquire_demuxer_rpc, submessage_arena);
    }
    set_has_acquire_demuxer_rpc();
    rpc_oneof_.acquire_demuxer_rpc_ = acquire_demuxer_rpc;
  }
  // @@protoc_insertion_point(field_set_allocated:media.remoting.pb.RpcMessage.acquire_demuxer_rpc)
}
void RpcMessage::set_allocated_rendererclient_ontimeupdate_rpc(::media::remoting::pb::RendererClientOnTimeUpdate* rendererclient_ontimeupdate_rpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_rpc_oneof();
  if (rendererclient_ontimeupdate_rpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rendererclient_ontimeupdate_rpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rendererclient_ontimeupdate_rpc, submessage_arena);
    }
    set_has_rendererclient_ontimeupdate_rpc();
    rpc_oneof_.rendererclient_ontimeupdate_rpc_ = rendererclient_ontimeupdate_rpc;
  }
  // @@protoc_insertion_point(field_set_allocated:media.remoting.pb.RpcMessage.rendererclient_ontimeupdate_rpc)
}
void RpcMessage::set_allocated_rendererclient_onvideonatualsizechange_rpc(::media::remoting::pb::Size* rendererclient_onvideonatualsizechange_rpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_rpc_oneof();
  if (rendererclient_onvideonatualsizechange_rpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rendererclient_onvideonatualsizechange_rpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rendererclient_onvideonatualsizechange_rpc, submessage_arena);
    }
    set_has_rendererclient_onvideonatualsizechange_rpc();
    rpc_oneof_.rendererclient_onvideonatualsizechange_rpc_ = rendererclient_onvideonatualsizechange_rpc;
  }
  // @@protoc_insertion_point(field_set_allocated:media.remoting.pb.RpcMessage.rendererclient_onvideonatualsizechange_rpc)
}
void RpcMessage::set_allocated_rendererclient_onstatisticsupdate_rpc(::media::remoting::pb::PipelineStatistics* rendererclient_onstatisticsupdate_rpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_rpc_oneof();
  if (rendererclient_onstatisticsupdate_rpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rendererclient_onstatisticsupdate_rpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rendererclient_onstatisticsupdate_rpc, submessage_arena);
    }
    set_has_rendererclient_onstatisticsupdate_rpc();
    rpc_oneof_.rendererclient_onstatisticsupdate_rpc_ = rendererclient_onstatisticsupdate_rpc;
  }
  // @@protoc_insertion_point(field_set_allocated:media.remoting.pb.RpcMessage.rendererclient_onstatisticsupdate_rpc)
}
void RpcMessage::set_allocated_rendererclient_onbufferingstatechange_rpc(::media::remoting::pb::RendererClientOnBufferingStateChange* rendererclient_onbufferingstatechange_rpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_rpc_oneof();
  if (rendererclient_onbufferingstatechange_rpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rendererclient_onbufferingstatechange_rpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rendererclient_onbufferingstatechange_rpc, submessage_arena);
    }
    set_has_rendererclient_onbufferingstatechange_rpc();
    rpc_oneof_.rendererclient_onbufferingstatechange_rpc_ = rendererclient_onbufferingstatechange_rpc;
  }
  // @@protoc_insertion_point(field_set_allocated:media.remoting.pb.RpcMessage.rendererclient_onbufferingstatechange_rpc)
}
void RpcMessage::set_allocated_rendererclient_onaudioconfigchange_rpc(::media::remoting::pb::RendererClientOnAudioConfigChange* rendererclient_onaudioconfigchange_rpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_rpc_oneof();
  if (rendererclient_onaudioconfigchange_rpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rendererclient_onaudioconfigchange_rpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rendererclient_onaudioconfigchange_rpc, submessage_arena);
    }
    set_has_rendererclient_onaudioconfigchange_rpc();
    rpc_oneof_.rendererclient_onaudioconfigchange_rpc_ = rendererclient_onaudioconfigchange_rpc;
  }
  // @@protoc_insertion_point(field_set_allocated:media.remoting.pb.RpcMessage.rendererclient_onaudioconfigchange_rpc)
}
void RpcMessage::set_allocated_rendererclient_onvideoconfigchange_rpc(::media::remoting::pb::RendererClientOnVideoConfigChange* rendererclient_onvideoconfigchange_rpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_rpc_oneof();
  if (rendererclient_onvideoconfigchange_rpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rendererclient_onvideoconfigchange_rpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rendererclient_onvideoconfigchange_rpc, submessage_arena);
    }
    set_has_rendererclient_onvideoconfigchange_rpc();
    rpc_oneof_.rendererclient_onvideoconfigchange_rpc_ = rendererclient_onvideoconfigchange_rpc;
  }
  // @@protoc_insertion_point(field_set_allocated:media.remoting.pb.RpcMessage.rendererclient_onvideoconfigchange_rpc)
}
void RpcMessage::set_allocated_demuxerstream_readuntil_rpc(::media::remoting::pb::DemuxerStreamReadUntil* demuxerstream_readuntil_rpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_rpc_oneof();
  if (demuxerstream_readuntil_rpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      demuxerstream_readuntil_rpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, demuxerstream_readuntil_rpc, submessage_arena);
    }
    set_has_demuxerstream_readuntil_rpc();
    rpc_oneof_.demuxerstream_readuntil_rpc_ = demuxerstream_readuntil_rpc;
  }
  // @@protoc_insertion_point(field_set_allocated:media.remoting.pb.RpcMessage.demuxerstream_readuntil_rpc)
}
void RpcMessage::set_allocated_demuxerstream_initializecb_rpc(::media::remoting::pb::DemuxerStreamInitializeCallback* demuxerstream_initializecb_rpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_rpc_oneof();
  if (demuxerstream_initializecb_rpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      demuxerstream_initializecb_rpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, demuxerstream_initializecb_rpc, submessage_arena);
    }
    set_has_demuxerstream_initializecb_rpc();
    rpc_oneof_.demuxerstream_initializecb_rpc_ = demuxerstream_initializecb_rpc;
  }
  // @@protoc_insertion_point(field_set_allocated:media.remoting.pb.RpcMessage.demuxerstream_initializecb_rpc)
}
void RpcMessage::set_allocated_demuxerstream_readuntilcb_rpc(::media::remoting::pb::DemuxerStreamReadUntilCallback* demuxerstream_readuntilcb_rpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_rpc_oneof();
  if (demuxerstream_readuntilcb_rpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      demuxerstream_readuntilcb_rpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, demuxerstream_readuntilcb_rpc, submessage_arena);
    }
    set_has_demuxerstream_readuntilcb_rpc();
    rpc_oneof_.demuxerstream_readuntilcb_rpc_ = demuxerstream_readuntilcb_rpc;
  }
  // @@protoc_insertion_point(field_set_allocated:media.remoting.pb.RpcMessage.demuxerstream_readuntilcb_rpc)
}
void RpcMessage::set_allocated_cdm_initialize_rpc(::media::remoting::pb::CdmInitialize* cdm_initialize_rpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_rpc_oneof();
  if (cdm_initialize_rpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cdm_initialize_rpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cdm_initialize_rpc, submessage_arena);
    }
    set_has_cdm_initialize_rpc();
    rpc_oneof_.cdm_initialize_rpc_ = cdm_initialize_rpc;
  }
  // @@protoc_insertion_point(field_set_allocated:media.remoting.pb.RpcMessage.cdm_initialize_rpc)
}
void RpcMessage::set_allocated_cdm_setservercertificate_rpc(::media::remoting::pb::CdmSetServerCertificate* cdm_setservercertificate_rpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_rpc_oneof();
  if (cdm_setservercertificate_rpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cdm_setservercertificate_rpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cdm_setservercertificate_rpc, submessage_arena);
    }
    set_has_cdm_setservercertificate_rpc();
    rpc_oneof_.cdm_setservercertificate_rpc_ = cdm_setservercertificate_rpc;
  }
  // @@protoc_insertion_point(field_set_allocated:media.remoting.pb.RpcMessage.cdm_setservercertificate_rpc)
}
void RpcMessage::set_allocated_cdm_createsessionandgeneraterequest_rpc(::media::remoting::pb::CdmCreateSessionAndGenerateRequest* cdm_createsessionandgeneraterequest_rpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_rpc_oneof();
  if (cdm_createsessionandgeneraterequest_rpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cdm_createsessionandgeneraterequest_rpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cdm_createsessionandgeneraterequest_rpc, submessage_arena);
    }
    set_has_cdm_createsessionandgeneraterequest_rpc();
    rpc_oneof_.cdm_createsessionandgeneraterequest_rpc_ = cdm_createsessionandgeneraterequest_rpc;
  }
  // @@protoc_insertion_point(field_set_allocated:media.remoting.pb.RpcMessage.cdm_createsessionandgeneraterequest_rpc)
}
void RpcMessage::set_allocated_cdm_loadsession_rpc(::media::remoting::pb::CdmLoadSession* cdm_loadsession_rpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_rpc_oneof();
  if (cdm_loadsession_rpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cdm_loadsession_rpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cdm_loadsession_rpc, submessage_arena);
    }
    set_has_cdm_loadsession_rpc();
    rpc_oneof_.cdm_loadsession_rpc_ = cdm_loadsession_rpc;
  }
  // @@protoc_insertion_point(field_set_allocated:media.remoting.pb.RpcMessage.cdm_loadsession_rpc)
}
void RpcMessage::set_allocated_cdm_updatesession_rpc(::media::remoting::pb::CdmUpdateSession* cdm_updatesession_rpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_rpc_oneof();
  if (cdm_updatesession_rpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cdm_updatesession_rpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cdm_updatesession_rpc, submessage_arena);
    }
    set_has_cdm_updatesession_rpc();
    rpc_oneof_.cdm_updatesession_rpc_ = cdm_updatesession_rpc;
  }
  // @@protoc_insertion_point(field_set_allocated:media.remoting.pb.RpcMessage.cdm_updatesession_rpc)
}
void RpcMessage::set_allocated_cdm_closesession_rpc(::media::remoting::pb::CdmCloseSession* cdm_closesession_rpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_rpc_oneof();
  if (cdm_closesession_rpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cdm_closesession_rpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cdm_closesession_rpc, submessage_arena);
    }
    set_has_cdm_closesession_rpc();
    rpc_oneof_.cdm_closesession_rpc_ = cdm_closesession_rpc;
  }
  // @@protoc_insertion_point(field_set_allocated:media.remoting.pb.RpcMessage.cdm_closesession_rpc)
}
void RpcMessage::set_allocated_cdm_removesession_rpc(::media::remoting::pb::CdmRemoveSession* cdm_removesession_rpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_rpc_oneof();
  if (cdm_removesession_rpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cdm_removesession_rpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cdm_removesession_rpc, submessage_arena);
    }
    set_has_cdm_removesession_rpc();
    rpc_oneof_.cdm_removesession_rpc_ = cdm_removesession_rpc;
  }
  // @@protoc_insertion_point(field_set_allocated:media.remoting.pb.RpcMessage.cdm_removesession_rpc)
}
void RpcMessage::set_allocated_cdm_promise_rpc(::media::remoting::pb::CdmPromise* cdm_promise_rpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_rpc_oneof();
  if (cdm_promise_rpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cdm_promise_rpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cdm_promise_rpc, submessage_arena);
    }
    set_has_cdm_promise_rpc();
    rpc_oneof_.cdm_promise_rpc_ = cdm_promise_rpc;
  }
  // @@protoc_insertion_point(field_set_allocated:media.remoting.pb.RpcMessage.cdm_promise_rpc)
}
void RpcMessage::set_allocated_cdmclient_onsessionmessage_rpc(::media::remoting::pb::CdmClientOnSessionMessage* cdmclient_onsessionmessage_rpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_rpc_oneof();
  if (cdmclient_onsessionmessage_rpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cdmclient_onsessionmessage_rpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cdmclient_onsessionmessage_rpc, submessage_arena);
    }
    set_has_cdmclient_onsessionmessage_rpc();
    rpc_oneof_.cdmclient_onsessionmessage_rpc_ = cdmclient_onsessionmessage_rpc;
  }
  // @@protoc_insertion_point(field_set_allocated:media.remoting.pb.RpcMessage.cdmclient_onsessionmessage_rpc)
}
void RpcMessage::set_allocated_cdmclient_onsessionkeychange_rpc(::media::remoting::pb::CdmClientOnSessionKeysChange* cdmclient_onsessionkeychange_rpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_rpc_oneof();
  if (cdmclient_onsessionkeychange_rpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cdmclient_onsessionkeychange_rpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cdmclient_onsessionkeychange_rpc, submessage_arena);
    }
    set_has_cdmclient_onsessionkeychange_rpc();
    rpc_oneof_.cdmclient_onsessionkeychange_rpc_ = cdmclient_onsessionkeychange_rpc;
  }
  // @@protoc_insertion_point(field_set_allocated:media.remoting.pb.RpcMessage.cdmclient_onsessionkeychange_rpc)
}
void RpcMessage::set_allocated_cdmclient_onsessionexpirationupdate_rpc(::media::remoting::pb::CdmClientOnSessionExpirationUpdate* cdmclient_onsessionexpirationupdate_rpc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_rpc_oneof();
  if (cdmclient_onsessionexpirationupdate_rpc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cdmclient_onsessionexpirationupdate_rpc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cdmclient_onsessionexpirationupdate_rpc, submessage_arena);
    }
    set_has_cdmclient_onsessionexpirationupdate_rpc();
    rpc_oneof_.cdmclient_onsessionexpirationupdate_rpc_ = cdmclient_onsessionexpirationupdate_rpc;
  }
  // @@protoc_insertion_point(field_set_allocated:media.remoting.pb.RpcMessage.cdmclient_onsessionexpirationupdate_rpc)
}
RpcMessage::RpcMessage()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.remoting.pb.RpcMessage)
}
RpcMessage::RpcMessage(const RpcMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&handle_, &from.handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&proc_) -
    reinterpret_cast<char*>(&handle_)) + sizeof(proc_));
  clear_has_rpc_oneof();
  switch (from.rpc_oneof_case()) {
    case kIntegerValue: {
      set_integer_value(from.integer_value());
      break;
    }
    case kInteger64Value: {
      set_integer64_value(from.integer64_value());
      break;
    }
    case kDoubleValue: {
      set_double_value(from.double_value());
      break;
    }
    case kBooleanValue: {
      set_boolean_value(from.boolean_value());
      break;
    }
    case kStringValue: {
      set_string_value(from.string_value());
      break;
    }
    case kRendererInitializeRpc: {
      mutable_renderer_initialize_rpc()->::media::remoting::pb::RendererInitialize::MergeFrom(from.renderer_initialize_rpc());
      break;
    }
    case kRendererFlushuntilRpc: {
      mutable_renderer_flushuntil_rpc()->::media::remoting::pb::RendererFlushUntil::MergeFrom(from.renderer_flushuntil_rpc());
      break;
    }
    case kRendererSetCdmRpc: {
      mutable_renderer_set_cdm_rpc()->::media::remoting::pb::RendererSetCdm::MergeFrom(from.renderer_set_cdm_rpc());
      break;
    }
    case kAcquireDemuxerRpc: {
      mutable_acquire_demuxer_rpc()->::media::remoting::pb::AcquireDemuxer::MergeFrom(from.acquire_demuxer_rpc());
      break;
    }
    case kRendererclientOntimeupdateRpc: {
      mutable_rendererclient_ontimeupdate_rpc()->::media::remoting::pb::RendererClientOnTimeUpdate::MergeFrom(from.rendererclient_ontimeupdate_rpc());
      break;
    }
    case kRendererclientOnvideonatualsizechangeRpc: {
      mutable_rendererclient_onvideonatualsizechange_rpc()->::media::remoting::pb::Size::MergeFrom(from.rendererclient_onvideonatualsizechange_rpc());
      break;
    }
    case kRendererclientOnstatisticsupdateRpc: {
      mutable_rendererclient_onstatisticsupdate_rpc()->::media::remoting::pb::PipelineStatistics::MergeFrom(from.rendererclient_onstatisticsupdate_rpc());
      break;
    }
    case kRendererclientOnbufferingstatechangeRpc: {
      mutable_rendererclient_onbufferingstatechange_rpc()->::media::remoting::pb::RendererClientOnBufferingStateChange::MergeFrom(from.rendererclient_onbufferingstatechange_rpc());
      break;
    }
    case kRendererclientOnaudioconfigchangeRpc: {
      mutable_rendererclient_onaudioconfigchange_rpc()->::media::remoting::pb::RendererClientOnAudioConfigChange::MergeFrom(from.rendererclient_onaudioconfigchange_rpc());
      break;
    }
    case kRendererclientOnvideoconfigchangeRpc: {
      mutable_rendererclient_onvideoconfigchange_rpc()->::media::remoting::pb::RendererClientOnVideoConfigChange::MergeFrom(from.rendererclient_onvideoconfigchange_rpc());
      break;
    }
    case kDemuxerstreamReaduntilRpc: {
      mutable_demuxerstream_readuntil_rpc()->::media::remoting::pb::DemuxerStreamReadUntil::MergeFrom(from.demuxerstream_readuntil_rpc());
      break;
    }
    case kDemuxerstreamInitializecbRpc: {
      mutable_demuxerstream_initializecb_rpc()->::media::remoting::pb::DemuxerStreamInitializeCallback::MergeFrom(from.demuxerstream_initializecb_rpc());
      break;
    }
    case kDemuxerstreamReaduntilcbRpc: {
      mutable_demuxerstream_readuntilcb_rpc()->::media::remoting::pb::DemuxerStreamReadUntilCallback::MergeFrom(from.demuxerstream_readuntilcb_rpc());
      break;
    }
    case kCdmInitializeRpc: {
      mutable_cdm_initialize_rpc()->::media::remoting::pb::CdmInitialize::MergeFrom(from.cdm_initialize_rpc());
      break;
    }
    case kCdmSetservercertificateRpc: {
      mutable_cdm_setservercertificate_rpc()->::media::remoting::pb::CdmSetServerCertificate::MergeFrom(from.cdm_setservercertificate_rpc());
      break;
    }
    case kCdmCreatesessionandgeneraterequestRpc: {
      mutable_cdm_createsessionandgeneraterequest_rpc()->::media::remoting::pb::CdmCreateSessionAndGenerateRequest::MergeFrom(from.cdm_createsessionandgeneraterequest_rpc());
      break;
    }
    case kCdmLoadsessionRpc: {
      mutable_cdm_loadsession_rpc()->::media::remoting::pb::CdmLoadSession::MergeFrom(from.cdm_loadsession_rpc());
      break;
    }
    case kCdmUpdatesessionRpc: {
      mutable_cdm_updatesession_rpc()->::media::remoting::pb::CdmUpdateSession::MergeFrom(from.cdm_updatesession_rpc());
      break;
    }
    case kCdmClosesessionRpc: {
      mutable_cdm_closesession_rpc()->::media::remoting::pb::CdmCloseSession::MergeFrom(from.cdm_closesession_rpc());
      break;
    }
    case kCdmRemovesessionRpc: {
      mutable_cdm_removesession_rpc()->::media::remoting::pb::CdmRemoveSession::MergeFrom(from.cdm_removesession_rpc());
      break;
    }
    case kCdmPromiseRpc: {
      mutable_cdm_promise_rpc()->::media::remoting::pb::CdmPromise::MergeFrom(from.cdm_promise_rpc());
      break;
    }
    case kCdmclientOnsessionmessageRpc: {
      mutable_cdmclient_onsessionmessage_rpc()->::media::remoting::pb::CdmClientOnSessionMessage::MergeFrom(from.cdmclient_onsessionmessage_rpc());
      break;
    }
    case kCdmclientOnsessionkeychangeRpc: {
      mutable_cdmclient_onsessionkeychange_rpc()->::media::remoting::pb::CdmClientOnSessionKeysChange::MergeFrom(from.cdmclient_onsessionkeychange_rpc());
      break;
    }
    case kCdmclientOnsessionexpirationupdateRpc: {
      mutable_cdmclient_onsessionexpirationupdate_rpc()->::media::remoting::pb::CdmClientOnSessionExpirationUpdate::MergeFrom(from.cdmclient_onsessionexpirationupdate_rpc());
      break;
    }
    case RPC_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:media.remoting.pb.RpcMessage)
}

void RpcMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RpcMessage_media_5fremoting_5frpc_2eproto.base);
  ::memset(&handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&proc_) -
      reinterpret_cast<char*>(&handle_)) + sizeof(proc_));
  clear_has_rpc_oneof();
}

RpcMessage::~RpcMessage() {
  // @@protoc_insertion_point(destructor:media.remoting.pb.RpcMessage)
  SharedDtor();
}

void RpcMessage::SharedDtor() {
  if (has_rpc_oneof()) {
    clear_rpc_oneof();
  }
}

void RpcMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RpcMessage& RpcMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RpcMessage_media_5fremoting_5frpc_2eproto.base);
  return *internal_default_instance();
}


void RpcMessage::clear_rpc_oneof() {
// @@protoc_insertion_point(one_of_clear_start:media.remoting.pb.RpcMessage)
  switch (rpc_oneof_case()) {
    case kIntegerValue: {
      // No need to clear
      break;
    }
    case kInteger64Value: {
      // No need to clear
      break;
    }
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kBooleanValue: {
      // No need to clear
      break;
    }
    case kStringValue: {
      rpc_oneof_.string_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kRendererInitializeRpc: {
      delete rpc_oneof_.renderer_initialize_rpc_;
      break;
    }
    case kRendererFlushuntilRpc: {
      delete rpc_oneof_.renderer_flushuntil_rpc_;
      break;
    }
    case kRendererSetCdmRpc: {
      delete rpc_oneof_.renderer_set_cdm_rpc_;
      break;
    }
    case kAcquireDemuxerRpc: {
      delete rpc_oneof_.acquire_demuxer_rpc_;
      break;
    }
    case kRendererclientOntimeupdateRpc: {
      delete rpc_oneof_.rendererclient_ontimeupdate_rpc_;
      break;
    }
    case kRendererclientOnvideonatualsizechangeRpc: {
      delete rpc_oneof_.rendererclient_onvideonatualsizechange_rpc_;
      break;
    }
    case kRendererclientOnstatisticsupdateRpc: {
      delete rpc_oneof_.rendererclient_onstatisticsupdate_rpc_;
      break;
    }
    case kRendererclientOnbufferingstatechangeRpc: {
      delete rpc_oneof_.rendererclient_onbufferingstatechange_rpc_;
      break;
    }
    case kRendererclientOnaudioconfigchangeRpc: {
      delete rpc_oneof_.rendererclient_onaudioconfigchange_rpc_;
      break;
    }
    case kRendererclientOnvideoconfigchangeRpc: {
      delete rpc_oneof_.rendererclient_onvideoconfigchange_rpc_;
      break;
    }
    case kDemuxerstreamReaduntilRpc: {
      delete rpc_oneof_.demuxerstream_readuntil_rpc_;
      break;
    }
    case kDemuxerstreamInitializecbRpc: {
      delete rpc_oneof_.demuxerstream_initializecb_rpc_;
      break;
    }
    case kDemuxerstreamReaduntilcbRpc: {
      delete rpc_oneof_.demuxerstream_readuntilcb_rpc_;
      break;
    }
    case kCdmInitializeRpc: {
      delete rpc_oneof_.cdm_initialize_rpc_;
      break;
    }
    case kCdmSetservercertificateRpc: {
      delete rpc_oneof_.cdm_setservercertificate_rpc_;
      break;
    }
    case kCdmCreatesessionandgeneraterequestRpc: {
      delete rpc_oneof_.cdm_createsessionandgeneraterequest_rpc_;
      break;
    }
    case kCdmLoadsessionRpc: {
      delete rpc_oneof_.cdm_loadsession_rpc_;
      break;
    }
    case kCdmUpdatesessionRpc: {
      delete rpc_oneof_.cdm_updatesession_rpc_;
      break;
    }
    case kCdmClosesessionRpc: {
      delete rpc_oneof_.cdm_closesession_rpc_;
      break;
    }
    case kCdmRemovesessionRpc: {
      delete rpc_oneof_.cdm_removesession_rpc_;
      break;
    }
    case kCdmPromiseRpc: {
      delete rpc_oneof_.cdm_promise_rpc_;
      break;
    }
    case kCdmclientOnsessionmessageRpc: {
      delete rpc_oneof_.cdmclient_onsessionmessage_rpc_;
      break;
    }
    case kCdmclientOnsessionkeychangeRpc: {
      delete rpc_oneof_.cdmclient_onsessionkeychange_rpc_;
      break;
    }
    case kCdmclientOnsessionexpirationupdateRpc: {
      delete rpc_oneof_.cdmclient_onsessionexpirationupdate_rpc_;
      break;
    }
    case RPC_ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RPC_ONEOF_NOT_SET;
}


void RpcMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:media.remoting.pb.RpcMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&proc_) -
        reinterpret_cast<char*>(&handle_)) + sizeof(proc_));
  }
  clear_rpc_oneof();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RpcMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_handle(&has_bits);
          handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.RpcMessage.RpcProc proc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::media::remoting::pb::RpcMessage_RpcProc_IsValid(val))) {
            set_proc(static_cast<::media::remoting::pb::RpcMessage_RpcProc>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 integer_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          set_integer_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 integer64_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          set_integer64_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double double_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional bool boolean_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          set_boolean_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string string_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_string_value(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.RendererInitialize renderer_initialize_rpc = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_renderer_initialize_rpc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.RendererFlushUntil renderer_flushuntil_rpc = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_renderer_flushuntil_rpc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.RendererSetCdm renderer_set_cdm_rpc = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_renderer_set_cdm_rpc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.AcquireDemuxer acquire_demuxer_rpc = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_acquire_demuxer_rpc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.RendererClientOnTimeUpdate rendererclient_ontimeupdate_rpc = 200;
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_rendererclient_ontimeupdate_rpc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.Size rendererclient_onvideonatualsizechange_rpc = 201;
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_rendererclient_onvideonatualsizechange_rpc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.PipelineStatistics rendererclient_onstatisticsupdate_rpc = 202;
      case 202:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_rendererclient_onstatisticsupdate_rpc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.RendererClientOnBufferingStateChange rendererclient_onbufferingstatechange_rpc = 203;
      case 203:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_rendererclient_onbufferingstatechange_rpc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.RendererClientOnAudioConfigChange rendererclient_onaudioconfigchange_rpc = 204;
      case 204:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_rendererclient_onaudioconfigchange_rpc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.RendererClientOnVideoConfigChange rendererclient_onvideoconfigchange_rpc = 205;
      case 205:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_rendererclient_onvideoconfigchange_rpc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.DemuxerStreamReadUntil demuxerstream_readuntil_rpc = 300;
      case 300:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_demuxerstream_readuntil_rpc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.DemuxerStreamInitializeCallback demuxerstream_initializecb_rpc = 400;
      case 400:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_demuxerstream_initializecb_rpc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.DemuxerStreamReadUntilCallback demuxerstream_readuntilcb_rpc = 401;
      case 401:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_demuxerstream_readuntilcb_rpc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.CdmInitialize cdm_initialize_rpc = 500;
      case 500:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_cdm_initialize_rpc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.CdmSetServerCertificate cdm_setservercertificate_rpc = 501;
      case 501:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_cdm_setservercertificate_rpc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.CdmCreateSessionAndGenerateRequest cdm_createsessionandgeneraterequest_rpc = 502;
      case 502:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_cdm_createsessionandgeneraterequest_rpc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.CdmLoadSession cdm_loadsession_rpc = 503;
      case 503:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_cdm_loadsession_rpc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.CdmUpdateSession cdm_updatesession_rpc = 504;
      case 504:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_cdm_updatesession_rpc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.CdmCloseSession cdm_closesession_rpc = 505;
      case 505:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_cdm_closesession_rpc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.CdmRemoveSession cdm_removesession_rpc = 506;
      case 506:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_cdm_removesession_rpc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.CdmPromise cdm_promise_rpc = 600;
      case 600:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_cdm_promise_rpc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.CdmClientOnSessionMessage cdmclient_onsessionmessage_rpc = 601;
      case 601:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_cdmclient_onsessionmessage_rpc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.CdmClientOnSessionKeysChange cdmclient_onsessionkeychange_rpc = 602;
      case 602:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_cdmclient_onsessionkeychange_rpc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.remoting.pb.CdmClientOnSessionExpirationUpdate cdmclient_onsessionexpirationupdate_rpc = 603;
      case 603:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_cdmclient_onsessionexpirationupdate_rpc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RpcMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.remoting.pb.RpcMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 handle = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_handle(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.RpcMessage.RpcProc proc = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::media::remoting::pb::RpcMessage_RpcProc_IsValid(value)) {
            set_proc(static_cast< ::media::remoting::pb::RpcMessage_RpcProc >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 integer_value = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          clear_rpc_oneof();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &rpc_oneof_.integer_value_)));
          set_has_integer_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 integer64_value = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          clear_rpc_oneof();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &rpc_oneof_.integer64_value_)));
          set_has_integer64_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double double_value = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {
          clear_rpc_oneof();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rpc_oneof_.double_value_)));
          set_has_double_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool boolean_value = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          clear_rpc_oneof();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rpc_oneof_.boolean_value_)));
          set_has_boolean_value();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string string_value = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.RendererInitialize renderer_initialize_rpc = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_renderer_initialize_rpc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.RendererFlushUntil renderer_flushuntil_rpc = 101;
      case 101: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (810 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_renderer_flushuntil_rpc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.RendererSetCdm renderer_set_cdm_rpc = 102;
      case 102: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (818 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_renderer_set_cdm_rpc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.AcquireDemuxer acquire_demuxer_rpc = 103;
      case 103: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (826 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_acquire_demuxer_rpc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.RendererClientOnTimeUpdate rendererclient_ontimeupdate_rpc = 200;
      case 200: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1602 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rendererclient_ontimeupdate_rpc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.Size rendererclient_onvideonatualsizechange_rpc = 201;
      case 201: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1610 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rendererclient_onvideonatualsizechange_rpc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.PipelineStatistics rendererclient_onstatisticsupdate_rpc = 202;
      case 202: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1618 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rendererclient_onstatisticsupdate_rpc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.RendererClientOnBufferingStateChange rendererclient_onbufferingstatechange_rpc = 203;
      case 203: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1626 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rendererclient_onbufferingstatechange_rpc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.RendererClientOnAudioConfigChange rendererclient_onaudioconfigchange_rpc = 204;
      case 204: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1634 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rendererclient_onaudioconfigchange_rpc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.RendererClientOnVideoConfigChange rendererclient_onvideoconfigchange_rpc = 205;
      case 205: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (1642 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rendererclient_onvideoconfigchange_rpc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.DemuxerStreamReadUntil demuxerstream_readuntil_rpc = 300;
      case 300: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (2402 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_demuxerstream_readuntil_rpc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.DemuxerStreamInitializeCallback demuxerstream_initializecb_rpc = 400;
      case 400: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_demuxerstream_initializecb_rpc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.DemuxerStreamReadUntilCallback demuxerstream_readuntilcb_rpc = 401;
      case 401: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (3210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_demuxerstream_readuntilcb_rpc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.CdmInitialize cdm_initialize_rpc = 500;
      case 500: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4002 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cdm_initialize_rpc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.CdmSetServerCertificate cdm_setservercertificate_rpc = 501;
      case 501: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4010 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cdm_setservercertificate_rpc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.CdmCreateSessionAndGenerateRequest cdm_createsessionandgeneraterequest_rpc = 502;
      case 502: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4018 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cdm_createsessionandgeneraterequest_rpc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.CdmLoadSession cdm_loadsession_rpc = 503;
      case 503: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4026 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cdm_loadsession_rpc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.CdmUpdateSession cdm_updatesession_rpc = 504;
      case 504: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4034 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cdm_updatesession_rpc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.CdmCloseSession cdm_closesession_rpc = 505;
      case 505: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4042 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cdm_closesession_rpc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.CdmRemoveSession cdm_removesession_rpc = 506;
      case 506: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4050 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cdm_removesession_rpc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.CdmPromise cdm_promise_rpc = 600;
      case 600: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cdm_promise_rpc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.CdmClientOnSessionMessage cdmclient_onsessionmessage_rpc = 601;
      case 601: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4810 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cdmclient_onsessionmessage_rpc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.CdmClientOnSessionKeysChange cdmclient_onsessionkeychange_rpc = 602;
      case 602: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4818 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cdmclient_onsessionkeychange_rpc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.remoting.pb.CdmClientOnSessionExpirationUpdate cdmclient_onsessionexpirationupdate_rpc = 603;
      case 603: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (4826 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cdmclient_onsessionexpirationupdate_rpc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.remoting.pb.RpcMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.remoting.pb.RpcMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RpcMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.remoting.pb.RpcMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->handle(), output);
  }

  // optional .media.remoting.pb.RpcMessage.RpcProc proc = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->proc(), output);
  }

  switch (rpc_oneof_case()) {
    case kIntegerValue:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->integer_value(), output);
      break;
    case kInteger64Value:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->integer64_value(), output);
      break;
    case kDoubleValue:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->double_value(), output);
      break;
    case kBooleanValue:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->boolean_value(), output);
      break;
    case kStringValue:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
        7, this->string_value(), output);
      break;
    case kRendererInitializeRpc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        100, _Internal::renderer_initialize_rpc(this), output);
      break;
    case kRendererFlushuntilRpc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        101, _Internal::renderer_flushuntil_rpc(this), output);
      break;
    case kRendererSetCdmRpc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        102, _Internal::renderer_set_cdm_rpc(this), output);
      break;
    case kAcquireDemuxerRpc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        103, _Internal::acquire_demuxer_rpc(this), output);
      break;
    case kRendererclientOntimeupdateRpc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        200, _Internal::rendererclient_ontimeupdate_rpc(this), output);
      break;
    case kRendererclientOnvideonatualsizechangeRpc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        201, _Internal::rendererclient_onvideonatualsizechange_rpc(this), output);
      break;
    case kRendererclientOnstatisticsupdateRpc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        202, _Internal::rendererclient_onstatisticsupdate_rpc(this), output);
      break;
    case kRendererclientOnbufferingstatechangeRpc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        203, _Internal::rendererclient_onbufferingstatechange_rpc(this), output);
      break;
    case kRendererclientOnaudioconfigchangeRpc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        204, _Internal::rendererclient_onaudioconfigchange_rpc(this), output);
      break;
    case kRendererclientOnvideoconfigchangeRpc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        205, _Internal::rendererclient_onvideoconfigchange_rpc(this), output);
      break;
    case kDemuxerstreamReaduntilRpc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        300, _Internal::demuxerstream_readuntil_rpc(this), output);
      break;
    case kDemuxerstreamInitializecbRpc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        400, _Internal::demuxerstream_initializecb_rpc(this), output);
      break;
    case kDemuxerstreamReaduntilcbRpc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        401, _Internal::demuxerstream_readuntilcb_rpc(this), output);
      break;
    case kCdmInitializeRpc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        500, _Internal::cdm_initialize_rpc(this), output);
      break;
    case kCdmSetservercertificateRpc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        501, _Internal::cdm_setservercertificate_rpc(this), output);
      break;
    case kCdmCreatesessionandgeneraterequestRpc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        502, _Internal::cdm_createsessionandgeneraterequest_rpc(this), output);
      break;
    case kCdmLoadsessionRpc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        503, _Internal::cdm_loadsession_rpc(this), output);
      break;
    case kCdmUpdatesessionRpc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        504, _Internal::cdm_updatesession_rpc(this), output);
      break;
    case kCdmClosesessionRpc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        505, _Internal::cdm_closesession_rpc(this), output);
      break;
    case kCdmRemovesessionRpc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        506, _Internal::cdm_removesession_rpc(this), output);
      break;
    case kCdmPromiseRpc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        600, _Internal::cdm_promise_rpc(this), output);
      break;
    case kCdmclientOnsessionmessageRpc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        601, _Internal::cdmclient_onsessionmessage_rpc(this), output);
      break;
    case kCdmclientOnsessionkeychangeRpc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        602, _Internal::cdmclient_onsessionkeychange_rpc(this), output);
      break;
    case kCdmclientOnsessionexpirationupdateRpc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
        603, _Internal::cdmclient_onsessionexpirationupdate_rpc(this), output);
      break;
    default: ;
  }
  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.remoting.pb.RpcMessage)
}

size_t RpcMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.remoting.pb.RpcMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->handle());
    }

    // optional .media.remoting.pb.RpcMessage.RpcProc proc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->proc());
    }

  }
  switch (rpc_oneof_case()) {
    // optional int32 integer_value = 3;
    case kIntegerValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->integer_value());
      break;
    }
    // optional int64 integer64_value = 4;
    case kInteger64Value: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->integer64_value());
      break;
    }
    // optional double double_value = 5;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // optional bool boolean_value = 6;
    case kBooleanValue: {
      total_size += 1 + 1;
      break;
    }
    // optional string string_value = 7;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->string_value());
      break;
    }
    // optional .media.remoting.pb.RendererInitialize renderer_initialize_rpc = 100;
    case kRendererInitializeRpc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rpc_oneof_.renderer_initialize_rpc_);
      break;
    }
    // optional .media.remoting.pb.RendererFlushUntil renderer_flushuntil_rpc = 101;
    case kRendererFlushuntilRpc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rpc_oneof_.renderer_flushuntil_rpc_);
      break;
    }
    // optional .media.remoting.pb.RendererSetCdm renderer_set_cdm_rpc = 102;
    case kRendererSetCdmRpc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rpc_oneof_.renderer_set_cdm_rpc_);
      break;
    }
    // optional .media.remoting.pb.AcquireDemuxer acquire_demuxer_rpc = 103;
    case kAcquireDemuxerRpc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rpc_oneof_.acquire_demuxer_rpc_);
      break;
    }
    // optional .media.remoting.pb.RendererClientOnTimeUpdate rendererclient_ontimeupdate_rpc = 200;
    case kRendererclientOntimeupdateRpc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rpc_oneof_.rendererclient_ontimeupdate_rpc_);
      break;
    }
    // optional .media.remoting.pb.Size rendererclient_onvideonatualsizechange_rpc = 201;
    case kRendererclientOnvideonatualsizechangeRpc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rpc_oneof_.rendererclient_onvideonatualsizechange_rpc_);
      break;
    }
    // optional .media.remoting.pb.PipelineStatistics rendererclient_onstatisticsupdate_rpc = 202;
    case kRendererclientOnstatisticsupdateRpc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rpc_oneof_.rendererclient_onstatisticsupdate_rpc_);
      break;
    }
    // optional .media.remoting.pb.RendererClientOnBufferingStateChange rendererclient_onbufferingstatechange_rpc = 203;
    case kRendererclientOnbufferingstatechangeRpc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rpc_oneof_.rendererclient_onbufferingstatechange_rpc_);
      break;
    }
    // optional .media.remoting.pb.RendererClientOnAudioConfigChange rendererclient_onaudioconfigchange_rpc = 204;
    case kRendererclientOnaudioconfigchangeRpc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rpc_oneof_.rendererclient_onaudioconfigchange_rpc_);
      break;
    }
    // optional .media.remoting.pb.RendererClientOnVideoConfigChange rendererclient_onvideoconfigchange_rpc = 205;
    case kRendererclientOnvideoconfigchangeRpc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rpc_oneof_.rendererclient_onvideoconfigchange_rpc_);
      break;
    }
    // optional .media.remoting.pb.DemuxerStreamReadUntil demuxerstream_readuntil_rpc = 300;
    case kDemuxerstreamReaduntilRpc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rpc_oneof_.demuxerstream_readuntil_rpc_);
      break;
    }
    // optional .media.remoting.pb.DemuxerStreamInitializeCallback demuxerstream_initializecb_rpc = 400;
    case kDemuxerstreamInitializecbRpc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rpc_oneof_.demuxerstream_initializecb_rpc_);
      break;
    }
    // optional .media.remoting.pb.DemuxerStreamReadUntilCallback demuxerstream_readuntilcb_rpc = 401;
    case kDemuxerstreamReaduntilcbRpc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rpc_oneof_.demuxerstream_readuntilcb_rpc_);
      break;
    }
    // optional .media.remoting.pb.CdmInitialize cdm_initialize_rpc = 500;
    case kCdmInitializeRpc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rpc_oneof_.cdm_initialize_rpc_);
      break;
    }
    // optional .media.remoting.pb.CdmSetServerCertificate cdm_setservercertificate_rpc = 501;
    case kCdmSetservercertificateRpc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rpc_oneof_.cdm_setservercertificate_rpc_);
      break;
    }
    // optional .media.remoting.pb.CdmCreateSessionAndGenerateRequest cdm_createsessionandgeneraterequest_rpc = 502;
    case kCdmCreatesessionandgeneraterequestRpc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rpc_oneof_.cdm_createsessionandgeneraterequest_rpc_);
      break;
    }
    // optional .media.remoting.pb.CdmLoadSession cdm_loadsession_rpc = 503;
    case kCdmLoadsessionRpc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rpc_oneof_.cdm_loadsession_rpc_);
      break;
    }
    // optional .media.remoting.pb.CdmUpdateSession cdm_updatesession_rpc = 504;
    case kCdmUpdatesessionRpc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rpc_oneof_.cdm_updatesession_rpc_);
      break;
    }
    // optional .media.remoting.pb.CdmCloseSession cdm_closesession_rpc = 505;
    case kCdmClosesessionRpc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rpc_oneof_.cdm_closesession_rpc_);
      break;
    }
    // optional .media.remoting.pb.CdmRemoveSession cdm_removesession_rpc = 506;
    case kCdmRemovesessionRpc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rpc_oneof_.cdm_removesession_rpc_);
      break;
    }
    // optional .media.remoting.pb.CdmPromise cdm_promise_rpc = 600;
    case kCdmPromiseRpc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rpc_oneof_.cdm_promise_rpc_);
      break;
    }
    // optional .media.remoting.pb.CdmClientOnSessionMessage cdmclient_onsessionmessage_rpc = 601;
    case kCdmclientOnsessionmessageRpc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rpc_oneof_.cdmclient_onsessionmessage_rpc_);
      break;
    }
    // optional .media.remoting.pb.CdmClientOnSessionKeysChange cdmclient_onsessionkeychange_rpc = 602;
    case kCdmclientOnsessionkeychangeRpc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rpc_oneof_.cdmclient_onsessionkeychange_rpc_);
      break;
    }
    // optional .media.remoting.pb.CdmClientOnSessionExpirationUpdate cdmclient_onsessionexpirationupdate_rpc = 603;
    case kCdmclientOnsessionexpirationupdateRpc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rpc_oneof_.cdmclient_onsessionexpirationupdate_rpc_);
      break;
    }
    case RPC_ONEOF_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RpcMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const RpcMessage*>(
      &from));
}

void RpcMessage::MergeFrom(const RpcMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.remoting.pb.RpcMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      handle_ = from.handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      proc_ = from.proc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.rpc_oneof_case()) {
    case kIntegerValue: {
      set_integer_value(from.integer_value());
      break;
    }
    case kInteger64Value: {
      set_integer64_value(from.integer64_value());
      break;
    }
    case kDoubleValue: {
      set_double_value(from.double_value());
      break;
    }
    case kBooleanValue: {
      set_boolean_value(from.boolean_value());
      break;
    }
    case kStringValue: {
      set_string_value(from.string_value());
      break;
    }
    case kRendererInitializeRpc: {
      mutable_renderer_initialize_rpc()->::media::remoting::pb::RendererInitialize::MergeFrom(from.renderer_initialize_rpc());
      break;
    }
    case kRendererFlushuntilRpc: {
      mutable_renderer_flushuntil_rpc()->::media::remoting::pb::RendererFlushUntil::MergeFrom(from.renderer_flushuntil_rpc());
      break;
    }
    case kRendererSetCdmRpc: {
      mutable_renderer_set_cdm_rpc()->::media::remoting::pb::RendererSetCdm::MergeFrom(from.renderer_set_cdm_rpc());
      break;
    }
    case kAcquireDemuxerRpc: {
      mutable_acquire_demuxer_rpc()->::media::remoting::pb::AcquireDemuxer::MergeFrom(from.acquire_demuxer_rpc());
      break;
    }
    case kRendererclientOntimeupdateRpc: {
      mutable_rendererclient_ontimeupdate_rpc()->::media::remoting::pb::RendererClientOnTimeUpdate::MergeFrom(from.rendererclient_ontimeupdate_rpc());
      break;
    }
    case kRendererclientOnvideonatualsizechangeRpc: {
      mutable_rendererclient_onvideonatualsizechange_rpc()->::media::remoting::pb::Size::MergeFrom(from.rendererclient_onvideonatualsizechange_rpc());
      break;
    }
    case kRendererclientOnstatisticsupdateRpc: {
      mutable_rendererclient_onstatisticsupdate_rpc()->::media::remoting::pb::PipelineStatistics::MergeFrom(from.rendererclient_onstatisticsupdate_rpc());
      break;
    }
    case kRendererclientOnbufferingstatechangeRpc: {
      mutable_rendererclient_onbufferingstatechange_rpc()->::media::remoting::pb::RendererClientOnBufferingStateChange::MergeFrom(from.rendererclient_onbufferingstatechange_rpc());
      break;
    }
    case kRendererclientOnaudioconfigchangeRpc: {
      mutable_rendererclient_onaudioconfigchange_rpc()->::media::remoting::pb::RendererClientOnAudioConfigChange::MergeFrom(from.rendererclient_onaudioconfigchange_rpc());
      break;
    }
    case kRendererclientOnvideoconfigchangeRpc: {
      mutable_rendererclient_onvideoconfigchange_rpc()->::media::remoting::pb::RendererClientOnVideoConfigChange::MergeFrom(from.rendererclient_onvideoconfigchange_rpc());
      break;
    }
    case kDemuxerstreamReaduntilRpc: {
      mutable_demuxerstream_readuntil_rpc()->::media::remoting::pb::DemuxerStreamReadUntil::MergeFrom(from.demuxerstream_readuntil_rpc());
      break;
    }
    case kDemuxerstreamInitializecbRpc: {
      mutable_demuxerstream_initializecb_rpc()->::media::remoting::pb::DemuxerStreamInitializeCallback::MergeFrom(from.demuxerstream_initializecb_rpc());
      break;
    }
    case kDemuxerstreamReaduntilcbRpc: {
      mutable_demuxerstream_readuntilcb_rpc()->::media::remoting::pb::DemuxerStreamReadUntilCallback::MergeFrom(from.demuxerstream_readuntilcb_rpc());
      break;
    }
    case kCdmInitializeRpc: {
      mutable_cdm_initialize_rpc()->::media::remoting::pb::CdmInitialize::MergeFrom(from.cdm_initialize_rpc());
      break;
    }
    case kCdmSetservercertificateRpc: {
      mutable_cdm_setservercertificate_rpc()->::media::remoting::pb::CdmSetServerCertificate::MergeFrom(from.cdm_setservercertificate_rpc());
      break;
    }
    case kCdmCreatesessionandgeneraterequestRpc: {
      mutable_cdm_createsessionandgeneraterequest_rpc()->::media::remoting::pb::CdmCreateSessionAndGenerateRequest::MergeFrom(from.cdm_createsessionandgeneraterequest_rpc());
      break;
    }
    case kCdmLoadsessionRpc: {
      mutable_cdm_loadsession_rpc()->::media::remoting::pb::CdmLoadSession::MergeFrom(from.cdm_loadsession_rpc());
      break;
    }
    case kCdmUpdatesessionRpc: {
      mutable_cdm_updatesession_rpc()->::media::remoting::pb::CdmUpdateSession::MergeFrom(from.cdm_updatesession_rpc());
      break;
    }
    case kCdmClosesessionRpc: {
      mutable_cdm_closesession_rpc()->::media::remoting::pb::CdmCloseSession::MergeFrom(from.cdm_closesession_rpc());
      break;
    }
    case kCdmRemovesessionRpc: {
      mutable_cdm_removesession_rpc()->::media::remoting::pb::CdmRemoveSession::MergeFrom(from.cdm_removesession_rpc());
      break;
    }
    case kCdmPromiseRpc: {
      mutable_cdm_promise_rpc()->::media::remoting::pb::CdmPromise::MergeFrom(from.cdm_promise_rpc());
      break;
    }
    case kCdmclientOnsessionmessageRpc: {
      mutable_cdmclient_onsessionmessage_rpc()->::media::remoting::pb::CdmClientOnSessionMessage::MergeFrom(from.cdmclient_onsessionmessage_rpc());
      break;
    }
    case kCdmclientOnsessionkeychangeRpc: {
      mutable_cdmclient_onsessionkeychange_rpc()->::media::remoting::pb::CdmClientOnSessionKeysChange::MergeFrom(from.cdmclient_onsessionkeychange_rpc());
      break;
    }
    case kCdmclientOnsessionexpirationupdateRpc: {
      mutable_cdmclient_onsessionexpirationupdate_rpc()->::media::remoting::pb::CdmClientOnSessionExpirationUpdate::MergeFrom(from.cdmclient_onsessionexpirationupdate_rpc());
      break;
    }
    case RPC_ONEOF_NOT_SET: {
      break;
    }
  }
}

void RpcMessage::CopyFrom(const RpcMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.remoting.pb.RpcMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpcMessage::IsInitialized() const {
  return true;
}

void RpcMessage::InternalSwap(RpcMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(handle_, other->handle_);
  swap(proc_, other->proc_);
  swap(rpc_oneof_, other->rpc_oneof_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string RpcMessage::GetTypeName() const {
  return "media.remoting.pb.RpcMessage";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace pb
}  // namespace remoting
}  // namespace media
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::media::remoting::pb::DecoderBuffer* Arena::CreateMaybeMessage< ::media::remoting::pb::DecoderBuffer >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::DecoderBuffer >(arena);
}
template<> PROTOBUF_NOINLINE ::media::remoting::pb::Size* Arena::CreateMaybeMessage< ::media::remoting::pb::Size >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::Size >(arena);
}
template<> PROTOBUF_NOINLINE ::media::remoting::pb::EncryptionScheme* Arena::CreateMaybeMessage< ::media::remoting::pb::EncryptionScheme >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::EncryptionScheme >(arena);
}
template<> PROTOBUF_NOINLINE ::media::remoting::pb::AudioDecoderConfig* Arena::CreateMaybeMessage< ::media::remoting::pb::AudioDecoderConfig >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::AudioDecoderConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::media::remoting::pb::Rect* Arena::CreateMaybeMessage< ::media::remoting::pb::Rect >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::Rect >(arena);
}
template<> PROTOBUF_NOINLINE ::media::remoting::pb::VideoDecoderConfig* Arena::CreateMaybeMessage< ::media::remoting::pb::VideoDecoderConfig >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::VideoDecoderConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::media::remoting::pb::DecryptConfig_SubSample* Arena::CreateMaybeMessage< ::media::remoting::pb::DecryptConfig_SubSample >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::DecryptConfig_SubSample >(arena);
}
template<> PROTOBUF_NOINLINE ::media::remoting::pb::DecryptConfig* Arena::CreateMaybeMessage< ::media::remoting::pb::DecryptConfig >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::DecryptConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::media::remoting::pb::PipelineDecoderInfo* Arena::CreateMaybeMessage< ::media::remoting::pb::PipelineDecoderInfo >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::PipelineDecoderInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::media::remoting::pb::PipelineStatistics* Arena::CreateMaybeMessage< ::media::remoting::pb::PipelineStatistics >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::PipelineStatistics >(arena);
}
template<> PROTOBUF_NOINLINE ::media::remoting::pb::CdmKeyInformation* Arena::CreateMaybeMessage< ::media::remoting::pb::CdmKeyInformation >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::CdmKeyInformation >(arena);
}
template<> PROTOBUF_NOINLINE ::media::remoting::pb::AcquireDemuxer* Arena::CreateMaybeMessage< ::media::remoting::pb::AcquireDemuxer >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::AcquireDemuxer >(arena);
}
template<> PROTOBUF_NOINLINE ::media::remoting::pb::RendererInitialize* Arena::CreateMaybeMessage< ::media::remoting::pb::RendererInitialize >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::RendererInitialize >(arena);
}
template<> PROTOBUF_NOINLINE ::media::remoting::pb::RendererFlushUntil* Arena::CreateMaybeMessage< ::media::remoting::pb::RendererFlushUntil >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::RendererFlushUntil >(arena);
}
template<> PROTOBUF_NOINLINE ::media::remoting::pb::RendererSetCdm* Arena::CreateMaybeMessage< ::media::remoting::pb::RendererSetCdm >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::RendererSetCdm >(arena);
}
template<> PROTOBUF_NOINLINE ::media::remoting::pb::RendererClientOnTimeUpdate* Arena::CreateMaybeMessage< ::media::remoting::pb::RendererClientOnTimeUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::RendererClientOnTimeUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::media::remoting::pb::RendererClientOnBufferingStateChange* Arena::CreateMaybeMessage< ::media::remoting::pb::RendererClientOnBufferingStateChange >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::RendererClientOnBufferingStateChange >(arena);
}
template<> PROTOBUF_NOINLINE ::media::remoting::pb::RendererClientOnAudioConfigChange* Arena::CreateMaybeMessage< ::media::remoting::pb::RendererClientOnAudioConfigChange >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::RendererClientOnAudioConfigChange >(arena);
}
template<> PROTOBUF_NOINLINE ::media::remoting::pb::RendererClientOnVideoConfigChange* Arena::CreateMaybeMessage< ::media::remoting::pb::RendererClientOnVideoConfigChange >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::RendererClientOnVideoConfigChange >(arena);
}
template<> PROTOBUF_NOINLINE ::media::remoting::pb::DemuxerStreamReadUntil* Arena::CreateMaybeMessage< ::media::remoting::pb::DemuxerStreamReadUntil >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::DemuxerStreamReadUntil >(arena);
}
template<> PROTOBUF_NOINLINE ::media::remoting::pb::DemuxerStreamInitializeCallback* Arena::CreateMaybeMessage< ::media::remoting::pb::DemuxerStreamInitializeCallback >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::DemuxerStreamInitializeCallback >(arena);
}
template<> PROTOBUF_NOINLINE ::media::remoting::pb::DemuxerStreamReadUntilCallback* Arena::CreateMaybeMessage< ::media::remoting::pb::DemuxerStreamReadUntilCallback >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::DemuxerStreamReadUntilCallback >(arena);
}
template<> PROTOBUF_NOINLINE ::media::remoting::pb::CdmInitialize* Arena::CreateMaybeMessage< ::media::remoting::pb::CdmInitialize >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::CdmInitialize >(arena);
}
template<> PROTOBUF_NOINLINE ::media::remoting::pb::CdmSetServerCertificate* Arena::CreateMaybeMessage< ::media::remoting::pb::CdmSetServerCertificate >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::CdmSetServerCertificate >(arena);
}
template<> PROTOBUF_NOINLINE ::media::remoting::pb::CdmCreateSessionAndGenerateRequest* Arena::CreateMaybeMessage< ::media::remoting::pb::CdmCreateSessionAndGenerateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::CdmCreateSessionAndGenerateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::media::remoting::pb::CdmLoadSession* Arena::CreateMaybeMessage< ::media::remoting::pb::CdmLoadSession >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::CdmLoadSession >(arena);
}
template<> PROTOBUF_NOINLINE ::media::remoting::pb::CdmUpdateSession* Arena::CreateMaybeMessage< ::media::remoting::pb::CdmUpdateSession >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::CdmUpdateSession >(arena);
}
template<> PROTOBUF_NOINLINE ::media::remoting::pb::CdmCloseSession* Arena::CreateMaybeMessage< ::media::remoting::pb::CdmCloseSession >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::CdmCloseSession >(arena);
}
template<> PROTOBUF_NOINLINE ::media::remoting::pb::CdmRemoveSession* Arena::CreateMaybeMessage< ::media::remoting::pb::CdmRemoveSession >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::CdmRemoveSession >(arena);
}
template<> PROTOBUF_NOINLINE ::media::remoting::pb::CdmPromise* Arena::CreateMaybeMessage< ::media::remoting::pb::CdmPromise >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::CdmPromise >(arena);
}
template<> PROTOBUF_NOINLINE ::media::remoting::pb::CdmClientOnSessionMessage* Arena::CreateMaybeMessage< ::media::remoting::pb::CdmClientOnSessionMessage >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::CdmClientOnSessionMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::media::remoting::pb::CdmClientOnSessionKeysChange* Arena::CreateMaybeMessage< ::media::remoting::pb::CdmClientOnSessionKeysChange >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::CdmClientOnSessionKeysChange >(arena);
}
template<> PROTOBUF_NOINLINE ::media::remoting::pb::CdmClientOnSessionExpirationUpdate* Arena::CreateMaybeMessage< ::media::remoting::pb::CdmClientOnSessionExpirationUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::CdmClientOnSessionExpirationUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::media::remoting::pb::RpcMessage* Arena::CreateMaybeMessage< ::media::remoting::pb::RpcMessage >(Arena* arena) {
  return Arena::CreateInternal< ::media::remoting::pb::RpcMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

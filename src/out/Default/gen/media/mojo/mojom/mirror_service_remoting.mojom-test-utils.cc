// media/mojo/mojom/mirror_service_remoting.mojom-test-utils.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif


#include "media/mojo/mojom/mirror_service_remoting.mojom-test-utils.h"

#include <utility>

#include "base/bind.h"
#include "base/run_loop.h"
#include "media/mojo/mojom/remoting_common.mojom.h"


#ifndef MEDIA_MOJO_MOJOM_MIRROR_SERVICE_REMOTING_MOJOM_JUMBO_H_
#define MEDIA_MOJO_MOJOM_MIRROR_SERVICE_REMOTING_MOJOM_JUMBO_H_
#endif


namespace media {
namespace mojom {


void MirrorServiceRemoterInterceptorForTesting::Start() {
  GetForwardingInterface()->Start();
}
void MirrorServiceRemoterInterceptorForTesting::StartDataStreams(bool has_audio, bool has_video, StartDataStreamsCallback callback) {
  GetForwardingInterface()->StartDataStreams(std::move(has_audio), std::move(has_video), std::move(callback));
}
void MirrorServiceRemoterInterceptorForTesting::Stop(::media::mojom::RemotingStopReason reason) {
  GetForwardingInterface()->Stop(std::move(reason));
}
void MirrorServiceRemoterInterceptorForTesting::SendMessageToSink(const std::vector<uint8_t>& message) {
  GetForwardingInterface()->SendMessageToSink(std::move(message));
}
void MirrorServiceRemoterInterceptorForTesting::EstimateTransmissionCapacity(EstimateTransmissionCapacityCallback callback) {
  GetForwardingInterface()->EstimateTransmissionCapacity(std::move(callback));
}
MirrorServiceRemoterAsyncWaiter::MirrorServiceRemoterAsyncWaiter(
    MirrorServiceRemoter* proxy) : proxy_(proxy) {}

MirrorServiceRemoterAsyncWaiter::~MirrorServiceRemoterAsyncWaiter() = default;

void MirrorServiceRemoterAsyncWaiter::StartDataStreams(
    bool has_audio, bool has_video, int32_t* out_audio_stream_id, int32_t* out_video_stream_id) {
  base::RunLoop loop;
  proxy_->StartDataStreams(std::move(has_audio),std::move(has_video),
      base::BindOnce(
          [](base::RunLoop* loop,
             int32_t* out_audio_stream_id
,
             int32_t* out_video_stream_id
,
             int32_t audio_stream_id,
             int32_t video_stream_id) {*out_audio_stream_id = std::move(audio_stream_id);*out_video_stream_id = std::move(video_stream_id);
            loop->Quit();
          },
          &loop,
          out_audio_stream_id,
          out_video_stream_id));
  loop.Run();
}
void MirrorServiceRemoterAsyncWaiter::EstimateTransmissionCapacity(
    double* out_rate) {
  base::RunLoop loop;
  proxy_->EstimateTransmissionCapacity(
      base::BindOnce(
          [](base::RunLoop* loop,
             double* out_rate
,
             double rate) {*out_rate = std::move(rate);
            loop->Quit();
          },
          &loop,
          out_rate));
  loop.Run();
}



void MirrorServiceRemotingSourceInterceptorForTesting::OnSinkAvailable(::media::mojom::RemotingSinkMetadataPtr metadata) {
  GetForwardingInterface()->OnSinkAvailable(std::move(metadata));
}
void MirrorServiceRemotingSourceInterceptorForTesting::OnMessageFromSink(const std::vector<uint8_t>& message) {
  GetForwardingInterface()->OnMessageFromSink(std::move(message));
}
void MirrorServiceRemotingSourceInterceptorForTesting::OnStopped(::media::mojom::RemotingStopReason reason) {
  GetForwardingInterface()->OnStopped(std::move(reason));
}
void MirrorServiceRemotingSourceInterceptorForTesting::OnError() {
  GetForwardingInterface()->OnError();
}
MirrorServiceRemotingSourceAsyncWaiter::MirrorServiceRemotingSourceAsyncWaiter(
    MirrorServiceRemotingSource* proxy) : proxy_(proxy) {}

MirrorServiceRemotingSourceAsyncWaiter::~MirrorServiceRemotingSourceAsyncWaiter() = default;






}  // namespace mojom
}  // namespace media

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
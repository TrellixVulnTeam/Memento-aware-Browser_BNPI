// media/mojo/mojom/mirror_service_remoting.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_MOJO_MOJOM_MIRROR_SERVICE_REMOTING_MOJOM_PARAMS_DATA_H_
#define MEDIA_MOJO_MOJOM_MIRROR_SERVICE_REMOTING_MOJOM_PARAMS_DATA_H_

#include "base/logging.h"
#include "base/macros.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace media {
namespace mojom {
namespace internal {
class  MirrorServiceRemoter_Start_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MirrorServiceRemoter_Start_Params_Data));
      new (data()) MirrorServiceRemoter_Start_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MirrorServiceRemoter_Start_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MirrorServiceRemoter_Start_Params_Data>(index_);
    }
    MirrorServiceRemoter_Start_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  MirrorServiceRemoter_Start_Params_Data();
  ~MirrorServiceRemoter_Start_Params_Data() = delete;
};
static_assert(sizeof(MirrorServiceRemoter_Start_Params_Data) == 8,
              "Bad sizeof(MirrorServiceRemoter_Start_Params_Data)");
class  MirrorServiceRemoter_StartDataStreams_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MirrorServiceRemoter_StartDataStreams_Params_Data));
      new (data()) MirrorServiceRemoter_StartDataStreams_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MirrorServiceRemoter_StartDataStreams_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MirrorServiceRemoter_StartDataStreams_Params_Data>(index_);
    }
    MirrorServiceRemoter_StartDataStreams_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t has_audio : 1;
  uint8_t has_video : 1;
  uint8_t padfinal_[7];

 private:
  MirrorServiceRemoter_StartDataStreams_Params_Data();
  ~MirrorServiceRemoter_StartDataStreams_Params_Data() = delete;
};
static_assert(sizeof(MirrorServiceRemoter_StartDataStreams_Params_Data) == 16,
              "Bad sizeof(MirrorServiceRemoter_StartDataStreams_Params_Data)");
class  MirrorServiceRemoter_StartDataStreams_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MirrorServiceRemoter_StartDataStreams_ResponseParams_Data));
      new (data()) MirrorServiceRemoter_StartDataStreams_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MirrorServiceRemoter_StartDataStreams_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MirrorServiceRemoter_StartDataStreams_ResponseParams_Data>(index_);
    }
    MirrorServiceRemoter_StartDataStreams_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t audio_stream_id;
  int32_t video_stream_id;

 private:
  MirrorServiceRemoter_StartDataStreams_ResponseParams_Data();
  ~MirrorServiceRemoter_StartDataStreams_ResponseParams_Data() = delete;
};
static_assert(sizeof(MirrorServiceRemoter_StartDataStreams_ResponseParams_Data) == 16,
              "Bad sizeof(MirrorServiceRemoter_StartDataStreams_ResponseParams_Data)");
class  MirrorServiceRemoter_Stop_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MirrorServiceRemoter_Stop_Params_Data));
      new (data()) MirrorServiceRemoter_Stop_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MirrorServiceRemoter_Stop_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MirrorServiceRemoter_Stop_Params_Data>(index_);
    }
    MirrorServiceRemoter_Stop_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t reason;
  uint8_t padfinal_[4];

 private:
  MirrorServiceRemoter_Stop_Params_Data();
  ~MirrorServiceRemoter_Stop_Params_Data() = delete;
};
static_assert(sizeof(MirrorServiceRemoter_Stop_Params_Data) == 16,
              "Bad sizeof(MirrorServiceRemoter_Stop_Params_Data)");
class  MirrorServiceRemoter_SendMessageToSink_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MirrorServiceRemoter_SendMessageToSink_Params_Data));
      new (data()) MirrorServiceRemoter_SendMessageToSink_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MirrorServiceRemoter_SendMessageToSink_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MirrorServiceRemoter_SendMessageToSink_Params_Data>(index_);
    }
    MirrorServiceRemoter_SendMessageToSink_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>> message;

 private:
  MirrorServiceRemoter_SendMessageToSink_Params_Data();
  ~MirrorServiceRemoter_SendMessageToSink_Params_Data() = delete;
};
static_assert(sizeof(MirrorServiceRemoter_SendMessageToSink_Params_Data) == 16,
              "Bad sizeof(MirrorServiceRemoter_SendMessageToSink_Params_Data)");
class  MirrorServiceRemoter_EstimateTransmissionCapacity_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MirrorServiceRemoter_EstimateTransmissionCapacity_Params_Data));
      new (data()) MirrorServiceRemoter_EstimateTransmissionCapacity_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MirrorServiceRemoter_EstimateTransmissionCapacity_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MirrorServiceRemoter_EstimateTransmissionCapacity_Params_Data>(index_);
    }
    MirrorServiceRemoter_EstimateTransmissionCapacity_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  MirrorServiceRemoter_EstimateTransmissionCapacity_Params_Data();
  ~MirrorServiceRemoter_EstimateTransmissionCapacity_Params_Data() = delete;
};
static_assert(sizeof(MirrorServiceRemoter_EstimateTransmissionCapacity_Params_Data) == 8,
              "Bad sizeof(MirrorServiceRemoter_EstimateTransmissionCapacity_Params_Data)");
class  MirrorServiceRemoter_EstimateTransmissionCapacity_ResponseParams_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MirrorServiceRemoter_EstimateTransmissionCapacity_ResponseParams_Data));
      new (data()) MirrorServiceRemoter_EstimateTransmissionCapacity_ResponseParams_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MirrorServiceRemoter_EstimateTransmissionCapacity_ResponseParams_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MirrorServiceRemoter_EstimateTransmissionCapacity_ResponseParams_Data>(index_);
    }
    MirrorServiceRemoter_EstimateTransmissionCapacity_ResponseParams_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  double rate;

 private:
  MirrorServiceRemoter_EstimateTransmissionCapacity_ResponseParams_Data();
  ~MirrorServiceRemoter_EstimateTransmissionCapacity_ResponseParams_Data() = delete;
};
static_assert(sizeof(MirrorServiceRemoter_EstimateTransmissionCapacity_ResponseParams_Data) == 16,
              "Bad sizeof(MirrorServiceRemoter_EstimateTransmissionCapacity_ResponseParams_Data)");
class  MirrorServiceRemotingSource_OnSinkAvailable_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MirrorServiceRemotingSource_OnSinkAvailable_Params_Data));
      new (data()) MirrorServiceRemotingSource_OnSinkAvailable_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MirrorServiceRemotingSource_OnSinkAvailable_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MirrorServiceRemotingSource_OnSinkAvailable_Params_Data>(index_);
    }
    MirrorServiceRemotingSource_OnSinkAvailable_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::media::mojom::internal::RemotingSinkMetadata_Data> metadata;

 private:
  MirrorServiceRemotingSource_OnSinkAvailable_Params_Data();
  ~MirrorServiceRemotingSource_OnSinkAvailable_Params_Data() = delete;
};
static_assert(sizeof(MirrorServiceRemotingSource_OnSinkAvailable_Params_Data) == 16,
              "Bad sizeof(MirrorServiceRemotingSource_OnSinkAvailable_Params_Data)");
class  MirrorServiceRemotingSource_OnMessageFromSink_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MirrorServiceRemotingSource_OnMessageFromSink_Params_Data));
      new (data()) MirrorServiceRemotingSource_OnMessageFromSink_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MirrorServiceRemotingSource_OnMessageFromSink_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MirrorServiceRemotingSource_OnMessageFromSink_Params_Data>(index_);
    }
    MirrorServiceRemotingSource_OnMessageFromSink_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>> message;

 private:
  MirrorServiceRemotingSource_OnMessageFromSink_Params_Data();
  ~MirrorServiceRemotingSource_OnMessageFromSink_Params_Data() = delete;
};
static_assert(sizeof(MirrorServiceRemotingSource_OnMessageFromSink_Params_Data) == 16,
              "Bad sizeof(MirrorServiceRemotingSource_OnMessageFromSink_Params_Data)");
class  MirrorServiceRemotingSource_OnStopped_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MirrorServiceRemotingSource_OnStopped_Params_Data));
      new (data()) MirrorServiceRemotingSource_OnStopped_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MirrorServiceRemotingSource_OnStopped_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MirrorServiceRemotingSource_OnStopped_Params_Data>(index_);
    }
    MirrorServiceRemotingSource_OnStopped_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t reason;
  uint8_t padfinal_[4];

 private:
  MirrorServiceRemotingSource_OnStopped_Params_Data();
  ~MirrorServiceRemotingSource_OnStopped_Params_Data() = delete;
};
static_assert(sizeof(MirrorServiceRemotingSource_OnStopped_Params_Data) == 16,
              "Bad sizeof(MirrorServiceRemotingSource_OnStopped_Params_Data)");
class  MirrorServiceRemotingSource_OnError_Params_Data {
 public:
  class BufferWriter {
   public:
    BufferWriter() = default;

    void Allocate(mojo::internal::Buffer* serialization_buffer) {
      serialization_buffer_ = serialization_buffer;
      index_ = serialization_buffer_->Allocate(sizeof(MirrorServiceRemotingSource_OnError_Params_Data));
      new (data()) MirrorServiceRemotingSource_OnError_Params_Data();
    }

    bool is_null() const { return !serialization_buffer_; }
    MirrorServiceRemotingSource_OnError_Params_Data* data() {
      DCHECK(!is_null());
      return serialization_buffer_->Get<MirrorServiceRemotingSource_OnError_Params_Data>(index_);
    }
    MirrorServiceRemotingSource_OnError_Params_Data* operator->() { return data(); }

   private:
    mojo::internal::Buffer* serialization_buffer_ = nullptr;
    size_t index_ = 0;

    DISALLOW_COPY_AND_ASSIGN(BufferWriter);
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  MirrorServiceRemotingSource_OnError_Params_Data();
  ~MirrorServiceRemotingSource_OnError_Params_Data() = delete;
};
static_assert(sizeof(MirrorServiceRemotingSource_OnError_Params_Data) == 8,
              "Bad sizeof(MirrorServiceRemotingSource_OnError_Params_Data)");

}  // namespace internal
class MirrorServiceRemoter_Start_ParamsDataView {
 public:
  MirrorServiceRemoter_Start_ParamsDataView() {}

  MirrorServiceRemoter_Start_ParamsDataView(
      internal::MirrorServiceRemoter_Start_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::MirrorServiceRemoter_Start_Params_Data* data_ = nullptr;
};

class MirrorServiceRemoter_StartDataStreams_ParamsDataView {
 public:
  MirrorServiceRemoter_StartDataStreams_ParamsDataView() {}

  MirrorServiceRemoter_StartDataStreams_ParamsDataView(
      internal::MirrorServiceRemoter_StartDataStreams_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool has_audio() const {
    return data_->has_audio;
  }
  bool has_video() const {
    return data_->has_video;
  }
 private:
  internal::MirrorServiceRemoter_StartDataStreams_Params_Data* data_ = nullptr;
};

class MirrorServiceRemoter_StartDataStreams_ResponseParamsDataView {
 public:
  MirrorServiceRemoter_StartDataStreams_ResponseParamsDataView() {}

  MirrorServiceRemoter_StartDataStreams_ResponseParamsDataView(
      internal::MirrorServiceRemoter_StartDataStreams_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t audio_stream_id() const {
    return data_->audio_stream_id;
  }
  int32_t video_stream_id() const {
    return data_->video_stream_id;
  }
 private:
  internal::MirrorServiceRemoter_StartDataStreams_ResponseParams_Data* data_ = nullptr;
};

class MirrorServiceRemoter_Stop_ParamsDataView {
 public:
  MirrorServiceRemoter_Stop_ParamsDataView() {}

  MirrorServiceRemoter_Stop_ParamsDataView(
      internal::MirrorServiceRemoter_Stop_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadReason(UserType* output) const {
    auto data_value = data_->reason;
    return mojo::internal::Deserialize<::media::mojom::RemotingStopReason>(
        data_value, output);
  }

  ::media::mojom::RemotingStopReason reason() const {
    return static_cast<::media::mojom::RemotingStopReason>(data_->reason);
  }
 private:
  internal::MirrorServiceRemoter_Stop_Params_Data* data_ = nullptr;
};

class MirrorServiceRemoter_SendMessageToSink_ParamsDataView {
 public:
  MirrorServiceRemoter_SendMessageToSink_ParamsDataView() {}

  MirrorServiceRemoter_SendMessageToSink_ParamsDataView(
      internal::MirrorServiceRemoter_SendMessageToSink_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetMessageDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadMessage(UserType* output) {
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, context_);
  }
 private:
  internal::MirrorServiceRemoter_SendMessageToSink_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class MirrorServiceRemoter_EstimateTransmissionCapacity_ParamsDataView {
 public:
  MirrorServiceRemoter_EstimateTransmissionCapacity_ParamsDataView() {}

  MirrorServiceRemoter_EstimateTransmissionCapacity_ParamsDataView(
      internal::MirrorServiceRemoter_EstimateTransmissionCapacity_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::MirrorServiceRemoter_EstimateTransmissionCapacity_Params_Data* data_ = nullptr;
};

class MirrorServiceRemoter_EstimateTransmissionCapacity_ResponseParamsDataView {
 public:
  MirrorServiceRemoter_EstimateTransmissionCapacity_ResponseParamsDataView() {}

  MirrorServiceRemoter_EstimateTransmissionCapacity_ResponseParamsDataView(
      internal::MirrorServiceRemoter_EstimateTransmissionCapacity_ResponseParams_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  double rate() const {
    return data_->rate;
  }
 private:
  internal::MirrorServiceRemoter_EstimateTransmissionCapacity_ResponseParams_Data* data_ = nullptr;
};

class MirrorServiceRemotingSource_OnSinkAvailable_ParamsDataView {
 public:
  MirrorServiceRemotingSource_OnSinkAvailable_ParamsDataView() {}

  MirrorServiceRemotingSource_OnSinkAvailable_ParamsDataView(
      internal::MirrorServiceRemotingSource_OnSinkAvailable_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetMetadataDataView(
      ::media::mojom::RemotingSinkMetadataDataView* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadMetadata(UserType* output) {
    auto* pointer = data_->metadata.Get();
    return mojo::internal::Deserialize<::media::mojom::RemotingSinkMetadataDataView>(
        pointer, output, context_);
  }
 private:
  internal::MirrorServiceRemotingSource_OnSinkAvailable_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class MirrorServiceRemotingSource_OnMessageFromSink_ParamsDataView {
 public:
  MirrorServiceRemotingSource_OnMessageFromSink_ParamsDataView() {}

  MirrorServiceRemotingSource_OnMessageFromSink_ParamsDataView(
      internal::MirrorServiceRemotingSource_OnMessageFromSink_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data), context_(context) {}

  bool is_null() const { return !data_; }
  inline void GetMessageDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadMessage(UserType* output) {
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, context_);
  }
 private:
  internal::MirrorServiceRemotingSource_OnMessageFromSink_Params_Data* data_ = nullptr;
  mojo::internal::SerializationContext* context_ = nullptr;
};

class MirrorServiceRemotingSource_OnStopped_ParamsDataView {
 public:
  MirrorServiceRemotingSource_OnStopped_ParamsDataView() {}

  MirrorServiceRemotingSource_OnStopped_ParamsDataView(
      internal::MirrorServiceRemotingSource_OnStopped_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  WARN_UNUSED_RESULT bool ReadReason(UserType* output) const {
    auto data_value = data_->reason;
    return mojo::internal::Deserialize<::media::mojom::RemotingStopReason>(
        data_value, output);
  }

  ::media::mojom::RemotingStopReason reason() const {
    return static_cast<::media::mojom::RemotingStopReason>(data_->reason);
  }
 private:
  internal::MirrorServiceRemotingSource_OnStopped_Params_Data* data_ = nullptr;
};

class MirrorServiceRemotingSource_OnError_ParamsDataView {
 public:
  MirrorServiceRemotingSource_OnError_ParamsDataView() {}

  MirrorServiceRemotingSource_OnError_ParamsDataView(
      internal::MirrorServiceRemotingSource_OnError_Params_Data* data,
      mojo::internal::SerializationContext* context)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::MirrorServiceRemotingSource_OnError_Params_Data* data_ = nullptr;
};










inline void MirrorServiceRemoter_SendMessageToSink_ParamsDataView::GetMessageDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->message.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, context_);
}






inline void MirrorServiceRemotingSource_OnSinkAvailable_ParamsDataView::GetMetadataDataView(
    ::media::mojom::RemotingSinkMetadataDataView* output) {
  auto pointer = data_->metadata.Get();
  *output = ::media::mojom::RemotingSinkMetadataDataView(pointer, context_);
}


inline void MirrorServiceRemotingSource_OnMessageFromSink_ParamsDataView::GetMessageDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->message.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, context_);
}





}  // namespace mojom
}  // namespace media

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // MEDIA_MOJO_MOJOM_MIRROR_SERVICE_REMOTING_MOJOM_PARAMS_DATA_H_
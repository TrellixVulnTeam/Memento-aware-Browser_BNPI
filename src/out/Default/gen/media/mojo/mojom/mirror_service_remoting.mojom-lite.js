// media/mojo/mojom/mirror_service_remoting.mojom-lite.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';


mojo.internal.exportModule('media.mojom');








/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.mojom.MirrorServiceRemoterPendingReceiver = class {
  /** @param {!MojoHandle} handle */
  constructor(handle) {
    /** @public {!MojoHandle} */
    this.handle = handle;
  }
};



/**
 * @export
 * @implements { media.mojom.MirrorServiceRemoterInterface }
 */
media.mojom.MirrorServiceRemoterRemote = class {
  /** @param {MojoHandle=} opt_handle */
  constructor(opt_handle) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.mojom.MirrorServiceRemoterPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.mojom.MirrorServiceRemoterPendingReceiver,
          opt_handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.mojom.MirrorServiceRemoterPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   */

  start() {
    this.proxy.sendMessage(
        712603106,
        media.mojom.MirrorServiceRemoter_Start_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   * @param { !boolean } hasAudio
   * @param { !boolean } hasVideo
   * @return {Promise<{
        audioStreamId: !number,
        videoStreamId: !number,
   *  }>}
   */

  startDataStreams(
      hasAudio,
      hasVideo) {
    return this.proxy.sendMessage(
        1190241568,
        media.mojom.MirrorServiceRemoter_StartDataStreams_ParamsSpec.$,
        media.mojom.MirrorServiceRemoter_StartDataStreams_ResponseParamsSpec.$,
        [
          hasAudio,
          hasVideo
        ]);
  }

  
  /**
   * @param { !media.mojom.RemotingStopReason } reason
   */

  stop(
      reason) {
    this.proxy.sendMessage(
        248874572,
        media.mojom.MirrorServiceRemoter_Stop_ParamsSpec.$,
        null,
        [
          reason
        ]);
  }

  
  /**
   * @param { !Array<!number> } message
   */

  sendMessageToSink(
      message) {
    this.proxy.sendMessage(
        1246021880,
        media.mojom.MirrorServiceRemoter_SendMessageToSink_ParamsSpec.$,
        null,
        [
          message
        ]);
  }

  
  /**
   * @return {Promise<{
        rate: !number,
   *  }>}
   */

  estimateTransmissionCapacity() {
    return this.proxy.sendMessage(
        1340837517,
        media.mojom.MirrorServiceRemoter_EstimateTransmissionCapacity_ParamsSpec.$,
        media.mojom.MirrorServiceRemoter_EstimateTransmissionCapacity_ResponseParamsSpec.$,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the MirrorServiceRemoter
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.mojom.MirrorServiceRemoterReceiver = class {
  /**
   * @param {!media.mojom.MirrorServiceRemoterInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.mojom.MirrorServiceRemoterRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.mojom.MirrorServiceRemoterRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.MirrorServiceRemoterRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        712603106,
        media.mojom.MirrorServiceRemoter_Start_ParamsSpec.$,
        null,
        impl.start.bind(impl));
    this.helper_internal_.registerHandler(
        1190241568,
        media.mojom.MirrorServiceRemoter_StartDataStreams_ParamsSpec.$,
        media.mojom.MirrorServiceRemoter_StartDataStreams_ResponseParamsSpec.$,
        impl.startDataStreams.bind(impl));
    this.helper_internal_.registerHandler(
        248874572,
        media.mojom.MirrorServiceRemoter_Stop_ParamsSpec.$,
        null,
        impl.stop.bind(impl));
    this.helper_internal_.registerHandler(
        1246021880,
        media.mojom.MirrorServiceRemoter_SendMessageToSink_ParamsSpec.$,
        null,
        impl.sendMessageToSink.bind(impl));
    this.helper_internal_.registerHandler(
        1340837517,
        media.mojom.MirrorServiceRemoter_EstimateTransmissionCapacity_ParamsSpec.$,
        media.mojom.MirrorServiceRemoter_EstimateTransmissionCapacity_ResponseParamsSpec.$,
        impl.estimateTransmissionCapacity.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.mojom.MirrorServiceRemoter = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.MirrorServiceRemoter";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.mojom.MirrorServiceRemoterRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.mojom.MirrorServiceRemoterRemote;
    Mojo.bindInterface(this.$interfaceName,
                       remote.$.bindNewPipeAndPassReceiver().handle);
    return remote;
  }
};


/**
 * An object which receives request messages for the MirrorServiceRemoter
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.mojom.MirrorServiceRemoterCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.mojom.MirrorServiceRemoterRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.MirrorServiceRemoterRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.start =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        712603106,
        media.mojom.MirrorServiceRemoter_Start_ParamsSpec.$,
        null,
        this.start.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.startDataStreams =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1190241568,
        media.mojom.MirrorServiceRemoter_StartDataStreams_ParamsSpec.$,
        media.mojom.MirrorServiceRemoter_StartDataStreams_ResponseParamsSpec.$,
        this.startDataStreams.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.stop =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        248874572,
        media.mojom.MirrorServiceRemoter_Stop_ParamsSpec.$,
        null,
        this.stop.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.sendMessageToSink =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1246021880,
        media.mojom.MirrorServiceRemoter_SendMessageToSink_ParamsSpec.$,
        null,
        this.sendMessageToSink.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.estimateTransmissionCapacity =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1340837517,
        media.mojom.MirrorServiceRemoter_EstimateTransmissionCapacity_ParamsSpec.$,
        media.mojom.MirrorServiceRemoter_EstimateTransmissionCapacity_ResponseParamsSpec.$,
        this.estimateTransmissionCapacity.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.mojom.MirrorServiceRemotingSourcePendingReceiver = class {
  /** @param {!MojoHandle} handle */
  constructor(handle) {
    /** @public {!MojoHandle} */
    this.handle = handle;
  }
};



/**
 * @export
 * @implements { media.mojom.MirrorServiceRemotingSourceInterface }
 */
media.mojom.MirrorServiceRemotingSourceRemote = class {
  /** @param {MojoHandle=} opt_handle */
  constructor(opt_handle) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.mojom.MirrorServiceRemotingSourcePendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.mojom.MirrorServiceRemotingSourcePendingReceiver,
          opt_handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.mojom.MirrorServiceRemotingSourcePendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !media.mojom.RemotingSinkMetadata } metadata
   */

  onSinkAvailable(
      metadata) {
    this.proxy.sendMessage(
        479575950,
        media.mojom.MirrorServiceRemotingSource_OnSinkAvailable_ParamsSpec.$,
        null,
        [
          metadata
        ]);
  }

  
  /**
   * @param { !Array<!number> } message
   */

  onMessageFromSink(
      message) {
    this.proxy.sendMessage(
        843170100,
        media.mojom.MirrorServiceRemotingSource_OnMessageFromSink_ParamsSpec.$,
        null,
        [
          message
        ]);
  }

  
  /**
   * @param { !media.mojom.RemotingStopReason } reason
   */

  onStopped(
      reason) {
    this.proxy.sendMessage(
        829105328,
        media.mojom.MirrorServiceRemotingSource_OnStopped_ParamsSpec.$,
        null,
        [
          reason
        ]);
  }

  
  /**
   */

  onError() {
    this.proxy.sendMessage(
        1207457099,
        media.mojom.MirrorServiceRemotingSource_OnError_ParamsSpec.$,
        null,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the MirrorServiceRemotingSource
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.mojom.MirrorServiceRemotingSourceReceiver = class {
  /**
   * @param {!media.mojom.MirrorServiceRemotingSourceInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.mojom.MirrorServiceRemotingSourceRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.mojom.MirrorServiceRemotingSourceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.MirrorServiceRemotingSourceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        479575950,
        media.mojom.MirrorServiceRemotingSource_OnSinkAvailable_ParamsSpec.$,
        null,
        impl.onSinkAvailable.bind(impl));
    this.helper_internal_.registerHandler(
        843170100,
        media.mojom.MirrorServiceRemotingSource_OnMessageFromSink_ParamsSpec.$,
        null,
        impl.onMessageFromSink.bind(impl));
    this.helper_internal_.registerHandler(
        829105328,
        media.mojom.MirrorServiceRemotingSource_OnStopped_ParamsSpec.$,
        null,
        impl.onStopped.bind(impl));
    this.helper_internal_.registerHandler(
        1207457099,
        media.mojom.MirrorServiceRemotingSource_OnError_ParamsSpec.$,
        null,
        impl.onError.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.mojom.MirrorServiceRemotingSource = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.MirrorServiceRemotingSource";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.mojom.MirrorServiceRemotingSourceRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.mojom.MirrorServiceRemotingSourceRemote;
    Mojo.bindInterface(this.$interfaceName,
                       remote.$.bindNewPipeAndPassReceiver().handle);
    return remote;
  }
};


/**
 * An object which receives request messages for the MirrorServiceRemotingSource
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.mojom.MirrorServiceRemotingSourceCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.mojom.MirrorServiceRemotingSourceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.MirrorServiceRemotingSourceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onSinkAvailable =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        479575950,
        media.mojom.MirrorServiceRemotingSource_OnSinkAvailable_ParamsSpec.$,
        null,
        this.onSinkAvailable.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onMessageFromSink =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        843170100,
        media.mojom.MirrorServiceRemotingSource_OnMessageFromSink_ParamsSpec.$,
        null,
        this.onMessageFromSink.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onStopped =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        829105328,
        media.mojom.MirrorServiceRemotingSource_OnStopped_ParamsSpec.$,
        null,
        this.onStopped.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onError =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1207457099,
        media.mojom.MirrorServiceRemotingSource_OnError_ParamsSpec.$,
        null,
        this.onError.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};



/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MirrorServiceRemoter_Start_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MirrorServiceRemoter_StartDataStreams_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MirrorServiceRemoter_StartDataStreams_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MirrorServiceRemoter_Stop_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MirrorServiceRemoter_SendMessageToSink_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MirrorServiceRemoter_EstimateTransmissionCapacity_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MirrorServiceRemoter_EstimateTransmissionCapacity_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MirrorServiceRemotingSource_OnSinkAvailable_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MirrorServiceRemotingSource_OnMessageFromSink_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MirrorServiceRemotingSource_OnStopped_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MirrorServiceRemotingSource_OnError_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    media.mojom.MirrorServiceRemoter_Start_ParamsSpec.$,
    'MirrorServiceRemoter_Start_Params',
    0,
    [
    ]);







mojo.internal.Struct(
    media.mojom.MirrorServiceRemoter_StartDataStreams_ParamsSpec.$,
    'MirrorServiceRemoter_StartDataStreams_Params',
    8,
    [
      mojo.internal.StructField(
        'hasAudio', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'hasVideo', 0,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ]);







mojo.internal.Struct(
    media.mojom.MirrorServiceRemoter_StartDataStreams_ResponseParamsSpec.$,
    'MirrorServiceRemoter_StartDataStreams_ResponseParams',
    8,
    [
      mojo.internal.StructField(
        'audioStreamId', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'videoStreamId', 4,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
    ]);







mojo.internal.Struct(
    media.mojom.MirrorServiceRemoter_Stop_ParamsSpec.$,
    'MirrorServiceRemoter_Stop_Params',
    8,
    [
      mojo.internal.StructField(
        'reason', 0,
        0,
        media.mojom.RemotingStopReasonSpec.$,
        0,
        false /* nullable */),
    ]);







mojo.internal.Struct(
    media.mojom.MirrorServiceRemoter_SendMessageToSink_ParamsSpec.$,
    'MirrorServiceRemoter_SendMessageToSink_Params',
    8,
    [
      mojo.internal.StructField(
        'message', 0,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */),
    ]);







mojo.internal.Struct(
    media.mojom.MirrorServiceRemoter_EstimateTransmissionCapacity_ParamsSpec.$,
    'MirrorServiceRemoter_EstimateTransmissionCapacity_Params',
    0,
    [
    ]);







mojo.internal.Struct(
    media.mojom.MirrorServiceRemoter_EstimateTransmissionCapacity_ResponseParamsSpec.$,
    'MirrorServiceRemoter_EstimateTransmissionCapacity_ResponseParams',
    8,
    [
      mojo.internal.StructField(
        'rate', 0,
        0,
        mojo.internal.Double,
        0,
        false /* nullable */),
    ]);







mojo.internal.Struct(
    media.mojom.MirrorServiceRemotingSource_OnSinkAvailable_ParamsSpec.$,
    'MirrorServiceRemotingSource_OnSinkAvailable_Params',
    8,
    [
      mojo.internal.StructField(
        'metadata', 0,
        0,
        media.mojom.RemotingSinkMetadataSpec.$,
        null,
        false /* nullable */),
    ]);







mojo.internal.Struct(
    media.mojom.MirrorServiceRemotingSource_OnMessageFromSink_ParamsSpec.$,
    'MirrorServiceRemotingSource_OnMessageFromSink_Params',
    8,
    [
      mojo.internal.StructField(
        'message', 0,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */),
    ]);







mojo.internal.Struct(
    media.mojom.MirrorServiceRemotingSource_OnStopped_ParamsSpec.$,
    'MirrorServiceRemotingSource_OnStopped_Params',
    8,
    [
      mojo.internal.StructField(
        'reason', 0,
        0,
        media.mojom.RemotingStopReasonSpec.$,
        0,
        false /* nullable */),
    ]);







mojo.internal.Struct(
    media.mojom.MirrorServiceRemotingSource_OnError_ParamsSpec.$,
    'MirrorServiceRemotingSource_OnError_Params',
    0,
    [
    ]);






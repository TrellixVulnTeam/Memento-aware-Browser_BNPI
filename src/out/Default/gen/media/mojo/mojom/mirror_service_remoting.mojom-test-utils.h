// media/mojo/mojom/mirror_service_remoting.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_MOJO_MOJOM_MIRROR_SERVICE_REMOTING_MOJOM_TEST_UTILS_H_
#define MEDIA_MOJO_MOJOM_MIRROR_SERVICE_REMOTING_MOJOM_TEST_UTILS_H_

#include "media/mojo/mojom/mirror_service_remoting.mojom.h"


namespace media {
namespace mojom {


class  MirrorServiceRemoterInterceptorForTesting : public MirrorServiceRemoter {
  virtual MirrorServiceRemoter* GetForwardingInterface() = 0;
  void Start() override;
  void StartDataStreams(bool has_audio, bool has_video, StartDataStreamsCallback callback) override;
  void Stop(::media::mojom::RemotingStopReason reason) override;
  void SendMessageToSink(const std::vector<uint8_t>& message) override;
  void EstimateTransmissionCapacity(EstimateTransmissionCapacityCallback callback) override;
};
class  MirrorServiceRemoterAsyncWaiter {
 public:
  explicit MirrorServiceRemoterAsyncWaiter(MirrorServiceRemoter* proxy);
  ~MirrorServiceRemoterAsyncWaiter();
  void StartDataStreams(
      bool has_audio, bool has_video, int32_t* out_audio_stream_id, int32_t* out_video_stream_id);
  void EstimateTransmissionCapacity(
      double* out_rate);

 private:
  MirrorServiceRemoter* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(MirrorServiceRemoterAsyncWaiter);
};


class  MirrorServiceRemotingSourceInterceptorForTesting : public MirrorServiceRemotingSource {
  virtual MirrorServiceRemotingSource* GetForwardingInterface() = 0;
  void OnSinkAvailable(::media::mojom::RemotingSinkMetadataPtr metadata) override;
  void OnMessageFromSink(const std::vector<uint8_t>& message) override;
  void OnStopped(::media::mojom::RemotingStopReason reason) override;
  void OnError() override;
};
class  MirrorServiceRemotingSourceAsyncWaiter {
 public:
  explicit MirrorServiceRemotingSourceAsyncWaiter(MirrorServiceRemotingSource* proxy);
  ~MirrorServiceRemotingSourceAsyncWaiter();

 private:
  MirrorServiceRemotingSource* const proxy_;

  DISALLOW_COPY_AND_ASSIGN(MirrorServiceRemotingSourceAsyncWaiter);
};




}  // namespace mojom
}  // namespace media

#endif  // MEDIA_MOJO_MOJOM_MIRROR_SERVICE_REMOTING_MOJOM_TEST_UTILS_H_
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raw_events.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_raw_5fevents_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_raw_5fevents_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_raw_5fevents_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_raw_5fevents_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace media {
namespace cast {
namespace proto {
class AggregatedFrameEvent;
class AggregatedFrameEventDefaultTypeInternal;
extern AggregatedFrameEventDefaultTypeInternal _AggregatedFrameEvent_default_instance_;
class AggregatedPacketEvent;
class AggregatedPacketEventDefaultTypeInternal;
extern AggregatedPacketEventDefaultTypeInternal _AggregatedPacketEvent_default_instance_;
class BasePacketEvent;
class BasePacketEventDefaultTypeInternal;
extern BasePacketEventDefaultTypeInternal _BasePacketEvent_default_instance_;
class GeneralDescription;
class GeneralDescriptionDefaultTypeInternal;
extern GeneralDescriptionDefaultTypeInternal _GeneralDescription_default_instance_;
class LogMetadata;
class LogMetadataDefaultTypeInternal;
extern LogMetadataDefaultTypeInternal _LogMetadata_default_instance_;
}  // namespace proto
}  // namespace cast
}  // namespace media
PROTOBUF_NAMESPACE_OPEN
template<> ::media::cast::proto::AggregatedFrameEvent* Arena::CreateMaybeMessage<::media::cast::proto::AggregatedFrameEvent>(Arena*);
template<> ::media::cast::proto::AggregatedPacketEvent* Arena::CreateMaybeMessage<::media::cast::proto::AggregatedPacketEvent>(Arena*);
template<> ::media::cast::proto::BasePacketEvent* Arena::CreateMaybeMessage<::media::cast::proto::BasePacketEvent>(Arena*);
template<> ::media::cast::proto::GeneralDescription* Arena::CreateMaybeMessage<::media::cast::proto::GeneralDescription>(Arena*);
template<> ::media::cast::proto::LogMetadata* Arena::CreateMaybeMessage<::media::cast::proto::LogMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace media {
namespace cast {
namespace proto {

enum EventType : int {
  UNKNOWN = 0,
  RTT_MS = 1,
  PACKET_LOSS = 2,
  JITTER_MS = 3,
  VIDEO_ACK_RECEIVED = 4,
  REMB_BITRATE = 5,
  AUDIO_ACK_SENT = 6,
  VIDEO_ACK_SENT = 7,
  AUDIO_FRAME_CAPTURE_END = 8,
  AUDIO_FRAME_CAPTURE_BEGIN = 9,
  AUDIO_FRAME_ENCODED = 10,
  AUDIO_PLAYOUT_DELAY = 11,
  AUDIO_FRAME_DECODED = 12,
  VIDEO_FRAME_CAPTURE_BEGIN = 13,
  VIDEO_FRAME_CAPTURE_END = 14,
  VIDEO_FRAME_SENT_TO_ENCODER = 15,
  VIDEO_FRAME_ENCODED = 16,
  VIDEO_FRAME_DECODED = 17,
  VIDEO_RENDER_DELAY = 18,
  AUDIO_PACKET_SENT_TO_NETWORK = 21,
  VIDEO_PACKET_SENT_TO_NETWORK = 22,
  AUDIO_PACKET_RETRANSMITTED = 23,
  VIDEO_PACKET_RETRANSMITTED = 24,
  AUDIO_PACKET_RECEIVED = 25,
  VIDEO_PACKET_RECEIVED = 26,
  DUPLICATE_AUDIO_PACKET_RECEIVED = 27,
  DUPLICATE_VIDEO_PACKET_RECEIVED = 28,
  FRAME_CAPTURE_BEGIN = 29,
  FRAME_CAPTURE_END = 30,
  FRAME_ENCODED = 31,
  FRAME_ACK_RECEIVED = 32,
  FRAME_ACK_SENT = 33,
  FRAME_DECODED = 34,
  FRAME_PLAYOUT = 35,
  PACKET_SENT_TO_NETWORK = 36,
  PACKET_RETRANSMITTED = 37,
  PACKET_RECEIVED = 38,
  PACKET_RTX_REJECTED = 39
};
bool EventType_IsValid(int value);
constexpr EventType EventType_MIN = UNKNOWN;
constexpr EventType EventType_MAX = PACKET_RTX_REJECTED;
constexpr int EventType_ARRAYSIZE = EventType_MAX + 1;

const std::string& EventType_Name(EventType value);
template<typename T>
inline const std::string& EventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EventType_Name.");
  return EventType_Name(static_cast<EventType>(enum_t_value));
}
bool EventType_Parse(
    const std::string& name, EventType* value);
// ===================================================================

class GeneralDescription :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:media.cast.proto.GeneralDescription) */ {
 public:
  GeneralDescription();
  virtual ~GeneralDescription();

  GeneralDescription(const GeneralDescription& from);
  GeneralDescription(GeneralDescription&& from) noexcept
    : GeneralDescription() {
    *this = ::std::move(from);
  }

  inline GeneralDescription& operator=(const GeneralDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeneralDescription& operator=(GeneralDescription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const GeneralDescription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeneralDescription* internal_default_instance() {
    return reinterpret_cast<const GeneralDescription*>(
               &_GeneralDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GeneralDescription& a, GeneralDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(GeneralDescription* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeneralDescription* New() const final {
    return CreateMaybeMessage<GeneralDescription>(nullptr);
  }

  GeneralDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeneralDescription>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const GeneralDescription& from);
  void MergeFrom(const GeneralDescription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GeneralDescription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media.cast.proto.GeneralDescription";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductFieldNumber = 1,
    kProductVersionFieldNumber = 2,
    kOsFieldNumber = 3,
  };
  // optional string product = 1;
  bool has_product() const;
  void clear_product();
  const std::string& product() const;
  void set_product(const std::string& value);
  void set_product(std::string&& value);
  void set_product(const char* value);
  void set_product(const char* value, size_t size);
  std::string* mutable_product();
  std::string* release_product();
  void set_allocated_product(std::string* product);

  // optional string product_version = 2;
  bool has_product_version() const;
  void clear_product_version();
  const std::string& product_version() const;
  void set_product_version(const std::string& value);
  void set_product_version(std::string&& value);
  void set_product_version(const char* value);
  void set_product_version(const char* value, size_t size);
  std::string* mutable_product_version();
  std::string* release_product_version();
  void set_allocated_product_version(std::string* product_version);

  // optional string os = 3;
  bool has_os() const;
  void clear_os();
  const std::string& os() const;
  void set_os(const std::string& value);
  void set_os(std::string&& value);
  void set_os(const char* value);
  void set_os(const char* value, size_t size);
  std::string* mutable_os();
  std::string* release_os();
  void set_allocated_os(std::string* os);

  // @@protoc_insertion_point(class_scope:media.cast.proto.GeneralDescription)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr os_;
  friend struct ::TableStruct_raw_5fevents_2eproto;
};
// -------------------------------------------------------------------

class LogMetadata :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:media.cast.proto.LogMetadata) */ {
 public:
  LogMetadata();
  virtual ~LogMetadata();

  LogMetadata(const LogMetadata& from);
  LogMetadata(LogMetadata&& from) noexcept
    : LogMetadata() {
    *this = ::std::move(from);
  }

  inline LogMetadata& operator=(const LogMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogMetadata& operator=(LogMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LogMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogMetadata* internal_default_instance() {
    return reinterpret_cast<const LogMetadata*>(
               &_LogMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LogMetadata& a, LogMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(LogMetadata* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogMetadata* New() const final {
    return CreateMaybeMessage<LogMetadata>(nullptr);
  }

  LogMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LogMetadata& from);
  void MergeFrom(const LogMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media.cast.proto.LogMetadata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraDataFieldNumber = 6,
    kGeneralDescriptionFieldNumber = 7,
    kIsAudioFieldNumber = 1,
    kFirstRtpTimestampFieldNumber = 2,
    kNumFrameEventsFieldNumber = 3,
    kNumPacketEventsFieldNumber = 4,
    kReferenceTimestampMsAtUnixEpochFieldNumber = 5,
  };
  // optional string extra_data = 6;
  bool has_extra_data() const;
  void clear_extra_data();
  const std::string& extra_data() const;
  void set_extra_data(const std::string& value);
  void set_extra_data(std::string&& value);
  void set_extra_data(const char* value);
  void set_extra_data(const char* value, size_t size);
  std::string* mutable_extra_data();
  std::string* release_extra_data();
  void set_allocated_extra_data(std::string* extra_data);

  // optional .media.cast.proto.GeneralDescription general_description = 7;
  bool has_general_description() const;
  void clear_general_description();
  const ::media::cast::proto::GeneralDescription& general_description() const;
  ::media::cast::proto::GeneralDescription* release_general_description();
  ::media::cast::proto::GeneralDescription* mutable_general_description();
  void set_allocated_general_description(::media::cast::proto::GeneralDescription* general_description);

  // optional bool is_audio = 1;
  bool has_is_audio() const;
  void clear_is_audio();
  bool is_audio() const;
  void set_is_audio(bool value);

  // optional uint32 first_rtp_timestamp = 2;
  bool has_first_rtp_timestamp() const;
  void clear_first_rtp_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 first_rtp_timestamp() const;
  void set_first_rtp_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 num_frame_events = 3;
  bool has_num_frame_events() const;
  void clear_num_frame_events();
  ::PROTOBUF_NAMESPACE_ID::int32 num_frame_events() const;
  void set_num_frame_events(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 num_packet_events = 4;
  bool has_num_packet_events() const;
  void clear_num_packet_events();
  ::PROTOBUF_NAMESPACE_ID::int32 num_packet_events() const;
  void set_num_packet_events(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 reference_timestamp_ms_at_unix_epoch = 5;
  bool has_reference_timestamp_ms_at_unix_epoch() const;
  void clear_reference_timestamp_ms_at_unix_epoch();
  ::PROTOBUF_NAMESPACE_ID::int64 reference_timestamp_ms_at_unix_epoch() const;
  void set_reference_timestamp_ms_at_unix_epoch(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:media.cast.proto.LogMetadata)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_data_;
  ::media::cast::proto::GeneralDescription* general_description_;
  bool is_audio_;
  ::PROTOBUF_NAMESPACE_ID::uint32 first_rtp_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_frame_events_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_packet_events_;
  ::PROTOBUF_NAMESPACE_ID::int64 reference_timestamp_ms_at_unix_epoch_;
  friend struct ::TableStruct_raw_5fevents_2eproto;
};
// -------------------------------------------------------------------

class AggregatedFrameEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:media.cast.proto.AggregatedFrameEvent) */ {
 public:
  AggregatedFrameEvent();
  virtual ~AggregatedFrameEvent();

  AggregatedFrameEvent(const AggregatedFrameEvent& from);
  AggregatedFrameEvent(AggregatedFrameEvent&& from) noexcept
    : AggregatedFrameEvent() {
    *this = ::std::move(from);
  }

  inline AggregatedFrameEvent& operator=(const AggregatedFrameEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggregatedFrameEvent& operator=(AggregatedFrameEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AggregatedFrameEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AggregatedFrameEvent* internal_default_instance() {
    return reinterpret_cast<const AggregatedFrameEvent*>(
               &_AggregatedFrameEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AggregatedFrameEvent& a, AggregatedFrameEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(AggregatedFrameEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AggregatedFrameEvent* New() const final {
    return CreateMaybeMessage<AggregatedFrameEvent>(nullptr);
  }

  AggregatedFrameEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AggregatedFrameEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AggregatedFrameEvent& from);
  void MergeFrom(const AggregatedFrameEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AggregatedFrameEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media.cast.proto.AggregatedFrameEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventTypeFieldNumber = 2,
    kEventTimestampMsFieldNumber = 3,
    kRelativeRtpTimestampFieldNumber = 1,
    kEncodedFrameSizeFieldNumber = 4,
    kDelayMillisFieldNumber = 5,
    kKeyFrameFieldNumber = 6,
    kTargetBitrateFieldNumber = 7,
    kWidthFieldNumber = 8,
    kHeightFieldNumber = 9,
    kEncoderCpuPercentUtilizedFieldNumber = 10,
    kIdealizedBitratePercentUtilizedFieldNumber = 11,
  };
  // repeated .media.cast.proto.EventType event_type = 2 [packed = true];
  int event_type_size() const;
  void clear_event_type();
  ::media::cast::proto::EventType event_type(int index) const;
  void set_event_type(int index, ::media::cast::proto::EventType value);
  void add_event_type(::media::cast::proto::EventType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& event_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_event_type();

  // repeated int64 event_timestamp_ms = 3 [packed = true];
  int event_timestamp_ms_size() const;
  void clear_event_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 event_timestamp_ms(int index) const;
  void set_event_timestamp_ms(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_event_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      event_timestamp_ms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_event_timestamp_ms();

  // optional uint32 relative_rtp_timestamp = 1;
  bool has_relative_rtp_timestamp() const;
  void clear_relative_rtp_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 relative_rtp_timestamp() const;
  void set_relative_rtp_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional int32 encoded_frame_size = 4;
  bool has_encoded_frame_size() const;
  void clear_encoded_frame_size();
  ::PROTOBUF_NAMESPACE_ID::int32 encoded_frame_size() const;
  void set_encoded_frame_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int64 delay_millis = 5;
  bool has_delay_millis() const;
  void clear_delay_millis();
  ::PROTOBUF_NAMESPACE_ID::int64 delay_millis() const;
  void set_delay_millis(::PROTOBUF_NAMESPACE_ID::int64 value);

  // optional bool key_frame = 6;
  bool has_key_frame() const;
  void clear_key_frame();
  bool key_frame() const;
  void set_key_frame(bool value);

  // optional int32 target_bitrate = 7;
  bool has_target_bitrate() const;
  void clear_target_bitrate();
  ::PROTOBUF_NAMESPACE_ID::int32 target_bitrate() const;
  void set_target_bitrate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 width = 8;
  bool has_width() const;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 height = 9;
  bool has_height() const;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 encoder_cpu_percent_utilized = 10;
  bool has_encoder_cpu_percent_utilized() const;
  void clear_encoder_cpu_percent_utilized();
  ::PROTOBUF_NAMESPACE_ID::int32 encoder_cpu_percent_utilized() const;
  void set_encoder_cpu_percent_utilized(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 idealized_bitrate_percent_utilized = 11;
  bool has_idealized_bitrate_percent_utilized() const;
  void clear_idealized_bitrate_percent_utilized();
  ::PROTOBUF_NAMESPACE_ID::int32 idealized_bitrate_percent_utilized() const;
  void set_idealized_bitrate_percent_utilized(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:media.cast.proto.AggregatedFrameEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> event_type_;
  mutable std::atomic<int> _event_type_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > event_timestamp_ms_;
  mutable std::atomic<int> _event_timestamp_ms_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 relative_rtp_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 encoded_frame_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 delay_millis_;
  bool key_frame_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_bitrate_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 encoder_cpu_percent_utilized_;
  ::PROTOBUF_NAMESPACE_ID::int32 idealized_bitrate_percent_utilized_;
  friend struct ::TableStruct_raw_5fevents_2eproto;
};
// -------------------------------------------------------------------

class BasePacketEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:media.cast.proto.BasePacketEvent) */ {
 public:
  BasePacketEvent();
  virtual ~BasePacketEvent();

  BasePacketEvent(const BasePacketEvent& from);
  BasePacketEvent(BasePacketEvent&& from) noexcept
    : BasePacketEvent() {
    *this = ::std::move(from);
  }

  inline BasePacketEvent& operator=(const BasePacketEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BasePacketEvent& operator=(BasePacketEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const BasePacketEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BasePacketEvent* internal_default_instance() {
    return reinterpret_cast<const BasePacketEvent*>(
               &_BasePacketEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BasePacketEvent& a, BasePacketEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(BasePacketEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BasePacketEvent* New() const final {
    return CreateMaybeMessage<BasePacketEvent>(nullptr);
  }

  BasePacketEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BasePacketEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const BasePacketEvent& from);
  void MergeFrom(const BasePacketEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BasePacketEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media.cast.proto.BasePacketEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventTypeFieldNumber = 2,
    kEventTimestampMsFieldNumber = 3,
    kPacketIdFieldNumber = 1,
    kSizeFieldNumber = 4,
  };
  // repeated .media.cast.proto.EventType event_type = 2 [packed = true];
  int event_type_size() const;
  void clear_event_type();
  ::media::cast::proto::EventType event_type(int index) const;
  void set_event_type(int index, ::media::cast::proto::EventType value);
  void add_event_type(::media::cast::proto::EventType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& event_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_event_type();

  // repeated int64 event_timestamp_ms = 3 [packed = true];
  int event_timestamp_ms_size() const;
  void clear_event_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 event_timestamp_ms(int index) const;
  void set_event_timestamp_ms(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_event_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      event_timestamp_ms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_event_timestamp_ms();

  // optional int32 packet_id = 1;
  bool has_packet_id() const;
  void clear_packet_id();
  ::PROTOBUF_NAMESPACE_ID::int32 packet_id() const;
  void set_packet_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 size = 4;
  bool has_size() const;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:media.cast.proto.BasePacketEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> event_type_;
  mutable std::atomic<int> _event_type_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > event_timestamp_ms_;
  mutable std::atomic<int> _event_timestamp_ms_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 packet_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  friend struct ::TableStruct_raw_5fevents_2eproto;
};
// -------------------------------------------------------------------

class AggregatedPacketEvent :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:media.cast.proto.AggregatedPacketEvent) */ {
 public:
  AggregatedPacketEvent();
  virtual ~AggregatedPacketEvent();

  AggregatedPacketEvent(const AggregatedPacketEvent& from);
  AggregatedPacketEvent(AggregatedPacketEvent&& from) noexcept
    : AggregatedPacketEvent() {
    *this = ::std::move(from);
  }

  inline AggregatedPacketEvent& operator=(const AggregatedPacketEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggregatedPacketEvent& operator=(AggregatedPacketEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AggregatedPacketEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AggregatedPacketEvent* internal_default_instance() {
    return reinterpret_cast<const AggregatedPacketEvent*>(
               &_AggregatedPacketEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AggregatedPacketEvent& a, AggregatedPacketEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(AggregatedPacketEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AggregatedPacketEvent* New() const final {
    return CreateMaybeMessage<AggregatedPacketEvent>(nullptr);
  }

  AggregatedPacketEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AggregatedPacketEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const AggregatedPacketEvent& from);
  void MergeFrom(const AggregatedPacketEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AggregatedPacketEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media.cast.proto.AggregatedPacketEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBasePacketEventFieldNumber = 2,
    kRelativeRtpTimestampFieldNumber = 1,
  };
  // repeated .media.cast.proto.BasePacketEvent base_packet_event = 2;
  int base_packet_event_size() const;
  void clear_base_packet_event();
  ::media::cast::proto::BasePacketEvent* mutable_base_packet_event(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media::cast::proto::BasePacketEvent >*
      mutable_base_packet_event();
  const ::media::cast::proto::BasePacketEvent& base_packet_event(int index) const;
  ::media::cast::proto::BasePacketEvent* add_base_packet_event();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media::cast::proto::BasePacketEvent >&
      base_packet_event() const;

  // optional uint32 relative_rtp_timestamp = 1;
  bool has_relative_rtp_timestamp() const;
  void clear_relative_rtp_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 relative_rtp_timestamp() const;
  void set_relative_rtp_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:media.cast.proto.AggregatedPacketEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media::cast::proto::BasePacketEvent > base_packet_event_;
  ::PROTOBUF_NAMESPACE_ID::uint32 relative_rtp_timestamp_;
  friend struct ::TableStruct_raw_5fevents_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GeneralDescription

// optional string product = 1;
inline bool GeneralDescription::has_product() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GeneralDescription::clear_product() {
  product_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GeneralDescription::product() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.GeneralDescription.product)
  return product_.GetNoArena();
}
inline void GeneralDescription::set_product(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  product_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:media.cast.proto.GeneralDescription.product)
}
inline void GeneralDescription::set_product(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  product_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:media.cast.proto.GeneralDescription.product)
}
inline void GeneralDescription::set_product(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  product_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:media.cast.proto.GeneralDescription.product)
}
inline void GeneralDescription::set_product(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  product_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:media.cast.proto.GeneralDescription.product)
}
inline std::string* GeneralDescription::mutable_product() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:media.cast.proto.GeneralDescription.product)
  return product_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GeneralDescription::release_product() {
  // @@protoc_insertion_point(field_release:media.cast.proto.GeneralDescription.product)
  if (!has_product()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return product_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GeneralDescription::set_allocated_product(std::string* product) {
  if (product != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  product_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product);
  // @@protoc_insertion_point(field_set_allocated:media.cast.proto.GeneralDescription.product)
}

// optional string product_version = 2;
inline bool GeneralDescription::has_product_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GeneralDescription::clear_product_version() {
  product_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GeneralDescription::product_version() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.GeneralDescription.product_version)
  return product_version_.GetNoArena();
}
inline void GeneralDescription::set_product_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  product_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:media.cast.proto.GeneralDescription.product_version)
}
inline void GeneralDescription::set_product_version(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  product_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:media.cast.proto.GeneralDescription.product_version)
}
inline void GeneralDescription::set_product_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  product_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:media.cast.proto.GeneralDescription.product_version)
}
inline void GeneralDescription::set_product_version(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  product_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:media.cast.proto.GeneralDescription.product_version)
}
inline std::string* GeneralDescription::mutable_product_version() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:media.cast.proto.GeneralDescription.product_version)
  return product_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GeneralDescription::release_product_version() {
  // @@protoc_insertion_point(field_release:media.cast.proto.GeneralDescription.product_version)
  if (!has_product_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return product_version_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GeneralDescription::set_allocated_product_version(std::string* product_version) {
  if (product_version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  product_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_version);
  // @@protoc_insertion_point(field_set_allocated:media.cast.proto.GeneralDescription.product_version)
}

// optional string os = 3;
inline bool GeneralDescription::has_os() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GeneralDescription::clear_os() {
  os_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& GeneralDescription::os() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.GeneralDescription.os)
  return os_.GetNoArena();
}
inline void GeneralDescription::set_os(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  os_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:media.cast.proto.GeneralDescription.os)
}
inline void GeneralDescription::set_os(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  os_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:media.cast.proto.GeneralDescription.os)
}
inline void GeneralDescription::set_os(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  os_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:media.cast.proto.GeneralDescription.os)
}
inline void GeneralDescription::set_os(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  os_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:media.cast.proto.GeneralDescription.os)
}
inline std::string* GeneralDescription::mutable_os() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:media.cast.proto.GeneralDescription.os)
  return os_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GeneralDescription::release_os() {
  // @@protoc_insertion_point(field_release:media.cast.proto.GeneralDescription.os)
  if (!has_os()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return os_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GeneralDescription::set_allocated_os(std::string* os) {
  if (os != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  os_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), os);
  // @@protoc_insertion_point(field_set_allocated:media.cast.proto.GeneralDescription.os)
}

// -------------------------------------------------------------------

// LogMetadata

// optional bool is_audio = 1;
inline bool LogMetadata::has_is_audio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogMetadata::clear_is_audio() {
  is_audio_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool LogMetadata::is_audio() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.LogMetadata.is_audio)
  return is_audio_;
}
inline void LogMetadata::set_is_audio(bool value) {
  _has_bits_[0] |= 0x00000004u;
  is_audio_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.LogMetadata.is_audio)
}

// optional uint32 first_rtp_timestamp = 2;
inline bool LogMetadata::has_first_rtp_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogMetadata::clear_first_rtp_timestamp() {
  first_rtp_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogMetadata::first_rtp_timestamp() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.LogMetadata.first_rtp_timestamp)
  return first_rtp_timestamp_;
}
inline void LogMetadata::set_first_rtp_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  first_rtp_timestamp_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.LogMetadata.first_rtp_timestamp)
}

// optional int32 num_frame_events = 3;
inline bool LogMetadata::has_num_frame_events() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogMetadata::clear_num_frame_events() {
  num_frame_events_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogMetadata::num_frame_events() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.LogMetadata.num_frame_events)
  return num_frame_events_;
}
inline void LogMetadata::set_num_frame_events(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  num_frame_events_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.LogMetadata.num_frame_events)
}

// optional int32 num_packet_events = 4;
inline bool LogMetadata::has_num_packet_events() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogMetadata::clear_num_packet_events() {
  num_packet_events_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogMetadata::num_packet_events() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.LogMetadata.num_packet_events)
  return num_packet_events_;
}
inline void LogMetadata::set_num_packet_events(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  num_packet_events_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.LogMetadata.num_packet_events)
}

// optional int64 reference_timestamp_ms_at_unix_epoch = 5;
inline bool LogMetadata::has_reference_timestamp_ms_at_unix_epoch() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogMetadata::clear_reference_timestamp_ms_at_unix_epoch() {
  reference_timestamp_ms_at_unix_epoch_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LogMetadata::reference_timestamp_ms_at_unix_epoch() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.LogMetadata.reference_timestamp_ms_at_unix_epoch)
  return reference_timestamp_ms_at_unix_epoch_;
}
inline void LogMetadata::set_reference_timestamp_ms_at_unix_epoch(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  reference_timestamp_ms_at_unix_epoch_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.LogMetadata.reference_timestamp_ms_at_unix_epoch)
}

// optional string extra_data = 6;
inline bool LogMetadata::has_extra_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogMetadata::clear_extra_data() {
  extra_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LogMetadata::extra_data() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.LogMetadata.extra_data)
  return extra_data_.GetNoArena();
}
inline void LogMetadata::set_extra_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  extra_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:media.cast.proto.LogMetadata.extra_data)
}
inline void LogMetadata::set_extra_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  extra_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:media.cast.proto.LogMetadata.extra_data)
}
inline void LogMetadata::set_extra_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  extra_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:media.cast.proto.LogMetadata.extra_data)
}
inline void LogMetadata::set_extra_data(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  extra_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:media.cast.proto.LogMetadata.extra_data)
}
inline std::string* LogMetadata::mutable_extra_data() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:media.cast.proto.LogMetadata.extra_data)
  return extra_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogMetadata::release_extra_data() {
  // @@protoc_insertion_point(field_release:media.cast.proto.LogMetadata.extra_data)
  if (!has_extra_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return extra_data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogMetadata::set_allocated_extra_data(std::string* extra_data) {
  if (extra_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  extra_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extra_data);
  // @@protoc_insertion_point(field_set_allocated:media.cast.proto.LogMetadata.extra_data)
}

// optional .media.cast.proto.GeneralDescription general_description = 7;
inline bool LogMetadata::has_general_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogMetadata::clear_general_description() {
  if (general_description_ != nullptr) general_description_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::media::cast::proto::GeneralDescription& LogMetadata::general_description() const {
  const ::media::cast::proto::GeneralDescription* p = general_description_;
  // @@protoc_insertion_point(field_get:media.cast.proto.LogMetadata.general_description)
  return p != nullptr ? *p : *reinterpret_cast<const ::media::cast::proto::GeneralDescription*>(
      &::media::cast::proto::_GeneralDescription_default_instance_);
}
inline ::media::cast::proto::GeneralDescription* LogMetadata::release_general_description() {
  // @@protoc_insertion_point(field_release:media.cast.proto.LogMetadata.general_description)
  _has_bits_[0] &= ~0x00000002u;
  ::media::cast::proto::GeneralDescription* temp = general_description_;
  general_description_ = nullptr;
  return temp;
}
inline ::media::cast::proto::GeneralDescription* LogMetadata::mutable_general_description() {
  _has_bits_[0] |= 0x00000002u;
  if (general_description_ == nullptr) {
    auto* p = CreateMaybeMessage<::media::cast::proto::GeneralDescription>(GetArenaNoVirtual());
    general_description_ = p;
  }
  // @@protoc_insertion_point(field_mutable:media.cast.proto.LogMetadata.general_description)
  return general_description_;
}
inline void LogMetadata::set_allocated_general_description(::media::cast::proto::GeneralDescription* general_description) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete general_description_;
  }
  if (general_description) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      general_description = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, general_description, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  general_description_ = general_description;
  // @@protoc_insertion_point(field_set_allocated:media.cast.proto.LogMetadata.general_description)
}

// -------------------------------------------------------------------

// AggregatedFrameEvent

// optional uint32 relative_rtp_timestamp = 1;
inline bool AggregatedFrameEvent::has_relative_rtp_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AggregatedFrameEvent::clear_relative_rtp_timestamp() {
  relative_rtp_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AggregatedFrameEvent::relative_rtp_timestamp() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.AggregatedFrameEvent.relative_rtp_timestamp)
  return relative_rtp_timestamp_;
}
inline void AggregatedFrameEvent::set_relative_rtp_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  relative_rtp_timestamp_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.AggregatedFrameEvent.relative_rtp_timestamp)
}

// repeated .media.cast.proto.EventType event_type = 2 [packed = true];
inline int AggregatedFrameEvent::event_type_size() const {
  return event_type_.size();
}
inline void AggregatedFrameEvent::clear_event_type() {
  event_type_.Clear();
}
inline ::media::cast::proto::EventType AggregatedFrameEvent::event_type(int index) const {
  // @@protoc_insertion_point(field_get:media.cast.proto.AggregatedFrameEvent.event_type)
  return static_cast< ::media::cast::proto::EventType >(event_type_.Get(index));
}
inline void AggregatedFrameEvent::set_event_type(int index, ::media::cast::proto::EventType value) {
  assert(::media::cast::proto::EventType_IsValid(value));
  event_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:media.cast.proto.AggregatedFrameEvent.event_type)
}
inline void AggregatedFrameEvent::add_event_type(::media::cast::proto::EventType value) {
  assert(::media::cast::proto::EventType_IsValid(value));
  event_type_.Add(value);
  // @@protoc_insertion_point(field_add:media.cast.proto.AggregatedFrameEvent.event_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
AggregatedFrameEvent::event_type() const {
  // @@protoc_insertion_point(field_list:media.cast.proto.AggregatedFrameEvent.event_type)
  return event_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
AggregatedFrameEvent::mutable_event_type() {
  // @@protoc_insertion_point(field_mutable_list:media.cast.proto.AggregatedFrameEvent.event_type)
  return &event_type_;
}

// repeated int64 event_timestamp_ms = 3 [packed = true];
inline int AggregatedFrameEvent::event_timestamp_ms_size() const {
  return event_timestamp_ms_.size();
}
inline void AggregatedFrameEvent::clear_event_timestamp_ms() {
  event_timestamp_ms_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AggregatedFrameEvent::event_timestamp_ms(int index) const {
  // @@protoc_insertion_point(field_get:media.cast.proto.AggregatedFrameEvent.event_timestamp_ms)
  return event_timestamp_ms_.Get(index);
}
inline void AggregatedFrameEvent::set_event_timestamp_ms(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  event_timestamp_ms_.Set(index, value);
  // @@protoc_insertion_point(field_set:media.cast.proto.AggregatedFrameEvent.event_timestamp_ms)
}
inline void AggregatedFrameEvent::add_event_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  event_timestamp_ms_.Add(value);
  // @@protoc_insertion_point(field_add:media.cast.proto.AggregatedFrameEvent.event_timestamp_ms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
AggregatedFrameEvent::event_timestamp_ms() const {
  // @@protoc_insertion_point(field_list:media.cast.proto.AggregatedFrameEvent.event_timestamp_ms)
  return event_timestamp_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
AggregatedFrameEvent::mutable_event_timestamp_ms() {
  // @@protoc_insertion_point(field_mutable_list:media.cast.proto.AggregatedFrameEvent.event_timestamp_ms)
  return &event_timestamp_ms_;
}

// optional int32 encoded_frame_size = 4;
inline bool AggregatedFrameEvent::has_encoded_frame_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AggregatedFrameEvent::clear_encoded_frame_size() {
  encoded_frame_size_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AggregatedFrameEvent::encoded_frame_size() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.AggregatedFrameEvent.encoded_frame_size)
  return encoded_frame_size_;
}
inline void AggregatedFrameEvent::set_encoded_frame_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  encoded_frame_size_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.AggregatedFrameEvent.encoded_frame_size)
}

// optional int64 delay_millis = 5;
inline bool AggregatedFrameEvent::has_delay_millis() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AggregatedFrameEvent::clear_delay_millis() {
  delay_millis_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AggregatedFrameEvent::delay_millis() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.AggregatedFrameEvent.delay_millis)
  return delay_millis_;
}
inline void AggregatedFrameEvent::set_delay_millis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  delay_millis_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.AggregatedFrameEvent.delay_millis)
}

// optional bool key_frame = 6;
inline bool AggregatedFrameEvent::has_key_frame() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AggregatedFrameEvent::clear_key_frame() {
  key_frame_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool AggregatedFrameEvent::key_frame() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.AggregatedFrameEvent.key_frame)
  return key_frame_;
}
inline void AggregatedFrameEvent::set_key_frame(bool value) {
  _has_bits_[0] |= 0x00000008u;
  key_frame_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.AggregatedFrameEvent.key_frame)
}

// optional int32 target_bitrate = 7;
inline bool AggregatedFrameEvent::has_target_bitrate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AggregatedFrameEvent::clear_target_bitrate() {
  target_bitrate_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AggregatedFrameEvent::target_bitrate() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.AggregatedFrameEvent.target_bitrate)
  return target_bitrate_;
}
inline void AggregatedFrameEvent::set_target_bitrate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  target_bitrate_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.AggregatedFrameEvent.target_bitrate)
}

// optional int32 width = 8;
inline bool AggregatedFrameEvent::has_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AggregatedFrameEvent::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AggregatedFrameEvent::width() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.AggregatedFrameEvent.width)
  return width_;
}
inline void AggregatedFrameEvent::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  width_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.AggregatedFrameEvent.width)
}

// optional int32 height = 9;
inline bool AggregatedFrameEvent::has_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AggregatedFrameEvent::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AggregatedFrameEvent::height() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.AggregatedFrameEvent.height)
  return height_;
}
inline void AggregatedFrameEvent::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  height_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.AggregatedFrameEvent.height)
}

// optional int32 encoder_cpu_percent_utilized = 10;
inline bool AggregatedFrameEvent::has_encoder_cpu_percent_utilized() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AggregatedFrameEvent::clear_encoder_cpu_percent_utilized() {
  encoder_cpu_percent_utilized_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AggregatedFrameEvent::encoder_cpu_percent_utilized() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.AggregatedFrameEvent.encoder_cpu_percent_utilized)
  return encoder_cpu_percent_utilized_;
}
inline void AggregatedFrameEvent::set_encoder_cpu_percent_utilized(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  encoder_cpu_percent_utilized_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.AggregatedFrameEvent.encoder_cpu_percent_utilized)
}

// optional int32 idealized_bitrate_percent_utilized = 11;
inline bool AggregatedFrameEvent::has_idealized_bitrate_percent_utilized() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AggregatedFrameEvent::clear_idealized_bitrate_percent_utilized() {
  idealized_bitrate_percent_utilized_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AggregatedFrameEvent::idealized_bitrate_percent_utilized() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.AggregatedFrameEvent.idealized_bitrate_percent_utilized)
  return idealized_bitrate_percent_utilized_;
}
inline void AggregatedFrameEvent::set_idealized_bitrate_percent_utilized(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  idealized_bitrate_percent_utilized_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.AggregatedFrameEvent.idealized_bitrate_percent_utilized)
}

// -------------------------------------------------------------------

// BasePacketEvent

// optional int32 packet_id = 1;
inline bool BasePacketEvent::has_packet_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BasePacketEvent::clear_packet_id() {
  packet_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BasePacketEvent::packet_id() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.BasePacketEvent.packet_id)
  return packet_id_;
}
inline void BasePacketEvent::set_packet_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  packet_id_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.BasePacketEvent.packet_id)
}

// repeated .media.cast.proto.EventType event_type = 2 [packed = true];
inline int BasePacketEvent::event_type_size() const {
  return event_type_.size();
}
inline void BasePacketEvent::clear_event_type() {
  event_type_.Clear();
}
inline ::media::cast::proto::EventType BasePacketEvent::event_type(int index) const {
  // @@protoc_insertion_point(field_get:media.cast.proto.BasePacketEvent.event_type)
  return static_cast< ::media::cast::proto::EventType >(event_type_.Get(index));
}
inline void BasePacketEvent::set_event_type(int index, ::media::cast::proto::EventType value) {
  assert(::media::cast::proto::EventType_IsValid(value));
  event_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:media.cast.proto.BasePacketEvent.event_type)
}
inline void BasePacketEvent::add_event_type(::media::cast::proto::EventType value) {
  assert(::media::cast::proto::EventType_IsValid(value));
  event_type_.Add(value);
  // @@protoc_insertion_point(field_add:media.cast.proto.BasePacketEvent.event_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
BasePacketEvent::event_type() const {
  // @@protoc_insertion_point(field_list:media.cast.proto.BasePacketEvent.event_type)
  return event_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
BasePacketEvent::mutable_event_type() {
  // @@protoc_insertion_point(field_mutable_list:media.cast.proto.BasePacketEvent.event_type)
  return &event_type_;
}

// repeated int64 event_timestamp_ms = 3 [packed = true];
inline int BasePacketEvent::event_timestamp_ms_size() const {
  return event_timestamp_ms_.size();
}
inline void BasePacketEvent::clear_event_timestamp_ms() {
  event_timestamp_ms_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BasePacketEvent::event_timestamp_ms(int index) const {
  // @@protoc_insertion_point(field_get:media.cast.proto.BasePacketEvent.event_timestamp_ms)
  return event_timestamp_ms_.Get(index);
}
inline void BasePacketEvent::set_event_timestamp_ms(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  event_timestamp_ms_.Set(index, value);
  // @@protoc_insertion_point(field_set:media.cast.proto.BasePacketEvent.event_timestamp_ms)
}
inline void BasePacketEvent::add_event_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  event_timestamp_ms_.Add(value);
  // @@protoc_insertion_point(field_add:media.cast.proto.BasePacketEvent.event_timestamp_ms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
BasePacketEvent::event_timestamp_ms() const {
  // @@protoc_insertion_point(field_list:media.cast.proto.BasePacketEvent.event_timestamp_ms)
  return event_timestamp_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
BasePacketEvent::mutable_event_timestamp_ms() {
  // @@protoc_insertion_point(field_mutable_list:media.cast.proto.BasePacketEvent.event_timestamp_ms)
  return &event_timestamp_ms_;
}

// optional int32 size = 4;
inline bool BasePacketEvent::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BasePacketEvent::clear_size() {
  size_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BasePacketEvent::size() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.BasePacketEvent.size)
  return size_;
}
inline void BasePacketEvent::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  size_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.BasePacketEvent.size)
}

// -------------------------------------------------------------------

// AggregatedPacketEvent

// optional uint32 relative_rtp_timestamp = 1;
inline bool AggregatedPacketEvent::has_relative_rtp_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AggregatedPacketEvent::clear_relative_rtp_timestamp() {
  relative_rtp_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AggregatedPacketEvent::relative_rtp_timestamp() const {
  // @@protoc_insertion_point(field_get:media.cast.proto.AggregatedPacketEvent.relative_rtp_timestamp)
  return relative_rtp_timestamp_;
}
inline void AggregatedPacketEvent::set_relative_rtp_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  relative_rtp_timestamp_ = value;
  // @@protoc_insertion_point(field_set:media.cast.proto.AggregatedPacketEvent.relative_rtp_timestamp)
}

// repeated .media.cast.proto.BasePacketEvent base_packet_event = 2;
inline int AggregatedPacketEvent::base_packet_event_size() const {
  return base_packet_event_.size();
}
inline void AggregatedPacketEvent::clear_base_packet_event() {
  base_packet_event_.Clear();
}
inline ::media::cast::proto::BasePacketEvent* AggregatedPacketEvent::mutable_base_packet_event(int index) {
  // @@protoc_insertion_point(field_mutable:media.cast.proto.AggregatedPacketEvent.base_packet_event)
  return base_packet_event_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media::cast::proto::BasePacketEvent >*
AggregatedPacketEvent::mutable_base_packet_event() {
  // @@protoc_insertion_point(field_mutable_list:media.cast.proto.AggregatedPacketEvent.base_packet_event)
  return &base_packet_event_;
}
inline const ::media::cast::proto::BasePacketEvent& AggregatedPacketEvent::base_packet_event(int index) const {
  // @@protoc_insertion_point(field_get:media.cast.proto.AggregatedPacketEvent.base_packet_event)
  return base_packet_event_.Get(index);
}
inline ::media::cast::proto::BasePacketEvent* AggregatedPacketEvent::add_base_packet_event() {
  // @@protoc_insertion_point(field_add:media.cast.proto.AggregatedPacketEvent.base_packet_event)
  return base_packet_event_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media::cast::proto::BasePacketEvent >&
AggregatedPacketEvent::base_packet_event() const {
  // @@protoc_insertion_point(field_list:media.cast.proto.AggregatedPacketEvent.base_packet_event)
  return base_packet_event_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cast
}  // namespace media

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::media::cast::proto::EventType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_raw_5fevents_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raw_events.proto

#include "raw_events.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_raw_5fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BasePacketEvent_raw_5fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_raw_5fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeneralDescription_raw_5fevents_2eproto;
namespace media {
namespace cast {
namespace proto {
class GeneralDescriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeneralDescription> _instance;
} _GeneralDescription_default_instance_;
class LogMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogMetadata> _instance;
} _LogMetadata_default_instance_;
class AggregatedFrameEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AggregatedFrameEvent> _instance;
} _AggregatedFrameEvent_default_instance_;
class BasePacketEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BasePacketEvent> _instance;
} _BasePacketEvent_default_instance_;
class AggregatedPacketEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AggregatedPacketEvent> _instance;
} _AggregatedPacketEvent_default_instance_;
}  // namespace proto
}  // namespace cast
}  // namespace media
static void InitDefaultsscc_info_AggregatedFrameEvent_raw_5fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::cast::proto::_AggregatedFrameEvent_default_instance_;
    new (ptr) ::media::cast::proto::AggregatedFrameEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::cast::proto::AggregatedFrameEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AggregatedFrameEvent_raw_5fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AggregatedFrameEvent_raw_5fevents_2eproto}, {}};

static void InitDefaultsscc_info_AggregatedPacketEvent_raw_5fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::cast::proto::_AggregatedPacketEvent_default_instance_;
    new (ptr) ::media::cast::proto::AggregatedPacketEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::cast::proto::AggregatedPacketEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AggregatedPacketEvent_raw_5fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AggregatedPacketEvent_raw_5fevents_2eproto}, {
      &scc_info_BasePacketEvent_raw_5fevents_2eproto.base,}};

static void InitDefaultsscc_info_BasePacketEvent_raw_5fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::cast::proto::_BasePacketEvent_default_instance_;
    new (ptr) ::media::cast::proto::BasePacketEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::cast::proto::BasePacketEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BasePacketEvent_raw_5fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BasePacketEvent_raw_5fevents_2eproto}, {}};

static void InitDefaultsscc_info_GeneralDescription_raw_5fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::cast::proto::_GeneralDescription_default_instance_;
    new (ptr) ::media::cast::proto::GeneralDescription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::cast::proto::GeneralDescription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeneralDescription_raw_5fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GeneralDescription_raw_5fevents_2eproto}, {}};

static void InitDefaultsscc_info_LogMetadata_raw_5fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::media::cast::proto::_LogMetadata_default_instance_;
    new (ptr) ::media::cast::proto::LogMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::media::cast::proto::LogMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogMetadata_raw_5fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LogMetadata_raw_5fevents_2eproto}, {
      &scc_info_GeneralDescription_raw_5fevents_2eproto.base,}};

namespace media {
namespace cast {
namespace proto {
bool EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> EventType_strings[38] = {};

static const char EventType_names[] =
  "AUDIO_ACK_SENT"
  "AUDIO_FRAME_CAPTURE_BEGIN"
  "AUDIO_FRAME_CAPTURE_END"
  "AUDIO_FRAME_DECODED"
  "AUDIO_FRAME_ENCODED"
  "AUDIO_PACKET_RECEIVED"
  "AUDIO_PACKET_RETRANSMITTED"
  "AUDIO_PACKET_SENT_TO_NETWORK"
  "AUDIO_PLAYOUT_DELAY"
  "DUPLICATE_AUDIO_PACKET_RECEIVED"
  "DUPLICATE_VIDEO_PACKET_RECEIVED"
  "FRAME_ACK_RECEIVED"
  "FRAME_ACK_SENT"
  "FRAME_CAPTURE_BEGIN"
  "FRAME_CAPTURE_END"
  "FRAME_DECODED"
  "FRAME_ENCODED"
  "FRAME_PLAYOUT"
  "JITTER_MS"
  "PACKET_LOSS"
  "PACKET_RECEIVED"
  "PACKET_RETRANSMITTED"
  "PACKET_RTX_REJECTED"
  "PACKET_SENT_TO_NETWORK"
  "REMB_BITRATE"
  "RTT_MS"
  "UNKNOWN"
  "VIDEO_ACK_RECEIVED"
  "VIDEO_ACK_SENT"
  "VIDEO_FRAME_CAPTURE_BEGIN"
  "VIDEO_FRAME_CAPTURE_END"
  "VIDEO_FRAME_DECODED"
  "VIDEO_FRAME_ENCODED"
  "VIDEO_FRAME_SENT_TO_ENCODER"
  "VIDEO_PACKET_RECEIVED"
  "VIDEO_PACKET_RETRANSMITTED"
  "VIDEO_PACKET_SENT_TO_NETWORK"
  "VIDEO_RENDER_DELAY";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry EventType_entries[] = {
  { {EventType_names + 0, 14}, 6 },
  { {EventType_names + 14, 25}, 9 },
  { {EventType_names + 39, 23}, 8 },
  { {EventType_names + 62, 19}, 12 },
  { {EventType_names + 81, 19}, 10 },
  { {EventType_names + 100, 21}, 25 },
  { {EventType_names + 121, 26}, 23 },
  { {EventType_names + 147, 28}, 21 },
  { {EventType_names + 175, 19}, 11 },
  { {EventType_names + 194, 31}, 27 },
  { {EventType_names + 225, 31}, 28 },
  { {EventType_names + 256, 18}, 32 },
  { {EventType_names + 274, 14}, 33 },
  { {EventType_names + 288, 19}, 29 },
  { {EventType_names + 307, 17}, 30 },
  { {EventType_names + 324, 13}, 34 },
  { {EventType_names + 337, 13}, 31 },
  { {EventType_names + 350, 13}, 35 },
  { {EventType_names + 363, 9}, 3 },
  { {EventType_names + 372, 11}, 2 },
  { {EventType_names + 383, 15}, 38 },
  { {EventType_names + 398, 20}, 37 },
  { {EventType_names + 418, 19}, 39 },
  { {EventType_names + 437, 22}, 36 },
  { {EventType_names + 459, 12}, 5 },
  { {EventType_names + 471, 6}, 1 },
  { {EventType_names + 477, 7}, 0 },
  { {EventType_names + 484, 18}, 4 },
  { {EventType_names + 502, 14}, 7 },
  { {EventType_names + 516, 25}, 13 },
  { {EventType_names + 541, 23}, 14 },
  { {EventType_names + 564, 19}, 17 },
  { {EventType_names + 583, 19}, 16 },
  { {EventType_names + 602, 27}, 15 },
  { {EventType_names + 629, 21}, 26 },
  { {EventType_names + 650, 26}, 24 },
  { {EventType_names + 676, 28}, 22 },
  { {EventType_names + 704, 18}, 18 },
};

static const int EventType_entries_by_number[] = {
  26, // 0 -> UNKNOWN
  25, // 1 -> RTT_MS
  19, // 2 -> PACKET_LOSS
  18, // 3 -> JITTER_MS
  27, // 4 -> VIDEO_ACK_RECEIVED
  24, // 5 -> REMB_BITRATE
  0, // 6 -> AUDIO_ACK_SENT
  28, // 7 -> VIDEO_ACK_SENT
  2, // 8 -> AUDIO_FRAME_CAPTURE_END
  1, // 9 -> AUDIO_FRAME_CAPTURE_BEGIN
  4, // 10 -> AUDIO_FRAME_ENCODED
  8, // 11 -> AUDIO_PLAYOUT_DELAY
  3, // 12 -> AUDIO_FRAME_DECODED
  29, // 13 -> VIDEO_FRAME_CAPTURE_BEGIN
  30, // 14 -> VIDEO_FRAME_CAPTURE_END
  33, // 15 -> VIDEO_FRAME_SENT_TO_ENCODER
  32, // 16 -> VIDEO_FRAME_ENCODED
  31, // 17 -> VIDEO_FRAME_DECODED
  37, // 18 -> VIDEO_RENDER_DELAY
  7, // 21 -> AUDIO_PACKET_SENT_TO_NETWORK
  36, // 22 -> VIDEO_PACKET_SENT_TO_NETWORK
  6, // 23 -> AUDIO_PACKET_RETRANSMITTED
  35, // 24 -> VIDEO_PACKET_RETRANSMITTED
  5, // 25 -> AUDIO_PACKET_RECEIVED
  34, // 26 -> VIDEO_PACKET_RECEIVED
  9, // 27 -> DUPLICATE_AUDIO_PACKET_RECEIVED
  10, // 28 -> DUPLICATE_VIDEO_PACKET_RECEIVED
  13, // 29 -> FRAME_CAPTURE_BEGIN
  14, // 30 -> FRAME_CAPTURE_END
  16, // 31 -> FRAME_ENCODED
  11, // 32 -> FRAME_ACK_RECEIVED
  12, // 33 -> FRAME_ACK_SENT
  15, // 34 -> FRAME_DECODED
  17, // 35 -> FRAME_PLAYOUT
  23, // 36 -> PACKET_SENT_TO_NETWORK
  21, // 37 -> PACKET_RETRANSMITTED
  20, // 38 -> PACKET_RECEIVED
  22, // 39 -> PACKET_RTX_REJECTED
};

const std::string& EventType_Name(
    EventType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          EventType_entries,
          EventType_entries_by_number,
          38, EventType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      EventType_entries,
      EventType_entries_by_number,
      38, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     EventType_strings[idx].get();
}
bool EventType_Parse(
    const std::string& name, EventType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      EventType_entries, 38, name, &int_value);
  if (success) {
    *value = static_cast<EventType>(int_value);
  }
  return success;
}

// ===================================================================

void GeneralDescription::InitAsDefaultInstance() {
}
class GeneralDescription::_Internal {
 public:
  using HasBits = decltype(std::declval<GeneralDescription>()._has_bits_);
  static void set_has_product(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_product_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_os(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

GeneralDescription::GeneralDescription()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.cast.proto.GeneralDescription)
}
GeneralDescription::GeneralDescription(const GeneralDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  product_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_product()) {
    product_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.product_);
  }
  product_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_product_version()) {
    product_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.product_version_);
  }
  os_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_os()) {
    os_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.os_);
  }
  // @@protoc_insertion_point(copy_constructor:media.cast.proto.GeneralDescription)
}

void GeneralDescription::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeneralDescription_raw_5fevents_2eproto.base);
  product_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GeneralDescription::~GeneralDescription() {
  // @@protoc_insertion_point(destructor:media.cast.proto.GeneralDescription)
  SharedDtor();
}

void GeneralDescription::SharedDtor() {
  product_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  product_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GeneralDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeneralDescription& GeneralDescription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeneralDescription_raw_5fevents_2eproto.base);
  return *internal_default_instance();
}


void GeneralDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:media.cast.proto.GeneralDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      product_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      product_version_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      os_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeneralDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string product = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_product(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string product_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_product_version(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string os = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_os(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeneralDescription::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.cast.proto.GeneralDescription)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string product = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_product()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string product_version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_product_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string os = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.cast.proto.GeneralDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.cast.proto.GeneralDescription)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeneralDescription::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.cast.proto.GeneralDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string product = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->product(), output);
  }

  // optional string product_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->product_version(), output);
  }

  // optional string os = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->os(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.cast.proto.GeneralDescription)
}

size_t GeneralDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.cast.proto.GeneralDescription)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string product = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->product());
    }

    // optional string product_version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->product_version());
    }

    // optional string os = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->os());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeneralDescription::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const GeneralDescription*>(
      &from));
}

void GeneralDescription::MergeFrom(const GeneralDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.cast.proto.GeneralDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      product_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.product_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      product_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.product_version_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      os_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.os_);
    }
  }
}

void GeneralDescription::CopyFrom(const GeneralDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.cast.proto.GeneralDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneralDescription::IsInitialized() const {
  return true;
}

void GeneralDescription::InternalSwap(GeneralDescription* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  product_.Swap(&other->product_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  product_version_.Swap(&other->product_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  os_.Swap(&other->os_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

std::string GeneralDescription::GetTypeName() const {
  return "media.cast.proto.GeneralDescription";
}


// ===================================================================

void LogMetadata::InitAsDefaultInstance() {
  ::media::cast::proto::_LogMetadata_default_instance_._instance.get_mutable()->general_description_ = const_cast< ::media::cast::proto::GeneralDescription*>(
      ::media::cast::proto::GeneralDescription::internal_default_instance());
}
class LogMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<LogMetadata>()._has_bits_);
  static void set_has_is_audio(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_first_rtp_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num_frame_events(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num_packet_events(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_reference_timestamp_ms_at_unix_epoch(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_extra_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::media::cast::proto::GeneralDescription& general_description(const LogMetadata* msg);
  static void set_has_general_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::media::cast::proto::GeneralDescription&
LogMetadata::_Internal::general_description(const LogMetadata* msg) {
  return *msg->general_description_;
}
LogMetadata::LogMetadata()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.cast.proto.LogMetadata)
}
LogMetadata::LogMetadata(const LogMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_extra_data()) {
    extra_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extra_data_);
  }
  if (from.has_general_description()) {
    general_description_ = new ::media::cast::proto::GeneralDescription(*from.general_description_);
  } else {
    general_description_ = nullptr;
  }
  ::memcpy(&is_audio_, &from.is_audio_,
    static_cast<size_t>(reinterpret_cast<char*>(&reference_timestamp_ms_at_unix_epoch_) -
    reinterpret_cast<char*>(&is_audio_)) + sizeof(reference_timestamp_ms_at_unix_epoch_));
  // @@protoc_insertion_point(copy_constructor:media.cast.proto.LogMetadata)
}

void LogMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogMetadata_raw_5fevents_2eproto.base);
  extra_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&general_description_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reference_timestamp_ms_at_unix_epoch_) -
      reinterpret_cast<char*>(&general_description_)) + sizeof(reference_timestamp_ms_at_unix_epoch_));
}

LogMetadata::~LogMetadata() {
  // @@protoc_insertion_point(destructor:media.cast.proto.LogMetadata)
  SharedDtor();
}

void LogMetadata::SharedDtor() {
  extra_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete general_description_;
}

void LogMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogMetadata& LogMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogMetadata_raw_5fevents_2eproto.base);
  return *internal_default_instance();
}


void LogMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:media.cast.proto.LogMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      extra_data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(general_description_ != nullptr);
      general_description_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&is_audio_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reference_timestamp_ms_at_unix_epoch_) -
        reinterpret_cast<char*>(&is_audio_)) + sizeof(reference_timestamp_ms_at_unix_epoch_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LogMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_audio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_audio(&has_bits);
          is_audio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 first_rtp_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_first_rtp_timestamp(&has_bits);
          first_rtp_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_frame_events = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_frame_events(&has_bits);
          num_frame_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 num_packet_events = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num_packet_events(&has_bits);
          num_packet_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 reference_timestamp_ms_at_unix_epoch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_reference_timestamp_ms_at_unix_epoch(&has_bits);
          reference_timestamp_ms_at_unix_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string extra_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_extra_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .media.cast.proto.GeneralDescription general_description = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_general_description(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LogMetadata::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.cast.proto.LogMetadata)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_audio = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_is_audio(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_audio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 first_rtp_timestamp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_first_rtp_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_rtp_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_frame_events = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_num_frame_events(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_frame_events_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_packet_events = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_num_packet_events(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_packet_events_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 reference_timestamp_ms_at_unix_epoch = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_reference_timestamp_ms_at_unix_epoch(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &reference_timestamp_ms_at_unix_epoch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string extra_data = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_extra_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .media.cast.proto.GeneralDescription general_description = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_general_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.cast.proto.LogMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.cast.proto.LogMetadata)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LogMetadata::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.cast.proto.LogMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_audio = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->is_audio(), output);
  }

  // optional uint32 first_rtp_timestamp = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->first_rtp_timestamp(), output);
  }

  // optional int32 num_frame_events = 3;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->num_frame_events(), output);
  }

  // optional int32 num_packet_events = 4;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->num_packet_events(), output);
  }

  // optional int64 reference_timestamp_ms_at_unix_epoch = 5;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->reference_timestamp_ms_at_unix_epoch(), output);
  }

  // optional string extra_data = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->extra_data(), output);
  }

  // optional .media.cast.proto.GeneralDescription general_description = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      7, _Internal::general_description(this), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.cast.proto.LogMetadata)
}

size_t LogMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.cast.proto.LogMetadata)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string extra_data = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->extra_data());
    }

    // optional .media.cast.proto.GeneralDescription general_description = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *general_description_);
    }

    // optional bool is_audio = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 first_rtp_timestamp = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->first_rtp_timestamp());
    }

    // optional int32 num_frame_events = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_frame_events());
    }

    // optional int32 num_packet_events = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->num_packet_events());
    }

    // optional int64 reference_timestamp_ms_at_unix_epoch = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->reference_timestamp_ms_at_unix_epoch());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LogMetadata*>(
      &from));
}

void LogMetadata::MergeFrom(const LogMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.cast.proto.LogMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      extra_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extra_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_general_description()->::media::cast::proto::GeneralDescription::MergeFrom(from.general_description());
    }
    if (cached_has_bits & 0x00000004u) {
      is_audio_ = from.is_audio_;
    }
    if (cached_has_bits & 0x00000008u) {
      first_rtp_timestamp_ = from.first_rtp_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      num_frame_events_ = from.num_frame_events_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_packet_events_ = from.num_packet_events_;
    }
    if (cached_has_bits & 0x00000040u) {
      reference_timestamp_ms_at_unix_epoch_ = from.reference_timestamp_ms_at_unix_epoch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LogMetadata::CopyFrom(const LogMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.cast.proto.LogMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMetadata::IsInitialized() const {
  return true;
}

void LogMetadata::InternalSwap(LogMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  extra_data_.Swap(&other->extra_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(general_description_, other->general_description_);
  swap(is_audio_, other->is_audio_);
  swap(first_rtp_timestamp_, other->first_rtp_timestamp_);
  swap(num_frame_events_, other->num_frame_events_);
  swap(num_packet_events_, other->num_packet_events_);
  swap(reference_timestamp_ms_at_unix_epoch_, other->reference_timestamp_ms_at_unix_epoch_);
}

std::string LogMetadata::GetTypeName() const {
  return "media.cast.proto.LogMetadata";
}


// ===================================================================

void AggregatedFrameEvent::InitAsDefaultInstance() {
}
class AggregatedFrameEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<AggregatedFrameEvent>()._has_bits_);
  static void set_has_relative_rtp_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_encoded_frame_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_delay_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_key_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_target_bitrate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_encoder_cpu_percent_utilized(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_idealized_bitrate_percent_utilized(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

AggregatedFrameEvent::AggregatedFrameEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.cast.proto.AggregatedFrameEvent)
}
AggregatedFrameEvent::AggregatedFrameEvent(const AggregatedFrameEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      event_type_(from.event_type_),
      event_timestamp_ms_(from.event_timestamp_ms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&relative_rtp_timestamp_, &from.relative_rtp_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&idealized_bitrate_percent_utilized_) -
    reinterpret_cast<char*>(&relative_rtp_timestamp_)) + sizeof(idealized_bitrate_percent_utilized_));
  // @@protoc_insertion_point(copy_constructor:media.cast.proto.AggregatedFrameEvent)
}

void AggregatedFrameEvent::SharedCtor() {
  ::memset(&relative_rtp_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idealized_bitrate_percent_utilized_) -
      reinterpret_cast<char*>(&relative_rtp_timestamp_)) + sizeof(idealized_bitrate_percent_utilized_));
}

AggregatedFrameEvent::~AggregatedFrameEvent() {
  // @@protoc_insertion_point(destructor:media.cast.proto.AggregatedFrameEvent)
  SharedDtor();
}

void AggregatedFrameEvent::SharedDtor() {
}

void AggregatedFrameEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AggregatedFrameEvent& AggregatedFrameEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregatedFrameEvent_raw_5fevents_2eproto.base);
  return *internal_default_instance();
}


void AggregatedFrameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:media.cast.proto.AggregatedFrameEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_type_.Clear();
  event_timestamp_ms_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&relative_rtp_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&encoder_cpu_percent_utilized_) -
        reinterpret_cast<char*>(&relative_rtp_timestamp_)) + sizeof(encoder_cpu_percent_utilized_));
  }
  idealized_bitrate_percent_utilized_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AggregatedFrameEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 relative_rtp_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_relative_rtp_timestamp(&has_bits);
          relative_rtp_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .media.cast.proto.EventType event_type = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_event_type(), ptr, ctx, ::media::cast::proto::EventType_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::media::cast::proto::EventType_IsValid(val))) {
            add_event_type(static_cast<::media::cast::proto::EventType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated int64 event_timestamp_ms = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_event_timestamp_ms(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_event_timestamp_ms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 encoded_frame_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_encoded_frame_size(&has_bits);
          encoded_frame_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 delay_millis = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_delay_millis(&has_bits);
          delay_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool key_frame = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_key_frame(&has_bits);
          key_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 target_bitrate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_target_bitrate(&has_bits);
          target_bitrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 width = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 height = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 encoder_cpu_percent_utilized = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_encoder_cpu_percent_utilized(&has_bits);
          encoder_cpu_percent_utilized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 idealized_bitrate_percent_utilized = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_idealized_bitrate_percent_utilized(&has_bits);
          idealized_bitrate_percent_utilized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AggregatedFrameEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.cast.proto.AggregatedFrameEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 relative_rtp_timestamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_relative_rtp_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relative_rtp_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .media.cast.proto.EventType event_type = 2 [packed = true];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::media::cast::proto::EventType_IsValid(value)) {
              add_event_type(static_cast< ::media::cast::proto::EventType >(value));
            } else {
              unknown_fields_stream.WriteVarint32(tag);
              unknown_fields_stream.WriteVarint32(
                  static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
            }
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::media::cast::proto::EventType_IsValid(value)) {
            add_event_type(static_cast< ::media::cast::proto::EventType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 event_timestamp_ms = 3 [packed = true];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_event_timestamp_ms())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_event_timestamp_ms())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 encoded_frame_size = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_encoded_frame_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &encoded_frame_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 delay_millis = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_delay_millis(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &delay_millis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool key_frame = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_key_frame(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &key_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 target_bitrate = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_target_bitrate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_bitrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_width(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 height = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_height(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 encoder_cpu_percent_utilized = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_encoder_cpu_percent_utilized(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &encoder_cpu_percent_utilized_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 idealized_bitrate_percent_utilized = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          _Internal::set_has_idealized_bitrate_percent_utilized(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &idealized_bitrate_percent_utilized_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.cast.proto.AggregatedFrameEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.cast.proto.AggregatedFrameEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AggregatedFrameEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.cast.proto.AggregatedFrameEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 relative_rtp_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->relative_rtp_timestamp(), output);
  }

  // repeated .media.cast.proto.EventType event_type = 2 [packed = true];
  if (this->event_type_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_event_type_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->event_type_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->event_type(i), output);
  }

  // repeated int64 event_timestamp_ms = 3 [packed = true];
  if (this->event_timestamp_ms_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_event_timestamp_ms_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->event_timestamp_ms_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->event_timestamp_ms(i), output);
  }

  // optional int32 encoded_frame_size = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->encoded_frame_size(), output);
  }

  // optional int64 delay_millis = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->delay_millis(), output);
  }

  // optional bool key_frame = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->key_frame(), output);
  }

  // optional int32 target_bitrate = 7;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->target_bitrate(), output);
  }

  // optional int32 width = 8;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->width(), output);
  }

  // optional int32 height = 9;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->height(), output);
  }

  // optional int32 encoder_cpu_percent_utilized = 10;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->encoder_cpu_percent_utilized(), output);
  }

  // optional int32 idealized_bitrate_percent_utilized = 11;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->idealized_bitrate_percent_utilized(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.cast.proto.AggregatedFrameEvent)
}

size_t AggregatedFrameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.cast.proto.AggregatedFrameEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .media.cast.proto.EventType event_type = 2 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->event_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->event_type(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _event_type_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 event_timestamp_ms = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->event_timestamp_ms_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _event_timestamp_ms_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 relative_rtp_timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->relative_rtp_timestamp());
    }

    // optional int32 encoded_frame_size = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->encoded_frame_size());
    }

    // optional int64 delay_millis = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->delay_millis());
    }

    // optional bool key_frame = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional int32 target_bitrate = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->target_bitrate());
    }

    // optional int32 width = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // optional int32 height = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // optional int32 encoder_cpu_percent_utilized = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->encoder_cpu_percent_utilized());
    }

  }
  // optional int32 idealized_bitrate_percent_utilized = 11;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->idealized_bitrate_percent_utilized());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AggregatedFrameEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AggregatedFrameEvent*>(
      &from));
}

void AggregatedFrameEvent::MergeFrom(const AggregatedFrameEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.cast.proto.AggregatedFrameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  event_type_.MergeFrom(from.event_type_);
  event_timestamp_ms_.MergeFrom(from.event_timestamp_ms_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      relative_rtp_timestamp_ = from.relative_rtp_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      encoded_frame_size_ = from.encoded_frame_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      delay_millis_ = from.delay_millis_;
    }
    if (cached_has_bits & 0x00000008u) {
      key_frame_ = from.key_frame_;
    }
    if (cached_has_bits & 0x00000010u) {
      target_bitrate_ = from.target_bitrate_;
    }
    if (cached_has_bits & 0x00000020u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000040u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000080u) {
      encoder_cpu_percent_utilized_ = from.encoder_cpu_percent_utilized_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_idealized_bitrate_percent_utilized(from.idealized_bitrate_percent_utilized());
  }
}

void AggregatedFrameEvent::CopyFrom(const AggregatedFrameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.cast.proto.AggregatedFrameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregatedFrameEvent::IsInitialized() const {
  return true;
}

void AggregatedFrameEvent::InternalSwap(AggregatedFrameEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  event_type_.InternalSwap(&other->event_type_);
  event_timestamp_ms_.InternalSwap(&other->event_timestamp_ms_);
  swap(relative_rtp_timestamp_, other->relative_rtp_timestamp_);
  swap(encoded_frame_size_, other->encoded_frame_size_);
  swap(delay_millis_, other->delay_millis_);
  swap(key_frame_, other->key_frame_);
  swap(target_bitrate_, other->target_bitrate_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(encoder_cpu_percent_utilized_, other->encoder_cpu_percent_utilized_);
  swap(idealized_bitrate_percent_utilized_, other->idealized_bitrate_percent_utilized_);
}

std::string AggregatedFrameEvent::GetTypeName() const {
  return "media.cast.proto.AggregatedFrameEvent";
}


// ===================================================================

void BasePacketEvent::InitAsDefaultInstance() {
}
class BasePacketEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<BasePacketEvent>()._has_bits_);
  static void set_has_packet_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BasePacketEvent::BasePacketEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.cast.proto.BasePacketEvent)
}
BasePacketEvent::BasePacketEvent(const BasePacketEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      event_type_(from.event_type_),
      event_timestamp_ms_(from.event_timestamp_ms_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&packet_id_, &from.packet_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&packet_id_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:media.cast.proto.BasePacketEvent)
}

void BasePacketEvent::SharedCtor() {
  ::memset(&packet_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&packet_id_)) + sizeof(size_));
}

BasePacketEvent::~BasePacketEvent() {
  // @@protoc_insertion_point(destructor:media.cast.proto.BasePacketEvent)
  SharedDtor();
}

void BasePacketEvent::SharedDtor() {
}

void BasePacketEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BasePacketEvent& BasePacketEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BasePacketEvent_raw_5fevents_2eproto.base);
  return *internal_default_instance();
}


void BasePacketEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:media.cast.proto.BasePacketEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_type_.Clear();
  event_timestamp_ms_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&packet_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&packet_id_)) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BasePacketEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 packet_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_packet_id(&has_bits);
          packet_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .media.cast.proto.EventType event_type = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_event_type(), ptr, ctx, ::media::cast::proto::EventType_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::media::cast::proto::EventType_IsValid(val))) {
            add_event_type(static_cast<::media::cast::proto::EventType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated int64 event_timestamp_ms = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_event_timestamp_ms(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_event_timestamp_ms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BasePacketEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.cast.proto.BasePacketEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 packet_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_packet_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &packet_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .media.cast.proto.EventType event_type = 2 [packed = true];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::media::cast::proto::EventType_IsValid(value)) {
              add_event_type(static_cast< ::media::cast::proto::EventType >(value));
            } else {
              unknown_fields_stream.WriteVarint32(tag);
              unknown_fields_stream.WriteVarint32(
                  static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
            }
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::media::cast::proto::EventType_IsValid(value)) {
            add_event_type(static_cast< ::media::cast::proto::EventType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(tag);
            unknown_fields_stream.WriteVarint32(
                static_cast<::PROTOBUF_NAMESPACE_ID::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 event_timestamp_ms = 3 [packed = true];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_event_timestamp_ms())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 26u, input, this->mutable_event_timestamp_ms())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 size = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.cast.proto.BasePacketEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.cast.proto.BasePacketEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BasePacketEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.cast.proto.BasePacketEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 packet_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->packet_id(), output);
  }

  // repeated .media.cast.proto.EventType event_type = 2 [packed = true];
  if (this->event_type_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_event_type_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->event_type_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->event_type(i), output);
  }

  // repeated int64 event_timestamp_ms = 3 [packed = true];
  if (this->event_timestamp_ms_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_event_timestamp_ms_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->event_timestamp_ms_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->event_timestamp_ms(i), output);
  }

  // optional int32 size = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->size(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.cast.proto.BasePacketEvent)
}

size_t BasePacketEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.cast.proto.BasePacketEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .media.cast.proto.EventType event_type = 2 [packed = true];
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->event_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->event_type(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _event_type_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 event_timestamp_ms = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->event_timestamp_ms_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _event_timestamp_ms_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 packet_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->packet_id());
    }

    // optional int32 size = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->size());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BasePacketEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const BasePacketEvent*>(
      &from));
}

void BasePacketEvent::MergeFrom(const BasePacketEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.cast.proto.BasePacketEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  event_type_.MergeFrom(from.event_type_);
  event_timestamp_ms_.MergeFrom(from.event_timestamp_ms_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      packet_id_ = from.packet_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BasePacketEvent::CopyFrom(const BasePacketEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.cast.proto.BasePacketEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasePacketEvent::IsInitialized() const {
  return true;
}

void BasePacketEvent::InternalSwap(BasePacketEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  event_type_.InternalSwap(&other->event_type_);
  event_timestamp_ms_.InternalSwap(&other->event_timestamp_ms_);
  swap(packet_id_, other->packet_id_);
  swap(size_, other->size_);
}

std::string BasePacketEvent::GetTypeName() const {
  return "media.cast.proto.BasePacketEvent";
}


// ===================================================================

void AggregatedPacketEvent::InitAsDefaultInstance() {
}
class AggregatedPacketEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<AggregatedPacketEvent>()._has_bits_);
  static void set_has_relative_rtp_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AggregatedPacketEvent::AggregatedPacketEvent()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:media.cast.proto.AggregatedPacketEvent)
}
AggregatedPacketEvent::AggregatedPacketEvent(const AggregatedPacketEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      base_packet_event_(from.base_packet_event_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  relative_rtp_timestamp_ = from.relative_rtp_timestamp_;
  // @@protoc_insertion_point(copy_constructor:media.cast.proto.AggregatedPacketEvent)
}

void AggregatedPacketEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AggregatedPacketEvent_raw_5fevents_2eproto.base);
  relative_rtp_timestamp_ = 0u;
}

AggregatedPacketEvent::~AggregatedPacketEvent() {
  // @@protoc_insertion_point(destructor:media.cast.proto.AggregatedPacketEvent)
  SharedDtor();
}

void AggregatedPacketEvent::SharedDtor() {
}

void AggregatedPacketEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AggregatedPacketEvent& AggregatedPacketEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AggregatedPacketEvent_raw_5fevents_2eproto.base);
  return *internal_default_instance();
}


void AggregatedPacketEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:media.cast.proto.AggregatedPacketEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  base_packet_event_.Clear();
  relative_rtp_timestamp_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AggregatedPacketEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 relative_rtp_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_relative_rtp_timestamp(&has_bits);
          relative_rtp_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .media.cast.proto.BasePacketEvent base_packet_event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_base_packet_event(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AggregatedPacketEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  ::PROTOBUF_NAMESPACE_ID::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:media.cast.proto.AggregatedPacketEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 relative_rtp_timestamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_relative_rtp_timestamp(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relative_rtp_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .media.cast.proto.BasePacketEvent base_packet_event = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_base_packet_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:media.cast.proto.AggregatedPacketEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:media.cast.proto.AggregatedPacketEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AggregatedPacketEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:media.cast.proto.AggregatedPacketEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 relative_rtp_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->relative_rtp_timestamp(), output);
  }

  // repeated .media.cast.proto.BasePacketEvent base_packet_event = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->base_packet_event_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessage(
      2,
      this->base_packet_event(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:media.cast.proto.AggregatedPacketEvent)
}

size_t AggregatedPacketEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.cast.proto.AggregatedPacketEvent)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .media.cast.proto.BasePacketEvent base_packet_event = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->base_packet_event_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->base_packet_event(static_cast<int>(i)));
    }
  }

  // optional uint32 relative_rtp_timestamp = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->relative_rtp_timestamp());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AggregatedPacketEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const AggregatedPacketEvent*>(
      &from));
}

void AggregatedPacketEvent::MergeFrom(const AggregatedPacketEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.cast.proto.AggregatedPacketEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  base_packet_event_.MergeFrom(from.base_packet_event_);
  if (from.has_relative_rtp_timestamp()) {
    set_relative_rtp_timestamp(from.relative_rtp_timestamp());
  }
}

void AggregatedPacketEvent::CopyFrom(const AggregatedPacketEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.cast.proto.AggregatedPacketEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AggregatedPacketEvent::IsInitialized() const {
  return true;
}

void AggregatedPacketEvent::InternalSwap(AggregatedPacketEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&base_packet_event_)->InternalSwap(CastToBase(&other->base_packet_event_));
  swap(relative_rtp_timestamp_, other->relative_rtp_timestamp_);
}

std::string AggregatedPacketEvent::GetTypeName() const {
  return "media.cast.proto.AggregatedPacketEvent";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace cast
}  // namespace media
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::media::cast::proto::GeneralDescription* Arena::CreateMaybeMessage< ::media::cast::proto::GeneralDescription >(Arena* arena) {
  return Arena::CreateInternal< ::media::cast::proto::GeneralDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::media::cast::proto::LogMetadata* Arena::CreateMaybeMessage< ::media::cast::proto::LogMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::media::cast::proto::LogMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::media::cast::proto::AggregatedFrameEvent* Arena::CreateMaybeMessage< ::media::cast::proto::AggregatedFrameEvent >(Arena* arena) {
  return Arena::CreateInternal< ::media::cast::proto::AggregatedFrameEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::media::cast::proto::BasePacketEvent* Arena::CreateMaybeMessage< ::media::cast::proto::BasePacketEvent >(Arena* arena) {
  return Arena::CreateInternal< ::media::cast::proto::BasePacketEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::media::cast::proto::AggregatedPacketEvent* Arena::CreateMaybeMessage< ::media::cast::proto::AggregatedPacketEvent >(Arena* arena) {
  return Arena::CreateInternal< ::media::cast::proto::AggregatedPacketEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// printing/mojom/print.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "printing/mojom/print.mojom-shared.h"

#include <utility>

#include "base/logging.h"
#include "base/stl_util.h"  // for base::size()
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"

#include "printing/mojom/print.mojom-params-data.h"
namespace printing {
namespace mojom {

std::ostream& operator<<(std::ostream& os, DuplexMode value) {
  switch(value) {
    case DuplexMode::kUnknownDuplexMode:
      return os << "DuplexMode::kUnknownDuplexMode";
    case DuplexMode::kSimplex:
      return os << "DuplexMode::kSimplex";
    case DuplexMode::kLongEdge:
      return os << "DuplexMode::kLongEdge";
    case DuplexMode::kShortEdge:
      return os << "DuplexMode::kShortEdge";
    default:
      return os << "Unknown DuplexMode value: " << static_cast<int32_t>(value);
  }
}

std::ostream& operator<<(std::ostream& os, PageOrientation value) {
  switch(value) {
    case PageOrientation::kUpright:
      return os << "PageOrientation::kUpright";
    case PageOrientation::kRotateLeft:
      return os << "PageOrientation::kRotateLeft";
    case PageOrientation::kRotateRight:
      return os << "PageOrientation::kRotateRight";
    default:
      return os << "Unknown PageOrientation value: " << static_cast<int32_t>(value);
  }
}

std::ostream& operator<<(std::ostream& os, PrintScalingOption value) {
  switch(value) {
    case PrintScalingOption::kNone:
      return os << "PrintScalingOption::kNone";
    case PrintScalingOption::kFitToPrintableArea:
      return os << "PrintScalingOption::kFitToPrintableArea";
    case PrintScalingOption::kSourceSize:
      return os << "PrintScalingOption::kSourceSize";
    case PrintScalingOption::kFitToPaper:
      return os << "PrintScalingOption::kFitToPaper";
    default:
      return os << "Unknown PrintScalingOption value: " << static_cast<int32_t>(value);
  }
}

std::ostream& operator<<(std::ostream& os, SkiaDocumentType value) {
  switch(value) {
    case SkiaDocumentType::kPDF:
      return os << "SkiaDocumentType::kPDF";
    case SkiaDocumentType::kMSKP:
      return os << "SkiaDocumentType::kMSKP";
    default:
      return os << "Unknown SkiaDocumentType value: " << static_cast<int32_t>(value);
  }
}

namespace internal {


// static
bool PageSizeMargins_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;

  if (!ValidateStructHeaderAndClaimMemory(data, validation_context))
    return false;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PageSizeMargins_Data* object = static_cast<const PageSizeMargins_Data*>(data);

  static constexpr struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 56 }};

  if (object->header_.version <=
          kVersionSizes[base::size(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = base::size(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        ReportValidationError(
            validation_context,
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
        return false;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[base::size(kVersionSizes) - 1].num_bytes) {
    ReportValidationError(
        validation_context,
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_STRUCT_HEADER);
    return false;
  }

  return true;
}

PageSizeMargins_Data::PageSizeMargins_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace printing
// printing/mojom/print.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "printing/mojom/print.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/hash/md5_constexpr.h"
#include "base/logging.h"
#include "base/run_loop.h"
#include "base/task/common/task_annotator.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_context.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"

#include "printing/mojom/print.mojom-params-data.h"
#include "printing/mojom/print.mojom-shared-message-ids.h"

#include "printing/mojom/print.mojom-import-headers.h"


#ifndef PRINTING_MOJOM_PRINT_MOJOM_JUMBO_H_
#define PRINTING_MOJOM_PRINT_MOJOM_JUMBO_H_
#endif
namespace printing {
namespace mojom {
PageSizeMargins::PageSizeMargins()
    : content_width(),
      content_height(),
      margin_top(),
      margin_right(),
      margin_bottom(),
      margin_left() {}

PageSizeMargins::PageSizeMargins(
    double content_width_in,
    double content_height_in,
    double margin_top_in,
    double margin_right_in,
    double margin_bottom_in,
    double margin_left_in)
    : content_width(std::move(content_width_in)),
      content_height(std::move(content_height_in)),
      margin_top(std::move(margin_top_in)),
      margin_right(std::move(margin_right_in)),
      margin_bottom(std::move(margin_bottom_in)),
      margin_left(std::move(margin_left_in)) {}

PageSizeMargins::~PageSizeMargins() = default;
size_t PageSizeMargins::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->content_width);
  seed = mojo::internal::Hash(seed, this->content_height);
  seed = mojo::internal::Hash(seed, this->margin_top);
  seed = mojo::internal::Hash(seed, this->margin_right);
  seed = mojo::internal::Hash(seed, this->margin_bottom);
  seed = mojo::internal::Hash(seed, this->margin_left);
  return seed;
}

bool PageSizeMargins::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
}  // namespace mojom
}  // namespace printing

namespace mojo {


// static
bool StructTraits<::printing::mojom::PageSizeMargins::DataView, ::printing::mojom::PageSizeMarginsPtr>::Read(
    ::printing::mojom::PageSizeMargins::DataView input,
    ::printing::mojom::PageSizeMarginsPtr* output) {
  bool success = true;
  ::printing::mojom::PageSizeMarginsPtr result(::printing::mojom::PageSizeMargins::New());
  
      if (success)
        result->content_width = input.content_width();
      if (success)
        result->content_height = input.content_height();
      if (success)
        result->margin_top = input.margin_top();
      if (success)
        result->margin_right = input.margin_right();
      if (success)
        result->margin_bottom = input.margin_bottom();
      if (success)
        result->margin_left = input.margin_left();
  *output = std::move(result);
  return success;
}

}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif